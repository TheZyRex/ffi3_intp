
thi-board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd88  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000020d0  0800cf18  0800cf18  0001cf18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800efe8  0800efe8  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800efe8  0800efe8  0001efe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eff0  0800eff0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eff0  0800eff0  0001eff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eff4  0800eff4  0001eff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800eff8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          00005448  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200054c8  200054c8  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00026cb3  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005a1d  00000000  00000000  00046da6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001f98  00000000  00000000  0004c7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000185c  00000000  00000000  0004e760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00007b59  00000000  00000000  0004ffbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00027d9a  00000000  00000000  00057b15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000df525  00000000  00000000  0007f8af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000088c0  00000000  00000000  0015edd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00167694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cf00 	.word	0x0800cf00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	0800cf00 	.word	0x0800cf00

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f001 f9f4 	bl	80018bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f846 	bl	8000564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f9f8 	bl	80008cc <MX_GPIO_Init>
  MX_I2C1_Init();
 80004dc:	f000 f8ac 	bl	8000638 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004e0:	f000 f8d8 	bl	8000694 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e4:	f000 f906 	bl	80006f4 <MX_SPI1_Init>
  MX_TIM7_Init();
 80004e8:	f000 f9b2 	bl	8000850 <MX_TIM7_Init>
  MX_TIM4_Init();
 80004ec:	f000 f938 	bl	8000760 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  mcpr_LCD_Init();
 80004f0:	f000 ff8e 	bl	8001410 <mcpr_LCD_Init>

  /* Enable TIM7 = TIM7->CR1 |= TIM_CR1_CEN */
  HAL_TIM_Base_Start(&htim7);
 80004f4:	4811      	ldr	r0, [pc, #68]	; (800053c <main+0x70>)
 80004f6:	f004 fdc7 	bl	8005088 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80004fa:	2104      	movs	r1, #4
 80004fc:	4810      	ldr	r0, [pc, #64]	; (8000540 <main+0x74>)
 80004fe:	f004 fef5 	bl	80052ec <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000502:	f009 f887 	bl	8009614 <osKernelInitialize>

  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of logQueue */
  logQueueHandle = osMessageQueueNew (16, sizeof(uint32_t), &logQueue_attributes);
 8000506:	4a0f      	ldr	r2, [pc, #60]	; (8000544 <main+0x78>)
 8000508:	2104      	movs	r1, #4
 800050a:	2010      	movs	r0, #16
 800050c:	f009 f979 	bl	8009802 <osMessageQueueNew>
 8000510:	4603      	mov	r3, r0
 8000512:	4a0d      	ldr	r2, [pc, #52]	; (8000548 <main+0x7c>)
 8000514:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of IOControl */
  IOControlHandle = osThreadNew(IOControlTask, NULL, &IOControl_attributes);
 8000516:	4a0d      	ldr	r2, [pc, #52]	; (800054c <main+0x80>)
 8000518:	2100      	movs	r1, #0
 800051a:	480d      	ldr	r0, [pc, #52]	; (8000550 <main+0x84>)
 800051c:	f009 f8c4 	bl	80096a8 <osThreadNew>
 8000520:	4603      	mov	r3, r0
 8000522:	4a0c      	ldr	r2, [pc, #48]	; (8000554 <main+0x88>)
 8000524:	6013      	str	r3, [r2, #0]

  /* creation of displayTask */
  displayTaskHandle = osThreadNew(StartDisplayTask, NULL, &displayTask_attributes);
 8000526:	4a0c      	ldr	r2, [pc, #48]	; (8000558 <main+0x8c>)
 8000528:	2100      	movs	r1, #0
 800052a:	480c      	ldr	r0, [pc, #48]	; (800055c <main+0x90>)
 800052c:	f009 f8bc 	bl	80096a8 <osThreadNew>
 8000530:	4603      	mov	r3, r0
 8000532:	4a0b      	ldr	r2, [pc, #44]	; (8000560 <main+0x94>)
 8000534:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000536:	f009 f891 	bl	800965c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800053a:	e7fe      	b.n	800053a <main+0x6e>
 800053c:	200001d8 	.word	0x200001d8
 8000540:	20000190 	.word	0x20000190
 8000544:	0800cfb8 	.word	0x0800cfb8
 8000548:	20000228 	.word	0x20000228
 800054c:	0800cf70 	.word	0x0800cf70
 8000550:	08000ac9 	.word	0x08000ac9
 8000554:	20000220 	.word	0x20000220
 8000558:	0800cf94 	.word	0x0800cf94
 800055c:	08000ba9 	.word	0x08000ba9
 8000560:	20000224 	.word	0x20000224

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b094      	sub	sp, #80	; 0x50
 8000568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056a:	f107 0320 	add.w	r3, r7, #32
 800056e:	2230      	movs	r2, #48	; 0x30
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f00c fbd0 	bl	800cd18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000578:	f107 030c 	add.w	r3, r7, #12
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000588:	2300      	movs	r3, #0
 800058a:	60bb      	str	r3, [r7, #8]
 800058c:	4b28      	ldr	r3, [pc, #160]	; (8000630 <SystemClock_Config+0xcc>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000590:	4a27      	ldr	r2, [pc, #156]	; (8000630 <SystemClock_Config+0xcc>)
 8000592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000596:	6413      	str	r3, [r2, #64]	; 0x40
 8000598:	4b25      	ldr	r3, [pc, #148]	; (8000630 <SystemClock_Config+0xcc>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a4:	2300      	movs	r3, #0
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	4b22      	ldr	r3, [pc, #136]	; (8000634 <SystemClock_Config+0xd0>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a21      	ldr	r2, [pc, #132]	; (8000634 <SystemClock_Config+0xd0>)
 80005ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b2:	6013      	str	r3, [r2, #0]
 80005b4:	4b1f      	ldr	r3, [pc, #124]	; (8000634 <SystemClock_Config+0xd0>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c0:	2301      	movs	r3, #1
 80005c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ca:	2302      	movs	r3, #2
 80005cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005d4:	2308      	movs	r3, #8
 80005d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005d8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005de:	2302      	movs	r3, #2
 80005e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005e2:	2307      	movs	r3, #7
 80005e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e6:	f107 0320 	add.w	r3, r7, #32
 80005ea:	4618      	mov	r0, r3
 80005ec:	f003 fe6a 	bl	80042c4 <HAL_RCC_OscConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005f6:	f000 fb2b 	bl	8000c50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fa:	230f      	movs	r3, #15
 80005fc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fe:	2302      	movs	r3, #2
 8000600:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000602:	2300      	movs	r3, #0
 8000604:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000606:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800060a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800060c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000610:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000612:	f107 030c 	add.w	r3, r7, #12
 8000616:	2105      	movs	r1, #5
 8000618:	4618      	mov	r0, r3
 800061a:	f004 f8cb 	bl	80047b4 <HAL_RCC_ClockConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000624:	f000 fb14 	bl	8000c50 <Error_Handler>
  }
}
 8000628:	bf00      	nop
 800062a:	3750      	adds	r7, #80	; 0x50
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40023800 	.word	0x40023800
 8000634:	40007000 	.word	0x40007000

08000638 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800063c:	4b12      	ldr	r3, [pc, #72]	; (8000688 <MX_I2C1_Init+0x50>)
 800063e:	4a13      	ldr	r2, [pc, #76]	; (800068c <MX_I2C1_Init+0x54>)
 8000640:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000642:	4b11      	ldr	r3, [pc, #68]	; (8000688 <MX_I2C1_Init+0x50>)
 8000644:	4a12      	ldr	r2, [pc, #72]	; (8000690 <MX_I2C1_Init+0x58>)
 8000646:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000648:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <MX_I2C1_Init+0x50>)
 800064a:	2200      	movs	r2, #0
 800064c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <MX_I2C1_Init+0x50>)
 8000650:	2200      	movs	r2, #0
 8000652:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <MX_I2C1_Init+0x50>)
 8000656:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800065a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800065c:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <MX_I2C1_Init+0x50>)
 800065e:	2200      	movs	r2, #0
 8000660:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000662:	4b09      	ldr	r3, [pc, #36]	; (8000688 <MX_I2C1_Init+0x50>)
 8000664:	2200      	movs	r2, #0
 8000666:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000668:	4b07      	ldr	r3, [pc, #28]	; (8000688 <MX_I2C1_Init+0x50>)
 800066a:	2200      	movs	r2, #0
 800066c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <MX_I2C1_Init+0x50>)
 8000670:	2200      	movs	r2, #0
 8000672:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000674:	4804      	ldr	r0, [pc, #16]	; (8000688 <MX_I2C1_Init+0x50>)
 8000676:	f003 f841 	bl	80036fc <HAL_I2C_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000680:	f000 fae6 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}
 8000688:	2000009c 	.word	0x2000009c
 800068c:	40005400 	.word	0x40005400
 8000690:	000186a0 	.word	0x000186a0

08000694 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000698:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <MX_I2S3_Init+0x54>)
 800069a:	4a14      	ldr	r2, [pc, #80]	; (80006ec <MX_I2S3_Init+0x58>)
 800069c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800069e:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <MX_I2S3_Init+0x54>)
 80006a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006a4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006a6:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <MX_I2S3_Init+0x54>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006ac:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <MX_I2S3_Init+0x54>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006b2:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <MX_I2S3_Init+0x54>)
 80006b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006b8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006ba:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <MX_I2S3_Init+0x54>)
 80006bc:	4a0c      	ldr	r2, [pc, #48]	; (80006f0 <MX_I2S3_Init+0x5c>)
 80006be:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006c0:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <MX_I2S3_Init+0x54>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006c6:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <MX_I2S3_Init+0x54>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <MX_I2S3_Init+0x54>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006d2:	4805      	ldr	r0, [pc, #20]	; (80006e8 <MX_I2S3_Init+0x54>)
 80006d4:	f003 f956 	bl	8003984 <HAL_I2S_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006de:	f000 fab7 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	200000f0 	.word	0x200000f0
 80006ec:	40003c00 	.word	0x40003c00
 80006f0:	00017700 	.word	0x00017700

080006f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006f8:	4b17      	ldr	r3, [pc, #92]	; (8000758 <MX_SPI1_Init+0x64>)
 80006fa:	4a18      	ldr	r2, [pc, #96]	; (800075c <MX_SPI1_Init+0x68>)
 80006fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006fe:	4b16      	ldr	r3, [pc, #88]	; (8000758 <MX_SPI1_Init+0x64>)
 8000700:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000704:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000706:	4b14      	ldr	r3, [pc, #80]	; (8000758 <MX_SPI1_Init+0x64>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800070c:	4b12      	ldr	r3, [pc, #72]	; (8000758 <MX_SPI1_Init+0x64>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000712:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_SPI1_Init+0x64>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000718:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <MX_SPI1_Init+0x64>)
 800071a:	2200      	movs	r2, #0
 800071c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <MX_SPI1_Init+0x64>)
 8000720:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000724:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000726:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <MX_SPI1_Init+0x64>)
 8000728:	2200      	movs	r2, #0
 800072a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800072c:	4b0a      	ldr	r3, [pc, #40]	; (8000758 <MX_SPI1_Init+0x64>)
 800072e:	2200      	movs	r2, #0
 8000730:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000732:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_SPI1_Init+0x64>)
 8000734:	2200      	movs	r2, #0
 8000736:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000738:	4b07      	ldr	r3, [pc, #28]	; (8000758 <MX_SPI1_Init+0x64>)
 800073a:	2200      	movs	r2, #0
 800073c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800073e:	4b06      	ldr	r3, [pc, #24]	; (8000758 <MX_SPI1_Init+0x64>)
 8000740:	220a      	movs	r2, #10
 8000742:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000744:	4804      	ldr	r0, [pc, #16]	; (8000758 <MX_SPI1_Init+0x64>)
 8000746:	f004 fbc7 	bl	8004ed8 <HAL_SPI_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000750:	f000 fa7e 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}
 8000758:	20000138 	.word	0x20000138
 800075c:	40013000 	.word	0x40013000

08000760 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08e      	sub	sp, #56	; 0x38
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000766:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000774:	f107 0320 	add.w	r3, r7, #32
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]
 800078c:	615a      	str	r2, [r3, #20]
 800078e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000790:	4b2d      	ldr	r3, [pc, #180]	; (8000848 <MX_TIM4_Init+0xe8>)
 8000792:	4a2e      	ldr	r2, [pc, #184]	; (800084c <MX_TIM4_Init+0xec>)
 8000794:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 419;
 8000796:	4b2c      	ldr	r3, [pc, #176]	; (8000848 <MX_TIM4_Init+0xe8>)
 8000798:	f240 12a3 	movw	r2, #419	; 0x1a3
 800079c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800079e:	4b2a      	ldr	r3, [pc, #168]	; (8000848 <MX_TIM4_Init+0xe8>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 80007a4:	4b28      	ldr	r3, [pc, #160]	; (8000848 <MX_TIM4_Init+0xe8>)
 80007a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007aa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ac:	4b26      	ldr	r3, [pc, #152]	; (8000848 <MX_TIM4_Init+0xe8>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b2:	4b25      	ldr	r3, [pc, #148]	; (8000848 <MX_TIM4_Init+0xe8>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80007b8:	4823      	ldr	r0, [pc, #140]	; (8000848 <MX_TIM4_Init+0xe8>)
 80007ba:	f004 fc16 	bl	8004fea <HAL_TIM_Base_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80007c4:	f000 fa44 	bl	8000c50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007cc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80007ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007d2:	4619      	mov	r1, r3
 80007d4:	481c      	ldr	r0, [pc, #112]	; (8000848 <MX_TIM4_Init+0xe8>)
 80007d6:	f005 f81b 	bl	8005810 <HAL_TIM_ConfigClockSource>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80007e0:	f000 fa36 	bl	8000c50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80007e4:	4818      	ldr	r0, [pc, #96]	; (8000848 <MX_TIM4_Init+0xe8>)
 80007e6:	f004 fd27 	bl	8005238 <HAL_TIM_PWM_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80007f0:	f000 fa2e 	bl	8000c50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007f4:	2300      	movs	r3, #0
 80007f6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007f8:	2300      	movs	r3, #0
 80007fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80007fc:	f107 0320 	add.w	r3, r7, #32
 8000800:	4619      	mov	r1, r3
 8000802:	4811      	ldr	r0, [pc, #68]	; (8000848 <MX_TIM4_Init+0xe8>)
 8000804:	f005 fc04 	bl	8006010 <HAL_TIMEx_MasterConfigSynchronization>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800080e:	f000 fa1f 	bl	8000c50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000812:	2360      	movs	r3, #96	; 0x60
 8000814:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8000816:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800081a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	2204      	movs	r2, #4
 8000828:	4619      	mov	r1, r3
 800082a:	4807      	ldr	r0, [pc, #28]	; (8000848 <MX_TIM4_Init+0xe8>)
 800082c:	f004 ff2e 	bl	800568c <HAL_TIM_PWM_ConfigChannel>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000836:	f000 fa0b 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800083a:	4803      	ldr	r0, [pc, #12]	; (8000848 <MX_TIM4_Init+0xe8>)
 800083c:	f000 fb88 	bl	8000f50 <HAL_TIM_MspPostInit>

}
 8000840:	bf00      	nop
 8000842:	3738      	adds	r7, #56	; 0x38
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000190 	.word	0x20000190
 800084c:	40000800 	.word	0x40000800

08000850 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000856:	463b      	mov	r3, r7
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800085e:	4b19      	ldr	r3, [pc, #100]	; (80008c4 <MX_TIM7_Init+0x74>)
 8000860:	4a19      	ldr	r2, [pc, #100]	; (80008c8 <MX_TIM7_Init+0x78>)
 8000862:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 8000864:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <MX_TIM7_Init+0x74>)
 8000866:	2253      	movs	r2, #83	; 0x53
 8000868:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800086a:	4b16      	ldr	r3, [pc, #88]	; (80008c4 <MX_TIM7_Init+0x74>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8000870:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <MX_TIM7_Init+0x74>)
 8000872:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000876:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000878:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <MX_TIM7_Init+0x74>)
 800087a:	2200      	movs	r2, #0
 800087c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800087e:	4811      	ldr	r0, [pc, #68]	; (80008c4 <MX_TIM7_Init+0x74>)
 8000880:	f004 fbb3 	bl	8004fea <HAL_TIM_Base_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800088a:	f000 f9e1 	bl	8000c50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800088e:	2320      	movs	r3, #32
 8000890:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000896:	463b      	mov	r3, r7
 8000898:	4619      	mov	r1, r3
 800089a:	480a      	ldr	r0, [pc, #40]	; (80008c4 <MX_TIM7_Init+0x74>)
 800089c:	f005 fbb8 	bl	8006010 <HAL_TIMEx_MasterConfigSynchronization>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80008a6:	f000 f9d3 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  __HAL_TIM_ENABLE_IT(&htim7, TIM_IT_UPDATE);
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <MX_TIM7_Init+0x74>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	68da      	ldr	r2, [r3, #12]
 80008b0:	4b04      	ldr	r3, [pc, #16]	; (80008c4 <MX_TIM7_Init+0x74>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f042 0201 	orr.w	r2, r2, #1
 80008b8:	60da      	str	r2, [r3, #12]

  /* USER CODE END TIM7_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	200001d8 	.word	0x200001d8
 80008c8:	40001400 	.word	0x40001400

080008cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08c      	sub	sp, #48	; 0x30
 80008d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	61bb      	str	r3, [r7, #24]
 80008e6:	4b72      	ldr	r3, [pc, #456]	; (8000ab0 <MX_GPIO_Init+0x1e4>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a71      	ldr	r2, [pc, #452]	; (8000ab0 <MX_GPIO_Init+0x1e4>)
 80008ec:	f043 0310 	orr.w	r3, r3, #16
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b6f      	ldr	r3, [pc, #444]	; (8000ab0 <MX_GPIO_Init+0x1e4>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0310 	and.w	r3, r3, #16
 80008fa:	61bb      	str	r3, [r7, #24]
 80008fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]
 8000902:	4b6b      	ldr	r3, [pc, #428]	; (8000ab0 <MX_GPIO_Init+0x1e4>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a6a      	ldr	r2, [pc, #424]	; (8000ab0 <MX_GPIO_Init+0x1e4>)
 8000908:	f043 0304 	orr.w	r3, r3, #4
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b68      	ldr	r3, [pc, #416]	; (8000ab0 <MX_GPIO_Init+0x1e4>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0304 	and.w	r3, r3, #4
 8000916:	617b      	str	r3, [r7, #20]
 8000918:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	4b64      	ldr	r3, [pc, #400]	; (8000ab0 <MX_GPIO_Init+0x1e4>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a63      	ldr	r2, [pc, #396]	; (8000ab0 <MX_GPIO_Init+0x1e4>)
 8000924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b61      	ldr	r3, [pc, #388]	; (8000ab0 <MX_GPIO_Init+0x1e4>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	4b5d      	ldr	r3, [pc, #372]	; (8000ab0 <MX_GPIO_Init+0x1e4>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a5c      	ldr	r2, [pc, #368]	; (8000ab0 <MX_GPIO_Init+0x1e4>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b5a      	ldr	r3, [pc, #360]	; (8000ab0 <MX_GPIO_Init+0x1e4>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	4b56      	ldr	r3, [pc, #344]	; (8000ab0 <MX_GPIO_Init+0x1e4>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a55      	ldr	r2, [pc, #340]	; (8000ab0 <MX_GPIO_Init+0x1e4>)
 800095c:	f043 0302 	orr.w	r3, r3, #2
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b53      	ldr	r3, [pc, #332]	; (8000ab0 <MX_GPIO_Init+0x1e4>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0302 	and.w	r3, r3, #2
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	4b4f      	ldr	r3, [pc, #316]	; (8000ab0 <MX_GPIO_Init+0x1e4>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a4e      	ldr	r2, [pc, #312]	; (8000ab0 <MX_GPIO_Init+0x1e4>)
 8000978:	f043 0308 	orr.w	r3, r3, #8
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b4c      	ldr	r3, [pc, #304]	; (8000ab0 <MX_GPIO_Init+0x1e4>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0308 	and.w	r3, r3, #8
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	2108      	movs	r1, #8
 800098e:	4849      	ldr	r0, [pc, #292]	; (8000ab4 <MX_GPIO_Init+0x1e8>)
 8000990:	f001 fa90 	bl	8001eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000994:	2201      	movs	r2, #1
 8000996:	2101      	movs	r1, #1
 8000998:	4847      	ldr	r0, [pc, #284]	; (8000ab8 <MX_GPIO_Init+0x1ec>)
 800099a:	f001 fa8b 	bl	8001eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD5_Pin|LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	f24d 0110 	movw	r1, #53264	; 0xd010
 80009a4:	4845      	ldr	r0, [pc, #276]	; (8000abc <MX_GPIO_Init+0x1f0>)
 80009a6:	f001 fa85 	bl	8001eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80009aa:	2308      	movs	r3, #8
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ae:	2301      	movs	r3, #1
 80009b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	483c      	ldr	r0, [pc, #240]	; (8000ab4 <MX_GPIO_Init+0x1e8>)
 80009c2:	f001 f8c3 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009c6:	2301      	movs	r3, #1
 80009c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ca:	2301      	movs	r3, #1
 80009cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2300      	movs	r3, #0
 80009d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	4619      	mov	r1, r3
 80009dc:	4836      	ldr	r0, [pc, #216]	; (8000ab8 <MX_GPIO_Init+0x1ec>)
 80009de:	f001 f8b5 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009e2:	2308      	movs	r3, #8
 80009e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e6:	2302      	movs	r3, #2
 80009e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	2300      	movs	r3, #0
 80009f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009f2:	2305      	movs	r3, #5
 80009f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	4619      	mov	r1, r3
 80009fc:	482e      	ldr	r0, [pc, #184]	; (8000ab8 <MX_GPIO_Init+0x1ec>)
 80009fe:	f001 f8a5 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a02:	2301      	movs	r3, #1
 8000a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a06:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a10:	f107 031c 	add.w	r3, r7, #28
 8000a14:	4619      	mov	r1, r3
 8000a16:	482a      	ldr	r0, [pc, #168]	; (8000ac0 <MX_GPIO_Init+0x1f4>)
 8000a18:	f001 f898 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a1c:	2304      	movs	r3, #4
 8000a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a20:	2300      	movs	r3, #0
 8000a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4825      	ldr	r0, [pc, #148]	; (8000ac4 <MX_GPIO_Init+0x1f8>)
 8000a30:	f001 f88c 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a46:	2305      	movs	r3, #5
 8000a48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	481c      	ldr	r0, [pc, #112]	; (8000ac4 <MX_GPIO_Init+0x1f8>)
 8000a52:	f001 f87b 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD5_Pin LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD5_Pin|LD6_Pin|Audio_RST_Pin;
 8000a56:	f24d 0310 	movw	r3, #53264	; 0xd010
 8000a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a68:	f107 031c 	add.w	r3, r7, #28
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4813      	ldr	r0, [pc, #76]	; (8000abc <MX_GPIO_Init+0x1f0>)
 8000a70:	f001 f86c 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a74:	2320      	movs	r3, #32
 8000a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	4619      	mov	r1, r3
 8000a86:	480d      	ldr	r0, [pc, #52]	; (8000abc <MX_GPIO_Init+0x1f0>)
 8000a88:	f001 f860 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a90:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4804      	ldr	r0, [pc, #16]	; (8000ab4 <MX_GPIO_Init+0x1e8>)
 8000aa2:	f001 f853 	bl	8001b4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aa6:	bf00      	nop
 8000aa8:	3730      	adds	r7, #48	; 0x30
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	40020800 	.word	0x40020800
 8000abc:	40020c00 	.word	0x40020c00
 8000ac0:	40020000 	.word	0x40020000
 8000ac4:	40020400 	.word	0x40020400

08000ac8 <IOControlTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_IOControlTask */
void IOControlTask(void *argument)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08c      	sub	sp, #48	; 0x30
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000ad0:	f00b fd64 	bl	800c59c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  uint8_t cnt = 0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint32_t newDutyCycle = 0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Infinite loop */
  for (;;)
  {

    if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) != GPIO_PIN_RESET && buttonReleased)
 8000ade:	2101      	movs	r1, #1
 8000ae0:	482d      	ldr	r0, [pc, #180]	; (8000b98 <IOControlTask+0xd0>)
 8000ae2:	f001 f9cf 	bl	8001e84 <HAL_GPIO_ReadPin>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d042      	beq.n	8000b72 <IOControlTask+0xaa>
 8000aec:	4b2b      	ldr	r3, [pc, #172]	; (8000b9c <IOControlTask+0xd4>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d03d      	beq.n	8000b72 <IOControlTask+0xaa>
    {
      /* Lock */
  	  buttonReleased = false;
 8000af6:	4b29      	ldr	r3, [pc, #164]	; (8000b9c <IOControlTask+0xd4>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	701a      	strb	r2, [r3, #0]

  	  /* Clear message buffer */
  	  //memset((void*)log.msg_buf, 0, MAX_STR_LEN);

  	  /* continuous count for changing brightness */
      cnt = (cnt + 1) % 4;
 8000afc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b00:	3301      	adds	r3, #1
 8000b02:	425a      	negs	r2, r3
 8000b04:	f003 0303 	and.w	r3, r3, #3
 8000b08:	f002 0203 	and.w	r2, r2, #3
 8000b0c:	bf58      	it	pl
 8000b0e:	4253      	negpl	r3, r2
 8000b10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  	  switch (cnt)
 8000b14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b18:	2b03      	cmp	r3, #3
 8000b1a:	d81a      	bhi.n	8000b52 <IOControlTask+0x8a>
 8000b1c:	a201      	add	r2, pc, #4	; (adr r2, 8000b24 <IOControlTask+0x5c>)
 8000b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b22:	bf00      	nop
 8000b24:	08000b35 	.word	0x08000b35
 8000b28:	08000b3d 	.word	0x08000b3d
 8000b2c:	08000b45 	.word	0x08000b45
 8000b30:	08000b4d 	.word	0x08000b4d
  	  {
  		case 0:
  			newDutyCycle = 1000;
 8000b34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b38:	62bb      	str	r3, [r7, #40]	; 0x28
  			//strcpy(log.msg_buf, "Brightness: 100%");
  			break;
 8000b3a:	e00d      	b.n	8000b58 <IOControlTask+0x90>

  		case 1:
  			newDutyCycle = 750;
 8000b3c:	f240 23ee 	movw	r3, #750	; 0x2ee
 8000b40:	62bb      	str	r3, [r7, #40]	; 0x28
  			//strcpy(log.msg_buf, "Brightness: 75%");
  			break;
 8000b42:	e009      	b.n	8000b58 <IOControlTask+0x90>

  		case 2:
  			newDutyCycle = 500;
 8000b44:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b48:	62bb      	str	r3, [r7, #40]	; 0x28
  			//strcpy(log.msg_buf, "Brightness: 50%");
  			break;
 8000b4a:	e005      	b.n	8000b58 <IOControlTask+0x90>

  		case 3:
  			newDutyCycle = 250;
 8000b4c:	23fa      	movs	r3, #250	; 0xfa
 8000b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  			//strcpy(log.msg_buf, "Brightness: 25%");
  			break;
 8000b50:	e002      	b.n	8000b58 <IOControlTask+0x90>

  	    default:
  			newDutyCycle = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	62bb      	str	r3, [r7, #40]	; 0x28
  			//strcpy(log.msg_buf, "Brightness: 0%");
  			break;
 8000b56:	bf00      	nop
  	    }

  	    /* Set CCR2 Value */
  	    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, newDutyCycle);
 8000b58:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <IOControlTask+0xd8>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b5e:	639a      	str	r2, [r3, #56]	; 0x38

  	    /* Add message to Queue */
  	    if (osMessageQueuePut(logQueueHandle, (void*)&log, 0, 100) != osOK)
 8000b60:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <IOControlTask+0xdc>)
 8000b62:	6818      	ldr	r0, [r3, #0]
 8000b64:	f107 010c 	add.w	r1, r7, #12
 8000b68:	2364      	movs	r3, #100	; 0x64
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f008 febc 	bl	80098e8 <osMessageQueuePut>
 8000b70:	e00e      	b.n	8000b90 <IOControlTask+0xc8>
  	    {
  	    	/* Fehlerbehandlung */
  	    }

      }
  	  else if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8000b72:	2101      	movs	r1, #1
 8000b74:	4808      	ldr	r0, [pc, #32]	; (8000b98 <IOControlTask+0xd0>)
 8000b76:	f001 f985 	bl	8001e84 <HAL_GPIO_ReadPin>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d107      	bne.n	8000b90 <IOControlTask+0xc8>
  	  {
  		if (!buttonReleased)
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <IOControlTask+0xd4>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d102      	bne.n	8000b90 <IOControlTask+0xc8>
  			buttonReleased = true;
 8000b8a:	4b04      	ldr	r3, [pc, #16]	; (8000b9c <IOControlTask+0xd4>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	701a      	strb	r2, [r3, #0]
  	  }

  	osDelay(1);
 8000b90:	2001      	movs	r0, #1
 8000b92:	f008 fe1b 	bl	80097cc <osDelay>
    if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) != GPIO_PIN_RESET && buttonReleased)
 8000b96:	e7a2      	b.n	8000ade <IOControlTask+0x16>
 8000b98:	40020000 	.word	0x40020000
 8000b9c:	20000230 	.word	0x20000230
 8000ba0:	20000190 	.word	0x20000190
 8000ba4:	20000228 	.word	0x20000228

08000ba8 <StartDisplayTask>:
* @param argument: Not use
* @retval None
*/
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void *argument)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08c      	sub	sp, #48	; 0x30
 8000bac:	af02      	add	r7, sp, #8
 8000bae:	6078      	str	r0, [r7, #4]
  //char task1_buf[MAX_STR_LEN], task2_buf[MAX_STR_LEN];

  /* Infinite loop */
  for(;;)
  {
	  if (osMessageQueueGetCount(logQueueHandle) > 0)
 8000bb0:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <StartDisplayTask+0x60>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f008 ff55 	bl	8009a64 <osMessageQueueGetCount>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d01f      	beq.n	8000c00 <StartDisplayTask+0x58>
	  {
		  status = osMessageQueueGet(logQueueHandle, (void*)&log, 0, 100);
 8000bc0:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <StartDisplayTask+0x60>)
 8000bc2:	6818      	ldr	r0, [r3, #0]
 8000bc4:	f107 0108 	add.w	r1, r7, #8
 8000bc8:	2364      	movs	r3, #100	; 0x64
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f008 feec 	bl	80099a8 <osMessageQueueGet>
 8000bd0:	6278      	str	r0, [r7, #36]	; 0x24

		  /* Message was received successfully and stored in log */
		  if (status == osOK)
 8000bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d113      	bne.n	8000c00 <StartDisplayTask+0x58>
		  {
			  //switch (log.threadId)
			  //{
			  //case IOControlHandle:
				  mcpr_LCD_ClearDisplay(LCD_BLACK);
 8000bd8:	2000      	movs	r0, #0
 8000bda:	f000 fcaf 	bl	800153c <mcpr_LCD_ClearDisplay>
				  mcpr_LCD_WriteString(10, 100, LCD_WHITE, LCD_BLACK, "Task 1: ");
 8000bde:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <StartDisplayTask+0x64>)
 8000be0:	9300      	str	r3, [sp, #0]
 8000be2:	2300      	movs	r3, #0
 8000be4:	2200      	movs	r2, #0
 8000be6:	2164      	movs	r1, #100	; 0x64
 8000be8:	200a      	movs	r0, #10
 8000bea:	f000 fd1d 	bl	8001628 <mcpr_LCD_WriteString>
				  mcpr_LCD_WriteString(130, 100, LCD_WHITE, LCD_BLACK, log.msg_buf);
 8000bee:	f107 0308 	add.w	r3, r7, #8
 8000bf2:	9300      	str	r3, [sp, #0]
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2164      	movs	r1, #100	; 0x64
 8000bfa:	2082      	movs	r0, #130	; 0x82
 8000bfc:	f000 fd14 	bl	8001628 <mcpr_LCD_WriteString>

		  /* Write Task 3 to screen */
	  }

	  /* 25 Hz Refresh Rate */
	  osDelay(40);
 8000c00:	2028      	movs	r0, #40	; 0x28
 8000c02:	f008 fde3 	bl	80097cc <osDelay>
	  if (osMessageQueueGetCount(logQueueHandle) > 0)
 8000c06:	e7d3      	b.n	8000bb0 <StartDisplayTask+0x8>
 8000c08:	20000228 	.word	0x20000228
 8000c0c:	0800cf3c 	.word	0x0800cf3c

08000c10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM8) {
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a09      	ldr	r2, [pc, #36]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d101      	bne.n	8000c26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c22:	f000 fe6d 	bl	8001900 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM7) {
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a07      	ldr	r2, [pc, #28]	; (8000c48 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d104      	bne.n	8000c3a <HAL_TIM_PeriodElapsedCallback+0x2a>
	  ms_counter += 1;
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	3301      	adds	r3, #1
 8000c36:	4a05      	ldr	r2, [pc, #20]	; (8000c4c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000c38:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END Callback 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40010400 	.word	0x40010400
 8000c48:	40001400 	.word	0x40001400
 8000c4c:	2000022c 	.word	0x2000022c

08000c50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c54:	b672      	cpsid	i
}
 8000c56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <Error_Handler+0x8>
	...

08000c5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	607b      	str	r3, [r7, #4]
 8000c66:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <HAL_MspInit+0x54>)
 8000c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6a:	4a11      	ldr	r2, [pc, #68]	; (8000cb0 <HAL_MspInit+0x54>)
 8000c6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c70:	6453      	str	r3, [r2, #68]	; 0x44
 8000c72:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <HAL_MspInit+0x54>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	603b      	str	r3, [r7, #0]
 8000c82:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <HAL_MspInit+0x54>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	4a0a      	ldr	r2, [pc, #40]	; (8000cb0 <HAL_MspInit+0x54>)
 8000c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8e:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <HAL_MspInit+0x54>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c96:	603b      	str	r3, [r7, #0]
 8000c98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	210f      	movs	r1, #15
 8000c9e:	f06f 0001 	mvn.w	r0, #1
 8000ca2:	f000 ff29 	bl	8001af8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40023800 	.word	0x40023800

08000cb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	; 0x28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a19      	ldr	r2, [pc, #100]	; (8000d38 <HAL_I2C_MspInit+0x84>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d12c      	bne.n	8000d30 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <HAL_I2C_MspInit+0x88>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a17      	ldr	r2, [pc, #92]	; (8000d3c <HAL_I2C_MspInit+0x88>)
 8000ce0:	f043 0302 	orr.w	r3, r3, #2
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <HAL_I2C_MspInit+0x88>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000cf2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cf8:	2312      	movs	r3, #18
 8000cfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d00:	2300      	movs	r3, #0
 8000d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d04:	2304      	movs	r3, #4
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	480c      	ldr	r0, [pc, #48]	; (8000d40 <HAL_I2C_MspInit+0x8c>)
 8000d10:	f000 ff1c 	bl	8001b4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d14:	2300      	movs	r3, #0
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <HAL_I2C_MspInit+0x88>)
 8000d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1c:	4a07      	ldr	r2, [pc, #28]	; (8000d3c <HAL_I2C_MspInit+0x88>)
 8000d1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d22:	6413      	str	r3, [r2, #64]	; 0x40
 8000d24:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <HAL_I2C_MspInit+0x88>)
 8000d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d30:	bf00      	nop
 8000d32:	3728      	adds	r7, #40	; 0x28
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40005400 	.word	0x40005400
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	40020400 	.word	0x40020400

08000d44 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08e      	sub	sp, #56	; 0x38
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a31      	ldr	r2, [pc, #196]	; (8000e34 <HAL_I2S_MspInit+0xf0>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d15a      	bne.n	8000e2a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000d74:	2301      	movs	r3, #1
 8000d76:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000d78:	23c0      	movs	r3, #192	; 0xc0
 8000d7a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	4618      	mov	r0, r3
 8000d86:	f003 ff67 	bl	8004c58 <HAL_RCCEx_PeriphCLKConfig>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000d90:	f7ff ff5e 	bl	8000c50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d94:	2300      	movs	r3, #0
 8000d96:	613b      	str	r3, [r7, #16]
 8000d98:	4b27      	ldr	r3, [pc, #156]	; (8000e38 <HAL_I2S_MspInit+0xf4>)
 8000d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9c:	4a26      	ldr	r2, [pc, #152]	; (8000e38 <HAL_I2S_MspInit+0xf4>)
 8000d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000da2:	6413      	str	r3, [r2, #64]	; 0x40
 8000da4:	4b24      	ldr	r3, [pc, #144]	; (8000e38 <HAL_I2S_MspInit+0xf4>)
 8000da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dac:	613b      	str	r3, [r7, #16]
 8000dae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db0:	2300      	movs	r3, #0
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	4b20      	ldr	r3, [pc, #128]	; (8000e38 <HAL_I2S_MspInit+0xf4>)
 8000db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db8:	4a1f      	ldr	r2, [pc, #124]	; (8000e38 <HAL_I2S_MspInit+0xf4>)
 8000dba:	f043 0301 	orr.w	r3, r3, #1
 8000dbe:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc0:	4b1d      	ldr	r3, [pc, #116]	; (8000e38 <HAL_I2S_MspInit+0xf4>)
 8000dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc4:	f003 0301 	and.w	r3, r3, #1
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60bb      	str	r3, [r7, #8]
 8000dd0:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <HAL_I2S_MspInit+0xf4>)
 8000dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd4:	4a18      	ldr	r2, [pc, #96]	; (8000e38 <HAL_I2S_MspInit+0xf4>)
 8000dd6:	f043 0304 	orr.w	r3, r3, #4
 8000dda:	6313      	str	r3, [r2, #48]	; 0x30
 8000ddc:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <HAL_I2S_MspInit+0xf4>)
 8000dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de0:	f003 0304 	and.w	r3, r3, #4
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000de8:	2310      	movs	r3, #16
 8000dea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dec:	2302      	movs	r3, #2
 8000dee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df4:	2300      	movs	r3, #0
 8000df6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000df8:	2306      	movs	r3, #6
 8000dfa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e00:	4619      	mov	r1, r3
 8000e02:	480e      	ldr	r0, [pc, #56]	; (8000e3c <HAL_I2S_MspInit+0xf8>)
 8000e04:	f000 fea2 	bl	8001b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000e08:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e1a:	2306      	movs	r3, #6
 8000e1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e22:	4619      	mov	r1, r3
 8000e24:	4806      	ldr	r0, [pc, #24]	; (8000e40 <HAL_I2S_MspInit+0xfc>)
 8000e26:	f000 fe91 	bl	8001b4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000e2a:	bf00      	nop
 8000e2c:	3738      	adds	r7, #56	; 0x38
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40003c00 	.word	0x40003c00
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40020000 	.word	0x40020000
 8000e40:	40020800 	.word	0x40020800

08000e44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08a      	sub	sp, #40	; 0x28
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a19      	ldr	r2, [pc, #100]	; (8000ec8 <HAL_SPI_MspInit+0x84>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d12b      	bne.n	8000ebe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <HAL_SPI_MspInit+0x88>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6e:	4a17      	ldr	r2, [pc, #92]	; (8000ecc <HAL_SPI_MspInit+0x88>)
 8000e70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e74:	6453      	str	r3, [r2, #68]	; 0x44
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <HAL_SPI_MspInit+0x88>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <HAL_SPI_MspInit+0x88>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4a10      	ldr	r2, [pc, #64]	; (8000ecc <HAL_SPI_MspInit+0x88>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <HAL_SPI_MspInit+0x88>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e9e:	23e0      	movs	r3, #224	; 0xe0
 8000ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000eae:	2305      	movs	r3, #5
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <HAL_SPI_MspInit+0x8c>)
 8000eba:	f000 fe47 	bl	8001b4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ebe:	bf00      	nop
 8000ec0:	3728      	adds	r7, #40	; 0x28
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40013000 	.word	0x40013000
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40020000 	.word	0x40020000

08000ed4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a18      	ldr	r2, [pc, #96]	; (8000f44 <HAL_TIM_Base_MspInit+0x70>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d10e      	bne.n	8000f04 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	4b17      	ldr	r3, [pc, #92]	; (8000f48 <HAL_TIM_Base_MspInit+0x74>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	4a16      	ldr	r2, [pc, #88]	; (8000f48 <HAL_TIM_Base_MspInit+0x74>)
 8000ef0:	f043 0304 	orr.w	r3, r3, #4
 8000ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef6:	4b14      	ldr	r3, [pc, #80]	; (8000f48 <HAL_TIM_Base_MspInit+0x74>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	f003 0304 	and.w	r3, r3, #4
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000f02:	e01a      	b.n	8000f3a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM7)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a10      	ldr	r2, [pc, #64]	; (8000f4c <HAL_TIM_Base_MspInit+0x78>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d115      	bne.n	8000f3a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60bb      	str	r3, [r7, #8]
 8000f12:	4b0d      	ldr	r3, [pc, #52]	; (8000f48 <HAL_TIM_Base_MspInit+0x74>)
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	4a0c      	ldr	r2, [pc, #48]	; (8000f48 <HAL_TIM_Base_MspInit+0x74>)
 8000f18:	f043 0320 	orr.w	r3, r3, #32
 8000f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f1e:	4b0a      	ldr	r3, [pc, #40]	; (8000f48 <HAL_TIM_Base_MspInit+0x74>)
 8000f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f22:	f003 0320 	and.w	r3, r3, #32
 8000f26:	60bb      	str	r3, [r7, #8]
 8000f28:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2105      	movs	r1, #5
 8000f2e:	2037      	movs	r0, #55	; 0x37
 8000f30:	f000 fde2 	bl	8001af8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000f34:	2037      	movs	r0, #55	; 0x37
 8000f36:	f000 fdfb 	bl	8001b30 <HAL_NVIC_EnableIRQ>
}
 8000f3a:	bf00      	nop
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40000800 	.word	0x40000800
 8000f48:	40023800 	.word	0x40023800
 8000f4c:	40001400 	.word	0x40001400

08000f50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b088      	sub	sp, #32
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	f107 030c 	add.w	r3, r7, #12
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a12      	ldr	r2, [pc, #72]	; (8000fb8 <HAL_TIM_MspPostInit+0x68>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d11e      	bne.n	8000fb0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	60bb      	str	r3, [r7, #8]
 8000f76:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <HAL_TIM_MspPostInit+0x6c>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a10      	ldr	r2, [pc, #64]	; (8000fbc <HAL_TIM_MspPostInit+0x6c>)
 8000f7c:	f043 0308 	orr.w	r3, r3, #8
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <HAL_TIM_MspPostInit+0x6c>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0308 	and.w	r3, r3, #8
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f92:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f94:	2302      	movs	r3, #2
 8000f96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fa4:	f107 030c 	add.w	r3, r7, #12
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <HAL_TIM_MspPostInit+0x70>)
 8000fac:	f000 fdce 	bl	8001b4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000fb0:	bf00      	nop
 8000fb2:	3720      	adds	r7, #32
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40000800 	.word	0x40000800
 8000fbc:	40023800 	.word	0x40023800
 8000fc0:	40020c00 	.word	0x40020c00

08000fc4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08c      	sub	sp, #48	; 0x30
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM8 clock */
  __HAL_RCC_TIM8_CLK_ENABLE();
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	4b2f      	ldr	r3, [pc, #188]	; (8001098 <HAL_InitTick+0xd4>)
 8000fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fdc:	4a2e      	ldr	r2, [pc, #184]	; (8001098 <HAL_InitTick+0xd4>)
 8000fde:	f043 0302 	orr.w	r3, r3, #2
 8000fe2:	6453      	str	r3, [r2, #68]	; 0x44
 8000fe4:	4b2c      	ldr	r3, [pc, #176]	; (8001098 <HAL_InitTick+0xd4>)
 8000fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe8:	f003 0302 	and.w	r3, r3, #2
 8000fec:	60bb      	str	r3, [r7, #8]
 8000fee:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ff0:	f107 020c 	add.w	r2, r7, #12
 8000ff4:	f107 0310 	add.w	r3, r7, #16
 8000ff8:	4611      	mov	r1, r2
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f003 fdfa 	bl	8004bf4 <HAL_RCC_GetClockConfig>

  /* Compute TIM8 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001000:	f003 fde4 	bl	8004bcc <HAL_RCC_GetPCLK2Freq>
 8001004:	4603      	mov	r3, r0
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM8 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800100a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800100c:	4a23      	ldr	r2, [pc, #140]	; (800109c <HAL_InitTick+0xd8>)
 800100e:	fba2 2303 	umull	r2, r3, r2, r3
 8001012:	0c9b      	lsrs	r3, r3, #18
 8001014:	3b01      	subs	r3, #1
 8001016:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM8 */
  htim8.Instance = TIM8;
 8001018:	4b21      	ldr	r3, [pc, #132]	; (80010a0 <HAL_InitTick+0xdc>)
 800101a:	4a22      	ldr	r2, [pc, #136]	; (80010a4 <HAL_InitTick+0xe0>)
 800101c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM8CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim8.Init.Period = (1000000U / 1000U) - 1U;
 800101e:	4b20      	ldr	r3, [pc, #128]	; (80010a0 <HAL_InitTick+0xdc>)
 8001020:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001024:	60da      	str	r2, [r3, #12]
  htim8.Init.Prescaler = uwPrescalerValue;
 8001026:	4a1e      	ldr	r2, [pc, #120]	; (80010a0 <HAL_InitTick+0xdc>)
 8001028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102a:	6053      	str	r3, [r2, #4]
  htim8.Init.ClockDivision = 0;
 800102c:	4b1c      	ldr	r3, [pc, #112]	; (80010a0 <HAL_InitTick+0xdc>)
 800102e:	2200      	movs	r2, #0
 8001030:	611a      	str	r2, [r3, #16]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001032:	4b1b      	ldr	r3, [pc, #108]	; (80010a0 <HAL_InitTick+0xdc>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001038:	4b19      	ldr	r3, [pc, #100]	; (80010a0 <HAL_InitTick+0xdc>)
 800103a:	2200      	movs	r2, #0
 800103c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim8);
 800103e:	4818      	ldr	r0, [pc, #96]	; (80010a0 <HAL_InitTick+0xdc>)
 8001040:	f003 ffd3 	bl	8004fea <HAL_TIM_Base_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800104a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800104e:	2b00      	cmp	r3, #0
 8001050:	d11b      	bne.n	800108a <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim8);
 8001052:	4813      	ldr	r0, [pc, #76]	; (80010a0 <HAL_InitTick+0xdc>)
 8001054:	f004 f880 	bl	8005158 <HAL_TIM_Base_Start_IT>
 8001058:	4603      	mov	r3, r0
 800105a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800105e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001062:	2b00      	cmp	r3, #0
 8001064:	d111      	bne.n	800108a <HAL_InitTick+0xc6>
    {
    /* Enable the TIM8 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001066:	202c      	movs	r0, #44	; 0x2c
 8001068:	f000 fd62 	bl	8001b30 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b0f      	cmp	r3, #15
 8001070:	d808      	bhi.n	8001084 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority, 0U);
 8001072:	2200      	movs	r2, #0
 8001074:	6879      	ldr	r1, [r7, #4]
 8001076:	202c      	movs	r0, #44	; 0x2c
 8001078:	f000 fd3e 	bl	8001af8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800107c:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <HAL_InitTick+0xe4>)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6013      	str	r3, [r2, #0]
 8001082:	e002      	b.n	800108a <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800108a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800108e:	4618      	mov	r0, r3
 8001090:	3730      	adds	r7, #48	; 0x30
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40023800 	.word	0x40023800
 800109c:	431bde83 	.word	0x431bde83
 80010a0:	20000234 	.word	0x20000234
 80010a4:	40010400 	.word	0x40010400
 80010a8:	20000004 	.word	0x20000004

080010ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <NMI_Handler+0x4>

080010b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010b6:	e7fe      	b.n	80010b6 <HardFault_Handler+0x4>

080010b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010bc:	e7fe      	b.n	80010bc <MemManage_Handler+0x4>

080010be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010c2:	e7fe      	b.n	80010c2 <BusFault_Handler+0x4>

080010c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <UsageFault_Handler+0x4>

080010ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80010dc:	4802      	ldr	r0, [pc, #8]	; (80010e8 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80010de:	f004 f9cd 	bl	800547c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000234 	.word	0x20000234

080010ec <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80010f0:	4802      	ldr	r0, [pc, #8]	; (80010fc <TIM7_IRQHandler+0x10>)
 80010f2:	f004 f9c3 	bl	800547c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	200001d8 	.word	0x200001d8

08001100 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001104:	4802      	ldr	r0, [pc, #8]	; (8001110 <OTG_FS_IRQHandler+0x10>)
 8001106:	f001 f959 	bl	80023bc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	2000507c 	.word	0x2000507c

08001114 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800111c:	4a14      	ldr	r2, [pc, #80]	; (8001170 <_sbrk+0x5c>)
 800111e:	4b15      	ldr	r3, [pc, #84]	; (8001174 <_sbrk+0x60>)
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001128:	4b13      	ldr	r3, [pc, #76]	; (8001178 <_sbrk+0x64>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d102      	bne.n	8001136 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001130:	4b11      	ldr	r3, [pc, #68]	; (8001178 <_sbrk+0x64>)
 8001132:	4a12      	ldr	r2, [pc, #72]	; (800117c <_sbrk+0x68>)
 8001134:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001136:	4b10      	ldr	r3, [pc, #64]	; (8001178 <_sbrk+0x64>)
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4413      	add	r3, r2
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	429a      	cmp	r2, r3
 8001142:	d207      	bcs.n	8001154 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001144:	f00b fe56 	bl	800cdf4 <__errno>
 8001148:	4603      	mov	r3, r0
 800114a:	220c      	movs	r2, #12
 800114c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800114e:	f04f 33ff 	mov.w	r3, #4294967295
 8001152:	e009      	b.n	8001168 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001154:	4b08      	ldr	r3, [pc, #32]	; (8001178 <_sbrk+0x64>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800115a:	4b07      	ldr	r3, [pc, #28]	; (8001178 <_sbrk+0x64>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4413      	add	r3, r2
 8001162:	4a05      	ldr	r2, [pc, #20]	; (8001178 <_sbrk+0x64>)
 8001164:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001166:	68fb      	ldr	r3, [r7, #12]
}
 8001168:	4618      	mov	r0, r3
 800116a:	3718      	adds	r7, #24
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20020000 	.word	0x20020000
 8001174:	00000400 	.word	0x00000400
 8001178:	2000027c 	.word	0x2000027c
 800117c:	200054c8 	.word	0x200054c8

08001180 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <SystemInit+0x20>)
 8001186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800118a:	4a05      	ldr	r2, [pc, #20]	; (80011a0 <SystemInit+0x20>)
 800118c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001190:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011a8:	480d      	ldr	r0, [pc, #52]	; (80011e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011aa:	490e      	ldr	r1, [pc, #56]	; (80011e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011ac:	4a0e      	ldr	r2, [pc, #56]	; (80011e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b0:	e002      	b.n	80011b8 <LoopCopyDataInit>

080011b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011b6:	3304      	adds	r3, #4

080011b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011bc:	d3f9      	bcc.n	80011b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011be:	4a0b      	ldr	r2, [pc, #44]	; (80011ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011c0:	4c0b      	ldr	r4, [pc, #44]	; (80011f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c4:	e001      	b.n	80011ca <LoopFillZerobss>

080011c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011c8:	3204      	adds	r2, #4

080011ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011cc:	d3fb      	bcc.n	80011c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011ce:	f7ff ffd7 	bl	8001180 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011d2:	f00b fe15 	bl	800ce00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011d6:	f7ff f979 	bl	80004cc <main>
  bx  lr    
 80011da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80011e8:	0800eff8 	.word	0x0800eff8
  ldr r2, =_sbss
 80011ec:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80011f0:	200054c8 	.word	0x200054c8

080011f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011f4:	e7fe      	b.n	80011f4 <ADC_IRQHandler>
	...

080011f8 <mcpr_LCD_InitPorts>:
#include "fonts.h"
#include "display.h"
#include <stdio.h>

void mcpr_LCD_InitPorts(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
	// GPIOB Takt aktivieren | wird anscheinend nicht benoetigt
	// RCC->AHB1ENR |= 1<<1;
	
	// GPIOD und GPIOE Takt aktivieren, falls zuvor nicht geschehen
	RCC->AHB1ENR |= 1<<3;
 80011fc:	4b14      	ldr	r3, [pc, #80]	; (8001250 <mcpr_LCD_InitPorts+0x58>)
 80011fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001200:	4a13      	ldr	r2, [pc, #76]	; (8001250 <mcpr_LCD_InitPorts+0x58>)
 8001202:	f043 0308 	orr.w	r3, r3, #8
 8001206:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= 1<<4;
 8001208:	4b11      	ldr	r3, [pc, #68]	; (8001250 <mcpr_LCD_InitPorts+0x58>)
 800120a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120c:	4a10      	ldr	r2, [pc, #64]	; (8001250 <mcpr_LCD_InitPorts+0x58>)
 800120e:	f043 0310 	orr.w	r3, r3, #16
 8001212:	6313      	str	r3, [r2, #48]	; 0x30
	
	// benoetigte Datenleitungen und Steuerleitung zuruecksetzen falls zuvor noch nicht geschehen
	// 0b0000 0011 0000 0000 0011 0000 0011 0000
	GPIOD->MODER &= 0x03003030;
 8001214:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <mcpr_LCD_InitPorts+0x5c>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	490e      	ldr	r1, [pc, #56]	; (8001254 <mcpr_LCD_InitPorts+0x5c>)
 800121a:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <mcpr_LCD_InitPorts+0x60>)
 800121c:	4013      	ands	r3, r2
 800121e:	600b      	str	r3, [r1, #0]
	
	// Datenleitungen und Steuerleitungen neusetzen
	// 0b0101 0100 0101 0101 0100 0101 0100 0101
	GPIOD->MODER |= 0x54554545;
 8001220:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <mcpr_LCD_InitPorts+0x5c>)
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	490b      	ldr	r1, [pc, #44]	; (8001254 <mcpr_LCD_InitPorts+0x5c>)
 8001226:	4b0d      	ldr	r3, [pc, #52]	; (800125c <mcpr_LCD_InitPorts+0x64>)
 8001228:	4313      	orrs	r3, r2
 800122a:	600b      	str	r3, [r1, #0]
	
	// GPIOE Daten u. Steuerleitung zuruecksetzen
	// 0b0000 0000 0000 0000 0011 1111 0011 1111
	GPIOE->MODER &= 0x00003F3F;
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <mcpr_LCD_InitPorts+0x68>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	490b      	ldr	r1, [pc, #44]	; (8001260 <mcpr_LCD_InitPorts+0x68>)
 8001232:	f643 733f 	movw	r3, #16191	; 0x3f3f
 8001236:	4013      	ands	r3, r2
 8001238:	600b      	str	r3, [r1, #0]
	
	// GPIOE Daten u Steuerleitungen neusetzen
	// 0b0101 0101 0101 0101 0100 0000 0100 0000
	GPIOE->MODER |= 0x55554040;
 800123a:	4b09      	ldr	r3, [pc, #36]	; (8001260 <mcpr_LCD_InitPorts+0x68>)
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	4908      	ldr	r1, [pc, #32]	; (8001260 <mcpr_LCD_InitPorts+0x68>)
 8001240:	4b08      	ldr	r3, [pc, #32]	; (8001264 <mcpr_LCD_InitPorts+0x6c>)
 8001242:	4313      	orrs	r3, r2
 8001244:	600b      	str	r3, [r1, #0]
	
	// GPIOB Steuerleitungen zuruecksetzen
	//
	// GPIOB->MODER &=;
	// GPIOB->MODER |=;
}
 8001246:	bf00      	nop
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	40023800 	.word	0x40023800
 8001254:	40020c00 	.word	0x40020c00
 8001258:	03003030 	.word	0x03003030
 800125c:	54554545 	.word	0x54554545
 8001260:	40021000 	.word	0x40021000
 8001264:	55554040 	.word	0x55554040

08001268 <mcpr_LCD_Output16BitWord>:
{
	mcpr_LCD_Output16BitWord(data);
}

void mcpr_LCD_Output16BitWord(uint16_t data)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	80fb      	strh	r3, [r7, #6]
  // Die Bits 0 und 1 von data muessen auf Port D, Bits 14 und 15 ausgegeben werden
	// Die Bits 2 und 3 von data muessen auf Port D, Bit 0 und Bit 1 ausgegeben werden 0000 1100
	// Die Bits 13 bis 15 muessen auf Port D, Bit 8 bis 10 ausgegeben werden 1110
	// Bitmaske ergibt sich aus den zusetzenden bits auf dem port
	GPIOD->ODR &= ~(0xC703u);
 8001272:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <mcpr_LCD_Output16BitWord+0x70>)
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	4a18      	ldr	r2, [pc, #96]	; (80012d8 <mcpr_LCD_Output16BitWord+0x70>)
 8001278:	f423 4347 	bic.w	r3, r3, #50944	; 0xc700
 800127c:	f023 0303 	bic.w	r3, r3, #3
 8001280:	6153      	str	r3, [r2, #20]
	GPIOD->ODR |= (((data & 0x3u)<<14) | ((data & 0x0Cu) >> 2) | ((data & 0xE000u) >> 5));
 8001282:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <mcpr_LCD_Output16BitWord+0x70>)
 8001284:	695a      	ldr	r2, [r3, #20]
 8001286:	88fb      	ldrh	r3, [r7, #6]
 8001288:	039b      	lsls	r3, r3, #14
 800128a:	b299      	uxth	r1, r3
 800128c:	88fb      	ldrh	r3, [r7, #6]
 800128e:	089b      	lsrs	r3, r3, #2
 8001290:	f003 0303 	and.w	r3, r3, #3
 8001294:	4319      	orrs	r1, r3
 8001296:	88fb      	ldrh	r3, [r7, #6]
 8001298:	095b      	lsrs	r3, r3, #5
 800129a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800129e:	430b      	orrs	r3, r1
 80012a0:	490d      	ldr	r1, [pc, #52]	; (80012d8 <mcpr_LCD_Output16BitWord+0x70>)
 80012a2:	4313      	orrs	r3, r2
 80012a4:	614b      	str	r3, [r1, #20]
	
	// Die Bits 4 bis 12 muessen auf Port E, Bit 7 bis 15 ausgegeben werden
	// Bitmaske ergibt sich aus den zusetzenden bits auf dem port
	GPIOE->ODR &= ~(0xFF80u);
 80012a6:	4b0d      	ldr	r3, [pc, #52]	; (80012dc <mcpr_LCD_Output16BitWord+0x74>)
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	4a0c      	ldr	r2, [pc, #48]	; (80012dc <mcpr_LCD_Output16BitWord+0x74>)
 80012ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80012b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80012b4:	6153      	str	r3, [r2, #20]
	GPIOE->ODR |= (data & 0x1FF0u) << 3;	
 80012b6:	4b09      	ldr	r3, [pc, #36]	; (80012dc <mcpr_LCD_Output16BitWord+0x74>)
 80012b8:	695a      	ldr	r2, [r3, #20]
 80012ba:	88fb      	ldrh	r3, [r7, #6]
 80012bc:	00d9      	lsls	r1, r3, #3
 80012be:	f64f 7380 	movw	r3, #65408	; 0xff80
 80012c2:	400b      	ands	r3, r1
 80012c4:	4905      	ldr	r1, [pc, #20]	; (80012dc <mcpr_LCD_Output16BitWord+0x74>)
 80012c6:	4313      	orrs	r3, r2
 80012c8:	614b      	str	r3, [r1, #20]
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	40020c00 	.word	0x40020c00
 80012dc:	40021000 	.word	0x40021000

080012e0 <mcpr_LCD_WriteData>:

void mcpr_LCD_WriteData(uint16_t data) // wie das mit den delays is, keine Ahnung
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	80fb      	strh	r3, [r7, #6]
	// Aktivieren des Displays CS -> CHIP SELECT
	// Mit PD7 = Low waehlt der Mikrocontroller externe Bausteine an (hier IC3 o. Display).
	// Bei PD7 = High kann an den externen Bausteinen nichts geaendert werden.
	// PD11 = High wird von den externen Bausteinen der IC3 fuer die LEDs ausgewaehlt,
	// PD11 = Low waehlt das Display aus.
	GPIOD->ODR &= ~(1u<<7);
 80012ea:	4b1c      	ldr	r3, [pc, #112]	; (800135c <mcpr_LCD_WriteData+0x7c>)
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	4a1b      	ldr	r2, [pc, #108]	; (800135c <mcpr_LCD_WriteData+0x7c>)
 80012f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80012f4:	6153      	str	r3, [r2, #20]
	GPIOD->ODR &= ~(1u<<11);
 80012f6:	4b19      	ldr	r3, [pc, #100]	; (800135c <mcpr_LCD_WriteData+0x7c>)
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	4a18      	ldr	r2, [pc, #96]	; (800135c <mcpr_LCD_WriteData+0x7c>)
 80012fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001300:	6153      	str	r3, [r2, #20]
	
	// PD5 auf HIGH setzen
	GPIOD->ODR |= 1<<5;
 8001302:	4b16      	ldr	r3, [pc, #88]	; (800135c <mcpr_LCD_WriteData+0x7c>)
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	4a15      	ldr	r2, [pc, #84]	; (800135c <mcpr_LCD_WriteData+0x7c>)
 8001308:	f043 0320 	orr.w	r3, r3, #32
 800130c:	6153      	str	r3, [r2, #20]
	
	// RD muss waehrend des Zugriffs immer 1 sein, setze PD4 auf 1
	GPIOD->ODR |= 1<<4;
 800130e:	4b13      	ldr	r3, [pc, #76]	; (800135c <mcpr_LCD_WriteData+0x7c>)
 8001310:	695b      	ldr	r3, [r3, #20]
 8001312:	4a12      	ldr	r2, [pc, #72]	; (800135c <mcpr_LCD_WriteData+0x7c>)
 8001314:	f043 0310 	orr.w	r3, r3, #16
 8001318:	6153      	str	r3, [r2, #20]
	
	// Wir schreiben Daten also PE3 (DC) auf 1 setzen;
	GPIOE->ODR |= 1<<3;
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <mcpr_LCD_WriteData+0x80>)
 800131c:	695b      	ldr	r3, [r3, #20]
 800131e:	4a10      	ldr	r2, [pc, #64]	; (8001360 <mcpr_LCD_WriteData+0x80>)
 8001320:	f043 0308 	orr.w	r3, r3, #8
 8001324:	6153      	str	r3, [r2, #20]
	
	// LOW PD5
	GPIOD->ODR ^= 1<<5;
 8001326:	4b0d      	ldr	r3, [pc, #52]	; (800135c <mcpr_LCD_WriteData+0x7c>)
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	4a0c      	ldr	r2, [pc, #48]	; (800135c <mcpr_LCD_WriteData+0x7c>)
 800132c:	f083 0320 	eor.w	r3, r3, #32
 8001330:	6153      	str	r3, [r2, #20]
	
	// Daten ans Display schreiben
	mcpr_LCD_Output16BitWord(data);
 8001332:	88fb      	ldrh	r3, [r7, #6]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff ff97 	bl	8001268 <mcpr_LCD_Output16BitWord>
	
	// PD5 wieder HIGH setzen, da bei steigender Flanke die Daten am Grafikcontroller uebernommen werden
	GPIOD->ODR ^= 1<<5;
 800133a:	4b08      	ldr	r3, [pc, #32]	; (800135c <mcpr_LCD_WriteData+0x7c>)
 800133c:	695b      	ldr	r3, [r3, #20]
 800133e:	4a07      	ldr	r2, [pc, #28]	; (800135c <mcpr_LCD_WriteData+0x7c>)
 8001340:	f083 0320 	eor.w	r3, r3, #32
 8001344:	6153      	str	r3, [r2, #20]
	
	// Ziehe PD7 wieder auf HIGH
	GPIOD->ODR |= 1<<7;	
 8001346:	4b05      	ldr	r3, [pc, #20]	; (800135c <mcpr_LCD_WriteData+0x7c>)
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	4a04      	ldr	r2, [pc, #16]	; (800135c <mcpr_LCD_WriteData+0x7c>)
 800134c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001350:	6153      	str	r3, [r2, #20]
	// PD5 wieder auf LOW ziehen? Die Low-aktiven Steuerleitungen /RD, /WR und /CS muessen vor dem Reset deaktiviert werden (d.h. auf 1 gesetzt werden).
	// GPIOD->ODR &= ~(1u<<5);
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40020c00 	.word	0x40020c00
 8001360:	40021000 	.word	0x40021000

08001364 <mcpr_LCD_WriteCommand>:

void mcpr_LCD_WriteCommand(uint16_t data) // wie das mit den delays is, keine Ahnung
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	80fb      	strh	r3, [r7, #6]
	// Aktivieren des Displays CS -> CHIP SELECT
	// Mit PD7 = Low waehlt der Mikrocontroller externe Bausteine an (hier IC3 o. Display).
	// Bei PD7 = High kann an den externen Bausteinen nichts geaendert werden.
	// PD11 = High wird von den externen Bausteinen der IC3 fuer die LEDs ausgewaehlt,
	// PD11 = Low waehlt das Display aus.
	GPIOD->ODR &= ~(1u<<7);
 800136e:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <mcpr_LCD_WriteCommand+0x7c>)
 8001370:	695b      	ldr	r3, [r3, #20]
 8001372:	4a1b      	ldr	r2, [pc, #108]	; (80013e0 <mcpr_LCD_WriteCommand+0x7c>)
 8001374:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001378:	6153      	str	r3, [r2, #20]
	GPIOD->ODR &= ~(1u<<11);
 800137a:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <mcpr_LCD_WriteCommand+0x7c>)
 800137c:	695b      	ldr	r3, [r3, #20]
 800137e:	4a18      	ldr	r2, [pc, #96]	; (80013e0 <mcpr_LCD_WriteCommand+0x7c>)
 8001380:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001384:	6153      	str	r3, [r2, #20]
	
	// PD5 auf HIGH setzen
	GPIOD->ODR |= 1<<5;
 8001386:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <mcpr_LCD_WriteCommand+0x7c>)
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	4a15      	ldr	r2, [pc, #84]	; (80013e0 <mcpr_LCD_WriteCommand+0x7c>)
 800138c:	f043 0320 	orr.w	r3, r3, #32
 8001390:	6153      	str	r3, [r2, #20]
	
	// RD muss waehrend des Zugriffs immer 1 sein, setze PD4 auf 1
	GPIOD->ODR |= 1<<4;
 8001392:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <mcpr_LCD_WriteCommand+0x7c>)
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	4a12      	ldr	r2, [pc, #72]	; (80013e0 <mcpr_LCD_WriteCommand+0x7c>)
 8001398:	f043 0310 	orr.w	r3, r3, #16
 800139c:	6153      	str	r3, [r2, #20]
	
	// Wir schreiben Kommandos also PE3 (DC) auf 0 setzen;
	GPIOE->ODR &= ~(1u<<3);
 800139e:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <mcpr_LCD_WriteCommand+0x80>)
 80013a0:	695b      	ldr	r3, [r3, #20]
 80013a2:	4a10      	ldr	r2, [pc, #64]	; (80013e4 <mcpr_LCD_WriteCommand+0x80>)
 80013a4:	f023 0308 	bic.w	r3, r3, #8
 80013a8:	6153      	str	r3, [r2, #20]
	
	// LOW PD5
	GPIOD->ODR ^= 1<<5;
 80013aa:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <mcpr_LCD_WriteCommand+0x7c>)
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	4a0c      	ldr	r2, [pc, #48]	; (80013e0 <mcpr_LCD_WriteCommand+0x7c>)
 80013b0:	f083 0320 	eor.w	r3, r3, #32
 80013b4:	6153      	str	r3, [r2, #20]
	
	// Daten ans Display schreiben
	mcpr_LCD_Output16BitWord(data);
 80013b6:	88fb      	ldrh	r3, [r7, #6]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff ff55 	bl	8001268 <mcpr_LCD_Output16BitWord>
	
	// PD5 wieder HIGH setzen, da bei steigender Flanke die Daten am Grafikcontroller uebernommen werden
	GPIOD->ODR ^= 1<<5;
 80013be:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <mcpr_LCD_WriteCommand+0x7c>)
 80013c0:	695b      	ldr	r3, [r3, #20]
 80013c2:	4a07      	ldr	r2, [pc, #28]	; (80013e0 <mcpr_LCD_WriteCommand+0x7c>)
 80013c4:	f083 0320 	eor.w	r3, r3, #32
 80013c8:	6153      	str	r3, [r2, #20]
	
	// Ziehe PD7 wieder auf HIGH
	GPIOD->ODR |= 1<<7;	
 80013ca:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <mcpr_LCD_WriteCommand+0x7c>)
 80013cc:	695b      	ldr	r3, [r3, #20]
 80013ce:	4a04      	ldr	r2, [pc, #16]	; (80013e0 <mcpr_LCD_WriteCommand+0x7c>)
 80013d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013d4:	6153      	str	r3, [r2, #20]
	// PD5 wieder auf LOW ziehen? Die Low-aktiven Steuerleitungen /RD, /WR und /CS muessen vor dem Reset deaktiviert werden (d.h. auf 1 gesetzt werden).
	// GPIOD->ODR &= ~(1u<<5);	
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40020c00 	.word	0x40020c00
 80013e4:	40021000 	.word	0x40021000

080013e8 <mcpr_LCD_WriteReg>:

void mcpr_LCD_WriteReg(uint16_t cmd, uint16_t data)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	460a      	mov	r2, r1
 80013f2:	80fb      	strh	r3, [r7, #6]
 80013f4:	4613      	mov	r3, r2
 80013f6:	80bb      	strh	r3, [r7, #4]
	mcpr_LCD_WriteCommand(cmd);
 80013f8:	88fb      	ldrh	r3, [r7, #6]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff ffb2 	bl	8001364 <mcpr_LCD_WriteCommand>
	mcpr_LCD_WriteData(data);	
 8001400:	88bb      	ldrh	r3, [r7, #4]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff ff6c 	bl	80012e0 <mcpr_LCD_WriteData>
}
 8001408:	bf00      	nop
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <mcpr_LCD_Init>:

void mcpr_LCD_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
	// helper function
	mcpr_LCD_InitPorts();
 8001414:	f7ff fef0 	bl	80011f8 <mcpr_LCD_InitPorts>

	// Low Impuls auf die Reset Leitung
	GPIOD->ODR &= ~(1u<<3);
 8001418:	4b35      	ldr	r3, [pc, #212]	; (80014f0 <mcpr_LCD_Init+0xe0>)
 800141a:	695b      	ldr	r3, [r3, #20]
 800141c:	4a34      	ldr	r2, [pc, #208]	; (80014f0 <mcpr_LCD_Init+0xe0>)
 800141e:	f023 0308 	bic.w	r3, r3, #8
 8001422:	6153      	str	r3, [r2, #20]
	// min 15 us sekunden warten 
	u_delay(30);
 8001424:	201e      	movs	r0, #30
 8001426:	f000 f9c1 	bl	80017ac <u_delay>
	// anschliessend high setzen
	GPIOD->ODR |= 1<<3;
 800142a:	4b31      	ldr	r3, [pc, #196]	; (80014f0 <mcpr_LCD_Init+0xe0>)
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	4a30      	ldr	r2, [pc, #192]	; (80014f0 <mcpr_LCD_Init+0xe0>)
 8001430:	f043 0308 	orr.w	r3, r3, #8
 8001434:	6153      	str	r3, [r2, #20]

	// Initialisierung
	mcpr_LCD_WriteReg(0x0010, 0x0001); /* Enter sleep mode */
 8001436:	2101      	movs	r1, #1
 8001438:	2010      	movs	r0, #16
 800143a:	f7ff ffd5 	bl	80013e8 <mcpr_LCD_WriteReg>
	mcpr_LCD_WriteReg(0x001E, 0x00B2); /* Set initial power parameters. */
 800143e:	21b2      	movs	r1, #178	; 0xb2
 8001440:	201e      	movs	r0, #30
 8001442:	f7ff ffd1 	bl	80013e8 <mcpr_LCD_WriteReg>
	mcpr_LCD_WriteReg(0x0028, 0x0006); /* Set initial power parameters. */
 8001446:	2106      	movs	r1, #6
 8001448:	2028      	movs	r0, #40	; 0x28
 800144a:	f7ff ffcd 	bl	80013e8 <mcpr_LCD_WriteReg>
	mcpr_LCD_WriteReg(0x0000, 0x0001); /* Start the oscillator.*/
 800144e:	2101      	movs	r1, #1
 8001450:	2000      	movs	r0, #0
 8001452:	f7ff ffc9 	bl	80013e8 <mcpr_LCD_WriteReg>
	mcpr_LCD_WriteReg(0x0001, 0x72EF); /* Set pixel format and basic display orientation */
 8001456:	f247 21ef 	movw	r1, #29423	; 0x72ef
 800145a:	2001      	movs	r0, #1
 800145c:	f7ff ffc4 	bl	80013e8 <mcpr_LCD_WriteReg>
	mcpr_LCD_WriteReg(0x0002, 0x0600);
 8001460:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001464:	2002      	movs	r0, #2
 8001466:	f7ff ffbf 	bl	80013e8 <mcpr_LCD_WriteReg>
	mcpr_LCD_WriteReg(0x0010, 0x0000); /* Exit sleep mode.*/ 
 800146a:	2100      	movs	r1, #0
 800146c:	2010      	movs	r0, #16
 800146e:	f7ff ffbb 	bl	80013e8 <mcpr_LCD_WriteReg>
	// 30ms warten weniger geht meist auch
	m_delay(30);
 8001472:	201e      	movs	r0, #30
 8001474:	f000 f9e0 	bl	8001838 <m_delay>
	mcpr_LCD_WriteReg(0x0011, 0x6870); /* Configure pixel color format and MCU interface parameters.*/
 8001478:	f646 0170 	movw	r1, #26736	; 0x6870
 800147c:	2011      	movs	r0, #17
 800147e:	f7ff ffb3 	bl	80013e8 <mcpr_LCD_WriteReg>
	mcpr_LCD_WriteReg(0x0012, 0x0999); /* Set analog parameters */
 8001482:	f640 1199 	movw	r1, #2457	; 0x999
 8001486:	2012      	movs	r0, #18
 8001488:	f7ff ffae 	bl	80013e8 <mcpr_LCD_WriteReg>
	mcpr_LCD_WriteReg(0x0026, 0x3800);
 800148c:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8001490:	2026      	movs	r0, #38	; 0x26
 8001492:	f7ff ffa9 	bl	80013e8 <mcpr_LCD_WriteReg>
	mcpr_LCD_WriteReg(0x0007, 0x0033); /* Enable the display */
 8001496:	2133      	movs	r1, #51	; 0x33
 8001498:	2007      	movs	r0, #7
 800149a:	f7ff ffa5 	bl	80013e8 <mcpr_LCD_WriteReg>
	mcpr_LCD_WriteReg(0x000C, 0x0005); /* Set VCIX2 voltage to 6.1V.*/
 800149e:	2105      	movs	r1, #5
 80014a0:	200c      	movs	r0, #12
 80014a2:	f7ff ffa1 	bl	80013e8 <mcpr_LCD_WriteReg>
	mcpr_LCD_WriteReg(0x000D, 0x000A); /* Configure Vlcd63 and VCOMl */
 80014a6:	210a      	movs	r1, #10
 80014a8:	200d      	movs	r0, #13
 80014aa:	f7ff ff9d 	bl	80013e8 <mcpr_LCD_WriteReg>
	mcpr_LCD_WriteReg(0x000E, 0x2E00);
 80014ae:	f44f 5138 	mov.w	r1, #11776	; 0x2e00
 80014b2:	200e      	movs	r0, #14
 80014b4:	f7ff ff98 	bl	80013e8 <mcpr_LCD_WriteReg>
	mcpr_LCD_WriteReg(0x0044, (240-1) << 8); /* Set the display size and ensure that the GRAM window	is set to allow access to the full display buffer.*/
 80014b8:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 80014bc:	2044      	movs	r0, #68	; 0x44
 80014be:	f7ff ff93 	bl	80013e8 <mcpr_LCD_WriteReg>
	mcpr_LCD_WriteReg(0x0045, 0x0000);
 80014c2:	2100      	movs	r1, #0
 80014c4:	2045      	movs	r0, #69	; 0x45
 80014c6:	f7ff ff8f 	bl	80013e8 <mcpr_LCD_WriteReg>
	mcpr_LCD_WriteReg(0x0046, 320-1);
 80014ca:	f240 113f 	movw	r1, #319	; 0x13f
 80014ce:	2046      	movs	r0, #70	; 0x46
 80014d0:	f7ff ff8a 	bl	80013e8 <mcpr_LCD_WriteReg>
	mcpr_LCD_WriteReg(0x004E, 0x0000); /*Set cursor to 0,0 */
 80014d4:	2100      	movs	r1, #0
 80014d6:	204e      	movs	r0, #78	; 0x4e
 80014d8:	f7ff ff86 	bl	80013e8 <mcpr_LCD_WriteReg>
	mcpr_LCD_WriteReg(0x004F, 0x0000);
 80014dc:	2100      	movs	r1, #0
 80014de:	204f      	movs	r0, #79	; 0x4f
 80014e0:	f7ff ff82 	bl	80013e8 <mcpr_LCD_WriteReg>
	mcpr_LCD_ClearDisplay(LCD_BACKGROUND); // Clear Display
 80014e4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80014e8:	f000 f828 	bl	800153c <mcpr_LCD_ClearDisplay>
}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40020c00 	.word	0x40020c00

080014f4 <mcpr_LCD_SetCursor>:

// uint16_t, da die Koordinaten Register, garnicht groesser sind?
void mcpr_LCD_SetCursor(const uint16_t x, const uint16_t y)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	460a      	mov	r2, r1
 80014fe:	80fb      	strh	r3, [r7, #6]
 8001500:	4613      	mov	r3, r2
 8001502:	80bb      	strh	r3, [r7, #4]
	// SSD2119_X_RAM_ADDR_REG 0x4E
	// SSD2119_Y_RAM_ADDR_REG 0x4F
	mcpr_LCD_WriteReg(0x004E, x); // Set GDDRAM X 
 8001504:	88fb      	ldrh	r3, [r7, #6]
 8001506:	4619      	mov	r1, r3
 8001508:	204e      	movs	r0, #78	; 0x4e
 800150a:	f7ff ff6d 	bl	80013e8 <mcpr_LCD_WriteReg>
	mcpr_LCD_WriteReg(0x004F, y); // Set GDDRAM Y
 800150e:	88bb      	ldrh	r3, [r7, #4]
 8001510:	4619      	mov	r1, r3
 8001512:	204f      	movs	r0, #79	; 0x4f
 8001514:	f7ff ff68 	bl	80013e8 <mcpr_LCD_WriteReg>
}
 8001518:	bf00      	nop
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <mcpr_LCD_DrawPixel>:

void mcpr_LCD_DrawPixel(uint16_t color)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	80fb      	strh	r3, [r7, #6]
	// Write Data to GRAM (R22h)
	mcpr_LCD_WriteReg(0x0022, color);
 800152a:	88fb      	ldrh	r3, [r7, #6]
 800152c:	4619      	mov	r1, r3
 800152e:	2022      	movs	r0, #34	; 0x22
 8001530:	f7ff ff5a 	bl	80013e8 <mcpr_LCD_WriteReg>
}
 8001534:	bf00      	nop
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <mcpr_LCD_ClearDisplay>:

void mcpr_LCD_ClearDisplay(uint16_t color)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	80fb      	strh	r3, [r7, #6]
	// die x-Koordinate des Cursors zw. 0 und 319 liegen und die y-Koordinate zw. 0 und 239
	// Die Position des Cursors inkrementiert sich automatisch. Wuerden also noch weitere Datenzugriffe erfolgen, ergaebe sich eine horizontale Linie.	
	mcpr_LCD_SetCursor(0x0, 0x0);
 8001546:	2100      	movs	r1, #0
 8001548:	2000      	movs	r0, #0
 800154a:	f7ff ffd3 	bl	80014f4 <mcpr_LCD_SetCursor>
	
	// Optimierung: kein erneutes Aufrufen der DrawPixel Fkt. 
	// stattdessen wiederholtes ausloesen einer Write Flanke, da Color
	// Information sich nicht veraendern und Cursor automatisch inkrementiert wird
	for (uint32_t i = 0; i < DISPLAY_WIDTH*DISPLAY_HEIGHT; i++)
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	e006      	b.n	8001562 <mcpr_LCD_ClearDisplay+0x26>
	{
		mcpr_LCD_DrawPixel(color);
 8001554:	88fb      	ldrh	r3, [r7, #6]
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff ffe2 	bl	8001520 <mcpr_LCD_DrawPixel>
	for (uint32_t i = 0; i < DISPLAY_WIDTH*DISPLAY_HEIGHT; i++)
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	3301      	adds	r3, #1
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 8001568:	d3f4      	bcc.n	8001554 <mcpr_LCD_ClearDisplay+0x18>
	}
}
 800156a:	bf00      	nop
 800156c:	bf00      	nop
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <mcpr_LCD_WriteLetter>:
		mcpr_LCD_WriteCommand(0x0022);
	}
}

void mcpr_LCD_WriteLetter(uint16_t x, uint16_t y, uint16_t colorfg, uint16_t colorbg, uint8_t c)
{
 8001574:	b590      	push	{r4, r7, lr}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	4604      	mov	r4, r0
 800157c:	4608      	mov	r0, r1
 800157e:	4611      	mov	r1, r2
 8001580:	461a      	mov	r2, r3
 8001582:	4623      	mov	r3, r4
 8001584:	80fb      	strh	r3, [r7, #6]
 8001586:	4603      	mov	r3, r0
 8001588:	80bb      	strh	r3, [r7, #4]
 800158a:	460b      	mov	r3, r1
 800158c:	807b      	strh	r3, [r7, #2]
 800158e:	4613      	mov	r3, r2
 8001590:	803b      	strh	r3, [r7, #0]
	int pix_byte = 0;
 8001592:	2300      	movs	r3, #0
 8001594:	60bb      	str	r3, [r7, #8]

	// setze initial den Cursor auf x y
	mcpr_LCD_SetCursor(x, y);
 8001596:	88ba      	ldrh	r2, [r7, #4]
 8001598:	88fb      	ldrh	r3, [r7, #6]
 800159a:	4611      	mov	r1, r2
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff ffa9 	bl	80014f4 <mcpr_LCD_SetCursor>

	for (uint8_t i = 0; i < 31; i++)
 80015a2:	2300      	movs	r3, #0
 80015a4:	73fb      	strb	r3, [r7, #15]
 80015a6:	e034      	b.n	8001612 <mcpr_LCD_WriteLetter+0x9e>
	{
		pix_byte = console_font_12x16[(32*(int)c)+i];
 80015a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015ac:	015a      	lsls	r2, r3, #5
 80015ae:	7bfb      	ldrb	r3, [r7, #15]
 80015b0:	4413      	add	r3, r2
 80015b2:	4a1c      	ldr	r2, [pc, #112]	; (8001624 <mcpr_LCD_WriteLetter+0xb0>)
 80015b4:	5cd3      	ldrb	r3, [r2, r3]
 80015b6:	60bb      	str	r3, [r7, #8]
		for (uint8_t k = 8; k > 0; k--)
 80015b8:	2308      	movs	r3, #8
 80015ba:	73bb      	strb	r3, [r7, #14]
 80015bc:	e014      	b.n	80015e8 <mcpr_LCD_WriteLetter+0x74>
		{
			// Schreibe ein pixel mit der farbe fg wenn 1 und ein pixel mir farbe bg wenn 0
			// alternativ kann das umgeschrieben werden um nicht extra ein pixel zu schreiben wenn 0
			(pix_byte & (1<<(k-1))) ? mcpr_LCD_DrawPixel(colorfg) : mcpr_LCD_DrawPixel(colorbg);
 80015be:	7bbb      	ldrb	r3, [r7, #14]
 80015c0:	3b01      	subs	r3, #1
 80015c2:	68ba      	ldr	r2, [r7, #8]
 80015c4:	fa42 f303 	asr.w	r3, r2, r3
 80015c8:	f003 0301 	and.w	r3, r3, #1
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d004      	beq.n	80015da <mcpr_LCD_WriteLetter+0x66>
 80015d0:	887b      	ldrh	r3, [r7, #2]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff ffa4 	bl	8001520 <mcpr_LCD_DrawPixel>
 80015d8:	e003      	b.n	80015e2 <mcpr_LCD_WriteLetter+0x6e>
 80015da:	883b      	ldrh	r3, [r7, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff ff9f 	bl	8001520 <mcpr_LCD_DrawPixel>
		for (uint8_t k = 8; k > 0; k--)
 80015e2:	7bbb      	ldrb	r3, [r7, #14]
 80015e4:	3b01      	subs	r3, #1
 80015e6:	73bb      	strb	r3, [r7, #14]
 80015e8:	7bbb      	ldrb	r3, [r7, #14]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d1e7      	bne.n	80015be <mcpr_LCD_WriteLetter+0x4a>
		}

		// setze Cursor auf anfangs position x und inkrementiere y um 1 um in die naechste zeile zu springen
		if (i%2 != 0)
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d008      	beq.n	800160c <mcpr_LCD_WriteLetter+0x98>
			mcpr_LCD_SetCursor(x, y+=1);
 80015fa:	88bb      	ldrh	r3, [r7, #4]
 80015fc:	3301      	adds	r3, #1
 80015fe:	80bb      	strh	r3, [r7, #4]
 8001600:	88ba      	ldrh	r2, [r7, #4]
 8001602:	88fb      	ldrh	r3, [r7, #6]
 8001604:	4611      	mov	r1, r2
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff ff74 	bl	80014f4 <mcpr_LCD_SetCursor>
	for (uint8_t i = 0; i < 31; i++)
 800160c:	7bfb      	ldrb	r3, [r7, #15]
 800160e:	3301      	adds	r3, #1
 8001610:	73fb      	strb	r3, [r7, #15]
 8001612:	7bfb      	ldrb	r3, [r7, #15]
 8001614:	2b1e      	cmp	r3, #30
 8001616:	d9c7      	bls.n	80015a8 <mcpr_LCD_WriteLetter+0x34>
	}
}
 8001618:	bf00      	nop
 800161a:	bf00      	nop
 800161c:	3714      	adds	r7, #20
 800161e:	46bd      	mov	sp, r7
 8001620:	bd90      	pop	{r4, r7, pc}
 8001622:	bf00      	nop
 8001624:	0800cfe8 	.word	0x0800cfe8

08001628 <mcpr_LCD_WriteString>:

void mcpr_LCD_WriteString(uint16_t x, uint16_t y, uint16_t colorfg, uint16_t colorbg, char str[MAX_STR_LEN])
{
 8001628:	b590      	push	{r4, r7, lr}
 800162a:	b085      	sub	sp, #20
 800162c:	af02      	add	r7, sp, #8
 800162e:	4604      	mov	r4, r0
 8001630:	4608      	mov	r0, r1
 8001632:	4611      	mov	r1, r2
 8001634:	461a      	mov	r2, r3
 8001636:	4623      	mov	r3, r4
 8001638:	80fb      	strh	r3, [r7, #6]
 800163a:	4603      	mov	r3, r0
 800163c:	80bb      	strh	r3, [r7, #4]
 800163e:	460b      	mov	r3, r1
 8001640:	807b      	strh	r3, [r7, #2]
 8001642:	4613      	mov	r3, r2
 8001644:	803b      	strh	r3, [r7, #0]
	while (*str != '\0')
 8001646:	e00f      	b.n	8001668 <mcpr_LCD_WriteString+0x40>
	{
		mcpr_LCD_WriteLetter(x, y, colorfg, colorbg, *str);
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	883c      	ldrh	r4, [r7, #0]
 800164e:	887a      	ldrh	r2, [r7, #2]
 8001650:	88b9      	ldrh	r1, [r7, #4]
 8001652:	88f8      	ldrh	r0, [r7, #6]
 8001654:	9300      	str	r3, [sp, #0]
 8001656:	4623      	mov	r3, r4
 8001658:	f7ff ff8c 	bl	8001574 <mcpr_LCD_WriteLetter>
		// naechster Buchstabe
		str+=1;
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	3301      	adds	r3, #1
 8001660:	61bb      	str	r3, [r7, #24]
		// springe ein Zeichen nach rechts
		x+=12;
 8001662:	88fb      	ldrh	r3, [r7, #6]
 8001664:	330c      	adds	r3, #12
 8001666:	80fb      	strh	r3, [r7, #6]
	while (*str != '\0')
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1eb      	bne.n	8001648 <mcpr_LCD_WriteString+0x20>
	}
}
 8001670:	bf00      	nop
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	bd90      	pop	{r4, r7, pc}
	...

0800167c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168a:	2b00      	cmp	r3, #0
 800168c:	db0b      	blt.n	80016a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	f003 021f 	and.w	r2, r3, #31
 8001694:	4907      	ldr	r1, [pc, #28]	; (80016b4 <__NVIC_EnableIRQ+0x38>)
 8001696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169a:	095b      	lsrs	r3, r3, #5
 800169c:	2001      	movs	r0, #1
 800169e:	fa00 f202 	lsl.w	r2, r0, r2
 80016a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	e000e100 	.word	0xe000e100

080016b8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	db12      	blt.n	80016f0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	f003 021f 	and.w	r2, r3, #31
 80016d0:	490a      	ldr	r1, [pc, #40]	; (80016fc <__NVIC_DisableIRQ+0x44>)
 80016d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d6:	095b      	lsrs	r3, r3, #5
 80016d8:	2001      	movs	r0, #1
 80016da:	fa00 f202 	lsl.w	r2, r0, r2
 80016de:	3320      	adds	r3, #32
 80016e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80016e4:	f3bf 8f4f 	dsb	sy
}
 80016e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80016ea:	f3bf 8f6f 	isb	sy
}
 80016ee:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	e000e100 	.word	0xe000e100

08001700 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	6039      	str	r1, [r7, #0]
 800170a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800170c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001710:	2b00      	cmp	r3, #0
 8001712:	db0a      	blt.n	800172a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	b2da      	uxtb	r2, r3
 8001718:	490c      	ldr	r1, [pc, #48]	; (800174c <__NVIC_SetPriority+0x4c>)
 800171a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171e:	0112      	lsls	r2, r2, #4
 8001720:	b2d2      	uxtb	r2, r2
 8001722:	440b      	add	r3, r1
 8001724:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001728:	e00a      	b.n	8001740 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	b2da      	uxtb	r2, r3
 800172e:	4908      	ldr	r1, [pc, #32]	; (8001750 <__NVIC_SetPriority+0x50>)
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	f003 030f 	and.w	r3, r3, #15
 8001736:	3b04      	subs	r3, #4
 8001738:	0112      	lsls	r2, r2, #4
 800173a:	b2d2      	uxtb	r2, r2
 800173c:	440b      	add	r3, r1
 800173e:	761a      	strb	r2, [r3, #24]
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	e000e100 	.word	0xe000e100
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <TIM6_DAC_IRQHandler>:
#include "mcpr_timer.h"
#include <stdbool.h>

// IRQ Handler fuer TIM6, welche fuer die delay funktionen genutzt wird
void TIM6_DAC_IRQHandler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
	if (TIM6->SR & TIM_SR_UIF)
 8001758:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <TIM6_DAC_IRQHandler+0x50>)
 800175a:	691b      	ldr	r3, [r3, #16]
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	2b00      	cmp	r3, #0
 8001762:	d00c      	beq.n	800177e <TIM6_DAC_IRQHandler+0x2a>
	{
		// Resetten des Status Registers ansonsten wird die Service Routine sofort neu ausgeloest
		// gilt fuer alle Interrupts
		TIM6->SR &= ~TIM_SR_UIF;
 8001764:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <TIM6_DAC_IRQHandler+0x50>)
 8001766:	691b      	ldr	r3, [r3, #16]
 8001768:	4a0e      	ldr	r2, [pc, #56]	; (80017a4 <TIM6_DAC_IRQHandler+0x50>)
 800176a:	f023 0301 	bic.w	r3, r3, #1
 800176e:	6113      	str	r3, [r2, #16]
		resetCnt++;
 8001770:	4b0d      	ldr	r3, [pc, #52]	; (80017a8 <TIM6_DAC_IRQHandler+0x54>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	b2db      	uxtb	r3, r3
 8001776:	3301      	adds	r3, #1
 8001778:	b2da      	uxtb	r2, r3
 800177a:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <TIM6_DAC_IRQHandler+0x54>)
 800177c:	701a      	strb	r2, [r3, #0]
	}
	if (resetCnt == 2)
 800177e:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <TIM6_DAC_IRQHandler+0x54>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	b2db      	uxtb	r3, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d108      	bne.n	800179a <TIM6_DAC_IRQHandler+0x46>
	{
		resetCnt = 0;
 8001788:	4b07      	ldr	r3, [pc, #28]	; (80017a8 <TIM6_DAC_IRQHandler+0x54>)
 800178a:	2200      	movs	r2, #0
 800178c:	701a      	strb	r2, [r3, #0]
		//Beende den Timer
		TIM6->CR1 &= ~TIM_CR1_CEN;
 800178e:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <TIM6_DAC_IRQHandler+0x50>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a04      	ldr	r2, [pc, #16]	; (80017a4 <TIM6_DAC_IRQHandler+0x50>)
 8001794:	f023 0301 	bic.w	r3, r3, #1
 8001798:	6013      	str	r3, [r2, #0]
	}
}
 800179a:	bf00      	nop
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	40001000 	.word	0x40001000
 80017a8:	20000280 	.word	0x20000280

080017ac <u_delay>:

// Delay funktionen basierend auf dem TIM6 Interrupt
void u_delay(uint16_t us)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	80fb      	strh	r3, [r7, #6]
	// Setup Timer 6
	// aktivieren der TIM6 Clock auf bit 4
	RCC->APB1ENR |= (1<<4);
 80017b6:	4b1d      	ldr	r3, [pc, #116]	; (800182c <u_delay+0x80>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	4a1c      	ldr	r2, [pc, #112]	; (800182c <u_delay+0x80>)
 80017bc:	f043 0310 	orr.w	r3, r3, #16
 80017c0:	6413      	str	r3, [r2, #64]	; 0x40
	
	// fuer mikro-sekunden genauigkeit benoetigen wir einen Timertakt von 1MHz
	TIM6->PSC = 83;
 80017c2:	4b1b      	ldr	r3, [pc, #108]	; (8001830 <u_delay+0x84>)
 80017c4:	2253      	movs	r2, #83	; 0x53
 80017c6:	629a      	str	r2, [r3, #40]	; 0x28
	TIM6->ARR = us-1;
 80017c8:	88fb      	ldrh	r3, [r7, #6]
 80017ca:	1e5a      	subs	r2, r3, #1
 80017cc:	4b18      	ldr	r3, [pc, #96]	; (8001830 <u_delay+0x84>)
 80017ce:	62da      	str	r2, [r3, #44]	; 0x2c
	// Enable Interrupts
	TIM6->DIER |= TIM_DIER_UIE;
 80017d0:	4b17      	ldr	r3, [pc, #92]	; (8001830 <u_delay+0x84>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	4a16      	ldr	r2, [pc, #88]	; (8001830 <u_delay+0x84>)
 80017d6:	f043 0301 	orr.w	r3, r3, #1
 80017da:	60d3      	str	r3, [r2, #12]
	NVIC_SetPriority(TIM6_DAC_IRQn, 8);
 80017dc:	2108      	movs	r1, #8
 80017de:	2036      	movs	r0, #54	; 0x36
 80017e0:	f7ff ff8e 	bl	8001700 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017e4:	2036      	movs	r0, #54	; 0x36
 80017e6:	f7ff ff49 	bl	800167c <__NVIC_EnableIRQ>
	TIM6->CNT = 0;
 80017ea:	4b11      	ldr	r3, [pc, #68]	; (8001830 <u_delay+0x84>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	625a      	str	r2, [r3, #36]	; 0x24
	// setze resetCnt auf 1 da wir nicht das problem wie beim ms timer haben (es ist nicht schoen aber es funktioniert)
	resetCnt = 1;
 80017f0:	4b10      	ldr	r3, [pc, #64]	; (8001834 <u_delay+0x88>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	701a      	strb	r2, [r3, #0]
	TIM6->CR1 |= TIM_CR1_CEN;
 80017f6:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <u_delay+0x84>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a0d      	ldr	r2, [pc, #52]	; (8001830 <u_delay+0x84>)
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	6013      	str	r3, [r2, #0]
	
	while(TIM6->CR1 & TIM_CR1_CEN);
 8001802:	bf00      	nop
 8001804:	4b0a      	ldr	r3, [pc, #40]	; (8001830 <u_delay+0x84>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1f9      	bne.n	8001804 <u_delay+0x58>
	RCC->APB1ENR &= ~(1u<<4);
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <u_delay+0x80>)
 8001812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001814:	4a05      	ldr	r2, [pc, #20]	; (800182c <u_delay+0x80>)
 8001816:	f023 0310 	bic.w	r3, r3, #16
 800181a:	6413      	str	r3, [r2, #64]	; 0x40
	NVIC_DisableIRQ(TIM6_DAC_IRQn);
 800181c:	2036      	movs	r0, #54	; 0x36
 800181e:	f7ff ff4b 	bl	80016b8 <__NVIC_DisableIRQ>
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40023800 	.word	0x40023800
 8001830:	40001000 	.word	0x40001000
 8001834:	20000280 	.word	0x20000280

08001838 <m_delay>:

void m_delay(uint16_t ms)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	80fb      	strh	r3, [r7, #6]
	// Setup Timer 6
	// aktivieren der TIM6 Clock auf bit 4
	RCC->APB1ENR |= (1<<4);
 8001842:	4b1c      	ldr	r3, [pc, #112]	; (80018b4 <m_delay+0x7c>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	4a1b      	ldr	r2, [pc, #108]	; (80018b4 <m_delay+0x7c>)
 8001848:	f043 0310 	orr.w	r3, r3, #16
 800184c:	6413      	str	r3, [r2, #64]	; 0x40
	
	// 84000 / 2, da allerdings 16bit register passt muss getrixt werden
	// Basistakt des Timers = 84Mhz
	// Fuer millisekunden genauigkeit benoetigen wir einen Timertakt von 1kHz
	TIM6->PSC = 42000-1;
 800184e:	4b1a      	ldr	r3, [pc, #104]	; (80018b8 <m_delay+0x80>)
 8001850:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001854:	629a      	str	r2, [r3, #40]	; 0x28
	TIM6->ARR = (ms-1);
 8001856:	88fb      	ldrh	r3, [r7, #6]
 8001858:	1e5a      	subs	r2, r3, #1
 800185a:	4b17      	ldr	r3, [pc, #92]	; (80018b8 <m_delay+0x80>)
 800185c:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM6->DIER |= TIM_DIER_UIE;
 800185e:	4b16      	ldr	r3, [pc, #88]	; (80018b8 <m_delay+0x80>)
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	4a15      	ldr	r2, [pc, #84]	; (80018b8 <m_delay+0x80>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	60d3      	str	r3, [r2, #12]
	NVIC_SetPriority(TIM6_DAC_IRQn, 8);
 800186a:	2108      	movs	r1, #8
 800186c:	2036      	movs	r0, #54	; 0x36
 800186e:	f7ff ff47 	bl	8001700 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001872:	2036      	movs	r0, #54	; 0x36
 8001874:	f7ff ff02 	bl	800167c <__NVIC_EnableIRQ>
	TIM6->CNT = 0;
 8001878:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <m_delay+0x80>)
 800187a:	2200      	movs	r2, #0
 800187c:	625a      	str	r2, [r3, #36]	; 0x24
	TIM6->CR1 |= TIM_CR1_CEN;
 800187e:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <m_delay+0x80>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a0d      	ldr	r2, [pc, #52]	; (80018b8 <m_delay+0x80>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	6013      	str	r3, [r2, #0]
	
	while(TIM6->CR1 & TIM_CR1_CEN);
 800188a:	bf00      	nop
 800188c:	4b0a      	ldr	r3, [pc, #40]	; (80018b8 <m_delay+0x80>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1f9      	bne.n	800188c <m_delay+0x54>
	RCC->APB1ENR &= ~(1u<<4);
 8001898:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <m_delay+0x7c>)
 800189a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189c:	4a05      	ldr	r2, [pc, #20]	; (80018b4 <m_delay+0x7c>)
 800189e:	f023 0310 	bic.w	r3, r3, #16
 80018a2:	6413      	str	r3, [r2, #64]	; 0x40
	NVIC_DisableIRQ(TIM6_DAC_IRQn);
 80018a4:	2036      	movs	r0, #54	; 0x36
 80018a6:	f7ff ff07 	bl	80016b8 <__NVIC_DisableIRQ>
}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40023800 	.word	0x40023800
 80018b8:	40001000 	.word	0x40001000

080018bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018c0:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <HAL_Init+0x40>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a0d      	ldr	r2, [pc, #52]	; (80018fc <HAL_Init+0x40>)
 80018c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018cc:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <HAL_Init+0x40>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a0a      	ldr	r2, [pc, #40]	; (80018fc <HAL_Init+0x40>)
 80018d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018d8:	4b08      	ldr	r3, [pc, #32]	; (80018fc <HAL_Init+0x40>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a07      	ldr	r2, [pc, #28]	; (80018fc <HAL_Init+0x40>)
 80018de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018e4:	2003      	movs	r0, #3
 80018e6:	f000 f8fc 	bl	8001ae2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ea:	200f      	movs	r0, #15
 80018ec:	f7ff fb6a 	bl	8000fc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018f0:	f7ff f9b4 	bl	8000c5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40023c00 	.word	0x40023c00

08001900 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001904:	4b06      	ldr	r3, [pc, #24]	; (8001920 <HAL_IncTick+0x20>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	461a      	mov	r2, r3
 800190a:	4b06      	ldr	r3, [pc, #24]	; (8001924 <HAL_IncTick+0x24>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4413      	add	r3, r2
 8001910:	4a04      	ldr	r2, [pc, #16]	; (8001924 <HAL_IncTick+0x24>)
 8001912:	6013      	str	r3, [r2, #0]
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	20000008 	.word	0x20000008
 8001924:	20000284 	.word	0x20000284

08001928 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return uwTick;
 800192c:	4b03      	ldr	r3, [pc, #12]	; (800193c <HAL_GetTick+0x14>)
 800192e:	681b      	ldr	r3, [r3, #0]
}
 8001930:	4618      	mov	r0, r3
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	20000284 	.word	0x20000284

08001940 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001948:	f7ff ffee 	bl	8001928 <HAL_GetTick>
 800194c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001958:	d005      	beq.n	8001966 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800195a:	4b0a      	ldr	r3, [pc, #40]	; (8001984 <HAL_Delay+0x44>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	461a      	mov	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	4413      	add	r3, r2
 8001964:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001966:	bf00      	nop
 8001968:	f7ff ffde 	bl	8001928 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	429a      	cmp	r2, r3
 8001976:	d8f7      	bhi.n	8001968 <HAL_Delay+0x28>
  {
  }
}
 8001978:	bf00      	nop
 800197a:	bf00      	nop
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20000008 	.word	0x20000008

08001988 <__NVIC_SetPriorityGrouping>:
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019a4:	4013      	ands	r3, r2
 80019a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ba:	4a04      	ldr	r2, [pc, #16]	; (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	60d3      	str	r3, [r2, #12]
}
 80019c0:	bf00      	nop
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <__NVIC_GetPriorityGrouping>:
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d4:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <__NVIC_GetPriorityGrouping+0x18>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	0a1b      	lsrs	r3, r3, #8
 80019da:	f003 0307 	and.w	r3, r3, #7
}
 80019de:	4618      	mov	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <__NVIC_EnableIRQ>:
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	db0b      	blt.n	8001a16 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	f003 021f 	and.w	r2, r3, #31
 8001a04:	4907      	ldr	r1, [pc, #28]	; (8001a24 <__NVIC_EnableIRQ+0x38>)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	095b      	lsrs	r3, r3, #5
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000e100 	.word	0xe000e100

08001a28 <__NVIC_SetPriority>:
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	6039      	str	r1, [r7, #0]
 8001a32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	db0a      	blt.n	8001a52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	490c      	ldr	r1, [pc, #48]	; (8001a74 <__NVIC_SetPriority+0x4c>)
 8001a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a46:	0112      	lsls	r2, r2, #4
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001a50:	e00a      	b.n	8001a68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	4908      	ldr	r1, [pc, #32]	; (8001a78 <__NVIC_SetPriority+0x50>)
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	f003 030f 	and.w	r3, r3, #15
 8001a5e:	3b04      	subs	r3, #4
 8001a60:	0112      	lsls	r2, r2, #4
 8001a62:	b2d2      	uxtb	r2, r2
 8001a64:	440b      	add	r3, r1
 8001a66:	761a      	strb	r2, [r3, #24]
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	e000e100 	.word	0xe000e100
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b089      	sub	sp, #36	; 0x24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	f1c3 0307 	rsb	r3, r3, #7
 8001a96:	2b04      	cmp	r3, #4
 8001a98:	bf28      	it	cs
 8001a9a:	2304      	movcs	r3, #4
 8001a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	2b06      	cmp	r3, #6
 8001aa4:	d902      	bls.n	8001aac <NVIC_EncodePriority+0x30>
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3b03      	subs	r3, #3
 8001aaa:	e000      	b.n	8001aae <NVIC_EncodePriority+0x32>
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	43da      	mvns	r2, r3
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	401a      	ands	r2, r3
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ace:	43d9      	mvns	r1, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad4:	4313      	orrs	r3, r2
         );
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3724      	adds	r7, #36	; 0x24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff ff4c 	bl	8001988 <__NVIC_SetPriorityGrouping>
}
 8001af0:	bf00      	nop
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
 8001b04:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b06:	2300      	movs	r3, #0
 8001b08:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b0a:	f7ff ff61 	bl	80019d0 <__NVIC_GetPriorityGrouping>
 8001b0e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	68b9      	ldr	r1, [r7, #8]
 8001b14:	6978      	ldr	r0, [r7, #20]
 8001b16:	f7ff ffb1 	bl	8001a7c <NVIC_EncodePriority>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b20:	4611      	mov	r1, r2
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff ff80 	bl	8001a28 <__NVIC_SetPriority>
}
 8001b28:	bf00      	nop
 8001b2a:	3718      	adds	r7, #24
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff ff54 	bl	80019ec <__NVIC_EnableIRQ>
}
 8001b44:	bf00      	nop
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b089      	sub	sp, #36	; 0x24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b56:	2300      	movs	r3, #0
 8001b58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b62:	2300      	movs	r3, #0
 8001b64:	61fb      	str	r3, [r7, #28]
 8001b66:	e16b      	b.n	8001e40 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b68:	2201      	movs	r2, #1
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	697a      	ldr	r2, [r7, #20]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	f040 815a 	bne.w	8001e3a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f003 0303 	and.w	r3, r3, #3
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d005      	beq.n	8001b9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d130      	bne.n	8001c00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	2203      	movs	r2, #3
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	68da      	ldr	r2, [r3, #12]
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4013      	ands	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	091b      	lsrs	r3, r3, #4
 8001bea:	f003 0201 	and.w	r2, r3, #1
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 0303 	and.w	r3, r3, #3
 8001c08:	2b03      	cmp	r3, #3
 8001c0a:	d017      	beq.n	8001c3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	2203      	movs	r2, #3
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4013      	ands	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	689a      	ldr	r2, [r3, #8]
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 0303 	and.w	r3, r3, #3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d123      	bne.n	8001c90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	08da      	lsrs	r2, r3, #3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3208      	adds	r2, #8
 8001c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	220f      	movs	r2, #15
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	691a      	ldr	r2, [r3, #16]
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	08da      	lsrs	r2, r3, #3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	3208      	adds	r2, #8
 8001c8a:	69b9      	ldr	r1, [r7, #24]
 8001c8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	2203      	movs	r2, #3
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f003 0203 	and.w	r2, r3, #3
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f000 80b4 	beq.w	8001e3a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	4b60      	ldr	r3, [pc, #384]	; (8001e58 <HAL_GPIO_Init+0x30c>)
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cda:	4a5f      	ldr	r2, [pc, #380]	; (8001e58 <HAL_GPIO_Init+0x30c>)
 8001cdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ce2:	4b5d      	ldr	r3, [pc, #372]	; (8001e58 <HAL_GPIO_Init+0x30c>)
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cee:	4a5b      	ldr	r2, [pc, #364]	; (8001e5c <HAL_GPIO_Init+0x310>)
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	089b      	lsrs	r3, r3, #2
 8001cf4:	3302      	adds	r3, #2
 8001cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	f003 0303 	and.w	r3, r3, #3
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	220f      	movs	r2, #15
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a52      	ldr	r2, [pc, #328]	; (8001e60 <HAL_GPIO_Init+0x314>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d02b      	beq.n	8001d72 <HAL_GPIO_Init+0x226>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a51      	ldr	r2, [pc, #324]	; (8001e64 <HAL_GPIO_Init+0x318>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d025      	beq.n	8001d6e <HAL_GPIO_Init+0x222>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a50      	ldr	r2, [pc, #320]	; (8001e68 <HAL_GPIO_Init+0x31c>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d01f      	beq.n	8001d6a <HAL_GPIO_Init+0x21e>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a4f      	ldr	r2, [pc, #316]	; (8001e6c <HAL_GPIO_Init+0x320>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d019      	beq.n	8001d66 <HAL_GPIO_Init+0x21a>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a4e      	ldr	r2, [pc, #312]	; (8001e70 <HAL_GPIO_Init+0x324>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d013      	beq.n	8001d62 <HAL_GPIO_Init+0x216>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a4d      	ldr	r2, [pc, #308]	; (8001e74 <HAL_GPIO_Init+0x328>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d00d      	beq.n	8001d5e <HAL_GPIO_Init+0x212>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a4c      	ldr	r2, [pc, #304]	; (8001e78 <HAL_GPIO_Init+0x32c>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d007      	beq.n	8001d5a <HAL_GPIO_Init+0x20e>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a4b      	ldr	r2, [pc, #300]	; (8001e7c <HAL_GPIO_Init+0x330>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d101      	bne.n	8001d56 <HAL_GPIO_Init+0x20a>
 8001d52:	2307      	movs	r3, #7
 8001d54:	e00e      	b.n	8001d74 <HAL_GPIO_Init+0x228>
 8001d56:	2308      	movs	r3, #8
 8001d58:	e00c      	b.n	8001d74 <HAL_GPIO_Init+0x228>
 8001d5a:	2306      	movs	r3, #6
 8001d5c:	e00a      	b.n	8001d74 <HAL_GPIO_Init+0x228>
 8001d5e:	2305      	movs	r3, #5
 8001d60:	e008      	b.n	8001d74 <HAL_GPIO_Init+0x228>
 8001d62:	2304      	movs	r3, #4
 8001d64:	e006      	b.n	8001d74 <HAL_GPIO_Init+0x228>
 8001d66:	2303      	movs	r3, #3
 8001d68:	e004      	b.n	8001d74 <HAL_GPIO_Init+0x228>
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	e002      	b.n	8001d74 <HAL_GPIO_Init+0x228>
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <HAL_GPIO_Init+0x228>
 8001d72:	2300      	movs	r3, #0
 8001d74:	69fa      	ldr	r2, [r7, #28]
 8001d76:	f002 0203 	and.w	r2, r2, #3
 8001d7a:	0092      	lsls	r2, r2, #2
 8001d7c:	4093      	lsls	r3, r2
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d84:	4935      	ldr	r1, [pc, #212]	; (8001e5c <HAL_GPIO_Init+0x310>)
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	089b      	lsrs	r3, r3, #2
 8001d8a:	3302      	adds	r3, #2
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d92:	4b3b      	ldr	r3, [pc, #236]	; (8001e80 <HAL_GPIO_Init+0x334>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001db6:	4a32      	ldr	r2, [pc, #200]	; (8001e80 <HAL_GPIO_Init+0x334>)
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dbc:	4b30      	ldr	r3, [pc, #192]	; (8001e80 <HAL_GPIO_Init+0x334>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d003      	beq.n	8001de0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001de0:	4a27      	ldr	r2, [pc, #156]	; (8001e80 <HAL_GPIO_Init+0x334>)
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001de6:	4b26      	ldr	r3, [pc, #152]	; (8001e80 <HAL_GPIO_Init+0x334>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	43db      	mvns	r3, r3
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	4013      	ands	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e0a:	4a1d      	ldr	r2, [pc, #116]	; (8001e80 <HAL_GPIO_Init+0x334>)
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e10:	4b1b      	ldr	r3, [pc, #108]	; (8001e80 <HAL_GPIO_Init+0x334>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d003      	beq.n	8001e34 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e34:	4a12      	ldr	r2, [pc, #72]	; (8001e80 <HAL_GPIO_Init+0x334>)
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	61fb      	str	r3, [r7, #28]
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	2b0f      	cmp	r3, #15
 8001e44:	f67f ae90 	bls.w	8001b68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e48:	bf00      	nop
 8001e4a:	bf00      	nop
 8001e4c:	3724      	adds	r7, #36	; 0x24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	40013800 	.word	0x40013800
 8001e60:	40020000 	.word	0x40020000
 8001e64:	40020400 	.word	0x40020400
 8001e68:	40020800 	.word	0x40020800
 8001e6c:	40020c00 	.word	0x40020c00
 8001e70:	40021000 	.word	0x40021000
 8001e74:	40021400 	.word	0x40021400
 8001e78:	40021800 	.word	0x40021800
 8001e7c:	40021c00 	.word	0x40021c00
 8001e80:	40013c00 	.word	0x40013c00

08001e84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	691a      	ldr	r2, [r3, #16]
 8001e94:	887b      	ldrh	r3, [r7, #2]
 8001e96:	4013      	ands	r3, r2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d002      	beq.n	8001ea2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	73fb      	strb	r3, [r7, #15]
 8001ea0:	e001      	b.n	8001ea6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3714      	adds	r7, #20
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	807b      	strh	r3, [r7, #2]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ec4:	787b      	ldrb	r3, [r7, #1]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eca:	887a      	ldrh	r2, [r7, #2]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ed0:	e003      	b.n	8001eda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ed2:	887b      	ldrh	r3, [r7, #2]
 8001ed4:	041a      	lsls	r2, r3, #16
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	619a      	str	r2, [r3, #24]
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001ee6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ee8:	b08f      	sub	sp, #60	; 0x3c
 8001eea:	af0a      	add	r7, sp, #40	; 0x28
 8001eec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d101      	bne.n	8001ef8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e054      	b.n	8001fa2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d106      	bne.n	8001f18 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f00a fb96 	bl	800c644 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2203      	movs	r2, #3
 8001f1c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d102      	bne.n	8001f32 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f004 f96c 	bl	8006214 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	603b      	str	r3, [r7, #0]
 8001f42:	687e      	ldr	r6, [r7, #4]
 8001f44:	466d      	mov	r5, sp
 8001f46:	f106 0410 	add.w	r4, r6, #16
 8001f4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f56:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f5a:	1d33      	adds	r3, r6, #4
 8001f5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f5e:	6838      	ldr	r0, [r7, #0]
 8001f60:	f004 f8e6 	bl	8006130 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2101      	movs	r1, #1
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f004 f963 	bl	8006236 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	603b      	str	r3, [r7, #0]
 8001f76:	687e      	ldr	r6, [r7, #4]
 8001f78:	466d      	mov	r5, sp
 8001f7a:	f106 0410 	add.w	r4, r6, #16
 8001f7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f86:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f8a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f8e:	1d33      	adds	r3, r6, #4
 8001f90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f92:	6838      	ldr	r0, [r7, #0]
 8001f94:	f004 faec 	bl	8006570 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3714      	adds	r7, #20
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001faa <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001faa:	b590      	push	{r4, r7, lr}
 8001fac:	b089      	sub	sp, #36	; 0x24
 8001fae:	af04      	add	r7, sp, #16
 8001fb0:	6078      	str	r0, [r7, #4]
 8001fb2:	4608      	mov	r0, r1
 8001fb4:	4611      	mov	r1, r2
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	4603      	mov	r3, r0
 8001fba:	70fb      	strb	r3, [r7, #3]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	70bb      	strb	r3, [r7, #2]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d101      	bne.n	8001fd2 <HAL_HCD_HC_Init+0x28>
 8001fce:	2302      	movs	r3, #2
 8001fd0:	e076      	b.n	80020c0 <HAL_HCD_HC_Init+0x116>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001fda:	78fb      	ldrb	r3, [r7, #3]
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	212c      	movs	r1, #44	; 0x2c
 8001fe0:	fb01 f303 	mul.w	r3, r1, r3
 8001fe4:	4413      	add	r3, r2
 8001fe6:	333d      	adds	r3, #61	; 0x3d
 8001fe8:	2200      	movs	r2, #0
 8001fea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001fec:	78fb      	ldrb	r3, [r7, #3]
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	212c      	movs	r1, #44	; 0x2c
 8001ff2:	fb01 f303 	mul.w	r3, r1, r3
 8001ff6:	4413      	add	r3, r2
 8001ff8:	3338      	adds	r3, #56	; 0x38
 8001ffa:	787a      	ldrb	r2, [r7, #1]
 8001ffc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001ffe:	78fb      	ldrb	r3, [r7, #3]
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	212c      	movs	r1, #44	; 0x2c
 8002004:	fb01 f303 	mul.w	r3, r1, r3
 8002008:	4413      	add	r3, r2
 800200a:	3340      	adds	r3, #64	; 0x40
 800200c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800200e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002010:	78fb      	ldrb	r3, [r7, #3]
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	212c      	movs	r1, #44	; 0x2c
 8002016:	fb01 f303 	mul.w	r3, r1, r3
 800201a:	4413      	add	r3, r2
 800201c:	3339      	adds	r3, #57	; 0x39
 800201e:	78fa      	ldrb	r2, [r7, #3]
 8002020:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002022:	78fb      	ldrb	r3, [r7, #3]
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	212c      	movs	r1, #44	; 0x2c
 8002028:	fb01 f303 	mul.w	r3, r1, r3
 800202c:	4413      	add	r3, r2
 800202e:	333f      	adds	r3, #63	; 0x3f
 8002030:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002034:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002036:	78fb      	ldrb	r3, [r7, #3]
 8002038:	78ba      	ldrb	r2, [r7, #2]
 800203a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800203e:	b2d0      	uxtb	r0, r2
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	212c      	movs	r1, #44	; 0x2c
 8002044:	fb01 f303 	mul.w	r3, r1, r3
 8002048:	4413      	add	r3, r2
 800204a:	333a      	adds	r3, #58	; 0x3a
 800204c:	4602      	mov	r2, r0
 800204e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002050:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002054:	2b00      	cmp	r3, #0
 8002056:	da09      	bge.n	800206c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002058:	78fb      	ldrb	r3, [r7, #3]
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	212c      	movs	r1, #44	; 0x2c
 800205e:	fb01 f303 	mul.w	r3, r1, r3
 8002062:	4413      	add	r3, r2
 8002064:	333b      	adds	r3, #59	; 0x3b
 8002066:	2201      	movs	r2, #1
 8002068:	701a      	strb	r2, [r3, #0]
 800206a:	e008      	b.n	800207e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800206c:	78fb      	ldrb	r3, [r7, #3]
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	212c      	movs	r1, #44	; 0x2c
 8002072:	fb01 f303 	mul.w	r3, r1, r3
 8002076:	4413      	add	r3, r2
 8002078:	333b      	adds	r3, #59	; 0x3b
 800207a:	2200      	movs	r2, #0
 800207c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800207e:	78fb      	ldrb	r3, [r7, #3]
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	212c      	movs	r1, #44	; 0x2c
 8002084:	fb01 f303 	mul.w	r3, r1, r3
 8002088:	4413      	add	r3, r2
 800208a:	333c      	adds	r3, #60	; 0x3c
 800208c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002090:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6818      	ldr	r0, [r3, #0]
 8002096:	787c      	ldrb	r4, [r7, #1]
 8002098:	78ba      	ldrb	r2, [r7, #2]
 800209a:	78f9      	ldrb	r1, [r7, #3]
 800209c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800209e:	9302      	str	r3, [sp, #8]
 80020a0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80020a4:	9301      	str	r3, [sp, #4]
 80020a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	4623      	mov	r3, r4
 80020ae:	f004 fbe5 	bl	800687c <USB_HC_Init>
 80020b2:	4603      	mov	r3, r0
 80020b4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80020be:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd90      	pop	{r4, r7, pc}

080020c8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	460b      	mov	r3, r1
 80020d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80020d4:	2300      	movs	r3, #0
 80020d6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d101      	bne.n	80020e6 <HAL_HCD_HC_Halt+0x1e>
 80020e2:	2302      	movs	r3, #2
 80020e4:	e00f      	b.n	8002106 <HAL_HCD_HC_Halt+0x3e>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	78fa      	ldrb	r2, [r7, #3]
 80020f4:	4611      	mov	r1, r2
 80020f6:	4618      	mov	r0, r3
 80020f8:	f004 fe35 	bl	8006d66 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002104:	7bfb      	ldrb	r3, [r7, #15]
}
 8002106:	4618      	mov	r0, r3
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	4608      	mov	r0, r1
 800211a:	4611      	mov	r1, r2
 800211c:	461a      	mov	r2, r3
 800211e:	4603      	mov	r3, r0
 8002120:	70fb      	strb	r3, [r7, #3]
 8002122:	460b      	mov	r3, r1
 8002124:	70bb      	strb	r3, [r7, #2]
 8002126:	4613      	mov	r3, r2
 8002128:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800212a:	78fb      	ldrb	r3, [r7, #3]
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	212c      	movs	r1, #44	; 0x2c
 8002130:	fb01 f303 	mul.w	r3, r1, r3
 8002134:	4413      	add	r3, r2
 8002136:	333b      	adds	r3, #59	; 0x3b
 8002138:	78ba      	ldrb	r2, [r7, #2]
 800213a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800213c:	78fb      	ldrb	r3, [r7, #3]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	212c      	movs	r1, #44	; 0x2c
 8002142:	fb01 f303 	mul.w	r3, r1, r3
 8002146:	4413      	add	r3, r2
 8002148:	333f      	adds	r3, #63	; 0x3f
 800214a:	787a      	ldrb	r2, [r7, #1]
 800214c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800214e:	7c3b      	ldrb	r3, [r7, #16]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d112      	bne.n	800217a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002154:	78fb      	ldrb	r3, [r7, #3]
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	212c      	movs	r1, #44	; 0x2c
 800215a:	fb01 f303 	mul.w	r3, r1, r3
 800215e:	4413      	add	r3, r2
 8002160:	3342      	adds	r3, #66	; 0x42
 8002162:	2203      	movs	r2, #3
 8002164:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002166:	78fb      	ldrb	r3, [r7, #3]
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	212c      	movs	r1, #44	; 0x2c
 800216c:	fb01 f303 	mul.w	r3, r1, r3
 8002170:	4413      	add	r3, r2
 8002172:	333d      	adds	r3, #61	; 0x3d
 8002174:	7f3a      	ldrb	r2, [r7, #28]
 8002176:	701a      	strb	r2, [r3, #0]
 8002178:	e008      	b.n	800218c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800217a:	78fb      	ldrb	r3, [r7, #3]
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	212c      	movs	r1, #44	; 0x2c
 8002180:	fb01 f303 	mul.w	r3, r1, r3
 8002184:	4413      	add	r3, r2
 8002186:	3342      	adds	r3, #66	; 0x42
 8002188:	2202      	movs	r2, #2
 800218a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800218c:	787b      	ldrb	r3, [r7, #1]
 800218e:	2b03      	cmp	r3, #3
 8002190:	f200 80c6 	bhi.w	8002320 <HAL_HCD_HC_SubmitRequest+0x210>
 8002194:	a201      	add	r2, pc, #4	; (adr r2, 800219c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800219a:	bf00      	nop
 800219c:	080021ad 	.word	0x080021ad
 80021a0:	0800230d 	.word	0x0800230d
 80021a4:	08002211 	.word	0x08002211
 80021a8:	0800228f 	.word	0x0800228f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80021ac:	7c3b      	ldrb	r3, [r7, #16]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	f040 80b8 	bne.w	8002324 <HAL_HCD_HC_SubmitRequest+0x214>
 80021b4:	78bb      	ldrb	r3, [r7, #2]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f040 80b4 	bne.w	8002324 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80021bc:	8b3b      	ldrh	r3, [r7, #24]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d108      	bne.n	80021d4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80021c2:	78fb      	ldrb	r3, [r7, #3]
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	212c      	movs	r1, #44	; 0x2c
 80021c8:	fb01 f303 	mul.w	r3, r1, r3
 80021cc:	4413      	add	r3, r2
 80021ce:	3355      	adds	r3, #85	; 0x55
 80021d0:	2201      	movs	r2, #1
 80021d2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80021d4:	78fb      	ldrb	r3, [r7, #3]
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	212c      	movs	r1, #44	; 0x2c
 80021da:	fb01 f303 	mul.w	r3, r1, r3
 80021de:	4413      	add	r3, r2
 80021e0:	3355      	adds	r3, #85	; 0x55
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d109      	bne.n	80021fc <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021e8:	78fb      	ldrb	r3, [r7, #3]
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	212c      	movs	r1, #44	; 0x2c
 80021ee:	fb01 f303 	mul.w	r3, r1, r3
 80021f2:	4413      	add	r3, r2
 80021f4:	3342      	adds	r3, #66	; 0x42
 80021f6:	2200      	movs	r2, #0
 80021f8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80021fa:	e093      	b.n	8002324 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021fc:	78fb      	ldrb	r3, [r7, #3]
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	212c      	movs	r1, #44	; 0x2c
 8002202:	fb01 f303 	mul.w	r3, r1, r3
 8002206:	4413      	add	r3, r2
 8002208:	3342      	adds	r3, #66	; 0x42
 800220a:	2202      	movs	r2, #2
 800220c:	701a      	strb	r2, [r3, #0]
      break;
 800220e:	e089      	b.n	8002324 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002210:	78bb      	ldrb	r3, [r7, #2]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d11d      	bne.n	8002252 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002216:	78fb      	ldrb	r3, [r7, #3]
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	212c      	movs	r1, #44	; 0x2c
 800221c:	fb01 f303 	mul.w	r3, r1, r3
 8002220:	4413      	add	r3, r2
 8002222:	3355      	adds	r3, #85	; 0x55
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d109      	bne.n	800223e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800222a:	78fb      	ldrb	r3, [r7, #3]
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	212c      	movs	r1, #44	; 0x2c
 8002230:	fb01 f303 	mul.w	r3, r1, r3
 8002234:	4413      	add	r3, r2
 8002236:	3342      	adds	r3, #66	; 0x42
 8002238:	2200      	movs	r2, #0
 800223a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800223c:	e073      	b.n	8002326 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800223e:	78fb      	ldrb	r3, [r7, #3]
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	212c      	movs	r1, #44	; 0x2c
 8002244:	fb01 f303 	mul.w	r3, r1, r3
 8002248:	4413      	add	r3, r2
 800224a:	3342      	adds	r3, #66	; 0x42
 800224c:	2202      	movs	r2, #2
 800224e:	701a      	strb	r2, [r3, #0]
      break;
 8002250:	e069      	b.n	8002326 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002252:	78fb      	ldrb	r3, [r7, #3]
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	212c      	movs	r1, #44	; 0x2c
 8002258:	fb01 f303 	mul.w	r3, r1, r3
 800225c:	4413      	add	r3, r2
 800225e:	3354      	adds	r3, #84	; 0x54
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d109      	bne.n	800227a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002266:	78fb      	ldrb	r3, [r7, #3]
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	212c      	movs	r1, #44	; 0x2c
 800226c:	fb01 f303 	mul.w	r3, r1, r3
 8002270:	4413      	add	r3, r2
 8002272:	3342      	adds	r3, #66	; 0x42
 8002274:	2200      	movs	r2, #0
 8002276:	701a      	strb	r2, [r3, #0]
      break;
 8002278:	e055      	b.n	8002326 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800227a:	78fb      	ldrb	r3, [r7, #3]
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	212c      	movs	r1, #44	; 0x2c
 8002280:	fb01 f303 	mul.w	r3, r1, r3
 8002284:	4413      	add	r3, r2
 8002286:	3342      	adds	r3, #66	; 0x42
 8002288:	2202      	movs	r2, #2
 800228a:	701a      	strb	r2, [r3, #0]
      break;
 800228c:	e04b      	b.n	8002326 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800228e:	78bb      	ldrb	r3, [r7, #2]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d11d      	bne.n	80022d0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002294:	78fb      	ldrb	r3, [r7, #3]
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	212c      	movs	r1, #44	; 0x2c
 800229a:	fb01 f303 	mul.w	r3, r1, r3
 800229e:	4413      	add	r3, r2
 80022a0:	3355      	adds	r3, #85	; 0x55
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d109      	bne.n	80022bc <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022a8:	78fb      	ldrb	r3, [r7, #3]
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	212c      	movs	r1, #44	; 0x2c
 80022ae:	fb01 f303 	mul.w	r3, r1, r3
 80022b2:	4413      	add	r3, r2
 80022b4:	3342      	adds	r3, #66	; 0x42
 80022b6:	2200      	movs	r2, #0
 80022b8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80022ba:	e034      	b.n	8002326 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022bc:	78fb      	ldrb	r3, [r7, #3]
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	212c      	movs	r1, #44	; 0x2c
 80022c2:	fb01 f303 	mul.w	r3, r1, r3
 80022c6:	4413      	add	r3, r2
 80022c8:	3342      	adds	r3, #66	; 0x42
 80022ca:	2202      	movs	r2, #2
 80022cc:	701a      	strb	r2, [r3, #0]
      break;
 80022ce:	e02a      	b.n	8002326 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80022d0:	78fb      	ldrb	r3, [r7, #3]
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	212c      	movs	r1, #44	; 0x2c
 80022d6:	fb01 f303 	mul.w	r3, r1, r3
 80022da:	4413      	add	r3, r2
 80022dc:	3354      	adds	r3, #84	; 0x54
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d109      	bne.n	80022f8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022e4:	78fb      	ldrb	r3, [r7, #3]
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	212c      	movs	r1, #44	; 0x2c
 80022ea:	fb01 f303 	mul.w	r3, r1, r3
 80022ee:	4413      	add	r3, r2
 80022f0:	3342      	adds	r3, #66	; 0x42
 80022f2:	2200      	movs	r2, #0
 80022f4:	701a      	strb	r2, [r3, #0]
      break;
 80022f6:	e016      	b.n	8002326 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022f8:	78fb      	ldrb	r3, [r7, #3]
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	212c      	movs	r1, #44	; 0x2c
 80022fe:	fb01 f303 	mul.w	r3, r1, r3
 8002302:	4413      	add	r3, r2
 8002304:	3342      	adds	r3, #66	; 0x42
 8002306:	2202      	movs	r2, #2
 8002308:	701a      	strb	r2, [r3, #0]
      break;
 800230a:	e00c      	b.n	8002326 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800230c:	78fb      	ldrb	r3, [r7, #3]
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	212c      	movs	r1, #44	; 0x2c
 8002312:	fb01 f303 	mul.w	r3, r1, r3
 8002316:	4413      	add	r3, r2
 8002318:	3342      	adds	r3, #66	; 0x42
 800231a:	2200      	movs	r2, #0
 800231c:	701a      	strb	r2, [r3, #0]
      break;
 800231e:	e002      	b.n	8002326 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002320:	bf00      	nop
 8002322:	e000      	b.n	8002326 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002324:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002326:	78fb      	ldrb	r3, [r7, #3]
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	212c      	movs	r1, #44	; 0x2c
 800232c:	fb01 f303 	mul.w	r3, r1, r3
 8002330:	4413      	add	r3, r2
 8002332:	3344      	adds	r3, #68	; 0x44
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002338:	78fb      	ldrb	r3, [r7, #3]
 800233a:	8b3a      	ldrh	r2, [r7, #24]
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	202c      	movs	r0, #44	; 0x2c
 8002340:	fb00 f303 	mul.w	r3, r0, r3
 8002344:	440b      	add	r3, r1
 8002346:	334c      	adds	r3, #76	; 0x4c
 8002348:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800234a:	78fb      	ldrb	r3, [r7, #3]
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	212c      	movs	r1, #44	; 0x2c
 8002350:	fb01 f303 	mul.w	r3, r1, r3
 8002354:	4413      	add	r3, r2
 8002356:	3360      	adds	r3, #96	; 0x60
 8002358:	2200      	movs	r2, #0
 800235a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800235c:	78fb      	ldrb	r3, [r7, #3]
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	212c      	movs	r1, #44	; 0x2c
 8002362:	fb01 f303 	mul.w	r3, r1, r3
 8002366:	4413      	add	r3, r2
 8002368:	3350      	adds	r3, #80	; 0x50
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800236e:	78fb      	ldrb	r3, [r7, #3]
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	212c      	movs	r1, #44	; 0x2c
 8002374:	fb01 f303 	mul.w	r3, r1, r3
 8002378:	4413      	add	r3, r2
 800237a:	3339      	adds	r3, #57	; 0x39
 800237c:	78fa      	ldrb	r2, [r7, #3]
 800237e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002380:	78fb      	ldrb	r3, [r7, #3]
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	212c      	movs	r1, #44	; 0x2c
 8002386:	fb01 f303 	mul.w	r3, r1, r3
 800238a:	4413      	add	r3, r2
 800238c:	3361      	adds	r3, #97	; 0x61
 800238e:	2200      	movs	r2, #0
 8002390:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6818      	ldr	r0, [r3, #0]
 8002396:	78fb      	ldrb	r3, [r7, #3]
 8002398:	222c      	movs	r2, #44	; 0x2c
 800239a:	fb02 f303 	mul.w	r3, r2, r3
 800239e:	3338      	adds	r3, #56	; 0x38
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	18d1      	adds	r1, r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	461a      	mov	r2, r3
 80023ac:	f004 fb88 	bl	8006ac0 <USB_HC_StartXfer>
 80023b0:	4603      	mov	r3, r0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop

080023bc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f004 f889 	bl	80064ea <USB_GetMode>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b01      	cmp	r3, #1
 80023dc:	f040 80f6 	bne.w	80025cc <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f004 f86d 	bl	80064c4 <USB_ReadInterrupts>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f000 80ec 	beq.w	80025ca <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f004 f864 	bl	80064c4 <USB_ReadInterrupts>
 80023fc:	4603      	mov	r3, r0
 80023fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002402:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002406:	d104      	bne.n	8002412 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002410:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f004 f854 	bl	80064c4 <USB_ReadInterrupts>
 800241c:	4603      	mov	r3, r0
 800241e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002422:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002426:	d104      	bne.n	8002432 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002430:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f004 f844 	bl	80064c4 <USB_ReadInterrupts>
 800243c:	4603      	mov	r3, r0
 800243e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002442:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002446:	d104      	bne.n	8002452 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002450:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f004 f834 	bl	80064c4 <USB_ReadInterrupts>
 800245c:	4603      	mov	r3, r0
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b02      	cmp	r3, #2
 8002464:	d103      	bne.n	800246e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2202      	movs	r2, #2
 800246c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f004 f826 	bl	80064c4 <USB_ReadInterrupts>
 8002478:	4603      	mov	r3, r0
 800247a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800247e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002482:	d11c      	bne.n	80024be <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800248c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	d10f      	bne.n	80024be <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800249e:	2110      	movs	r1, #16
 80024a0:	6938      	ldr	r0, [r7, #16]
 80024a2:	f003 ff15 	bl	80062d0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80024a6:	6938      	ldr	r0, [r7, #16]
 80024a8:	f003 ff46 	bl	8006338 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2101      	movs	r1, #1
 80024b2:	4618      	mov	r0, r3
 80024b4:	f004 f91c 	bl	80066f0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f00a f941 	bl	800c740 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f003 fffe 	bl	80064c4 <USB_ReadInterrupts>
 80024c8:	4603      	mov	r3, r0
 80024ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024d2:	d102      	bne.n	80024da <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f001 f89e 	bl	8003616 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f003 fff0 	bl	80064c4 <USB_ReadInterrupts>
 80024e4:	4603      	mov	r3, r0
 80024e6:	f003 0308 	and.w	r3, r3, #8
 80024ea:	2b08      	cmp	r3, #8
 80024ec:	d106      	bne.n	80024fc <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f00a f90a 	bl	800c708 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2208      	movs	r2, #8
 80024fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4618      	mov	r0, r3
 8002502:	f003 ffdf 	bl	80064c4 <USB_ReadInterrupts>
 8002506:	4603      	mov	r3, r0
 8002508:	f003 0310 	and.w	r3, r3, #16
 800250c:	2b10      	cmp	r3, #16
 800250e:	d101      	bne.n	8002514 <HAL_HCD_IRQHandler+0x158>
 8002510:	2301      	movs	r3, #1
 8002512:	e000      	b.n	8002516 <HAL_HCD_IRQHandler+0x15a>
 8002514:	2300      	movs	r3, #0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d012      	beq.n	8002540 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	699a      	ldr	r2, [r3, #24]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 0210 	bic.w	r2, r2, #16
 8002528:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 ffa1 	bl	8003472 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	699a      	ldr	r2, [r3, #24]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f042 0210 	orr.w	r2, r2, #16
 800253e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f003 ffbd 	bl	80064c4 <USB_ReadInterrupts>
 800254a:	4603      	mov	r3, r0
 800254c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002550:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002554:	d13a      	bne.n	80025cc <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4618      	mov	r0, r3
 800255c:	f004 fbf2 	bl	8006d44 <USB_HC_ReadInterrupt>
 8002560:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002562:	2300      	movs	r3, #0
 8002564:	617b      	str	r3, [r7, #20]
 8002566:	e025      	b.n	80025b4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	f003 030f 	and.w	r3, r3, #15
 800256e:	68ba      	ldr	r2, [r7, #8]
 8002570:	fa22 f303 	lsr.w	r3, r2, r3
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b00      	cmp	r3, #0
 800257a:	d018      	beq.n	80025ae <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	015a      	lsls	r2, r3, #5
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	4413      	add	r3, r2
 8002584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800258e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002592:	d106      	bne.n	80025a2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	b2db      	uxtb	r3, r3
 8002598:	4619      	mov	r1, r3
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 f8ab 	bl	80026f6 <HCD_HC_IN_IRQHandler>
 80025a0:	e005      	b.n	80025ae <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	4619      	mov	r1, r3
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 fbf9 	bl	8002da0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	3301      	adds	r3, #1
 80025b2:	617b      	str	r3, [r7, #20]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d3d4      	bcc.n	8002568 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025c6:	615a      	str	r2, [r3, #20]
 80025c8:	e000      	b.n	80025cc <HAL_HCD_IRQHandler+0x210>
      return;
 80025ca:	bf00      	nop
    }
  }
}
 80025cc:	3718      	adds	r7, #24
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b082      	sub	sp, #8
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d101      	bne.n	80025e8 <HAL_HCD_Start+0x16>
 80025e4:	2302      	movs	r3, #2
 80025e6:	e013      	b.n	8002610 <HAL_HCD_Start+0x3e>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2101      	movs	r1, #1
 80025f6:	4618      	mov	r0, r3
 80025f8:	f004 f8de 	bl	80067b8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4618      	mov	r0, r3
 8002602:	f003 fdf6 	bl	80061f2 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	3708      	adds	r7, #8
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002626:	2b01      	cmp	r3, #1
 8002628:	d101      	bne.n	800262e <HAL_HCD_Stop+0x16>
 800262a:	2302      	movs	r3, #2
 800262c:	e00d      	b.n	800264a <HAL_HCD_Stop+0x32>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f004 fccc 	bl	8006fd8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b082      	sub	sp, #8
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f004 f880 	bl	8006764 <USB_ResetPort>
 8002664:	4603      	mov	r3, r0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800266e:	b480      	push	{r7}
 8002670:	b083      	sub	sp, #12
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
 8002676:	460b      	mov	r3, r1
 8002678:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800267a:	78fb      	ldrb	r3, [r7, #3]
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	212c      	movs	r1, #44	; 0x2c
 8002680:	fb01 f303 	mul.w	r3, r1, r3
 8002684:	4413      	add	r3, r2
 8002686:	3360      	adds	r3, #96	; 0x60
 8002688:	781b      	ldrb	r3, [r3, #0]
}
 800268a:	4618      	mov	r0, r3
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr

08002696 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002696:	b480      	push	{r7}
 8002698:	b083      	sub	sp, #12
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
 800269e:	460b      	mov	r3, r1
 80026a0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80026a2:	78fb      	ldrb	r3, [r7, #3]
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	212c      	movs	r1, #44	; 0x2c
 80026a8:	fb01 f303 	mul.w	r3, r1, r3
 80026ac:	4413      	add	r3, r2
 80026ae:	3350      	adds	r3, #80	; 0x50
 80026b0:	681b      	ldr	r3, [r3, #0]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr

080026be <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b082      	sub	sp, #8
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f004 f8c4 	bl	8006858 <USB_GetCurrentFrame>
 80026d0:	4603      	mov	r3, r0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b082      	sub	sp, #8
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f004 f89f 	bl	800682a <USB_GetHostSpeed>
 80026ec:	4603      	mov	r3, r0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b086      	sub	sp, #24
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
 80026fe:	460b      	mov	r3, r1
 8002700:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800270c:	78fb      	ldrb	r3, [r7, #3]
 800270e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	015a      	lsls	r2, r3, #5
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	4413      	add	r3, r2
 8002718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 0304 	and.w	r3, r3, #4
 8002722:	2b04      	cmp	r3, #4
 8002724:	d11a      	bne.n	800275c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	015a      	lsls	r2, r3, #5
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	4413      	add	r3, r2
 800272e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002732:	461a      	mov	r2, r3
 8002734:	2304      	movs	r3, #4
 8002736:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	212c      	movs	r1, #44	; 0x2c
 800273e:	fb01 f303 	mul.w	r3, r1, r3
 8002742:	4413      	add	r3, r2
 8002744:	3361      	adds	r3, #97	; 0x61
 8002746:	2206      	movs	r2, #6
 8002748:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	b2d2      	uxtb	r2, r2
 8002752:	4611      	mov	r1, r2
 8002754:	4618      	mov	r0, r3
 8002756:	f004 fb06 	bl	8006d66 <USB_HC_Halt>
 800275a:	e0af      	b.n	80028bc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	015a      	lsls	r2, r3, #5
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	4413      	add	r3, r2
 8002764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800276e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002772:	d11b      	bne.n	80027ac <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	015a      	lsls	r2, r3, #5
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	4413      	add	r3, r2
 800277c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002780:	461a      	mov	r2, r3
 8002782:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002786:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	212c      	movs	r1, #44	; 0x2c
 800278e:	fb01 f303 	mul.w	r3, r1, r3
 8002792:	4413      	add	r3, r2
 8002794:	3361      	adds	r3, #97	; 0x61
 8002796:	2207      	movs	r2, #7
 8002798:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	b2d2      	uxtb	r2, r2
 80027a2:	4611      	mov	r1, r2
 80027a4:	4618      	mov	r0, r3
 80027a6:	f004 fade 	bl	8006d66 <USB_HC_Halt>
 80027aa:	e087      	b.n	80028bc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	015a      	lsls	r2, r3, #5
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	4413      	add	r3, r2
 80027b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 0320 	and.w	r3, r3, #32
 80027be:	2b20      	cmp	r3, #32
 80027c0:	d109      	bne.n	80027d6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	015a      	lsls	r2, r3, #5
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	4413      	add	r3, r2
 80027ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ce:	461a      	mov	r2, r3
 80027d0:	2320      	movs	r3, #32
 80027d2:	6093      	str	r3, [r2, #8]
 80027d4:	e072      	b.n	80028bc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	015a      	lsls	r2, r3, #5
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	4413      	add	r3, r2
 80027de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f003 0308 	and.w	r3, r3, #8
 80027e8:	2b08      	cmp	r3, #8
 80027ea:	d11a      	bne.n	8002822 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	015a      	lsls	r2, r3, #5
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	4413      	add	r3, r2
 80027f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f8:	461a      	mov	r2, r3
 80027fa:	2308      	movs	r3, #8
 80027fc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	212c      	movs	r1, #44	; 0x2c
 8002804:	fb01 f303 	mul.w	r3, r1, r3
 8002808:	4413      	add	r3, r2
 800280a:	3361      	adds	r3, #97	; 0x61
 800280c:	2205      	movs	r2, #5
 800280e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	b2d2      	uxtb	r2, r2
 8002818:	4611      	mov	r1, r2
 800281a:	4618      	mov	r0, r3
 800281c:	f004 faa3 	bl	8006d66 <USB_HC_Halt>
 8002820:	e04c      	b.n	80028bc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	015a      	lsls	r2, r3, #5
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	4413      	add	r3, r2
 800282a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002834:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002838:	d11b      	bne.n	8002872 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	015a      	lsls	r2, r3, #5
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	4413      	add	r3, r2
 8002842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002846:	461a      	mov	r2, r3
 8002848:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800284c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	212c      	movs	r1, #44	; 0x2c
 8002854:	fb01 f303 	mul.w	r3, r1, r3
 8002858:	4413      	add	r3, r2
 800285a:	3361      	adds	r3, #97	; 0x61
 800285c:	2208      	movs	r2, #8
 800285e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	4611      	mov	r1, r2
 800286a:	4618      	mov	r0, r3
 800286c:	f004 fa7b 	bl	8006d66 <USB_HC_Halt>
 8002870:	e024      	b.n	80028bc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	015a      	lsls	r2, r3, #5
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	4413      	add	r3, r2
 800287a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002884:	2b80      	cmp	r3, #128	; 0x80
 8002886:	d119      	bne.n	80028bc <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	015a      	lsls	r2, r3, #5
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	4413      	add	r3, r2
 8002890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002894:	461a      	mov	r2, r3
 8002896:	2380      	movs	r3, #128	; 0x80
 8002898:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	212c      	movs	r1, #44	; 0x2c
 80028a0:	fb01 f303 	mul.w	r3, r1, r3
 80028a4:	4413      	add	r3, r2
 80028a6:	3361      	adds	r3, #97	; 0x61
 80028a8:	2206      	movs	r2, #6
 80028aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	b2d2      	uxtb	r2, r2
 80028b4:	4611      	mov	r1, r2
 80028b6:	4618      	mov	r0, r3
 80028b8:	f004 fa55 	bl	8006d66 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	015a      	lsls	r2, r3, #5
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	4413      	add	r3, r2
 80028c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028d2:	d112      	bne.n	80028fa <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	4611      	mov	r1, r2
 80028de:	4618      	mov	r0, r3
 80028e0:	f004 fa41 	bl	8006d66 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	015a      	lsls	r2, r3, #5
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	4413      	add	r3, r2
 80028ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f0:	461a      	mov	r2, r3
 80028f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028f6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80028f8:	e24e      	b.n	8002d98 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	015a      	lsls	r2, r3, #5
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	4413      	add	r3, r2
 8002902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b01      	cmp	r3, #1
 800290e:	f040 80df 	bne.w	8002ad0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d019      	beq.n	800294e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	212c      	movs	r1, #44	; 0x2c
 8002920:	fb01 f303 	mul.w	r3, r1, r3
 8002924:	4413      	add	r3, r2
 8002926:	3348      	adds	r3, #72	; 0x48
 8002928:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	0159      	lsls	r1, r3, #5
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	440b      	add	r3, r1
 8002932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800293c:	1ad2      	subs	r2, r2, r3
 800293e:	6879      	ldr	r1, [r7, #4]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	202c      	movs	r0, #44	; 0x2c
 8002944:	fb00 f303 	mul.w	r3, r0, r3
 8002948:	440b      	add	r3, r1
 800294a:	3350      	adds	r3, #80	; 0x50
 800294c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	212c      	movs	r1, #44	; 0x2c
 8002954:	fb01 f303 	mul.w	r3, r1, r3
 8002958:	4413      	add	r3, r2
 800295a:	3361      	adds	r3, #97	; 0x61
 800295c:	2201      	movs	r2, #1
 800295e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	212c      	movs	r1, #44	; 0x2c
 8002966:	fb01 f303 	mul.w	r3, r1, r3
 800296a:	4413      	add	r3, r2
 800296c:	335c      	adds	r3, #92	; 0x5c
 800296e:	2200      	movs	r2, #0
 8002970:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	015a      	lsls	r2, r3, #5
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	4413      	add	r3, r2
 800297a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297e:	461a      	mov	r2, r3
 8002980:	2301      	movs	r3, #1
 8002982:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	212c      	movs	r1, #44	; 0x2c
 800298a:	fb01 f303 	mul.w	r3, r1, r3
 800298e:	4413      	add	r3, r2
 8002990:	333f      	adds	r3, #63	; 0x3f
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d009      	beq.n	80029ac <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	212c      	movs	r1, #44	; 0x2c
 800299e:	fb01 f303 	mul.w	r3, r1, r3
 80029a2:	4413      	add	r3, r2
 80029a4:	333f      	adds	r3, #63	; 0x3f
 80029a6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d111      	bne.n	80029d0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	b2d2      	uxtb	r2, r2
 80029b4:	4611      	mov	r1, r2
 80029b6:	4618      	mov	r0, r3
 80029b8:	f004 f9d5 	bl	8006d66 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	015a      	lsls	r2, r3, #5
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	4413      	add	r3, r2
 80029c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c8:	461a      	mov	r2, r3
 80029ca:	2310      	movs	r3, #16
 80029cc:	6093      	str	r3, [r2, #8]
 80029ce:	e03a      	b.n	8002a46 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	212c      	movs	r1, #44	; 0x2c
 80029d6:	fb01 f303 	mul.w	r3, r1, r3
 80029da:	4413      	add	r3, r2
 80029dc:	333f      	adds	r3, #63	; 0x3f
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	2b03      	cmp	r3, #3
 80029e2:	d009      	beq.n	80029f8 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	212c      	movs	r1, #44	; 0x2c
 80029ea:	fb01 f303 	mul.w	r3, r1, r3
 80029ee:	4413      	add	r3, r2
 80029f0:	333f      	adds	r3, #63	; 0x3f
 80029f2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d126      	bne.n	8002a46 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	015a      	lsls	r2, r3, #5
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	4413      	add	r3, r2
 8002a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	0151      	lsls	r1, r2, #5
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	440a      	add	r2, r1
 8002a0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a12:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002a16:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	212c      	movs	r1, #44	; 0x2c
 8002a1e:	fb01 f303 	mul.w	r3, r1, r3
 8002a22:	4413      	add	r3, r2
 8002a24:	3360      	adds	r3, #96	; 0x60
 8002a26:	2201      	movs	r2, #1
 8002a28:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	b2d9      	uxtb	r1, r3
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	202c      	movs	r0, #44	; 0x2c
 8002a34:	fb00 f303 	mul.w	r3, r0, r3
 8002a38:	4413      	add	r3, r2
 8002a3a:	3360      	adds	r3, #96	; 0x60
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f009 fe8b 	bl	800c75c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d12b      	bne.n	8002aa6 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	212c      	movs	r1, #44	; 0x2c
 8002a54:	fb01 f303 	mul.w	r3, r1, r3
 8002a58:	4413      	add	r3, r2
 8002a5a:	3348      	adds	r3, #72	; 0x48
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	202c      	movs	r0, #44	; 0x2c
 8002a64:	fb00 f202 	mul.w	r2, r0, r2
 8002a68:	440a      	add	r2, r1
 8002a6a:	3240      	adds	r2, #64	; 0x40
 8002a6c:	8812      	ldrh	r2, [r2, #0]
 8002a6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f000 818e 	beq.w	8002d98 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	212c      	movs	r1, #44	; 0x2c
 8002a82:	fb01 f303 	mul.w	r3, r1, r3
 8002a86:	4413      	add	r3, r2
 8002a88:	3354      	adds	r3, #84	; 0x54
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	f083 0301 	eor.w	r3, r3, #1
 8002a90:	b2d8      	uxtb	r0, r3
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	212c      	movs	r1, #44	; 0x2c
 8002a98:	fb01 f303 	mul.w	r3, r1, r3
 8002a9c:	4413      	add	r3, r2
 8002a9e:	3354      	adds	r3, #84	; 0x54
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	701a      	strb	r2, [r3, #0]
}
 8002aa4:	e178      	b.n	8002d98 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	212c      	movs	r1, #44	; 0x2c
 8002aac:	fb01 f303 	mul.w	r3, r1, r3
 8002ab0:	4413      	add	r3, r2
 8002ab2:	3354      	adds	r3, #84	; 0x54
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	f083 0301 	eor.w	r3, r3, #1
 8002aba:	b2d8      	uxtb	r0, r3
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	212c      	movs	r1, #44	; 0x2c
 8002ac2:	fb01 f303 	mul.w	r3, r1, r3
 8002ac6:	4413      	add	r3, r2
 8002ac8:	3354      	adds	r3, #84	; 0x54
 8002aca:	4602      	mov	r2, r0
 8002acc:	701a      	strb	r2, [r3, #0]
}
 8002ace:	e163      	b.n	8002d98 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	015a      	lsls	r2, r3, #5
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	f040 80f6 	bne.w	8002cd4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	212c      	movs	r1, #44	; 0x2c
 8002aee:	fb01 f303 	mul.w	r3, r1, r3
 8002af2:	4413      	add	r3, r2
 8002af4:	3361      	adds	r3, #97	; 0x61
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d109      	bne.n	8002b10 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	212c      	movs	r1, #44	; 0x2c
 8002b02:	fb01 f303 	mul.w	r3, r1, r3
 8002b06:	4413      	add	r3, r2
 8002b08:	3360      	adds	r3, #96	; 0x60
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	701a      	strb	r2, [r3, #0]
 8002b0e:	e0c9      	b.n	8002ca4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	212c      	movs	r1, #44	; 0x2c
 8002b16:	fb01 f303 	mul.w	r3, r1, r3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	3361      	adds	r3, #97	; 0x61
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	2b05      	cmp	r3, #5
 8002b22:	d109      	bne.n	8002b38 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	212c      	movs	r1, #44	; 0x2c
 8002b2a:	fb01 f303 	mul.w	r3, r1, r3
 8002b2e:	4413      	add	r3, r2
 8002b30:	3360      	adds	r3, #96	; 0x60
 8002b32:	2205      	movs	r2, #5
 8002b34:	701a      	strb	r2, [r3, #0]
 8002b36:	e0b5      	b.n	8002ca4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	212c      	movs	r1, #44	; 0x2c
 8002b3e:	fb01 f303 	mul.w	r3, r1, r3
 8002b42:	4413      	add	r3, r2
 8002b44:	3361      	adds	r3, #97	; 0x61
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	2b06      	cmp	r3, #6
 8002b4a:	d009      	beq.n	8002b60 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	212c      	movs	r1, #44	; 0x2c
 8002b52:	fb01 f303 	mul.w	r3, r1, r3
 8002b56:	4413      	add	r3, r2
 8002b58:	3361      	adds	r3, #97	; 0x61
 8002b5a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	d150      	bne.n	8002c02 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	212c      	movs	r1, #44	; 0x2c
 8002b66:	fb01 f303 	mul.w	r3, r1, r3
 8002b6a:	4413      	add	r3, r2
 8002b6c:	335c      	adds	r3, #92	; 0x5c
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	1c5a      	adds	r2, r3, #1
 8002b72:	6879      	ldr	r1, [r7, #4]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	202c      	movs	r0, #44	; 0x2c
 8002b78:	fb00 f303 	mul.w	r3, r0, r3
 8002b7c:	440b      	add	r3, r1
 8002b7e:	335c      	adds	r3, #92	; 0x5c
 8002b80:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	212c      	movs	r1, #44	; 0x2c
 8002b88:	fb01 f303 	mul.w	r3, r1, r3
 8002b8c:	4413      	add	r3, r2
 8002b8e:	335c      	adds	r3, #92	; 0x5c
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d912      	bls.n	8002bbc <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	212c      	movs	r1, #44	; 0x2c
 8002b9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ba0:	4413      	add	r3, r2
 8002ba2:	335c      	adds	r3, #92	; 0x5c
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	212c      	movs	r1, #44	; 0x2c
 8002bae:	fb01 f303 	mul.w	r3, r1, r3
 8002bb2:	4413      	add	r3, r2
 8002bb4:	3360      	adds	r3, #96	; 0x60
 8002bb6:	2204      	movs	r2, #4
 8002bb8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002bba:	e073      	b.n	8002ca4 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	212c      	movs	r1, #44	; 0x2c
 8002bc2:	fb01 f303 	mul.w	r3, r1, r3
 8002bc6:	4413      	add	r3, r2
 8002bc8:	3360      	adds	r3, #96	; 0x60
 8002bca:	2202      	movs	r2, #2
 8002bcc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	015a      	lsls	r2, r3, #5
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002be4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bec:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	015a      	lsls	r2, r3, #5
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c00:	e050      	b.n	8002ca4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	212c      	movs	r1, #44	; 0x2c
 8002c08:	fb01 f303 	mul.w	r3, r1, r3
 8002c0c:	4413      	add	r3, r2
 8002c0e:	3361      	adds	r3, #97	; 0x61
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	2b03      	cmp	r3, #3
 8002c14:	d122      	bne.n	8002c5c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	212c      	movs	r1, #44	; 0x2c
 8002c1c:	fb01 f303 	mul.w	r3, r1, r3
 8002c20:	4413      	add	r3, r2
 8002c22:	3360      	adds	r3, #96	; 0x60
 8002c24:	2202      	movs	r2, #2
 8002c26:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	015a      	lsls	r2, r3, #5
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	4413      	add	r3, r2
 8002c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c3e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c46:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	015a      	lsls	r2, r3, #5
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	4413      	add	r3, r2
 8002c50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c54:	461a      	mov	r2, r3
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	e023      	b.n	8002ca4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	212c      	movs	r1, #44	; 0x2c
 8002c62:	fb01 f303 	mul.w	r3, r1, r3
 8002c66:	4413      	add	r3, r2
 8002c68:	3361      	adds	r3, #97	; 0x61
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b07      	cmp	r3, #7
 8002c6e:	d119      	bne.n	8002ca4 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	212c      	movs	r1, #44	; 0x2c
 8002c76:	fb01 f303 	mul.w	r3, r1, r3
 8002c7a:	4413      	add	r3, r2
 8002c7c:	335c      	adds	r3, #92	; 0x5c
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	1c5a      	adds	r2, r3, #1
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	202c      	movs	r0, #44	; 0x2c
 8002c88:	fb00 f303 	mul.w	r3, r0, r3
 8002c8c:	440b      	add	r3, r1
 8002c8e:	335c      	adds	r3, #92	; 0x5c
 8002c90:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	212c      	movs	r1, #44	; 0x2c
 8002c98:	fb01 f303 	mul.w	r3, r1, r3
 8002c9c:	4413      	add	r3, r2
 8002c9e:	3360      	adds	r3, #96	; 0x60
 8002ca0:	2204      	movs	r2, #4
 8002ca2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	015a      	lsls	r2, r3, #5
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	4413      	add	r3, r2
 8002cac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	b2d9      	uxtb	r1, r3
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	202c      	movs	r0, #44	; 0x2c
 8002cc0:	fb00 f303 	mul.w	r3, r0, r3
 8002cc4:	4413      	add	r3, r2
 8002cc6:	3360      	adds	r3, #96	; 0x60
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f009 fd45 	bl	800c75c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002cd2:	e061      	b.n	8002d98 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	015a      	lsls	r2, r3, #5
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	4413      	add	r3, r2
 8002cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 0310 	and.w	r3, r3, #16
 8002ce6:	2b10      	cmp	r3, #16
 8002ce8:	d156      	bne.n	8002d98 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	212c      	movs	r1, #44	; 0x2c
 8002cf0:	fb01 f303 	mul.w	r3, r1, r3
 8002cf4:	4413      	add	r3, r2
 8002cf6:	333f      	adds	r3, #63	; 0x3f
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	2b03      	cmp	r3, #3
 8002cfc:	d111      	bne.n	8002d22 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	212c      	movs	r1, #44	; 0x2c
 8002d04:	fb01 f303 	mul.w	r3, r1, r3
 8002d08:	4413      	add	r3, r2
 8002d0a:	335c      	adds	r3, #92	; 0x5c
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	4611      	mov	r1, r2
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f004 f823 	bl	8006d66 <USB_HC_Halt>
 8002d20:	e031      	b.n	8002d86 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	212c      	movs	r1, #44	; 0x2c
 8002d28:	fb01 f303 	mul.w	r3, r1, r3
 8002d2c:	4413      	add	r3, r2
 8002d2e:	333f      	adds	r3, #63	; 0x3f
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d009      	beq.n	8002d4a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	212c      	movs	r1, #44	; 0x2c
 8002d3c:	fb01 f303 	mul.w	r3, r1, r3
 8002d40:	4413      	add	r3, r2
 8002d42:	333f      	adds	r3, #63	; 0x3f
 8002d44:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d11d      	bne.n	8002d86 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	212c      	movs	r1, #44	; 0x2c
 8002d50:	fb01 f303 	mul.w	r3, r1, r3
 8002d54:	4413      	add	r3, r2
 8002d56:	335c      	adds	r3, #92	; 0x5c
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d110      	bne.n	8002d86 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	212c      	movs	r1, #44	; 0x2c
 8002d6a:	fb01 f303 	mul.w	r3, r1, r3
 8002d6e:	4413      	add	r3, r2
 8002d70:	3361      	adds	r3, #97	; 0x61
 8002d72:	2203      	movs	r2, #3
 8002d74:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	b2d2      	uxtb	r2, r2
 8002d7e:	4611      	mov	r1, r2
 8002d80:	4618      	mov	r0, r3
 8002d82:	f003 fff0 	bl	8006d66 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	015a      	lsls	r2, r3, #5
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d92:	461a      	mov	r2, r3
 8002d94:	2310      	movs	r3, #16
 8002d96:	6093      	str	r3, [r2, #8]
}
 8002d98:	bf00      	nop
 8002d9a:	3718      	adds	r7, #24
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b088      	sub	sp, #32
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	460b      	mov	r3, r1
 8002daa:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002db6:	78fb      	ldrb	r3, [r7, #3]
 8002db8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	015a      	lsls	r2, r3, #5
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f003 0304 	and.w	r3, r3, #4
 8002dcc:	2b04      	cmp	r3, #4
 8002dce:	d11a      	bne.n	8002e06 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	015a      	lsls	r2, r3, #5
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ddc:	461a      	mov	r2, r3
 8002dde:	2304      	movs	r3, #4
 8002de0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	212c      	movs	r1, #44	; 0x2c
 8002de8:	fb01 f303 	mul.w	r3, r1, r3
 8002dec:	4413      	add	r3, r2
 8002dee:	3361      	adds	r3, #97	; 0x61
 8002df0:	2206      	movs	r2, #6
 8002df2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	697a      	ldr	r2, [r7, #20]
 8002dfa:	b2d2      	uxtb	r2, r2
 8002dfc:	4611      	mov	r1, r2
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f003 ffb1 	bl	8006d66 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002e04:	e331      	b.n	800346a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	015a      	lsls	r2, r3, #5
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f003 0320 	and.w	r3, r3, #32
 8002e18:	2b20      	cmp	r3, #32
 8002e1a:	d12e      	bne.n	8002e7a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	015a      	lsls	r2, r3, #5
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	4413      	add	r3, r2
 8002e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e28:	461a      	mov	r2, r3
 8002e2a:	2320      	movs	r3, #32
 8002e2c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	212c      	movs	r1, #44	; 0x2c
 8002e34:	fb01 f303 	mul.w	r3, r1, r3
 8002e38:	4413      	add	r3, r2
 8002e3a:	333d      	adds	r3, #61	; 0x3d
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	f040 8313 	bne.w	800346a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	212c      	movs	r1, #44	; 0x2c
 8002e4a:	fb01 f303 	mul.w	r3, r1, r3
 8002e4e:	4413      	add	r3, r2
 8002e50:	333d      	adds	r3, #61	; 0x3d
 8002e52:	2200      	movs	r2, #0
 8002e54:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	212c      	movs	r1, #44	; 0x2c
 8002e5c:	fb01 f303 	mul.w	r3, r1, r3
 8002e60:	4413      	add	r3, r2
 8002e62:	3360      	adds	r3, #96	; 0x60
 8002e64:	2202      	movs	r2, #2
 8002e66:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	697a      	ldr	r2, [r7, #20]
 8002e6e:	b2d2      	uxtb	r2, r2
 8002e70:	4611      	mov	r1, r2
 8002e72:	4618      	mov	r0, r3
 8002e74:	f003 ff77 	bl	8006d66 <USB_HC_Halt>
}
 8002e78:	e2f7      	b.n	800346a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	015a      	lsls	r2, r3, #5
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	4413      	add	r3, r2
 8002e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e90:	d112      	bne.n	8002eb8 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	015a      	lsls	r2, r3, #5
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	4413      	add	r3, r2
 8002e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ea4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	b2d2      	uxtb	r2, r2
 8002eae:	4611      	mov	r1, r2
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f003 ff58 	bl	8006d66 <USB_HC_Halt>
}
 8002eb6:	e2d8      	b.n	800346a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	015a      	lsls	r2, r3, #5
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d140      	bne.n	8002f50 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	212c      	movs	r1, #44	; 0x2c
 8002ed4:	fb01 f303 	mul.w	r3, r1, r3
 8002ed8:	4413      	add	r3, r2
 8002eda:	335c      	adds	r3, #92	; 0x5c
 8002edc:	2200      	movs	r2, #0
 8002ede:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	015a      	lsls	r2, r3, #5
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef2:	2b40      	cmp	r3, #64	; 0x40
 8002ef4:	d111      	bne.n	8002f1a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	212c      	movs	r1, #44	; 0x2c
 8002efc:	fb01 f303 	mul.w	r3, r1, r3
 8002f00:	4413      	add	r3, r2
 8002f02:	333d      	adds	r3, #61	; 0x3d
 8002f04:	2201      	movs	r2, #1
 8002f06:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	015a      	lsls	r2, r3, #5
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	4413      	add	r3, r2
 8002f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f14:	461a      	mov	r2, r3
 8002f16:	2340      	movs	r3, #64	; 0x40
 8002f18:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	015a      	lsls	r2, r3, #5
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	4413      	add	r3, r2
 8002f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f26:	461a      	mov	r2, r3
 8002f28:	2301      	movs	r3, #1
 8002f2a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	212c      	movs	r1, #44	; 0x2c
 8002f32:	fb01 f303 	mul.w	r3, r1, r3
 8002f36:	4413      	add	r3, r2
 8002f38:	3361      	adds	r3, #97	; 0x61
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	b2d2      	uxtb	r2, r2
 8002f46:	4611      	mov	r1, r2
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f003 ff0c 	bl	8006d66 <USB_HC_Halt>
}
 8002f4e:	e28c      	b.n	800346a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	015a      	lsls	r2, r3, #5
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	4413      	add	r3, r2
 8002f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f62:	2b40      	cmp	r3, #64	; 0x40
 8002f64:	d12c      	bne.n	8002fc0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	212c      	movs	r1, #44	; 0x2c
 8002f6c:	fb01 f303 	mul.w	r3, r1, r3
 8002f70:	4413      	add	r3, r2
 8002f72:	3361      	adds	r3, #97	; 0x61
 8002f74:	2204      	movs	r2, #4
 8002f76:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	212c      	movs	r1, #44	; 0x2c
 8002f7e:	fb01 f303 	mul.w	r3, r1, r3
 8002f82:	4413      	add	r3, r2
 8002f84:	333d      	adds	r3, #61	; 0x3d
 8002f86:	2201      	movs	r2, #1
 8002f88:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	212c      	movs	r1, #44	; 0x2c
 8002f90:	fb01 f303 	mul.w	r3, r1, r3
 8002f94:	4413      	add	r3, r2
 8002f96:	335c      	adds	r3, #92	; 0x5c
 8002f98:	2200      	movs	r2, #0
 8002f9a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	697a      	ldr	r2, [r7, #20]
 8002fa2:	b2d2      	uxtb	r2, r2
 8002fa4:	4611      	mov	r1, r2
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f003 fedd 	bl	8006d66 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	015a      	lsls	r2, r3, #5
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb8:	461a      	mov	r2, r3
 8002fba:	2340      	movs	r3, #64	; 0x40
 8002fbc:	6093      	str	r3, [r2, #8]
}
 8002fbe:	e254      	b.n	800346a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	015a      	lsls	r2, r3, #5
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 0308 	and.w	r3, r3, #8
 8002fd2:	2b08      	cmp	r3, #8
 8002fd4:	d11a      	bne.n	800300c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	015a      	lsls	r2, r3, #5
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	4413      	add	r3, r2
 8002fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	2308      	movs	r3, #8
 8002fe6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	212c      	movs	r1, #44	; 0x2c
 8002fee:	fb01 f303 	mul.w	r3, r1, r3
 8002ff2:	4413      	add	r3, r2
 8002ff4:	3361      	adds	r3, #97	; 0x61
 8002ff6:	2205      	movs	r2, #5
 8002ff8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	b2d2      	uxtb	r2, r2
 8003002:	4611      	mov	r1, r2
 8003004:	4618      	mov	r0, r3
 8003006:	f003 feae 	bl	8006d66 <USB_HC_Halt>
}
 800300a:	e22e      	b.n	800346a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	015a      	lsls	r2, r3, #5
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	4413      	add	r3, r2
 8003014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f003 0310 	and.w	r3, r3, #16
 800301e:	2b10      	cmp	r3, #16
 8003020:	d140      	bne.n	80030a4 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	212c      	movs	r1, #44	; 0x2c
 8003028:	fb01 f303 	mul.w	r3, r1, r3
 800302c:	4413      	add	r3, r2
 800302e:	335c      	adds	r3, #92	; 0x5c
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	212c      	movs	r1, #44	; 0x2c
 800303a:	fb01 f303 	mul.w	r3, r1, r3
 800303e:	4413      	add	r3, r2
 8003040:	3361      	adds	r3, #97	; 0x61
 8003042:	2203      	movs	r2, #3
 8003044:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	212c      	movs	r1, #44	; 0x2c
 800304c:	fb01 f303 	mul.w	r3, r1, r3
 8003050:	4413      	add	r3, r2
 8003052:	333d      	adds	r3, #61	; 0x3d
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d112      	bne.n	8003080 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	212c      	movs	r1, #44	; 0x2c
 8003060:	fb01 f303 	mul.w	r3, r1, r3
 8003064:	4413      	add	r3, r2
 8003066:	333c      	adds	r3, #60	; 0x3c
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d108      	bne.n	8003080 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	212c      	movs	r1, #44	; 0x2c
 8003074:	fb01 f303 	mul.w	r3, r1, r3
 8003078:	4413      	add	r3, r2
 800307a:	333d      	adds	r3, #61	; 0x3d
 800307c:	2201      	movs	r2, #1
 800307e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	697a      	ldr	r2, [r7, #20]
 8003086:	b2d2      	uxtb	r2, r2
 8003088:	4611      	mov	r1, r2
 800308a:	4618      	mov	r0, r3
 800308c:	f003 fe6b 	bl	8006d66 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	015a      	lsls	r2, r3, #5
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	4413      	add	r3, r2
 8003098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800309c:	461a      	mov	r2, r3
 800309e:	2310      	movs	r3, #16
 80030a0:	6093      	str	r3, [r2, #8]
}
 80030a2:	e1e2      	b.n	800346a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	015a      	lsls	r2, r3, #5
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	4413      	add	r3, r2
 80030ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b6:	2b80      	cmp	r3, #128	; 0x80
 80030b8:	d164      	bne.n	8003184 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d111      	bne.n	80030e6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	212c      	movs	r1, #44	; 0x2c
 80030c8:	fb01 f303 	mul.w	r3, r1, r3
 80030cc:	4413      	add	r3, r2
 80030ce:	3361      	adds	r3, #97	; 0x61
 80030d0:	2206      	movs	r2, #6
 80030d2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	b2d2      	uxtb	r2, r2
 80030dc:	4611      	mov	r1, r2
 80030de:	4618      	mov	r0, r3
 80030e0:	f003 fe41 	bl	8006d66 <USB_HC_Halt>
 80030e4:	e044      	b.n	8003170 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	212c      	movs	r1, #44	; 0x2c
 80030ec:	fb01 f303 	mul.w	r3, r1, r3
 80030f0:	4413      	add	r3, r2
 80030f2:	335c      	adds	r3, #92	; 0x5c
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	1c5a      	adds	r2, r3, #1
 80030f8:	6879      	ldr	r1, [r7, #4]
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	202c      	movs	r0, #44	; 0x2c
 80030fe:	fb00 f303 	mul.w	r3, r0, r3
 8003102:	440b      	add	r3, r1
 8003104:	335c      	adds	r3, #92	; 0x5c
 8003106:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	212c      	movs	r1, #44	; 0x2c
 800310e:	fb01 f303 	mul.w	r3, r1, r3
 8003112:	4413      	add	r3, r2
 8003114:	335c      	adds	r3, #92	; 0x5c
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2b02      	cmp	r3, #2
 800311a:	d920      	bls.n	800315e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	212c      	movs	r1, #44	; 0x2c
 8003122:	fb01 f303 	mul.w	r3, r1, r3
 8003126:	4413      	add	r3, r2
 8003128:	335c      	adds	r3, #92	; 0x5c
 800312a:	2200      	movs	r2, #0
 800312c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	212c      	movs	r1, #44	; 0x2c
 8003134:	fb01 f303 	mul.w	r3, r1, r3
 8003138:	4413      	add	r3, r2
 800313a:	3360      	adds	r3, #96	; 0x60
 800313c:	2204      	movs	r2, #4
 800313e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	b2d9      	uxtb	r1, r3
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	202c      	movs	r0, #44	; 0x2c
 800314a:	fb00 f303 	mul.w	r3, r0, r3
 800314e:	4413      	add	r3, r2
 8003150:	3360      	adds	r3, #96	; 0x60
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	461a      	mov	r2, r3
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f009 fb00 	bl	800c75c <HAL_HCD_HC_NotifyURBChange_Callback>
 800315c:	e008      	b.n	8003170 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	212c      	movs	r1, #44	; 0x2c
 8003164:	fb01 f303 	mul.w	r3, r1, r3
 8003168:	4413      	add	r3, r2
 800316a:	3360      	adds	r3, #96	; 0x60
 800316c:	2202      	movs	r2, #2
 800316e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	015a      	lsls	r2, r3, #5
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	4413      	add	r3, r2
 8003178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800317c:	461a      	mov	r2, r3
 800317e:	2380      	movs	r3, #128	; 0x80
 8003180:	6093      	str	r3, [r2, #8]
}
 8003182:	e172      	b.n	800346a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	015a      	lsls	r2, r3, #5
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	4413      	add	r3, r2
 800318c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003196:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800319a:	d11b      	bne.n	80031d4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	212c      	movs	r1, #44	; 0x2c
 80031a2:	fb01 f303 	mul.w	r3, r1, r3
 80031a6:	4413      	add	r3, r2
 80031a8:	3361      	adds	r3, #97	; 0x61
 80031aa:	2208      	movs	r2, #8
 80031ac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	b2d2      	uxtb	r2, r2
 80031b6:	4611      	mov	r1, r2
 80031b8:	4618      	mov	r0, r3
 80031ba:	f003 fdd4 	bl	8006d66 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	015a      	lsls	r2, r3, #5
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	4413      	add	r3, r2
 80031c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ca:	461a      	mov	r2, r3
 80031cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031d0:	6093      	str	r3, [r2, #8]
}
 80031d2:	e14a      	b.n	800346a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	015a      	lsls	r2, r3, #5
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	4413      	add	r3, r2
 80031dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	f040 813f 	bne.w	800346a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	212c      	movs	r1, #44	; 0x2c
 80031f2:	fb01 f303 	mul.w	r3, r1, r3
 80031f6:	4413      	add	r3, r2
 80031f8:	3361      	adds	r3, #97	; 0x61
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d17d      	bne.n	80032fc <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	212c      	movs	r1, #44	; 0x2c
 8003206:	fb01 f303 	mul.w	r3, r1, r3
 800320a:	4413      	add	r3, r2
 800320c:	3360      	adds	r3, #96	; 0x60
 800320e:	2201      	movs	r2, #1
 8003210:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	212c      	movs	r1, #44	; 0x2c
 8003218:	fb01 f303 	mul.w	r3, r1, r3
 800321c:	4413      	add	r3, r2
 800321e:	333f      	adds	r3, #63	; 0x3f
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	2b02      	cmp	r3, #2
 8003224:	d00a      	beq.n	800323c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	212c      	movs	r1, #44	; 0x2c
 800322c:	fb01 f303 	mul.w	r3, r1, r3
 8003230:	4413      	add	r3, r2
 8003232:	333f      	adds	r3, #63	; 0x3f
 8003234:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003236:	2b03      	cmp	r3, #3
 8003238:	f040 8100 	bne.w	800343c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d113      	bne.n	800326c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	212c      	movs	r1, #44	; 0x2c
 800324a:	fb01 f303 	mul.w	r3, r1, r3
 800324e:	4413      	add	r3, r2
 8003250:	3355      	adds	r3, #85	; 0x55
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	f083 0301 	eor.w	r3, r3, #1
 8003258:	b2d8      	uxtb	r0, r3
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	212c      	movs	r1, #44	; 0x2c
 8003260:	fb01 f303 	mul.w	r3, r1, r3
 8003264:	4413      	add	r3, r2
 8003266:	3355      	adds	r3, #85	; 0x55
 8003268:	4602      	mov	r2, r0
 800326a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	2b01      	cmp	r3, #1
 8003272:	f040 80e3 	bne.w	800343c <HCD_HC_OUT_IRQHandler+0x69c>
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	212c      	movs	r1, #44	; 0x2c
 800327c:	fb01 f303 	mul.w	r3, r1, r3
 8003280:	4413      	add	r3, r2
 8003282:	334c      	adds	r3, #76	; 0x4c
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	f000 80d8 	beq.w	800343c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	212c      	movs	r1, #44	; 0x2c
 8003292:	fb01 f303 	mul.w	r3, r1, r3
 8003296:	4413      	add	r3, r2
 8003298:	334c      	adds	r3, #76	; 0x4c
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	202c      	movs	r0, #44	; 0x2c
 80032a2:	fb00 f202 	mul.w	r2, r0, r2
 80032a6:	440a      	add	r2, r1
 80032a8:	3240      	adds	r2, #64	; 0x40
 80032aa:	8812      	ldrh	r2, [r2, #0]
 80032ac:	4413      	add	r3, r2
 80032ae:	3b01      	subs	r3, #1
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	202c      	movs	r0, #44	; 0x2c
 80032b6:	fb00 f202 	mul.w	r2, r0, r2
 80032ba:	440a      	add	r2, r1
 80032bc:	3240      	adds	r2, #64	; 0x40
 80032be:	8812      	ldrh	r2, [r2, #0]
 80032c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80032c4:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 80b5 	beq.w	800343c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	212c      	movs	r1, #44	; 0x2c
 80032d8:	fb01 f303 	mul.w	r3, r1, r3
 80032dc:	4413      	add	r3, r2
 80032de:	3355      	adds	r3, #85	; 0x55
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	f083 0301 	eor.w	r3, r3, #1
 80032e6:	b2d8      	uxtb	r0, r3
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	212c      	movs	r1, #44	; 0x2c
 80032ee:	fb01 f303 	mul.w	r3, r1, r3
 80032f2:	4413      	add	r3, r2
 80032f4:	3355      	adds	r3, #85	; 0x55
 80032f6:	4602      	mov	r2, r0
 80032f8:	701a      	strb	r2, [r3, #0]
 80032fa:	e09f      	b.n	800343c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	212c      	movs	r1, #44	; 0x2c
 8003302:	fb01 f303 	mul.w	r3, r1, r3
 8003306:	4413      	add	r3, r2
 8003308:	3361      	adds	r3, #97	; 0x61
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	2b03      	cmp	r3, #3
 800330e:	d109      	bne.n	8003324 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	212c      	movs	r1, #44	; 0x2c
 8003316:	fb01 f303 	mul.w	r3, r1, r3
 800331a:	4413      	add	r3, r2
 800331c:	3360      	adds	r3, #96	; 0x60
 800331e:	2202      	movs	r2, #2
 8003320:	701a      	strb	r2, [r3, #0]
 8003322:	e08b      	b.n	800343c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	212c      	movs	r1, #44	; 0x2c
 800332a:	fb01 f303 	mul.w	r3, r1, r3
 800332e:	4413      	add	r3, r2
 8003330:	3361      	adds	r3, #97	; 0x61
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	2b04      	cmp	r3, #4
 8003336:	d109      	bne.n	800334c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	212c      	movs	r1, #44	; 0x2c
 800333e:	fb01 f303 	mul.w	r3, r1, r3
 8003342:	4413      	add	r3, r2
 8003344:	3360      	adds	r3, #96	; 0x60
 8003346:	2202      	movs	r2, #2
 8003348:	701a      	strb	r2, [r3, #0]
 800334a:	e077      	b.n	800343c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	212c      	movs	r1, #44	; 0x2c
 8003352:	fb01 f303 	mul.w	r3, r1, r3
 8003356:	4413      	add	r3, r2
 8003358:	3361      	adds	r3, #97	; 0x61
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	2b05      	cmp	r3, #5
 800335e:	d109      	bne.n	8003374 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	212c      	movs	r1, #44	; 0x2c
 8003366:	fb01 f303 	mul.w	r3, r1, r3
 800336a:	4413      	add	r3, r2
 800336c:	3360      	adds	r3, #96	; 0x60
 800336e:	2205      	movs	r2, #5
 8003370:	701a      	strb	r2, [r3, #0]
 8003372:	e063      	b.n	800343c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	212c      	movs	r1, #44	; 0x2c
 800337a:	fb01 f303 	mul.w	r3, r1, r3
 800337e:	4413      	add	r3, r2
 8003380:	3361      	adds	r3, #97	; 0x61
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	2b06      	cmp	r3, #6
 8003386:	d009      	beq.n	800339c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	212c      	movs	r1, #44	; 0x2c
 800338e:	fb01 f303 	mul.w	r3, r1, r3
 8003392:	4413      	add	r3, r2
 8003394:	3361      	adds	r3, #97	; 0x61
 8003396:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003398:	2b08      	cmp	r3, #8
 800339a:	d14f      	bne.n	800343c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	212c      	movs	r1, #44	; 0x2c
 80033a2:	fb01 f303 	mul.w	r3, r1, r3
 80033a6:	4413      	add	r3, r2
 80033a8:	335c      	adds	r3, #92	; 0x5c
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	1c5a      	adds	r2, r3, #1
 80033ae:	6879      	ldr	r1, [r7, #4]
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	202c      	movs	r0, #44	; 0x2c
 80033b4:	fb00 f303 	mul.w	r3, r0, r3
 80033b8:	440b      	add	r3, r1
 80033ba:	335c      	adds	r3, #92	; 0x5c
 80033bc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	212c      	movs	r1, #44	; 0x2c
 80033c4:	fb01 f303 	mul.w	r3, r1, r3
 80033c8:	4413      	add	r3, r2
 80033ca:	335c      	adds	r3, #92	; 0x5c
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d912      	bls.n	80033f8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	212c      	movs	r1, #44	; 0x2c
 80033d8:	fb01 f303 	mul.w	r3, r1, r3
 80033dc:	4413      	add	r3, r2
 80033de:	335c      	adds	r3, #92	; 0x5c
 80033e0:	2200      	movs	r2, #0
 80033e2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	212c      	movs	r1, #44	; 0x2c
 80033ea:	fb01 f303 	mul.w	r3, r1, r3
 80033ee:	4413      	add	r3, r2
 80033f0:	3360      	adds	r3, #96	; 0x60
 80033f2:	2204      	movs	r2, #4
 80033f4:	701a      	strb	r2, [r3, #0]
 80033f6:	e021      	b.n	800343c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	212c      	movs	r1, #44	; 0x2c
 80033fe:	fb01 f303 	mul.w	r3, r1, r3
 8003402:	4413      	add	r3, r2
 8003404:	3360      	adds	r3, #96	; 0x60
 8003406:	2202      	movs	r2, #2
 8003408:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	015a      	lsls	r2, r3, #5
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	4413      	add	r3, r2
 8003412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003420:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003428:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	015a      	lsls	r2, r3, #5
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	4413      	add	r3, r2
 8003432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003436:	461a      	mov	r2, r3
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	015a      	lsls	r2, r3, #5
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	4413      	add	r3, r2
 8003444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003448:	461a      	mov	r2, r3
 800344a:	2302      	movs	r3, #2
 800344c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	b2d9      	uxtb	r1, r3
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	202c      	movs	r0, #44	; 0x2c
 8003458:	fb00 f303 	mul.w	r3, r0, r3
 800345c:	4413      	add	r3, r2
 800345e:	3360      	adds	r3, #96	; 0x60
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	461a      	mov	r2, r3
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f009 f979 	bl	800c75c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800346a:	bf00      	nop
 800346c:	3720      	adds	r7, #32
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b08a      	sub	sp, #40	; 0x28
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003482:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	f003 030f 	and.w	r3, r3, #15
 8003492:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	0c5b      	lsrs	r3, r3, #17
 8003498:	f003 030f 	and.w	r3, r3, #15
 800349c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	091b      	lsrs	r3, r3, #4
 80034a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034a6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d004      	beq.n	80034b8 <HCD_RXQLVL_IRQHandler+0x46>
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	2b05      	cmp	r3, #5
 80034b2:	f000 80a9 	beq.w	8003608 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80034b6:	e0aa      	b.n	800360e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 80a6 	beq.w	800360c <HCD_RXQLVL_IRQHandler+0x19a>
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	212c      	movs	r1, #44	; 0x2c
 80034c6:	fb01 f303 	mul.w	r3, r1, r3
 80034ca:	4413      	add	r3, r2
 80034cc:	3344      	adds	r3, #68	; 0x44
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 809b 	beq.w	800360c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	212c      	movs	r1, #44	; 0x2c
 80034dc:	fb01 f303 	mul.w	r3, r1, r3
 80034e0:	4413      	add	r3, r2
 80034e2:	3350      	adds	r3, #80	; 0x50
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	441a      	add	r2, r3
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	202c      	movs	r0, #44	; 0x2c
 80034f0:	fb00 f303 	mul.w	r3, r0, r3
 80034f4:	440b      	add	r3, r1
 80034f6:	334c      	adds	r3, #76	; 0x4c
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d87a      	bhi.n	80035f4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6818      	ldr	r0, [r3, #0]
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	212c      	movs	r1, #44	; 0x2c
 8003508:	fb01 f303 	mul.w	r3, r1, r3
 800350c:	4413      	add	r3, r2
 800350e:	3344      	adds	r3, #68	; 0x44
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	b292      	uxth	r2, r2
 8003516:	4619      	mov	r1, r3
 8003518:	f002 ff7c 	bl	8006414 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	212c      	movs	r1, #44	; 0x2c
 8003522:	fb01 f303 	mul.w	r3, r1, r3
 8003526:	4413      	add	r3, r2
 8003528:	3344      	adds	r3, #68	; 0x44
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	441a      	add	r2, r3
 8003530:	6879      	ldr	r1, [r7, #4]
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	202c      	movs	r0, #44	; 0x2c
 8003536:	fb00 f303 	mul.w	r3, r0, r3
 800353a:	440b      	add	r3, r1
 800353c:	3344      	adds	r3, #68	; 0x44
 800353e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	212c      	movs	r1, #44	; 0x2c
 8003546:	fb01 f303 	mul.w	r3, r1, r3
 800354a:	4413      	add	r3, r2
 800354c:	3350      	adds	r3, #80	; 0x50
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	441a      	add	r2, r3
 8003554:	6879      	ldr	r1, [r7, #4]
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	202c      	movs	r0, #44	; 0x2c
 800355a:	fb00 f303 	mul.w	r3, r0, r3
 800355e:	440b      	add	r3, r1
 8003560:	3350      	adds	r3, #80	; 0x50
 8003562:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	015a      	lsls	r2, r3, #5
 8003568:	6a3b      	ldr	r3, [r7, #32]
 800356a:	4413      	add	r3, r2
 800356c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	0cdb      	lsrs	r3, r3, #19
 8003574:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003578:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	212c      	movs	r1, #44	; 0x2c
 8003580:	fb01 f303 	mul.w	r3, r1, r3
 8003584:	4413      	add	r3, r2
 8003586:	3340      	adds	r3, #64	; 0x40
 8003588:	881b      	ldrh	r3, [r3, #0]
 800358a:	461a      	mov	r2, r3
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	4293      	cmp	r3, r2
 8003590:	d13c      	bne.n	800360c <HCD_RXQLVL_IRQHandler+0x19a>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d039      	beq.n	800360c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	015a      	lsls	r2, r3, #5
 800359c:	6a3b      	ldr	r3, [r7, #32]
 800359e:	4413      	add	r3, r2
 80035a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80035ae:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80035b6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	015a      	lsls	r2, r3, #5
 80035bc:	6a3b      	ldr	r3, [r7, #32]
 80035be:	4413      	add	r3, r2
 80035c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035c4:	461a      	mov	r2, r3
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	212c      	movs	r1, #44	; 0x2c
 80035d0:	fb01 f303 	mul.w	r3, r1, r3
 80035d4:	4413      	add	r3, r2
 80035d6:	3354      	adds	r3, #84	; 0x54
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	f083 0301 	eor.w	r3, r3, #1
 80035de:	b2d8      	uxtb	r0, r3
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	212c      	movs	r1, #44	; 0x2c
 80035e6:	fb01 f303 	mul.w	r3, r1, r3
 80035ea:	4413      	add	r3, r2
 80035ec:	3354      	adds	r3, #84	; 0x54
 80035ee:	4602      	mov	r2, r0
 80035f0:	701a      	strb	r2, [r3, #0]
      break;
 80035f2:	e00b      	b.n	800360c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	212c      	movs	r1, #44	; 0x2c
 80035fa:	fb01 f303 	mul.w	r3, r1, r3
 80035fe:	4413      	add	r3, r2
 8003600:	3360      	adds	r3, #96	; 0x60
 8003602:	2204      	movs	r2, #4
 8003604:	701a      	strb	r2, [r3, #0]
      break;
 8003606:	e001      	b.n	800360c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003608:	bf00      	nop
 800360a:	e000      	b.n	800360e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800360c:	bf00      	nop
  }
}
 800360e:	bf00      	nop
 8003610:	3728      	adds	r7, #40	; 0x28
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b086      	sub	sp, #24
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003642:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b02      	cmp	r3, #2
 800364c:	d10b      	bne.n	8003666 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b01      	cmp	r3, #1
 8003656:	d102      	bne.n	800365e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f009 f863 	bl	800c724 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	f043 0302 	orr.w	r3, r3, #2
 8003664:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f003 0308 	and.w	r3, r3, #8
 800366c:	2b08      	cmp	r3, #8
 800366e:	d132      	bne.n	80036d6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	f043 0308 	orr.w	r3, r3, #8
 8003676:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f003 0304 	and.w	r3, r3, #4
 800367e:	2b04      	cmp	r3, #4
 8003680:	d126      	bne.n	80036d0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	2b02      	cmp	r3, #2
 8003688:	d113      	bne.n	80036b2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003690:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003694:	d106      	bne.n	80036a4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2102      	movs	r1, #2
 800369c:	4618      	mov	r0, r3
 800369e:	f003 f827 	bl	80066f0 <USB_InitFSLSPClkSel>
 80036a2:	e011      	b.n	80036c8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2101      	movs	r1, #1
 80036aa:	4618      	mov	r0, r3
 80036ac:	f003 f820 	bl	80066f0 <USB_InitFSLSPClkSel>
 80036b0:	e00a      	b.n	80036c8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d106      	bne.n	80036c8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036c0:	461a      	mov	r2, r3
 80036c2:	f64e 2360 	movw	r3, #60000	; 0xea60
 80036c6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f009 f859 	bl	800c780 <HAL_HCD_PortEnabled_Callback>
 80036ce:	e002      	b.n	80036d6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f009 f863 	bl	800c79c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f003 0320 	and.w	r3, r3, #32
 80036dc:	2b20      	cmp	r3, #32
 80036de:	d103      	bne.n	80036e8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	f043 0320 	orr.w	r3, r3, #32
 80036e6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80036ee:	461a      	mov	r2, r3
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	6013      	str	r3, [r2, #0]
}
 80036f4:	bf00      	nop
 80036f6:	3718      	adds	r7, #24
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e12b      	b.n	8003966 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d106      	bne.n	8003728 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7fd fac6 	bl	8000cb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2224      	movs	r2, #36	; 0x24
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0201 	bic.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800374e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800375e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003760:	f001 fa20 	bl	8004ba4 <HAL_RCC_GetPCLK1Freq>
 8003764:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	4a81      	ldr	r2, [pc, #516]	; (8003970 <HAL_I2C_Init+0x274>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d807      	bhi.n	8003780 <HAL_I2C_Init+0x84>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	4a80      	ldr	r2, [pc, #512]	; (8003974 <HAL_I2C_Init+0x278>)
 8003774:	4293      	cmp	r3, r2
 8003776:	bf94      	ite	ls
 8003778:	2301      	movls	r3, #1
 800377a:	2300      	movhi	r3, #0
 800377c:	b2db      	uxtb	r3, r3
 800377e:	e006      	b.n	800378e <HAL_I2C_Init+0x92>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	4a7d      	ldr	r2, [pc, #500]	; (8003978 <HAL_I2C_Init+0x27c>)
 8003784:	4293      	cmp	r3, r2
 8003786:	bf94      	ite	ls
 8003788:	2301      	movls	r3, #1
 800378a:	2300      	movhi	r3, #0
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e0e7      	b.n	8003966 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	4a78      	ldr	r2, [pc, #480]	; (800397c <HAL_I2C_Init+0x280>)
 800379a:	fba2 2303 	umull	r2, r3, r2, r3
 800379e:	0c9b      	lsrs	r3, r3, #18
 80037a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68ba      	ldr	r2, [r7, #8]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	4a6a      	ldr	r2, [pc, #424]	; (8003970 <HAL_I2C_Init+0x274>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d802      	bhi.n	80037d0 <HAL_I2C_Init+0xd4>
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	3301      	adds	r3, #1
 80037ce:	e009      	b.n	80037e4 <HAL_I2C_Init+0xe8>
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80037d6:	fb02 f303 	mul.w	r3, r2, r3
 80037da:	4a69      	ldr	r2, [pc, #420]	; (8003980 <HAL_I2C_Init+0x284>)
 80037dc:	fba2 2303 	umull	r2, r3, r2, r3
 80037e0:	099b      	lsrs	r3, r3, #6
 80037e2:	3301      	adds	r3, #1
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	6812      	ldr	r2, [r2, #0]
 80037e8:	430b      	orrs	r3, r1
 80037ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	69db      	ldr	r3, [r3, #28]
 80037f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80037f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	495c      	ldr	r1, [pc, #368]	; (8003970 <HAL_I2C_Init+0x274>)
 8003800:	428b      	cmp	r3, r1
 8003802:	d819      	bhi.n	8003838 <HAL_I2C_Init+0x13c>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	1e59      	subs	r1, r3, #1
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003812:	1c59      	adds	r1, r3, #1
 8003814:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003818:	400b      	ands	r3, r1
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00a      	beq.n	8003834 <HAL_I2C_Init+0x138>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	1e59      	subs	r1, r3, #1
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	fbb1 f3f3 	udiv	r3, r1, r3
 800382c:	3301      	adds	r3, #1
 800382e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003832:	e051      	b.n	80038d8 <HAL_I2C_Init+0x1dc>
 8003834:	2304      	movs	r3, #4
 8003836:	e04f      	b.n	80038d8 <HAL_I2C_Init+0x1dc>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d111      	bne.n	8003864 <HAL_I2C_Init+0x168>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	1e58      	subs	r0, r3, #1
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6859      	ldr	r1, [r3, #4]
 8003848:	460b      	mov	r3, r1
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	440b      	add	r3, r1
 800384e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003852:	3301      	adds	r3, #1
 8003854:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003858:	2b00      	cmp	r3, #0
 800385a:	bf0c      	ite	eq
 800385c:	2301      	moveq	r3, #1
 800385e:	2300      	movne	r3, #0
 8003860:	b2db      	uxtb	r3, r3
 8003862:	e012      	b.n	800388a <HAL_I2C_Init+0x18e>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	1e58      	subs	r0, r3, #1
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6859      	ldr	r1, [r3, #4]
 800386c:	460b      	mov	r3, r1
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	0099      	lsls	r1, r3, #2
 8003874:	440b      	add	r3, r1
 8003876:	fbb0 f3f3 	udiv	r3, r0, r3
 800387a:	3301      	adds	r3, #1
 800387c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003880:	2b00      	cmp	r3, #0
 8003882:	bf0c      	ite	eq
 8003884:	2301      	moveq	r3, #1
 8003886:	2300      	movne	r3, #0
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <HAL_I2C_Init+0x196>
 800388e:	2301      	movs	r3, #1
 8003890:	e022      	b.n	80038d8 <HAL_I2C_Init+0x1dc>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10e      	bne.n	80038b8 <HAL_I2C_Init+0x1bc>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	1e58      	subs	r0, r3, #1
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6859      	ldr	r1, [r3, #4]
 80038a2:	460b      	mov	r3, r1
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	440b      	add	r3, r1
 80038a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ac:	3301      	adds	r3, #1
 80038ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038b6:	e00f      	b.n	80038d8 <HAL_I2C_Init+0x1dc>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	1e58      	subs	r0, r3, #1
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6859      	ldr	r1, [r3, #4]
 80038c0:	460b      	mov	r3, r1
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	440b      	add	r3, r1
 80038c6:	0099      	lsls	r1, r3, #2
 80038c8:	440b      	add	r3, r1
 80038ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ce:	3301      	adds	r3, #1
 80038d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038d8:	6879      	ldr	r1, [r7, #4]
 80038da:	6809      	ldr	r1, [r1, #0]
 80038dc:	4313      	orrs	r3, r2
 80038de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	69da      	ldr	r2, [r3, #28]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003906:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	6911      	ldr	r1, [r2, #16]
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	68d2      	ldr	r2, [r2, #12]
 8003912:	4311      	orrs	r1, r2
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6812      	ldr	r2, [r2, #0]
 8003918:	430b      	orrs	r3, r1
 800391a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	695a      	ldr	r2, [r3, #20]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	431a      	orrs	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	430a      	orrs	r2, r1
 8003936:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f042 0201 	orr.w	r2, r2, #1
 8003946:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2220      	movs	r2, #32
 8003952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	000186a0 	.word	0x000186a0
 8003974:	001e847f 	.word	0x001e847f
 8003978:	003d08ff 	.word	0x003d08ff
 800397c:	431bde83 	.word	0x431bde83
 8003980:	10624dd3 	.word	0x10624dd3

08003984 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b088      	sub	sp, #32
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e128      	b.n	8003be8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d109      	bne.n	80039b6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a90      	ldr	r2, [pc, #576]	; (8003bf0 <HAL_I2S_Init+0x26c>)
 80039ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f7fd f9c7 	bl	8000d44 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2202      	movs	r2, #2
 80039ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	69db      	ldr	r3, [r3, #28]
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	6812      	ldr	r2, [r2, #0]
 80039c8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80039cc:	f023 030f 	bic.w	r3, r3, #15
 80039d0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2202      	movs	r2, #2
 80039d8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d060      	beq.n	8003aa4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d102      	bne.n	80039f0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80039ea:	2310      	movs	r3, #16
 80039ec:	617b      	str	r3, [r7, #20]
 80039ee:	e001      	b.n	80039f4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80039f0:	2320      	movs	r3, #32
 80039f2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	2b20      	cmp	r3, #32
 80039fa:	d802      	bhi.n	8003a02 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003a02:	2001      	movs	r0, #1
 8003a04:	f001 fa0a 	bl	8004e1c <HAL_RCCEx_GetPeriphCLKFreq>
 8003a08:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a12:	d125      	bne.n	8003a60 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d010      	beq.n	8003a3e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a26:	4613      	mov	r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	4413      	add	r3, r2
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	461a      	mov	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a38:	3305      	adds	r3, #5
 8003a3a:	613b      	str	r3, [r7, #16]
 8003a3c:	e01f      	b.n	8003a7e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	00db      	lsls	r3, r3, #3
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a48:	4613      	mov	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	4413      	add	r3, r2
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	461a      	mov	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a5a:	3305      	adds	r3, #5
 8003a5c:	613b      	str	r3, [r7, #16]
 8003a5e:	e00e      	b.n	8003a7e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a68:	4613      	mov	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	4413      	add	r3, r2
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	461a      	mov	r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7a:	3305      	adds	r3, #5
 8003a7c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	4a5c      	ldr	r2, [pc, #368]	; (8003bf4 <HAL_I2S_Init+0x270>)
 8003a82:	fba2 2303 	umull	r2, r3, r2, r3
 8003a86:	08db      	lsrs	r3, r3, #3
 8003a88:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	f003 0301 	and.w	r3, r3, #1
 8003a90:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	085b      	lsrs	r3, r3, #1
 8003a9a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	021b      	lsls	r3, r3, #8
 8003aa0:	61bb      	str	r3, [r7, #24]
 8003aa2:	e003      	b.n	8003aac <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d902      	bls.n	8003ab8 <HAL_I2S_Init+0x134>
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	2bff      	cmp	r3, #255	; 0xff
 8003ab6:	d907      	bls.n	8003ac8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003abc:	f043 0210 	orr.w	r2, r3, #16
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e08f      	b.n	8003be8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	691a      	ldr	r2, [r3, #16]
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	ea42 0103 	orr.w	r1, r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	69fa      	ldr	r2, [r7, #28]
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003ae6:	f023 030f 	bic.w	r3, r3, #15
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	6851      	ldr	r1, [r2, #4]
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	6892      	ldr	r2, [r2, #8]
 8003af2:	4311      	orrs	r1, r2
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	68d2      	ldr	r2, [r2, #12]
 8003af8:	4311      	orrs	r1, r2
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	6992      	ldr	r2, [r2, #24]
 8003afe:	430a      	orrs	r2, r1
 8003b00:	431a      	orrs	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b0a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d161      	bne.n	8003bd8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a38      	ldr	r2, [pc, #224]	; (8003bf8 <HAL_I2S_Init+0x274>)
 8003b18:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a37      	ldr	r2, [pc, #220]	; (8003bfc <HAL_I2S_Init+0x278>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d101      	bne.n	8003b28 <HAL_I2S_Init+0x1a4>
 8003b24:	4b36      	ldr	r3, [pc, #216]	; (8003c00 <HAL_I2S_Init+0x27c>)
 8003b26:	e001      	b.n	8003b2c <HAL_I2S_Init+0x1a8>
 8003b28:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b2c:	69db      	ldr	r3, [r3, #28]
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	6812      	ldr	r2, [r2, #0]
 8003b32:	4932      	ldr	r1, [pc, #200]	; (8003bfc <HAL_I2S_Init+0x278>)
 8003b34:	428a      	cmp	r2, r1
 8003b36:	d101      	bne.n	8003b3c <HAL_I2S_Init+0x1b8>
 8003b38:	4a31      	ldr	r2, [pc, #196]	; (8003c00 <HAL_I2S_Init+0x27c>)
 8003b3a:	e001      	b.n	8003b40 <HAL_I2S_Init+0x1bc>
 8003b3c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003b40:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003b44:	f023 030f 	bic.w	r3, r3, #15
 8003b48:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a2b      	ldr	r2, [pc, #172]	; (8003bfc <HAL_I2S_Init+0x278>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d101      	bne.n	8003b58 <HAL_I2S_Init+0x1d4>
 8003b54:	4b2a      	ldr	r3, [pc, #168]	; (8003c00 <HAL_I2S_Init+0x27c>)
 8003b56:	e001      	b.n	8003b5c <HAL_I2S_Init+0x1d8>
 8003b58:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b5c:	2202      	movs	r2, #2
 8003b5e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a25      	ldr	r2, [pc, #148]	; (8003bfc <HAL_I2S_Init+0x278>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d101      	bne.n	8003b6e <HAL_I2S_Init+0x1ea>
 8003b6a:	4b25      	ldr	r3, [pc, #148]	; (8003c00 <HAL_I2S_Init+0x27c>)
 8003b6c:	e001      	b.n	8003b72 <HAL_I2S_Init+0x1ee>
 8003b6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b72:	69db      	ldr	r3, [r3, #28]
 8003b74:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b7e:	d003      	beq.n	8003b88 <HAL_I2S_Init+0x204>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d103      	bne.n	8003b90 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003b88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b8c:	613b      	str	r3, [r7, #16]
 8003b8e:	e001      	b.n	8003b94 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003b90:	2300      	movs	r3, #0
 8003b92:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	897b      	ldrh	r3, [r7, #10]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003bc0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a0d      	ldr	r2, [pc, #52]	; (8003bfc <HAL_I2S_Init+0x278>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d101      	bne.n	8003bd0 <HAL_I2S_Init+0x24c>
 8003bcc:	4b0c      	ldr	r3, [pc, #48]	; (8003c00 <HAL_I2S_Init+0x27c>)
 8003bce:	e001      	b.n	8003bd4 <HAL_I2S_Init+0x250>
 8003bd0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bd4:	897a      	ldrh	r2, [r7, #10]
 8003bd6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3720      	adds	r7, #32
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	08003cfb 	.word	0x08003cfb
 8003bf4:	cccccccd 	.word	0xcccccccd
 8003bf8:	08003e11 	.word	0x08003e11
 8003bfc:	40003800 	.word	0x40003800
 8003c00:	40003400 	.word	0x40003400

08003c04 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4c:	881a      	ldrh	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c58:	1c9a      	adds	r2, r3, #2
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	3b01      	subs	r3, #1
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10e      	bne.n	8003c94 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c84:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7ff ffb8 	bl	8003c04 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003c94:	bf00      	nop
 8003c96:	3708      	adds	r7, #8
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68da      	ldr	r2, [r3, #12]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cae:	b292      	uxth	r2, r2
 8003cb0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb6:	1c9a      	adds	r2, r3, #2
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d10e      	bne.n	8003cf2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685a      	ldr	r2, [r3, #4]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ce2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f7ff ff93 	bl	8003c18 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003cf2:	bf00      	nop
 8003cf4:	3708      	adds	r7, #8
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b086      	sub	sp, #24
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b04      	cmp	r3, #4
 8003d14:	d13a      	bne.n	8003d8c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f003 0301 	and.w	r3, r3, #1
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d109      	bne.n	8003d34 <I2S_IRQHandler+0x3a>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d2a:	2b40      	cmp	r3, #64	; 0x40
 8003d2c:	d102      	bne.n	8003d34 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7ff ffb4 	bl	8003c9c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d3a:	2b40      	cmp	r3, #64	; 0x40
 8003d3c:	d126      	bne.n	8003d8c <I2S_IRQHandler+0x92>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f003 0320 	and.w	r3, r3, #32
 8003d48:	2b20      	cmp	r3, #32
 8003d4a:	d11f      	bne.n	8003d8c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	685a      	ldr	r2, [r3, #4]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d5a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	613b      	str	r3, [r7, #16]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	613b      	str	r3, [r7, #16]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	613b      	str	r3, [r7, #16]
 8003d70:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7e:	f043 0202 	orr.w	r2, r3, #2
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7ff ff50 	bl	8003c2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	2b03      	cmp	r3, #3
 8003d96:	d136      	bne.n	8003e06 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d109      	bne.n	8003db6 <I2S_IRQHandler+0xbc>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dac:	2b80      	cmp	r3, #128	; 0x80
 8003dae:	d102      	bne.n	8003db6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f7ff ff45 	bl	8003c40 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	f003 0308 	and.w	r3, r3, #8
 8003dbc:	2b08      	cmp	r3, #8
 8003dbe:	d122      	bne.n	8003e06 <I2S_IRQHandler+0x10c>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f003 0320 	and.w	r3, r3, #32
 8003dca:	2b20      	cmp	r3, #32
 8003dcc:	d11b      	bne.n	8003e06 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ddc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003dde:	2300      	movs	r3, #0
 8003de0:	60fb      	str	r3, [r7, #12]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	60fb      	str	r3, [r7, #12]
 8003dea:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df8:	f043 0204 	orr.w	r2, r3, #4
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f7ff ff13 	bl	8003c2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e06:	bf00      	nop
 8003e08:	3718      	adds	r7, #24
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
	...

08003e10 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b088      	sub	sp, #32
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a92      	ldr	r2, [pc, #584]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d101      	bne.n	8003e2e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003e2a:	4b92      	ldr	r3, [pc, #584]	; (8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e2c:	e001      	b.n	8003e32 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003e2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a8b      	ldr	r2, [pc, #556]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d101      	bne.n	8003e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003e48:	4b8a      	ldr	r3, [pc, #552]	; (8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e4a:	e001      	b.n	8003e50 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003e4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e5c:	d004      	beq.n	8003e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f040 8099 	bne.w	8003f9a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d107      	bne.n	8003e82 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d002      	beq.n	8003e82 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 f925 	bl	80040cc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d107      	bne.n	8003e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d002      	beq.n	8003e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 f9c8 	bl	800422c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea2:	2b40      	cmp	r3, #64	; 0x40
 8003ea4:	d13a      	bne.n	8003f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	f003 0320 	and.w	r3, r3, #32
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d035      	beq.n	8003f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a6e      	ldr	r2, [pc, #440]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d101      	bne.n	8003ebe <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003eba:	4b6e      	ldr	r3, [pc, #440]	; (8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ebc:	e001      	b.n	8003ec2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003ebe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ec2:	685a      	ldr	r2, [r3, #4]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4969      	ldr	r1, [pc, #420]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003eca:	428b      	cmp	r3, r1
 8003ecc:	d101      	bne.n	8003ed2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003ece:	4b69      	ldr	r3, [pc, #420]	; (8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ed0:	e001      	b.n	8003ed6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003ed2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ed6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003eda:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	685a      	ldr	r2, [r3, #4]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003eea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003eec:	2300      	movs	r3, #0
 8003eee:	60fb      	str	r3, [r7, #12]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	60fb      	str	r3, [r7, #12]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	60fb      	str	r3, [r7, #12]
 8003f00:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f0e:	f043 0202 	orr.w	r2, r3, #2
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f7ff fe88 	bl	8003c2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	f003 0308 	and.w	r3, r3, #8
 8003f22:	2b08      	cmp	r3, #8
 8003f24:	f040 80c3 	bne.w	80040ae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	f003 0320 	and.w	r3, r3, #32
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f000 80bd 	beq.w	80040ae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	685a      	ldr	r2, [r3, #4]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f42:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a49      	ldr	r2, [pc, #292]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d101      	bne.n	8003f52 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003f4e:	4b49      	ldr	r3, [pc, #292]	; (8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f50:	e001      	b.n	8003f56 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003f52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4944      	ldr	r1, [pc, #272]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f5e:	428b      	cmp	r3, r1
 8003f60:	d101      	bne.n	8003f66 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003f62:	4b44      	ldr	r3, [pc, #272]	; (8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f64:	e001      	b.n	8003f6a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003f66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f6a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f6e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003f70:	2300      	movs	r3, #0
 8003f72:	60bb      	str	r3, [r7, #8]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	60bb      	str	r3, [r7, #8]
 8003f7c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8a:	f043 0204 	orr.w	r2, r3, #4
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f7ff fe4a 	bl	8003c2c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f98:	e089      	b.n	80040ae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d107      	bne.n	8003fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d002      	beq.n	8003fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 f8be 	bl	8004130 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d107      	bne.n	8003fce <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d002      	beq.n	8003fce <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 f8fd 	bl	80041c8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd4:	2b40      	cmp	r3, #64	; 0x40
 8003fd6:	d12f      	bne.n	8004038 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	f003 0320 	and.w	r3, r3, #32
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d02a      	beq.n	8004038 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ff0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a1e      	ldr	r2, [pc, #120]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d101      	bne.n	8004000 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003ffc:	4b1d      	ldr	r3, [pc, #116]	; (8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ffe:	e001      	b.n	8004004 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004000:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4919      	ldr	r1, [pc, #100]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800400c:	428b      	cmp	r3, r1
 800400e:	d101      	bne.n	8004014 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004010:	4b18      	ldr	r3, [pc, #96]	; (8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004012:	e001      	b.n	8004018 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004014:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004018:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800401c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402a:	f043 0202 	orr.w	r2, r3, #2
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f7ff fdfa 	bl	8003c2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	f003 0308 	and.w	r3, r3, #8
 800403e:	2b08      	cmp	r3, #8
 8004040:	d136      	bne.n	80040b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	f003 0320 	and.w	r3, r3, #32
 8004048:	2b00      	cmp	r3, #0
 800404a:	d031      	beq.n	80040b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a07      	ldr	r2, [pc, #28]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d101      	bne.n	800405a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004056:	4b07      	ldr	r3, [pc, #28]	; (8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004058:	e001      	b.n	800405e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800405a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800405e:	685a      	ldr	r2, [r3, #4]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4902      	ldr	r1, [pc, #8]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004066:	428b      	cmp	r3, r1
 8004068:	d106      	bne.n	8004078 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800406a:	4b02      	ldr	r3, [pc, #8]	; (8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800406c:	e006      	b.n	800407c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800406e:	bf00      	nop
 8004070:	40003800 	.word	0x40003800
 8004074:	40003400 	.word	0x40003400
 8004078:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800407c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004080:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004090:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2201      	movs	r2, #1
 8004096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800409e:	f043 0204 	orr.w	r2, r3, #4
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7ff fdc0 	bl	8003c2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040ac:	e000      	b.n	80040b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80040ae:	bf00      	nop
}
 80040b0:	bf00      	nop
 80040b2:	3720      	adds	r7, #32
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d8:	1c99      	adds	r1, r3, #2
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	6251      	str	r1, [r2, #36]	; 0x24
 80040de:	881a      	ldrh	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	3b01      	subs	r3, #1
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d113      	bne.n	8004126 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800410c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004112:	b29b      	uxth	r3, r3
 8004114:	2b00      	cmp	r3, #0
 8004116:	d106      	bne.n	8004126 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f7ff ffc9 	bl	80040b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004126:	bf00      	nop
 8004128:	3708      	adds	r7, #8
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
	...

08004130 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413c:	1c99      	adds	r1, r3, #2
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	6251      	str	r1, [r2, #36]	; 0x24
 8004142:	8819      	ldrh	r1, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a1d      	ldr	r2, [pc, #116]	; (80041c0 <I2SEx_TxISR_I2SExt+0x90>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d101      	bne.n	8004152 <I2SEx_TxISR_I2SExt+0x22>
 800414e:	4b1d      	ldr	r3, [pc, #116]	; (80041c4 <I2SEx_TxISR_I2SExt+0x94>)
 8004150:	e001      	b.n	8004156 <I2SEx_TxISR_I2SExt+0x26>
 8004152:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004156:	460a      	mov	r2, r1
 8004158:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800415e:	b29b      	uxth	r3, r3
 8004160:	3b01      	subs	r3, #1
 8004162:	b29a      	uxth	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800416c:	b29b      	uxth	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d121      	bne.n	80041b6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a12      	ldr	r2, [pc, #72]	; (80041c0 <I2SEx_TxISR_I2SExt+0x90>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d101      	bne.n	8004180 <I2SEx_TxISR_I2SExt+0x50>
 800417c:	4b11      	ldr	r3, [pc, #68]	; (80041c4 <I2SEx_TxISR_I2SExt+0x94>)
 800417e:	e001      	b.n	8004184 <I2SEx_TxISR_I2SExt+0x54>
 8004180:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004184:	685a      	ldr	r2, [r3, #4]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	490d      	ldr	r1, [pc, #52]	; (80041c0 <I2SEx_TxISR_I2SExt+0x90>)
 800418c:	428b      	cmp	r3, r1
 800418e:	d101      	bne.n	8004194 <I2SEx_TxISR_I2SExt+0x64>
 8004190:	4b0c      	ldr	r3, [pc, #48]	; (80041c4 <I2SEx_TxISR_I2SExt+0x94>)
 8004192:	e001      	b.n	8004198 <I2SEx_TxISR_I2SExt+0x68>
 8004194:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004198:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800419c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d106      	bne.n	80041b6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f7ff ff81 	bl	80040b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041b6:	bf00      	nop
 80041b8:	3708      	adds	r7, #8
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	40003800 	.word	0x40003800
 80041c4:	40003400 	.word	0x40003400

080041c8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68d8      	ldr	r0, [r3, #12]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041da:	1c99      	adds	r1, r3, #2
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	62d1      	str	r1, [r2, #44]	; 0x2c
 80041e0:	b282      	uxth	r2, r0
 80041e2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	3b01      	subs	r3, #1
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d113      	bne.n	8004224 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	685a      	ldr	r2, [r3, #4]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800420a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004210:	b29b      	uxth	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d106      	bne.n	8004224 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2201      	movs	r2, #1
 800421a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7ff ff4a 	bl	80040b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004224:	bf00      	nop
 8004226:	3708      	adds	r7, #8
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a20      	ldr	r2, [pc, #128]	; (80042bc <I2SEx_RxISR_I2SExt+0x90>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d101      	bne.n	8004242 <I2SEx_RxISR_I2SExt+0x16>
 800423e:	4b20      	ldr	r3, [pc, #128]	; (80042c0 <I2SEx_RxISR_I2SExt+0x94>)
 8004240:	e001      	b.n	8004246 <I2SEx_RxISR_I2SExt+0x1a>
 8004242:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004246:	68d8      	ldr	r0, [r3, #12]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424c:	1c99      	adds	r1, r3, #2
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004252:	b282      	uxth	r2, r0
 8004254:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800425a:	b29b      	uxth	r3, r3
 800425c:	3b01      	subs	r3, #1
 800425e:	b29a      	uxth	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004268:	b29b      	uxth	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d121      	bne.n	80042b2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a12      	ldr	r2, [pc, #72]	; (80042bc <I2SEx_RxISR_I2SExt+0x90>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d101      	bne.n	800427c <I2SEx_RxISR_I2SExt+0x50>
 8004278:	4b11      	ldr	r3, [pc, #68]	; (80042c0 <I2SEx_RxISR_I2SExt+0x94>)
 800427a:	e001      	b.n	8004280 <I2SEx_RxISR_I2SExt+0x54>
 800427c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004280:	685a      	ldr	r2, [r3, #4]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	490d      	ldr	r1, [pc, #52]	; (80042bc <I2SEx_RxISR_I2SExt+0x90>)
 8004288:	428b      	cmp	r3, r1
 800428a:	d101      	bne.n	8004290 <I2SEx_RxISR_I2SExt+0x64>
 800428c:	4b0c      	ldr	r3, [pc, #48]	; (80042c0 <I2SEx_RxISR_I2SExt+0x94>)
 800428e:	e001      	b.n	8004294 <I2SEx_RxISR_I2SExt+0x68>
 8004290:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004294:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004298:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800429e:	b29b      	uxth	r3, r3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d106      	bne.n	80042b2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f7ff ff03 	bl	80040b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042b2:	bf00      	nop
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	40003800 	.word	0x40003800
 80042c0:	40003400 	.word	0x40003400

080042c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e267      	b.n	80047a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d075      	beq.n	80043ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042e2:	4b88      	ldr	r3, [pc, #544]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f003 030c 	and.w	r3, r3, #12
 80042ea:	2b04      	cmp	r3, #4
 80042ec:	d00c      	beq.n	8004308 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042ee:	4b85      	ldr	r3, [pc, #532]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042f6:	2b08      	cmp	r3, #8
 80042f8:	d112      	bne.n	8004320 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042fa:	4b82      	ldr	r3, [pc, #520]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004302:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004306:	d10b      	bne.n	8004320 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004308:	4b7e      	ldr	r3, [pc, #504]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d05b      	beq.n	80043cc <HAL_RCC_OscConfig+0x108>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d157      	bne.n	80043cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e242      	b.n	80047a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004328:	d106      	bne.n	8004338 <HAL_RCC_OscConfig+0x74>
 800432a:	4b76      	ldr	r3, [pc, #472]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a75      	ldr	r2, [pc, #468]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 8004330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004334:	6013      	str	r3, [r2, #0]
 8004336:	e01d      	b.n	8004374 <HAL_RCC_OscConfig+0xb0>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004340:	d10c      	bne.n	800435c <HAL_RCC_OscConfig+0x98>
 8004342:	4b70      	ldr	r3, [pc, #448]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a6f      	ldr	r2, [pc, #444]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 8004348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800434c:	6013      	str	r3, [r2, #0]
 800434e:	4b6d      	ldr	r3, [pc, #436]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a6c      	ldr	r2, [pc, #432]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 8004354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004358:	6013      	str	r3, [r2, #0]
 800435a:	e00b      	b.n	8004374 <HAL_RCC_OscConfig+0xb0>
 800435c:	4b69      	ldr	r3, [pc, #420]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a68      	ldr	r2, [pc, #416]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 8004362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004366:	6013      	str	r3, [r2, #0]
 8004368:	4b66      	ldr	r3, [pc, #408]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a65      	ldr	r2, [pc, #404]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 800436e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004372:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d013      	beq.n	80043a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800437c:	f7fd fad4 	bl	8001928 <HAL_GetTick>
 8004380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004384:	f7fd fad0 	bl	8001928 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b64      	cmp	r3, #100	; 0x64
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e207      	b.n	80047a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004396:	4b5b      	ldr	r3, [pc, #364]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d0f0      	beq.n	8004384 <HAL_RCC_OscConfig+0xc0>
 80043a2:	e014      	b.n	80043ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a4:	f7fd fac0 	bl	8001928 <HAL_GetTick>
 80043a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043aa:	e008      	b.n	80043be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043ac:	f7fd fabc 	bl	8001928 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b64      	cmp	r3, #100	; 0x64
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e1f3      	b.n	80047a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043be:	4b51      	ldr	r3, [pc, #324]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1f0      	bne.n	80043ac <HAL_RCC_OscConfig+0xe8>
 80043ca:	e000      	b.n	80043ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d063      	beq.n	80044a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043da:	4b4a      	ldr	r3, [pc, #296]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f003 030c 	and.w	r3, r3, #12
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00b      	beq.n	80043fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043e6:	4b47      	ldr	r3, [pc, #284]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043ee:	2b08      	cmp	r3, #8
 80043f0:	d11c      	bne.n	800442c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043f2:	4b44      	ldr	r3, [pc, #272]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d116      	bne.n	800442c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043fe:	4b41      	ldr	r3, [pc, #260]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d005      	beq.n	8004416 <HAL_RCC_OscConfig+0x152>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d001      	beq.n	8004416 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e1c7      	b.n	80047a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004416:	4b3b      	ldr	r3, [pc, #236]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	00db      	lsls	r3, r3, #3
 8004424:	4937      	ldr	r1, [pc, #220]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 8004426:	4313      	orrs	r3, r2
 8004428:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800442a:	e03a      	b.n	80044a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d020      	beq.n	8004476 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004434:	4b34      	ldr	r3, [pc, #208]	; (8004508 <HAL_RCC_OscConfig+0x244>)
 8004436:	2201      	movs	r2, #1
 8004438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800443a:	f7fd fa75 	bl	8001928 <HAL_GetTick>
 800443e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004440:	e008      	b.n	8004454 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004442:	f7fd fa71 	bl	8001928 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d901      	bls.n	8004454 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e1a8      	b.n	80047a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004454:	4b2b      	ldr	r3, [pc, #172]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d0f0      	beq.n	8004442 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004460:	4b28      	ldr	r3, [pc, #160]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	00db      	lsls	r3, r3, #3
 800446e:	4925      	ldr	r1, [pc, #148]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 8004470:	4313      	orrs	r3, r2
 8004472:	600b      	str	r3, [r1, #0]
 8004474:	e015      	b.n	80044a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004476:	4b24      	ldr	r3, [pc, #144]	; (8004508 <HAL_RCC_OscConfig+0x244>)
 8004478:	2200      	movs	r2, #0
 800447a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800447c:	f7fd fa54 	bl	8001928 <HAL_GetTick>
 8004480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004482:	e008      	b.n	8004496 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004484:	f7fd fa50 	bl	8001928 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e187      	b.n	80047a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004496:	4b1b      	ldr	r3, [pc, #108]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1f0      	bne.n	8004484 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0308 	and.w	r3, r3, #8
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d036      	beq.n	800451c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d016      	beq.n	80044e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044b6:	4b15      	ldr	r3, [pc, #84]	; (800450c <HAL_RCC_OscConfig+0x248>)
 80044b8:	2201      	movs	r2, #1
 80044ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044bc:	f7fd fa34 	bl	8001928 <HAL_GetTick>
 80044c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044c2:	e008      	b.n	80044d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044c4:	f7fd fa30 	bl	8001928 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e167      	b.n	80047a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044d6:	4b0b      	ldr	r3, [pc, #44]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 80044d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d0f0      	beq.n	80044c4 <HAL_RCC_OscConfig+0x200>
 80044e2:	e01b      	b.n	800451c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044e4:	4b09      	ldr	r3, [pc, #36]	; (800450c <HAL_RCC_OscConfig+0x248>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044ea:	f7fd fa1d 	bl	8001928 <HAL_GetTick>
 80044ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044f0:	e00e      	b.n	8004510 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044f2:	f7fd fa19 	bl	8001928 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d907      	bls.n	8004510 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e150      	b.n	80047a6 <HAL_RCC_OscConfig+0x4e2>
 8004504:	40023800 	.word	0x40023800
 8004508:	42470000 	.word	0x42470000
 800450c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004510:	4b88      	ldr	r3, [pc, #544]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 8004512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004514:	f003 0302 	and.w	r3, r3, #2
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1ea      	bne.n	80044f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0304 	and.w	r3, r3, #4
 8004524:	2b00      	cmp	r3, #0
 8004526:	f000 8097 	beq.w	8004658 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800452a:	2300      	movs	r3, #0
 800452c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800452e:	4b81      	ldr	r3, [pc, #516]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 8004530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10f      	bne.n	800455a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800453a:	2300      	movs	r3, #0
 800453c:	60bb      	str	r3, [r7, #8]
 800453e:	4b7d      	ldr	r3, [pc, #500]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 8004540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004542:	4a7c      	ldr	r2, [pc, #496]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 8004544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004548:	6413      	str	r3, [r2, #64]	; 0x40
 800454a:	4b7a      	ldr	r3, [pc, #488]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 800454c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004552:	60bb      	str	r3, [r7, #8]
 8004554:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004556:	2301      	movs	r3, #1
 8004558:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800455a:	4b77      	ldr	r3, [pc, #476]	; (8004738 <HAL_RCC_OscConfig+0x474>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004562:	2b00      	cmp	r3, #0
 8004564:	d118      	bne.n	8004598 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004566:	4b74      	ldr	r3, [pc, #464]	; (8004738 <HAL_RCC_OscConfig+0x474>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a73      	ldr	r2, [pc, #460]	; (8004738 <HAL_RCC_OscConfig+0x474>)
 800456c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004570:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004572:	f7fd f9d9 	bl	8001928 <HAL_GetTick>
 8004576:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004578:	e008      	b.n	800458c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800457a:	f7fd f9d5 	bl	8001928 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	2b02      	cmp	r3, #2
 8004586:	d901      	bls.n	800458c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e10c      	b.n	80047a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800458c:	4b6a      	ldr	r3, [pc, #424]	; (8004738 <HAL_RCC_OscConfig+0x474>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004594:	2b00      	cmp	r3, #0
 8004596:	d0f0      	beq.n	800457a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d106      	bne.n	80045ae <HAL_RCC_OscConfig+0x2ea>
 80045a0:	4b64      	ldr	r3, [pc, #400]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 80045a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a4:	4a63      	ldr	r2, [pc, #396]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 80045a6:	f043 0301 	orr.w	r3, r3, #1
 80045aa:	6713      	str	r3, [r2, #112]	; 0x70
 80045ac:	e01c      	b.n	80045e8 <HAL_RCC_OscConfig+0x324>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	2b05      	cmp	r3, #5
 80045b4:	d10c      	bne.n	80045d0 <HAL_RCC_OscConfig+0x30c>
 80045b6:	4b5f      	ldr	r3, [pc, #380]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 80045b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ba:	4a5e      	ldr	r2, [pc, #376]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 80045bc:	f043 0304 	orr.w	r3, r3, #4
 80045c0:	6713      	str	r3, [r2, #112]	; 0x70
 80045c2:	4b5c      	ldr	r3, [pc, #368]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 80045c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c6:	4a5b      	ldr	r2, [pc, #364]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 80045c8:	f043 0301 	orr.w	r3, r3, #1
 80045cc:	6713      	str	r3, [r2, #112]	; 0x70
 80045ce:	e00b      	b.n	80045e8 <HAL_RCC_OscConfig+0x324>
 80045d0:	4b58      	ldr	r3, [pc, #352]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 80045d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d4:	4a57      	ldr	r2, [pc, #348]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 80045d6:	f023 0301 	bic.w	r3, r3, #1
 80045da:	6713      	str	r3, [r2, #112]	; 0x70
 80045dc:	4b55      	ldr	r3, [pc, #340]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 80045de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e0:	4a54      	ldr	r2, [pc, #336]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 80045e2:	f023 0304 	bic.w	r3, r3, #4
 80045e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d015      	beq.n	800461c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f0:	f7fd f99a 	bl	8001928 <HAL_GetTick>
 80045f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045f6:	e00a      	b.n	800460e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045f8:	f7fd f996 	bl	8001928 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	f241 3288 	movw	r2, #5000	; 0x1388
 8004606:	4293      	cmp	r3, r2
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e0cb      	b.n	80047a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800460e:	4b49      	ldr	r3, [pc, #292]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 8004610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d0ee      	beq.n	80045f8 <HAL_RCC_OscConfig+0x334>
 800461a:	e014      	b.n	8004646 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800461c:	f7fd f984 	bl	8001928 <HAL_GetTick>
 8004620:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004622:	e00a      	b.n	800463a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004624:	f7fd f980 	bl	8001928 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004632:	4293      	cmp	r3, r2
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e0b5      	b.n	80047a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800463a:	4b3e      	ldr	r3, [pc, #248]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 800463c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1ee      	bne.n	8004624 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004646:	7dfb      	ldrb	r3, [r7, #23]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d105      	bne.n	8004658 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800464c:	4b39      	ldr	r3, [pc, #228]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 800464e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004650:	4a38      	ldr	r2, [pc, #224]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 8004652:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004656:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	699b      	ldr	r3, [r3, #24]
 800465c:	2b00      	cmp	r3, #0
 800465e:	f000 80a1 	beq.w	80047a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004662:	4b34      	ldr	r3, [pc, #208]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f003 030c 	and.w	r3, r3, #12
 800466a:	2b08      	cmp	r3, #8
 800466c:	d05c      	beq.n	8004728 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	2b02      	cmp	r3, #2
 8004674:	d141      	bne.n	80046fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004676:	4b31      	ldr	r3, [pc, #196]	; (800473c <HAL_RCC_OscConfig+0x478>)
 8004678:	2200      	movs	r2, #0
 800467a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800467c:	f7fd f954 	bl	8001928 <HAL_GetTick>
 8004680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004682:	e008      	b.n	8004696 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004684:	f7fd f950 	bl	8001928 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b02      	cmp	r3, #2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e087      	b.n	80047a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004696:	4b27      	ldr	r3, [pc, #156]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1f0      	bne.n	8004684 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	69da      	ldr	r2, [r3, #28]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	431a      	orrs	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b0:	019b      	lsls	r3, r3, #6
 80046b2:	431a      	orrs	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b8:	085b      	lsrs	r3, r3, #1
 80046ba:	3b01      	subs	r3, #1
 80046bc:	041b      	lsls	r3, r3, #16
 80046be:	431a      	orrs	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c4:	061b      	lsls	r3, r3, #24
 80046c6:	491b      	ldr	r1, [pc, #108]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046cc:	4b1b      	ldr	r3, [pc, #108]	; (800473c <HAL_RCC_OscConfig+0x478>)
 80046ce:	2201      	movs	r2, #1
 80046d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d2:	f7fd f929 	bl	8001928 <HAL_GetTick>
 80046d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046d8:	e008      	b.n	80046ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046da:	f7fd f925 	bl	8001928 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d901      	bls.n	80046ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e05c      	b.n	80047a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ec:	4b11      	ldr	r3, [pc, #68]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d0f0      	beq.n	80046da <HAL_RCC_OscConfig+0x416>
 80046f8:	e054      	b.n	80047a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046fa:	4b10      	ldr	r3, [pc, #64]	; (800473c <HAL_RCC_OscConfig+0x478>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004700:	f7fd f912 	bl	8001928 <HAL_GetTick>
 8004704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004706:	e008      	b.n	800471a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004708:	f7fd f90e 	bl	8001928 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b02      	cmp	r3, #2
 8004714:	d901      	bls.n	800471a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e045      	b.n	80047a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800471a:	4b06      	ldr	r3, [pc, #24]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1f0      	bne.n	8004708 <HAL_RCC_OscConfig+0x444>
 8004726:	e03d      	b.n	80047a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d107      	bne.n	8004740 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e038      	b.n	80047a6 <HAL_RCC_OscConfig+0x4e2>
 8004734:	40023800 	.word	0x40023800
 8004738:	40007000 	.word	0x40007000
 800473c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004740:	4b1b      	ldr	r3, [pc, #108]	; (80047b0 <HAL_RCC_OscConfig+0x4ec>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d028      	beq.n	80047a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004758:	429a      	cmp	r2, r3
 800475a:	d121      	bne.n	80047a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004766:	429a      	cmp	r2, r3
 8004768:	d11a      	bne.n	80047a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004770:	4013      	ands	r3, r2
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004776:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004778:	4293      	cmp	r3, r2
 800477a:	d111      	bne.n	80047a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004786:	085b      	lsrs	r3, r3, #1
 8004788:	3b01      	subs	r3, #1
 800478a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800478c:	429a      	cmp	r2, r3
 800478e:	d107      	bne.n	80047a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800479c:	429a      	cmp	r2, r3
 800479e:	d001      	beq.n	80047a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e000      	b.n	80047a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3718      	adds	r7, #24
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	40023800 	.word	0x40023800

080047b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d101      	bne.n	80047c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e0cc      	b.n	8004962 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047c8:	4b68      	ldr	r3, [pc, #416]	; (800496c <HAL_RCC_ClockConfig+0x1b8>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0307 	and.w	r3, r3, #7
 80047d0:	683a      	ldr	r2, [r7, #0]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d90c      	bls.n	80047f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047d6:	4b65      	ldr	r3, [pc, #404]	; (800496c <HAL_RCC_ClockConfig+0x1b8>)
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	b2d2      	uxtb	r2, r2
 80047dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047de:	4b63      	ldr	r3, [pc, #396]	; (800496c <HAL_RCC_ClockConfig+0x1b8>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0307 	and.w	r3, r3, #7
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d001      	beq.n	80047f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e0b8      	b.n	8004962 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d020      	beq.n	800483e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0304 	and.w	r3, r3, #4
 8004804:	2b00      	cmp	r3, #0
 8004806:	d005      	beq.n	8004814 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004808:	4b59      	ldr	r3, [pc, #356]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	4a58      	ldr	r2, [pc, #352]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 800480e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004812:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0308 	and.w	r3, r3, #8
 800481c:	2b00      	cmp	r3, #0
 800481e:	d005      	beq.n	800482c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004820:	4b53      	ldr	r3, [pc, #332]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	4a52      	ldr	r2, [pc, #328]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 8004826:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800482a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800482c:	4b50      	ldr	r3, [pc, #320]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	494d      	ldr	r1, [pc, #308]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 800483a:	4313      	orrs	r3, r2
 800483c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	2b00      	cmp	r3, #0
 8004848:	d044      	beq.n	80048d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d107      	bne.n	8004862 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004852:	4b47      	ldr	r3, [pc, #284]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d119      	bne.n	8004892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e07f      	b.n	8004962 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	2b02      	cmp	r3, #2
 8004868:	d003      	beq.n	8004872 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800486e:	2b03      	cmp	r3, #3
 8004870:	d107      	bne.n	8004882 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004872:	4b3f      	ldr	r3, [pc, #252]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d109      	bne.n	8004892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e06f      	b.n	8004962 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004882:	4b3b      	ldr	r3, [pc, #236]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0302 	and.w	r3, r3, #2
 800488a:	2b00      	cmp	r3, #0
 800488c:	d101      	bne.n	8004892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e067      	b.n	8004962 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004892:	4b37      	ldr	r3, [pc, #220]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f023 0203 	bic.w	r2, r3, #3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	4934      	ldr	r1, [pc, #208]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048a4:	f7fd f840 	bl	8001928 <HAL_GetTick>
 80048a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048aa:	e00a      	b.n	80048c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048ac:	f7fd f83c 	bl	8001928 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e04f      	b.n	8004962 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048c2:	4b2b      	ldr	r3, [pc, #172]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f003 020c 	and.w	r2, r3, #12
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d1eb      	bne.n	80048ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048d4:	4b25      	ldr	r3, [pc, #148]	; (800496c <HAL_RCC_ClockConfig+0x1b8>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0307 	and.w	r3, r3, #7
 80048dc:	683a      	ldr	r2, [r7, #0]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d20c      	bcs.n	80048fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048e2:	4b22      	ldr	r3, [pc, #136]	; (800496c <HAL_RCC_ClockConfig+0x1b8>)
 80048e4:	683a      	ldr	r2, [r7, #0]
 80048e6:	b2d2      	uxtb	r2, r2
 80048e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ea:	4b20      	ldr	r3, [pc, #128]	; (800496c <HAL_RCC_ClockConfig+0x1b8>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0307 	and.w	r3, r3, #7
 80048f2:	683a      	ldr	r2, [r7, #0]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d001      	beq.n	80048fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e032      	b.n	8004962 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0304 	and.w	r3, r3, #4
 8004904:	2b00      	cmp	r3, #0
 8004906:	d008      	beq.n	800491a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004908:	4b19      	ldr	r3, [pc, #100]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	4916      	ldr	r1, [pc, #88]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 8004916:	4313      	orrs	r3, r2
 8004918:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0308 	and.w	r3, r3, #8
 8004922:	2b00      	cmp	r3, #0
 8004924:	d009      	beq.n	800493a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004926:	4b12      	ldr	r3, [pc, #72]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	00db      	lsls	r3, r3, #3
 8004934:	490e      	ldr	r1, [pc, #56]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 8004936:	4313      	orrs	r3, r2
 8004938:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800493a:	f000 f821 	bl	8004980 <HAL_RCC_GetSysClockFreq>
 800493e:	4602      	mov	r2, r0
 8004940:	4b0b      	ldr	r3, [pc, #44]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	091b      	lsrs	r3, r3, #4
 8004946:	f003 030f 	and.w	r3, r3, #15
 800494a:	490a      	ldr	r1, [pc, #40]	; (8004974 <HAL_RCC_ClockConfig+0x1c0>)
 800494c:	5ccb      	ldrb	r3, [r1, r3]
 800494e:	fa22 f303 	lsr.w	r3, r2, r3
 8004952:	4a09      	ldr	r2, [pc, #36]	; (8004978 <HAL_RCC_ClockConfig+0x1c4>)
 8004954:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004956:	4b09      	ldr	r3, [pc, #36]	; (800497c <HAL_RCC_ClockConfig+0x1c8>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4618      	mov	r0, r3
 800495c:	f7fc fb32 	bl	8000fc4 <HAL_InitTick>

  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3710      	adds	r7, #16
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	40023c00 	.word	0x40023c00
 8004970:	40023800 	.word	0x40023800
 8004974:	0800cfd0 	.word	0x0800cfd0
 8004978:	20000000 	.word	0x20000000
 800497c:	20000004 	.word	0x20000004

08004980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004980:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004984:	b094      	sub	sp, #80	; 0x50
 8004986:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004988:	2300      	movs	r3, #0
 800498a:	647b      	str	r3, [r7, #68]	; 0x44
 800498c:	2300      	movs	r3, #0
 800498e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004990:	2300      	movs	r3, #0
 8004992:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004994:	2300      	movs	r3, #0
 8004996:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004998:	4b79      	ldr	r3, [pc, #484]	; (8004b80 <HAL_RCC_GetSysClockFreq+0x200>)
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f003 030c 	and.w	r3, r3, #12
 80049a0:	2b08      	cmp	r3, #8
 80049a2:	d00d      	beq.n	80049c0 <HAL_RCC_GetSysClockFreq+0x40>
 80049a4:	2b08      	cmp	r3, #8
 80049a6:	f200 80e1 	bhi.w	8004b6c <HAL_RCC_GetSysClockFreq+0x1ec>
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d002      	beq.n	80049b4 <HAL_RCC_GetSysClockFreq+0x34>
 80049ae:	2b04      	cmp	r3, #4
 80049b0:	d003      	beq.n	80049ba <HAL_RCC_GetSysClockFreq+0x3a>
 80049b2:	e0db      	b.n	8004b6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049b4:	4b73      	ldr	r3, [pc, #460]	; (8004b84 <HAL_RCC_GetSysClockFreq+0x204>)
 80049b6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80049b8:	e0db      	b.n	8004b72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049ba:	4b73      	ldr	r3, [pc, #460]	; (8004b88 <HAL_RCC_GetSysClockFreq+0x208>)
 80049bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049be:	e0d8      	b.n	8004b72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049c0:	4b6f      	ldr	r3, [pc, #444]	; (8004b80 <HAL_RCC_GetSysClockFreq+0x200>)
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049c8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049ca:	4b6d      	ldr	r3, [pc, #436]	; (8004b80 <HAL_RCC_GetSysClockFreq+0x200>)
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d063      	beq.n	8004a9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049d6:	4b6a      	ldr	r3, [pc, #424]	; (8004b80 <HAL_RCC_GetSysClockFreq+0x200>)
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	099b      	lsrs	r3, r3, #6
 80049dc:	2200      	movs	r2, #0
 80049de:	63bb      	str	r3, [r7, #56]	; 0x38
 80049e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80049e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049e8:	633b      	str	r3, [r7, #48]	; 0x30
 80049ea:	2300      	movs	r3, #0
 80049ec:	637b      	str	r3, [r7, #52]	; 0x34
 80049ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80049f2:	4622      	mov	r2, r4
 80049f4:	462b      	mov	r3, r5
 80049f6:	f04f 0000 	mov.w	r0, #0
 80049fa:	f04f 0100 	mov.w	r1, #0
 80049fe:	0159      	lsls	r1, r3, #5
 8004a00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a04:	0150      	lsls	r0, r2, #5
 8004a06:	4602      	mov	r2, r0
 8004a08:	460b      	mov	r3, r1
 8004a0a:	4621      	mov	r1, r4
 8004a0c:	1a51      	subs	r1, r2, r1
 8004a0e:	6139      	str	r1, [r7, #16]
 8004a10:	4629      	mov	r1, r5
 8004a12:	eb63 0301 	sbc.w	r3, r3, r1
 8004a16:	617b      	str	r3, [r7, #20]
 8004a18:	f04f 0200 	mov.w	r2, #0
 8004a1c:	f04f 0300 	mov.w	r3, #0
 8004a20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a24:	4659      	mov	r1, fp
 8004a26:	018b      	lsls	r3, r1, #6
 8004a28:	4651      	mov	r1, sl
 8004a2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a2e:	4651      	mov	r1, sl
 8004a30:	018a      	lsls	r2, r1, #6
 8004a32:	4651      	mov	r1, sl
 8004a34:	ebb2 0801 	subs.w	r8, r2, r1
 8004a38:	4659      	mov	r1, fp
 8004a3a:	eb63 0901 	sbc.w	r9, r3, r1
 8004a3e:	f04f 0200 	mov.w	r2, #0
 8004a42:	f04f 0300 	mov.w	r3, #0
 8004a46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a52:	4690      	mov	r8, r2
 8004a54:	4699      	mov	r9, r3
 8004a56:	4623      	mov	r3, r4
 8004a58:	eb18 0303 	adds.w	r3, r8, r3
 8004a5c:	60bb      	str	r3, [r7, #8]
 8004a5e:	462b      	mov	r3, r5
 8004a60:	eb49 0303 	adc.w	r3, r9, r3
 8004a64:	60fb      	str	r3, [r7, #12]
 8004a66:	f04f 0200 	mov.w	r2, #0
 8004a6a:	f04f 0300 	mov.w	r3, #0
 8004a6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a72:	4629      	mov	r1, r5
 8004a74:	024b      	lsls	r3, r1, #9
 8004a76:	4621      	mov	r1, r4
 8004a78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a7c:	4621      	mov	r1, r4
 8004a7e:	024a      	lsls	r2, r1, #9
 8004a80:	4610      	mov	r0, r2
 8004a82:	4619      	mov	r1, r3
 8004a84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a86:	2200      	movs	r2, #0
 8004a88:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a90:	f7fb fb9e 	bl	80001d0 <__aeabi_uldivmod>
 8004a94:	4602      	mov	r2, r0
 8004a96:	460b      	mov	r3, r1
 8004a98:	4613      	mov	r3, r2
 8004a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a9c:	e058      	b.n	8004b50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a9e:	4b38      	ldr	r3, [pc, #224]	; (8004b80 <HAL_RCC_GetSysClockFreq+0x200>)
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	099b      	lsrs	r3, r3, #6
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	4611      	mov	r1, r2
 8004aaa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004aae:	623b      	str	r3, [r7, #32]
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ab4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ab8:	4642      	mov	r2, r8
 8004aba:	464b      	mov	r3, r9
 8004abc:	f04f 0000 	mov.w	r0, #0
 8004ac0:	f04f 0100 	mov.w	r1, #0
 8004ac4:	0159      	lsls	r1, r3, #5
 8004ac6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004aca:	0150      	lsls	r0, r2, #5
 8004acc:	4602      	mov	r2, r0
 8004ace:	460b      	mov	r3, r1
 8004ad0:	4641      	mov	r1, r8
 8004ad2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ad6:	4649      	mov	r1, r9
 8004ad8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004adc:	f04f 0200 	mov.w	r2, #0
 8004ae0:	f04f 0300 	mov.w	r3, #0
 8004ae4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ae8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004aec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004af0:	ebb2 040a 	subs.w	r4, r2, sl
 8004af4:	eb63 050b 	sbc.w	r5, r3, fp
 8004af8:	f04f 0200 	mov.w	r2, #0
 8004afc:	f04f 0300 	mov.w	r3, #0
 8004b00:	00eb      	lsls	r3, r5, #3
 8004b02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b06:	00e2      	lsls	r2, r4, #3
 8004b08:	4614      	mov	r4, r2
 8004b0a:	461d      	mov	r5, r3
 8004b0c:	4643      	mov	r3, r8
 8004b0e:	18e3      	adds	r3, r4, r3
 8004b10:	603b      	str	r3, [r7, #0]
 8004b12:	464b      	mov	r3, r9
 8004b14:	eb45 0303 	adc.w	r3, r5, r3
 8004b18:	607b      	str	r3, [r7, #4]
 8004b1a:	f04f 0200 	mov.w	r2, #0
 8004b1e:	f04f 0300 	mov.w	r3, #0
 8004b22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b26:	4629      	mov	r1, r5
 8004b28:	028b      	lsls	r3, r1, #10
 8004b2a:	4621      	mov	r1, r4
 8004b2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b30:	4621      	mov	r1, r4
 8004b32:	028a      	lsls	r2, r1, #10
 8004b34:	4610      	mov	r0, r2
 8004b36:	4619      	mov	r1, r3
 8004b38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	61bb      	str	r3, [r7, #24]
 8004b3e:	61fa      	str	r2, [r7, #28]
 8004b40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b44:	f7fb fb44 	bl	80001d0 <__aeabi_uldivmod>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	460b      	mov	r3, r1
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b50:	4b0b      	ldr	r3, [pc, #44]	; (8004b80 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	0c1b      	lsrs	r3, r3, #16
 8004b56:	f003 0303 	and.w	r3, r3, #3
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	005b      	lsls	r3, r3, #1
 8004b5e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004b60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b6a:	e002      	b.n	8004b72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b6c:	4b05      	ldr	r3, [pc, #20]	; (8004b84 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b6e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3750      	adds	r7, #80	; 0x50
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b7e:	bf00      	nop
 8004b80:	40023800 	.word	0x40023800
 8004b84:	00f42400 	.word	0x00f42400
 8004b88:	007a1200 	.word	0x007a1200

08004b8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b90:	4b03      	ldr	r3, [pc, #12]	; (8004ba0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b92:	681b      	ldr	r3, [r3, #0]
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	20000000 	.word	0x20000000

08004ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ba8:	f7ff fff0 	bl	8004b8c <HAL_RCC_GetHCLKFreq>
 8004bac:	4602      	mov	r2, r0
 8004bae:	4b05      	ldr	r3, [pc, #20]	; (8004bc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	0a9b      	lsrs	r3, r3, #10
 8004bb4:	f003 0307 	and.w	r3, r3, #7
 8004bb8:	4903      	ldr	r1, [pc, #12]	; (8004bc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bba:	5ccb      	ldrb	r3, [r1, r3]
 8004bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	40023800 	.word	0x40023800
 8004bc8:	0800cfe0 	.word	0x0800cfe0

08004bcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004bd0:	f7ff ffdc 	bl	8004b8c <HAL_RCC_GetHCLKFreq>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	4b05      	ldr	r3, [pc, #20]	; (8004bec <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	0b5b      	lsrs	r3, r3, #13
 8004bdc:	f003 0307 	and.w	r3, r3, #7
 8004be0:	4903      	ldr	r1, [pc, #12]	; (8004bf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004be2:	5ccb      	ldrb	r3, [r1, r3]
 8004be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	40023800 	.word	0x40023800
 8004bf0:	0800cfe0 	.word	0x0800cfe0

08004bf4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	220f      	movs	r2, #15
 8004c02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004c04:	4b12      	ldr	r3, [pc, #72]	; (8004c50 <HAL_RCC_GetClockConfig+0x5c>)
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f003 0203 	and.w	r2, r3, #3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004c10:	4b0f      	ldr	r3, [pc, #60]	; (8004c50 <HAL_RCC_GetClockConfig+0x5c>)
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004c1c:	4b0c      	ldr	r3, [pc, #48]	; (8004c50 <HAL_RCC_GetClockConfig+0x5c>)
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004c28:	4b09      	ldr	r3, [pc, #36]	; (8004c50 <HAL_RCC_GetClockConfig+0x5c>)
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	08db      	lsrs	r3, r3, #3
 8004c2e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004c36:	4b07      	ldr	r3, [pc, #28]	; (8004c54 <HAL_RCC_GetClockConfig+0x60>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0207 	and.w	r2, r3, #7
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	601a      	str	r2, [r3, #0]
}
 8004c42:	bf00      	nop
 8004c44:	370c      	adds	r7, #12
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	40023800 	.word	0x40023800
 8004c54:	40023c00 	.word	0x40023c00

08004c58 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b086      	sub	sp, #24
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c60:	2300      	movs	r3, #0
 8004c62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004c64:	2300      	movs	r3, #0
 8004c66:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0301 	and.w	r3, r3, #1
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d105      	bne.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d035      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c80:	4b62      	ldr	r3, [pc, #392]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c82:	2200      	movs	r2, #0
 8004c84:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c86:	f7fc fe4f 	bl	8001928 <HAL_GetTick>
 8004c8a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c8c:	e008      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c8e:	f7fc fe4b 	bl	8001928 <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d901      	bls.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e0b0      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ca0:	4b5b      	ldr	r3, [pc, #364]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1f0      	bne.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	019a      	lsls	r2, r3, #6
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	071b      	lsls	r3, r3, #28
 8004cb8:	4955      	ldr	r1, [pc, #340]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004cc0:	4b52      	ldr	r3, [pc, #328]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cc6:	f7fc fe2f 	bl	8001928 <HAL_GetTick>
 8004cca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ccc:	e008      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004cce:	f7fc fe2b 	bl	8001928 <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d901      	bls.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e090      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ce0:	4b4b      	ldr	r3, [pc, #300]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d0f0      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f000 8083 	beq.w	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	60fb      	str	r3, [r7, #12]
 8004cfe:	4b44      	ldr	r3, [pc, #272]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d02:	4a43      	ldr	r2, [pc, #268]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d08:	6413      	str	r3, [r2, #64]	; 0x40
 8004d0a:	4b41      	ldr	r3, [pc, #260]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d12:	60fb      	str	r3, [r7, #12]
 8004d14:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004d16:	4b3f      	ldr	r3, [pc, #252]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a3e      	ldr	r2, [pc, #248]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d20:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d22:	f7fc fe01 	bl	8001928 <HAL_GetTick>
 8004d26:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d28:	e008      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004d2a:	f7fc fdfd 	bl	8001928 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d901      	bls.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e062      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d3c:	4b35      	ldr	r3, [pc, #212]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d0f0      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d48:	4b31      	ldr	r3, [pc, #196]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d50:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d02f      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d028      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d66:	4b2a      	ldr	r3, [pc, #168]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d6e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d70:	4b29      	ldr	r3, [pc, #164]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d72:	2201      	movs	r2, #1
 8004d74:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d76:	4b28      	ldr	r3, [pc, #160]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004d7c:	4a24      	ldr	r2, [pc, #144]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d82:	4b23      	ldr	r3, [pc, #140]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d114      	bne.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004d8e:	f7fc fdcb 	bl	8001928 <HAL_GetTick>
 8004d92:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d94:	e00a      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d96:	f7fc fdc7 	bl	8001928 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d901      	bls.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e02a      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dac:	4b18      	ldr	r3, [pc, #96]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d0ee      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dc4:	d10d      	bne.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004dc6:	4b12      	ldr	r3, [pc, #72]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004dd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dda:	490d      	ldr	r1, [pc, #52]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	608b      	str	r3, [r1, #8]
 8004de0:	e005      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004de2:	4b0b      	ldr	r3, [pc, #44]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	4a0a      	ldr	r2, [pc, #40]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004de8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004dec:	6093      	str	r3, [r2, #8]
 8004dee:	4b08      	ldr	r3, [pc, #32]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004df0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dfa:	4905      	ldr	r1, [pc, #20]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3718      	adds	r7, #24
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	42470068 	.word	0x42470068
 8004e10:	40023800 	.word	0x40023800
 8004e14:	40007000 	.word	0x40007000
 8004e18:	42470e40 	.word	0x42470e40

08004e1c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b087      	sub	sp, #28
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004e24:	2300      	movs	r3, #0
 8004e26:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004e30:	2300      	movs	r3, #0
 8004e32:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d13e      	bne.n	8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004e3a:	4b23      	ldr	r3, [pc, #140]	; (8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e42:	60fb      	str	r3, [r7, #12]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d005      	beq.n	8004e56 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d12f      	bne.n	8004eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004e50:	4b1e      	ldr	r3, [pc, #120]	; (8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e52:	617b      	str	r3, [r7, #20]
          break;
 8004e54:	e02f      	b.n	8004eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004e56:	4b1c      	ldr	r3, [pc, #112]	; (8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e62:	d108      	bne.n	8004e76 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e64:	4b18      	ldr	r3, [pc, #96]	; (8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e6c:	4a18      	ldr	r2, [pc, #96]	; (8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e72:	613b      	str	r3, [r7, #16]
 8004e74:	e007      	b.n	8004e86 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e76:	4b14      	ldr	r3, [pc, #80]	; (8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e7e:	4a15      	ldr	r2, [pc, #84]	; (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e84:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004e86:	4b10      	ldr	r3, [pc, #64]	; (8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e8c:	099b      	lsrs	r3, r3, #6
 8004e8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	fb02 f303 	mul.w	r3, r2, r3
 8004e98:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004e9a:	4b0b      	ldr	r3, [pc, #44]	; (8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ea0:	0f1b      	lsrs	r3, r3, #28
 8004ea2:	f003 0307 	and.w	r3, r3, #7
 8004ea6:	68ba      	ldr	r2, [r7, #8]
 8004ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eac:	617b      	str	r3, [r7, #20]
          break;
 8004eae:	e002      	b.n	8004eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	617b      	str	r3, [r7, #20]
          break;
 8004eb4:	bf00      	nop
        }
      }
      break;
 8004eb6:	bf00      	nop
    }
  }
  return frequency;
 8004eb8:	697b      	ldr	r3, [r7, #20]
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	371c      	adds	r7, #28
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	40023800 	.word	0x40023800
 8004ecc:	00bb8000 	.word	0x00bb8000
 8004ed0:	007a1200 	.word	0x007a1200
 8004ed4:	00f42400 	.word	0x00f42400

08004ed8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e07b      	b.n	8004fe2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d108      	bne.n	8004f04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004efa:	d009      	beq.n	8004f10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	61da      	str	r2, [r3, #28]
 8004f02:	e005      	b.n	8004f10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d106      	bne.n	8004f30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f7fb ff8a 	bl	8000e44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2202      	movs	r2, #2
 8004f34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f46:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004f58:	431a      	orrs	r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f62:	431a      	orrs	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	f003 0302 	and.w	r3, r3, #2
 8004f6c:	431a      	orrs	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	431a      	orrs	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	699b      	ldr	r3, [r3, #24]
 8004f7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f80:	431a      	orrs	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	69db      	ldr	r3, [r3, #28]
 8004f86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a1b      	ldr	r3, [r3, #32]
 8004f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f94:	ea42 0103 	orr.w	r1, r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	430a      	orrs	r2, r1
 8004fa6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	0c1b      	lsrs	r3, r3, #16
 8004fae:	f003 0104 	and.w	r1, r3, #4
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb6:	f003 0210 	and.w	r2, r3, #16
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	69da      	ldr	r2, [r3, #28]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fd0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3708      	adds	r7, #8
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b082      	sub	sp, #8
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d101      	bne.n	8004ffc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e041      	b.n	8005080 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005002:	b2db      	uxtb	r3, r3
 8005004:	2b00      	cmp	r3, #0
 8005006:	d106      	bne.n	8005016 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f7fb ff5f 	bl	8000ed4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2202      	movs	r2, #2
 800501a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	3304      	adds	r3, #4
 8005026:	4619      	mov	r1, r3
 8005028:	4610      	mov	r0, r2
 800502a:	f000 fce1 	bl	80059f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2201      	movs	r2, #1
 800504a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2201      	movs	r2, #1
 800505a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2201      	movs	r2, #1
 800506a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2201      	movs	r2, #1
 8005072:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2201      	movs	r2, #1
 800507a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	3708      	adds	r7, #8
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005088:	b480      	push	{r7}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005096:	b2db      	uxtb	r3, r3
 8005098:	2b01      	cmp	r3, #1
 800509a:	d001      	beq.n	80050a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e046      	b.n	800512e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2202      	movs	r2, #2
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a23      	ldr	r2, [pc, #140]	; (800513c <HAL_TIM_Base_Start+0xb4>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d022      	beq.n	80050f8 <HAL_TIM_Base_Start+0x70>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ba:	d01d      	beq.n	80050f8 <HAL_TIM_Base_Start+0x70>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a1f      	ldr	r2, [pc, #124]	; (8005140 <HAL_TIM_Base_Start+0xb8>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d018      	beq.n	80050f8 <HAL_TIM_Base_Start+0x70>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a1e      	ldr	r2, [pc, #120]	; (8005144 <HAL_TIM_Base_Start+0xbc>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d013      	beq.n	80050f8 <HAL_TIM_Base_Start+0x70>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a1c      	ldr	r2, [pc, #112]	; (8005148 <HAL_TIM_Base_Start+0xc0>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d00e      	beq.n	80050f8 <HAL_TIM_Base_Start+0x70>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a1b      	ldr	r2, [pc, #108]	; (800514c <HAL_TIM_Base_Start+0xc4>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d009      	beq.n	80050f8 <HAL_TIM_Base_Start+0x70>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a19      	ldr	r2, [pc, #100]	; (8005150 <HAL_TIM_Base_Start+0xc8>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d004      	beq.n	80050f8 <HAL_TIM_Base_Start+0x70>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a18      	ldr	r2, [pc, #96]	; (8005154 <HAL_TIM_Base_Start+0xcc>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d111      	bne.n	800511c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f003 0307 	and.w	r3, r3, #7
 8005102:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2b06      	cmp	r3, #6
 8005108:	d010      	beq.n	800512c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f042 0201 	orr.w	r2, r2, #1
 8005118:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800511a:	e007      	b.n	800512c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f042 0201 	orr.w	r2, r2, #1
 800512a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3714      	adds	r7, #20
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	40010000 	.word	0x40010000
 8005140:	40000400 	.word	0x40000400
 8005144:	40000800 	.word	0x40000800
 8005148:	40000c00 	.word	0x40000c00
 800514c:	40010400 	.word	0x40010400
 8005150:	40014000 	.word	0x40014000
 8005154:	40001800 	.word	0x40001800

08005158 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005166:	b2db      	uxtb	r3, r3
 8005168:	2b01      	cmp	r3, #1
 800516a:	d001      	beq.n	8005170 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e04e      	b.n	800520e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2202      	movs	r2, #2
 8005174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68da      	ldr	r2, [r3, #12]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f042 0201 	orr.w	r2, r2, #1
 8005186:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a23      	ldr	r2, [pc, #140]	; (800521c <HAL_TIM_Base_Start_IT+0xc4>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d022      	beq.n	80051d8 <HAL_TIM_Base_Start_IT+0x80>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800519a:	d01d      	beq.n	80051d8 <HAL_TIM_Base_Start_IT+0x80>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a1f      	ldr	r2, [pc, #124]	; (8005220 <HAL_TIM_Base_Start_IT+0xc8>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d018      	beq.n	80051d8 <HAL_TIM_Base_Start_IT+0x80>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a1e      	ldr	r2, [pc, #120]	; (8005224 <HAL_TIM_Base_Start_IT+0xcc>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d013      	beq.n	80051d8 <HAL_TIM_Base_Start_IT+0x80>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a1c      	ldr	r2, [pc, #112]	; (8005228 <HAL_TIM_Base_Start_IT+0xd0>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d00e      	beq.n	80051d8 <HAL_TIM_Base_Start_IT+0x80>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a1b      	ldr	r2, [pc, #108]	; (800522c <HAL_TIM_Base_Start_IT+0xd4>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d009      	beq.n	80051d8 <HAL_TIM_Base_Start_IT+0x80>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a19      	ldr	r2, [pc, #100]	; (8005230 <HAL_TIM_Base_Start_IT+0xd8>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d004      	beq.n	80051d8 <HAL_TIM_Base_Start_IT+0x80>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a18      	ldr	r2, [pc, #96]	; (8005234 <HAL_TIM_Base_Start_IT+0xdc>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d111      	bne.n	80051fc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f003 0307 	and.w	r3, r3, #7
 80051e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2b06      	cmp	r3, #6
 80051e8:	d010      	beq.n	800520c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f042 0201 	orr.w	r2, r2, #1
 80051f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051fa:	e007      	b.n	800520c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f042 0201 	orr.w	r2, r2, #1
 800520a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3714      	adds	r7, #20
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	40010000 	.word	0x40010000
 8005220:	40000400 	.word	0x40000400
 8005224:	40000800 	.word	0x40000800
 8005228:	40000c00 	.word	0x40000c00
 800522c:	40010400 	.word	0x40010400
 8005230:	40014000 	.word	0x40014000
 8005234:	40001800 	.word	0x40001800

08005238 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d101      	bne.n	800524a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e041      	b.n	80052ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005250:	b2db      	uxtb	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	d106      	bne.n	8005264 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 f839 	bl	80052d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2202      	movs	r2, #2
 8005268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	3304      	adds	r3, #4
 8005274:	4619      	mov	r1, r3
 8005276:	4610      	mov	r0, r2
 8005278:	f000 fbba 	bl	80059f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3708      	adds	r7, #8
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80052d6:	b480      	push	{r7}
 80052d8:	b083      	sub	sp, #12
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80052de:	bf00      	nop
 80052e0:	370c      	adds	r7, #12
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
	...

080052ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d109      	bne.n	8005310 <HAL_TIM_PWM_Start+0x24>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005302:	b2db      	uxtb	r3, r3
 8005304:	2b01      	cmp	r3, #1
 8005306:	bf14      	ite	ne
 8005308:	2301      	movne	r3, #1
 800530a:	2300      	moveq	r3, #0
 800530c:	b2db      	uxtb	r3, r3
 800530e:	e022      	b.n	8005356 <HAL_TIM_PWM_Start+0x6a>
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	2b04      	cmp	r3, #4
 8005314:	d109      	bne.n	800532a <HAL_TIM_PWM_Start+0x3e>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800531c:	b2db      	uxtb	r3, r3
 800531e:	2b01      	cmp	r3, #1
 8005320:	bf14      	ite	ne
 8005322:	2301      	movne	r3, #1
 8005324:	2300      	moveq	r3, #0
 8005326:	b2db      	uxtb	r3, r3
 8005328:	e015      	b.n	8005356 <HAL_TIM_PWM_Start+0x6a>
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	2b08      	cmp	r3, #8
 800532e:	d109      	bne.n	8005344 <HAL_TIM_PWM_Start+0x58>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005336:	b2db      	uxtb	r3, r3
 8005338:	2b01      	cmp	r3, #1
 800533a:	bf14      	ite	ne
 800533c:	2301      	movne	r3, #1
 800533e:	2300      	moveq	r3, #0
 8005340:	b2db      	uxtb	r3, r3
 8005342:	e008      	b.n	8005356 <HAL_TIM_PWM_Start+0x6a>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800534a:	b2db      	uxtb	r3, r3
 800534c:	2b01      	cmp	r3, #1
 800534e:	bf14      	ite	ne
 8005350:	2301      	movne	r3, #1
 8005352:	2300      	moveq	r3, #0
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b00      	cmp	r3, #0
 8005358:	d001      	beq.n	800535e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e07c      	b.n	8005458 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d104      	bne.n	800536e <HAL_TIM_PWM_Start+0x82>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2202      	movs	r2, #2
 8005368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800536c:	e013      	b.n	8005396 <HAL_TIM_PWM_Start+0xaa>
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	2b04      	cmp	r3, #4
 8005372:	d104      	bne.n	800537e <HAL_TIM_PWM_Start+0x92>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2202      	movs	r2, #2
 8005378:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800537c:	e00b      	b.n	8005396 <HAL_TIM_PWM_Start+0xaa>
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	2b08      	cmp	r3, #8
 8005382:	d104      	bne.n	800538e <HAL_TIM_PWM_Start+0xa2>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2202      	movs	r2, #2
 8005388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800538c:	e003      	b.n	8005396 <HAL_TIM_PWM_Start+0xaa>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2202      	movs	r2, #2
 8005392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2201      	movs	r2, #1
 800539c:	6839      	ldr	r1, [r7, #0]
 800539e:	4618      	mov	r0, r3
 80053a0:	f000 fe10 	bl	8005fc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a2d      	ldr	r2, [pc, #180]	; (8005460 <HAL_TIM_PWM_Start+0x174>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d004      	beq.n	80053b8 <HAL_TIM_PWM_Start+0xcc>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a2c      	ldr	r2, [pc, #176]	; (8005464 <HAL_TIM_PWM_Start+0x178>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d101      	bne.n	80053bc <HAL_TIM_PWM_Start+0xd0>
 80053b8:	2301      	movs	r3, #1
 80053ba:	e000      	b.n	80053be <HAL_TIM_PWM_Start+0xd2>
 80053bc:	2300      	movs	r3, #0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d007      	beq.n	80053d2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a22      	ldr	r2, [pc, #136]	; (8005460 <HAL_TIM_PWM_Start+0x174>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d022      	beq.n	8005422 <HAL_TIM_PWM_Start+0x136>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053e4:	d01d      	beq.n	8005422 <HAL_TIM_PWM_Start+0x136>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a1f      	ldr	r2, [pc, #124]	; (8005468 <HAL_TIM_PWM_Start+0x17c>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d018      	beq.n	8005422 <HAL_TIM_PWM_Start+0x136>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a1d      	ldr	r2, [pc, #116]	; (800546c <HAL_TIM_PWM_Start+0x180>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d013      	beq.n	8005422 <HAL_TIM_PWM_Start+0x136>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a1c      	ldr	r2, [pc, #112]	; (8005470 <HAL_TIM_PWM_Start+0x184>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d00e      	beq.n	8005422 <HAL_TIM_PWM_Start+0x136>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a16      	ldr	r2, [pc, #88]	; (8005464 <HAL_TIM_PWM_Start+0x178>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d009      	beq.n	8005422 <HAL_TIM_PWM_Start+0x136>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a18      	ldr	r2, [pc, #96]	; (8005474 <HAL_TIM_PWM_Start+0x188>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d004      	beq.n	8005422 <HAL_TIM_PWM_Start+0x136>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a16      	ldr	r2, [pc, #88]	; (8005478 <HAL_TIM_PWM_Start+0x18c>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d111      	bne.n	8005446 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f003 0307 	and.w	r3, r3, #7
 800542c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2b06      	cmp	r3, #6
 8005432:	d010      	beq.n	8005456 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f042 0201 	orr.w	r2, r2, #1
 8005442:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005444:	e007      	b.n	8005456 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f042 0201 	orr.w	r2, r2, #1
 8005454:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	3710      	adds	r7, #16
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}
 8005460:	40010000 	.word	0x40010000
 8005464:	40010400 	.word	0x40010400
 8005468:	40000400 	.word	0x40000400
 800546c:	40000800 	.word	0x40000800
 8005470:	40000c00 	.word	0x40000c00
 8005474:	40014000 	.word	0x40014000
 8005478:	40001800 	.word	0x40001800

0800547c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	f003 0302 	and.w	r3, r3, #2
 800548e:	2b02      	cmp	r3, #2
 8005490:	d122      	bne.n	80054d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	f003 0302 	and.w	r3, r3, #2
 800549c:	2b02      	cmp	r3, #2
 800549e:	d11b      	bne.n	80054d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f06f 0202 	mvn.w	r2, #2
 80054a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2201      	movs	r2, #1
 80054ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	f003 0303 	and.w	r3, r3, #3
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d003      	beq.n	80054c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 fa77 	bl	80059b2 <HAL_TIM_IC_CaptureCallback>
 80054c4:	e005      	b.n	80054d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 fa69 	bl	800599e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f000 fa7a 	bl	80059c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	f003 0304 	and.w	r3, r3, #4
 80054e2:	2b04      	cmp	r3, #4
 80054e4:	d122      	bne.n	800552c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	f003 0304 	and.w	r3, r3, #4
 80054f0:	2b04      	cmp	r3, #4
 80054f2:	d11b      	bne.n	800552c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f06f 0204 	mvn.w	r2, #4
 80054fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2202      	movs	r2, #2
 8005502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800550e:	2b00      	cmp	r3, #0
 8005510:	d003      	beq.n	800551a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 fa4d 	bl	80059b2 <HAL_TIM_IC_CaptureCallback>
 8005518:	e005      	b.n	8005526 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 fa3f 	bl	800599e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 fa50 	bl	80059c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	f003 0308 	and.w	r3, r3, #8
 8005536:	2b08      	cmp	r3, #8
 8005538:	d122      	bne.n	8005580 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	f003 0308 	and.w	r3, r3, #8
 8005544:	2b08      	cmp	r3, #8
 8005546:	d11b      	bne.n	8005580 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f06f 0208 	mvn.w	r2, #8
 8005550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2204      	movs	r2, #4
 8005556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	69db      	ldr	r3, [r3, #28]
 800555e:	f003 0303 	and.w	r3, r3, #3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d003      	beq.n	800556e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 fa23 	bl	80059b2 <HAL_TIM_IC_CaptureCallback>
 800556c:	e005      	b.n	800557a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 fa15 	bl	800599e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 fa26 	bl	80059c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	f003 0310 	and.w	r3, r3, #16
 800558a:	2b10      	cmp	r3, #16
 800558c:	d122      	bne.n	80055d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	f003 0310 	and.w	r3, r3, #16
 8005598:	2b10      	cmp	r3, #16
 800559a:	d11b      	bne.n	80055d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f06f 0210 	mvn.w	r2, #16
 80055a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2208      	movs	r2, #8
 80055aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	69db      	ldr	r3, [r3, #28]
 80055b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d003      	beq.n	80055c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 f9f9 	bl	80059b2 <HAL_TIM_IC_CaptureCallback>
 80055c0:	e005      	b.n	80055ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 f9eb 	bl	800599e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 f9fc 	bl	80059c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d10e      	bne.n	8005600 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	f003 0301 	and.w	r3, r3, #1
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d107      	bne.n	8005600 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f06f 0201 	mvn.w	r2, #1
 80055f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f7fb fb08 	bl	8000c10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800560a:	2b80      	cmp	r3, #128	; 0x80
 800560c:	d10e      	bne.n	800562c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005618:	2b80      	cmp	r3, #128	; 0x80
 800561a:	d107      	bne.n	800562c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 fd78 	bl	800611c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005636:	2b40      	cmp	r3, #64	; 0x40
 8005638:	d10e      	bne.n	8005658 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005644:	2b40      	cmp	r3, #64	; 0x40
 8005646:	d107      	bne.n	8005658 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f9c1 	bl	80059da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	f003 0320 	and.w	r3, r3, #32
 8005662:	2b20      	cmp	r3, #32
 8005664:	d10e      	bne.n	8005684 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	f003 0320 	and.w	r3, r3, #32
 8005670:	2b20      	cmp	r3, #32
 8005672:	d107      	bne.n	8005684 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f06f 0220 	mvn.w	r2, #32
 800567c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 fd42 	bl	8006108 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005684:	bf00      	nop
 8005686:	3708      	adds	r7, #8
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b086      	sub	sp, #24
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005698:	2300      	movs	r3, #0
 800569a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d101      	bne.n	80056aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80056a6:	2302      	movs	r3, #2
 80056a8:	e0ae      	b.n	8005808 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2201      	movs	r2, #1
 80056ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2b0c      	cmp	r3, #12
 80056b6:	f200 809f 	bhi.w	80057f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80056ba:	a201      	add	r2, pc, #4	; (adr r2, 80056c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80056bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c0:	080056f5 	.word	0x080056f5
 80056c4:	080057f9 	.word	0x080057f9
 80056c8:	080057f9 	.word	0x080057f9
 80056cc:	080057f9 	.word	0x080057f9
 80056d0:	08005735 	.word	0x08005735
 80056d4:	080057f9 	.word	0x080057f9
 80056d8:	080057f9 	.word	0x080057f9
 80056dc:	080057f9 	.word	0x080057f9
 80056e0:	08005777 	.word	0x08005777
 80056e4:	080057f9 	.word	0x080057f9
 80056e8:	080057f9 	.word	0x080057f9
 80056ec:	080057f9 	.word	0x080057f9
 80056f0:	080057b7 	.word	0x080057b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68b9      	ldr	r1, [r7, #8]
 80056fa:	4618      	mov	r0, r3
 80056fc:	f000 fa18 	bl	8005b30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	699a      	ldr	r2, [r3, #24]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f042 0208 	orr.w	r2, r2, #8
 800570e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	699a      	ldr	r2, [r3, #24]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f022 0204 	bic.w	r2, r2, #4
 800571e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	6999      	ldr	r1, [r3, #24]
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	691a      	ldr	r2, [r3, #16]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	430a      	orrs	r2, r1
 8005730:	619a      	str	r2, [r3, #24]
      break;
 8005732:	e064      	b.n	80057fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68b9      	ldr	r1, [r7, #8]
 800573a:	4618      	mov	r0, r3
 800573c:	f000 fa68 	bl	8005c10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	699a      	ldr	r2, [r3, #24]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800574e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	699a      	ldr	r2, [r3, #24]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800575e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6999      	ldr	r1, [r3, #24]
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	021a      	lsls	r2, r3, #8
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	430a      	orrs	r2, r1
 8005772:	619a      	str	r2, [r3, #24]
      break;
 8005774:	e043      	b.n	80057fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68b9      	ldr	r1, [r7, #8]
 800577c:	4618      	mov	r0, r3
 800577e:	f000 fabd 	bl	8005cfc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	69da      	ldr	r2, [r3, #28]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f042 0208 	orr.w	r2, r2, #8
 8005790:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	69da      	ldr	r2, [r3, #28]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f022 0204 	bic.w	r2, r2, #4
 80057a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	69d9      	ldr	r1, [r3, #28]
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	691a      	ldr	r2, [r3, #16]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	430a      	orrs	r2, r1
 80057b2:	61da      	str	r2, [r3, #28]
      break;
 80057b4:	e023      	b.n	80057fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68b9      	ldr	r1, [r7, #8]
 80057bc:	4618      	mov	r0, r3
 80057be:	f000 fb11 	bl	8005de4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	69da      	ldr	r2, [r3, #28]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	69da      	ldr	r2, [r3, #28]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	69d9      	ldr	r1, [r3, #28]
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	021a      	lsls	r2, r3, #8
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	430a      	orrs	r2, r1
 80057f4:	61da      	str	r2, [r3, #28]
      break;
 80057f6:	e002      	b.n	80057fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	75fb      	strb	r3, [r7, #23]
      break;
 80057fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005806:	7dfb      	ldrb	r3, [r7, #23]
}
 8005808:	4618      	mov	r0, r3
 800580a:	3718      	adds	r7, #24
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800581a:	2300      	movs	r3, #0
 800581c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005824:	2b01      	cmp	r3, #1
 8005826:	d101      	bne.n	800582c <HAL_TIM_ConfigClockSource+0x1c>
 8005828:	2302      	movs	r3, #2
 800582a:	e0b4      	b.n	8005996 <HAL_TIM_ConfigClockSource+0x186>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2202      	movs	r2, #2
 8005838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800584a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005852:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68ba      	ldr	r2, [r7, #8]
 800585a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005864:	d03e      	beq.n	80058e4 <HAL_TIM_ConfigClockSource+0xd4>
 8005866:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800586a:	f200 8087 	bhi.w	800597c <HAL_TIM_ConfigClockSource+0x16c>
 800586e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005872:	f000 8086 	beq.w	8005982 <HAL_TIM_ConfigClockSource+0x172>
 8005876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800587a:	d87f      	bhi.n	800597c <HAL_TIM_ConfigClockSource+0x16c>
 800587c:	2b70      	cmp	r3, #112	; 0x70
 800587e:	d01a      	beq.n	80058b6 <HAL_TIM_ConfigClockSource+0xa6>
 8005880:	2b70      	cmp	r3, #112	; 0x70
 8005882:	d87b      	bhi.n	800597c <HAL_TIM_ConfigClockSource+0x16c>
 8005884:	2b60      	cmp	r3, #96	; 0x60
 8005886:	d050      	beq.n	800592a <HAL_TIM_ConfigClockSource+0x11a>
 8005888:	2b60      	cmp	r3, #96	; 0x60
 800588a:	d877      	bhi.n	800597c <HAL_TIM_ConfigClockSource+0x16c>
 800588c:	2b50      	cmp	r3, #80	; 0x50
 800588e:	d03c      	beq.n	800590a <HAL_TIM_ConfigClockSource+0xfa>
 8005890:	2b50      	cmp	r3, #80	; 0x50
 8005892:	d873      	bhi.n	800597c <HAL_TIM_ConfigClockSource+0x16c>
 8005894:	2b40      	cmp	r3, #64	; 0x40
 8005896:	d058      	beq.n	800594a <HAL_TIM_ConfigClockSource+0x13a>
 8005898:	2b40      	cmp	r3, #64	; 0x40
 800589a:	d86f      	bhi.n	800597c <HAL_TIM_ConfigClockSource+0x16c>
 800589c:	2b30      	cmp	r3, #48	; 0x30
 800589e:	d064      	beq.n	800596a <HAL_TIM_ConfigClockSource+0x15a>
 80058a0:	2b30      	cmp	r3, #48	; 0x30
 80058a2:	d86b      	bhi.n	800597c <HAL_TIM_ConfigClockSource+0x16c>
 80058a4:	2b20      	cmp	r3, #32
 80058a6:	d060      	beq.n	800596a <HAL_TIM_ConfigClockSource+0x15a>
 80058a8:	2b20      	cmp	r3, #32
 80058aa:	d867      	bhi.n	800597c <HAL_TIM_ConfigClockSource+0x16c>
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d05c      	beq.n	800596a <HAL_TIM_ConfigClockSource+0x15a>
 80058b0:	2b10      	cmp	r3, #16
 80058b2:	d05a      	beq.n	800596a <HAL_TIM_ConfigClockSource+0x15a>
 80058b4:	e062      	b.n	800597c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6818      	ldr	r0, [r3, #0]
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	6899      	ldr	r1, [r3, #8]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	685a      	ldr	r2, [r3, #4]
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	f000 fb5d 	bl	8005f84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80058d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68ba      	ldr	r2, [r7, #8]
 80058e0:	609a      	str	r2, [r3, #8]
      break;
 80058e2:	e04f      	b.n	8005984 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6818      	ldr	r0, [r3, #0]
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	6899      	ldr	r1, [r3, #8]
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	685a      	ldr	r2, [r3, #4]
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	f000 fb46 	bl	8005f84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	689a      	ldr	r2, [r3, #8]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005906:	609a      	str	r2, [r3, #8]
      break;
 8005908:	e03c      	b.n	8005984 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6818      	ldr	r0, [r3, #0]
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	6859      	ldr	r1, [r3, #4]
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	461a      	mov	r2, r3
 8005918:	f000 faba 	bl	8005e90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2150      	movs	r1, #80	; 0x50
 8005922:	4618      	mov	r0, r3
 8005924:	f000 fb13 	bl	8005f4e <TIM_ITRx_SetConfig>
      break;
 8005928:	e02c      	b.n	8005984 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6818      	ldr	r0, [r3, #0]
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	6859      	ldr	r1, [r3, #4]
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	461a      	mov	r2, r3
 8005938:	f000 fad9 	bl	8005eee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2160      	movs	r1, #96	; 0x60
 8005942:	4618      	mov	r0, r3
 8005944:	f000 fb03 	bl	8005f4e <TIM_ITRx_SetConfig>
      break;
 8005948:	e01c      	b.n	8005984 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6818      	ldr	r0, [r3, #0]
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	6859      	ldr	r1, [r3, #4]
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	461a      	mov	r2, r3
 8005958:	f000 fa9a 	bl	8005e90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2140      	movs	r1, #64	; 0x40
 8005962:	4618      	mov	r0, r3
 8005964:	f000 faf3 	bl	8005f4e <TIM_ITRx_SetConfig>
      break;
 8005968:	e00c      	b.n	8005984 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4619      	mov	r1, r3
 8005974:	4610      	mov	r0, r2
 8005976:	f000 faea 	bl	8005f4e <TIM_ITRx_SetConfig>
      break;
 800597a:	e003      	b.n	8005984 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	73fb      	strb	r3, [r7, #15]
      break;
 8005980:	e000      	b.n	8005984 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005982:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005994:	7bfb      	ldrb	r3, [r7, #15]
}
 8005996:	4618      	mov	r0, r3
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800599e:	b480      	push	{r7}
 80059a0:	b083      	sub	sp, #12
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059a6:	bf00      	nop
 80059a8:	370c      	adds	r7, #12
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr

080059b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059b2:	b480      	push	{r7}
 80059b4:	b083      	sub	sp, #12
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059ba:	bf00      	nop
 80059bc:	370c      	adds	r7, #12
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr

080059c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059c6:	b480      	push	{r7}
 80059c8:	b083      	sub	sp, #12
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059ce:	bf00      	nop
 80059d0:	370c      	adds	r7, #12
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr

080059da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059da:	b480      	push	{r7}
 80059dc:	b083      	sub	sp, #12
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059e2:	bf00      	nop
 80059e4:	370c      	adds	r7, #12
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
	...

080059f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a40      	ldr	r2, [pc, #256]	; (8005b04 <TIM_Base_SetConfig+0x114>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d013      	beq.n	8005a30 <TIM_Base_SetConfig+0x40>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a0e:	d00f      	beq.n	8005a30 <TIM_Base_SetConfig+0x40>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a3d      	ldr	r2, [pc, #244]	; (8005b08 <TIM_Base_SetConfig+0x118>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d00b      	beq.n	8005a30 <TIM_Base_SetConfig+0x40>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a3c      	ldr	r2, [pc, #240]	; (8005b0c <TIM_Base_SetConfig+0x11c>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d007      	beq.n	8005a30 <TIM_Base_SetConfig+0x40>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a3b      	ldr	r2, [pc, #236]	; (8005b10 <TIM_Base_SetConfig+0x120>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d003      	beq.n	8005a30 <TIM_Base_SetConfig+0x40>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a3a      	ldr	r2, [pc, #232]	; (8005b14 <TIM_Base_SetConfig+0x124>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d108      	bne.n	8005a42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a2f      	ldr	r2, [pc, #188]	; (8005b04 <TIM_Base_SetConfig+0x114>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d02b      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a50:	d027      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a2c      	ldr	r2, [pc, #176]	; (8005b08 <TIM_Base_SetConfig+0x118>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d023      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a2b      	ldr	r2, [pc, #172]	; (8005b0c <TIM_Base_SetConfig+0x11c>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d01f      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a2a      	ldr	r2, [pc, #168]	; (8005b10 <TIM_Base_SetConfig+0x120>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d01b      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a29      	ldr	r2, [pc, #164]	; (8005b14 <TIM_Base_SetConfig+0x124>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d017      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a28      	ldr	r2, [pc, #160]	; (8005b18 <TIM_Base_SetConfig+0x128>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d013      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a27      	ldr	r2, [pc, #156]	; (8005b1c <TIM_Base_SetConfig+0x12c>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d00f      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a26      	ldr	r2, [pc, #152]	; (8005b20 <TIM_Base_SetConfig+0x130>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d00b      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a25      	ldr	r2, [pc, #148]	; (8005b24 <TIM_Base_SetConfig+0x134>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d007      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a24      	ldr	r2, [pc, #144]	; (8005b28 <TIM_Base_SetConfig+0x138>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d003      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a23      	ldr	r2, [pc, #140]	; (8005b2c <TIM_Base_SetConfig+0x13c>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d108      	bne.n	8005ab4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	689a      	ldr	r2, [r3, #8]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a0a      	ldr	r2, [pc, #40]	; (8005b04 <TIM_Base_SetConfig+0x114>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d003      	beq.n	8005ae8 <TIM_Base_SetConfig+0xf8>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a0c      	ldr	r2, [pc, #48]	; (8005b14 <TIM_Base_SetConfig+0x124>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d103      	bne.n	8005af0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	691a      	ldr	r2, [r3, #16]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	615a      	str	r2, [r3, #20]
}
 8005af6:	bf00      	nop
 8005af8:	3714      	adds	r7, #20
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	40010000 	.word	0x40010000
 8005b08:	40000400 	.word	0x40000400
 8005b0c:	40000800 	.word	0x40000800
 8005b10:	40000c00 	.word	0x40000c00
 8005b14:	40010400 	.word	0x40010400
 8005b18:	40014000 	.word	0x40014000
 8005b1c:	40014400 	.word	0x40014400
 8005b20:	40014800 	.word	0x40014800
 8005b24:	40001800 	.word	0x40001800
 8005b28:	40001c00 	.word	0x40001c00
 8005b2c:	40002000 	.word	0x40002000

08005b30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b087      	sub	sp, #28
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a1b      	ldr	r3, [r3, #32]
 8005b3e:	f023 0201 	bic.w	r2, r3, #1
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f023 0303 	bic.w	r3, r3, #3
 8005b66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	f023 0302 	bic.w	r3, r3, #2
 8005b78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	697a      	ldr	r2, [r7, #20]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a20      	ldr	r2, [pc, #128]	; (8005c08 <TIM_OC1_SetConfig+0xd8>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d003      	beq.n	8005b94 <TIM_OC1_SetConfig+0x64>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a1f      	ldr	r2, [pc, #124]	; (8005c0c <TIM_OC1_SetConfig+0xdc>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d10c      	bne.n	8005bae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	f023 0308 	bic.w	r3, r3, #8
 8005b9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	697a      	ldr	r2, [r7, #20]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	f023 0304 	bic.w	r3, r3, #4
 8005bac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a15      	ldr	r2, [pc, #84]	; (8005c08 <TIM_OC1_SetConfig+0xd8>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d003      	beq.n	8005bbe <TIM_OC1_SetConfig+0x8e>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a14      	ldr	r2, [pc, #80]	; (8005c0c <TIM_OC1_SetConfig+0xdc>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d111      	bne.n	8005be2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	693a      	ldr	r2, [r7, #16]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	693a      	ldr	r2, [r7, #16]
 8005be6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	685a      	ldr	r2, [r3, #4]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	621a      	str	r2, [r3, #32]
}
 8005bfc:	bf00      	nop
 8005bfe:	371c      	adds	r7, #28
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr
 8005c08:	40010000 	.word	0x40010000
 8005c0c:	40010400 	.word	0x40010400

08005c10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b087      	sub	sp, #28
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a1b      	ldr	r3, [r3, #32]
 8005c1e:	f023 0210 	bic.w	r2, r3, #16
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	699b      	ldr	r3, [r3, #24]
 8005c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	021b      	lsls	r3, r3, #8
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	f023 0320 	bic.w	r3, r3, #32
 8005c5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	011b      	lsls	r3, r3, #4
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a22      	ldr	r2, [pc, #136]	; (8005cf4 <TIM_OC2_SetConfig+0xe4>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d003      	beq.n	8005c78 <TIM_OC2_SetConfig+0x68>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a21      	ldr	r2, [pc, #132]	; (8005cf8 <TIM_OC2_SetConfig+0xe8>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d10d      	bne.n	8005c94 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	011b      	lsls	r3, r3, #4
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a17      	ldr	r2, [pc, #92]	; (8005cf4 <TIM_OC2_SetConfig+0xe4>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d003      	beq.n	8005ca4 <TIM_OC2_SetConfig+0x94>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a16      	ldr	r2, [pc, #88]	; (8005cf8 <TIM_OC2_SetConfig+0xe8>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d113      	bne.n	8005ccc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005caa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	695b      	ldr	r3, [r3, #20]
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	693a      	ldr	r2, [r7, #16]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	693a      	ldr	r2, [r7, #16]
 8005cd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	685a      	ldr	r2, [r3, #4]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	621a      	str	r2, [r3, #32]
}
 8005ce6:	bf00      	nop
 8005ce8:	371c      	adds	r7, #28
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop
 8005cf4:	40010000 	.word	0x40010000
 8005cf8:	40010400 	.word	0x40010400

08005cfc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b087      	sub	sp, #28
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	69db      	ldr	r3, [r3, #28]
 8005d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f023 0303 	bic.w	r3, r3, #3
 8005d32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	021b      	lsls	r3, r3, #8
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a21      	ldr	r2, [pc, #132]	; (8005ddc <TIM_OC3_SetConfig+0xe0>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d003      	beq.n	8005d62 <TIM_OC3_SetConfig+0x66>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a20      	ldr	r2, [pc, #128]	; (8005de0 <TIM_OC3_SetConfig+0xe4>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d10d      	bne.n	8005d7e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	021b      	lsls	r3, r3, #8
 8005d70:	697a      	ldr	r2, [r7, #20]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a16      	ldr	r2, [pc, #88]	; (8005ddc <TIM_OC3_SetConfig+0xe0>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d003      	beq.n	8005d8e <TIM_OC3_SetConfig+0x92>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a15      	ldr	r2, [pc, #84]	; (8005de0 <TIM_OC3_SetConfig+0xe4>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d113      	bne.n	8005db6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	695b      	ldr	r3, [r3, #20]
 8005da2:	011b      	lsls	r3, r3, #4
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	699b      	ldr	r3, [r3, #24]
 8005dae:	011b      	lsls	r3, r3, #4
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	693a      	ldr	r2, [r7, #16]
 8005dba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	685a      	ldr	r2, [r3, #4]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	697a      	ldr	r2, [r7, #20]
 8005dce:	621a      	str	r2, [r3, #32]
}
 8005dd0:	bf00      	nop
 8005dd2:	371c      	adds	r7, #28
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr
 8005ddc:	40010000 	.word	0x40010000
 8005de0:	40010400 	.word	0x40010400

08005de4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b087      	sub	sp, #28
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a1b      	ldr	r3, [r3, #32]
 8005dfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	69db      	ldr	r3, [r3, #28]
 8005e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	021b      	lsls	r3, r3, #8
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	031b      	lsls	r3, r3, #12
 8005e36:	693a      	ldr	r2, [r7, #16]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a12      	ldr	r2, [pc, #72]	; (8005e88 <TIM_OC4_SetConfig+0xa4>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d003      	beq.n	8005e4c <TIM_OC4_SetConfig+0x68>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a11      	ldr	r2, [pc, #68]	; (8005e8c <TIM_OC4_SetConfig+0xa8>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d109      	bne.n	8005e60 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	695b      	ldr	r3, [r3, #20]
 8005e58:	019b      	lsls	r3, r3, #6
 8005e5a:	697a      	ldr	r2, [r7, #20]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	68fa      	ldr	r2, [r7, #12]
 8005e6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	685a      	ldr	r2, [r3, #4]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	693a      	ldr	r2, [r7, #16]
 8005e78:	621a      	str	r2, [r3, #32]
}
 8005e7a:	bf00      	nop
 8005e7c:	371c      	adds	r7, #28
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	40010000 	.word	0x40010000
 8005e8c:	40010400 	.word	0x40010400

08005e90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b087      	sub	sp, #28
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6a1b      	ldr	r3, [r3, #32]
 8005ea0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	f023 0201 	bic.w	r2, r3, #1
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005eba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	011b      	lsls	r3, r3, #4
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	f023 030a 	bic.w	r3, r3, #10
 8005ecc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	693a      	ldr	r2, [r7, #16]
 8005eda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	697a      	ldr	r2, [r7, #20]
 8005ee0:	621a      	str	r2, [r3, #32]
}
 8005ee2:	bf00      	nop
 8005ee4:	371c      	adds	r7, #28
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr

08005eee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005eee:	b480      	push	{r7}
 8005ef0:	b087      	sub	sp, #28
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	60f8      	str	r0, [r7, #12]
 8005ef6:	60b9      	str	r1, [r7, #8]
 8005ef8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6a1b      	ldr	r3, [r3, #32]
 8005efe:	f023 0210 	bic.w	r2, r3, #16
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6a1b      	ldr	r3, [r3, #32]
 8005f10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	031b      	lsls	r3, r3, #12
 8005f1e:	697a      	ldr	r2, [r7, #20]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	011b      	lsls	r3, r3, #4
 8005f30:	693a      	ldr	r2, [r7, #16]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	697a      	ldr	r2, [r7, #20]
 8005f3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	693a      	ldr	r2, [r7, #16]
 8005f40:	621a      	str	r2, [r3, #32]
}
 8005f42:	bf00      	nop
 8005f44:	371c      	adds	r7, #28
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr

08005f4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f4e:	b480      	push	{r7}
 8005f50:	b085      	sub	sp, #20
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
 8005f56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f66:	683a      	ldr	r2, [r7, #0]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	f043 0307 	orr.w	r3, r3, #7
 8005f70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	609a      	str	r2, [r3, #8]
}
 8005f78:	bf00      	nop
 8005f7a:	3714      	adds	r7, #20
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b087      	sub	sp, #28
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
 8005f90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	021a      	lsls	r2, r3, #8
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	431a      	orrs	r2, r3
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	697a      	ldr	r2, [r7, #20]
 8005fb6:	609a      	str	r2, [r3, #8]
}
 8005fb8:	bf00      	nop
 8005fba:	371c      	adds	r7, #28
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b087      	sub	sp, #28
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	f003 031f 	and.w	r3, r3, #31
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fdc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6a1a      	ldr	r2, [r3, #32]
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	43db      	mvns	r3, r3
 8005fe6:	401a      	ands	r2, r3
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6a1a      	ldr	r2, [r3, #32]
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	f003 031f 	and.w	r3, r3, #31
 8005ff6:	6879      	ldr	r1, [r7, #4]
 8005ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ffc:	431a      	orrs	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	621a      	str	r2, [r3, #32]
}
 8006002:	bf00      	nop
 8006004:	371c      	adds	r7, #28
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr
	...

08006010 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006010:	b480      	push	{r7}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006020:	2b01      	cmp	r3, #1
 8006022:	d101      	bne.n	8006028 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006024:	2302      	movs	r3, #2
 8006026:	e05a      	b.n	80060de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2202      	movs	r2, #2
 8006034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800604e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	4313      	orrs	r3, r2
 8006058:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a21      	ldr	r2, [pc, #132]	; (80060ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d022      	beq.n	80060b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006074:	d01d      	beq.n	80060b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a1d      	ldr	r2, [pc, #116]	; (80060f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d018      	beq.n	80060b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a1b      	ldr	r2, [pc, #108]	; (80060f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d013      	beq.n	80060b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a1a      	ldr	r2, [pc, #104]	; (80060f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d00e      	beq.n	80060b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a18      	ldr	r2, [pc, #96]	; (80060fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d009      	beq.n	80060b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a17      	ldr	r2, [pc, #92]	; (8006100 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d004      	beq.n	80060b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a15      	ldr	r2, [pc, #84]	; (8006104 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d10c      	bne.n	80060cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	68ba      	ldr	r2, [r7, #8]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68ba      	ldr	r2, [r7, #8]
 80060ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3714      	adds	r7, #20
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop
 80060ec:	40010000 	.word	0x40010000
 80060f0:	40000400 	.word	0x40000400
 80060f4:	40000800 	.word	0x40000800
 80060f8:	40000c00 	.word	0x40000c00
 80060fc:	40010400 	.word	0x40010400
 8006100:	40014000 	.word	0x40014000
 8006104:	40001800 	.word	0x40001800

08006108 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006110:	bf00      	nop
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006130:	b084      	sub	sp, #16
 8006132:	b580      	push	{r7, lr}
 8006134:	b084      	sub	sp, #16
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
 800613a:	f107 001c 	add.w	r0, r7, #28
 800613e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006144:	2b01      	cmp	r3, #1
 8006146:	d122      	bne.n	800618e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800615c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006172:	2b01      	cmp	r3, #1
 8006174:	d105      	bne.n	8006182 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f9c0 	bl	8006508 <USB_CoreReset>
 8006188:	4603      	mov	r3, r0
 800618a:	73fb      	strb	r3, [r7, #15]
 800618c:	e01a      	b.n	80061c4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f9b4 	bl	8006508 <USB_CoreReset>
 80061a0:	4603      	mov	r3, r0
 80061a2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80061a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d106      	bne.n	80061b8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	639a      	str	r2, [r3, #56]	; 0x38
 80061b6:	e005      	b.n	80061c4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80061c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d10b      	bne.n	80061e2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	f043 0206 	orr.w	r2, r3, #6
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f043 0220 	orr.w	r2, r3, #32
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80061e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3710      	adds	r7, #16
 80061e8:	46bd      	mov	sp, r7
 80061ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061ee:	b004      	add	sp, #16
 80061f0:	4770      	bx	lr

080061f2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b083      	sub	sp, #12
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f043 0201 	orr.w	r2, r3, #1
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006206:	2300      	movs	r3, #0
}
 8006208:	4618      	mov	r0, r3
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	f023 0201 	bic.w	r2, r3, #1
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006228:	2300      	movs	r3, #0
}
 800622a:	4618      	mov	r0, r3
 800622c:	370c      	adds	r7, #12
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr

08006236 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006236:	b580      	push	{r7, lr}
 8006238:	b084      	sub	sp, #16
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
 800623e:	460b      	mov	r3, r1
 8006240:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006242:	2300      	movs	r3, #0
 8006244:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006252:	78fb      	ldrb	r3, [r7, #3]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d115      	bne.n	8006284 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006264:	2001      	movs	r0, #1
 8006266:	f7fb fb6b 	bl	8001940 <HAL_Delay>
      ms++;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	3301      	adds	r3, #1
 800626e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 f93a 	bl	80064ea <USB_GetMode>
 8006276:	4603      	mov	r3, r0
 8006278:	2b01      	cmp	r3, #1
 800627a:	d01e      	beq.n	80062ba <USB_SetCurrentMode+0x84>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2b31      	cmp	r3, #49	; 0x31
 8006280:	d9f0      	bls.n	8006264 <USB_SetCurrentMode+0x2e>
 8006282:	e01a      	b.n	80062ba <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006284:	78fb      	ldrb	r3, [r7, #3]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d115      	bne.n	80062b6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006296:	2001      	movs	r0, #1
 8006298:	f7fb fb52 	bl	8001940 <HAL_Delay>
      ms++;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	3301      	adds	r3, #1
 80062a0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 f921 	bl	80064ea <USB_GetMode>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d005      	beq.n	80062ba <USB_SetCurrentMode+0x84>
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2b31      	cmp	r3, #49	; 0x31
 80062b2:	d9f0      	bls.n	8006296 <USB_SetCurrentMode+0x60>
 80062b4:	e001      	b.n	80062ba <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e005      	b.n	80062c6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2b32      	cmp	r3, #50	; 0x32
 80062be:	d101      	bne.n	80062c4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e000      	b.n	80062c6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3710      	adds	r7, #16
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
	...

080062d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b085      	sub	sp, #20
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80062da:	2300      	movs	r3, #0
 80062dc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	3301      	adds	r3, #1
 80062e2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	4a13      	ldr	r2, [pc, #76]	; (8006334 <USB_FlushTxFifo+0x64>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d901      	bls.n	80062f0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80062ec:	2303      	movs	r3, #3
 80062ee:	e01b      	b.n	8006328 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	691b      	ldr	r3, [r3, #16]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	daf2      	bge.n	80062de <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80062f8:	2300      	movs	r3, #0
 80062fa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	019b      	lsls	r3, r3, #6
 8006300:	f043 0220 	orr.w	r2, r3, #32
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	3301      	adds	r3, #1
 800630c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	4a08      	ldr	r2, [pc, #32]	; (8006334 <USB_FlushTxFifo+0x64>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d901      	bls.n	800631a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	e006      	b.n	8006328 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	f003 0320 	and.w	r3, r3, #32
 8006322:	2b20      	cmp	r3, #32
 8006324:	d0f0      	beq.n	8006308 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3714      	adds	r7, #20
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr
 8006334:	00030d40 	.word	0x00030d40

08006338 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006340:	2300      	movs	r3, #0
 8006342:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	3301      	adds	r3, #1
 8006348:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	4a11      	ldr	r2, [pc, #68]	; (8006394 <USB_FlushRxFifo+0x5c>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d901      	bls.n	8006356 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	e018      	b.n	8006388 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	2b00      	cmp	r3, #0
 800635c:	daf2      	bge.n	8006344 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800635e:	2300      	movs	r3, #0
 8006360:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2210      	movs	r2, #16
 8006366:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	3301      	adds	r3, #1
 800636c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	4a08      	ldr	r2, [pc, #32]	; (8006394 <USB_FlushRxFifo+0x5c>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d901      	bls.n	800637a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006376:	2303      	movs	r3, #3
 8006378:	e006      	b.n	8006388 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	f003 0310 	and.w	r3, r3, #16
 8006382:	2b10      	cmp	r3, #16
 8006384:	d0f0      	beq.n	8006368 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006386:	2300      	movs	r3, #0
}
 8006388:	4618      	mov	r0, r3
 800638a:	3714      	adds	r7, #20
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr
 8006394:	00030d40 	.word	0x00030d40

08006398 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006398:	b480      	push	{r7}
 800639a:	b089      	sub	sp, #36	; 0x24
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	4611      	mov	r1, r2
 80063a4:	461a      	mov	r2, r3
 80063a6:	460b      	mov	r3, r1
 80063a8:	71fb      	strb	r3, [r7, #7]
 80063aa:	4613      	mov	r3, r2
 80063ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80063b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d123      	bne.n	8006406 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80063be:	88bb      	ldrh	r3, [r7, #4]
 80063c0:	3303      	adds	r3, #3
 80063c2:	089b      	lsrs	r3, r3, #2
 80063c4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80063c6:	2300      	movs	r3, #0
 80063c8:	61bb      	str	r3, [r7, #24]
 80063ca:	e018      	b.n	80063fe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80063cc:	79fb      	ldrb	r3, [r7, #7]
 80063ce:	031a      	lsls	r2, r3, #12
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	4413      	add	r3, r2
 80063d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063d8:	461a      	mov	r2, r3
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	6013      	str	r3, [r2, #0]
      pSrc++;
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	3301      	adds	r3, #1
 80063e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	3301      	adds	r3, #1
 80063ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	3301      	adds	r3, #1
 80063f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	3301      	adds	r3, #1
 80063f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	3301      	adds	r3, #1
 80063fc:	61bb      	str	r3, [r7, #24]
 80063fe:	69ba      	ldr	r2, [r7, #24]
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	429a      	cmp	r2, r3
 8006404:	d3e2      	bcc.n	80063cc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006406:	2300      	movs	r3, #0
}
 8006408:	4618      	mov	r0, r3
 800640a:	3724      	adds	r7, #36	; 0x24
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006414:	b480      	push	{r7}
 8006416:	b08b      	sub	sp, #44	; 0x2c
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	4613      	mov	r3, r2
 8006420:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800642a:	88fb      	ldrh	r3, [r7, #6]
 800642c:	089b      	lsrs	r3, r3, #2
 800642e:	b29b      	uxth	r3, r3
 8006430:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006432:	88fb      	ldrh	r3, [r7, #6]
 8006434:	f003 0303 	and.w	r3, r3, #3
 8006438:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800643a:	2300      	movs	r3, #0
 800643c:	623b      	str	r3, [r7, #32]
 800643e:	e014      	b.n	800646a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006440:	69bb      	ldr	r3, [r7, #24]
 8006442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644a:	601a      	str	r2, [r3, #0]
    pDest++;
 800644c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644e:	3301      	adds	r3, #1
 8006450:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006454:	3301      	adds	r3, #1
 8006456:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645a:	3301      	adds	r3, #1
 800645c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800645e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006460:	3301      	adds	r3, #1
 8006462:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006464:	6a3b      	ldr	r3, [r7, #32]
 8006466:	3301      	adds	r3, #1
 8006468:	623b      	str	r3, [r7, #32]
 800646a:	6a3a      	ldr	r2, [r7, #32]
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	429a      	cmp	r2, r3
 8006470:	d3e6      	bcc.n	8006440 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006472:	8bfb      	ldrh	r3, [r7, #30]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d01e      	beq.n	80064b6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006478:	2300      	movs	r3, #0
 800647a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006482:	461a      	mov	r2, r3
 8006484:	f107 0310 	add.w	r3, r7, #16
 8006488:	6812      	ldr	r2, [r2, #0]
 800648a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800648c:	693a      	ldr	r2, [r7, #16]
 800648e:	6a3b      	ldr	r3, [r7, #32]
 8006490:	b2db      	uxtb	r3, r3
 8006492:	00db      	lsls	r3, r3, #3
 8006494:	fa22 f303 	lsr.w	r3, r2, r3
 8006498:	b2da      	uxtb	r2, r3
 800649a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649c:	701a      	strb	r2, [r3, #0]
      i++;
 800649e:	6a3b      	ldr	r3, [r7, #32]
 80064a0:	3301      	adds	r3, #1
 80064a2:	623b      	str	r3, [r7, #32]
      pDest++;
 80064a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a6:	3301      	adds	r3, #1
 80064a8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80064aa:	8bfb      	ldrh	r3, [r7, #30]
 80064ac:	3b01      	subs	r3, #1
 80064ae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80064b0:	8bfb      	ldrh	r3, [r7, #30]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1ea      	bne.n	800648c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80064b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	372c      	adds	r7, #44	; 0x2c
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b085      	sub	sp, #20
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	695b      	ldr	r3, [r3, #20]
 80064d0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	699b      	ldr	r3, [r3, #24]
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	4013      	ands	r3, r2
 80064da:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80064dc:	68fb      	ldr	r3, [r7, #12]
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3714      	adds	r7, #20
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr

080064ea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80064ea:	b480      	push	{r7}
 80064ec:	b083      	sub	sp, #12
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	695b      	ldr	r3, [r3, #20]
 80064f6:	f003 0301 	and.w	r3, r3, #1
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	370c      	adds	r7, #12
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
	...

08006508 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006508:	b480      	push	{r7}
 800650a:	b085      	sub	sp, #20
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006510:	2300      	movs	r3, #0
 8006512:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	3301      	adds	r3, #1
 8006518:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	4a13      	ldr	r2, [pc, #76]	; (800656c <USB_CoreReset+0x64>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d901      	bls.n	8006526 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	e01b      	b.n	800655e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	2b00      	cmp	r3, #0
 800652c:	daf2      	bge.n	8006514 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800652e:	2300      	movs	r3, #0
 8006530:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	f043 0201 	orr.w	r2, r3, #1
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	3301      	adds	r3, #1
 8006542:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	4a09      	ldr	r2, [pc, #36]	; (800656c <USB_CoreReset+0x64>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d901      	bls.n	8006550 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800654c:	2303      	movs	r3, #3
 800654e:	e006      	b.n	800655e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	f003 0301 	and.w	r3, r3, #1
 8006558:	2b01      	cmp	r3, #1
 800655a:	d0f0      	beq.n	800653e <USB_CoreReset+0x36>

  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3714      	adds	r7, #20
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	00030d40 	.word	0x00030d40

08006570 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006570:	b084      	sub	sp, #16
 8006572:	b580      	push	{r7, lr}
 8006574:	b086      	sub	sp, #24
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
 800657a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800657e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006582:	2300      	movs	r3, #0
 8006584:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006590:	461a      	mov	r2, r3
 8006592:	2300      	movs	r3, #0
 8006594:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800659a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d018      	beq.n	80065f8 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80065c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d10a      	bne.n	80065e2 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	68fa      	ldr	r2, [r7, #12]
 80065d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065da:	f043 0304 	orr.w	r3, r3, #4
 80065de:	6013      	str	r3, [r2, #0]
 80065e0:	e014      	b.n	800660c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68fa      	ldr	r2, [r7, #12]
 80065ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065f0:	f023 0304 	bic.w	r3, r3, #4
 80065f4:	6013      	str	r3, [r2, #0]
 80065f6:	e009      	b.n	800660c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006606:	f023 0304 	bic.w	r3, r3, #4
 800660a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800660c:	2110      	movs	r1, #16
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f7ff fe5e 	bl	80062d0 <USB_FlushTxFifo>
 8006614:	4603      	mov	r3, r0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d001      	beq.n	800661e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f7ff fe8a 	bl	8006338 <USB_FlushRxFifo>
 8006624:	4603      	mov	r3, r0
 8006626:	2b00      	cmp	r3, #0
 8006628:	d001      	beq.n	800662e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800662e:	2300      	movs	r3, #0
 8006630:	613b      	str	r3, [r7, #16]
 8006632:	e015      	b.n	8006660 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	015a      	lsls	r2, r3, #5
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	4413      	add	r3, r2
 800663c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006640:	461a      	mov	r2, r3
 8006642:	f04f 33ff 	mov.w	r3, #4294967295
 8006646:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	015a      	lsls	r2, r3, #5
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	4413      	add	r3, r2
 8006650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006654:	461a      	mov	r2, r3
 8006656:	2300      	movs	r3, #0
 8006658:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	3301      	adds	r3, #1
 800665e:	613b      	str	r3, [r7, #16]
 8006660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006662:	693a      	ldr	r2, [r7, #16]
 8006664:	429a      	cmp	r2, r3
 8006666:	d3e5      	bcc.n	8006634 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f04f 32ff 	mov.w	r2, #4294967295
 8006674:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800667a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00b      	beq.n	800669a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006688:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4a13      	ldr	r2, [pc, #76]	; (80066dc <USB_HostInit+0x16c>)
 800668e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a13      	ldr	r2, [pc, #76]	; (80066e0 <USB_HostInit+0x170>)
 8006694:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006698:	e009      	b.n	80066ae <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2280      	movs	r2, #128	; 0x80
 800669e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4a10      	ldr	r2, [pc, #64]	; (80066e4 <USB_HostInit+0x174>)
 80066a4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a0f      	ldr	r2, [pc, #60]	; (80066e8 <USB_HostInit+0x178>)
 80066aa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80066ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d105      	bne.n	80066c0 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	699b      	ldr	r3, [r3, #24]
 80066b8:	f043 0210 	orr.w	r2, r3, #16
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	699a      	ldr	r2, [r3, #24]
 80066c4:	4b09      	ldr	r3, [pc, #36]	; (80066ec <USB_HostInit+0x17c>)
 80066c6:	4313      	orrs	r3, r2
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80066cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3718      	adds	r7, #24
 80066d2:	46bd      	mov	sp, r7
 80066d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066d8:	b004      	add	sp, #16
 80066da:	4770      	bx	lr
 80066dc:	01000200 	.word	0x01000200
 80066e0:	00e00300 	.word	0x00e00300
 80066e4:	00600080 	.word	0x00600080
 80066e8:	004000e0 	.word	0x004000e0
 80066ec:	a3200008 	.word	0xa3200008

080066f0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	460b      	mov	r3, r1
 80066fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800670e:	f023 0303 	bic.w	r3, r3, #3
 8006712:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	78fb      	ldrb	r3, [r7, #3]
 800671e:	f003 0303 	and.w	r3, r3, #3
 8006722:	68f9      	ldr	r1, [r7, #12]
 8006724:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006728:	4313      	orrs	r3, r2
 800672a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800672c:	78fb      	ldrb	r3, [r7, #3]
 800672e:	2b01      	cmp	r3, #1
 8006730:	d107      	bne.n	8006742 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006738:	461a      	mov	r2, r3
 800673a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800673e:	6053      	str	r3, [r2, #4]
 8006740:	e009      	b.n	8006756 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006742:	78fb      	ldrb	r3, [r7, #3]
 8006744:	2b02      	cmp	r3, #2
 8006746:	d106      	bne.n	8006756 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800674e:	461a      	mov	r2, r3
 8006750:	f241 7370 	movw	r3, #6000	; 0x1770
 8006754:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006756:	2300      	movs	r3, #0
}
 8006758:	4618      	mov	r0, r3
 800675a:	3714      	adds	r7, #20
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006770:	2300      	movs	r3, #0
 8006772:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006784:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800678e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006792:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006794:	2064      	movs	r0, #100	; 0x64
 8006796:	f7fb f8d3 	bl	8001940 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80067a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067a6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80067a8:	200a      	movs	r0, #10
 80067aa:	f7fb f8c9 	bl	8001940 <HAL_Delay>

  return HAL_OK;
 80067ae:	2300      	movs	r3, #0
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3710      	adds	r7, #16
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	460b      	mov	r3, r1
 80067c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80067c8:	2300      	movs	r3, #0
 80067ca:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80067dc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d109      	bne.n	80067fc <USB_DriveVbus+0x44>
 80067e8:	78fb      	ldrb	r3, [r7, #3]
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d106      	bne.n	80067fc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80067f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80067fa:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006806:	d109      	bne.n	800681c <USB_DriveVbus+0x64>
 8006808:	78fb      	ldrb	r3, [r7, #3]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d106      	bne.n	800681c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006816:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800681a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3714      	adds	r7, #20
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr

0800682a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800682a:	b480      	push	{r7}
 800682c:	b085      	sub	sp, #20
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006836:	2300      	movs	r3, #0
 8006838:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	0c5b      	lsrs	r3, r3, #17
 8006848:	f003 0303 	and.w	r3, r3, #3
}
 800684c:	4618      	mov	r0, r3
 800684e:	3714      	adds	r7, #20
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006858:	b480      	push	{r7}
 800685a:	b085      	sub	sp, #20
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	b29b      	uxth	r3, r3
}
 800686e:	4618      	mov	r0, r3
 8006870:	3714      	adds	r7, #20
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr
	...

0800687c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b088      	sub	sp, #32
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	4608      	mov	r0, r1
 8006886:	4611      	mov	r1, r2
 8006888:	461a      	mov	r2, r3
 800688a:	4603      	mov	r3, r0
 800688c:	70fb      	strb	r3, [r7, #3]
 800688e:	460b      	mov	r3, r1
 8006890:	70bb      	strb	r3, [r7, #2]
 8006892:	4613      	mov	r3, r2
 8006894:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006896:	2300      	movs	r3, #0
 8006898:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800689e:	78fb      	ldrb	r3, [r7, #3]
 80068a0:	015a      	lsls	r2, r3, #5
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	4413      	add	r3, r2
 80068a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068aa:	461a      	mov	r2, r3
 80068ac:	f04f 33ff 	mov.w	r3, #4294967295
 80068b0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80068b2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80068b6:	2b03      	cmp	r3, #3
 80068b8:	d87e      	bhi.n	80069b8 <USB_HC_Init+0x13c>
 80068ba:	a201      	add	r2, pc, #4	; (adr r2, 80068c0 <USB_HC_Init+0x44>)
 80068bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c0:	080068d1 	.word	0x080068d1
 80068c4:	0800697b 	.word	0x0800697b
 80068c8:	080068d1 	.word	0x080068d1
 80068cc:	0800693d 	.word	0x0800693d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80068d0:	78fb      	ldrb	r3, [r7, #3]
 80068d2:	015a      	lsls	r2, r3, #5
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	4413      	add	r3, r2
 80068d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068dc:	461a      	mov	r2, r3
 80068de:	f240 439d 	movw	r3, #1181	; 0x49d
 80068e2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80068e4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	da10      	bge.n	800690e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80068ec:	78fb      	ldrb	r3, [r7, #3]
 80068ee:	015a      	lsls	r2, r3, #5
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	4413      	add	r3, r2
 80068f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	78fa      	ldrb	r2, [r7, #3]
 80068fc:	0151      	lsls	r1, r2, #5
 80068fe:	693a      	ldr	r2, [r7, #16]
 8006900:	440a      	add	r2, r1
 8006902:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006906:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800690a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800690c:	e057      	b.n	80069be <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006916:	2b00      	cmp	r3, #0
 8006918:	d051      	beq.n	80069be <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800691a:	78fb      	ldrb	r3, [r7, #3]
 800691c:	015a      	lsls	r2, r3, #5
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	4413      	add	r3, r2
 8006922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	78fa      	ldrb	r2, [r7, #3]
 800692a:	0151      	lsls	r1, r2, #5
 800692c:	693a      	ldr	r2, [r7, #16]
 800692e:	440a      	add	r2, r1
 8006930:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006934:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006938:	60d3      	str	r3, [r2, #12]
      break;
 800693a:	e040      	b.n	80069be <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800693c:	78fb      	ldrb	r3, [r7, #3]
 800693e:	015a      	lsls	r2, r3, #5
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	4413      	add	r3, r2
 8006944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006948:	461a      	mov	r2, r3
 800694a:	f240 639d 	movw	r3, #1693	; 0x69d
 800694e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006950:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006954:	2b00      	cmp	r3, #0
 8006956:	da34      	bge.n	80069c2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006958:	78fb      	ldrb	r3, [r7, #3]
 800695a:	015a      	lsls	r2, r3, #5
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	4413      	add	r3, r2
 8006960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	78fa      	ldrb	r2, [r7, #3]
 8006968:	0151      	lsls	r1, r2, #5
 800696a:	693a      	ldr	r2, [r7, #16]
 800696c:	440a      	add	r2, r1
 800696e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006976:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006978:	e023      	b.n	80069c2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800697a:	78fb      	ldrb	r3, [r7, #3]
 800697c:	015a      	lsls	r2, r3, #5
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	4413      	add	r3, r2
 8006982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006986:	461a      	mov	r2, r3
 8006988:	f240 2325 	movw	r3, #549	; 0x225
 800698c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800698e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006992:	2b00      	cmp	r3, #0
 8006994:	da17      	bge.n	80069c6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006996:	78fb      	ldrb	r3, [r7, #3]
 8006998:	015a      	lsls	r2, r3, #5
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	4413      	add	r3, r2
 800699e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	78fa      	ldrb	r2, [r7, #3]
 80069a6:	0151      	lsls	r1, r2, #5
 80069a8:	693a      	ldr	r2, [r7, #16]
 80069aa:	440a      	add	r2, r1
 80069ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069b0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80069b4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80069b6:	e006      	b.n	80069c6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	77fb      	strb	r3, [r7, #31]
      break;
 80069bc:	e004      	b.n	80069c8 <USB_HC_Init+0x14c>
      break;
 80069be:	bf00      	nop
 80069c0:	e002      	b.n	80069c8 <USB_HC_Init+0x14c>
      break;
 80069c2:	bf00      	nop
 80069c4:	e000      	b.n	80069c8 <USB_HC_Init+0x14c>
      break;
 80069c6:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80069c8:	78fb      	ldrb	r3, [r7, #3]
 80069ca:	015a      	lsls	r2, r3, #5
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	4413      	add	r3, r2
 80069d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	78fa      	ldrb	r2, [r7, #3]
 80069d8:	0151      	lsls	r1, r2, #5
 80069da:	693a      	ldr	r2, [r7, #16]
 80069dc:	440a      	add	r2, r1
 80069de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069e2:	f043 0302 	orr.w	r3, r3, #2
 80069e6:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069ee:	699a      	ldr	r2, [r3, #24]
 80069f0:	78fb      	ldrb	r3, [r7, #3]
 80069f2:	f003 030f 	and.w	r3, r3, #15
 80069f6:	2101      	movs	r1, #1
 80069f8:	fa01 f303 	lsl.w	r3, r1, r3
 80069fc:	6939      	ldr	r1, [r7, #16]
 80069fe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006a02:	4313      	orrs	r3, r2
 8006a04:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	699b      	ldr	r3, [r3, #24]
 8006a0a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006a12:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	da03      	bge.n	8006a22 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006a1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a1e:	61bb      	str	r3, [r7, #24]
 8006a20:	e001      	b.n	8006a26 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8006a22:	2300      	movs	r3, #0
 8006a24:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f7ff feff 	bl	800682a <USB_GetHostSpeed>
 8006a2c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006a2e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	d106      	bne.n	8006a44 <USB_HC_Init+0x1c8>
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	d003      	beq.n	8006a44 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006a3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006a40:	617b      	str	r3, [r7, #20]
 8006a42:	e001      	b.n	8006a48 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006a44:	2300      	movs	r3, #0
 8006a46:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a48:	787b      	ldrb	r3, [r7, #1]
 8006a4a:	059b      	lsls	r3, r3, #22
 8006a4c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006a50:	78bb      	ldrb	r3, [r7, #2]
 8006a52:	02db      	lsls	r3, r3, #11
 8006a54:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a58:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006a5a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006a5e:	049b      	lsls	r3, r3, #18
 8006a60:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006a64:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006a66:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006a68:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006a6c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a72:	78fb      	ldrb	r3, [r7, #3]
 8006a74:	0159      	lsls	r1, r3, #5
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	440b      	add	r3, r1
 8006a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a7e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a84:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006a86:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006a8a:	2b03      	cmp	r3, #3
 8006a8c:	d003      	beq.n	8006a96 <USB_HC_Init+0x21a>
 8006a8e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d10f      	bne.n	8006ab6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006a96:	78fb      	ldrb	r3, [r7, #3]
 8006a98:	015a      	lsls	r2, r3, #5
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	78fa      	ldrb	r2, [r7, #3]
 8006aa6:	0151      	lsls	r1, r2, #5
 8006aa8:	693a      	ldr	r2, [r7, #16]
 8006aaa:	440a      	add	r2, r1
 8006aac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ab0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ab4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006ab6:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3720      	adds	r7, #32
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b08c      	sub	sp, #48	; 0x30
 8006ac4:	af02      	add	r7, sp, #8
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	4613      	mov	r3, r2
 8006acc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	785b      	ldrb	r3, [r3, #1]
 8006ad6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006ad8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006adc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d02d      	beq.n	8006b46 <USB_HC_StartXfer+0x86>
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	791b      	ldrb	r3, [r3, #4]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d129      	bne.n	8006b46 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006af2:	79fb      	ldrb	r3, [r7, #7]
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d117      	bne.n	8006b28 <USB_HC_StartXfer+0x68>
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	79db      	ldrb	r3, [r3, #7]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d003      	beq.n	8006b08 <USB_HC_StartXfer+0x48>
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	79db      	ldrb	r3, [r3, #7]
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	d10f      	bne.n	8006b28 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	015a      	lsls	r2, r3, #5
 8006b0c:	6a3b      	ldr	r3, [r7, #32]
 8006b0e:	4413      	add	r3, r2
 8006b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	69fa      	ldr	r2, [r7, #28]
 8006b18:	0151      	lsls	r1, r2, #5
 8006b1a:	6a3a      	ldr	r2, [r7, #32]
 8006b1c:	440a      	add	r2, r1
 8006b1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b26:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006b28:	79fb      	ldrb	r3, [r7, #7]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d10b      	bne.n	8006b46 <USB_HC_StartXfer+0x86>
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	795b      	ldrb	r3, [r3, #5]
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d107      	bne.n	8006b46 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	785b      	ldrb	r3, [r3, #1]
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	68f8      	ldr	r0, [r7, #12]
 8006b3e:	f000 fa0f 	bl	8006f60 <USB_DoPing>
      return HAL_OK;
 8006b42:	2300      	movs	r3, #0
 8006b44:	e0f8      	b.n	8006d38 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d018      	beq.n	8006b80 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	695b      	ldr	r3, [r3, #20]
 8006b52:	68ba      	ldr	r2, [r7, #8]
 8006b54:	8912      	ldrh	r2, [r2, #8]
 8006b56:	4413      	add	r3, r2
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	68ba      	ldr	r2, [r7, #8]
 8006b5c:	8912      	ldrh	r2, [r2, #8]
 8006b5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b62:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006b64:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006b66:	8b7b      	ldrh	r3, [r7, #26]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d90b      	bls.n	8006b84 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006b6c:	8b7b      	ldrh	r3, [r7, #26]
 8006b6e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006b70:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b72:	68ba      	ldr	r2, [r7, #8]
 8006b74:	8912      	ldrh	r2, [r2, #8]
 8006b76:	fb03 f202 	mul.w	r2, r3, r2
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	611a      	str	r2, [r3, #16]
 8006b7e:	e001      	b.n	8006b84 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006b80:	2301      	movs	r3, #1
 8006b82:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	78db      	ldrb	r3, [r3, #3]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d007      	beq.n	8006b9c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006b8c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b8e:	68ba      	ldr	r2, [r7, #8]
 8006b90:	8912      	ldrh	r2, [r2, #8]
 8006b92:	fb03 f202 	mul.w	r2, r3, r2
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	611a      	str	r2, [r3, #16]
 8006b9a:	e003      	b.n	8006ba4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	695a      	ldr	r2, [r3, #20]
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	691b      	ldr	r3, [r3, #16]
 8006ba8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006bac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006bae:	04d9      	lsls	r1, r3, #19
 8006bb0:	4b63      	ldr	r3, [pc, #396]	; (8006d40 <USB_HC_StartXfer+0x280>)
 8006bb2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006bb4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	7a9b      	ldrb	r3, [r3, #10]
 8006bba:	075b      	lsls	r3, r3, #29
 8006bbc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006bc0:	69f9      	ldr	r1, [r7, #28]
 8006bc2:	0148      	lsls	r0, r1, #5
 8006bc4:	6a39      	ldr	r1, [r7, #32]
 8006bc6:	4401      	add	r1, r0
 8006bc8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006bcc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006bce:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006bd0:	79fb      	ldrb	r3, [r7, #7]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d009      	beq.n	8006bea <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	68d9      	ldr	r1, [r3, #12]
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	015a      	lsls	r2, r3, #5
 8006bde:	6a3b      	ldr	r3, [r7, #32]
 8006be0:	4413      	add	r3, r2
 8006be2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006be6:	460a      	mov	r2, r1
 8006be8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006bea:	6a3b      	ldr	r3, [r7, #32]
 8006bec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	f003 0301 	and.w	r3, r3, #1
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	bf0c      	ite	eq
 8006bfa:	2301      	moveq	r3, #1
 8006bfc:	2300      	movne	r3, #0
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	015a      	lsls	r2, r3, #5
 8006c06:	6a3b      	ldr	r3, [r7, #32]
 8006c08:	4413      	add	r3, r2
 8006c0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	69fa      	ldr	r2, [r7, #28]
 8006c12:	0151      	lsls	r1, r2, #5
 8006c14:	6a3a      	ldr	r2, [r7, #32]
 8006c16:	440a      	add	r2, r1
 8006c18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c1c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006c20:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	015a      	lsls	r2, r3, #5
 8006c26:	6a3b      	ldr	r3, [r7, #32]
 8006c28:	4413      	add	r3, r2
 8006c2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	7e7b      	ldrb	r3, [r7, #25]
 8006c32:	075b      	lsls	r3, r3, #29
 8006c34:	69f9      	ldr	r1, [r7, #28]
 8006c36:	0148      	lsls	r0, r1, #5
 8006c38:	6a39      	ldr	r1, [r7, #32]
 8006c3a:	4401      	add	r1, r0
 8006c3c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006c40:	4313      	orrs	r3, r2
 8006c42:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	015a      	lsls	r2, r3, #5
 8006c48:	6a3b      	ldr	r3, [r7, #32]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006c5a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	78db      	ldrb	r3, [r3, #3]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d004      	beq.n	8006c6e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c6a:	613b      	str	r3, [r7, #16]
 8006c6c:	e003      	b.n	8006c76 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c74:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c7c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	015a      	lsls	r2, r3, #5
 8006c82:	6a3b      	ldr	r3, [r7, #32]
 8006c84:	4413      	add	r3, r2
 8006c86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006c90:	79fb      	ldrb	r3, [r7, #7]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d001      	beq.n	8006c9a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006c96:	2300      	movs	r3, #0
 8006c98:	e04e      	b.n	8006d38 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	78db      	ldrb	r3, [r3, #3]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d149      	bne.n	8006d36 <USB_HC_StartXfer+0x276>
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	695b      	ldr	r3, [r3, #20]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d045      	beq.n	8006d36 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	79db      	ldrb	r3, [r3, #7]
 8006cae:	2b03      	cmp	r3, #3
 8006cb0:	d830      	bhi.n	8006d14 <USB_HC_StartXfer+0x254>
 8006cb2:	a201      	add	r2, pc, #4	; (adr r2, 8006cb8 <USB_HC_StartXfer+0x1f8>)
 8006cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb8:	08006cc9 	.word	0x08006cc9
 8006cbc:	08006ced 	.word	0x08006ced
 8006cc0:	08006cc9 	.word	0x08006cc9
 8006cc4:	08006ced 	.word	0x08006ced
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	695b      	ldr	r3, [r3, #20]
 8006ccc:	3303      	adds	r3, #3
 8006cce:	089b      	lsrs	r3, r3, #2
 8006cd0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006cd2:	8afa      	ldrh	r2, [r7, #22]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d91c      	bls.n	8006d18 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	699b      	ldr	r3, [r3, #24]
 8006ce2:	f043 0220 	orr.w	r2, r3, #32
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	619a      	str	r2, [r3, #24]
        }
        break;
 8006cea:	e015      	b.n	8006d18 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	695b      	ldr	r3, [r3, #20]
 8006cf0:	3303      	adds	r3, #3
 8006cf2:	089b      	lsrs	r3, r3, #2
 8006cf4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006cf6:	8afa      	ldrh	r2, [r7, #22]
 8006cf8:	6a3b      	ldr	r3, [r7, #32]
 8006cfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cfe:	691b      	ldr	r3, [r3, #16]
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d90a      	bls.n	8006d1c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	699b      	ldr	r3, [r3, #24]
 8006d0a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	619a      	str	r2, [r3, #24]
        }
        break;
 8006d12:	e003      	b.n	8006d1c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006d14:	bf00      	nop
 8006d16:	e002      	b.n	8006d1e <USB_HC_StartXfer+0x25e>
        break;
 8006d18:	bf00      	nop
 8006d1a:	e000      	b.n	8006d1e <USB_HC_StartXfer+0x25e>
        break;
 8006d1c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	68d9      	ldr	r1, [r3, #12]
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	785a      	ldrb	r2, [r3, #1]
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	695b      	ldr	r3, [r3, #20]
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	2000      	movs	r0, #0
 8006d2e:	9000      	str	r0, [sp, #0]
 8006d30:	68f8      	ldr	r0, [r7, #12]
 8006d32:	f7ff fb31 	bl	8006398 <USB_WritePacket>
  }

  return HAL_OK;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3728      	adds	r7, #40	; 0x28
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	1ff80000 	.word	0x1ff80000

08006d44 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b085      	sub	sp, #20
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d56:	695b      	ldr	r3, [r3, #20]
 8006d58:	b29b      	uxth	r3, r3
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3714      	adds	r7, #20
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr

08006d66 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006d66:	b480      	push	{r7}
 8006d68:	b089      	sub	sp, #36	; 0x24
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
 8006d6e:	460b      	mov	r3, r1
 8006d70:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006d76:	78fb      	ldrb	r3, [r7, #3]
 8006d78:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	015a      	lsls	r2, r3, #5
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	4413      	add	r3, r2
 8006d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	0c9b      	lsrs	r3, r3, #18
 8006d8e:	f003 0303 	and.w	r3, r3, #3
 8006d92:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006d94:	69bb      	ldr	r3, [r7, #24]
 8006d96:	015a      	lsls	r2, r3, #5
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	4413      	add	r3, r2
 8006d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	0fdb      	lsrs	r3, r3, #31
 8006da4:	f003 0301 	and.w	r3, r3, #1
 8006da8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	f003 0320 	and.w	r3, r3, #32
 8006db2:	2b20      	cmp	r3, #32
 8006db4:	d104      	bne.n	8006dc0 <USB_HC_Halt+0x5a>
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d101      	bne.n	8006dc0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	e0c8      	b.n	8006f52 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d002      	beq.n	8006dcc <USB_HC_Halt+0x66>
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	2b02      	cmp	r3, #2
 8006dca:	d163      	bne.n	8006e94 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006dcc:	69bb      	ldr	r3, [r7, #24]
 8006dce:	015a      	lsls	r2, r3, #5
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	69ba      	ldr	r2, [r7, #24]
 8006ddc:	0151      	lsls	r1, r2, #5
 8006dde:	69fa      	ldr	r2, [r7, #28]
 8006de0:	440a      	add	r2, r1
 8006de2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006de6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006dea:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	f003 0320 	and.w	r3, r3, #32
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f040 80ab 	bne.w	8006f50 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dfe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d133      	bne.n	8006e6e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	015a      	lsls	r2, r3, #5
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	69ba      	ldr	r2, [r7, #24]
 8006e16:	0151      	lsls	r1, r2, #5
 8006e18:	69fa      	ldr	r2, [r7, #28]
 8006e1a:	440a      	add	r2, r1
 8006e1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e24:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	015a      	lsls	r2, r3, #5
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	69ba      	ldr	r2, [r7, #24]
 8006e36:	0151      	lsls	r1, r2, #5
 8006e38:	69fa      	ldr	r2, [r7, #28]
 8006e3a:	440a      	add	r2, r1
 8006e3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e44:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	3301      	adds	r3, #1
 8006e4a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e52:	d81d      	bhi.n	8006e90 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	015a      	lsls	r2, r3, #5
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	4413      	add	r3, r2
 8006e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e6a:	d0ec      	beq.n	8006e46 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006e6c:	e070      	b.n	8006f50 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	015a      	lsls	r2, r3, #5
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	4413      	add	r3, r2
 8006e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	69ba      	ldr	r2, [r7, #24]
 8006e7e:	0151      	lsls	r1, r2, #5
 8006e80:	69fa      	ldr	r2, [r7, #28]
 8006e82:	440a      	add	r2, r1
 8006e84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e8c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006e8e:	e05f      	b.n	8006f50 <USB_HC_Halt+0x1ea>
            break;
 8006e90:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006e92:	e05d      	b.n	8006f50 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	015a      	lsls	r2, r3, #5
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	4413      	add	r3, r2
 8006e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	69ba      	ldr	r2, [r7, #24]
 8006ea4:	0151      	lsls	r1, r2, #5
 8006ea6:	69fa      	ldr	r2, [r7, #28]
 8006ea8:	440a      	add	r2, r1
 8006eaa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006eae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006eb2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006eb4:	69fb      	ldr	r3, [r7, #28]
 8006eb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006eba:	691b      	ldr	r3, [r3, #16]
 8006ebc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d133      	bne.n	8006f2c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	015a      	lsls	r2, r3, #5
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	4413      	add	r3, r2
 8006ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	69ba      	ldr	r2, [r7, #24]
 8006ed4:	0151      	lsls	r1, r2, #5
 8006ed6:	69fa      	ldr	r2, [r7, #28]
 8006ed8:	440a      	add	r2, r1
 8006eda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ede:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ee2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006ee4:	69bb      	ldr	r3, [r7, #24]
 8006ee6:	015a      	lsls	r2, r3, #5
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	4413      	add	r3, r2
 8006eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	69ba      	ldr	r2, [r7, #24]
 8006ef4:	0151      	lsls	r1, r2, #5
 8006ef6:	69fa      	ldr	r2, [r7, #28]
 8006ef8:	440a      	add	r2, r1
 8006efa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006efe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f02:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	3301      	adds	r3, #1
 8006f08:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f10:	d81d      	bhi.n	8006f4e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	015a      	lsls	r2, r3, #5
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	4413      	add	r3, r2
 8006f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f28:	d0ec      	beq.n	8006f04 <USB_HC_Halt+0x19e>
 8006f2a:	e011      	b.n	8006f50 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	015a      	lsls	r2, r3, #5
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	4413      	add	r3, r2
 8006f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	69ba      	ldr	r2, [r7, #24]
 8006f3c:	0151      	lsls	r1, r2, #5
 8006f3e:	69fa      	ldr	r2, [r7, #28]
 8006f40:	440a      	add	r2, r1
 8006f42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f4a:	6013      	str	r3, [r2, #0]
 8006f4c:	e000      	b.n	8006f50 <USB_HC_Halt+0x1ea>
          break;
 8006f4e:	bf00      	nop
    }
  }

  return HAL_OK;
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3724      	adds	r7, #36	; 0x24
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr
	...

08006f60 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b087      	sub	sp, #28
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	460b      	mov	r3, r1
 8006f6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006f70:	78fb      	ldrb	r3, [r7, #3]
 8006f72:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006f74:	2301      	movs	r3, #1
 8006f76:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	04da      	lsls	r2, r3, #19
 8006f7c:	4b15      	ldr	r3, [pc, #84]	; (8006fd4 <USB_DoPing+0x74>)
 8006f7e:	4013      	ands	r3, r2
 8006f80:	693a      	ldr	r2, [r7, #16]
 8006f82:	0151      	lsls	r1, r2, #5
 8006f84:	697a      	ldr	r2, [r7, #20]
 8006f86:	440a      	add	r2, r1
 8006f88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f90:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	015a      	lsls	r2, r3, #5
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	4413      	add	r3, r2
 8006f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006fa8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006fb0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	015a      	lsls	r2, r3, #5
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	4413      	add	r3, r2
 8006fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	371c      	adds	r7, #28
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr
 8006fd2:	bf00      	nop
 8006fd4:	1ff80000 	.word	0x1ff80000

08006fd8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b088      	sub	sp, #32
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f7ff f911 	bl	8006214 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006ff2:	2110      	movs	r1, #16
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f7ff f96b 	bl	80062d0 <USB_FlushTxFifo>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d001      	beq.n	8007004 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f7ff f997 	bl	8006338 <USB_FlushRxFifo>
 800700a:	4603      	mov	r3, r0
 800700c:	2b00      	cmp	r3, #0
 800700e:	d001      	beq.n	8007014 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007014:	2300      	movs	r3, #0
 8007016:	61bb      	str	r3, [r7, #24]
 8007018:	e01f      	b.n	800705a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	015a      	lsls	r2, r3, #5
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	4413      	add	r3, r2
 8007022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007030:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007038:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007040:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007042:	69bb      	ldr	r3, [r7, #24]
 8007044:	015a      	lsls	r2, r3, #5
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	4413      	add	r3, r2
 800704a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800704e:	461a      	mov	r2, r3
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	3301      	adds	r3, #1
 8007058:	61bb      	str	r3, [r7, #24]
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	2b0f      	cmp	r3, #15
 800705e:	d9dc      	bls.n	800701a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007060:	2300      	movs	r3, #0
 8007062:	61bb      	str	r3, [r7, #24]
 8007064:	e034      	b.n	80070d0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	015a      	lsls	r2, r3, #5
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	4413      	add	r3, r2
 800706e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800707c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007084:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800708c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	015a      	lsls	r2, r3, #5
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	4413      	add	r3, r2
 8007096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800709a:	461a      	mov	r2, r3
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	3301      	adds	r3, #1
 80070a4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80070ac:	d80c      	bhi.n	80070c8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	015a      	lsls	r2, r3, #5
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	4413      	add	r3, r2
 80070b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070c4:	d0ec      	beq.n	80070a0 <USB_StopHost+0xc8>
 80070c6:	e000      	b.n	80070ca <USB_StopHost+0xf2>
        break;
 80070c8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	3301      	adds	r3, #1
 80070ce:	61bb      	str	r3, [r7, #24]
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	2b0f      	cmp	r3, #15
 80070d4:	d9c7      	bls.n	8007066 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070dc:	461a      	mov	r2, r3
 80070de:	f04f 33ff 	mov.w	r3, #4294967295
 80070e2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f04f 32ff 	mov.w	r2, #4294967295
 80070ea:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f7ff f880 	bl	80061f2 <USB_EnableGlobalInt>

  return ret;
 80070f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3720      	adds	r7, #32
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80070fc:	b590      	push	{r4, r7, lr}
 80070fe:	b089      	sub	sp, #36	; 0x24
 8007100:	af04      	add	r7, sp, #16
 8007102:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007104:	2301      	movs	r3, #1
 8007106:	2202      	movs	r2, #2
 8007108:	2102      	movs	r1, #2
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 fcb2 	bl	8007a74 <USBH_FindInterface>
 8007110:	4603      	mov	r3, r0
 8007112:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007114:	7bfb      	ldrb	r3, [r7, #15]
 8007116:	2bff      	cmp	r3, #255	; 0xff
 8007118:	d002      	beq.n	8007120 <USBH_CDC_InterfaceInit+0x24>
 800711a:	7bfb      	ldrb	r3, [r7, #15]
 800711c:	2b01      	cmp	r3, #1
 800711e:	d901      	bls.n	8007124 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007120:	2302      	movs	r3, #2
 8007122:	e13d      	b.n	80073a0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007124:	7bfb      	ldrb	r3, [r7, #15]
 8007126:	4619      	mov	r1, r3
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f000 fc87 	bl	8007a3c <USBH_SelectInterface>
 800712e:	4603      	mov	r3, r0
 8007130:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007132:	7bbb      	ldrb	r3, [r7, #14]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d001      	beq.n	800713c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007138:	2302      	movs	r3, #2
 800713a:	e131      	b.n	80073a0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007142:	2050      	movs	r0, #80	; 0x50
 8007144:	f005 fd2c 	bl	800cba0 <malloc>
 8007148:	4603      	mov	r3, r0
 800714a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007152:	69db      	ldr	r3, [r3, #28]
 8007154:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d101      	bne.n	8007160 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800715c:	2302      	movs	r3, #2
 800715e:	e11f      	b.n	80073a0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007160:	2250      	movs	r2, #80	; 0x50
 8007162:	2100      	movs	r1, #0
 8007164:	68b8      	ldr	r0, [r7, #8]
 8007166:	f005 fdd7 	bl	800cd18 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800716a:	7bfb      	ldrb	r3, [r7, #15]
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	211a      	movs	r1, #26
 8007170:	fb01 f303 	mul.w	r3, r1, r3
 8007174:	4413      	add	r3, r2
 8007176:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	b25b      	sxtb	r3, r3
 800717e:	2b00      	cmp	r3, #0
 8007180:	da15      	bge.n	80071ae <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007182:	7bfb      	ldrb	r3, [r7, #15]
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	211a      	movs	r1, #26
 8007188:	fb01 f303 	mul.w	r3, r1, r3
 800718c:	4413      	add	r3, r2
 800718e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007192:	781a      	ldrb	r2, [r3, #0]
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007198:	7bfb      	ldrb	r3, [r7, #15]
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	211a      	movs	r1, #26
 800719e:	fb01 f303 	mul.w	r3, r1, r3
 80071a2:	4413      	add	r3, r2
 80071a4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80071a8:	881a      	ldrh	r2, [r3, #0]
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	785b      	ldrb	r3, [r3, #1]
 80071b2:	4619      	mov	r1, r3
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f002 f986 	bl	80094c6 <USBH_AllocPipe>
 80071ba:	4603      	mov	r3, r0
 80071bc:	461a      	mov	r2, r3
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	7819      	ldrb	r1, [r3, #0]
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	7858      	ldrb	r0, [r3, #1]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80071d6:	68ba      	ldr	r2, [r7, #8]
 80071d8:	8952      	ldrh	r2, [r2, #10]
 80071da:	9202      	str	r2, [sp, #8]
 80071dc:	2203      	movs	r2, #3
 80071de:	9201      	str	r2, [sp, #4]
 80071e0:	9300      	str	r3, [sp, #0]
 80071e2:	4623      	mov	r3, r4
 80071e4:	4602      	mov	r2, r0
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f002 f93e 	bl	8009468 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	2200      	movs	r2, #0
 80071f2:	4619      	mov	r1, r3
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f005 fc4f 	bl	800ca98 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80071fa:	2300      	movs	r3, #0
 80071fc:	2200      	movs	r2, #0
 80071fe:	210a      	movs	r1, #10
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 fc37 	bl	8007a74 <USBH_FindInterface>
 8007206:	4603      	mov	r3, r0
 8007208:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800720a:	7bfb      	ldrb	r3, [r7, #15]
 800720c:	2bff      	cmp	r3, #255	; 0xff
 800720e:	d002      	beq.n	8007216 <USBH_CDC_InterfaceInit+0x11a>
 8007210:	7bfb      	ldrb	r3, [r7, #15]
 8007212:	2b01      	cmp	r3, #1
 8007214:	d901      	bls.n	800721a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007216:	2302      	movs	r3, #2
 8007218:	e0c2      	b.n	80073a0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800721a:	7bfb      	ldrb	r3, [r7, #15]
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	211a      	movs	r1, #26
 8007220:	fb01 f303 	mul.w	r3, r1, r3
 8007224:	4413      	add	r3, r2
 8007226:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	b25b      	sxtb	r3, r3
 800722e:	2b00      	cmp	r3, #0
 8007230:	da16      	bge.n	8007260 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007232:	7bfb      	ldrb	r3, [r7, #15]
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	211a      	movs	r1, #26
 8007238:	fb01 f303 	mul.w	r3, r1, r3
 800723c:	4413      	add	r3, r2
 800723e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007242:	781a      	ldrb	r2, [r3, #0]
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007248:	7bfb      	ldrb	r3, [r7, #15]
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	211a      	movs	r1, #26
 800724e:	fb01 f303 	mul.w	r3, r1, r3
 8007252:	4413      	add	r3, r2
 8007254:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007258:	881a      	ldrh	r2, [r3, #0]
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	835a      	strh	r2, [r3, #26]
 800725e:	e015      	b.n	800728c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007260:	7bfb      	ldrb	r3, [r7, #15]
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	211a      	movs	r1, #26
 8007266:	fb01 f303 	mul.w	r3, r1, r3
 800726a:	4413      	add	r3, r2
 800726c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007270:	781a      	ldrb	r2, [r3, #0]
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007276:	7bfb      	ldrb	r3, [r7, #15]
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	211a      	movs	r1, #26
 800727c:	fb01 f303 	mul.w	r3, r1, r3
 8007280:	4413      	add	r3, r2
 8007282:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007286:	881a      	ldrh	r2, [r3, #0]
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800728c:	7bfb      	ldrb	r3, [r7, #15]
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	211a      	movs	r1, #26
 8007292:	fb01 f303 	mul.w	r3, r1, r3
 8007296:	4413      	add	r3, r2
 8007298:	f203 3356 	addw	r3, r3, #854	; 0x356
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	b25b      	sxtb	r3, r3
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	da16      	bge.n	80072d2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80072a4:	7bfb      	ldrb	r3, [r7, #15]
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	211a      	movs	r1, #26
 80072aa:	fb01 f303 	mul.w	r3, r1, r3
 80072ae:	4413      	add	r3, r2
 80072b0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80072b4:	781a      	ldrb	r2, [r3, #0]
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80072ba:	7bfb      	ldrb	r3, [r7, #15]
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	211a      	movs	r1, #26
 80072c0:	fb01 f303 	mul.w	r3, r1, r3
 80072c4:	4413      	add	r3, r2
 80072c6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80072ca:	881a      	ldrh	r2, [r3, #0]
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	835a      	strh	r2, [r3, #26]
 80072d0:	e015      	b.n	80072fe <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80072d2:	7bfb      	ldrb	r3, [r7, #15]
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	211a      	movs	r1, #26
 80072d8:	fb01 f303 	mul.w	r3, r1, r3
 80072dc:	4413      	add	r3, r2
 80072de:	f203 3356 	addw	r3, r3, #854	; 0x356
 80072e2:	781a      	ldrb	r2, [r3, #0]
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80072e8:	7bfb      	ldrb	r3, [r7, #15]
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	211a      	movs	r1, #26
 80072ee:	fb01 f303 	mul.w	r3, r1, r3
 80072f2:	4413      	add	r3, r2
 80072f4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80072f8:	881a      	ldrh	r2, [r3, #0]
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	7b9b      	ldrb	r3, [r3, #14]
 8007302:	4619      	mov	r1, r3
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f002 f8de 	bl	80094c6 <USBH_AllocPipe>
 800730a:	4603      	mov	r3, r0
 800730c:	461a      	mov	r2, r3
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	7bdb      	ldrb	r3, [r3, #15]
 8007316:	4619      	mov	r1, r3
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f002 f8d4 	bl	80094c6 <USBH_AllocPipe>
 800731e:	4603      	mov	r3, r0
 8007320:	461a      	mov	r2, r3
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	7b59      	ldrb	r1, [r3, #13]
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	7b98      	ldrb	r0, [r3, #14]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800733a:	68ba      	ldr	r2, [r7, #8]
 800733c:	8b12      	ldrh	r2, [r2, #24]
 800733e:	9202      	str	r2, [sp, #8]
 8007340:	2202      	movs	r2, #2
 8007342:	9201      	str	r2, [sp, #4]
 8007344:	9300      	str	r3, [sp, #0]
 8007346:	4623      	mov	r3, r4
 8007348:	4602      	mov	r2, r0
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f002 f88c 	bl	8009468 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	7b19      	ldrb	r1, [r3, #12]
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	7bd8      	ldrb	r0, [r3, #15]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007364:	68ba      	ldr	r2, [r7, #8]
 8007366:	8b52      	ldrh	r2, [r2, #26]
 8007368:	9202      	str	r2, [sp, #8]
 800736a:	2202      	movs	r2, #2
 800736c:	9201      	str	r2, [sp, #4]
 800736e:	9300      	str	r3, [sp, #0]
 8007370:	4623      	mov	r3, r4
 8007372:	4602      	mov	r2, r0
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f002 f877 	bl	8009468 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	2200      	movs	r2, #0
 800737e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	7b5b      	ldrb	r3, [r3, #13]
 8007386:	2200      	movs	r2, #0
 8007388:	4619      	mov	r1, r3
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f005 fb84 	bl	800ca98 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	7b1b      	ldrb	r3, [r3, #12]
 8007394:	2200      	movs	r2, #0
 8007396:	4619      	mov	r1, r3
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f005 fb7d 	bl	800ca98 <USBH_LL_SetToggle>

  return USBH_OK;
 800739e:	2300      	movs	r3, #0
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3714      	adds	r7, #20
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd90      	pop	{r4, r7, pc}

080073a8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073b6:	69db      	ldr	r3, [r3, #28]
 80073b8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d00e      	beq.n	80073e0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	4619      	mov	r1, r3
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f002 f86c 	bl	80094a6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	4619      	mov	r1, r3
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f002 f897 	bl	8009508 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2200      	movs	r2, #0
 80073de:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	7b1b      	ldrb	r3, [r3, #12]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d00e      	beq.n	8007406 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	7b1b      	ldrb	r3, [r3, #12]
 80073ec:	4619      	mov	r1, r3
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f002 f859 	bl	80094a6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	7b1b      	ldrb	r3, [r3, #12]
 80073f8:	4619      	mov	r1, r3
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f002 f884 	bl	8009508 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2200      	movs	r2, #0
 8007404:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	7b5b      	ldrb	r3, [r3, #13]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00e      	beq.n	800742c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	7b5b      	ldrb	r3, [r3, #13]
 8007412:	4619      	mov	r1, r3
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f002 f846 	bl	80094a6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	7b5b      	ldrb	r3, [r3, #13]
 800741e:	4619      	mov	r1, r3
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f002 f871 	bl	8009508 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2200      	movs	r2, #0
 800742a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007432:	69db      	ldr	r3, [r3, #28]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d00b      	beq.n	8007450 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800743e:	69db      	ldr	r3, [r3, #28]
 8007440:	4618      	mov	r0, r3
 8007442:	f005 fbb5 	bl	800cbb0 <free>
    phost->pActiveClass->pData = 0U;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800744c:	2200      	movs	r2, #0
 800744e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007450:	2300      	movs	r3, #0
}
 8007452:	4618      	mov	r0, r3
 8007454:	3710      	adds	r7, #16
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800745a:	b580      	push	{r7, lr}
 800745c:	b084      	sub	sp, #16
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007468:	69db      	ldr	r3, [r3, #28]
 800746a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	3340      	adds	r3, #64	; 0x40
 8007470:	4619      	mov	r1, r3
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 f8b1 	bl	80075da <GetLineCoding>
 8007478:	4603      	mov	r3, r0
 800747a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800747c:	7afb      	ldrb	r3, [r7, #11]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d105      	bne.n	800748e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007488:	2102      	movs	r1, #2
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800748e:	7afb      	ldrb	r3, [r7, #11]
}
 8007490:	4618      	mov	r0, r3
 8007492:	3710      	adds	r7, #16
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80074a0:	2301      	movs	r3, #1
 80074a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80074a4:	2300      	movs	r3, #0
 80074a6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074ae:	69db      	ldr	r3, [r3, #28]
 80074b0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80074b8:	2b04      	cmp	r3, #4
 80074ba:	d877      	bhi.n	80075ac <USBH_CDC_Process+0x114>
 80074bc:	a201      	add	r2, pc, #4	; (adr r2, 80074c4 <USBH_CDC_Process+0x2c>)
 80074be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c2:	bf00      	nop
 80074c4:	080074d9 	.word	0x080074d9
 80074c8:	080074df 	.word	0x080074df
 80074cc:	0800750f 	.word	0x0800750f
 80074d0:	08007583 	.word	0x08007583
 80074d4:	08007591 	.word	0x08007591
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80074d8:	2300      	movs	r3, #0
 80074da:	73fb      	strb	r3, [r7, #15]
      break;
 80074dc:	e06d      	b.n	80075ba <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074e2:	4619      	mov	r1, r3
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 f897 	bl	8007618 <SetLineCoding>
 80074ea:	4603      	mov	r3, r0
 80074ec:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80074ee:	7bbb      	ldrb	r3, [r7, #14]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d104      	bne.n	80074fe <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	2202      	movs	r2, #2
 80074f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80074fc:	e058      	b.n	80075b0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80074fe:	7bbb      	ldrb	r3, [r7, #14]
 8007500:	2b01      	cmp	r3, #1
 8007502:	d055      	beq.n	80075b0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	2204      	movs	r2, #4
 8007508:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800750c:	e050      	b.n	80075b0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	3340      	adds	r3, #64	; 0x40
 8007512:	4619      	mov	r1, r3
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 f860 	bl	80075da <GetLineCoding>
 800751a:	4603      	mov	r3, r0
 800751c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800751e:	7bbb      	ldrb	r3, [r7, #14]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d126      	bne.n	8007572 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	2200      	movs	r2, #0
 8007528:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007536:	791b      	ldrb	r3, [r3, #4]
 8007538:	429a      	cmp	r2, r3
 800753a:	d13b      	bne.n	80075b4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007546:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007548:	429a      	cmp	r2, r3
 800754a:	d133      	bne.n	80075b4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007556:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007558:	429a      	cmp	r2, r3
 800755a:	d12b      	bne.n	80075b4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007564:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007566:	429a      	cmp	r2, r3
 8007568:	d124      	bne.n	80075b4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 f982 	bl	8007874 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007570:	e020      	b.n	80075b4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007572:	7bbb      	ldrb	r3, [r7, #14]
 8007574:	2b01      	cmp	r3, #1
 8007576:	d01d      	beq.n	80075b4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	2204      	movs	r2, #4
 800757c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007580:	e018      	b.n	80075b4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 f867 	bl	8007656 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 f8f6 	bl	800777a <CDC_ProcessReception>
      break;
 800758e:	e014      	b.n	80075ba <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007590:	2100      	movs	r1, #0
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f001 f957 	bl	8008846 <USBH_ClrFeature>
 8007598:	4603      	mov	r3, r0
 800759a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800759c:	7bbb      	ldrb	r3, [r7, #14]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d10a      	bne.n	80075b8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80075aa:	e005      	b.n	80075b8 <USBH_CDC_Process+0x120>

    default:
      break;
 80075ac:	bf00      	nop
 80075ae:	e004      	b.n	80075ba <USBH_CDC_Process+0x122>
      break;
 80075b0:	bf00      	nop
 80075b2:	e002      	b.n	80075ba <USBH_CDC_Process+0x122>
      break;
 80075b4:	bf00      	nop
 80075b6:	e000      	b.n	80075ba <USBH_CDC_Process+0x122>
      break;
 80075b8:	bf00      	nop

  }

  return status;
 80075ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3710      	adds	r7, #16
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	370c      	adds	r7, #12
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr

080075da <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b082      	sub	sp, #8
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
 80075e2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	22a1      	movs	r2, #161	; 0xa1
 80075e8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2221      	movs	r2, #33	; 0x21
 80075ee:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2207      	movs	r2, #7
 8007600:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	2207      	movs	r2, #7
 8007606:	4619      	mov	r1, r3
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f001 fbeb 	bl	8008de4 <USBH_CtlReq>
 800760e:	4603      	mov	r3, r0
}
 8007610:	4618      	mov	r0, r3
 8007612:	3708      	adds	r7, #8
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2221      	movs	r2, #33	; 0x21
 8007626:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2220      	movs	r2, #32
 800762c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2207      	movs	r2, #7
 800763e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	2207      	movs	r2, #7
 8007644:	4619      	mov	r1, r3
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f001 fbcc 	bl	8008de4 <USBH_CtlReq>
 800764c:	4603      	mov	r3, r0
}
 800764e:	4618      	mov	r0, r3
 8007650:	3708      	adds	r7, #8
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}

08007656 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007656:	b580      	push	{r7, lr}
 8007658:	b086      	sub	sp, #24
 800765a:	af02      	add	r7, sp, #8
 800765c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007664:	69db      	ldr	r3, [r3, #28]
 8007666:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007668:	2300      	movs	r3, #0
 800766a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007672:	2b01      	cmp	r3, #1
 8007674:	d002      	beq.n	800767c <CDC_ProcessTransmission+0x26>
 8007676:	2b02      	cmp	r3, #2
 8007678:	d023      	beq.n	80076c2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800767a:	e07a      	b.n	8007772 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007680:	68fa      	ldr	r2, [r7, #12]
 8007682:	8b12      	ldrh	r2, [r2, #24]
 8007684:	4293      	cmp	r3, r2
 8007686:	d90b      	bls.n	80076a0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	69d9      	ldr	r1, [r3, #28]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	8b1a      	ldrh	r2, [r3, #24]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	7b5b      	ldrb	r3, [r3, #13]
 8007694:	2001      	movs	r0, #1
 8007696:	9000      	str	r0, [sp, #0]
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f001 fea2 	bl	80093e2 <USBH_BulkSendData>
 800769e:	e00b      	b.n	80076b8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80076a8:	b29a      	uxth	r2, r3
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	7b5b      	ldrb	r3, [r3, #13]
 80076ae:	2001      	movs	r0, #1
 80076b0:	9000      	str	r0, [sp, #0]
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f001 fe95 	bl	80093e2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2202      	movs	r2, #2
 80076bc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80076c0:	e057      	b.n	8007772 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	7b5b      	ldrb	r3, [r3, #13]
 80076c6:	4619      	mov	r1, r3
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f005 f9bb 	bl	800ca44 <USBH_LL_GetURBState>
 80076ce:	4603      	mov	r3, r0
 80076d0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80076d2:	7afb      	ldrb	r3, [r7, #11]
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d136      	bne.n	8007746 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076dc:	68fa      	ldr	r2, [r7, #12]
 80076de:	8b12      	ldrh	r2, [r2, #24]
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d90e      	bls.n	8007702 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e8:	68fa      	ldr	r2, [r7, #12]
 80076ea:	8b12      	ldrh	r2, [r2, #24]
 80076ec:	1a9a      	subs	r2, r3, r2
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	69db      	ldr	r3, [r3, #28]
 80076f6:	68fa      	ldr	r2, [r7, #12]
 80076f8:	8b12      	ldrh	r2, [r2, #24]
 80076fa:	441a      	add	r2, r3
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	61da      	str	r2, [r3, #28]
 8007700:	e002      	b.n	8007708 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2200      	movs	r2, #0
 8007706:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770c:	2b00      	cmp	r3, #0
 800770e:	d004      	beq.n	800771a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2201      	movs	r2, #1
 8007714:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8007718:	e006      	b.n	8007728 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2200      	movs	r2, #0
 800771e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 f892 	bl	800784c <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2204      	movs	r2, #4
 800772c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800773c:	2300      	movs	r3, #0
 800773e:	2200      	movs	r2, #0
 8007740:	f002 f8d2 	bl	80098e8 <osMessageQueuePut>
      break;
 8007744:	e014      	b.n	8007770 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8007746:	7afb      	ldrb	r3, [r7, #11]
 8007748:	2b02      	cmp	r3, #2
 800774a:	d111      	bne.n	8007770 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2201      	movs	r2, #1
 8007750:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2204      	movs	r2, #4
 8007758:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007768:	2300      	movs	r3, #0
 800776a:	2200      	movs	r2, #0
 800776c:	f002 f8bc 	bl	80098e8 <osMessageQueuePut>
      break;
 8007770:	bf00      	nop
  }
}
 8007772:	bf00      	nop
 8007774:	3710      	adds	r7, #16
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}

0800777a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800777a:	b580      	push	{r7, lr}
 800777c:	b086      	sub	sp, #24
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007788:	69db      	ldr	r3, [r3, #28]
 800778a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800778c:	2300      	movs	r3, #0
 800778e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007796:	2b03      	cmp	r3, #3
 8007798:	d002      	beq.n	80077a0 <CDC_ProcessReception+0x26>
 800779a:	2b04      	cmp	r3, #4
 800779c:	d00e      	beq.n	80077bc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800779e:	e051      	b.n	8007844 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	6a19      	ldr	r1, [r3, #32]
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	8b5a      	ldrh	r2, [r3, #26]
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	7b1b      	ldrb	r3, [r3, #12]
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f001 fe3d 	bl	800942c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	2204      	movs	r2, #4
 80077b6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80077ba:	e043      	b.n	8007844 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	7b1b      	ldrb	r3, [r3, #12]
 80077c0:	4619      	mov	r1, r3
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f005 f93e 	bl	800ca44 <USBH_LL_GetURBState>
 80077c8:	4603      	mov	r3, r0
 80077ca:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80077cc:	7cfb      	ldrb	r3, [r7, #19]
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d137      	bne.n	8007842 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	7b1b      	ldrb	r3, [r3, #12]
 80077d6:	4619      	mov	r1, r3
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f005 f8a1 	bl	800c920 <USBH_LL_GetLastXferSize>
 80077de:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e4:	68fa      	ldr	r2, [r7, #12]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d016      	beq.n	8007818 <CDC_ProcessReception+0x9e>
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	8b5b      	ldrh	r3, [r3, #26]
 80077ee:	461a      	mov	r2, r3
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d910      	bls.n	8007818 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	1ad2      	subs	r2, r2, r3
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	6a1a      	ldr	r2, [r3, #32]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	441a      	add	r2, r3
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	2203      	movs	r2, #3
 8007812:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8007816:	e006      	b.n	8007826 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	2200      	movs	r2, #0
 800781c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 f81d 	bl	8007860 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2204      	movs	r2, #4
 800782a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800783a:	2300      	movs	r3, #0
 800783c:	2200      	movs	r2, #0
 800783e:	f002 f853 	bl	80098e8 <osMessageQueuePut>
      break;
 8007842:	bf00      	nop
  }
}
 8007844:	bf00      	nop
 8007846:	3718      	adds	r7, #24
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007854:	bf00      	nop
 8007856:	370c      	adds	r7, #12
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007868:	bf00      	nop
 800786a:	370c      	adds	r7, #12
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800787c:	bf00      	nop
 800787e:	370c      	adds	r7, #12
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr

08007888 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	60b9      	str	r1, [r7, #8]
 8007892:	4613      	mov	r3, r2
 8007894:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d101      	bne.n	80078a0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800789c:	2302      	movs	r3, #2
 800789e:	e044      	b.n	800792a <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	79fa      	ldrb	r2, [r7, #7]
 80078a4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2200      	movs	r2, #0
 80078ac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2200      	movs	r2, #0
 80078b4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80078b8:	68f8      	ldr	r0, [r7, #12]
 80078ba:	f000 f841 	bl	8007940 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2200      	movs	r2, #0
 80078ca:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2200      	movs	r2, #0
 80078d2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2200      	movs	r2, #0
 80078da:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d003      	beq.n	80078ec <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	68ba      	ldr	r2, [r7, #8]
 80078e8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 80078ec:	2200      	movs	r2, #0
 80078ee:	2104      	movs	r1, #4
 80078f0:	2010      	movs	r0, #16
 80078f2:	f001 ff86 	bl	8009802 <osMessageQueueNew>
 80078f6:	4602      	mov	r2, r0
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 80078fe:	4b0d      	ldr	r3, [pc, #52]	; (8007934 <USBH_Init+0xac>)
 8007900:	4a0d      	ldr	r2, [pc, #52]	; (8007938 <USBH_Init+0xb0>)
 8007902:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 8007904:	4b0b      	ldr	r3, [pc, #44]	; (8007934 <USBH_Init+0xac>)
 8007906:	2280      	movs	r2, #128	; 0x80
 8007908:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800790a:	4b0a      	ldr	r3, [pc, #40]	; (8007934 <USBH_Init+0xac>)
 800790c:	2218      	movs	r2, #24
 800790e:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8007910:	4a08      	ldr	r2, [pc, #32]	; (8007934 <USBH_Init+0xac>)
 8007912:	68f9      	ldr	r1, [r7, #12]
 8007914:	4809      	ldr	r0, [pc, #36]	; (800793c <USBH_Init+0xb4>)
 8007916:	f001 fec7 	bl	80096a8 <osThreadNew>
 800791a:	4602      	mov	r2, r0
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007922:	68f8      	ldr	r0, [r7, #12]
 8007924:	f004 ff48 	bl	800c7b8 <USBH_LL_Init>

  return USBH_OK;
 8007928:	2300      	movs	r3, #0
}
 800792a:	4618      	mov	r0, r3
 800792c:	3710      	adds	r7, #16
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop
 8007934:	20000288 	.word	0x20000288
 8007938:	0800cf4c 	.word	0x0800cf4c
 800793c:	080085bd 	.word	0x080085bd

08007940 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007940:	b480      	push	{r7}
 8007942:	b085      	sub	sp, #20
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007948:	2300      	movs	r3, #0
 800794a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800794c:	2300      	movs	r3, #0
 800794e:	60fb      	str	r3, [r7, #12]
 8007950:	e009      	b.n	8007966 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	33e0      	adds	r3, #224	; 0xe0
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	4413      	add	r3, r2
 800795c:	2200      	movs	r2, #0
 800795e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	3301      	adds	r3, #1
 8007964:	60fb      	str	r3, [r7, #12]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2b0f      	cmp	r3, #15
 800796a:	d9f2      	bls.n	8007952 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800796c:	2300      	movs	r3, #0
 800796e:	60fb      	str	r3, [r7, #12]
 8007970:	e009      	b.n	8007986 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	4413      	add	r3, r2
 8007978:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800797c:	2200      	movs	r2, #0
 800797e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	3301      	adds	r3, #1
 8007984:	60fb      	str	r3, [r7, #12]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800798c:	d3f1      	bcc.n	8007972 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2201      	movs	r2, #1
 800799e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2240      	movs	r2, #64	; 0x40
 80079b2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2201      	movs	r2, #1
 80079c6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2200      	movs	r2, #0
 80079ce:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80079da:	2300      	movs	r3, #0
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3714      	adds	r7, #20
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr

080079e8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b085      	sub	sp, #20
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80079f2:	2300      	movs	r3, #0
 80079f4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d016      	beq.n	8007a2a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d10e      	bne.n	8007a24 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007a0c:	1c59      	adds	r1, r3, #1
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	33de      	adds	r3, #222	; 0xde
 8007a18:	6839      	ldr	r1, [r7, #0]
 8007a1a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	73fb      	strb	r3, [r7, #15]
 8007a22:	e004      	b.n	8007a2e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007a24:	2302      	movs	r3, #2
 8007a26:	73fb      	strb	r3, [r7, #15]
 8007a28:	e001      	b.n	8007a2e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007a2a:	2302      	movs	r3, #2
 8007a2c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3714      	adds	r7, #20
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr

08007a3c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b085      	sub	sp, #20
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	460b      	mov	r3, r1
 8007a46:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007a52:	78fa      	ldrb	r2, [r7, #3]
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d204      	bcs.n	8007a62 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	78fa      	ldrb	r2, [r7, #3]
 8007a5c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007a60:	e001      	b.n	8007a66 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007a62:	2302      	movs	r3, #2
 8007a64:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3714      	adds	r7, #20
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b087      	sub	sp, #28
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	4608      	mov	r0, r1
 8007a7e:	4611      	mov	r1, r2
 8007a80:	461a      	mov	r2, r3
 8007a82:	4603      	mov	r3, r0
 8007a84:	70fb      	strb	r3, [r7, #3]
 8007a86:	460b      	mov	r3, r1
 8007a88:	70bb      	strb	r3, [r7, #2]
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007a92:	2300      	movs	r3, #0
 8007a94:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007a9c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007a9e:	e025      	b.n	8007aec <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007aa0:	7dfb      	ldrb	r3, [r7, #23]
 8007aa2:	221a      	movs	r2, #26
 8007aa4:	fb02 f303 	mul.w	r3, r2, r3
 8007aa8:	3308      	adds	r3, #8
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	4413      	add	r3, r2
 8007aae:	3302      	adds	r3, #2
 8007ab0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	795b      	ldrb	r3, [r3, #5]
 8007ab6:	78fa      	ldrb	r2, [r7, #3]
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d002      	beq.n	8007ac2 <USBH_FindInterface+0x4e>
 8007abc:	78fb      	ldrb	r3, [r7, #3]
 8007abe:	2bff      	cmp	r3, #255	; 0xff
 8007ac0:	d111      	bne.n	8007ae6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007ac6:	78ba      	ldrb	r2, [r7, #2]
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d002      	beq.n	8007ad2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007acc:	78bb      	ldrb	r3, [r7, #2]
 8007ace:	2bff      	cmp	r3, #255	; 0xff
 8007ad0:	d109      	bne.n	8007ae6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007ad6:	787a      	ldrb	r2, [r7, #1]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d002      	beq.n	8007ae2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007adc:	787b      	ldrb	r3, [r7, #1]
 8007ade:	2bff      	cmp	r3, #255	; 0xff
 8007ae0:	d101      	bne.n	8007ae6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007ae2:	7dfb      	ldrb	r3, [r7, #23]
 8007ae4:	e006      	b.n	8007af4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007ae6:	7dfb      	ldrb	r3, [r7, #23]
 8007ae8:	3301      	adds	r3, #1
 8007aea:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007aec:	7dfb      	ldrb	r3, [r7, #23]
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d9d6      	bls.n	8007aa0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007af2:	23ff      	movs	r3, #255	; 0xff
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	371c      	adds	r7, #28
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f004 fe91 	bl	800c830 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007b0e:	2101      	movs	r1, #1
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f004 ffaa 	bl	800ca6a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007b16:	2300      	movs	r3, #0
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3708      	adds	r7, #8
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b088      	sub	sp, #32
 8007b24:	af04      	add	r7, sp, #16
 8007b26:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007b28:	2302      	movs	r3, #2
 8007b2a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d102      	bne.n	8007b42 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2203      	movs	r2, #3
 8007b40:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	2b0b      	cmp	r3, #11
 8007b4a:	f200 8247 	bhi.w	8007fdc <USBH_Process+0x4bc>
 8007b4e:	a201      	add	r2, pc, #4	; (adr r2, 8007b54 <USBH_Process+0x34>)
 8007b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b54:	08007b85 	.word	0x08007b85
 8007b58:	08007bd3 	.word	0x08007bd3
 8007b5c:	08007c57 	.word	0x08007c57
 8007b60:	08007f5b 	.word	0x08007f5b
 8007b64:	08007fdd 	.word	0x08007fdd
 8007b68:	08007d17 	.word	0x08007d17
 8007b6c:	08007ee5 	.word	0x08007ee5
 8007b70:	08007d69 	.word	0x08007d69
 8007b74:	08007da5 	.word	0x08007da5
 8007b78:	08007ddf 	.word	0x08007ddf
 8007b7c:	08007e3d 	.word	0x08007e3d
 8007b80:	08007f43 	.word	0x08007f43
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f000 8227 	beq.w	8007fe0 <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2201      	movs	r2, #1
 8007b96:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007b98:	20c8      	movs	r0, #200	; 0xc8
 8007b9a:	f004 ffad 	bl	800caf8 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f004 fea3 	bl	800c8ea <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007bc8:	2300      	movs	r3, #0
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f001 fe8c 	bl	80098e8 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8007bd0:	e206      	b.n	8007fe0 <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d107      	bne.n	8007bec <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2202      	movs	r2, #2
 8007be8:	701a      	strb	r2, [r3, #0]
 8007bea:	e025      	b.n	8007c38 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007bf2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007bf6:	d914      	bls.n	8007c22 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007bfe:	3301      	adds	r3, #1
 8007c00:	b2da      	uxtb	r2, r3
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007c0e:	2b03      	cmp	r3, #3
 8007c10:	d903      	bls.n	8007c1a <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	220d      	movs	r2, #13
 8007c16:	701a      	strb	r2, [r3, #0]
 8007c18:	e00e      	b.n	8007c38 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	701a      	strb	r2, [r3, #0]
 8007c20:	e00a      	b.n	8007c38 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007c28:	f103 020a 	add.w	r2, r3, #10
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007c32:	200a      	movs	r0, #10
 8007c34:	f004 ff60 	bl	800caf8 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f001 fe4a 	bl	80098e8 <osMessageQueuePut>
#endif
#endif
      break;
 8007c54:	e1cb      	b.n	8007fee <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d005      	beq.n	8007c6c <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c66:	2104      	movs	r1, #4
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007c6c:	2064      	movs	r0, #100	; 0x64
 8007c6e:	f004 ff43 	bl	800caf8 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f004 fe12 	bl	800c89c <USBH_LL_GetSpeed>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2205      	movs	r2, #5
 8007c86:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007c88:	2100      	movs	r1, #0
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f001 fc1b 	bl	80094c6 <USBH_AllocPipe>
 8007c90:	4603      	mov	r3, r0
 8007c92:	461a      	mov	r2, r3
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007c98:	2180      	movs	r1, #128	; 0x80
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f001 fc13 	bl	80094c6 <USBH_AllocPipe>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	7919      	ldrb	r1, [r3, #4]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007cbc:	b292      	uxth	r2, r2
 8007cbe:	9202      	str	r2, [sp, #8]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	9201      	str	r2, [sp, #4]
 8007cc4:	9300      	str	r3, [sp, #0]
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2280      	movs	r2, #128	; 0x80
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f001 fbcc 	bl	8009468 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	7959      	ldrb	r1, [r3, #5]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007ce4:	b292      	uxth	r2, r2
 8007ce6:	9202      	str	r2, [sp, #8]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	9201      	str	r2, [sp, #4]
 8007cec:	9300      	str	r3, [sp, #0]
 8007cee:	4603      	mov	r3, r0
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f001 fbb8 	bl	8009468 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f001 fdea 	bl	80098e8 <osMessageQueuePut>
#endif
#endif
      break;
 8007d14:	e16b      	b.n	8007fee <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 f96e 	bl	8007ff8 <USBH_HandleEnum>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007d20:	7bbb      	ldrb	r3, [r7, #14]
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	f040 815d 	bne.w	8007fe4 <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d103      	bne.n	8007d44 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2208      	movs	r2, #8
 8007d40:	701a      	strb	r2, [r3, #0]
 8007d42:	e002      	b.n	8007d4a <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2207      	movs	r2, #7
 8007d48:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2205      	movs	r2, #5
 8007d4e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007d5e:	2300      	movs	r3, #0
 8007d60:	2200      	movs	r2, #0
 8007d62:	f001 fdc1 	bl	80098e8 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8007d66:	e13d      	b.n	8007fe4 <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	f000 813a 	beq.w	8007fe8 <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d7a:	2101      	movs	r1, #1
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2208      	movs	r2, #8
 8007d84:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2205      	movs	r2, #5
 8007d8a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	f001 fda3 	bl	80098e8 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 8007da2:	e121      	b.n	8007fe8 <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	4619      	mov	r1, r3
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 fd02 	bl	80087b8 <USBH_SetCfg>
 8007db4:	4603      	mov	r3, r0
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d102      	bne.n	8007dc0 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2209      	movs	r2, #9
 8007dbe:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f001 fd86 	bl	80098e8 <osMessageQueuePut>
#endif
#endif
      break;
 8007ddc:	e107      	b.n	8007fee <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007de4:	f003 0320 	and.w	r3, r3, #32
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d015      	beq.n	8007e18 <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007dec:	2101      	movs	r1, #1
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 fd05 	bl	80087fe <USBH_SetFeature>
 8007df4:	4603      	mov	r3, r0
 8007df6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007df8:	7bbb      	ldrb	r3, [r7, #14]
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d103      	bne.n	8007e08 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	220a      	movs	r2, #10
 8007e04:	701a      	strb	r2, [r3, #0]
 8007e06:	e00a      	b.n	8007e1e <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 8007e08:	7bbb      	ldrb	r3, [r7, #14]
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	2b03      	cmp	r3, #3
 8007e0e:	d106      	bne.n	8007e1e <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	220a      	movs	r2, #10
 8007e14:	701a      	strb	r2, [r3, #0]
 8007e16:	e002      	b.n	8007e1e <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	220a      	movs	r2, #10
 8007e1c:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2201      	movs	r2, #1
 8007e22:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007e32:	2300      	movs	r3, #0
 8007e34:	2200      	movs	r2, #0
 8007e36:	f001 fd57 	bl	80098e8 <osMessageQueuePut>
#endif
#endif
      break;
 8007e3a:	e0d8      	b.n	8007fee <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d03f      	beq.n	8007ec6 <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007e4e:	2300      	movs	r3, #0
 8007e50:	73fb      	strb	r3, [r7, #15]
 8007e52:	e016      	b.n	8007e82 <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007e54:	7bfa      	ldrb	r2, [r7, #15]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	32de      	adds	r2, #222	; 0xde
 8007e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e5e:	791a      	ldrb	r2, [r3, #4]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d108      	bne.n	8007e7c <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007e6a:	7bfa      	ldrb	r2, [r7, #15]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	32de      	adds	r2, #222	; 0xde
 8007e70:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007e7a:	e005      	b.n	8007e88 <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007e7c:	7bfb      	ldrb	r3, [r7, #15]
 8007e7e:	3301      	adds	r3, #1
 8007e80:	73fb      	strb	r3, [r7, #15]
 8007e82:	7bfb      	ldrb	r3, [r7, #15]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d0e5      	beq.n	8007e54 <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d016      	beq.n	8007ec0 <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	4798      	blx	r3
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d109      	bne.n	8007eb8 <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2206      	movs	r2, #6
 8007ea8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007eb0:	2103      	movs	r1, #3
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	4798      	blx	r3
 8007eb6:	e006      	b.n	8007ec6 <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	220d      	movs	r2, #13
 8007ebc:	701a      	strb	r2, [r3, #0]
 8007ebe:	e002      	b.n	8007ec6 <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	220d      	movs	r2, #13
 8007ec4:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2205      	movs	r2, #5
 8007eca:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007eda:	2300      	movs	r3, #0
 8007edc:	2200      	movs	r2, #0
 8007ede:	f001 fd03 	bl	80098e8 <osMessageQueuePut>
#endif
#endif
      break;
 8007ee2:	e084      	b.n	8007fee <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d017      	beq.n	8007f1e <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ef4:	691b      	ldr	r3, [r3, #16]
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	4798      	blx	r3
 8007efa:	4603      	mov	r3, r0
 8007efc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007efe:	7bbb      	ldrb	r3, [r7, #14]
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d103      	bne.n	8007f0e <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	220b      	movs	r2, #11
 8007f0a:	701a      	strb	r2, [r3, #0]
 8007f0c:	e00a      	b.n	8007f24 <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 8007f0e:	7bbb      	ldrb	r3, [r7, #14]
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	2b02      	cmp	r3, #2
 8007f14:	d106      	bne.n	8007f24 <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	220d      	movs	r2, #13
 8007f1a:	701a      	strb	r2, [r3, #0]
 8007f1c:	e002      	b.n	8007f24 <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	220d      	movs	r2, #13
 8007f22:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2205      	movs	r2, #5
 8007f28:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007f38:	2300      	movs	r3, #0
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f001 fcd4 	bl	80098e8 <osMessageQueuePut>
#endif
#endif
      break;
 8007f40:	e055      	b.n	8007fee <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d04f      	beq.n	8007fec <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f52:	695b      	ldr	r3, [r3, #20]
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	4798      	blx	r3
      }
      break;
 8007f58:	e048      	b.n	8007fec <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f7ff fcec 	bl	8007940 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d009      	beq.n	8007f86 <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d005      	beq.n	8007f9c <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f96:	2105      	movs	r1, #5
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d107      	bne.n	8007fb8 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f7ff fda5 	bl	8007b00 <USBH_Start>
 8007fb6:	e002      	b.n	8007fbe <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f004 fc39 	bl	800c830 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f001 fc87 	bl	80098e8 <osMessageQueuePut>
#endif
#endif
      break;
 8007fda:	e008      	b.n	8007fee <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 8007fdc:	bf00      	nop
 8007fde:	e006      	b.n	8007fee <USBH_Process+0x4ce>
      break;
 8007fe0:	bf00      	nop
 8007fe2:	e004      	b.n	8007fee <USBH_Process+0x4ce>
      break;
 8007fe4:	bf00      	nop
 8007fe6:	e002      	b.n	8007fee <USBH_Process+0x4ce>
    break;
 8007fe8:	bf00      	nop
 8007fea:	e000      	b.n	8007fee <USBH_Process+0x4ce>
      break;
 8007fec:	bf00      	nop
  }
  return USBH_OK;
 8007fee:	2300      	movs	r3, #0
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3710      	adds	r7, #16
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b088      	sub	sp, #32
 8007ffc:	af04      	add	r7, sp, #16
 8007ffe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008000:	2301      	movs	r3, #1
 8008002:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008004:	2301      	movs	r3, #1
 8008006:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	785b      	ldrb	r3, [r3, #1]
 800800c:	2b07      	cmp	r3, #7
 800800e:	f200 8208 	bhi.w	8008422 <USBH_HandleEnum+0x42a>
 8008012:	a201      	add	r2, pc, #4	; (adr r2, 8008018 <USBH_HandleEnum+0x20>)
 8008014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008018:	08008039 	.word	0x08008039
 800801c:	080080f7 	.word	0x080080f7
 8008020:	08008161 	.word	0x08008161
 8008024:	080081ef 	.word	0x080081ef
 8008028:	08008259 	.word	0x08008259
 800802c:	080082c9 	.word	0x080082c9
 8008030:	08008365 	.word	0x08008365
 8008034:	080083e3 	.word	0x080083e3
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008038:	2108      	movs	r1, #8
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 faec 	bl	8008618 <USBH_Get_DevDesc>
 8008040:	4603      	mov	r3, r0
 8008042:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008044:	7bbb      	ldrb	r3, [r7, #14]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d130      	bne.n	80080ac <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2201      	movs	r2, #1
 8008058:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	7919      	ldrb	r1, [r3, #4]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800806a:	687a      	ldr	r2, [r7, #4]
 800806c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800806e:	b292      	uxth	r2, r2
 8008070:	9202      	str	r2, [sp, #8]
 8008072:	2200      	movs	r2, #0
 8008074:	9201      	str	r2, [sp, #4]
 8008076:	9300      	str	r3, [sp, #0]
 8008078:	4603      	mov	r3, r0
 800807a:	2280      	movs	r2, #128	; 0x80
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f001 f9f3 	bl	8009468 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	7959      	ldrb	r1, [r3, #5]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008096:	b292      	uxth	r2, r2
 8008098:	9202      	str	r2, [sp, #8]
 800809a:	2200      	movs	r2, #0
 800809c:	9201      	str	r2, [sp, #4]
 800809e:	9300      	str	r3, [sp, #0]
 80080a0:	4603      	mov	r3, r0
 80080a2:	2200      	movs	r2, #0
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f001 f9df 	bl	8009468 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80080aa:	e1bc      	b.n	8008426 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80080ac:	7bbb      	ldrb	r3, [r7, #14]
 80080ae:	2b03      	cmp	r3, #3
 80080b0:	f040 81b9 	bne.w	8008426 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80080ba:	3301      	adds	r3, #1
 80080bc:	b2da      	uxtb	r2, r3
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80080ca:	2b03      	cmp	r3, #3
 80080cc:	d903      	bls.n	80080d6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	220d      	movs	r2, #13
 80080d2:	701a      	strb	r2, [r3, #0]
      break;
 80080d4:	e1a7      	b.n	8008426 <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	795b      	ldrb	r3, [r3, #5]
 80080da:	4619      	mov	r1, r3
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f001 fa13 	bl	8009508 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	791b      	ldrb	r3, [r3, #4]
 80080e6:	4619      	mov	r1, r3
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f001 fa0d 	bl	8009508 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2200      	movs	r2, #0
 80080f2:	701a      	strb	r2, [r3, #0]
      break;
 80080f4:	e197      	b.n	8008426 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80080f6:	2112      	movs	r1, #18
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 fa8d 	bl	8008618 <USBH_Get_DevDesc>
 80080fe:	4603      	mov	r3, r0
 8008100:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008102:	7bbb      	ldrb	r3, [r7, #14]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d103      	bne.n	8008110 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2202      	movs	r2, #2
 800810c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800810e:	e18c      	b.n	800842a <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008110:	7bbb      	ldrb	r3, [r7, #14]
 8008112:	2b03      	cmp	r3, #3
 8008114:	f040 8189 	bne.w	800842a <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800811e:	3301      	adds	r3, #1
 8008120:	b2da      	uxtb	r2, r3
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800812e:	2b03      	cmp	r3, #3
 8008130:	d903      	bls.n	800813a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	220d      	movs	r2, #13
 8008136:	701a      	strb	r2, [r3, #0]
      break;
 8008138:	e177      	b.n	800842a <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	795b      	ldrb	r3, [r3, #5]
 800813e:	4619      	mov	r1, r3
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f001 f9e1 	bl	8009508 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	791b      	ldrb	r3, [r3, #4]
 800814a:	4619      	mov	r1, r3
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f001 f9db 	bl	8009508 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2200      	movs	r2, #0
 800815c:	701a      	strb	r2, [r3, #0]
      break;
 800815e:	e164      	b.n	800842a <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008160:	2101      	movs	r1, #1
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 fb04 	bl	8008770 <USBH_SetAddress>
 8008168:	4603      	mov	r3, r0
 800816a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800816c:	7bbb      	ldrb	r3, [r7, #14]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d132      	bne.n	80081d8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8008172:	2002      	movs	r0, #2
 8008174:	f004 fcc0 	bl	800caf8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2201      	movs	r2, #1
 800817c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2203      	movs	r2, #3
 8008184:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	7919      	ldrb	r1, [r3, #4]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800819a:	b292      	uxth	r2, r2
 800819c:	9202      	str	r2, [sp, #8]
 800819e:	2200      	movs	r2, #0
 80081a0:	9201      	str	r2, [sp, #4]
 80081a2:	9300      	str	r3, [sp, #0]
 80081a4:	4603      	mov	r3, r0
 80081a6:	2280      	movs	r2, #128	; 0x80
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f001 f95d 	bl	8009468 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	7959      	ldrb	r1, [r3, #5]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80081c2:	b292      	uxth	r2, r2
 80081c4:	9202      	str	r2, [sp, #8]
 80081c6:	2200      	movs	r2, #0
 80081c8:	9201      	str	r2, [sp, #4]
 80081ca:	9300      	str	r3, [sp, #0]
 80081cc:	4603      	mov	r3, r0
 80081ce:	2200      	movs	r2, #0
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f001 f949 	bl	8009468 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80081d6:	e12a      	b.n	800842e <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80081d8:	7bbb      	ldrb	r3, [r7, #14]
 80081da:	2b03      	cmp	r3, #3
 80081dc:	f040 8127 	bne.w	800842e <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	220d      	movs	r2, #13
 80081e4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2200      	movs	r2, #0
 80081ea:	705a      	strb	r2, [r3, #1]
      break;
 80081ec:	e11f      	b.n	800842e <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80081ee:	2109      	movs	r1, #9
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 fa39 	bl	8008668 <USBH_Get_CfgDesc>
 80081f6:	4603      	mov	r3, r0
 80081f8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80081fa:	7bbb      	ldrb	r3, [r7, #14]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d103      	bne.n	8008208 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2204      	movs	r2, #4
 8008204:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008206:	e114      	b.n	8008432 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008208:	7bbb      	ldrb	r3, [r7, #14]
 800820a:	2b03      	cmp	r3, #3
 800820c:	f040 8111 	bne.w	8008432 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008216:	3301      	adds	r3, #1
 8008218:	b2da      	uxtb	r2, r3
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008226:	2b03      	cmp	r3, #3
 8008228:	d903      	bls.n	8008232 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	220d      	movs	r2, #13
 800822e:	701a      	strb	r2, [r3, #0]
      break;
 8008230:	e0ff      	b.n	8008432 <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	795b      	ldrb	r3, [r3, #5]
 8008236:	4619      	mov	r1, r3
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f001 f965 	bl	8009508 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	791b      	ldrb	r3, [r3, #4]
 8008242:	4619      	mov	r1, r3
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f001 f95f 	bl	8009508 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2200      	movs	r2, #0
 800824e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	701a      	strb	r2, [r3, #0]
      break;
 8008256:	e0ec      	b.n	8008432 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800825e:	4619      	mov	r1, r3
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 fa01 	bl	8008668 <USBH_Get_CfgDesc>
 8008266:	4603      	mov	r3, r0
 8008268:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800826a:	7bbb      	ldrb	r3, [r7, #14]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d103      	bne.n	8008278 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2205      	movs	r2, #5
 8008274:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008276:	e0de      	b.n	8008436 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008278:	7bbb      	ldrb	r3, [r7, #14]
 800827a:	2b03      	cmp	r3, #3
 800827c:	f040 80db 	bne.w	8008436 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008286:	3301      	adds	r3, #1
 8008288:	b2da      	uxtb	r2, r3
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008296:	2b03      	cmp	r3, #3
 8008298:	d903      	bls.n	80082a2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	220d      	movs	r2, #13
 800829e:	701a      	strb	r2, [r3, #0]
      break;
 80082a0:	e0c9      	b.n	8008436 <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	795b      	ldrb	r3, [r3, #5]
 80082a6:	4619      	mov	r1, r3
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f001 f92d 	bl	8009508 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	791b      	ldrb	r3, [r3, #4]
 80082b2:	4619      	mov	r1, r3
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f001 f927 	bl	8009508 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	701a      	strb	r2, [r3, #0]
      break;
 80082c6:	e0b6      	b.n	8008436 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d036      	beq.n	8008340 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80082de:	23ff      	movs	r3, #255	; 0xff
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 f9e5 	bl	80086b0 <USBH_Get_StringDesc>
 80082e6:	4603      	mov	r3, r0
 80082e8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80082ea:	7bbb      	ldrb	r3, [r7, #14]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d111      	bne.n	8008314 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2206      	movs	r2, #6
 80082f4:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2205      	movs	r2, #5
 80082fa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800830a:	2300      	movs	r3, #0
 800830c:	2200      	movs	r2, #0
 800830e:	f001 faeb 	bl	80098e8 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008312:	e092      	b.n	800843a <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008314:	7bbb      	ldrb	r3, [r7, #14]
 8008316:	2b03      	cmp	r3, #3
 8008318:	f040 808f 	bne.w	800843a <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2206      	movs	r2, #6
 8008320:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2205      	movs	r2, #5
 8008326:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008336:	2300      	movs	r3, #0
 8008338:	2200      	movs	r2, #0
 800833a:	f001 fad5 	bl	80098e8 <osMessageQueuePut>
      break;
 800833e:	e07c      	b.n	800843a <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2206      	movs	r2, #6
 8008344:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2205      	movs	r2, #5
 800834a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800835a:	2300      	movs	r3, #0
 800835c:	2200      	movs	r2, #0
 800835e:	f001 fac3 	bl	80098e8 <osMessageQueuePut>
      break;
 8008362:	e06a      	b.n	800843a <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800836a:	2b00      	cmp	r3, #0
 800836c:	d027      	beq.n	80083be <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800837a:	23ff      	movs	r3, #255	; 0xff
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 f997 	bl	80086b0 <USBH_Get_StringDesc>
 8008382:	4603      	mov	r3, r0
 8008384:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008386:	7bbb      	ldrb	r3, [r7, #14]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d103      	bne.n	8008394 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2207      	movs	r2, #7
 8008390:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008392:	e054      	b.n	800843e <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008394:	7bbb      	ldrb	r3, [r7, #14]
 8008396:	2b03      	cmp	r3, #3
 8008398:	d151      	bne.n	800843e <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2207      	movs	r2, #7
 800839e:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2205      	movs	r2, #5
 80083a4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80083b4:	2300      	movs	r3, #0
 80083b6:	2200      	movs	r2, #0
 80083b8:	f001 fa96 	bl	80098e8 <osMessageQueuePut>
      break;
 80083bc:	e03f      	b.n	800843e <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2207      	movs	r2, #7
 80083c2:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2205      	movs	r2, #5
 80083c8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80083d8:	2300      	movs	r3, #0
 80083da:	2200      	movs	r2, #0
 80083dc:	f001 fa84 	bl	80098e8 <osMessageQueuePut>
      break;
 80083e0:	e02d      	b.n	800843e <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d017      	beq.n	800841c <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80083f8:	23ff      	movs	r3, #255	; 0xff
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 f958 	bl	80086b0 <USBH_Get_StringDesc>
 8008400:	4603      	mov	r3, r0
 8008402:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008404:	7bbb      	ldrb	r3, [r7, #14]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d102      	bne.n	8008410 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800840a:	2300      	movs	r3, #0
 800840c:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800840e:	e018      	b.n	8008442 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008410:	7bbb      	ldrb	r3, [r7, #14]
 8008412:	2b03      	cmp	r3, #3
 8008414:	d115      	bne.n	8008442 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 8008416:	2300      	movs	r3, #0
 8008418:	73fb      	strb	r3, [r7, #15]
      break;
 800841a:	e012      	b.n	8008442 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800841c:	2300      	movs	r3, #0
 800841e:	73fb      	strb	r3, [r7, #15]
      break;
 8008420:	e00f      	b.n	8008442 <USBH_HandleEnum+0x44a>

    default:
      break;
 8008422:	bf00      	nop
 8008424:	e00e      	b.n	8008444 <USBH_HandleEnum+0x44c>
      break;
 8008426:	bf00      	nop
 8008428:	e00c      	b.n	8008444 <USBH_HandleEnum+0x44c>
      break;
 800842a:	bf00      	nop
 800842c:	e00a      	b.n	8008444 <USBH_HandleEnum+0x44c>
      break;
 800842e:	bf00      	nop
 8008430:	e008      	b.n	8008444 <USBH_HandleEnum+0x44c>
      break;
 8008432:	bf00      	nop
 8008434:	e006      	b.n	8008444 <USBH_HandleEnum+0x44c>
      break;
 8008436:	bf00      	nop
 8008438:	e004      	b.n	8008444 <USBH_HandleEnum+0x44c>
      break;
 800843a:	bf00      	nop
 800843c:	e002      	b.n	8008444 <USBH_HandleEnum+0x44c>
      break;
 800843e:	bf00      	nop
 8008440:	e000      	b.n	8008444 <USBH_HandleEnum+0x44c>
      break;
 8008442:	bf00      	nop
  }
  return Status;
 8008444:	7bfb      	ldrb	r3, [r7, #15]
}
 8008446:	4618      	mov	r0, r3
 8008448:	3710      	adds	r7, #16
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop

08008450 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008450:	b480      	push	{r7}
 8008452:	b083      	sub	sp, #12
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	683a      	ldr	r2, [r7, #0]
 800845e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008462:	bf00      	nop
 8008464:	370c      	adds	r7, #12
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr

0800846e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800846e:	b580      	push	{r7, lr}
 8008470:	b082      	sub	sp, #8
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800847c:	1c5a      	adds	r2, r3, #1
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f000 f804 	bl	8008492 <USBH_HandleSof>
}
 800848a:	bf00      	nop
 800848c:	3708      	adds	r7, #8
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}

08008492 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008492:	b580      	push	{r7, lr}
 8008494:	b082      	sub	sp, #8
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	2b0b      	cmp	r3, #11
 80084a2:	d10a      	bne.n	80084ba <USBH_HandleSof+0x28>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d005      	beq.n	80084ba <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80084b4:	699b      	ldr	r3, [r3, #24]
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	4798      	blx	r3
  }
}
 80084ba:	bf00      	nop
 80084bc:	3708      	adds	r7, #8
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}

080084c2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80084c2:	b580      	push	{r7, lr}
 80084c4:	b082      	sub	sp, #8
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2201      	movs	r2, #1
 80084ce:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2201      	movs	r2, #1
 80084d6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80084e6:	2300      	movs	r3, #0
 80084e8:	2200      	movs	r2, #0
 80084ea:	f001 f9fd 	bl	80098e8 <osMessageQueuePut>
#endif
#endif

  return;
 80084ee:	bf00      	nop
}
 80084f0:	3708      	adds	r7, #8
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}

080084f6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80084f6:	b480      	push	{r7}
 80084f8:	b083      	sub	sp, #12
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008506:	bf00      	nop
}
 8008508:	370c      	adds	r7, #12
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr

08008512 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008512:	b580      	push	{r7, lr}
 8008514:	b082      	sub	sp, #8
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2201      	movs	r2, #1
 800851e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2200      	movs	r2, #0
 800852e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2201      	movs	r2, #1
 8008536:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008546:	2300      	movs	r3, #0
 8008548:	2200      	movs	r2, #0
 800854a:	f001 f9cd 	bl	80098e8 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800854e:	2300      	movs	r3, #0
}
 8008550:	4618      	mov	r0, r3
 8008552:	3708      	adds	r7, #8
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}

08008558 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b082      	sub	sp, #8
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2201      	movs	r2, #1
 8008564:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2200      	movs	r2, #0
 800856c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2200      	movs	r2, #0
 8008574:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f004 f974 	bl	800c866 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	791b      	ldrb	r3, [r3, #4]
 8008582:	4619      	mov	r1, r3
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 ffbf 	bl	8009508 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	795b      	ldrb	r3, [r3, #5]
 800858e:	4619      	mov	r1, r3
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f000 ffb9 	bl	8009508 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2201      	movs	r2, #1
 800859a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80085aa:	2300      	movs	r3, #0
 80085ac:	2200      	movs	r2, #0
 80085ae:	f001 f99b 	bl	80098e8 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 80085b2:	2300      	movs	r3, #0
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3708      	adds	r7, #8
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 80085d0:	f04f 33ff 	mov.w	r3, #4294967295
 80085d4:	2200      	movs	r2, #0
 80085d6:	f001 f9e7 	bl	80099a8 <osMessageQueueGet>
 80085da:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d1f0      	bne.n	80085c4 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f7ff fa9c 	bl	8007b20 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 80085e8:	e7ec      	b.n	80085c4 <USBH_Process_OS+0x8>

080085ea <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 80085ea:	b580      	push	{r7, lr}
 80085ec:	b082      	sub	sp, #8
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2201      	movs	r2, #1
 80085f6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008606:	2300      	movs	r3, #0
 8008608:	2200      	movs	r2, #0
 800860a:	f001 f96d 	bl	80098e8 <osMessageQueuePut>
#endif

  return USBH_OK;
 800860e:	2300      	movs	r3, #0
}
 8008610:	4618      	mov	r0, r3
 8008612:	3708      	adds	r7, #8
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b086      	sub	sp, #24
 800861c:	af02      	add	r7, sp, #8
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	460b      	mov	r3, r1
 8008622:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800862a:	78fb      	ldrb	r3, [r7, #3]
 800862c:	b29b      	uxth	r3, r3
 800862e:	9300      	str	r3, [sp, #0]
 8008630:	4613      	mov	r3, r2
 8008632:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008636:	2100      	movs	r1, #0
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f000 f864 	bl	8008706 <USBH_GetDescriptor>
 800863e:	4603      	mov	r3, r0
 8008640:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8008642:	7bfb      	ldrb	r3, [r7, #15]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d10a      	bne.n	800865e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008654:	78fa      	ldrb	r2, [r7, #3]
 8008656:	b292      	uxth	r2, r2
 8008658:	4619      	mov	r1, r3
 800865a:	f000 f919 	bl	8008890 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800865e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008660:	4618      	mov	r0, r3
 8008662:	3710      	adds	r7, #16
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}

08008668 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008668:	b580      	push	{r7, lr}
 800866a:	b086      	sub	sp, #24
 800866c:	af02      	add	r7, sp, #8
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	460b      	mov	r3, r1
 8008672:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	331c      	adds	r3, #28
 8008678:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800867a:	887b      	ldrh	r3, [r7, #2]
 800867c:	9300      	str	r3, [sp, #0]
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008684:	2100      	movs	r1, #0
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f000 f83d 	bl	8008706 <USBH_GetDescriptor>
 800868c:	4603      	mov	r3, r0
 800868e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008690:	7bfb      	ldrb	r3, [r7, #15]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d107      	bne.n	80086a6 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008696:	887b      	ldrh	r3, [r7, #2]
 8008698:	461a      	mov	r2, r3
 800869a:	68b9      	ldr	r1, [r7, #8]
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 f989 	bl	80089b4 <USBH_ParseCfgDesc>
 80086a2:	4603      	mov	r3, r0
 80086a4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80086a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3710      	adds	r7, #16
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b088      	sub	sp, #32
 80086b4:	af02      	add	r7, sp, #8
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	607a      	str	r2, [r7, #4]
 80086ba:	461a      	mov	r2, r3
 80086bc:	460b      	mov	r3, r1
 80086be:	72fb      	strb	r3, [r7, #11]
 80086c0:	4613      	mov	r3, r2
 80086c2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80086c4:	7afb      	ldrb	r3, [r7, #11]
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80086cc:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80086d4:	893b      	ldrh	r3, [r7, #8]
 80086d6:	9300      	str	r3, [sp, #0]
 80086d8:	460b      	mov	r3, r1
 80086da:	2100      	movs	r1, #0
 80086dc:	68f8      	ldr	r0, [r7, #12]
 80086de:	f000 f812 	bl	8008706 <USBH_GetDescriptor>
 80086e2:	4603      	mov	r3, r0
 80086e4:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80086e6:	7dfb      	ldrb	r3, [r7, #23]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d107      	bne.n	80086fc <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80086f2:	893a      	ldrh	r2, [r7, #8]
 80086f4:	6879      	ldr	r1, [r7, #4]
 80086f6:	4618      	mov	r0, r3
 80086f8:	f000 fb26 	bl	8008d48 <USBH_ParseStringDesc>
  }

  return status;
 80086fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3718      	adds	r7, #24
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}

08008706 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008706:	b580      	push	{r7, lr}
 8008708:	b084      	sub	sp, #16
 800870a:	af00      	add	r7, sp, #0
 800870c:	60f8      	str	r0, [r7, #12]
 800870e:	607b      	str	r3, [r7, #4]
 8008710:	460b      	mov	r3, r1
 8008712:	72fb      	strb	r3, [r7, #11]
 8008714:	4613      	mov	r3, r2
 8008716:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	789b      	ldrb	r3, [r3, #2]
 800871c:	2b01      	cmp	r3, #1
 800871e:	d11c      	bne.n	800875a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008720:	7afb      	ldrb	r3, [r7, #11]
 8008722:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008726:	b2da      	uxtb	r2, r3
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2206      	movs	r2, #6
 8008730:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	893a      	ldrh	r2, [r7, #8]
 8008736:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008738:	893b      	ldrh	r3, [r7, #8]
 800873a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800873e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008742:	d104      	bne.n	800874e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f240 4209 	movw	r2, #1033	; 0x409
 800874a:	829a      	strh	r2, [r3, #20]
 800874c:	e002      	b.n	8008754 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2200      	movs	r2, #0
 8008752:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	8b3a      	ldrh	r2, [r7, #24]
 8008758:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800875a:	8b3b      	ldrh	r3, [r7, #24]
 800875c:	461a      	mov	r2, r3
 800875e:	6879      	ldr	r1, [r7, #4]
 8008760:	68f8      	ldr	r0, [r7, #12]
 8008762:	f000 fb3f 	bl	8008de4 <USBH_CtlReq>
 8008766:	4603      	mov	r3, r0
}
 8008768:	4618      	mov	r0, r3
 800876a:	3710      	adds	r7, #16
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b082      	sub	sp, #8
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	460b      	mov	r3, r1
 800877a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	789b      	ldrb	r3, [r3, #2]
 8008780:	2b01      	cmp	r3, #1
 8008782:	d10f      	bne.n	80087a4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2200      	movs	r2, #0
 8008788:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2205      	movs	r2, #5
 800878e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008790:	78fb      	ldrb	r3, [r7, #3]
 8008792:	b29a      	uxth	r2, r3
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2200      	movs	r2, #0
 800879c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2200      	movs	r2, #0
 80087a2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80087a4:	2200      	movs	r2, #0
 80087a6:	2100      	movs	r1, #0
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 fb1b 	bl	8008de4 <USBH_CtlReq>
 80087ae:	4603      	mov	r3, r0
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3708      	adds	r7, #8
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	460b      	mov	r3, r1
 80087c2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	789b      	ldrb	r3, [r3, #2]
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d10e      	bne.n	80087ea <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2200      	movs	r2, #0
 80087d0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2209      	movs	r2, #9
 80087d6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	887a      	ldrh	r2, [r7, #2]
 80087dc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2200      	movs	r2, #0
 80087e2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80087ea:	2200      	movs	r2, #0
 80087ec:	2100      	movs	r1, #0
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 faf8 	bl	8008de4 <USBH_CtlReq>
 80087f4:	4603      	mov	r3, r0
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3708      	adds	r7, #8
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}

080087fe <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80087fe:	b580      	push	{r7, lr}
 8008800:	b082      	sub	sp, #8
 8008802:	af00      	add	r7, sp, #0
 8008804:	6078      	str	r0, [r7, #4]
 8008806:	460b      	mov	r3, r1
 8008808:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	789b      	ldrb	r3, [r3, #2]
 800880e:	2b01      	cmp	r3, #1
 8008810:	d10f      	bne.n	8008832 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2200      	movs	r2, #0
 8008816:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2203      	movs	r2, #3
 800881c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800881e:	78fb      	ldrb	r3, [r7, #3]
 8008820:	b29a      	uxth	r2, r3
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2200      	movs	r2, #0
 800882a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2200      	movs	r2, #0
 8008830:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008832:	2200      	movs	r2, #0
 8008834:	2100      	movs	r1, #0
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 fad4 	bl	8008de4 <USBH_CtlReq>
 800883c:	4603      	mov	r3, r0
}
 800883e:	4618      	mov	r0, r3
 8008840:	3708      	adds	r7, #8
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}

08008846 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008846:	b580      	push	{r7, lr}
 8008848:	b082      	sub	sp, #8
 800884a:	af00      	add	r7, sp, #0
 800884c:	6078      	str	r0, [r7, #4]
 800884e:	460b      	mov	r3, r1
 8008850:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	789b      	ldrb	r3, [r3, #2]
 8008856:	2b01      	cmp	r3, #1
 8008858:	d10f      	bne.n	800887a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2202      	movs	r2, #2
 800885e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2201      	movs	r2, #1
 8008864:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2200      	movs	r2, #0
 800886a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800886c:	78fb      	ldrb	r3, [r7, #3]
 800886e:	b29a      	uxth	r2, r3
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800887a:	2200      	movs	r2, #0
 800887c:	2100      	movs	r1, #0
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 fab0 	bl	8008de4 <USBH_CtlReq>
 8008884:	4603      	mov	r3, r0
}
 8008886:	4618      	mov	r0, r3
 8008888:	3708      	adds	r7, #8
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}
	...

08008890 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008890:	b480      	push	{r7}
 8008892:	b085      	sub	sp, #20
 8008894:	af00      	add	r7, sp, #0
 8008896:	60f8      	str	r0, [r7, #12]
 8008898:	60b9      	str	r1, [r7, #8]
 800889a:	4613      	mov	r3, r2
 800889c:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	781a      	ldrb	r2, [r3, #0]
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	785a      	ldrb	r2, [r3, #1]
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	3302      	adds	r3, #2
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	b29a      	uxth	r2, r3
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	3303      	adds	r3, #3
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	b29b      	uxth	r3, r3
 80088be:	021b      	lsls	r3, r3, #8
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	4313      	orrs	r3, r2
 80088c4:	b29a      	uxth	r2, r3
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	791a      	ldrb	r2, [r3, #4]
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	795a      	ldrb	r2, [r3, #5]
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	799a      	ldrb	r2, [r3, #6]
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	79da      	ldrb	r2, [r3, #7]
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	79db      	ldrb	r3, [r3, #7]
 80088ee:	2b20      	cmp	r3, #32
 80088f0:	dc0f      	bgt.n	8008912 <USBH_ParseDevDesc+0x82>
 80088f2:	2b08      	cmp	r3, #8
 80088f4:	db14      	blt.n	8008920 <USBH_ParseDevDesc+0x90>
 80088f6:	3b08      	subs	r3, #8
 80088f8:	4a2d      	ldr	r2, [pc, #180]	; (80089b0 <USBH_ParseDevDesc+0x120>)
 80088fa:	fa22 f303 	lsr.w	r3, r2, r3
 80088fe:	f003 0301 	and.w	r3, r3, #1
 8008902:	2b00      	cmp	r3, #0
 8008904:	bf14      	ite	ne
 8008906:	2301      	movne	r3, #1
 8008908:	2300      	moveq	r3, #0
 800890a:	b2db      	uxtb	r3, r3
 800890c:	2b00      	cmp	r3, #0
 800890e:	d102      	bne.n	8008916 <USBH_ParseDevDesc+0x86>
 8008910:	e006      	b.n	8008920 <USBH_ParseDevDesc+0x90>
 8008912:	2b40      	cmp	r3, #64	; 0x40
 8008914:	d104      	bne.n	8008920 <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	79da      	ldrb	r2, [r3, #7]
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	71da      	strb	r2, [r3, #7]
      break;
 800891e:	e003      	b.n	8008928 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2240      	movs	r2, #64	; 0x40
 8008924:	71da      	strb	r2, [r3, #7]
      break;
 8008926:	bf00      	nop
  }

  if (length > 8U)
 8008928:	88fb      	ldrh	r3, [r7, #6]
 800892a:	2b08      	cmp	r3, #8
 800892c:	d939      	bls.n	80089a2 <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	3308      	adds	r3, #8
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	b29a      	uxth	r2, r3
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	3309      	adds	r3, #9
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	b29b      	uxth	r3, r3
 800893e:	021b      	lsls	r3, r3, #8
 8008940:	b29b      	uxth	r3, r3
 8008942:	4313      	orrs	r3, r2
 8008944:	b29a      	uxth	r2, r3
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	330a      	adds	r3, #10
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	b29a      	uxth	r2, r3
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	330b      	adds	r3, #11
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	b29b      	uxth	r3, r3
 800895a:	021b      	lsls	r3, r3, #8
 800895c:	b29b      	uxth	r3, r3
 800895e:	4313      	orrs	r3, r2
 8008960:	b29a      	uxth	r2, r3
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	330c      	adds	r3, #12
 800896a:	781b      	ldrb	r3, [r3, #0]
 800896c:	b29a      	uxth	r2, r3
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	330d      	adds	r3, #13
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	b29b      	uxth	r3, r3
 8008976:	021b      	lsls	r3, r3, #8
 8008978:	b29b      	uxth	r3, r3
 800897a:	4313      	orrs	r3, r2
 800897c:	b29a      	uxth	r2, r3
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	7b9a      	ldrb	r2, [r3, #14]
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	7bda      	ldrb	r2, [r3, #15]
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	7c1a      	ldrb	r2, [r3, #16]
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	7c5a      	ldrb	r2, [r3, #17]
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	745a      	strb	r2, [r3, #17]
  }
}
 80089a2:	bf00      	nop
 80089a4:	3714      	adds	r7, #20
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr
 80089ae:	bf00      	nop
 80089b0:	01000101 	.word	0x01000101

080089b4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b08c      	sub	sp, #48	; 0x30
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	60b9      	str	r1, [r7, #8]
 80089be:	4613      	mov	r3, r2
 80089c0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80089c8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80089ca:	2300      	movs	r3, #0
 80089cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80089d4:	2300      	movs	r3, #0
 80089d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80089da:	2300      	movs	r3, #0
 80089dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	781a      	ldrb	r2, [r3, #0]
 80089e8:	6a3b      	ldr	r3, [r7, #32]
 80089ea:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	785a      	ldrb	r2, [r3, #1]
 80089f0:	6a3b      	ldr	r3, [r7, #32]
 80089f2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	3302      	adds	r3, #2
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	b29a      	uxth	r2, r3
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	3303      	adds	r3, #3
 8008a00:	781b      	ldrb	r3, [r3, #0]
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	021b      	lsls	r3, r3, #8
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a10:	bf28      	it	cs
 8008a12:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8008a16:	b29a      	uxth	r2, r3
 8008a18:	6a3b      	ldr	r3, [r7, #32]
 8008a1a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	791a      	ldrb	r2, [r3, #4]
 8008a20:	6a3b      	ldr	r3, [r7, #32]
 8008a22:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	795a      	ldrb	r2, [r3, #5]
 8008a28:	6a3b      	ldr	r3, [r7, #32]
 8008a2a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	799a      	ldrb	r2, [r3, #6]
 8008a30:	6a3b      	ldr	r3, [r7, #32]
 8008a32:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	79da      	ldrb	r2, [r3, #7]
 8008a38:	6a3b      	ldr	r3, [r7, #32]
 8008a3a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	7a1a      	ldrb	r2, [r3, #8]
 8008a40:	6a3b      	ldr	r3, [r7, #32]
 8008a42:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8008a44:	6a3b      	ldr	r3, [r7, #32]
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	2b09      	cmp	r3, #9
 8008a4a:	d002      	beq.n	8008a52 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008a4c:	6a3b      	ldr	r3, [r7, #32]
 8008a4e:	2209      	movs	r2, #9
 8008a50:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008a52:	88fb      	ldrh	r3, [r7, #6]
 8008a54:	2b09      	cmp	r3, #9
 8008a56:	f240 809d 	bls.w	8008b94 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8008a5a:	2309      	movs	r3, #9
 8008a5c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008a62:	e081      	b.n	8008b68 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008a64:	f107 0316 	add.w	r3, r7, #22
 8008a68:	4619      	mov	r1, r3
 8008a6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a6c:	f000 f99f 	bl	8008dae <USBH_GetNextDesc>
 8008a70:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a74:	785b      	ldrb	r3, [r3, #1]
 8008a76:	2b04      	cmp	r3, #4
 8008a78:	d176      	bne.n	8008b68 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	2b09      	cmp	r3, #9
 8008a80:	d002      	beq.n	8008a88 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a84:	2209      	movs	r2, #9
 8008a86:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008a88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a8c:	221a      	movs	r2, #26
 8008a8e:	fb02 f303 	mul.w	r3, r2, r3
 8008a92:	3308      	adds	r3, #8
 8008a94:	6a3a      	ldr	r2, [r7, #32]
 8008a96:	4413      	add	r3, r2
 8008a98:	3302      	adds	r3, #2
 8008a9a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008a9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a9e:	69f8      	ldr	r0, [r7, #28]
 8008aa0:	f000 f87e 	bl	8008ba0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008aae:	e043      	b.n	8008b38 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008ab0:	f107 0316 	add.w	r3, r7, #22
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ab8:	f000 f979 	bl	8008dae <USBH_GetNextDesc>
 8008abc:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac0:	785b      	ldrb	r3, [r3, #1]
 8008ac2:	2b05      	cmp	r3, #5
 8008ac4:	d138      	bne.n	8008b38 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8008ac6:	69fb      	ldr	r3, [r7, #28]
 8008ac8:	795b      	ldrb	r3, [r3, #5]
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d10f      	bne.n	8008aee <USBH_ParseCfgDesc+0x13a>
 8008ace:	69fb      	ldr	r3, [r7, #28]
 8008ad0:	799b      	ldrb	r3, [r3, #6]
 8008ad2:	2b02      	cmp	r3, #2
 8008ad4:	d10b      	bne.n	8008aee <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	79db      	ldrb	r3, [r3, #7]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d10f      	bne.n	8008afe <USBH_ParseCfgDesc+0x14a>
 8008ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	2b09      	cmp	r3, #9
 8008ae4:	d00b      	beq.n	8008afe <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8008ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae8:	2209      	movs	r2, #9
 8008aea:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008aec:	e007      	b.n	8008afe <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8008aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af0:	781b      	ldrb	r3, [r3, #0]
 8008af2:	2b07      	cmp	r3, #7
 8008af4:	d004      	beq.n	8008b00 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af8:	2207      	movs	r2, #7
 8008afa:	701a      	strb	r2, [r3, #0]
 8008afc:	e000      	b.n	8008b00 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008afe:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008b00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b04:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008b08:	3201      	adds	r2, #1
 8008b0a:	00d2      	lsls	r2, r2, #3
 8008b0c:	211a      	movs	r1, #26
 8008b0e:	fb01 f303 	mul.w	r3, r1, r3
 8008b12:	4413      	add	r3, r2
 8008b14:	3308      	adds	r3, #8
 8008b16:	6a3a      	ldr	r2, [r7, #32]
 8008b18:	4413      	add	r3, r2
 8008b1a:	3304      	adds	r3, #4
 8008b1c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008b1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b20:	69b9      	ldr	r1, [r7, #24]
 8008b22:	68f8      	ldr	r0, [r7, #12]
 8008b24:	f000 f86b 	bl	8008bfe <USBH_ParseEPDesc>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8008b2e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008b32:	3301      	adds	r3, #1
 8008b34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008b38:	69fb      	ldr	r3, [r7, #28]
 8008b3a:	791b      	ldrb	r3, [r3, #4]
 8008b3c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d204      	bcs.n	8008b4e <USBH_ParseCfgDesc+0x19a>
 8008b44:	6a3b      	ldr	r3, [r7, #32]
 8008b46:	885a      	ldrh	r2, [r3, #2]
 8008b48:	8afb      	ldrh	r3, [r7, #22]
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d8b0      	bhi.n	8008ab0 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008b4e:	69fb      	ldr	r3, [r7, #28]
 8008b50:	791b      	ldrb	r3, [r3, #4]
 8008b52:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d201      	bcs.n	8008b5e <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8008b5a:	2303      	movs	r3, #3
 8008b5c:	e01c      	b.n	8008b98 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8008b5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b62:	3301      	adds	r3, #1
 8008b64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008b68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	d805      	bhi.n	8008b7c <USBH_ParseCfgDesc+0x1c8>
 8008b70:	6a3b      	ldr	r3, [r7, #32]
 8008b72:	885a      	ldrh	r2, [r3, #2]
 8008b74:	8afb      	ldrh	r3, [r7, #22]
 8008b76:	429a      	cmp	r2, r3
 8008b78:	f63f af74 	bhi.w	8008a64 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008b7c:	6a3b      	ldr	r3, [r7, #32]
 8008b7e:	791b      	ldrb	r3, [r3, #4]
 8008b80:	2b02      	cmp	r3, #2
 8008b82:	bf28      	it	cs
 8008b84:	2302      	movcs	r3, #2
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d201      	bcs.n	8008b94 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8008b90:	2303      	movs	r3, #3
 8008b92:	e001      	b.n	8008b98 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8008b94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3730      	adds	r7, #48	; 0x30
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b083      	sub	sp, #12
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	781a      	ldrb	r2, [r3, #0]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	785a      	ldrb	r2, [r3, #1]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	789a      	ldrb	r2, [r3, #2]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	78da      	ldrb	r2, [r3, #3]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	791a      	ldrb	r2, [r3, #4]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	795a      	ldrb	r2, [r3, #5]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	799a      	ldrb	r2, [r3, #6]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	79da      	ldrb	r2, [r3, #7]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	7a1a      	ldrb	r2, [r3, #8]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	721a      	strb	r2, [r3, #8]
}
 8008bf2:	bf00      	nop
 8008bf4:	370c      	adds	r7, #12
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfc:	4770      	bx	lr

08008bfe <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8008bfe:	b480      	push	{r7}
 8008c00:	b087      	sub	sp, #28
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	60f8      	str	r0, [r7, #12]
 8008c06:	60b9      	str	r1, [r7, #8]
 8008c08:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	781a      	ldrb	r2, [r3, #0]
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	785a      	ldrb	r2, [r3, #1]
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	789a      	ldrb	r2, [r3, #2]
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	78da      	ldrb	r2, [r3, #3]
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	3304      	adds	r3, #4
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	b29a      	uxth	r2, r3
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	3305      	adds	r3, #5
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	021b      	lsls	r3, r3, #8
 8008c40:	b29b      	uxth	r3, r3
 8008c42:	4313      	orrs	r3, r2
 8008c44:	b29a      	uxth	r2, r3
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	799a      	ldrb	r2, [r3, #6]
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	889b      	ldrh	r3, [r3, #4]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d102      	bne.n	8008c60 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8008c5a:	2303      	movs	r3, #3
 8008c5c:	75fb      	strb	r3, [r7, #23]
 8008c5e:	e033      	b.n	8008cc8 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	889b      	ldrh	r3, [r3, #4]
 8008c64:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008c68:	f023 0307 	bic.w	r3, r3, #7
 8008c6c:	b29a      	uxth	r2, r3
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	889b      	ldrh	r3, [r3, #4]
 8008c76:	b21a      	sxth	r2, r3
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	3304      	adds	r3, #4
 8008c7c:	781b      	ldrb	r3, [r3, #0]
 8008c7e:	b299      	uxth	r1, r3
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	3305      	adds	r3, #5
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	021b      	lsls	r3, r3, #8
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	430b      	orrs	r3, r1
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d110      	bne.n	8008cba <USBH_ParseEPDesc+0xbc>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	3304      	adds	r3, #4
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	b299      	uxth	r1, r3
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	3305      	adds	r3, #5
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	021b      	lsls	r3, r3, #8
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	430b      	orrs	r3, r1
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	b21b      	sxth	r3, r3
 8008cb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008cb6:	b21b      	sxth	r3, r3
 8008cb8:	e001      	b.n	8008cbe <USBH_ParseEPDesc+0xc0>
 8008cba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	b21b      	sxth	r3, r3
 8008cc2:	b29a      	uxth	r2, r3
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d116      	bne.n	8008d00 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	78db      	ldrb	r3, [r3, #3]
 8008cd6:	f003 0303 	and.w	r3, r3, #3
 8008cda:	2b01      	cmp	r3, #1
 8008cdc:	d005      	beq.n	8008cea <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	78db      	ldrb	r3, [r3, #3]
 8008ce2:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008ce6:	2b03      	cmp	r3, #3
 8008ce8:	d127      	bne.n	8008d3a <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	799b      	ldrb	r3, [r3, #6]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d003      	beq.n	8008cfa <USBH_ParseEPDesc+0xfc>
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	799b      	ldrb	r3, [r3, #6]
 8008cf6:	2b10      	cmp	r3, #16
 8008cf8:	d91f      	bls.n	8008d3a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008cfa:	2303      	movs	r3, #3
 8008cfc:	75fb      	strb	r3, [r7, #23]
 8008cfe:	e01c      	b.n	8008d3a <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	78db      	ldrb	r3, [r3, #3]
 8008d04:	f003 0303 	and.w	r3, r3, #3
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d10a      	bne.n	8008d22 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	799b      	ldrb	r3, [r3, #6]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d003      	beq.n	8008d1c <USBH_ParseEPDesc+0x11e>
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	799b      	ldrb	r3, [r3, #6]
 8008d18:	2b10      	cmp	r3, #16
 8008d1a:	d90e      	bls.n	8008d3a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008d1c:	2303      	movs	r3, #3
 8008d1e:	75fb      	strb	r3, [r7, #23]
 8008d20:	e00b      	b.n	8008d3a <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	78db      	ldrb	r3, [r3, #3]
 8008d26:	f003 0303 	and.w	r3, r3, #3
 8008d2a:	2b03      	cmp	r3, #3
 8008d2c:	d105      	bne.n	8008d3a <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	799b      	ldrb	r3, [r3, #6]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d101      	bne.n	8008d3a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008d36:	2303      	movs	r3, #3
 8008d38:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8008d3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	371c      	adds	r7, #28
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr

08008d48 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b087      	sub	sp, #28
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	60f8      	str	r0, [r7, #12]
 8008d50:	60b9      	str	r1, [r7, #8]
 8008d52:	4613      	mov	r3, r2
 8008d54:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	3301      	adds	r3, #1
 8008d5a:	781b      	ldrb	r3, [r3, #0]
 8008d5c:	2b03      	cmp	r3, #3
 8008d5e:	d120      	bne.n	8008da2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	1e9a      	subs	r2, r3, #2
 8008d66:	88fb      	ldrh	r3, [r7, #6]
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	bf28      	it	cs
 8008d6c:	4613      	movcs	r3, r2
 8008d6e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	3302      	adds	r3, #2
 8008d74:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008d76:	2300      	movs	r3, #0
 8008d78:	82fb      	strh	r3, [r7, #22]
 8008d7a:	e00b      	b.n	8008d94 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008d7c:	8afb      	ldrh	r3, [r7, #22]
 8008d7e:	68fa      	ldr	r2, [r7, #12]
 8008d80:	4413      	add	r3, r2
 8008d82:	781a      	ldrb	r2, [r3, #0]
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	3301      	adds	r3, #1
 8008d8c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008d8e:	8afb      	ldrh	r3, [r7, #22]
 8008d90:	3302      	adds	r3, #2
 8008d92:	82fb      	strh	r3, [r7, #22]
 8008d94:	8afa      	ldrh	r2, [r7, #22]
 8008d96:	8abb      	ldrh	r3, [r7, #20]
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d3ef      	bcc.n	8008d7c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	701a      	strb	r2, [r3, #0]
  }
}
 8008da2:	bf00      	nop
 8008da4:	371c      	adds	r7, #28
 8008da6:	46bd      	mov	sp, r7
 8008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dac:	4770      	bx	lr

08008dae <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008dae:	b480      	push	{r7}
 8008db0:	b085      	sub	sp, #20
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
 8008db6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	881a      	ldrh	r2, [r3, #0]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	b29b      	uxth	r3, r3
 8008dc2:	4413      	add	r3, r2
 8008dc4:	b29a      	uxth	r2, r3
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	4413      	add	r3, r2
 8008dd4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3714      	adds	r7, #20
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b086      	sub	sp, #24
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	60f8      	str	r0, [r7, #12]
 8008dec:	60b9      	str	r1, [r7, #8]
 8008dee:	4613      	mov	r3, r2
 8008df0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008df2:	2301      	movs	r3, #1
 8008df4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	789b      	ldrb	r3, [r3, #2]
 8008dfa:	2b01      	cmp	r3, #1
 8008dfc:	d002      	beq.n	8008e04 <USBH_CtlReq+0x20>
 8008dfe:	2b02      	cmp	r3, #2
 8008e00:	d01d      	beq.n	8008e3e <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8008e02:	e043      	b.n	8008e8c <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	68ba      	ldr	r2, [r7, #8]
 8008e08:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	88fa      	ldrh	r2, [r7, #6]
 8008e0e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2201      	movs	r2, #1
 8008e14:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2202      	movs	r2, #2
 8008e1a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2203      	movs	r2, #3
 8008e24:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008e34:	2300      	movs	r3, #0
 8008e36:	2200      	movs	r2, #0
 8008e38:	f000 fd56 	bl	80098e8 <osMessageQueuePut>
      break;
 8008e3c:	e026      	b.n	8008e8c <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8008e3e:	68f8      	ldr	r0, [r7, #12]
 8008e40:	f000 f82a 	bl	8008e98 <USBH_HandleControl>
 8008e44:	4603      	mov	r3, r0
 8008e46:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008e48:	7dfb      	ldrb	r3, [r7, #23]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d002      	beq.n	8008e54 <USBH_CtlReq+0x70>
 8008e4e:	7dfb      	ldrb	r3, [r7, #23]
 8008e50:	2b03      	cmp	r3, #3
 8008e52:	d106      	bne.n	8008e62 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2201      	movs	r2, #1
 8008e58:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	761a      	strb	r2, [r3, #24]
 8008e60:	e005      	b.n	8008e6e <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8008e62:	7dfb      	ldrb	r3, [r7, #23]
 8008e64:	2b02      	cmp	r3, #2
 8008e66:	d102      	bne.n	8008e6e <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2203      	movs	r2, #3
 8008e72:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008e82:	2300      	movs	r3, #0
 8008e84:	2200      	movs	r2, #0
 8008e86:	f000 fd2f 	bl	80098e8 <osMessageQueuePut>
      break;
 8008e8a:	bf00      	nop
  }
  return status;
 8008e8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3718      	adds	r7, #24
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
	...

08008e98 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b086      	sub	sp, #24
 8008e9c:	af02      	add	r7, sp, #8
 8008e9e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	7e1b      	ldrb	r3, [r3, #24]
 8008eac:	3b01      	subs	r3, #1
 8008eae:	2b0a      	cmp	r3, #10
 8008eb0:	f200 8229 	bhi.w	8009306 <USBH_HandleControl+0x46e>
 8008eb4:	a201      	add	r2, pc, #4	; (adr r2, 8008ebc <USBH_HandleControl+0x24>)
 8008eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eba:	bf00      	nop
 8008ebc:	08008ee9 	.word	0x08008ee9
 8008ec0:	08008f03 	.word	0x08008f03
 8008ec4:	08008fa5 	.word	0x08008fa5
 8008ec8:	08008fcb 	.word	0x08008fcb
 8008ecc:	08009057 	.word	0x08009057
 8008ed0:	08009081 	.word	0x08009081
 8008ed4:	08009143 	.word	0x08009143
 8008ed8:	08009165 	.word	0x08009165
 8008edc:	080091f7 	.word	0x080091f7
 8008ee0:	0800921d 	.word	0x0800921d
 8008ee4:	080092af 	.word	0x080092af
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f103 0110 	add.w	r1, r3, #16
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	795b      	ldrb	r3, [r3, #5]
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 fa17 	bl	8009328 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2202      	movs	r2, #2
 8008efe:	761a      	strb	r2, [r3, #24]
      break;
 8008f00:	e20c      	b.n	800931c <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	795b      	ldrb	r3, [r3, #5]
 8008f06:	4619      	mov	r1, r3
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f003 fd9b 	bl	800ca44 <USBH_LL_GetURBState>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008f12:	7bbb      	ldrb	r3, [r7, #14]
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d12c      	bne.n	8008f72 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	7c1b      	ldrb	r3, [r3, #16]
 8008f1c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008f20:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	8adb      	ldrh	r3, [r3, #22]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d00a      	beq.n	8008f40 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008f2a:	7b7b      	ldrb	r3, [r7, #13]
 8008f2c:	2b80      	cmp	r3, #128	; 0x80
 8008f2e:	d103      	bne.n	8008f38 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2203      	movs	r2, #3
 8008f34:	761a      	strb	r2, [r3, #24]
 8008f36:	e00d      	b.n	8008f54 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2205      	movs	r2, #5
 8008f3c:	761a      	strb	r2, [r3, #24]
 8008f3e:	e009      	b.n	8008f54 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8008f40:	7b7b      	ldrb	r3, [r7, #13]
 8008f42:	2b80      	cmp	r3, #128	; 0x80
 8008f44:	d103      	bne.n	8008f4e <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2209      	movs	r2, #9
 8008f4a:	761a      	strb	r2, [r3, #24]
 8008f4c:	e002      	b.n	8008f54 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2207      	movs	r2, #7
 8008f52:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2203      	movs	r2, #3
 8008f58:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008f68:	2300      	movs	r3, #0
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	f000 fcbc 	bl	80098e8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008f70:	e1cb      	b.n	800930a <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008f72:	7bbb      	ldrb	r3, [r7, #14]
 8008f74:	2b04      	cmp	r3, #4
 8008f76:	d003      	beq.n	8008f80 <USBH_HandleControl+0xe8>
 8008f78:	7bbb      	ldrb	r3, [r7, #14]
 8008f7a:	2b02      	cmp	r3, #2
 8008f7c:	f040 81c5 	bne.w	800930a <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	220b      	movs	r2, #11
 8008f84:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2203      	movs	r2, #3
 8008f8a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	f000 fca3 	bl	80098e8 <osMessageQueuePut>
      break;
 8008fa2:	e1b2      	b.n	800930a <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008faa:	b29a      	uxth	r2, r3
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6899      	ldr	r1, [r3, #8]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	899a      	ldrh	r2, [r3, #12]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	791b      	ldrb	r3, [r3, #4]
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f000 f9f2 	bl	80093a6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2204      	movs	r2, #4
 8008fc6:	761a      	strb	r2, [r3, #24]
      break;
 8008fc8:	e1a8      	b.n	800931c <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	791b      	ldrb	r3, [r3, #4]
 8008fce:	4619      	mov	r1, r3
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f003 fd37 	bl	800ca44 <USBH_LL_GetURBState>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008fda:	7bbb      	ldrb	r3, [r7, #14]
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	d110      	bne.n	8009002 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2209      	movs	r2, #9
 8008fe4:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2203      	movs	r2, #3
 8008fea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	f000 fc73 	bl	80098e8 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009002:	7bbb      	ldrb	r3, [r7, #14]
 8009004:	2b05      	cmp	r3, #5
 8009006:	d110      	bne.n	800902a <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009008:	2303      	movs	r3, #3
 800900a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2203      	movs	r2, #3
 8009010:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009020:	2300      	movs	r3, #0
 8009022:	2200      	movs	r2, #0
 8009024:	f000 fc60 	bl	80098e8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009028:	e171      	b.n	800930e <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800902a:	7bbb      	ldrb	r3, [r7, #14]
 800902c:	2b04      	cmp	r3, #4
 800902e:	f040 816e 	bne.w	800930e <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	220b      	movs	r2, #11
 8009036:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2203      	movs	r2, #3
 800903c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800904c:	2300      	movs	r3, #0
 800904e:	2200      	movs	r2, #0
 8009050:	f000 fc4a 	bl	80098e8 <osMessageQueuePut>
      break;
 8009054:	e15b      	b.n	800930e <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6899      	ldr	r1, [r3, #8]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	899a      	ldrh	r2, [r3, #12]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	795b      	ldrb	r3, [r3, #5]
 8009062:	2001      	movs	r0, #1
 8009064:	9000      	str	r0, [sp, #0]
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 f978 	bl	800935c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009072:	b29a      	uxth	r2, r3
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2206      	movs	r2, #6
 800907c:	761a      	strb	r2, [r3, #24]
      break;
 800907e:	e14d      	b.n	800931c <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	795b      	ldrb	r3, [r3, #5]
 8009084:	4619      	mov	r1, r3
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f003 fcdc 	bl	800ca44 <USBH_LL_GetURBState>
 800908c:	4603      	mov	r3, r0
 800908e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009090:	7bbb      	ldrb	r3, [r7, #14]
 8009092:	2b01      	cmp	r3, #1
 8009094:	d111      	bne.n	80090ba <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2207      	movs	r2, #7
 800909a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2203      	movs	r2, #3
 80090a0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80090b0:	2300      	movs	r3, #0
 80090b2:	2200      	movs	r2, #0
 80090b4:	f000 fc18 	bl	80098e8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80090b8:	e12b      	b.n	8009312 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 80090ba:	7bbb      	ldrb	r3, [r7, #14]
 80090bc:	2b05      	cmp	r3, #5
 80090be:	d113      	bne.n	80090e8 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	220c      	movs	r2, #12
 80090c4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80090c6:	2303      	movs	r3, #3
 80090c8:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2203      	movs	r2, #3
 80090ce:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80090de:	2300      	movs	r3, #0
 80090e0:	2200      	movs	r2, #0
 80090e2:	f000 fc01 	bl	80098e8 <osMessageQueuePut>
      break;
 80090e6:	e114      	b.n	8009312 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 80090e8:	7bbb      	ldrb	r3, [r7, #14]
 80090ea:	2b02      	cmp	r3, #2
 80090ec:	d111      	bne.n	8009112 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2205      	movs	r2, #5
 80090f2:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2203      	movs	r2, #3
 80090f8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009108:	2300      	movs	r3, #0
 800910a:	2200      	movs	r2, #0
 800910c:	f000 fbec 	bl	80098e8 <osMessageQueuePut>
      break;
 8009110:	e0ff      	b.n	8009312 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8009112:	7bbb      	ldrb	r3, [r7, #14]
 8009114:	2b04      	cmp	r3, #4
 8009116:	f040 80fc 	bne.w	8009312 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	220b      	movs	r2, #11
 800911e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009120:	2302      	movs	r3, #2
 8009122:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2203      	movs	r2, #3
 8009128:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009138:	2300      	movs	r3, #0
 800913a:	2200      	movs	r2, #0
 800913c:	f000 fbd4 	bl	80098e8 <osMessageQueuePut>
      break;
 8009140:	e0e7      	b.n	8009312 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	791b      	ldrb	r3, [r3, #4]
 8009146:	2200      	movs	r2, #0
 8009148:	2100      	movs	r1, #0
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f000 f92b 	bl	80093a6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009156:	b29a      	uxth	r2, r3
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2208      	movs	r2, #8
 8009160:	761a      	strb	r2, [r3, #24]

      break;
 8009162:	e0db      	b.n	800931c <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	791b      	ldrb	r3, [r3, #4]
 8009168:	4619      	mov	r1, r3
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f003 fc6a 	bl	800ca44 <USBH_LL_GetURBState>
 8009170:	4603      	mov	r3, r0
 8009172:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009174:	7bbb      	ldrb	r3, [r7, #14]
 8009176:	2b01      	cmp	r3, #1
 8009178:	d113      	bne.n	80091a2 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	220d      	movs	r2, #13
 800917e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009180:	2300      	movs	r3, #0
 8009182:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2203      	movs	r2, #3
 8009188:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009198:	2300      	movs	r3, #0
 800919a:	2200      	movs	r2, #0
 800919c:	f000 fba4 	bl	80098e8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80091a0:	e0b9      	b.n	8009316 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 80091a2:	7bbb      	ldrb	r3, [r7, #14]
 80091a4:	2b04      	cmp	r3, #4
 80091a6:	d111      	bne.n	80091cc <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	220b      	movs	r2, #11
 80091ac:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2203      	movs	r2, #3
 80091b2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80091c2:	2300      	movs	r3, #0
 80091c4:	2200      	movs	r2, #0
 80091c6:	f000 fb8f 	bl	80098e8 <osMessageQueuePut>
      break;
 80091ca:	e0a4      	b.n	8009316 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 80091cc:	7bbb      	ldrb	r3, [r7, #14]
 80091ce:	2b05      	cmp	r3, #5
 80091d0:	f040 80a1 	bne.w	8009316 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 80091d4:	2303      	movs	r3, #3
 80091d6:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2203      	movs	r2, #3
 80091dc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80091ec:	2300      	movs	r3, #0
 80091ee:	2200      	movs	r2, #0
 80091f0:	f000 fb7a 	bl	80098e8 <osMessageQueuePut>
      break;
 80091f4:	e08f      	b.n	8009316 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	795b      	ldrb	r3, [r3, #5]
 80091fa:	2201      	movs	r2, #1
 80091fc:	9200      	str	r2, [sp, #0]
 80091fe:	2200      	movs	r2, #0
 8009200:	2100      	movs	r1, #0
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 f8aa 	bl	800935c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800920e:	b29a      	uxth	r2, r3
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	220a      	movs	r2, #10
 8009218:	761a      	strb	r2, [r3, #24]
      break;
 800921a:	e07f      	b.n	800931c <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	795b      	ldrb	r3, [r3, #5]
 8009220:	4619      	mov	r1, r3
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f003 fc0e 	bl	800ca44 <USBH_LL_GetURBState>
 8009228:	4603      	mov	r3, r0
 800922a:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800922c:	7bbb      	ldrb	r3, [r7, #14]
 800922e:	2b01      	cmp	r3, #1
 8009230:	d113      	bne.n	800925a <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 8009232:	2300      	movs	r3, #0
 8009234:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	220d      	movs	r2, #13
 800923a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2203      	movs	r2, #3
 8009240:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009250:	2300      	movs	r3, #0
 8009252:	2200      	movs	r2, #0
 8009254:	f000 fb48 	bl	80098e8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009258:	e05f      	b.n	800931a <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800925a:	7bbb      	ldrb	r3, [r7, #14]
 800925c:	2b02      	cmp	r3, #2
 800925e:	d111      	bne.n	8009284 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2209      	movs	r2, #9
 8009264:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2203      	movs	r2, #3
 800926a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800927a:	2300      	movs	r3, #0
 800927c:	2200      	movs	r2, #0
 800927e:	f000 fb33 	bl	80098e8 <osMessageQueuePut>
      break;
 8009282:	e04a      	b.n	800931a <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8009284:	7bbb      	ldrb	r3, [r7, #14]
 8009286:	2b04      	cmp	r3, #4
 8009288:	d147      	bne.n	800931a <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	220b      	movs	r2, #11
 800928e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2203      	movs	r2, #3
 8009294:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80092a4:	2300      	movs	r3, #0
 80092a6:	2200      	movs	r2, #0
 80092a8:	f000 fb1e 	bl	80098e8 <osMessageQueuePut>
      break;
 80092ac:	e035      	b.n	800931a <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	7e5b      	ldrb	r3, [r3, #25]
 80092b2:	3301      	adds	r3, #1
 80092b4:	b2da      	uxtb	r2, r3
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	765a      	strb	r2, [r3, #25]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	7e5b      	ldrb	r3, [r3, #25]
 80092be:	2b02      	cmp	r3, #2
 80092c0:	d806      	bhi.n	80092d0 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2201      	movs	r2, #1
 80092c6:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2201      	movs	r2, #1
 80092cc:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80092ce:	e025      	b.n	800931c <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80092d6:	2106      	movs	r1, #6
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2200      	movs	r2, #0
 80092e0:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	795b      	ldrb	r3, [r3, #5]
 80092e6:	4619      	mov	r1, r3
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f000 f90d 	bl	8009508 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	791b      	ldrb	r3, [r3, #4]
 80092f2:	4619      	mov	r1, r3
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f000 f907 	bl	8009508 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2200      	movs	r2, #0
 80092fe:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009300:	2302      	movs	r3, #2
 8009302:	73fb      	strb	r3, [r7, #15]
      break;
 8009304:	e00a      	b.n	800931c <USBH_HandleControl+0x484>

    default:
      break;
 8009306:	bf00      	nop
 8009308:	e008      	b.n	800931c <USBH_HandleControl+0x484>
      break;
 800930a:	bf00      	nop
 800930c:	e006      	b.n	800931c <USBH_HandleControl+0x484>
      break;
 800930e:	bf00      	nop
 8009310:	e004      	b.n	800931c <USBH_HandleControl+0x484>
      break;
 8009312:	bf00      	nop
 8009314:	e002      	b.n	800931c <USBH_HandleControl+0x484>
      break;
 8009316:	bf00      	nop
 8009318:	e000      	b.n	800931c <USBH_HandleControl+0x484>
      break;
 800931a:	bf00      	nop
  }

  return status;
 800931c:	7bfb      	ldrb	r3, [r7, #15]
}
 800931e:	4618      	mov	r0, r3
 8009320:	3710      	adds	r7, #16
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}
 8009326:	bf00      	nop

08009328 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b088      	sub	sp, #32
 800932c:	af04      	add	r7, sp, #16
 800932e:	60f8      	str	r0, [r7, #12]
 8009330:	60b9      	str	r1, [r7, #8]
 8009332:	4613      	mov	r3, r2
 8009334:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009336:	79f9      	ldrb	r1, [r7, #7]
 8009338:	2300      	movs	r3, #0
 800933a:	9303      	str	r3, [sp, #12]
 800933c:	2308      	movs	r3, #8
 800933e:	9302      	str	r3, [sp, #8]
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	9301      	str	r3, [sp, #4]
 8009344:	2300      	movs	r3, #0
 8009346:	9300      	str	r3, [sp, #0]
 8009348:	2300      	movs	r3, #0
 800934a:	2200      	movs	r2, #0
 800934c:	68f8      	ldr	r0, [r7, #12]
 800934e:	f003 fb48 	bl	800c9e2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009352:	2300      	movs	r3, #0
}
 8009354:	4618      	mov	r0, r3
 8009356:	3710      	adds	r7, #16
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}

0800935c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b088      	sub	sp, #32
 8009360:	af04      	add	r7, sp, #16
 8009362:	60f8      	str	r0, [r7, #12]
 8009364:	60b9      	str	r1, [r7, #8]
 8009366:	4611      	mov	r1, r2
 8009368:	461a      	mov	r2, r3
 800936a:	460b      	mov	r3, r1
 800936c:	80fb      	strh	r3, [r7, #6]
 800936e:	4613      	mov	r3, r2
 8009370:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009378:	2b00      	cmp	r3, #0
 800937a:	d001      	beq.n	8009380 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800937c:	2300      	movs	r3, #0
 800937e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009380:	7979      	ldrb	r1, [r7, #5]
 8009382:	7e3b      	ldrb	r3, [r7, #24]
 8009384:	9303      	str	r3, [sp, #12]
 8009386:	88fb      	ldrh	r3, [r7, #6]
 8009388:	9302      	str	r3, [sp, #8]
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	9301      	str	r3, [sp, #4]
 800938e:	2301      	movs	r3, #1
 8009390:	9300      	str	r3, [sp, #0]
 8009392:	2300      	movs	r3, #0
 8009394:	2200      	movs	r2, #0
 8009396:	68f8      	ldr	r0, [r7, #12]
 8009398:	f003 fb23 	bl	800c9e2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800939c:	2300      	movs	r3, #0
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3710      	adds	r7, #16
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}

080093a6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80093a6:	b580      	push	{r7, lr}
 80093a8:	b088      	sub	sp, #32
 80093aa:	af04      	add	r7, sp, #16
 80093ac:	60f8      	str	r0, [r7, #12]
 80093ae:	60b9      	str	r1, [r7, #8]
 80093b0:	4611      	mov	r1, r2
 80093b2:	461a      	mov	r2, r3
 80093b4:	460b      	mov	r3, r1
 80093b6:	80fb      	strh	r3, [r7, #6]
 80093b8:	4613      	mov	r3, r2
 80093ba:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80093bc:	7979      	ldrb	r1, [r7, #5]
 80093be:	2300      	movs	r3, #0
 80093c0:	9303      	str	r3, [sp, #12]
 80093c2:	88fb      	ldrh	r3, [r7, #6]
 80093c4:	9302      	str	r3, [sp, #8]
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	9301      	str	r3, [sp, #4]
 80093ca:	2301      	movs	r3, #1
 80093cc:	9300      	str	r3, [sp, #0]
 80093ce:	2300      	movs	r3, #0
 80093d0:	2201      	movs	r2, #1
 80093d2:	68f8      	ldr	r0, [r7, #12]
 80093d4:	f003 fb05 	bl	800c9e2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80093d8:	2300      	movs	r3, #0

}
 80093da:	4618      	mov	r0, r3
 80093dc:	3710      	adds	r7, #16
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}

080093e2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80093e2:	b580      	push	{r7, lr}
 80093e4:	b088      	sub	sp, #32
 80093e6:	af04      	add	r7, sp, #16
 80093e8:	60f8      	str	r0, [r7, #12]
 80093ea:	60b9      	str	r1, [r7, #8]
 80093ec:	4611      	mov	r1, r2
 80093ee:	461a      	mov	r2, r3
 80093f0:	460b      	mov	r3, r1
 80093f2:	80fb      	strh	r3, [r7, #6]
 80093f4:	4613      	mov	r3, r2
 80093f6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d001      	beq.n	8009406 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009402:	2300      	movs	r3, #0
 8009404:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009406:	7979      	ldrb	r1, [r7, #5]
 8009408:	7e3b      	ldrb	r3, [r7, #24]
 800940a:	9303      	str	r3, [sp, #12]
 800940c:	88fb      	ldrh	r3, [r7, #6]
 800940e:	9302      	str	r3, [sp, #8]
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	9301      	str	r3, [sp, #4]
 8009414:	2301      	movs	r3, #1
 8009416:	9300      	str	r3, [sp, #0]
 8009418:	2302      	movs	r3, #2
 800941a:	2200      	movs	r2, #0
 800941c:	68f8      	ldr	r0, [r7, #12]
 800941e:	f003 fae0 	bl	800c9e2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009422:	2300      	movs	r3, #0
}
 8009424:	4618      	mov	r0, r3
 8009426:	3710      	adds	r7, #16
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}

0800942c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b088      	sub	sp, #32
 8009430:	af04      	add	r7, sp, #16
 8009432:	60f8      	str	r0, [r7, #12]
 8009434:	60b9      	str	r1, [r7, #8]
 8009436:	4611      	mov	r1, r2
 8009438:	461a      	mov	r2, r3
 800943a:	460b      	mov	r3, r1
 800943c:	80fb      	strh	r3, [r7, #6]
 800943e:	4613      	mov	r3, r2
 8009440:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009442:	7979      	ldrb	r1, [r7, #5]
 8009444:	2300      	movs	r3, #0
 8009446:	9303      	str	r3, [sp, #12]
 8009448:	88fb      	ldrh	r3, [r7, #6]
 800944a:	9302      	str	r3, [sp, #8]
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	9301      	str	r3, [sp, #4]
 8009450:	2301      	movs	r3, #1
 8009452:	9300      	str	r3, [sp, #0]
 8009454:	2302      	movs	r3, #2
 8009456:	2201      	movs	r2, #1
 8009458:	68f8      	ldr	r0, [r7, #12]
 800945a:	f003 fac2 	bl	800c9e2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800945e:	2300      	movs	r3, #0
}
 8009460:	4618      	mov	r0, r3
 8009462:	3710      	adds	r7, #16
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}

08009468 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b086      	sub	sp, #24
 800946c:	af04      	add	r7, sp, #16
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	4608      	mov	r0, r1
 8009472:	4611      	mov	r1, r2
 8009474:	461a      	mov	r2, r3
 8009476:	4603      	mov	r3, r0
 8009478:	70fb      	strb	r3, [r7, #3]
 800947a:	460b      	mov	r3, r1
 800947c:	70bb      	strb	r3, [r7, #2]
 800947e:	4613      	mov	r3, r2
 8009480:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009482:	7878      	ldrb	r0, [r7, #1]
 8009484:	78ba      	ldrb	r2, [r7, #2]
 8009486:	78f9      	ldrb	r1, [r7, #3]
 8009488:	8b3b      	ldrh	r3, [r7, #24]
 800948a:	9302      	str	r3, [sp, #8]
 800948c:	7d3b      	ldrb	r3, [r7, #20]
 800948e:	9301      	str	r3, [sp, #4]
 8009490:	7c3b      	ldrb	r3, [r7, #16]
 8009492:	9300      	str	r3, [sp, #0]
 8009494:	4603      	mov	r3, r0
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f003 fa55 	bl	800c946 <USBH_LL_OpenPipe>

  return USBH_OK;
 800949c:	2300      	movs	r3, #0
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3708      	adds	r7, #8
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}

080094a6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80094a6:	b580      	push	{r7, lr}
 80094a8:	b082      	sub	sp, #8
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	6078      	str	r0, [r7, #4]
 80094ae:	460b      	mov	r3, r1
 80094b0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80094b2:	78fb      	ldrb	r3, [r7, #3]
 80094b4:	4619      	mov	r1, r3
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f003 fa74 	bl	800c9a4 <USBH_LL_ClosePipe>

  return USBH_OK;
 80094bc:	2300      	movs	r3, #0
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3708      	adds	r7, #8
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}

080094c6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80094c6:	b580      	push	{r7, lr}
 80094c8:	b084      	sub	sp, #16
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	6078      	str	r0, [r7, #4]
 80094ce:	460b      	mov	r3, r1
 80094d0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f000 f836 	bl	8009544 <USBH_GetFreePipe>
 80094d8:	4603      	mov	r3, r0
 80094da:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80094dc:	89fb      	ldrh	r3, [r7, #14]
 80094de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d00a      	beq.n	80094fc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80094e6:	78fa      	ldrb	r2, [r7, #3]
 80094e8:	89fb      	ldrh	r3, [r7, #14]
 80094ea:	f003 030f 	and.w	r3, r3, #15
 80094ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80094f2:	6879      	ldr	r1, [r7, #4]
 80094f4:	33e0      	adds	r3, #224	; 0xe0
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	440b      	add	r3, r1
 80094fa:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80094fc:	89fb      	ldrh	r3, [r7, #14]
 80094fe:	b2db      	uxtb	r3, r3
}
 8009500:	4618      	mov	r0, r3
 8009502:	3710      	adds	r7, #16
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}

08009508 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	460b      	mov	r3, r1
 8009512:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009514:	78fb      	ldrb	r3, [r7, #3]
 8009516:	2b0f      	cmp	r3, #15
 8009518:	d80d      	bhi.n	8009536 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800951a:	78fb      	ldrb	r3, [r7, #3]
 800951c:	687a      	ldr	r2, [r7, #4]
 800951e:	33e0      	adds	r3, #224	; 0xe0
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	4413      	add	r3, r2
 8009524:	685a      	ldr	r2, [r3, #4]
 8009526:	78fb      	ldrb	r3, [r7, #3]
 8009528:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800952c:	6879      	ldr	r1, [r7, #4]
 800952e:	33e0      	adds	r3, #224	; 0xe0
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	440b      	add	r3, r1
 8009534:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009536:	2300      	movs	r3, #0
}
 8009538:	4618      	mov	r0, r3
 800953a:	370c      	adds	r7, #12
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr

08009544 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009544:	b480      	push	{r7}
 8009546:	b085      	sub	sp, #20
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800954c:	2300      	movs	r3, #0
 800954e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009550:	2300      	movs	r3, #0
 8009552:	73fb      	strb	r3, [r7, #15]
 8009554:	e00f      	b.n	8009576 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009556:	7bfb      	ldrb	r3, [r7, #15]
 8009558:	687a      	ldr	r2, [r7, #4]
 800955a:	33e0      	adds	r3, #224	; 0xe0
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	4413      	add	r3, r2
 8009560:	685b      	ldr	r3, [r3, #4]
 8009562:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009566:	2b00      	cmp	r3, #0
 8009568:	d102      	bne.n	8009570 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800956a:	7bfb      	ldrb	r3, [r7, #15]
 800956c:	b29b      	uxth	r3, r3
 800956e:	e007      	b.n	8009580 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009570:	7bfb      	ldrb	r3, [r7, #15]
 8009572:	3301      	adds	r3, #1
 8009574:	73fb      	strb	r3, [r7, #15]
 8009576:	7bfb      	ldrb	r3, [r7, #15]
 8009578:	2b0f      	cmp	r3, #15
 800957a:	d9ec      	bls.n	8009556 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800957c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009580:	4618      	mov	r0, r3
 8009582:	3714      	adds	r7, #20
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr

0800958c <__NVIC_SetPriority>:
{
 800958c:	b480      	push	{r7}
 800958e:	b083      	sub	sp, #12
 8009590:	af00      	add	r7, sp, #0
 8009592:	4603      	mov	r3, r0
 8009594:	6039      	str	r1, [r7, #0]
 8009596:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800959c:	2b00      	cmp	r3, #0
 800959e:	db0a      	blt.n	80095b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	b2da      	uxtb	r2, r3
 80095a4:	490c      	ldr	r1, [pc, #48]	; (80095d8 <__NVIC_SetPriority+0x4c>)
 80095a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095aa:	0112      	lsls	r2, r2, #4
 80095ac:	b2d2      	uxtb	r2, r2
 80095ae:	440b      	add	r3, r1
 80095b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80095b4:	e00a      	b.n	80095cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	b2da      	uxtb	r2, r3
 80095ba:	4908      	ldr	r1, [pc, #32]	; (80095dc <__NVIC_SetPriority+0x50>)
 80095bc:	79fb      	ldrb	r3, [r7, #7]
 80095be:	f003 030f 	and.w	r3, r3, #15
 80095c2:	3b04      	subs	r3, #4
 80095c4:	0112      	lsls	r2, r2, #4
 80095c6:	b2d2      	uxtb	r2, r2
 80095c8:	440b      	add	r3, r1
 80095ca:	761a      	strb	r2, [r3, #24]
}
 80095cc:	bf00      	nop
 80095ce:	370c      	adds	r7, #12
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr
 80095d8:	e000e100 	.word	0xe000e100
 80095dc:	e000ed00 	.word	0xe000ed00

080095e0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80095e0:	b580      	push	{r7, lr}
 80095e2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80095e4:	4b05      	ldr	r3, [pc, #20]	; (80095fc <SysTick_Handler+0x1c>)
 80095e6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80095e8:	f001 ff6e 	bl	800b4c8 <xTaskGetSchedulerState>
 80095ec:	4603      	mov	r3, r0
 80095ee:	2b01      	cmp	r3, #1
 80095f0:	d001      	beq.n	80095f6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80095f2:	f002 fd59 	bl	800c0a8 <xPortSysTickHandler>
  }
}
 80095f6:	bf00      	nop
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop
 80095fc:	e000e010 	.word	0xe000e010

08009600 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009600:	b580      	push	{r7, lr}
 8009602:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009604:	2100      	movs	r1, #0
 8009606:	f06f 0004 	mvn.w	r0, #4
 800960a:	f7ff ffbf 	bl	800958c <__NVIC_SetPriority>
#endif
}
 800960e:	bf00      	nop
 8009610:	bd80      	pop	{r7, pc}
	...

08009614 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009614:	b480      	push	{r7}
 8009616:	b083      	sub	sp, #12
 8009618:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800961a:	f3ef 8305 	mrs	r3, IPSR
 800961e:	603b      	str	r3, [r7, #0]
  return(result);
 8009620:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009622:	2b00      	cmp	r3, #0
 8009624:	d003      	beq.n	800962e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009626:	f06f 0305 	mvn.w	r3, #5
 800962a:	607b      	str	r3, [r7, #4]
 800962c:	e00c      	b.n	8009648 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800962e:	4b0a      	ldr	r3, [pc, #40]	; (8009658 <osKernelInitialize+0x44>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d105      	bne.n	8009642 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009636:	4b08      	ldr	r3, [pc, #32]	; (8009658 <osKernelInitialize+0x44>)
 8009638:	2201      	movs	r2, #1
 800963a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800963c:	2300      	movs	r3, #0
 800963e:	607b      	str	r3, [r7, #4]
 8009640:	e002      	b.n	8009648 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009642:	f04f 33ff 	mov.w	r3, #4294967295
 8009646:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009648:	687b      	ldr	r3, [r7, #4]
}
 800964a:	4618      	mov	r0, r3
 800964c:	370c      	adds	r7, #12
 800964e:	46bd      	mov	sp, r7
 8009650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009654:	4770      	bx	lr
 8009656:	bf00      	nop
 8009658:	200002ac 	.word	0x200002ac

0800965c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800965c:	b580      	push	{r7, lr}
 800965e:	b082      	sub	sp, #8
 8009660:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009662:	f3ef 8305 	mrs	r3, IPSR
 8009666:	603b      	str	r3, [r7, #0]
  return(result);
 8009668:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800966a:	2b00      	cmp	r3, #0
 800966c:	d003      	beq.n	8009676 <osKernelStart+0x1a>
    stat = osErrorISR;
 800966e:	f06f 0305 	mvn.w	r3, #5
 8009672:	607b      	str	r3, [r7, #4]
 8009674:	e010      	b.n	8009698 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009676:	4b0b      	ldr	r3, [pc, #44]	; (80096a4 <osKernelStart+0x48>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	2b01      	cmp	r3, #1
 800967c:	d109      	bne.n	8009692 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800967e:	f7ff ffbf 	bl	8009600 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009682:	4b08      	ldr	r3, [pc, #32]	; (80096a4 <osKernelStart+0x48>)
 8009684:	2202      	movs	r2, #2
 8009686:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009688:	f001 fac2 	bl	800ac10 <vTaskStartScheduler>
      stat = osOK;
 800968c:	2300      	movs	r3, #0
 800968e:	607b      	str	r3, [r7, #4]
 8009690:	e002      	b.n	8009698 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009692:	f04f 33ff 	mov.w	r3, #4294967295
 8009696:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009698:	687b      	ldr	r3, [r7, #4]
}
 800969a:	4618      	mov	r0, r3
 800969c:	3708      	adds	r7, #8
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop
 80096a4:	200002ac 	.word	0x200002ac

080096a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b08e      	sub	sp, #56	; 0x38
 80096ac:	af04      	add	r7, sp, #16
 80096ae:	60f8      	str	r0, [r7, #12]
 80096b0:	60b9      	str	r1, [r7, #8]
 80096b2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80096b4:	2300      	movs	r3, #0
 80096b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096b8:	f3ef 8305 	mrs	r3, IPSR
 80096bc:	617b      	str	r3, [r7, #20]
  return(result);
 80096be:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d17e      	bne.n	80097c2 <osThreadNew+0x11a>
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d07b      	beq.n	80097c2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80096ca:	2380      	movs	r3, #128	; 0x80
 80096cc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80096ce:	2318      	movs	r3, #24
 80096d0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80096d2:	2300      	movs	r3, #0
 80096d4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80096d6:	f04f 33ff 	mov.w	r3, #4294967295
 80096da:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d045      	beq.n	800976e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d002      	beq.n	80096f0 <osThreadNew+0x48>
        name = attr->name;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	699b      	ldr	r3, [r3, #24]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d002      	beq.n	80096fe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	699b      	ldr	r3, [r3, #24]
 80096fc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80096fe:	69fb      	ldr	r3, [r7, #28]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d008      	beq.n	8009716 <osThreadNew+0x6e>
 8009704:	69fb      	ldr	r3, [r7, #28]
 8009706:	2b38      	cmp	r3, #56	; 0x38
 8009708:	d805      	bhi.n	8009716 <osThreadNew+0x6e>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	f003 0301 	and.w	r3, r3, #1
 8009712:	2b00      	cmp	r3, #0
 8009714:	d001      	beq.n	800971a <osThreadNew+0x72>
        return (NULL);
 8009716:	2300      	movs	r3, #0
 8009718:	e054      	b.n	80097c4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	695b      	ldr	r3, [r3, #20]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d003      	beq.n	800972a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	695b      	ldr	r3, [r3, #20]
 8009726:	089b      	lsrs	r3, r3, #2
 8009728:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	689b      	ldr	r3, [r3, #8]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d00e      	beq.n	8009750 <osThreadNew+0xa8>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	68db      	ldr	r3, [r3, #12]
 8009736:	2ba7      	cmp	r3, #167	; 0xa7
 8009738:	d90a      	bls.n	8009750 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800973e:	2b00      	cmp	r3, #0
 8009740:	d006      	beq.n	8009750 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	695b      	ldr	r3, [r3, #20]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d002      	beq.n	8009750 <osThreadNew+0xa8>
        mem = 1;
 800974a:	2301      	movs	r3, #1
 800974c:	61bb      	str	r3, [r7, #24]
 800974e:	e010      	b.n	8009772 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	689b      	ldr	r3, [r3, #8]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d10c      	bne.n	8009772 <osThreadNew+0xca>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	68db      	ldr	r3, [r3, #12]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d108      	bne.n	8009772 <osThreadNew+0xca>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	691b      	ldr	r3, [r3, #16]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d104      	bne.n	8009772 <osThreadNew+0xca>
          mem = 0;
 8009768:	2300      	movs	r3, #0
 800976a:	61bb      	str	r3, [r7, #24]
 800976c:	e001      	b.n	8009772 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800976e:	2300      	movs	r3, #0
 8009770:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009772:	69bb      	ldr	r3, [r7, #24]
 8009774:	2b01      	cmp	r3, #1
 8009776:	d110      	bne.n	800979a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800977c:	687a      	ldr	r2, [r7, #4]
 800977e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009780:	9202      	str	r2, [sp, #8]
 8009782:	9301      	str	r3, [sp, #4]
 8009784:	69fb      	ldr	r3, [r7, #28]
 8009786:	9300      	str	r3, [sp, #0]
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	6a3a      	ldr	r2, [r7, #32]
 800978c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800978e:	68f8      	ldr	r0, [r7, #12]
 8009790:	f001 f852 	bl	800a838 <xTaskCreateStatic>
 8009794:	4603      	mov	r3, r0
 8009796:	613b      	str	r3, [r7, #16]
 8009798:	e013      	b.n	80097c2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800979a:	69bb      	ldr	r3, [r7, #24]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d110      	bne.n	80097c2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80097a0:	6a3b      	ldr	r3, [r7, #32]
 80097a2:	b29a      	uxth	r2, r3
 80097a4:	f107 0310 	add.w	r3, r7, #16
 80097a8:	9301      	str	r3, [sp, #4]
 80097aa:	69fb      	ldr	r3, [r7, #28]
 80097ac:	9300      	str	r3, [sp, #0]
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80097b2:	68f8      	ldr	r0, [r7, #12]
 80097b4:	f001 f89d 	bl	800a8f2 <xTaskCreate>
 80097b8:	4603      	mov	r3, r0
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	d001      	beq.n	80097c2 <osThreadNew+0x11a>
            hTask = NULL;
 80097be:	2300      	movs	r3, #0
 80097c0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80097c2:	693b      	ldr	r3, [r7, #16]
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3728      	adds	r7, #40	; 0x28
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b084      	sub	sp, #16
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097d4:	f3ef 8305 	mrs	r3, IPSR
 80097d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80097da:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d003      	beq.n	80097e8 <osDelay+0x1c>
    stat = osErrorISR;
 80097e0:	f06f 0305 	mvn.w	r3, #5
 80097e4:	60fb      	str	r3, [r7, #12]
 80097e6:	e007      	b.n	80097f8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80097e8:	2300      	movs	r3, #0
 80097ea:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d002      	beq.n	80097f8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f001 f9d8 	bl	800aba8 <vTaskDelay>
    }
  }

  return (stat);
 80097f8:	68fb      	ldr	r3, [r7, #12]
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3710      	adds	r7, #16
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}

08009802 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009802:	b580      	push	{r7, lr}
 8009804:	b08a      	sub	sp, #40	; 0x28
 8009806:	af02      	add	r7, sp, #8
 8009808:	60f8      	str	r0, [r7, #12]
 800980a:	60b9      	str	r1, [r7, #8]
 800980c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800980e:	2300      	movs	r3, #0
 8009810:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009812:	f3ef 8305 	mrs	r3, IPSR
 8009816:	613b      	str	r3, [r7, #16]
  return(result);
 8009818:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800981a:	2b00      	cmp	r3, #0
 800981c:	d15f      	bne.n	80098de <osMessageQueueNew+0xdc>
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d05c      	beq.n	80098de <osMessageQueueNew+0xdc>
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d059      	beq.n	80098de <osMessageQueueNew+0xdc>
    mem = -1;
 800982a:	f04f 33ff 	mov.w	r3, #4294967295
 800982e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d029      	beq.n	800988a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	689b      	ldr	r3, [r3, #8]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d012      	beq.n	8009864 <osMessageQueueNew+0x62>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	68db      	ldr	r3, [r3, #12]
 8009842:	2b4f      	cmp	r3, #79	; 0x4f
 8009844:	d90e      	bls.n	8009864 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800984a:	2b00      	cmp	r3, #0
 800984c:	d00a      	beq.n	8009864 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	695a      	ldr	r2, [r3, #20]
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	68b9      	ldr	r1, [r7, #8]
 8009856:	fb01 f303 	mul.w	r3, r1, r3
 800985a:	429a      	cmp	r2, r3
 800985c:	d302      	bcc.n	8009864 <osMessageQueueNew+0x62>
        mem = 1;
 800985e:	2301      	movs	r3, #1
 8009860:	61bb      	str	r3, [r7, #24]
 8009862:	e014      	b.n	800988e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	689b      	ldr	r3, [r3, #8]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d110      	bne.n	800988e <osMessageQueueNew+0x8c>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	68db      	ldr	r3, [r3, #12]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d10c      	bne.n	800988e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009878:	2b00      	cmp	r3, #0
 800987a:	d108      	bne.n	800988e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	695b      	ldr	r3, [r3, #20]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d104      	bne.n	800988e <osMessageQueueNew+0x8c>
          mem = 0;
 8009884:	2300      	movs	r3, #0
 8009886:	61bb      	str	r3, [r7, #24]
 8009888:	e001      	b.n	800988e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800988a:	2300      	movs	r3, #0
 800988c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800988e:	69bb      	ldr	r3, [r7, #24]
 8009890:	2b01      	cmp	r3, #1
 8009892:	d10b      	bne.n	80098ac <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	691a      	ldr	r2, [r3, #16]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	689b      	ldr	r3, [r3, #8]
 800989c:	2100      	movs	r1, #0
 800989e:	9100      	str	r1, [sp, #0]
 80098a0:	68b9      	ldr	r1, [r7, #8]
 80098a2:	68f8      	ldr	r0, [r7, #12]
 80098a4:	f000 fa4e 	bl	8009d44 <xQueueGenericCreateStatic>
 80098a8:	61f8      	str	r0, [r7, #28]
 80098aa:	e008      	b.n	80098be <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80098ac:	69bb      	ldr	r3, [r7, #24]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d105      	bne.n	80098be <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80098b2:	2200      	movs	r2, #0
 80098b4:	68b9      	ldr	r1, [r7, #8]
 80098b6:	68f8      	ldr	r0, [r7, #12]
 80098b8:	f000 fabc 	bl	8009e34 <xQueueGenericCreate>
 80098bc:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80098be:	69fb      	ldr	r3, [r7, #28]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d00c      	beq.n	80098de <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d003      	beq.n	80098d2 <osMessageQueueNew+0xd0>
        name = attr->name;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	617b      	str	r3, [r7, #20]
 80098d0:	e001      	b.n	80098d6 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80098d2:	2300      	movs	r3, #0
 80098d4:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80098d6:	6979      	ldr	r1, [r7, #20]
 80098d8:	69f8      	ldr	r0, [r7, #28]
 80098da:	f000 ff4f 	bl	800a77c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80098de:	69fb      	ldr	r3, [r7, #28]
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3720      	adds	r7, #32
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}

080098e8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b088      	sub	sp, #32
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	60f8      	str	r0, [r7, #12]
 80098f0:	60b9      	str	r1, [r7, #8]
 80098f2:	603b      	str	r3, [r7, #0]
 80098f4:	4613      	mov	r3, r2
 80098f6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80098fc:	2300      	movs	r3, #0
 80098fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009900:	f3ef 8305 	mrs	r3, IPSR
 8009904:	617b      	str	r3, [r7, #20]
  return(result);
 8009906:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009908:	2b00      	cmp	r3, #0
 800990a:	d028      	beq.n	800995e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800990c:	69bb      	ldr	r3, [r7, #24]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d005      	beq.n	800991e <osMessageQueuePut+0x36>
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d002      	beq.n	800991e <osMessageQueuePut+0x36>
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d003      	beq.n	8009926 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800991e:	f06f 0303 	mvn.w	r3, #3
 8009922:	61fb      	str	r3, [r7, #28]
 8009924:	e038      	b.n	8009998 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8009926:	2300      	movs	r3, #0
 8009928:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800992a:	f107 0210 	add.w	r2, r7, #16
 800992e:	2300      	movs	r3, #0
 8009930:	68b9      	ldr	r1, [r7, #8]
 8009932:	69b8      	ldr	r0, [r7, #24]
 8009934:	f000 fbda 	bl	800a0ec <xQueueGenericSendFromISR>
 8009938:	4603      	mov	r3, r0
 800993a:	2b01      	cmp	r3, #1
 800993c:	d003      	beq.n	8009946 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800993e:	f06f 0302 	mvn.w	r3, #2
 8009942:	61fb      	str	r3, [r7, #28]
 8009944:	e028      	b.n	8009998 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d025      	beq.n	8009998 <osMessageQueuePut+0xb0>
 800994c:	4b15      	ldr	r3, [pc, #84]	; (80099a4 <osMessageQueuePut+0xbc>)
 800994e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009952:	601a      	str	r2, [r3, #0]
 8009954:	f3bf 8f4f 	dsb	sy
 8009958:	f3bf 8f6f 	isb	sy
 800995c:	e01c      	b.n	8009998 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800995e:	69bb      	ldr	r3, [r7, #24]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d002      	beq.n	800996a <osMessageQueuePut+0x82>
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d103      	bne.n	8009972 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800996a:	f06f 0303 	mvn.w	r3, #3
 800996e:	61fb      	str	r3, [r7, #28]
 8009970:	e012      	b.n	8009998 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009972:	2300      	movs	r3, #0
 8009974:	683a      	ldr	r2, [r7, #0]
 8009976:	68b9      	ldr	r1, [r7, #8]
 8009978:	69b8      	ldr	r0, [r7, #24]
 800997a:	f000 fab9 	bl	8009ef0 <xQueueGenericSend>
 800997e:	4603      	mov	r3, r0
 8009980:	2b01      	cmp	r3, #1
 8009982:	d009      	beq.n	8009998 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d003      	beq.n	8009992 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800998a:	f06f 0301 	mvn.w	r3, #1
 800998e:	61fb      	str	r3, [r7, #28]
 8009990:	e002      	b.n	8009998 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8009992:	f06f 0302 	mvn.w	r3, #2
 8009996:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009998:	69fb      	ldr	r3, [r7, #28]
}
 800999a:	4618      	mov	r0, r3
 800999c:	3720      	adds	r7, #32
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}
 80099a2:	bf00      	nop
 80099a4:	e000ed04 	.word	0xe000ed04

080099a8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b088      	sub	sp, #32
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	60f8      	str	r0, [r7, #12]
 80099b0:	60b9      	str	r1, [r7, #8]
 80099b2:	607a      	str	r2, [r7, #4]
 80099b4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80099ba:	2300      	movs	r3, #0
 80099bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099be:	f3ef 8305 	mrs	r3, IPSR
 80099c2:	617b      	str	r3, [r7, #20]
  return(result);
 80099c4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d028      	beq.n	8009a1c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80099ca:	69bb      	ldr	r3, [r7, #24]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d005      	beq.n	80099dc <osMessageQueueGet+0x34>
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d002      	beq.n	80099dc <osMessageQueueGet+0x34>
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d003      	beq.n	80099e4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80099dc:	f06f 0303 	mvn.w	r3, #3
 80099e0:	61fb      	str	r3, [r7, #28]
 80099e2:	e037      	b.n	8009a54 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80099e4:	2300      	movs	r3, #0
 80099e6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80099e8:	f107 0310 	add.w	r3, r7, #16
 80099ec:	461a      	mov	r2, r3
 80099ee:	68b9      	ldr	r1, [r7, #8]
 80099f0:	69b8      	ldr	r0, [r7, #24]
 80099f2:	f000 fcf7 	bl	800a3e4 <xQueueReceiveFromISR>
 80099f6:	4603      	mov	r3, r0
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d003      	beq.n	8009a04 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80099fc:	f06f 0302 	mvn.w	r3, #2
 8009a00:	61fb      	str	r3, [r7, #28]
 8009a02:	e027      	b.n	8009a54 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d024      	beq.n	8009a54 <osMessageQueueGet+0xac>
 8009a0a:	4b15      	ldr	r3, [pc, #84]	; (8009a60 <osMessageQueueGet+0xb8>)
 8009a0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a10:	601a      	str	r2, [r3, #0]
 8009a12:	f3bf 8f4f 	dsb	sy
 8009a16:	f3bf 8f6f 	isb	sy
 8009a1a:	e01b      	b.n	8009a54 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009a1c:	69bb      	ldr	r3, [r7, #24]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d002      	beq.n	8009a28 <osMessageQueueGet+0x80>
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d103      	bne.n	8009a30 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8009a28:	f06f 0303 	mvn.w	r3, #3
 8009a2c:	61fb      	str	r3, [r7, #28]
 8009a2e:	e011      	b.n	8009a54 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009a30:	683a      	ldr	r2, [r7, #0]
 8009a32:	68b9      	ldr	r1, [r7, #8]
 8009a34:	69b8      	ldr	r0, [r7, #24]
 8009a36:	f000 fbf5 	bl	800a224 <xQueueReceive>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	d009      	beq.n	8009a54 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d003      	beq.n	8009a4e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8009a46:	f06f 0301 	mvn.w	r3, #1
 8009a4a:	61fb      	str	r3, [r7, #28]
 8009a4c:	e002      	b.n	8009a54 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8009a4e:	f06f 0302 	mvn.w	r3, #2
 8009a52:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009a54:	69fb      	ldr	r3, [r7, #28]
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3720      	adds	r7, #32
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	e000ed04 	.word	0xe000ed04

08009a64 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b086      	sub	sp, #24
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d102      	bne.n	8009a7c <osMessageQueueGetCount+0x18>
    count = 0U;
 8009a76:	2300      	movs	r3, #0
 8009a78:	617b      	str	r3, [r7, #20]
 8009a7a:	e00e      	b.n	8009a9a <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a7c:	f3ef 8305 	mrs	r3, IPSR
 8009a80:	60fb      	str	r3, [r7, #12]
  return(result);
 8009a82:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d004      	beq.n	8009a92 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8009a88:	6938      	ldr	r0, [r7, #16]
 8009a8a:	f000 fd49 	bl	800a520 <uxQueueMessagesWaitingFromISR>
 8009a8e:	6178      	str	r0, [r7, #20]
 8009a90:	e003      	b.n	8009a9a <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8009a92:	6938      	ldr	r0, [r7, #16]
 8009a94:	f000 fd26 	bl	800a4e4 <uxQueueMessagesWaiting>
 8009a98:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8009a9a:	697b      	ldr	r3, [r7, #20]
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3718      	adds	r7, #24
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}

08009aa4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009aa4:	b480      	push	{r7}
 8009aa6:	b085      	sub	sp, #20
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	60f8      	str	r0, [r7, #12]
 8009aac:	60b9      	str	r1, [r7, #8]
 8009aae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	4a07      	ldr	r2, [pc, #28]	; (8009ad0 <vApplicationGetIdleTaskMemory+0x2c>)
 8009ab4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	4a06      	ldr	r2, [pc, #24]	; (8009ad4 <vApplicationGetIdleTaskMemory+0x30>)
 8009aba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2280      	movs	r2, #128	; 0x80
 8009ac0:	601a      	str	r2, [r3, #0]
}
 8009ac2:	bf00      	nop
 8009ac4:	3714      	adds	r7, #20
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009acc:	4770      	bx	lr
 8009ace:	bf00      	nop
 8009ad0:	200002b0 	.word	0x200002b0
 8009ad4:	20000358 	.word	0x20000358

08009ad8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009ad8:	b480      	push	{r7}
 8009ada:	b085      	sub	sp, #20
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	60f8      	str	r0, [r7, #12]
 8009ae0:	60b9      	str	r1, [r7, #8]
 8009ae2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	4a07      	ldr	r2, [pc, #28]	; (8009b04 <vApplicationGetTimerTaskMemory+0x2c>)
 8009ae8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	4a06      	ldr	r2, [pc, #24]	; (8009b08 <vApplicationGetTimerTaskMemory+0x30>)
 8009aee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009af6:	601a      	str	r2, [r3, #0]
}
 8009af8:	bf00      	nop
 8009afa:	3714      	adds	r7, #20
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr
 8009b04:	20000558 	.word	0x20000558
 8009b08:	20000600 	.word	0x20000600

08009b0c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b083      	sub	sp, #12
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f103 0208 	add.w	r2, r3, #8
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f04f 32ff 	mov.w	r2, #4294967295
 8009b24:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f103 0208 	add.w	r2, r3, #8
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f103 0208 	add.w	r2, r3, #8
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009b40:	bf00      	nop
 8009b42:	370c      	adds	r7, #12
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr

08009b4c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b083      	sub	sp, #12
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2200      	movs	r2, #0
 8009b58:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009b5a:	bf00      	nop
 8009b5c:	370c      	adds	r7, #12
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b64:	4770      	bx	lr

08009b66 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009b66:	b480      	push	{r7}
 8009b68:	b085      	sub	sp, #20
 8009b6a:	af00      	add	r7, sp, #0
 8009b6c:	6078      	str	r0, [r7, #4]
 8009b6e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	685b      	ldr	r3, [r3, #4]
 8009b74:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	68fa      	ldr	r2, [r7, #12]
 8009b7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	689a      	ldr	r2, [r3, #8]
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	689b      	ldr	r3, [r3, #8]
 8009b88:	683a      	ldr	r2, [r7, #0]
 8009b8a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	683a      	ldr	r2, [r7, #0]
 8009b90:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	687a      	ldr	r2, [r7, #4]
 8009b96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	1c5a      	adds	r2, r3, #1
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	601a      	str	r2, [r3, #0]
}
 8009ba2:	bf00      	nop
 8009ba4:	3714      	adds	r7, #20
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bac:	4770      	bx	lr

08009bae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009bae:	b480      	push	{r7}
 8009bb0:	b085      	sub	sp, #20
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	6078      	str	r0, [r7, #4]
 8009bb6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bc4:	d103      	bne.n	8009bce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	691b      	ldr	r3, [r3, #16]
 8009bca:	60fb      	str	r3, [r7, #12]
 8009bcc:	e00c      	b.n	8009be8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	3308      	adds	r3, #8
 8009bd2:	60fb      	str	r3, [r7, #12]
 8009bd4:	e002      	b.n	8009bdc <vListInsert+0x2e>
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	60fb      	str	r3, [r7, #12]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	68ba      	ldr	r2, [r7, #8]
 8009be4:	429a      	cmp	r2, r3
 8009be6:	d2f6      	bcs.n	8009bd6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	685a      	ldr	r2, [r3, #4]
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	683a      	ldr	r2, [r7, #0]
 8009bf6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	68fa      	ldr	r2, [r7, #12]
 8009bfc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	683a      	ldr	r2, [r7, #0]
 8009c02:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	687a      	ldr	r2, [r7, #4]
 8009c08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	1c5a      	adds	r2, r3, #1
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	601a      	str	r2, [r3, #0]
}
 8009c14:	bf00      	nop
 8009c16:	3714      	adds	r7, #20
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr

08009c20 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009c20:	b480      	push	{r7}
 8009c22:	b085      	sub	sp, #20
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	691b      	ldr	r3, [r3, #16]
 8009c2c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	687a      	ldr	r2, [r7, #4]
 8009c34:	6892      	ldr	r2, [r2, #8]
 8009c36:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	689b      	ldr	r3, [r3, #8]
 8009c3c:	687a      	ldr	r2, [r7, #4]
 8009c3e:	6852      	ldr	r2, [r2, #4]
 8009c40:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	685b      	ldr	r3, [r3, #4]
 8009c46:	687a      	ldr	r2, [r7, #4]
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	d103      	bne.n	8009c54 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	689a      	ldr	r2, [r3, #8]
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2200      	movs	r2, #0
 8009c58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	1e5a      	subs	r2, r3, #1
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3714      	adds	r7, #20
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr

08009c74 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
 8009c7c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d10a      	bne.n	8009c9e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c8c:	f383 8811 	msr	BASEPRI, r3
 8009c90:	f3bf 8f6f 	isb	sy
 8009c94:	f3bf 8f4f 	dsb	sy
 8009c98:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009c9a:	bf00      	nop
 8009c9c:	e7fe      	b.n	8009c9c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009c9e:	f002 f971 	bl	800bf84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681a      	ldr	r2, [r3, #0]
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009caa:	68f9      	ldr	r1, [r7, #12]
 8009cac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009cae:	fb01 f303 	mul.w	r3, r1, r3
 8009cb2:	441a      	add	r2, r3
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681a      	ldr	r2, [r3, #0]
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681a      	ldr	r2, [r3, #0]
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cce:	3b01      	subs	r3, #1
 8009cd0:	68f9      	ldr	r1, [r7, #12]
 8009cd2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009cd4:	fb01 f303 	mul.w	r3, r1, r3
 8009cd8:	441a      	add	r2, r3
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	22ff      	movs	r2, #255	; 0xff
 8009ce2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	22ff      	movs	r2, #255	; 0xff
 8009cea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d114      	bne.n	8009d1e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	691b      	ldr	r3, [r3, #16]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d01a      	beq.n	8009d32 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	3310      	adds	r3, #16
 8009d00:	4618      	mov	r0, r3
 8009d02:	f001 fa1f 	bl	800b144 <xTaskRemoveFromEventList>
 8009d06:	4603      	mov	r3, r0
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d012      	beq.n	8009d32 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009d0c:	4b0c      	ldr	r3, [pc, #48]	; (8009d40 <xQueueGenericReset+0xcc>)
 8009d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d12:	601a      	str	r2, [r3, #0]
 8009d14:	f3bf 8f4f 	dsb	sy
 8009d18:	f3bf 8f6f 	isb	sy
 8009d1c:	e009      	b.n	8009d32 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	3310      	adds	r3, #16
 8009d22:	4618      	mov	r0, r3
 8009d24:	f7ff fef2 	bl	8009b0c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	3324      	adds	r3, #36	; 0x24
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f7ff feed 	bl	8009b0c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009d32:	f002 f957 	bl	800bfe4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009d36:	2301      	movs	r3, #1
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3710      	adds	r7, #16
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}
 8009d40:	e000ed04 	.word	0xe000ed04

08009d44 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b08e      	sub	sp, #56	; 0x38
 8009d48:	af02      	add	r7, sp, #8
 8009d4a:	60f8      	str	r0, [r7, #12]
 8009d4c:	60b9      	str	r1, [r7, #8]
 8009d4e:	607a      	str	r2, [r7, #4]
 8009d50:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d10a      	bne.n	8009d6e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d5c:	f383 8811 	msr	BASEPRI, r3
 8009d60:	f3bf 8f6f 	isb	sy
 8009d64:	f3bf 8f4f 	dsb	sy
 8009d68:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009d6a:	bf00      	nop
 8009d6c:	e7fe      	b.n	8009d6c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d10a      	bne.n	8009d8a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d78:	f383 8811 	msr	BASEPRI, r3
 8009d7c:	f3bf 8f6f 	isb	sy
 8009d80:	f3bf 8f4f 	dsb	sy
 8009d84:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009d86:	bf00      	nop
 8009d88:	e7fe      	b.n	8009d88 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d002      	beq.n	8009d96 <xQueueGenericCreateStatic+0x52>
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d001      	beq.n	8009d9a <xQueueGenericCreateStatic+0x56>
 8009d96:	2301      	movs	r3, #1
 8009d98:	e000      	b.n	8009d9c <xQueueGenericCreateStatic+0x58>
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d10a      	bne.n	8009db6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da4:	f383 8811 	msr	BASEPRI, r3
 8009da8:	f3bf 8f6f 	isb	sy
 8009dac:	f3bf 8f4f 	dsb	sy
 8009db0:	623b      	str	r3, [r7, #32]
}
 8009db2:	bf00      	nop
 8009db4:	e7fe      	b.n	8009db4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d102      	bne.n	8009dc2 <xQueueGenericCreateStatic+0x7e>
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d101      	bne.n	8009dc6 <xQueueGenericCreateStatic+0x82>
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	e000      	b.n	8009dc8 <xQueueGenericCreateStatic+0x84>
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d10a      	bne.n	8009de2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd0:	f383 8811 	msr	BASEPRI, r3
 8009dd4:	f3bf 8f6f 	isb	sy
 8009dd8:	f3bf 8f4f 	dsb	sy
 8009ddc:	61fb      	str	r3, [r7, #28]
}
 8009dde:	bf00      	nop
 8009de0:	e7fe      	b.n	8009de0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009de2:	2350      	movs	r3, #80	; 0x50
 8009de4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	2b50      	cmp	r3, #80	; 0x50
 8009dea:	d00a      	beq.n	8009e02 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df0:	f383 8811 	msr	BASEPRI, r3
 8009df4:	f3bf 8f6f 	isb	sy
 8009df8:	f3bf 8f4f 	dsb	sy
 8009dfc:	61bb      	str	r3, [r7, #24]
}
 8009dfe:	bf00      	nop
 8009e00:	e7fe      	b.n	8009e00 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009e02:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d00d      	beq.n	8009e2a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e10:	2201      	movs	r2, #1
 8009e12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009e16:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e1c:	9300      	str	r3, [sp, #0]
 8009e1e:	4613      	mov	r3, r2
 8009e20:	687a      	ldr	r2, [r7, #4]
 8009e22:	68b9      	ldr	r1, [r7, #8]
 8009e24:	68f8      	ldr	r0, [r7, #12]
 8009e26:	f000 f83f 	bl	8009ea8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3730      	adds	r7, #48	; 0x30
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b08a      	sub	sp, #40	; 0x28
 8009e38:	af02      	add	r7, sp, #8
 8009e3a:	60f8      	str	r0, [r7, #12]
 8009e3c:	60b9      	str	r1, [r7, #8]
 8009e3e:	4613      	mov	r3, r2
 8009e40:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d10a      	bne.n	8009e5e <xQueueGenericCreate+0x2a>
	__asm volatile
 8009e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e4c:	f383 8811 	msr	BASEPRI, r3
 8009e50:	f3bf 8f6f 	isb	sy
 8009e54:	f3bf 8f4f 	dsb	sy
 8009e58:	613b      	str	r3, [r7, #16]
}
 8009e5a:	bf00      	nop
 8009e5c:	e7fe      	b.n	8009e5c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	68ba      	ldr	r2, [r7, #8]
 8009e62:	fb02 f303 	mul.w	r3, r2, r3
 8009e66:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009e68:	69fb      	ldr	r3, [r7, #28]
 8009e6a:	3350      	adds	r3, #80	; 0x50
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f002 f9ab 	bl	800c1c8 <pvPortMalloc>
 8009e72:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009e74:	69bb      	ldr	r3, [r7, #24]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d011      	beq.n	8009e9e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009e7a:	69bb      	ldr	r3, [r7, #24]
 8009e7c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	3350      	adds	r3, #80	; 0x50
 8009e82:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009e84:	69bb      	ldr	r3, [r7, #24]
 8009e86:	2200      	movs	r2, #0
 8009e88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009e8c:	79fa      	ldrb	r2, [r7, #7]
 8009e8e:	69bb      	ldr	r3, [r7, #24]
 8009e90:	9300      	str	r3, [sp, #0]
 8009e92:	4613      	mov	r3, r2
 8009e94:	697a      	ldr	r2, [r7, #20]
 8009e96:	68b9      	ldr	r1, [r7, #8]
 8009e98:	68f8      	ldr	r0, [r7, #12]
 8009e9a:	f000 f805 	bl	8009ea8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009e9e:	69bb      	ldr	r3, [r7, #24]
	}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3720      	adds	r7, #32
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b084      	sub	sp, #16
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	60f8      	str	r0, [r7, #12]
 8009eb0:	60b9      	str	r1, [r7, #8]
 8009eb2:	607a      	str	r2, [r7, #4]
 8009eb4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d103      	bne.n	8009ec4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009ebc:	69bb      	ldr	r3, [r7, #24]
 8009ebe:	69ba      	ldr	r2, [r7, #24]
 8009ec0:	601a      	str	r2, [r3, #0]
 8009ec2:	e002      	b.n	8009eca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009ec4:	69bb      	ldr	r3, [r7, #24]
 8009ec6:	687a      	ldr	r2, [r7, #4]
 8009ec8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009eca:	69bb      	ldr	r3, [r7, #24]
 8009ecc:	68fa      	ldr	r2, [r7, #12]
 8009ece:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009ed0:	69bb      	ldr	r3, [r7, #24]
 8009ed2:	68ba      	ldr	r2, [r7, #8]
 8009ed4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009ed6:	2101      	movs	r1, #1
 8009ed8:	69b8      	ldr	r0, [r7, #24]
 8009eda:	f7ff fecb 	bl	8009c74 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009ede:	69bb      	ldr	r3, [r7, #24]
 8009ee0:	78fa      	ldrb	r2, [r7, #3]
 8009ee2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009ee6:	bf00      	nop
 8009ee8:	3710      	adds	r7, #16
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
	...

08009ef0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b08e      	sub	sp, #56	; 0x38
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	60f8      	str	r0, [r7, #12]
 8009ef8:	60b9      	str	r1, [r7, #8]
 8009efa:	607a      	str	r2, [r7, #4]
 8009efc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009efe:	2300      	movs	r3, #0
 8009f00:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d10a      	bne.n	8009f22 <xQueueGenericSend+0x32>
	__asm volatile
 8009f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f10:	f383 8811 	msr	BASEPRI, r3
 8009f14:	f3bf 8f6f 	isb	sy
 8009f18:	f3bf 8f4f 	dsb	sy
 8009f1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009f1e:	bf00      	nop
 8009f20:	e7fe      	b.n	8009f20 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d103      	bne.n	8009f30 <xQueueGenericSend+0x40>
 8009f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d101      	bne.n	8009f34 <xQueueGenericSend+0x44>
 8009f30:	2301      	movs	r3, #1
 8009f32:	e000      	b.n	8009f36 <xQueueGenericSend+0x46>
 8009f34:	2300      	movs	r3, #0
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d10a      	bne.n	8009f50 <xQueueGenericSend+0x60>
	__asm volatile
 8009f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f3e:	f383 8811 	msr	BASEPRI, r3
 8009f42:	f3bf 8f6f 	isb	sy
 8009f46:	f3bf 8f4f 	dsb	sy
 8009f4a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009f4c:	bf00      	nop
 8009f4e:	e7fe      	b.n	8009f4e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	2b02      	cmp	r3, #2
 8009f54:	d103      	bne.n	8009f5e <xQueueGenericSend+0x6e>
 8009f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f5a:	2b01      	cmp	r3, #1
 8009f5c:	d101      	bne.n	8009f62 <xQueueGenericSend+0x72>
 8009f5e:	2301      	movs	r3, #1
 8009f60:	e000      	b.n	8009f64 <xQueueGenericSend+0x74>
 8009f62:	2300      	movs	r3, #0
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d10a      	bne.n	8009f7e <xQueueGenericSend+0x8e>
	__asm volatile
 8009f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f6c:	f383 8811 	msr	BASEPRI, r3
 8009f70:	f3bf 8f6f 	isb	sy
 8009f74:	f3bf 8f4f 	dsb	sy
 8009f78:	623b      	str	r3, [r7, #32]
}
 8009f7a:	bf00      	nop
 8009f7c:	e7fe      	b.n	8009f7c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009f7e:	f001 faa3 	bl	800b4c8 <xTaskGetSchedulerState>
 8009f82:	4603      	mov	r3, r0
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d102      	bne.n	8009f8e <xQueueGenericSend+0x9e>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d101      	bne.n	8009f92 <xQueueGenericSend+0xa2>
 8009f8e:	2301      	movs	r3, #1
 8009f90:	e000      	b.n	8009f94 <xQueueGenericSend+0xa4>
 8009f92:	2300      	movs	r3, #0
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d10a      	bne.n	8009fae <xQueueGenericSend+0xbe>
	__asm volatile
 8009f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f9c:	f383 8811 	msr	BASEPRI, r3
 8009fa0:	f3bf 8f6f 	isb	sy
 8009fa4:	f3bf 8f4f 	dsb	sy
 8009fa8:	61fb      	str	r3, [r7, #28]
}
 8009faa:	bf00      	nop
 8009fac:	e7fe      	b.n	8009fac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009fae:	f001 ffe9 	bl	800bf84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fba:	429a      	cmp	r2, r3
 8009fbc:	d302      	bcc.n	8009fc4 <xQueueGenericSend+0xd4>
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	2b02      	cmp	r3, #2
 8009fc2:	d129      	bne.n	800a018 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009fc4:	683a      	ldr	r2, [r7, #0]
 8009fc6:	68b9      	ldr	r1, [r7, #8]
 8009fc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fca:	f000 fac7 	bl	800a55c <prvCopyDataToQueue>
 8009fce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d010      	beq.n	8009ffa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fda:	3324      	adds	r3, #36	; 0x24
 8009fdc:	4618      	mov	r0, r3
 8009fde:	f001 f8b1 	bl	800b144 <xTaskRemoveFromEventList>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d013      	beq.n	800a010 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009fe8:	4b3f      	ldr	r3, [pc, #252]	; (800a0e8 <xQueueGenericSend+0x1f8>)
 8009fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fee:	601a      	str	r2, [r3, #0]
 8009ff0:	f3bf 8f4f 	dsb	sy
 8009ff4:	f3bf 8f6f 	isb	sy
 8009ff8:	e00a      	b.n	800a010 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d007      	beq.n	800a010 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a000:	4b39      	ldr	r3, [pc, #228]	; (800a0e8 <xQueueGenericSend+0x1f8>)
 800a002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a006:	601a      	str	r2, [r3, #0]
 800a008:	f3bf 8f4f 	dsb	sy
 800a00c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a010:	f001 ffe8 	bl	800bfe4 <vPortExitCritical>
				return pdPASS;
 800a014:	2301      	movs	r3, #1
 800a016:	e063      	b.n	800a0e0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d103      	bne.n	800a026 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a01e:	f001 ffe1 	bl	800bfe4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a022:	2300      	movs	r3, #0
 800a024:	e05c      	b.n	800a0e0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d106      	bne.n	800a03a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a02c:	f107 0314 	add.w	r3, r7, #20
 800a030:	4618      	mov	r0, r3
 800a032:	f001 f8eb 	bl	800b20c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a036:	2301      	movs	r3, #1
 800a038:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a03a:	f001 ffd3 	bl	800bfe4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a03e:	f000 fe57 	bl	800acf0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a042:	f001 ff9f 	bl	800bf84 <vPortEnterCritical>
 800a046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a048:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a04c:	b25b      	sxtb	r3, r3
 800a04e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a052:	d103      	bne.n	800a05c <xQueueGenericSend+0x16c>
 800a054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a056:	2200      	movs	r2, #0
 800a058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a05e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a062:	b25b      	sxtb	r3, r3
 800a064:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a068:	d103      	bne.n	800a072 <xQueueGenericSend+0x182>
 800a06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a06c:	2200      	movs	r2, #0
 800a06e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a072:	f001 ffb7 	bl	800bfe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a076:	1d3a      	adds	r2, r7, #4
 800a078:	f107 0314 	add.w	r3, r7, #20
 800a07c:	4611      	mov	r1, r2
 800a07e:	4618      	mov	r0, r3
 800a080:	f001 f8da 	bl	800b238 <xTaskCheckForTimeOut>
 800a084:	4603      	mov	r3, r0
 800a086:	2b00      	cmp	r3, #0
 800a088:	d124      	bne.n	800a0d4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a08a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a08c:	f000 fb5e 	bl	800a74c <prvIsQueueFull>
 800a090:	4603      	mov	r3, r0
 800a092:	2b00      	cmp	r3, #0
 800a094:	d018      	beq.n	800a0c8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a098:	3310      	adds	r3, #16
 800a09a:	687a      	ldr	r2, [r7, #4]
 800a09c:	4611      	mov	r1, r2
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f001 f800 	bl	800b0a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a0a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a0a6:	f000 fae9 	bl	800a67c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a0aa:	f000 fe2f 	bl	800ad0c <xTaskResumeAll>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	f47f af7c 	bne.w	8009fae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a0b6:	4b0c      	ldr	r3, [pc, #48]	; (800a0e8 <xQueueGenericSend+0x1f8>)
 800a0b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0bc:	601a      	str	r2, [r3, #0]
 800a0be:	f3bf 8f4f 	dsb	sy
 800a0c2:	f3bf 8f6f 	isb	sy
 800a0c6:	e772      	b.n	8009fae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a0c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a0ca:	f000 fad7 	bl	800a67c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a0ce:	f000 fe1d 	bl	800ad0c <xTaskResumeAll>
 800a0d2:	e76c      	b.n	8009fae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a0d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a0d6:	f000 fad1 	bl	800a67c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a0da:	f000 fe17 	bl	800ad0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a0de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3738      	adds	r7, #56	; 0x38
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}
 800a0e8:	e000ed04 	.word	0xe000ed04

0800a0ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b090      	sub	sp, #64	; 0x40
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	60f8      	str	r0, [r7, #12]
 800a0f4:	60b9      	str	r1, [r7, #8]
 800a0f6:	607a      	str	r2, [r7, #4]
 800a0f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a0fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a100:	2b00      	cmp	r3, #0
 800a102:	d10a      	bne.n	800a11a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a108:	f383 8811 	msr	BASEPRI, r3
 800a10c:	f3bf 8f6f 	isb	sy
 800a110:	f3bf 8f4f 	dsb	sy
 800a114:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a116:	bf00      	nop
 800a118:	e7fe      	b.n	800a118 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d103      	bne.n	800a128 <xQueueGenericSendFromISR+0x3c>
 800a120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a124:	2b00      	cmp	r3, #0
 800a126:	d101      	bne.n	800a12c <xQueueGenericSendFromISR+0x40>
 800a128:	2301      	movs	r3, #1
 800a12a:	e000      	b.n	800a12e <xQueueGenericSendFromISR+0x42>
 800a12c:	2300      	movs	r3, #0
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d10a      	bne.n	800a148 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a132:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a136:	f383 8811 	msr	BASEPRI, r3
 800a13a:	f3bf 8f6f 	isb	sy
 800a13e:	f3bf 8f4f 	dsb	sy
 800a142:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a144:	bf00      	nop
 800a146:	e7fe      	b.n	800a146 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	2b02      	cmp	r3, #2
 800a14c:	d103      	bne.n	800a156 <xQueueGenericSendFromISR+0x6a>
 800a14e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a152:	2b01      	cmp	r3, #1
 800a154:	d101      	bne.n	800a15a <xQueueGenericSendFromISR+0x6e>
 800a156:	2301      	movs	r3, #1
 800a158:	e000      	b.n	800a15c <xQueueGenericSendFromISR+0x70>
 800a15a:	2300      	movs	r3, #0
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d10a      	bne.n	800a176 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a164:	f383 8811 	msr	BASEPRI, r3
 800a168:	f3bf 8f6f 	isb	sy
 800a16c:	f3bf 8f4f 	dsb	sy
 800a170:	623b      	str	r3, [r7, #32]
}
 800a172:	bf00      	nop
 800a174:	e7fe      	b.n	800a174 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a176:	f001 ffe7 	bl	800c148 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a17a:	f3ef 8211 	mrs	r2, BASEPRI
 800a17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a182:	f383 8811 	msr	BASEPRI, r3
 800a186:	f3bf 8f6f 	isb	sy
 800a18a:	f3bf 8f4f 	dsb	sy
 800a18e:	61fa      	str	r2, [r7, #28]
 800a190:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a192:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a194:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a198:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a19a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a19c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d302      	bcc.n	800a1a8 <xQueueGenericSendFromISR+0xbc>
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	2b02      	cmp	r3, #2
 800a1a6:	d12f      	bne.n	800a208 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a1ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a1b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1b6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a1b8:	683a      	ldr	r2, [r7, #0]
 800a1ba:	68b9      	ldr	r1, [r7, #8]
 800a1bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a1be:	f000 f9cd 	bl	800a55c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a1c2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a1c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1ca:	d112      	bne.n	800a1f2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d016      	beq.n	800a202 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1d6:	3324      	adds	r3, #36	; 0x24
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f000 ffb3 	bl	800b144 <xTaskRemoveFromEventList>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d00e      	beq.n	800a202 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d00b      	beq.n	800a202 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2201      	movs	r2, #1
 800a1ee:	601a      	str	r2, [r3, #0]
 800a1f0:	e007      	b.n	800a202 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a1f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	b2db      	uxtb	r3, r3
 800a1fa:	b25a      	sxtb	r2, r3
 800a1fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a202:	2301      	movs	r3, #1
 800a204:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a206:	e001      	b.n	800a20c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a208:	2300      	movs	r3, #0
 800a20a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a20c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a20e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a216:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3740      	adds	r7, #64	; 0x40
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}
	...

0800a224 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b08c      	sub	sp, #48	; 0x30
 800a228:	af00      	add	r7, sp, #0
 800a22a:	60f8      	str	r0, [r7, #12]
 800a22c:	60b9      	str	r1, [r7, #8]
 800a22e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a230:	2300      	movs	r3, #0
 800a232:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d10a      	bne.n	800a254 <xQueueReceive+0x30>
	__asm volatile
 800a23e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a242:	f383 8811 	msr	BASEPRI, r3
 800a246:	f3bf 8f6f 	isb	sy
 800a24a:	f3bf 8f4f 	dsb	sy
 800a24e:	623b      	str	r3, [r7, #32]
}
 800a250:	bf00      	nop
 800a252:	e7fe      	b.n	800a252 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d103      	bne.n	800a262 <xQueueReceive+0x3e>
 800a25a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a25c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d101      	bne.n	800a266 <xQueueReceive+0x42>
 800a262:	2301      	movs	r3, #1
 800a264:	e000      	b.n	800a268 <xQueueReceive+0x44>
 800a266:	2300      	movs	r3, #0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d10a      	bne.n	800a282 <xQueueReceive+0x5e>
	__asm volatile
 800a26c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a270:	f383 8811 	msr	BASEPRI, r3
 800a274:	f3bf 8f6f 	isb	sy
 800a278:	f3bf 8f4f 	dsb	sy
 800a27c:	61fb      	str	r3, [r7, #28]
}
 800a27e:	bf00      	nop
 800a280:	e7fe      	b.n	800a280 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a282:	f001 f921 	bl	800b4c8 <xTaskGetSchedulerState>
 800a286:	4603      	mov	r3, r0
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d102      	bne.n	800a292 <xQueueReceive+0x6e>
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d101      	bne.n	800a296 <xQueueReceive+0x72>
 800a292:	2301      	movs	r3, #1
 800a294:	e000      	b.n	800a298 <xQueueReceive+0x74>
 800a296:	2300      	movs	r3, #0
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d10a      	bne.n	800a2b2 <xQueueReceive+0x8e>
	__asm volatile
 800a29c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a0:	f383 8811 	msr	BASEPRI, r3
 800a2a4:	f3bf 8f6f 	isb	sy
 800a2a8:	f3bf 8f4f 	dsb	sy
 800a2ac:	61bb      	str	r3, [r7, #24]
}
 800a2ae:	bf00      	nop
 800a2b0:	e7fe      	b.n	800a2b0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a2b2:	f001 fe67 	bl	800bf84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a2b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2ba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d01f      	beq.n	800a302 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a2c2:	68b9      	ldr	r1, [r7, #8]
 800a2c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2c6:	f000 f9b3 	bl	800a630 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2cc:	1e5a      	subs	r2, r3, #1
 800a2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2d0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a2d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2d4:	691b      	ldr	r3, [r3, #16]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d00f      	beq.n	800a2fa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2dc:	3310      	adds	r3, #16
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f000 ff30 	bl	800b144 <xTaskRemoveFromEventList>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d007      	beq.n	800a2fa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a2ea:	4b3d      	ldr	r3, [pc, #244]	; (800a3e0 <xQueueReceive+0x1bc>)
 800a2ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2f0:	601a      	str	r2, [r3, #0]
 800a2f2:	f3bf 8f4f 	dsb	sy
 800a2f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a2fa:	f001 fe73 	bl	800bfe4 <vPortExitCritical>
				return pdPASS;
 800a2fe:	2301      	movs	r3, #1
 800a300:	e069      	b.n	800a3d6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d103      	bne.n	800a310 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a308:	f001 fe6c 	bl	800bfe4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a30c:	2300      	movs	r3, #0
 800a30e:	e062      	b.n	800a3d6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a312:	2b00      	cmp	r3, #0
 800a314:	d106      	bne.n	800a324 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a316:	f107 0310 	add.w	r3, r7, #16
 800a31a:	4618      	mov	r0, r3
 800a31c:	f000 ff76 	bl	800b20c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a320:	2301      	movs	r3, #1
 800a322:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a324:	f001 fe5e 	bl	800bfe4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a328:	f000 fce2 	bl	800acf0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a32c:	f001 fe2a 	bl	800bf84 <vPortEnterCritical>
 800a330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a332:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a336:	b25b      	sxtb	r3, r3
 800a338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a33c:	d103      	bne.n	800a346 <xQueueReceive+0x122>
 800a33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a340:	2200      	movs	r2, #0
 800a342:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a348:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a34c:	b25b      	sxtb	r3, r3
 800a34e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a352:	d103      	bne.n	800a35c <xQueueReceive+0x138>
 800a354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a356:	2200      	movs	r2, #0
 800a358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a35c:	f001 fe42 	bl	800bfe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a360:	1d3a      	adds	r2, r7, #4
 800a362:	f107 0310 	add.w	r3, r7, #16
 800a366:	4611      	mov	r1, r2
 800a368:	4618      	mov	r0, r3
 800a36a:	f000 ff65 	bl	800b238 <xTaskCheckForTimeOut>
 800a36e:	4603      	mov	r3, r0
 800a370:	2b00      	cmp	r3, #0
 800a372:	d123      	bne.n	800a3bc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a374:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a376:	f000 f9d3 	bl	800a720 <prvIsQueueEmpty>
 800a37a:	4603      	mov	r3, r0
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d017      	beq.n	800a3b0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a382:	3324      	adds	r3, #36	; 0x24
 800a384:	687a      	ldr	r2, [r7, #4]
 800a386:	4611      	mov	r1, r2
 800a388:	4618      	mov	r0, r3
 800a38a:	f000 fe8b 	bl	800b0a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a38e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a390:	f000 f974 	bl	800a67c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a394:	f000 fcba 	bl	800ad0c <xTaskResumeAll>
 800a398:	4603      	mov	r3, r0
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d189      	bne.n	800a2b2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a39e:	4b10      	ldr	r3, [pc, #64]	; (800a3e0 <xQueueReceive+0x1bc>)
 800a3a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3a4:	601a      	str	r2, [r3, #0]
 800a3a6:	f3bf 8f4f 	dsb	sy
 800a3aa:	f3bf 8f6f 	isb	sy
 800a3ae:	e780      	b.n	800a2b2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a3b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3b2:	f000 f963 	bl	800a67c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a3b6:	f000 fca9 	bl	800ad0c <xTaskResumeAll>
 800a3ba:	e77a      	b.n	800a2b2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a3bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3be:	f000 f95d 	bl	800a67c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a3c2:	f000 fca3 	bl	800ad0c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a3c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3c8:	f000 f9aa 	bl	800a720 <prvIsQueueEmpty>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	f43f af6f 	beq.w	800a2b2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a3d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3730      	adds	r7, #48	; 0x30
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}
 800a3de:	bf00      	nop
 800a3e0:	e000ed04 	.word	0xe000ed04

0800a3e4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b08e      	sub	sp, #56	; 0x38
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	60f8      	str	r0, [r7, #12]
 800a3ec:	60b9      	str	r1, [r7, #8]
 800a3ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a3f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d10a      	bne.n	800a410 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a3fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3fe:	f383 8811 	msr	BASEPRI, r3
 800a402:	f3bf 8f6f 	isb	sy
 800a406:	f3bf 8f4f 	dsb	sy
 800a40a:	623b      	str	r3, [r7, #32]
}
 800a40c:	bf00      	nop
 800a40e:	e7fe      	b.n	800a40e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d103      	bne.n	800a41e <xQueueReceiveFromISR+0x3a>
 800a416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d101      	bne.n	800a422 <xQueueReceiveFromISR+0x3e>
 800a41e:	2301      	movs	r3, #1
 800a420:	e000      	b.n	800a424 <xQueueReceiveFromISR+0x40>
 800a422:	2300      	movs	r3, #0
 800a424:	2b00      	cmp	r3, #0
 800a426:	d10a      	bne.n	800a43e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a42c:	f383 8811 	msr	BASEPRI, r3
 800a430:	f3bf 8f6f 	isb	sy
 800a434:	f3bf 8f4f 	dsb	sy
 800a438:	61fb      	str	r3, [r7, #28]
}
 800a43a:	bf00      	nop
 800a43c:	e7fe      	b.n	800a43c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a43e:	f001 fe83 	bl	800c148 <vPortValidateInterruptPriority>
	__asm volatile
 800a442:	f3ef 8211 	mrs	r2, BASEPRI
 800a446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a44a:	f383 8811 	msr	BASEPRI, r3
 800a44e:	f3bf 8f6f 	isb	sy
 800a452:	f3bf 8f4f 	dsb	sy
 800a456:	61ba      	str	r2, [r7, #24]
 800a458:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a45a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a45c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a462:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a466:	2b00      	cmp	r3, #0
 800a468:	d02f      	beq.n	800a4ca <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a46c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a470:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a474:	68b9      	ldr	r1, [r7, #8]
 800a476:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a478:	f000 f8da 	bl	800a630 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a47e:	1e5a      	subs	r2, r3, #1
 800a480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a482:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a484:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a48c:	d112      	bne.n	800a4b4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a490:	691b      	ldr	r3, [r3, #16]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d016      	beq.n	800a4c4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a498:	3310      	adds	r3, #16
 800a49a:	4618      	mov	r0, r3
 800a49c:	f000 fe52 	bl	800b144 <xTaskRemoveFromEventList>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d00e      	beq.n	800a4c4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d00b      	beq.n	800a4c4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	601a      	str	r2, [r3, #0]
 800a4b2:	e007      	b.n	800a4c4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a4b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a4b8:	3301      	adds	r3, #1
 800a4ba:	b2db      	uxtb	r3, r3
 800a4bc:	b25a      	sxtb	r2, r3
 800a4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	637b      	str	r3, [r7, #52]	; 0x34
 800a4c8:	e001      	b.n	800a4ce <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	637b      	str	r3, [r7, #52]	; 0x34
 800a4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4d0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	f383 8811 	msr	BASEPRI, r3
}
 800a4d8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a4da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	3738      	adds	r7, #56	; 0x38
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}

0800a4e4 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b084      	sub	sp, #16
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d10a      	bne.n	800a508 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800a4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f6:	f383 8811 	msr	BASEPRI, r3
 800a4fa:	f3bf 8f6f 	isb	sy
 800a4fe:	f3bf 8f4f 	dsb	sy
 800a502:	60bb      	str	r3, [r7, #8]
}
 800a504:	bf00      	nop
 800a506:	e7fe      	b.n	800a506 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800a508:	f001 fd3c 	bl	800bf84 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a510:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800a512:	f001 fd67 	bl	800bfe4 <vPortExitCritical>

	return uxReturn;
 800a516:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a518:	4618      	mov	r0, r3
 800a51a:	3710      	adds	r7, #16
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}

0800a520 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800a520:	b480      	push	{r7}
 800a522:	b087      	sub	sp, #28
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d10a      	bne.n	800a548 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800a532:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a536:	f383 8811 	msr	BASEPRI, r3
 800a53a:	f3bf 8f6f 	isb	sy
 800a53e:	f3bf 8f4f 	dsb	sy
 800a542:	60fb      	str	r3, [r7, #12]
}
 800a544:	bf00      	nop
 800a546:	e7fe      	b.n	800a546 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a54c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800a54e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a550:	4618      	mov	r0, r3
 800a552:	371c      	adds	r7, #28
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr

0800a55c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b086      	sub	sp, #24
 800a560:	af00      	add	r7, sp, #0
 800a562:	60f8      	str	r0, [r7, #12]
 800a564:	60b9      	str	r1, [r7, #8]
 800a566:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a568:	2300      	movs	r3, #0
 800a56a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a570:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a576:	2b00      	cmp	r3, #0
 800a578:	d10d      	bne.n	800a596 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d14d      	bne.n	800a61e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	689b      	ldr	r3, [r3, #8]
 800a586:	4618      	mov	r0, r3
 800a588:	f000 ffbc 	bl	800b504 <xTaskPriorityDisinherit>
 800a58c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	2200      	movs	r2, #0
 800a592:	609a      	str	r2, [r3, #8]
 800a594:	e043      	b.n	800a61e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d119      	bne.n	800a5d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	6858      	ldr	r0, [r3, #4]
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5a4:	461a      	mov	r2, r3
 800a5a6:	68b9      	ldr	r1, [r7, #8]
 800a5a8:	f002 fc50 	bl	800ce4c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	685a      	ldr	r2, [r3, #4]
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5b4:	441a      	add	r2, r3
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	685a      	ldr	r2, [r3, #4]
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	689b      	ldr	r3, [r3, #8]
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	d32b      	bcc.n	800a61e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681a      	ldr	r2, [r3, #0]
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	605a      	str	r2, [r3, #4]
 800a5ce:	e026      	b.n	800a61e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	68d8      	ldr	r0, [r3, #12]
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5d8:	461a      	mov	r2, r3
 800a5da:	68b9      	ldr	r1, [r7, #8]
 800a5dc:	f002 fc36 	bl	800ce4c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	68da      	ldr	r2, [r3, #12]
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5e8:	425b      	negs	r3, r3
 800a5ea:	441a      	add	r2, r3
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	68da      	ldr	r2, [r3, #12]
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	d207      	bcs.n	800a60c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	689a      	ldr	r2, [r3, #8]
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a604:	425b      	negs	r3, r3
 800a606:	441a      	add	r2, r3
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2b02      	cmp	r3, #2
 800a610:	d105      	bne.n	800a61e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a612:	693b      	ldr	r3, [r7, #16]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d002      	beq.n	800a61e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a618:	693b      	ldr	r3, [r7, #16]
 800a61a:	3b01      	subs	r3, #1
 800a61c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	1c5a      	adds	r2, r3, #1
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a626:	697b      	ldr	r3, [r7, #20]
}
 800a628:	4618      	mov	r0, r3
 800a62a:	3718      	adds	r7, #24
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b082      	sub	sp, #8
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
 800a638:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d018      	beq.n	800a674 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	68da      	ldr	r2, [r3, #12]
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a64a:	441a      	add	r2, r3
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	68da      	ldr	r2, [r3, #12]
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	689b      	ldr	r3, [r3, #8]
 800a658:	429a      	cmp	r2, r3
 800a65a:	d303      	bcc.n	800a664 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681a      	ldr	r2, [r3, #0]
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	68d9      	ldr	r1, [r3, #12]
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a66c:	461a      	mov	r2, r3
 800a66e:	6838      	ldr	r0, [r7, #0]
 800a670:	f002 fbec 	bl	800ce4c <memcpy>
	}
}
 800a674:	bf00      	nop
 800a676:	3708      	adds	r7, #8
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}

0800a67c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b084      	sub	sp, #16
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a684:	f001 fc7e 	bl	800bf84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a68e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a690:	e011      	b.n	800a6b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a696:	2b00      	cmp	r3, #0
 800a698:	d012      	beq.n	800a6c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	3324      	adds	r3, #36	; 0x24
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f000 fd50 	bl	800b144 <xTaskRemoveFromEventList>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d001      	beq.n	800a6ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a6aa:	f000 fe27 	bl	800b2fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a6ae:	7bfb      	ldrb	r3, [r7, #15]
 800a6b0:	3b01      	subs	r3, #1
 800a6b2:	b2db      	uxtb	r3, r3
 800a6b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a6b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	dce9      	bgt.n	800a692 <prvUnlockQueue+0x16>
 800a6be:	e000      	b.n	800a6c2 <prvUnlockQueue+0x46>
					break;
 800a6c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	22ff      	movs	r2, #255	; 0xff
 800a6c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a6ca:	f001 fc8b 	bl	800bfe4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a6ce:	f001 fc59 	bl	800bf84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a6da:	e011      	b.n	800a700 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	691b      	ldr	r3, [r3, #16]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d012      	beq.n	800a70a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	3310      	adds	r3, #16
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f000 fd2b 	bl	800b144 <xTaskRemoveFromEventList>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d001      	beq.n	800a6f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a6f4:	f000 fe02 	bl	800b2fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a6f8:	7bbb      	ldrb	r3, [r7, #14]
 800a6fa:	3b01      	subs	r3, #1
 800a6fc:	b2db      	uxtb	r3, r3
 800a6fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a700:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a704:	2b00      	cmp	r3, #0
 800a706:	dce9      	bgt.n	800a6dc <prvUnlockQueue+0x60>
 800a708:	e000      	b.n	800a70c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a70a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	22ff      	movs	r2, #255	; 0xff
 800a710:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a714:	f001 fc66 	bl	800bfe4 <vPortExitCritical>
}
 800a718:	bf00      	nop
 800a71a:	3710      	adds	r7, #16
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}

0800a720 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b084      	sub	sp, #16
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a728:	f001 fc2c 	bl	800bf84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a730:	2b00      	cmp	r3, #0
 800a732:	d102      	bne.n	800a73a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a734:	2301      	movs	r3, #1
 800a736:	60fb      	str	r3, [r7, #12]
 800a738:	e001      	b.n	800a73e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a73a:	2300      	movs	r3, #0
 800a73c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a73e:	f001 fc51 	bl	800bfe4 <vPortExitCritical>

	return xReturn;
 800a742:	68fb      	ldr	r3, [r7, #12]
}
 800a744:	4618      	mov	r0, r3
 800a746:	3710      	adds	r7, #16
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}

0800a74c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b084      	sub	sp, #16
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a754:	f001 fc16 	bl	800bf84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a760:	429a      	cmp	r2, r3
 800a762:	d102      	bne.n	800a76a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a764:	2301      	movs	r3, #1
 800a766:	60fb      	str	r3, [r7, #12]
 800a768:	e001      	b.n	800a76e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a76a:	2300      	movs	r3, #0
 800a76c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a76e:	f001 fc39 	bl	800bfe4 <vPortExitCritical>

	return xReturn;
 800a772:	68fb      	ldr	r3, [r7, #12]
}
 800a774:	4618      	mov	r0, r3
 800a776:	3710      	adds	r7, #16
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}

0800a77c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a77c:	b480      	push	{r7}
 800a77e:	b085      	sub	sp, #20
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
 800a784:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a786:	2300      	movs	r3, #0
 800a788:	60fb      	str	r3, [r7, #12]
 800a78a:	e014      	b.n	800a7b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a78c:	4a0f      	ldr	r2, [pc, #60]	; (800a7cc <vQueueAddToRegistry+0x50>)
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d10b      	bne.n	800a7b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a798:	490c      	ldr	r1, [pc, #48]	; (800a7cc <vQueueAddToRegistry+0x50>)
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	683a      	ldr	r2, [r7, #0]
 800a79e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a7a2:	4a0a      	ldr	r2, [pc, #40]	; (800a7cc <vQueueAddToRegistry+0x50>)
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	00db      	lsls	r3, r3, #3
 800a7a8:	4413      	add	r3, r2
 800a7aa:	687a      	ldr	r2, [r7, #4]
 800a7ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a7ae:	e006      	b.n	800a7be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	3301      	adds	r3, #1
 800a7b4:	60fb      	str	r3, [r7, #12]
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	2b07      	cmp	r3, #7
 800a7ba:	d9e7      	bls.n	800a78c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a7bc:	bf00      	nop
 800a7be:	bf00      	nop
 800a7c0:	3714      	adds	r7, #20
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c8:	4770      	bx	lr
 800a7ca:	bf00      	nop
 800a7cc:	20000a00 	.word	0x20000a00

0800a7d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b086      	sub	sp, #24
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	60f8      	str	r0, [r7, #12]
 800a7d8:	60b9      	str	r1, [r7, #8]
 800a7da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a7e0:	f001 fbd0 	bl	800bf84 <vPortEnterCritical>
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a7ea:	b25b      	sxtb	r3, r3
 800a7ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7f0:	d103      	bne.n	800a7fa <vQueueWaitForMessageRestricted+0x2a>
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7fa:	697b      	ldr	r3, [r7, #20]
 800a7fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a800:	b25b      	sxtb	r3, r3
 800a802:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a806:	d103      	bne.n	800a810 <vQueueWaitForMessageRestricted+0x40>
 800a808:	697b      	ldr	r3, [r7, #20]
 800a80a:	2200      	movs	r2, #0
 800a80c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a810:	f001 fbe8 	bl	800bfe4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d106      	bne.n	800a82a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	3324      	adds	r3, #36	; 0x24
 800a820:	687a      	ldr	r2, [r7, #4]
 800a822:	68b9      	ldr	r1, [r7, #8]
 800a824:	4618      	mov	r0, r3
 800a826:	f000 fc61 	bl	800b0ec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a82a:	6978      	ldr	r0, [r7, #20]
 800a82c:	f7ff ff26 	bl	800a67c <prvUnlockQueue>
	}
 800a830:	bf00      	nop
 800a832:	3718      	adds	r7, #24
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}

0800a838 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b08e      	sub	sp, #56	; 0x38
 800a83c:	af04      	add	r7, sp, #16
 800a83e:	60f8      	str	r0, [r7, #12]
 800a840:	60b9      	str	r1, [r7, #8]
 800a842:	607a      	str	r2, [r7, #4]
 800a844:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d10a      	bne.n	800a862 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a84c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a850:	f383 8811 	msr	BASEPRI, r3
 800a854:	f3bf 8f6f 	isb	sy
 800a858:	f3bf 8f4f 	dsb	sy
 800a85c:	623b      	str	r3, [r7, #32]
}
 800a85e:	bf00      	nop
 800a860:	e7fe      	b.n	800a860 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a864:	2b00      	cmp	r3, #0
 800a866:	d10a      	bne.n	800a87e <xTaskCreateStatic+0x46>
	__asm volatile
 800a868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a86c:	f383 8811 	msr	BASEPRI, r3
 800a870:	f3bf 8f6f 	isb	sy
 800a874:	f3bf 8f4f 	dsb	sy
 800a878:	61fb      	str	r3, [r7, #28]
}
 800a87a:	bf00      	nop
 800a87c:	e7fe      	b.n	800a87c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a87e:	23a8      	movs	r3, #168	; 0xa8
 800a880:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	2ba8      	cmp	r3, #168	; 0xa8
 800a886:	d00a      	beq.n	800a89e <xTaskCreateStatic+0x66>
	__asm volatile
 800a888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a88c:	f383 8811 	msr	BASEPRI, r3
 800a890:	f3bf 8f6f 	isb	sy
 800a894:	f3bf 8f4f 	dsb	sy
 800a898:	61bb      	str	r3, [r7, #24]
}
 800a89a:	bf00      	nop
 800a89c:	e7fe      	b.n	800a89c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a89e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a8a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d01e      	beq.n	800a8e4 <xTaskCreateStatic+0xac>
 800a8a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d01b      	beq.n	800a8e4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a8ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a8b4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b8:	2202      	movs	r2, #2
 800a8ba:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a8be:	2300      	movs	r3, #0
 800a8c0:	9303      	str	r3, [sp, #12]
 800a8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c4:	9302      	str	r3, [sp, #8]
 800a8c6:	f107 0314 	add.w	r3, r7, #20
 800a8ca:	9301      	str	r3, [sp, #4]
 800a8cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ce:	9300      	str	r3, [sp, #0]
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	687a      	ldr	r2, [r7, #4]
 800a8d4:	68b9      	ldr	r1, [r7, #8]
 800a8d6:	68f8      	ldr	r0, [r7, #12]
 800a8d8:	f000 f850 	bl	800a97c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a8dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a8de:	f000 f8f3 	bl	800aac8 <prvAddNewTaskToReadyList>
 800a8e2:	e001      	b.n	800a8e8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a8e8:	697b      	ldr	r3, [r7, #20]
	}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3728      	adds	r7, #40	; 0x28
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}

0800a8f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a8f2:	b580      	push	{r7, lr}
 800a8f4:	b08c      	sub	sp, #48	; 0x30
 800a8f6:	af04      	add	r7, sp, #16
 800a8f8:	60f8      	str	r0, [r7, #12]
 800a8fa:	60b9      	str	r1, [r7, #8]
 800a8fc:	603b      	str	r3, [r7, #0]
 800a8fe:	4613      	mov	r3, r2
 800a900:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a902:	88fb      	ldrh	r3, [r7, #6]
 800a904:	009b      	lsls	r3, r3, #2
 800a906:	4618      	mov	r0, r3
 800a908:	f001 fc5e 	bl	800c1c8 <pvPortMalloc>
 800a90c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d00e      	beq.n	800a932 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a914:	20a8      	movs	r0, #168	; 0xa8
 800a916:	f001 fc57 	bl	800c1c8 <pvPortMalloc>
 800a91a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a91c:	69fb      	ldr	r3, [r7, #28]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d003      	beq.n	800a92a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a922:	69fb      	ldr	r3, [r7, #28]
 800a924:	697a      	ldr	r2, [r7, #20]
 800a926:	631a      	str	r2, [r3, #48]	; 0x30
 800a928:	e005      	b.n	800a936 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a92a:	6978      	ldr	r0, [r7, #20]
 800a92c:	f001 fd18 	bl	800c360 <vPortFree>
 800a930:	e001      	b.n	800a936 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a932:	2300      	movs	r3, #0
 800a934:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a936:	69fb      	ldr	r3, [r7, #28]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d017      	beq.n	800a96c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a93c:	69fb      	ldr	r3, [r7, #28]
 800a93e:	2200      	movs	r2, #0
 800a940:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a944:	88fa      	ldrh	r2, [r7, #6]
 800a946:	2300      	movs	r3, #0
 800a948:	9303      	str	r3, [sp, #12]
 800a94a:	69fb      	ldr	r3, [r7, #28]
 800a94c:	9302      	str	r3, [sp, #8]
 800a94e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a950:	9301      	str	r3, [sp, #4]
 800a952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a954:	9300      	str	r3, [sp, #0]
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	68b9      	ldr	r1, [r7, #8]
 800a95a:	68f8      	ldr	r0, [r7, #12]
 800a95c:	f000 f80e 	bl	800a97c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a960:	69f8      	ldr	r0, [r7, #28]
 800a962:	f000 f8b1 	bl	800aac8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a966:	2301      	movs	r3, #1
 800a968:	61bb      	str	r3, [r7, #24]
 800a96a:	e002      	b.n	800a972 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a96c:	f04f 33ff 	mov.w	r3, #4294967295
 800a970:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a972:	69bb      	ldr	r3, [r7, #24]
	}
 800a974:	4618      	mov	r0, r3
 800a976:	3720      	adds	r7, #32
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}

0800a97c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b088      	sub	sp, #32
 800a980:	af00      	add	r7, sp, #0
 800a982:	60f8      	str	r0, [r7, #12]
 800a984:	60b9      	str	r1, [r7, #8]
 800a986:	607a      	str	r2, [r7, #4]
 800a988:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a98c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	009b      	lsls	r3, r3, #2
 800a992:	461a      	mov	r2, r3
 800a994:	21a5      	movs	r1, #165	; 0xa5
 800a996:	f002 f9bf 	bl	800cd18 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a99c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a9a4:	3b01      	subs	r3, #1
 800a9a6:	009b      	lsls	r3, r3, #2
 800a9a8:	4413      	add	r3, r2
 800a9aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a9ac:	69bb      	ldr	r3, [r7, #24]
 800a9ae:	f023 0307 	bic.w	r3, r3, #7
 800a9b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a9b4:	69bb      	ldr	r3, [r7, #24]
 800a9b6:	f003 0307 	and.w	r3, r3, #7
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d00a      	beq.n	800a9d4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a9be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c2:	f383 8811 	msr	BASEPRI, r3
 800a9c6:	f3bf 8f6f 	isb	sy
 800a9ca:	f3bf 8f4f 	dsb	sy
 800a9ce:	617b      	str	r3, [r7, #20]
}
 800a9d0:	bf00      	nop
 800a9d2:	e7fe      	b.n	800a9d2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d01f      	beq.n	800aa1a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a9da:	2300      	movs	r3, #0
 800a9dc:	61fb      	str	r3, [r7, #28]
 800a9de:	e012      	b.n	800aa06 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a9e0:	68ba      	ldr	r2, [r7, #8]
 800a9e2:	69fb      	ldr	r3, [r7, #28]
 800a9e4:	4413      	add	r3, r2
 800a9e6:	7819      	ldrb	r1, [r3, #0]
 800a9e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9ea:	69fb      	ldr	r3, [r7, #28]
 800a9ec:	4413      	add	r3, r2
 800a9ee:	3334      	adds	r3, #52	; 0x34
 800a9f0:	460a      	mov	r2, r1
 800a9f2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a9f4:	68ba      	ldr	r2, [r7, #8]
 800a9f6:	69fb      	ldr	r3, [r7, #28]
 800a9f8:	4413      	add	r3, r2
 800a9fa:	781b      	ldrb	r3, [r3, #0]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d006      	beq.n	800aa0e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aa00:	69fb      	ldr	r3, [r7, #28]
 800aa02:	3301      	adds	r3, #1
 800aa04:	61fb      	str	r3, [r7, #28]
 800aa06:	69fb      	ldr	r3, [r7, #28]
 800aa08:	2b0f      	cmp	r3, #15
 800aa0a:	d9e9      	bls.n	800a9e0 <prvInitialiseNewTask+0x64>
 800aa0c:	e000      	b.n	800aa10 <prvInitialiseNewTask+0x94>
			{
				break;
 800aa0e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800aa10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa12:	2200      	movs	r2, #0
 800aa14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aa18:	e003      	b.n	800aa22 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800aa1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aa22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa24:	2b37      	cmp	r3, #55	; 0x37
 800aa26:	d901      	bls.n	800aa2c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800aa28:	2337      	movs	r3, #55	; 0x37
 800aa2a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800aa2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa30:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800aa32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa36:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800aa38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800aa3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa40:	3304      	adds	r3, #4
 800aa42:	4618      	mov	r0, r3
 800aa44:	f7ff f882 	bl	8009b4c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800aa48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa4a:	3318      	adds	r3, #24
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f7ff f87d 	bl	8009b4c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800aa52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa56:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa5a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aa5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa60:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800aa62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa66:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800aa68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aa70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa72:	2200      	movs	r2, #0
 800aa74:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800aa78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa7a:	3354      	adds	r3, #84	; 0x54
 800aa7c:	224c      	movs	r2, #76	; 0x4c
 800aa7e:	2100      	movs	r1, #0
 800aa80:	4618      	mov	r0, r3
 800aa82:	f002 f949 	bl	800cd18 <memset>
 800aa86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa88:	4a0c      	ldr	r2, [pc, #48]	; (800aabc <prvInitialiseNewTask+0x140>)
 800aa8a:	659a      	str	r2, [r3, #88]	; 0x58
 800aa8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa8e:	4a0c      	ldr	r2, [pc, #48]	; (800aac0 <prvInitialiseNewTask+0x144>)
 800aa90:	65da      	str	r2, [r3, #92]	; 0x5c
 800aa92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa94:	4a0b      	ldr	r2, [pc, #44]	; (800aac4 <prvInitialiseNewTask+0x148>)
 800aa96:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800aa98:	683a      	ldr	r2, [r7, #0]
 800aa9a:	68f9      	ldr	r1, [r7, #12]
 800aa9c:	69b8      	ldr	r0, [r7, #24]
 800aa9e:	f001 f941 	bl	800bd24 <pxPortInitialiseStack>
 800aaa2:	4602      	mov	r2, r0
 800aaa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800aaa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d002      	beq.n	800aab4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800aaae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aab2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aab4:	bf00      	nop
 800aab6:	3720      	adds	r7, #32
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}
 800aabc:	20005388 	.word	0x20005388
 800aac0:	200053f0 	.word	0x200053f0
 800aac4:	20005458 	.word	0x20005458

0800aac8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b082      	sub	sp, #8
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800aad0:	f001 fa58 	bl	800bf84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800aad4:	4b2d      	ldr	r3, [pc, #180]	; (800ab8c <prvAddNewTaskToReadyList+0xc4>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	3301      	adds	r3, #1
 800aada:	4a2c      	ldr	r2, [pc, #176]	; (800ab8c <prvAddNewTaskToReadyList+0xc4>)
 800aadc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800aade:	4b2c      	ldr	r3, [pc, #176]	; (800ab90 <prvAddNewTaskToReadyList+0xc8>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d109      	bne.n	800aafa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800aae6:	4a2a      	ldr	r2, [pc, #168]	; (800ab90 <prvAddNewTaskToReadyList+0xc8>)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800aaec:	4b27      	ldr	r3, [pc, #156]	; (800ab8c <prvAddNewTaskToReadyList+0xc4>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d110      	bne.n	800ab16 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800aaf4:	f000 fc26 	bl	800b344 <prvInitialiseTaskLists>
 800aaf8:	e00d      	b.n	800ab16 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800aafa:	4b26      	ldr	r3, [pc, #152]	; (800ab94 <prvAddNewTaskToReadyList+0xcc>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d109      	bne.n	800ab16 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ab02:	4b23      	ldr	r3, [pc, #140]	; (800ab90 <prvAddNewTaskToReadyList+0xc8>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	d802      	bhi.n	800ab16 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ab10:	4a1f      	ldr	r2, [pc, #124]	; (800ab90 <prvAddNewTaskToReadyList+0xc8>)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ab16:	4b20      	ldr	r3, [pc, #128]	; (800ab98 <prvAddNewTaskToReadyList+0xd0>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	3301      	adds	r3, #1
 800ab1c:	4a1e      	ldr	r2, [pc, #120]	; (800ab98 <prvAddNewTaskToReadyList+0xd0>)
 800ab1e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ab20:	4b1d      	ldr	r3, [pc, #116]	; (800ab98 <prvAddNewTaskToReadyList+0xd0>)
 800ab22:	681a      	ldr	r2, [r3, #0]
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab2c:	4b1b      	ldr	r3, [pc, #108]	; (800ab9c <prvAddNewTaskToReadyList+0xd4>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	429a      	cmp	r2, r3
 800ab32:	d903      	bls.n	800ab3c <prvAddNewTaskToReadyList+0x74>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab38:	4a18      	ldr	r2, [pc, #96]	; (800ab9c <prvAddNewTaskToReadyList+0xd4>)
 800ab3a:	6013      	str	r3, [r2, #0]
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab40:	4613      	mov	r3, r2
 800ab42:	009b      	lsls	r3, r3, #2
 800ab44:	4413      	add	r3, r2
 800ab46:	009b      	lsls	r3, r3, #2
 800ab48:	4a15      	ldr	r2, [pc, #84]	; (800aba0 <prvAddNewTaskToReadyList+0xd8>)
 800ab4a:	441a      	add	r2, r3
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	3304      	adds	r3, #4
 800ab50:	4619      	mov	r1, r3
 800ab52:	4610      	mov	r0, r2
 800ab54:	f7ff f807 	bl	8009b66 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ab58:	f001 fa44 	bl	800bfe4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ab5c:	4b0d      	ldr	r3, [pc, #52]	; (800ab94 <prvAddNewTaskToReadyList+0xcc>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d00e      	beq.n	800ab82 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ab64:	4b0a      	ldr	r3, [pc, #40]	; (800ab90 <prvAddNewTaskToReadyList+0xc8>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab6e:	429a      	cmp	r2, r3
 800ab70:	d207      	bcs.n	800ab82 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ab72:	4b0c      	ldr	r3, [pc, #48]	; (800aba4 <prvAddNewTaskToReadyList+0xdc>)
 800ab74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab78:	601a      	str	r2, [r3, #0]
 800ab7a:	f3bf 8f4f 	dsb	sy
 800ab7e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab82:	bf00      	nop
 800ab84:	3708      	adds	r7, #8
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}
 800ab8a:	bf00      	nop
 800ab8c:	20000f14 	.word	0x20000f14
 800ab90:	20000a40 	.word	0x20000a40
 800ab94:	20000f20 	.word	0x20000f20
 800ab98:	20000f30 	.word	0x20000f30
 800ab9c:	20000f1c 	.word	0x20000f1c
 800aba0:	20000a44 	.word	0x20000a44
 800aba4:	e000ed04 	.word	0xe000ed04

0800aba8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b084      	sub	sp, #16
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800abb0:	2300      	movs	r3, #0
 800abb2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d017      	beq.n	800abea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800abba:	4b13      	ldr	r3, [pc, #76]	; (800ac08 <vTaskDelay+0x60>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d00a      	beq.n	800abd8 <vTaskDelay+0x30>
	__asm volatile
 800abc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc6:	f383 8811 	msr	BASEPRI, r3
 800abca:	f3bf 8f6f 	isb	sy
 800abce:	f3bf 8f4f 	dsb	sy
 800abd2:	60bb      	str	r3, [r7, #8]
}
 800abd4:	bf00      	nop
 800abd6:	e7fe      	b.n	800abd6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800abd8:	f000 f88a 	bl	800acf0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800abdc:	2100      	movs	r1, #0
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f000 fcfe 	bl	800b5e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800abe4:	f000 f892 	bl	800ad0c <xTaskResumeAll>
 800abe8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d107      	bne.n	800ac00 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800abf0:	4b06      	ldr	r3, [pc, #24]	; (800ac0c <vTaskDelay+0x64>)
 800abf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abf6:	601a      	str	r2, [r3, #0]
 800abf8:	f3bf 8f4f 	dsb	sy
 800abfc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ac00:	bf00      	nop
 800ac02:	3710      	adds	r7, #16
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}
 800ac08:	20000f3c 	.word	0x20000f3c
 800ac0c:	e000ed04 	.word	0xe000ed04

0800ac10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b08a      	sub	sp, #40	; 0x28
 800ac14:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ac16:	2300      	movs	r3, #0
 800ac18:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ac1e:	463a      	mov	r2, r7
 800ac20:	1d39      	adds	r1, r7, #4
 800ac22:	f107 0308 	add.w	r3, r7, #8
 800ac26:	4618      	mov	r0, r3
 800ac28:	f7fe ff3c 	bl	8009aa4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ac2c:	6839      	ldr	r1, [r7, #0]
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	68ba      	ldr	r2, [r7, #8]
 800ac32:	9202      	str	r2, [sp, #8]
 800ac34:	9301      	str	r3, [sp, #4]
 800ac36:	2300      	movs	r3, #0
 800ac38:	9300      	str	r3, [sp, #0]
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	460a      	mov	r2, r1
 800ac3e:	4924      	ldr	r1, [pc, #144]	; (800acd0 <vTaskStartScheduler+0xc0>)
 800ac40:	4824      	ldr	r0, [pc, #144]	; (800acd4 <vTaskStartScheduler+0xc4>)
 800ac42:	f7ff fdf9 	bl	800a838 <xTaskCreateStatic>
 800ac46:	4603      	mov	r3, r0
 800ac48:	4a23      	ldr	r2, [pc, #140]	; (800acd8 <vTaskStartScheduler+0xc8>)
 800ac4a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ac4c:	4b22      	ldr	r3, [pc, #136]	; (800acd8 <vTaskStartScheduler+0xc8>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d002      	beq.n	800ac5a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ac54:	2301      	movs	r3, #1
 800ac56:	617b      	str	r3, [r7, #20]
 800ac58:	e001      	b.n	800ac5e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ac5e:	697b      	ldr	r3, [r7, #20]
 800ac60:	2b01      	cmp	r3, #1
 800ac62:	d102      	bne.n	800ac6a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ac64:	f000 fd10 	bl	800b688 <xTimerCreateTimerTask>
 800ac68:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ac6a:	697b      	ldr	r3, [r7, #20]
 800ac6c:	2b01      	cmp	r3, #1
 800ac6e:	d11b      	bne.n	800aca8 <vTaskStartScheduler+0x98>
	__asm volatile
 800ac70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac74:	f383 8811 	msr	BASEPRI, r3
 800ac78:	f3bf 8f6f 	isb	sy
 800ac7c:	f3bf 8f4f 	dsb	sy
 800ac80:	613b      	str	r3, [r7, #16]
}
 800ac82:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ac84:	4b15      	ldr	r3, [pc, #84]	; (800acdc <vTaskStartScheduler+0xcc>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	3354      	adds	r3, #84	; 0x54
 800ac8a:	4a15      	ldr	r2, [pc, #84]	; (800ace0 <vTaskStartScheduler+0xd0>)
 800ac8c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ac8e:	4b15      	ldr	r3, [pc, #84]	; (800ace4 <vTaskStartScheduler+0xd4>)
 800ac90:	f04f 32ff 	mov.w	r2, #4294967295
 800ac94:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ac96:	4b14      	ldr	r3, [pc, #80]	; (800ace8 <vTaskStartScheduler+0xd8>)
 800ac98:	2201      	movs	r2, #1
 800ac9a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ac9c:	4b13      	ldr	r3, [pc, #76]	; (800acec <vTaskStartScheduler+0xdc>)
 800ac9e:	2200      	movs	r2, #0
 800aca0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800aca2:	f001 f8cd 	bl	800be40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800aca6:	e00e      	b.n	800acc6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acae:	d10a      	bne.n	800acc6 <vTaskStartScheduler+0xb6>
	__asm volatile
 800acb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb4:	f383 8811 	msr	BASEPRI, r3
 800acb8:	f3bf 8f6f 	isb	sy
 800acbc:	f3bf 8f4f 	dsb	sy
 800acc0:	60fb      	str	r3, [r7, #12]
}
 800acc2:	bf00      	nop
 800acc4:	e7fe      	b.n	800acc4 <vTaskStartScheduler+0xb4>
}
 800acc6:	bf00      	nop
 800acc8:	3718      	adds	r7, #24
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}
 800acce:	bf00      	nop
 800acd0:	0800cf58 	.word	0x0800cf58
 800acd4:	0800b315 	.word	0x0800b315
 800acd8:	20000f38 	.word	0x20000f38
 800acdc:	20000a40 	.word	0x20000a40
 800ace0:	2000007c 	.word	0x2000007c
 800ace4:	20000f34 	.word	0x20000f34
 800ace8:	20000f20 	.word	0x20000f20
 800acec:	20000f18 	.word	0x20000f18

0800acf0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800acf0:	b480      	push	{r7}
 800acf2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800acf4:	4b04      	ldr	r3, [pc, #16]	; (800ad08 <vTaskSuspendAll+0x18>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	3301      	adds	r3, #1
 800acfa:	4a03      	ldr	r2, [pc, #12]	; (800ad08 <vTaskSuspendAll+0x18>)
 800acfc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800acfe:	bf00      	nop
 800ad00:	46bd      	mov	sp, r7
 800ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad06:	4770      	bx	lr
 800ad08:	20000f3c 	.word	0x20000f3c

0800ad0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b084      	sub	sp, #16
 800ad10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ad12:	2300      	movs	r3, #0
 800ad14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ad16:	2300      	movs	r3, #0
 800ad18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ad1a:	4b42      	ldr	r3, [pc, #264]	; (800ae24 <xTaskResumeAll+0x118>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d10a      	bne.n	800ad38 <xTaskResumeAll+0x2c>
	__asm volatile
 800ad22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad26:	f383 8811 	msr	BASEPRI, r3
 800ad2a:	f3bf 8f6f 	isb	sy
 800ad2e:	f3bf 8f4f 	dsb	sy
 800ad32:	603b      	str	r3, [r7, #0]
}
 800ad34:	bf00      	nop
 800ad36:	e7fe      	b.n	800ad36 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ad38:	f001 f924 	bl	800bf84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ad3c:	4b39      	ldr	r3, [pc, #228]	; (800ae24 <xTaskResumeAll+0x118>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	3b01      	subs	r3, #1
 800ad42:	4a38      	ldr	r2, [pc, #224]	; (800ae24 <xTaskResumeAll+0x118>)
 800ad44:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad46:	4b37      	ldr	r3, [pc, #220]	; (800ae24 <xTaskResumeAll+0x118>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d162      	bne.n	800ae14 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ad4e:	4b36      	ldr	r3, [pc, #216]	; (800ae28 <xTaskResumeAll+0x11c>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d05e      	beq.n	800ae14 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ad56:	e02f      	b.n	800adb8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad58:	4b34      	ldr	r3, [pc, #208]	; (800ae2c <xTaskResumeAll+0x120>)
 800ad5a:	68db      	ldr	r3, [r3, #12]
 800ad5c:	68db      	ldr	r3, [r3, #12]
 800ad5e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	3318      	adds	r3, #24
 800ad64:	4618      	mov	r0, r3
 800ad66:	f7fe ff5b 	bl	8009c20 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	3304      	adds	r3, #4
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f7fe ff56 	bl	8009c20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad78:	4b2d      	ldr	r3, [pc, #180]	; (800ae30 <xTaskResumeAll+0x124>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	429a      	cmp	r2, r3
 800ad7e:	d903      	bls.n	800ad88 <xTaskResumeAll+0x7c>
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad84:	4a2a      	ldr	r2, [pc, #168]	; (800ae30 <xTaskResumeAll+0x124>)
 800ad86:	6013      	str	r3, [r2, #0]
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad8c:	4613      	mov	r3, r2
 800ad8e:	009b      	lsls	r3, r3, #2
 800ad90:	4413      	add	r3, r2
 800ad92:	009b      	lsls	r3, r3, #2
 800ad94:	4a27      	ldr	r2, [pc, #156]	; (800ae34 <xTaskResumeAll+0x128>)
 800ad96:	441a      	add	r2, r3
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	3304      	adds	r3, #4
 800ad9c:	4619      	mov	r1, r3
 800ad9e:	4610      	mov	r0, r2
 800ada0:	f7fe fee1 	bl	8009b66 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ada8:	4b23      	ldr	r3, [pc, #140]	; (800ae38 <xTaskResumeAll+0x12c>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adae:	429a      	cmp	r2, r3
 800adb0:	d302      	bcc.n	800adb8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800adb2:	4b22      	ldr	r3, [pc, #136]	; (800ae3c <xTaskResumeAll+0x130>)
 800adb4:	2201      	movs	r2, #1
 800adb6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800adb8:	4b1c      	ldr	r3, [pc, #112]	; (800ae2c <xTaskResumeAll+0x120>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d1cb      	bne.n	800ad58 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d001      	beq.n	800adca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800adc6:	f000 fb5f 	bl	800b488 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800adca:	4b1d      	ldr	r3, [pc, #116]	; (800ae40 <xTaskResumeAll+0x134>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d010      	beq.n	800adf8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800add6:	f000 f847 	bl	800ae68 <xTaskIncrementTick>
 800adda:	4603      	mov	r3, r0
 800addc:	2b00      	cmp	r3, #0
 800adde:	d002      	beq.n	800ade6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ade0:	4b16      	ldr	r3, [pc, #88]	; (800ae3c <xTaskResumeAll+0x130>)
 800ade2:	2201      	movs	r2, #1
 800ade4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	3b01      	subs	r3, #1
 800adea:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d1f1      	bne.n	800add6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800adf2:	4b13      	ldr	r3, [pc, #76]	; (800ae40 <xTaskResumeAll+0x134>)
 800adf4:	2200      	movs	r2, #0
 800adf6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800adf8:	4b10      	ldr	r3, [pc, #64]	; (800ae3c <xTaskResumeAll+0x130>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d009      	beq.n	800ae14 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ae00:	2301      	movs	r3, #1
 800ae02:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ae04:	4b0f      	ldr	r3, [pc, #60]	; (800ae44 <xTaskResumeAll+0x138>)
 800ae06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae0a:	601a      	str	r2, [r3, #0]
 800ae0c:	f3bf 8f4f 	dsb	sy
 800ae10:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ae14:	f001 f8e6 	bl	800bfe4 <vPortExitCritical>

	return xAlreadyYielded;
 800ae18:	68bb      	ldr	r3, [r7, #8]
}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	3710      	adds	r7, #16
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}
 800ae22:	bf00      	nop
 800ae24:	20000f3c 	.word	0x20000f3c
 800ae28:	20000f14 	.word	0x20000f14
 800ae2c:	20000ed4 	.word	0x20000ed4
 800ae30:	20000f1c 	.word	0x20000f1c
 800ae34:	20000a44 	.word	0x20000a44
 800ae38:	20000a40 	.word	0x20000a40
 800ae3c:	20000f28 	.word	0x20000f28
 800ae40:	20000f24 	.word	0x20000f24
 800ae44:	e000ed04 	.word	0xe000ed04

0800ae48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b083      	sub	sp, #12
 800ae4c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ae4e:	4b05      	ldr	r3, [pc, #20]	; (800ae64 <xTaskGetTickCount+0x1c>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ae54:	687b      	ldr	r3, [r7, #4]
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	370c      	adds	r7, #12
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae60:	4770      	bx	lr
 800ae62:	bf00      	nop
 800ae64:	20000f18 	.word	0x20000f18

0800ae68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b086      	sub	sp, #24
 800ae6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae72:	4b4f      	ldr	r3, [pc, #316]	; (800afb0 <xTaskIncrementTick+0x148>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	f040 808f 	bne.w	800af9a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ae7c:	4b4d      	ldr	r3, [pc, #308]	; (800afb4 <xTaskIncrementTick+0x14c>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	3301      	adds	r3, #1
 800ae82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ae84:	4a4b      	ldr	r2, [pc, #300]	; (800afb4 <xTaskIncrementTick+0x14c>)
 800ae86:	693b      	ldr	r3, [r7, #16]
 800ae88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ae8a:	693b      	ldr	r3, [r7, #16]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d120      	bne.n	800aed2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ae90:	4b49      	ldr	r3, [pc, #292]	; (800afb8 <xTaskIncrementTick+0x150>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d00a      	beq.n	800aeb0 <xTaskIncrementTick+0x48>
	__asm volatile
 800ae9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae9e:	f383 8811 	msr	BASEPRI, r3
 800aea2:	f3bf 8f6f 	isb	sy
 800aea6:	f3bf 8f4f 	dsb	sy
 800aeaa:	603b      	str	r3, [r7, #0]
}
 800aeac:	bf00      	nop
 800aeae:	e7fe      	b.n	800aeae <xTaskIncrementTick+0x46>
 800aeb0:	4b41      	ldr	r3, [pc, #260]	; (800afb8 <xTaskIncrementTick+0x150>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	60fb      	str	r3, [r7, #12]
 800aeb6:	4b41      	ldr	r3, [pc, #260]	; (800afbc <xTaskIncrementTick+0x154>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	4a3f      	ldr	r2, [pc, #252]	; (800afb8 <xTaskIncrementTick+0x150>)
 800aebc:	6013      	str	r3, [r2, #0]
 800aebe:	4a3f      	ldr	r2, [pc, #252]	; (800afbc <xTaskIncrementTick+0x154>)
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	6013      	str	r3, [r2, #0]
 800aec4:	4b3e      	ldr	r3, [pc, #248]	; (800afc0 <xTaskIncrementTick+0x158>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	3301      	adds	r3, #1
 800aeca:	4a3d      	ldr	r2, [pc, #244]	; (800afc0 <xTaskIncrementTick+0x158>)
 800aecc:	6013      	str	r3, [r2, #0]
 800aece:	f000 fadb 	bl	800b488 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800aed2:	4b3c      	ldr	r3, [pc, #240]	; (800afc4 <xTaskIncrementTick+0x15c>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	693a      	ldr	r2, [r7, #16]
 800aed8:	429a      	cmp	r2, r3
 800aeda:	d349      	bcc.n	800af70 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aedc:	4b36      	ldr	r3, [pc, #216]	; (800afb8 <xTaskIncrementTick+0x150>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d104      	bne.n	800aef0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aee6:	4b37      	ldr	r3, [pc, #220]	; (800afc4 <xTaskIncrementTick+0x15c>)
 800aee8:	f04f 32ff 	mov.w	r2, #4294967295
 800aeec:	601a      	str	r2, [r3, #0]
					break;
 800aeee:	e03f      	b.n	800af70 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aef0:	4b31      	ldr	r3, [pc, #196]	; (800afb8 <xTaskIncrementTick+0x150>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	68db      	ldr	r3, [r3, #12]
 800aef6:	68db      	ldr	r3, [r3, #12]
 800aef8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	685b      	ldr	r3, [r3, #4]
 800aefe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800af00:	693a      	ldr	r2, [r7, #16]
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	429a      	cmp	r2, r3
 800af06:	d203      	bcs.n	800af10 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800af08:	4a2e      	ldr	r2, [pc, #184]	; (800afc4 <xTaskIncrementTick+0x15c>)
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800af0e:	e02f      	b.n	800af70 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	3304      	adds	r3, #4
 800af14:	4618      	mov	r0, r3
 800af16:	f7fe fe83 	bl	8009c20 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d004      	beq.n	800af2c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	3318      	adds	r3, #24
 800af26:	4618      	mov	r0, r3
 800af28:	f7fe fe7a 	bl	8009c20 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af30:	4b25      	ldr	r3, [pc, #148]	; (800afc8 <xTaskIncrementTick+0x160>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	429a      	cmp	r2, r3
 800af36:	d903      	bls.n	800af40 <xTaskIncrementTick+0xd8>
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af3c:	4a22      	ldr	r2, [pc, #136]	; (800afc8 <xTaskIncrementTick+0x160>)
 800af3e:	6013      	str	r3, [r2, #0]
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af44:	4613      	mov	r3, r2
 800af46:	009b      	lsls	r3, r3, #2
 800af48:	4413      	add	r3, r2
 800af4a:	009b      	lsls	r3, r3, #2
 800af4c:	4a1f      	ldr	r2, [pc, #124]	; (800afcc <xTaskIncrementTick+0x164>)
 800af4e:	441a      	add	r2, r3
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	3304      	adds	r3, #4
 800af54:	4619      	mov	r1, r3
 800af56:	4610      	mov	r0, r2
 800af58:	f7fe fe05 	bl	8009b66 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af60:	4b1b      	ldr	r3, [pc, #108]	; (800afd0 <xTaskIncrementTick+0x168>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af66:	429a      	cmp	r2, r3
 800af68:	d3b8      	bcc.n	800aedc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800af6a:	2301      	movs	r3, #1
 800af6c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800af6e:	e7b5      	b.n	800aedc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800af70:	4b17      	ldr	r3, [pc, #92]	; (800afd0 <xTaskIncrementTick+0x168>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af76:	4915      	ldr	r1, [pc, #84]	; (800afcc <xTaskIncrementTick+0x164>)
 800af78:	4613      	mov	r3, r2
 800af7a:	009b      	lsls	r3, r3, #2
 800af7c:	4413      	add	r3, r2
 800af7e:	009b      	lsls	r3, r3, #2
 800af80:	440b      	add	r3, r1
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	2b01      	cmp	r3, #1
 800af86:	d901      	bls.n	800af8c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800af88:	2301      	movs	r3, #1
 800af8a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800af8c:	4b11      	ldr	r3, [pc, #68]	; (800afd4 <xTaskIncrementTick+0x16c>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d007      	beq.n	800afa4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800af94:	2301      	movs	r3, #1
 800af96:	617b      	str	r3, [r7, #20]
 800af98:	e004      	b.n	800afa4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800af9a:	4b0f      	ldr	r3, [pc, #60]	; (800afd8 <xTaskIncrementTick+0x170>)
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	3301      	adds	r3, #1
 800afa0:	4a0d      	ldr	r2, [pc, #52]	; (800afd8 <xTaskIncrementTick+0x170>)
 800afa2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800afa4:	697b      	ldr	r3, [r7, #20]
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3718      	adds	r7, #24
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}
 800afae:	bf00      	nop
 800afb0:	20000f3c 	.word	0x20000f3c
 800afb4:	20000f18 	.word	0x20000f18
 800afb8:	20000ecc 	.word	0x20000ecc
 800afbc:	20000ed0 	.word	0x20000ed0
 800afc0:	20000f2c 	.word	0x20000f2c
 800afc4:	20000f34 	.word	0x20000f34
 800afc8:	20000f1c 	.word	0x20000f1c
 800afcc:	20000a44 	.word	0x20000a44
 800afd0:	20000a40 	.word	0x20000a40
 800afd4:	20000f28 	.word	0x20000f28
 800afd8:	20000f24 	.word	0x20000f24

0800afdc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800afdc:	b480      	push	{r7}
 800afde:	b085      	sub	sp, #20
 800afe0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800afe2:	4b2a      	ldr	r3, [pc, #168]	; (800b08c <vTaskSwitchContext+0xb0>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d003      	beq.n	800aff2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800afea:	4b29      	ldr	r3, [pc, #164]	; (800b090 <vTaskSwitchContext+0xb4>)
 800afec:	2201      	movs	r2, #1
 800afee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800aff0:	e046      	b.n	800b080 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800aff2:	4b27      	ldr	r3, [pc, #156]	; (800b090 <vTaskSwitchContext+0xb4>)
 800aff4:	2200      	movs	r2, #0
 800aff6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aff8:	4b26      	ldr	r3, [pc, #152]	; (800b094 <vTaskSwitchContext+0xb8>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	60fb      	str	r3, [r7, #12]
 800affe:	e010      	b.n	800b022 <vTaskSwitchContext+0x46>
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d10a      	bne.n	800b01c <vTaskSwitchContext+0x40>
	__asm volatile
 800b006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b00a:	f383 8811 	msr	BASEPRI, r3
 800b00e:	f3bf 8f6f 	isb	sy
 800b012:	f3bf 8f4f 	dsb	sy
 800b016:	607b      	str	r3, [r7, #4]
}
 800b018:	bf00      	nop
 800b01a:	e7fe      	b.n	800b01a <vTaskSwitchContext+0x3e>
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	3b01      	subs	r3, #1
 800b020:	60fb      	str	r3, [r7, #12]
 800b022:	491d      	ldr	r1, [pc, #116]	; (800b098 <vTaskSwitchContext+0xbc>)
 800b024:	68fa      	ldr	r2, [r7, #12]
 800b026:	4613      	mov	r3, r2
 800b028:	009b      	lsls	r3, r3, #2
 800b02a:	4413      	add	r3, r2
 800b02c:	009b      	lsls	r3, r3, #2
 800b02e:	440b      	add	r3, r1
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d0e4      	beq.n	800b000 <vTaskSwitchContext+0x24>
 800b036:	68fa      	ldr	r2, [r7, #12]
 800b038:	4613      	mov	r3, r2
 800b03a:	009b      	lsls	r3, r3, #2
 800b03c:	4413      	add	r3, r2
 800b03e:	009b      	lsls	r3, r3, #2
 800b040:	4a15      	ldr	r2, [pc, #84]	; (800b098 <vTaskSwitchContext+0xbc>)
 800b042:	4413      	add	r3, r2
 800b044:	60bb      	str	r3, [r7, #8]
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	685b      	ldr	r3, [r3, #4]
 800b04a:	685a      	ldr	r2, [r3, #4]
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	605a      	str	r2, [r3, #4]
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	685a      	ldr	r2, [r3, #4]
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	3308      	adds	r3, #8
 800b058:	429a      	cmp	r2, r3
 800b05a:	d104      	bne.n	800b066 <vTaskSwitchContext+0x8a>
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	685b      	ldr	r3, [r3, #4]
 800b060:	685a      	ldr	r2, [r3, #4]
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	605a      	str	r2, [r3, #4]
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	685b      	ldr	r3, [r3, #4]
 800b06a:	68db      	ldr	r3, [r3, #12]
 800b06c:	4a0b      	ldr	r2, [pc, #44]	; (800b09c <vTaskSwitchContext+0xc0>)
 800b06e:	6013      	str	r3, [r2, #0]
 800b070:	4a08      	ldr	r2, [pc, #32]	; (800b094 <vTaskSwitchContext+0xb8>)
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b076:	4b09      	ldr	r3, [pc, #36]	; (800b09c <vTaskSwitchContext+0xc0>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	3354      	adds	r3, #84	; 0x54
 800b07c:	4a08      	ldr	r2, [pc, #32]	; (800b0a0 <vTaskSwitchContext+0xc4>)
 800b07e:	6013      	str	r3, [r2, #0]
}
 800b080:	bf00      	nop
 800b082:	3714      	adds	r7, #20
 800b084:	46bd      	mov	sp, r7
 800b086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08a:	4770      	bx	lr
 800b08c:	20000f3c 	.word	0x20000f3c
 800b090:	20000f28 	.word	0x20000f28
 800b094:	20000f1c 	.word	0x20000f1c
 800b098:	20000a44 	.word	0x20000a44
 800b09c:	20000a40 	.word	0x20000a40
 800b0a0:	2000007c 	.word	0x2000007c

0800b0a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b084      	sub	sp, #16
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
 800b0ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d10a      	bne.n	800b0ca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b8:	f383 8811 	msr	BASEPRI, r3
 800b0bc:	f3bf 8f6f 	isb	sy
 800b0c0:	f3bf 8f4f 	dsb	sy
 800b0c4:	60fb      	str	r3, [r7, #12]
}
 800b0c6:	bf00      	nop
 800b0c8:	e7fe      	b.n	800b0c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b0ca:	4b07      	ldr	r3, [pc, #28]	; (800b0e8 <vTaskPlaceOnEventList+0x44>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	3318      	adds	r3, #24
 800b0d0:	4619      	mov	r1, r3
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f7fe fd6b 	bl	8009bae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b0d8:	2101      	movs	r1, #1
 800b0da:	6838      	ldr	r0, [r7, #0]
 800b0dc:	f000 fa80 	bl	800b5e0 <prvAddCurrentTaskToDelayedList>
}
 800b0e0:	bf00      	nop
 800b0e2:	3710      	adds	r7, #16
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}
 800b0e8:	20000a40 	.word	0x20000a40

0800b0ec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b086      	sub	sp, #24
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	60f8      	str	r0, [r7, #12]
 800b0f4:	60b9      	str	r1, [r7, #8]
 800b0f6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d10a      	bne.n	800b114 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b102:	f383 8811 	msr	BASEPRI, r3
 800b106:	f3bf 8f6f 	isb	sy
 800b10a:	f3bf 8f4f 	dsb	sy
 800b10e:	617b      	str	r3, [r7, #20]
}
 800b110:	bf00      	nop
 800b112:	e7fe      	b.n	800b112 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b114:	4b0a      	ldr	r3, [pc, #40]	; (800b140 <vTaskPlaceOnEventListRestricted+0x54>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	3318      	adds	r3, #24
 800b11a:	4619      	mov	r1, r3
 800b11c:	68f8      	ldr	r0, [r7, #12]
 800b11e:	f7fe fd22 	bl	8009b66 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d002      	beq.n	800b12e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b128:	f04f 33ff 	mov.w	r3, #4294967295
 800b12c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b12e:	6879      	ldr	r1, [r7, #4]
 800b130:	68b8      	ldr	r0, [r7, #8]
 800b132:	f000 fa55 	bl	800b5e0 <prvAddCurrentTaskToDelayedList>
	}
 800b136:	bf00      	nop
 800b138:	3718      	adds	r7, #24
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}
 800b13e:	bf00      	nop
 800b140:	20000a40 	.word	0x20000a40

0800b144 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b086      	sub	sp, #24
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	68db      	ldr	r3, [r3, #12]
 800b150:	68db      	ldr	r3, [r3, #12]
 800b152:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d10a      	bne.n	800b170 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b15e:	f383 8811 	msr	BASEPRI, r3
 800b162:	f3bf 8f6f 	isb	sy
 800b166:	f3bf 8f4f 	dsb	sy
 800b16a:	60fb      	str	r3, [r7, #12]
}
 800b16c:	bf00      	nop
 800b16e:	e7fe      	b.n	800b16e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	3318      	adds	r3, #24
 800b174:	4618      	mov	r0, r3
 800b176:	f7fe fd53 	bl	8009c20 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b17a:	4b1e      	ldr	r3, [pc, #120]	; (800b1f4 <xTaskRemoveFromEventList+0xb0>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d11d      	bne.n	800b1be <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b182:	693b      	ldr	r3, [r7, #16]
 800b184:	3304      	adds	r3, #4
 800b186:	4618      	mov	r0, r3
 800b188:	f7fe fd4a 	bl	8009c20 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b190:	4b19      	ldr	r3, [pc, #100]	; (800b1f8 <xTaskRemoveFromEventList+0xb4>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	429a      	cmp	r2, r3
 800b196:	d903      	bls.n	800b1a0 <xTaskRemoveFromEventList+0x5c>
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b19c:	4a16      	ldr	r2, [pc, #88]	; (800b1f8 <xTaskRemoveFromEventList+0xb4>)
 800b19e:	6013      	str	r3, [r2, #0]
 800b1a0:	693b      	ldr	r3, [r7, #16]
 800b1a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1a4:	4613      	mov	r3, r2
 800b1a6:	009b      	lsls	r3, r3, #2
 800b1a8:	4413      	add	r3, r2
 800b1aa:	009b      	lsls	r3, r3, #2
 800b1ac:	4a13      	ldr	r2, [pc, #76]	; (800b1fc <xTaskRemoveFromEventList+0xb8>)
 800b1ae:	441a      	add	r2, r3
 800b1b0:	693b      	ldr	r3, [r7, #16]
 800b1b2:	3304      	adds	r3, #4
 800b1b4:	4619      	mov	r1, r3
 800b1b6:	4610      	mov	r0, r2
 800b1b8:	f7fe fcd5 	bl	8009b66 <vListInsertEnd>
 800b1bc:	e005      	b.n	800b1ca <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	3318      	adds	r3, #24
 800b1c2:	4619      	mov	r1, r3
 800b1c4:	480e      	ldr	r0, [pc, #56]	; (800b200 <xTaskRemoveFromEventList+0xbc>)
 800b1c6:	f7fe fcce 	bl	8009b66 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b1ca:	693b      	ldr	r3, [r7, #16]
 800b1cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1ce:	4b0d      	ldr	r3, [pc, #52]	; (800b204 <xTaskRemoveFromEventList+0xc0>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1d4:	429a      	cmp	r2, r3
 800b1d6:	d905      	bls.n	800b1e4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b1d8:	2301      	movs	r3, #1
 800b1da:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b1dc:	4b0a      	ldr	r3, [pc, #40]	; (800b208 <xTaskRemoveFromEventList+0xc4>)
 800b1de:	2201      	movs	r2, #1
 800b1e0:	601a      	str	r2, [r3, #0]
 800b1e2:	e001      	b.n	800b1e8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b1e8:	697b      	ldr	r3, [r7, #20]
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3718      	adds	r7, #24
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}
 800b1f2:	bf00      	nop
 800b1f4:	20000f3c 	.word	0x20000f3c
 800b1f8:	20000f1c 	.word	0x20000f1c
 800b1fc:	20000a44 	.word	0x20000a44
 800b200:	20000ed4 	.word	0x20000ed4
 800b204:	20000a40 	.word	0x20000a40
 800b208:	20000f28 	.word	0x20000f28

0800b20c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b20c:	b480      	push	{r7}
 800b20e:	b083      	sub	sp, #12
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b214:	4b06      	ldr	r3, [pc, #24]	; (800b230 <vTaskInternalSetTimeOutState+0x24>)
 800b216:	681a      	ldr	r2, [r3, #0]
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b21c:	4b05      	ldr	r3, [pc, #20]	; (800b234 <vTaskInternalSetTimeOutState+0x28>)
 800b21e:	681a      	ldr	r2, [r3, #0]
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	605a      	str	r2, [r3, #4]
}
 800b224:	bf00      	nop
 800b226:	370c      	adds	r7, #12
 800b228:	46bd      	mov	sp, r7
 800b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22e:	4770      	bx	lr
 800b230:	20000f2c 	.word	0x20000f2c
 800b234:	20000f18 	.word	0x20000f18

0800b238 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b088      	sub	sp, #32
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d10a      	bne.n	800b25e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b24c:	f383 8811 	msr	BASEPRI, r3
 800b250:	f3bf 8f6f 	isb	sy
 800b254:	f3bf 8f4f 	dsb	sy
 800b258:	613b      	str	r3, [r7, #16]
}
 800b25a:	bf00      	nop
 800b25c:	e7fe      	b.n	800b25c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d10a      	bne.n	800b27a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b264:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b268:	f383 8811 	msr	BASEPRI, r3
 800b26c:	f3bf 8f6f 	isb	sy
 800b270:	f3bf 8f4f 	dsb	sy
 800b274:	60fb      	str	r3, [r7, #12]
}
 800b276:	bf00      	nop
 800b278:	e7fe      	b.n	800b278 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b27a:	f000 fe83 	bl	800bf84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b27e:	4b1d      	ldr	r3, [pc, #116]	; (800b2f4 <xTaskCheckForTimeOut+0xbc>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	685b      	ldr	r3, [r3, #4]
 800b288:	69ba      	ldr	r2, [r7, #24]
 800b28a:	1ad3      	subs	r3, r2, r3
 800b28c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b296:	d102      	bne.n	800b29e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b298:	2300      	movs	r3, #0
 800b29a:	61fb      	str	r3, [r7, #28]
 800b29c:	e023      	b.n	800b2e6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681a      	ldr	r2, [r3, #0]
 800b2a2:	4b15      	ldr	r3, [pc, #84]	; (800b2f8 <xTaskCheckForTimeOut+0xc0>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	429a      	cmp	r2, r3
 800b2a8:	d007      	beq.n	800b2ba <xTaskCheckForTimeOut+0x82>
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	685b      	ldr	r3, [r3, #4]
 800b2ae:	69ba      	ldr	r2, [r7, #24]
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d302      	bcc.n	800b2ba <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	61fb      	str	r3, [r7, #28]
 800b2b8:	e015      	b.n	800b2e6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	697a      	ldr	r2, [r7, #20]
 800b2c0:	429a      	cmp	r2, r3
 800b2c2:	d20b      	bcs.n	800b2dc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	681a      	ldr	r2, [r3, #0]
 800b2c8:	697b      	ldr	r3, [r7, #20]
 800b2ca:	1ad2      	subs	r2, r2, r3
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f7ff ff9b 	bl	800b20c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	61fb      	str	r3, [r7, #28]
 800b2da:	e004      	b.n	800b2e6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b2e6:	f000 fe7d 	bl	800bfe4 <vPortExitCritical>

	return xReturn;
 800b2ea:	69fb      	ldr	r3, [r7, #28]
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	3720      	adds	r7, #32
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}
 800b2f4:	20000f18 	.word	0x20000f18
 800b2f8:	20000f2c 	.word	0x20000f2c

0800b2fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b300:	4b03      	ldr	r3, [pc, #12]	; (800b310 <vTaskMissedYield+0x14>)
 800b302:	2201      	movs	r2, #1
 800b304:	601a      	str	r2, [r3, #0]
}
 800b306:	bf00      	nop
 800b308:	46bd      	mov	sp, r7
 800b30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30e:	4770      	bx	lr
 800b310:	20000f28 	.word	0x20000f28

0800b314 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b082      	sub	sp, #8
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b31c:	f000 f852 	bl	800b3c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b320:	4b06      	ldr	r3, [pc, #24]	; (800b33c <prvIdleTask+0x28>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	2b01      	cmp	r3, #1
 800b326:	d9f9      	bls.n	800b31c <prvIdleTask+0x8>
			{
				taskYIELD();
 800b328:	4b05      	ldr	r3, [pc, #20]	; (800b340 <prvIdleTask+0x2c>)
 800b32a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b32e:	601a      	str	r2, [r3, #0]
 800b330:	f3bf 8f4f 	dsb	sy
 800b334:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b338:	e7f0      	b.n	800b31c <prvIdleTask+0x8>
 800b33a:	bf00      	nop
 800b33c:	20000a44 	.word	0x20000a44
 800b340:	e000ed04 	.word	0xe000ed04

0800b344 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b082      	sub	sp, #8
 800b348:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b34a:	2300      	movs	r3, #0
 800b34c:	607b      	str	r3, [r7, #4]
 800b34e:	e00c      	b.n	800b36a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b350:	687a      	ldr	r2, [r7, #4]
 800b352:	4613      	mov	r3, r2
 800b354:	009b      	lsls	r3, r3, #2
 800b356:	4413      	add	r3, r2
 800b358:	009b      	lsls	r3, r3, #2
 800b35a:	4a12      	ldr	r2, [pc, #72]	; (800b3a4 <prvInitialiseTaskLists+0x60>)
 800b35c:	4413      	add	r3, r2
 800b35e:	4618      	mov	r0, r3
 800b360:	f7fe fbd4 	bl	8009b0c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	3301      	adds	r3, #1
 800b368:	607b      	str	r3, [r7, #4]
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2b37      	cmp	r3, #55	; 0x37
 800b36e:	d9ef      	bls.n	800b350 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b370:	480d      	ldr	r0, [pc, #52]	; (800b3a8 <prvInitialiseTaskLists+0x64>)
 800b372:	f7fe fbcb 	bl	8009b0c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b376:	480d      	ldr	r0, [pc, #52]	; (800b3ac <prvInitialiseTaskLists+0x68>)
 800b378:	f7fe fbc8 	bl	8009b0c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b37c:	480c      	ldr	r0, [pc, #48]	; (800b3b0 <prvInitialiseTaskLists+0x6c>)
 800b37e:	f7fe fbc5 	bl	8009b0c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b382:	480c      	ldr	r0, [pc, #48]	; (800b3b4 <prvInitialiseTaskLists+0x70>)
 800b384:	f7fe fbc2 	bl	8009b0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b388:	480b      	ldr	r0, [pc, #44]	; (800b3b8 <prvInitialiseTaskLists+0x74>)
 800b38a:	f7fe fbbf 	bl	8009b0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b38e:	4b0b      	ldr	r3, [pc, #44]	; (800b3bc <prvInitialiseTaskLists+0x78>)
 800b390:	4a05      	ldr	r2, [pc, #20]	; (800b3a8 <prvInitialiseTaskLists+0x64>)
 800b392:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b394:	4b0a      	ldr	r3, [pc, #40]	; (800b3c0 <prvInitialiseTaskLists+0x7c>)
 800b396:	4a05      	ldr	r2, [pc, #20]	; (800b3ac <prvInitialiseTaskLists+0x68>)
 800b398:	601a      	str	r2, [r3, #0]
}
 800b39a:	bf00      	nop
 800b39c:	3708      	adds	r7, #8
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}
 800b3a2:	bf00      	nop
 800b3a4:	20000a44 	.word	0x20000a44
 800b3a8:	20000ea4 	.word	0x20000ea4
 800b3ac:	20000eb8 	.word	0x20000eb8
 800b3b0:	20000ed4 	.word	0x20000ed4
 800b3b4:	20000ee8 	.word	0x20000ee8
 800b3b8:	20000f00 	.word	0x20000f00
 800b3bc:	20000ecc 	.word	0x20000ecc
 800b3c0:	20000ed0 	.word	0x20000ed0

0800b3c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b082      	sub	sp, #8
 800b3c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b3ca:	e019      	b.n	800b400 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b3cc:	f000 fdda 	bl	800bf84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3d0:	4b10      	ldr	r3, [pc, #64]	; (800b414 <prvCheckTasksWaitingTermination+0x50>)
 800b3d2:	68db      	ldr	r3, [r3, #12]
 800b3d4:	68db      	ldr	r3, [r3, #12]
 800b3d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	3304      	adds	r3, #4
 800b3dc:	4618      	mov	r0, r3
 800b3de:	f7fe fc1f 	bl	8009c20 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b3e2:	4b0d      	ldr	r3, [pc, #52]	; (800b418 <prvCheckTasksWaitingTermination+0x54>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	3b01      	subs	r3, #1
 800b3e8:	4a0b      	ldr	r2, [pc, #44]	; (800b418 <prvCheckTasksWaitingTermination+0x54>)
 800b3ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b3ec:	4b0b      	ldr	r3, [pc, #44]	; (800b41c <prvCheckTasksWaitingTermination+0x58>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	3b01      	subs	r3, #1
 800b3f2:	4a0a      	ldr	r2, [pc, #40]	; (800b41c <prvCheckTasksWaitingTermination+0x58>)
 800b3f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b3f6:	f000 fdf5 	bl	800bfe4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f000 f810 	bl	800b420 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b400:	4b06      	ldr	r3, [pc, #24]	; (800b41c <prvCheckTasksWaitingTermination+0x58>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d1e1      	bne.n	800b3cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b408:	bf00      	nop
 800b40a:	bf00      	nop
 800b40c:	3708      	adds	r7, #8
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}
 800b412:	bf00      	nop
 800b414:	20000ee8 	.word	0x20000ee8
 800b418:	20000f14 	.word	0x20000f14
 800b41c:	20000efc 	.word	0x20000efc

0800b420 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b420:	b580      	push	{r7, lr}
 800b422:	b084      	sub	sp, #16
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	3354      	adds	r3, #84	; 0x54
 800b42c:	4618      	mov	r0, r3
 800b42e:	f001 fc7b 	bl	800cd28 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d108      	bne.n	800b44e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b440:	4618      	mov	r0, r3
 800b442:	f000 ff8d 	bl	800c360 <vPortFree>
				vPortFree( pxTCB );
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f000 ff8a 	bl	800c360 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b44c:	e018      	b.n	800b480 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b454:	2b01      	cmp	r3, #1
 800b456:	d103      	bne.n	800b460 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f000 ff81 	bl	800c360 <vPortFree>
	}
 800b45e:	e00f      	b.n	800b480 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b466:	2b02      	cmp	r3, #2
 800b468:	d00a      	beq.n	800b480 <prvDeleteTCB+0x60>
	__asm volatile
 800b46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b46e:	f383 8811 	msr	BASEPRI, r3
 800b472:	f3bf 8f6f 	isb	sy
 800b476:	f3bf 8f4f 	dsb	sy
 800b47a:	60fb      	str	r3, [r7, #12]
}
 800b47c:	bf00      	nop
 800b47e:	e7fe      	b.n	800b47e <prvDeleteTCB+0x5e>
	}
 800b480:	bf00      	nop
 800b482:	3710      	adds	r7, #16
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}

0800b488 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b488:	b480      	push	{r7}
 800b48a:	b083      	sub	sp, #12
 800b48c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b48e:	4b0c      	ldr	r3, [pc, #48]	; (800b4c0 <prvResetNextTaskUnblockTime+0x38>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d104      	bne.n	800b4a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b498:	4b0a      	ldr	r3, [pc, #40]	; (800b4c4 <prvResetNextTaskUnblockTime+0x3c>)
 800b49a:	f04f 32ff 	mov.w	r2, #4294967295
 800b49e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b4a0:	e008      	b.n	800b4b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4a2:	4b07      	ldr	r3, [pc, #28]	; (800b4c0 <prvResetNextTaskUnblockTime+0x38>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	68db      	ldr	r3, [r3, #12]
 800b4a8:	68db      	ldr	r3, [r3, #12]
 800b4aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	685b      	ldr	r3, [r3, #4]
 800b4b0:	4a04      	ldr	r2, [pc, #16]	; (800b4c4 <prvResetNextTaskUnblockTime+0x3c>)
 800b4b2:	6013      	str	r3, [r2, #0]
}
 800b4b4:	bf00      	nop
 800b4b6:	370c      	adds	r7, #12
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4be:	4770      	bx	lr
 800b4c0:	20000ecc 	.word	0x20000ecc
 800b4c4:	20000f34 	.word	0x20000f34

0800b4c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b083      	sub	sp, #12
 800b4cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b4ce:	4b0b      	ldr	r3, [pc, #44]	; (800b4fc <xTaskGetSchedulerState+0x34>)
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d102      	bne.n	800b4dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	607b      	str	r3, [r7, #4]
 800b4da:	e008      	b.n	800b4ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b4dc:	4b08      	ldr	r3, [pc, #32]	; (800b500 <xTaskGetSchedulerState+0x38>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d102      	bne.n	800b4ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b4e4:	2302      	movs	r3, #2
 800b4e6:	607b      	str	r3, [r7, #4]
 800b4e8:	e001      	b.n	800b4ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b4ee:	687b      	ldr	r3, [r7, #4]
	}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	370c      	adds	r7, #12
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fa:	4770      	bx	lr
 800b4fc:	20000f20 	.word	0x20000f20
 800b500:	20000f3c 	.word	0x20000f3c

0800b504 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b504:	b580      	push	{r7, lr}
 800b506:	b086      	sub	sp, #24
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b510:	2300      	movs	r3, #0
 800b512:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d056      	beq.n	800b5c8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b51a:	4b2e      	ldr	r3, [pc, #184]	; (800b5d4 <xTaskPriorityDisinherit+0xd0>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	693a      	ldr	r2, [r7, #16]
 800b520:	429a      	cmp	r2, r3
 800b522:	d00a      	beq.n	800b53a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b524:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b528:	f383 8811 	msr	BASEPRI, r3
 800b52c:	f3bf 8f6f 	isb	sy
 800b530:	f3bf 8f4f 	dsb	sy
 800b534:	60fb      	str	r3, [r7, #12]
}
 800b536:	bf00      	nop
 800b538:	e7fe      	b.n	800b538 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b53a:	693b      	ldr	r3, [r7, #16]
 800b53c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d10a      	bne.n	800b558 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b542:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b546:	f383 8811 	msr	BASEPRI, r3
 800b54a:	f3bf 8f6f 	isb	sy
 800b54e:	f3bf 8f4f 	dsb	sy
 800b552:	60bb      	str	r3, [r7, #8]
}
 800b554:	bf00      	nop
 800b556:	e7fe      	b.n	800b556 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b558:	693b      	ldr	r3, [r7, #16]
 800b55a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b55c:	1e5a      	subs	r2, r3, #1
 800b55e:	693b      	ldr	r3, [r7, #16]
 800b560:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b562:	693b      	ldr	r3, [r7, #16]
 800b564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b566:	693b      	ldr	r3, [r7, #16]
 800b568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b56a:	429a      	cmp	r2, r3
 800b56c:	d02c      	beq.n	800b5c8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b56e:	693b      	ldr	r3, [r7, #16]
 800b570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b572:	2b00      	cmp	r3, #0
 800b574:	d128      	bne.n	800b5c8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	3304      	adds	r3, #4
 800b57a:	4618      	mov	r0, r3
 800b57c:	f7fe fb50 	bl	8009c20 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b584:	693b      	ldr	r3, [r7, #16]
 800b586:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b588:	693b      	ldr	r3, [r7, #16]
 800b58a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b58c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b590:	693b      	ldr	r3, [r7, #16]
 800b592:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b594:	693b      	ldr	r3, [r7, #16]
 800b596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b598:	4b0f      	ldr	r3, [pc, #60]	; (800b5d8 <xTaskPriorityDisinherit+0xd4>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	429a      	cmp	r2, r3
 800b59e:	d903      	bls.n	800b5a8 <xTaskPriorityDisinherit+0xa4>
 800b5a0:	693b      	ldr	r3, [r7, #16]
 800b5a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5a4:	4a0c      	ldr	r2, [pc, #48]	; (800b5d8 <xTaskPriorityDisinherit+0xd4>)
 800b5a6:	6013      	str	r3, [r2, #0]
 800b5a8:	693b      	ldr	r3, [r7, #16]
 800b5aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5ac:	4613      	mov	r3, r2
 800b5ae:	009b      	lsls	r3, r3, #2
 800b5b0:	4413      	add	r3, r2
 800b5b2:	009b      	lsls	r3, r3, #2
 800b5b4:	4a09      	ldr	r2, [pc, #36]	; (800b5dc <xTaskPriorityDisinherit+0xd8>)
 800b5b6:	441a      	add	r2, r3
 800b5b8:	693b      	ldr	r3, [r7, #16]
 800b5ba:	3304      	adds	r3, #4
 800b5bc:	4619      	mov	r1, r3
 800b5be:	4610      	mov	r0, r2
 800b5c0:	f7fe fad1 	bl	8009b66 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b5c8:	697b      	ldr	r3, [r7, #20]
	}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	3718      	adds	r7, #24
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}
 800b5d2:	bf00      	nop
 800b5d4:	20000a40 	.word	0x20000a40
 800b5d8:	20000f1c 	.word	0x20000f1c
 800b5dc:	20000a44 	.word	0x20000a44

0800b5e0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b084      	sub	sp, #16
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
 800b5e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b5ea:	4b21      	ldr	r3, [pc, #132]	; (800b670 <prvAddCurrentTaskToDelayedList+0x90>)
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b5f0:	4b20      	ldr	r3, [pc, #128]	; (800b674 <prvAddCurrentTaskToDelayedList+0x94>)
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	3304      	adds	r3, #4
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f7fe fb12 	bl	8009c20 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b602:	d10a      	bne.n	800b61a <prvAddCurrentTaskToDelayedList+0x3a>
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d007      	beq.n	800b61a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b60a:	4b1a      	ldr	r3, [pc, #104]	; (800b674 <prvAddCurrentTaskToDelayedList+0x94>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	3304      	adds	r3, #4
 800b610:	4619      	mov	r1, r3
 800b612:	4819      	ldr	r0, [pc, #100]	; (800b678 <prvAddCurrentTaskToDelayedList+0x98>)
 800b614:	f7fe faa7 	bl	8009b66 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b618:	e026      	b.n	800b668 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b61a:	68fa      	ldr	r2, [r7, #12]
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	4413      	add	r3, r2
 800b620:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b622:	4b14      	ldr	r3, [pc, #80]	; (800b674 <prvAddCurrentTaskToDelayedList+0x94>)
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	68ba      	ldr	r2, [r7, #8]
 800b628:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b62a:	68ba      	ldr	r2, [r7, #8]
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	429a      	cmp	r2, r3
 800b630:	d209      	bcs.n	800b646 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b632:	4b12      	ldr	r3, [pc, #72]	; (800b67c <prvAddCurrentTaskToDelayedList+0x9c>)
 800b634:	681a      	ldr	r2, [r3, #0]
 800b636:	4b0f      	ldr	r3, [pc, #60]	; (800b674 <prvAddCurrentTaskToDelayedList+0x94>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	3304      	adds	r3, #4
 800b63c:	4619      	mov	r1, r3
 800b63e:	4610      	mov	r0, r2
 800b640:	f7fe fab5 	bl	8009bae <vListInsert>
}
 800b644:	e010      	b.n	800b668 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b646:	4b0e      	ldr	r3, [pc, #56]	; (800b680 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b648:	681a      	ldr	r2, [r3, #0]
 800b64a:	4b0a      	ldr	r3, [pc, #40]	; (800b674 <prvAddCurrentTaskToDelayedList+0x94>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	3304      	adds	r3, #4
 800b650:	4619      	mov	r1, r3
 800b652:	4610      	mov	r0, r2
 800b654:	f7fe faab 	bl	8009bae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b658:	4b0a      	ldr	r3, [pc, #40]	; (800b684 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	68ba      	ldr	r2, [r7, #8]
 800b65e:	429a      	cmp	r2, r3
 800b660:	d202      	bcs.n	800b668 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b662:	4a08      	ldr	r2, [pc, #32]	; (800b684 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	6013      	str	r3, [r2, #0]
}
 800b668:	bf00      	nop
 800b66a:	3710      	adds	r7, #16
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}
 800b670:	20000f18 	.word	0x20000f18
 800b674:	20000a40 	.word	0x20000a40
 800b678:	20000f00 	.word	0x20000f00
 800b67c:	20000ed0 	.word	0x20000ed0
 800b680:	20000ecc 	.word	0x20000ecc
 800b684:	20000f34 	.word	0x20000f34

0800b688 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b08a      	sub	sp, #40	; 0x28
 800b68c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b68e:	2300      	movs	r3, #0
 800b690:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b692:	f000 fb07 	bl	800bca4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b696:	4b1c      	ldr	r3, [pc, #112]	; (800b708 <xTimerCreateTimerTask+0x80>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d021      	beq.n	800b6e2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b6a6:	1d3a      	adds	r2, r7, #4
 800b6a8:	f107 0108 	add.w	r1, r7, #8
 800b6ac:	f107 030c 	add.w	r3, r7, #12
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	f7fe fa11 	bl	8009ad8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b6b6:	6879      	ldr	r1, [r7, #4]
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	68fa      	ldr	r2, [r7, #12]
 800b6bc:	9202      	str	r2, [sp, #8]
 800b6be:	9301      	str	r3, [sp, #4]
 800b6c0:	2302      	movs	r3, #2
 800b6c2:	9300      	str	r3, [sp, #0]
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	460a      	mov	r2, r1
 800b6c8:	4910      	ldr	r1, [pc, #64]	; (800b70c <xTimerCreateTimerTask+0x84>)
 800b6ca:	4811      	ldr	r0, [pc, #68]	; (800b710 <xTimerCreateTimerTask+0x88>)
 800b6cc:	f7ff f8b4 	bl	800a838 <xTaskCreateStatic>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	4a10      	ldr	r2, [pc, #64]	; (800b714 <xTimerCreateTimerTask+0x8c>)
 800b6d4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b6d6:	4b0f      	ldr	r3, [pc, #60]	; (800b714 <xTimerCreateTimerTask+0x8c>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d001      	beq.n	800b6e2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b6de:	2301      	movs	r3, #1
 800b6e0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b6e2:	697b      	ldr	r3, [r7, #20]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d10a      	bne.n	800b6fe <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ec:	f383 8811 	msr	BASEPRI, r3
 800b6f0:	f3bf 8f6f 	isb	sy
 800b6f4:	f3bf 8f4f 	dsb	sy
 800b6f8:	613b      	str	r3, [r7, #16]
}
 800b6fa:	bf00      	nop
 800b6fc:	e7fe      	b.n	800b6fc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b6fe:	697b      	ldr	r3, [r7, #20]
}
 800b700:	4618      	mov	r0, r3
 800b702:	3718      	adds	r7, #24
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}
 800b708:	20000f70 	.word	0x20000f70
 800b70c:	0800cf60 	.word	0x0800cf60
 800b710:	0800b84d 	.word	0x0800b84d
 800b714:	20000f74 	.word	0x20000f74

0800b718 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b08a      	sub	sp, #40	; 0x28
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	60f8      	str	r0, [r7, #12]
 800b720:	60b9      	str	r1, [r7, #8]
 800b722:	607a      	str	r2, [r7, #4]
 800b724:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b726:	2300      	movs	r3, #0
 800b728:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d10a      	bne.n	800b746 <xTimerGenericCommand+0x2e>
	__asm volatile
 800b730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b734:	f383 8811 	msr	BASEPRI, r3
 800b738:	f3bf 8f6f 	isb	sy
 800b73c:	f3bf 8f4f 	dsb	sy
 800b740:	623b      	str	r3, [r7, #32]
}
 800b742:	bf00      	nop
 800b744:	e7fe      	b.n	800b744 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b746:	4b1a      	ldr	r3, [pc, #104]	; (800b7b0 <xTimerGenericCommand+0x98>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d02a      	beq.n	800b7a4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	2b05      	cmp	r3, #5
 800b75e:	dc18      	bgt.n	800b792 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b760:	f7ff feb2 	bl	800b4c8 <xTaskGetSchedulerState>
 800b764:	4603      	mov	r3, r0
 800b766:	2b02      	cmp	r3, #2
 800b768:	d109      	bne.n	800b77e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b76a:	4b11      	ldr	r3, [pc, #68]	; (800b7b0 <xTimerGenericCommand+0x98>)
 800b76c:	6818      	ldr	r0, [r3, #0]
 800b76e:	f107 0110 	add.w	r1, r7, #16
 800b772:	2300      	movs	r3, #0
 800b774:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b776:	f7fe fbbb 	bl	8009ef0 <xQueueGenericSend>
 800b77a:	6278      	str	r0, [r7, #36]	; 0x24
 800b77c:	e012      	b.n	800b7a4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b77e:	4b0c      	ldr	r3, [pc, #48]	; (800b7b0 <xTimerGenericCommand+0x98>)
 800b780:	6818      	ldr	r0, [r3, #0]
 800b782:	f107 0110 	add.w	r1, r7, #16
 800b786:	2300      	movs	r3, #0
 800b788:	2200      	movs	r2, #0
 800b78a:	f7fe fbb1 	bl	8009ef0 <xQueueGenericSend>
 800b78e:	6278      	str	r0, [r7, #36]	; 0x24
 800b790:	e008      	b.n	800b7a4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b792:	4b07      	ldr	r3, [pc, #28]	; (800b7b0 <xTimerGenericCommand+0x98>)
 800b794:	6818      	ldr	r0, [r3, #0]
 800b796:	f107 0110 	add.w	r1, r7, #16
 800b79a:	2300      	movs	r3, #0
 800b79c:	683a      	ldr	r2, [r7, #0]
 800b79e:	f7fe fca5 	bl	800a0ec <xQueueGenericSendFromISR>
 800b7a2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	3728      	adds	r7, #40	; 0x28
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}
 800b7ae:	bf00      	nop
 800b7b0:	20000f70 	.word	0x20000f70

0800b7b4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b088      	sub	sp, #32
 800b7b8:	af02      	add	r7, sp, #8
 800b7ba:	6078      	str	r0, [r7, #4]
 800b7bc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7be:	4b22      	ldr	r3, [pc, #136]	; (800b848 <prvProcessExpiredTimer+0x94>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	68db      	ldr	r3, [r3, #12]
 800b7c4:	68db      	ldr	r3, [r3, #12]
 800b7c6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b7c8:	697b      	ldr	r3, [r7, #20]
 800b7ca:	3304      	adds	r3, #4
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f7fe fa27 	bl	8009c20 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b7d2:	697b      	ldr	r3, [r7, #20]
 800b7d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7d8:	f003 0304 	and.w	r3, r3, #4
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d022      	beq.n	800b826 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b7e0:	697b      	ldr	r3, [r7, #20]
 800b7e2:	699a      	ldr	r2, [r3, #24]
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	18d1      	adds	r1, r2, r3
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	683a      	ldr	r2, [r7, #0]
 800b7ec:	6978      	ldr	r0, [r7, #20]
 800b7ee:	f000 f8d1 	bl	800b994 <prvInsertTimerInActiveList>
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d01f      	beq.n	800b838 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	9300      	str	r3, [sp, #0]
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	687a      	ldr	r2, [r7, #4]
 800b800:	2100      	movs	r1, #0
 800b802:	6978      	ldr	r0, [r7, #20]
 800b804:	f7ff ff88 	bl	800b718 <xTimerGenericCommand>
 800b808:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b80a:	693b      	ldr	r3, [r7, #16]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d113      	bne.n	800b838 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b810:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b814:	f383 8811 	msr	BASEPRI, r3
 800b818:	f3bf 8f6f 	isb	sy
 800b81c:	f3bf 8f4f 	dsb	sy
 800b820:	60fb      	str	r3, [r7, #12]
}
 800b822:	bf00      	nop
 800b824:	e7fe      	b.n	800b824 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b82c:	f023 0301 	bic.w	r3, r3, #1
 800b830:	b2da      	uxtb	r2, r3
 800b832:	697b      	ldr	r3, [r7, #20]
 800b834:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b838:	697b      	ldr	r3, [r7, #20]
 800b83a:	6a1b      	ldr	r3, [r3, #32]
 800b83c:	6978      	ldr	r0, [r7, #20]
 800b83e:	4798      	blx	r3
}
 800b840:	bf00      	nop
 800b842:	3718      	adds	r7, #24
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}
 800b848:	20000f68 	.word	0x20000f68

0800b84c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b084      	sub	sp, #16
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b854:	f107 0308 	add.w	r3, r7, #8
 800b858:	4618      	mov	r0, r3
 800b85a:	f000 f857 	bl	800b90c <prvGetNextExpireTime>
 800b85e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b860:	68bb      	ldr	r3, [r7, #8]
 800b862:	4619      	mov	r1, r3
 800b864:	68f8      	ldr	r0, [r7, #12]
 800b866:	f000 f803 	bl	800b870 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b86a:	f000 f8d5 	bl	800ba18 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b86e:	e7f1      	b.n	800b854 <prvTimerTask+0x8>

0800b870 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b084      	sub	sp, #16
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
 800b878:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b87a:	f7ff fa39 	bl	800acf0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b87e:	f107 0308 	add.w	r3, r7, #8
 800b882:	4618      	mov	r0, r3
 800b884:	f000 f866 	bl	800b954 <prvSampleTimeNow>
 800b888:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d130      	bne.n	800b8f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d10a      	bne.n	800b8ac <prvProcessTimerOrBlockTask+0x3c>
 800b896:	687a      	ldr	r2, [r7, #4]
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	429a      	cmp	r2, r3
 800b89c:	d806      	bhi.n	800b8ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b89e:	f7ff fa35 	bl	800ad0c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b8a2:	68f9      	ldr	r1, [r7, #12]
 800b8a4:	6878      	ldr	r0, [r7, #4]
 800b8a6:	f7ff ff85 	bl	800b7b4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b8aa:	e024      	b.n	800b8f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d008      	beq.n	800b8c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b8b2:	4b13      	ldr	r3, [pc, #76]	; (800b900 <prvProcessTimerOrBlockTask+0x90>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d101      	bne.n	800b8c0 <prvProcessTimerOrBlockTask+0x50>
 800b8bc:	2301      	movs	r3, #1
 800b8be:	e000      	b.n	800b8c2 <prvProcessTimerOrBlockTask+0x52>
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b8c4:	4b0f      	ldr	r3, [pc, #60]	; (800b904 <prvProcessTimerOrBlockTask+0x94>)
 800b8c6:	6818      	ldr	r0, [r3, #0]
 800b8c8:	687a      	ldr	r2, [r7, #4]
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	1ad3      	subs	r3, r2, r3
 800b8ce:	683a      	ldr	r2, [r7, #0]
 800b8d0:	4619      	mov	r1, r3
 800b8d2:	f7fe ff7d 	bl	800a7d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b8d6:	f7ff fa19 	bl	800ad0c <xTaskResumeAll>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d10a      	bne.n	800b8f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b8e0:	4b09      	ldr	r3, [pc, #36]	; (800b908 <prvProcessTimerOrBlockTask+0x98>)
 800b8e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8e6:	601a      	str	r2, [r3, #0]
 800b8e8:	f3bf 8f4f 	dsb	sy
 800b8ec:	f3bf 8f6f 	isb	sy
}
 800b8f0:	e001      	b.n	800b8f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b8f2:	f7ff fa0b 	bl	800ad0c <xTaskResumeAll>
}
 800b8f6:	bf00      	nop
 800b8f8:	3710      	adds	r7, #16
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}
 800b8fe:	bf00      	nop
 800b900:	20000f6c 	.word	0x20000f6c
 800b904:	20000f70 	.word	0x20000f70
 800b908:	e000ed04 	.word	0xe000ed04

0800b90c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b90c:	b480      	push	{r7}
 800b90e:	b085      	sub	sp, #20
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b914:	4b0e      	ldr	r3, [pc, #56]	; (800b950 <prvGetNextExpireTime+0x44>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d101      	bne.n	800b922 <prvGetNextExpireTime+0x16>
 800b91e:	2201      	movs	r2, #1
 800b920:	e000      	b.n	800b924 <prvGetNextExpireTime+0x18>
 800b922:	2200      	movs	r2, #0
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d105      	bne.n	800b93c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b930:	4b07      	ldr	r3, [pc, #28]	; (800b950 <prvGetNextExpireTime+0x44>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	68db      	ldr	r3, [r3, #12]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	60fb      	str	r3, [r7, #12]
 800b93a:	e001      	b.n	800b940 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b93c:	2300      	movs	r3, #0
 800b93e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b940:	68fb      	ldr	r3, [r7, #12]
}
 800b942:	4618      	mov	r0, r3
 800b944:	3714      	adds	r7, #20
 800b946:	46bd      	mov	sp, r7
 800b948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94c:	4770      	bx	lr
 800b94e:	bf00      	nop
 800b950:	20000f68 	.word	0x20000f68

0800b954 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b084      	sub	sp, #16
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b95c:	f7ff fa74 	bl	800ae48 <xTaskGetTickCount>
 800b960:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b962:	4b0b      	ldr	r3, [pc, #44]	; (800b990 <prvSampleTimeNow+0x3c>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	68fa      	ldr	r2, [r7, #12]
 800b968:	429a      	cmp	r2, r3
 800b96a:	d205      	bcs.n	800b978 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b96c:	f000 f936 	bl	800bbdc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2201      	movs	r2, #1
 800b974:	601a      	str	r2, [r3, #0]
 800b976:	e002      	b.n	800b97e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2200      	movs	r2, #0
 800b97c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b97e:	4a04      	ldr	r2, [pc, #16]	; (800b990 <prvSampleTimeNow+0x3c>)
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b984:	68fb      	ldr	r3, [r7, #12]
}
 800b986:	4618      	mov	r0, r3
 800b988:	3710      	adds	r7, #16
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}
 800b98e:	bf00      	nop
 800b990:	20000f78 	.word	0x20000f78

0800b994 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b086      	sub	sp, #24
 800b998:	af00      	add	r7, sp, #0
 800b99a:	60f8      	str	r0, [r7, #12]
 800b99c:	60b9      	str	r1, [r7, #8]
 800b99e:	607a      	str	r2, [r7, #4]
 800b9a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	68ba      	ldr	r2, [r7, #8]
 800b9aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	68fa      	ldr	r2, [r7, #12]
 800b9b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b9b2:	68ba      	ldr	r2, [r7, #8]
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	429a      	cmp	r2, r3
 800b9b8:	d812      	bhi.n	800b9e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9ba:	687a      	ldr	r2, [r7, #4]
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	1ad2      	subs	r2, r2, r3
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	699b      	ldr	r3, [r3, #24]
 800b9c4:	429a      	cmp	r2, r3
 800b9c6:	d302      	bcc.n	800b9ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b9c8:	2301      	movs	r3, #1
 800b9ca:	617b      	str	r3, [r7, #20]
 800b9cc:	e01b      	b.n	800ba06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b9ce:	4b10      	ldr	r3, [pc, #64]	; (800ba10 <prvInsertTimerInActiveList+0x7c>)
 800b9d0:	681a      	ldr	r2, [r3, #0]
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	3304      	adds	r3, #4
 800b9d6:	4619      	mov	r1, r3
 800b9d8:	4610      	mov	r0, r2
 800b9da:	f7fe f8e8 	bl	8009bae <vListInsert>
 800b9de:	e012      	b.n	800ba06 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b9e0:	687a      	ldr	r2, [r7, #4]
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	429a      	cmp	r2, r3
 800b9e6:	d206      	bcs.n	800b9f6 <prvInsertTimerInActiveList+0x62>
 800b9e8:	68ba      	ldr	r2, [r7, #8]
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	429a      	cmp	r2, r3
 800b9ee:	d302      	bcc.n	800b9f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b9f0:	2301      	movs	r3, #1
 800b9f2:	617b      	str	r3, [r7, #20]
 800b9f4:	e007      	b.n	800ba06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b9f6:	4b07      	ldr	r3, [pc, #28]	; (800ba14 <prvInsertTimerInActiveList+0x80>)
 800b9f8:	681a      	ldr	r2, [r3, #0]
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	3304      	adds	r3, #4
 800b9fe:	4619      	mov	r1, r3
 800ba00:	4610      	mov	r0, r2
 800ba02:	f7fe f8d4 	bl	8009bae <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ba06:	697b      	ldr	r3, [r7, #20]
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	3718      	adds	r7, #24
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}
 800ba10:	20000f6c 	.word	0x20000f6c
 800ba14:	20000f68 	.word	0x20000f68

0800ba18 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b08e      	sub	sp, #56	; 0x38
 800ba1c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ba1e:	e0ca      	b.n	800bbb6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	da18      	bge.n	800ba58 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ba26:	1d3b      	adds	r3, r7, #4
 800ba28:	3304      	adds	r3, #4
 800ba2a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ba2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d10a      	bne.n	800ba48 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ba32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba36:	f383 8811 	msr	BASEPRI, r3
 800ba3a:	f3bf 8f6f 	isb	sy
 800ba3e:	f3bf 8f4f 	dsb	sy
 800ba42:	61fb      	str	r3, [r7, #28]
}
 800ba44:	bf00      	nop
 800ba46:	e7fe      	b.n	800ba46 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ba48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba4e:	6850      	ldr	r0, [r2, #4]
 800ba50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba52:	6892      	ldr	r2, [r2, #8]
 800ba54:	4611      	mov	r1, r2
 800ba56:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	f2c0 80ab 	blt.w	800bbb6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ba64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba66:	695b      	ldr	r3, [r3, #20]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d004      	beq.n	800ba76 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ba6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba6e:	3304      	adds	r3, #4
 800ba70:	4618      	mov	r0, r3
 800ba72:	f7fe f8d5 	bl	8009c20 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ba76:	463b      	mov	r3, r7
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f7ff ff6b 	bl	800b954 <prvSampleTimeNow>
 800ba7e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2b09      	cmp	r3, #9
 800ba84:	f200 8096 	bhi.w	800bbb4 <prvProcessReceivedCommands+0x19c>
 800ba88:	a201      	add	r2, pc, #4	; (adr r2, 800ba90 <prvProcessReceivedCommands+0x78>)
 800ba8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba8e:	bf00      	nop
 800ba90:	0800bab9 	.word	0x0800bab9
 800ba94:	0800bab9 	.word	0x0800bab9
 800ba98:	0800bab9 	.word	0x0800bab9
 800ba9c:	0800bb2d 	.word	0x0800bb2d
 800baa0:	0800bb41 	.word	0x0800bb41
 800baa4:	0800bb8b 	.word	0x0800bb8b
 800baa8:	0800bab9 	.word	0x0800bab9
 800baac:	0800bab9 	.word	0x0800bab9
 800bab0:	0800bb2d 	.word	0x0800bb2d
 800bab4:	0800bb41 	.word	0x0800bb41
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800babe:	f043 0301 	orr.w	r3, r3, #1
 800bac2:	b2da      	uxtb	r2, r3
 800bac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bac6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800baca:	68ba      	ldr	r2, [r7, #8]
 800bacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bace:	699b      	ldr	r3, [r3, #24]
 800bad0:	18d1      	adds	r1, r2, r3
 800bad2:	68bb      	ldr	r3, [r7, #8]
 800bad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bad6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bad8:	f7ff ff5c 	bl	800b994 <prvInsertTimerInActiveList>
 800badc:	4603      	mov	r3, r0
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d069      	beq.n	800bbb6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae4:	6a1b      	ldr	r3, [r3, #32]
 800bae6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bae8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800baea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800baf0:	f003 0304 	and.w	r3, r3, #4
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d05e      	beq.n	800bbb6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800baf8:	68ba      	ldr	r2, [r7, #8]
 800bafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bafc:	699b      	ldr	r3, [r3, #24]
 800bafe:	441a      	add	r2, r3
 800bb00:	2300      	movs	r3, #0
 800bb02:	9300      	str	r3, [sp, #0]
 800bb04:	2300      	movs	r3, #0
 800bb06:	2100      	movs	r1, #0
 800bb08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb0a:	f7ff fe05 	bl	800b718 <xTimerGenericCommand>
 800bb0e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bb10:	6a3b      	ldr	r3, [r7, #32]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d14f      	bne.n	800bbb6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800bb16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb1a:	f383 8811 	msr	BASEPRI, r3
 800bb1e:	f3bf 8f6f 	isb	sy
 800bb22:	f3bf 8f4f 	dsb	sy
 800bb26:	61bb      	str	r3, [r7, #24]
}
 800bb28:	bf00      	nop
 800bb2a:	e7fe      	b.n	800bb2a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bb2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb32:	f023 0301 	bic.w	r3, r3, #1
 800bb36:	b2da      	uxtb	r2, r3
 800bb38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bb3e:	e03a      	b.n	800bbb6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bb40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb46:	f043 0301 	orr.w	r3, r3, #1
 800bb4a:	b2da      	uxtb	r2, r3
 800bb4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bb52:	68ba      	ldr	r2, [r7, #8]
 800bb54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb56:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bb58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb5a:	699b      	ldr	r3, [r3, #24]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d10a      	bne.n	800bb76 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800bb60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb64:	f383 8811 	msr	BASEPRI, r3
 800bb68:	f3bf 8f6f 	isb	sy
 800bb6c:	f3bf 8f4f 	dsb	sy
 800bb70:	617b      	str	r3, [r7, #20]
}
 800bb72:	bf00      	nop
 800bb74:	e7fe      	b.n	800bb74 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bb76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb78:	699a      	ldr	r2, [r3, #24]
 800bb7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb7c:	18d1      	adds	r1, r2, r3
 800bb7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb84:	f7ff ff06 	bl	800b994 <prvInsertTimerInActiveList>
					break;
 800bb88:	e015      	b.n	800bbb6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bb8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb90:	f003 0302 	and.w	r3, r3, #2
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d103      	bne.n	800bba0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800bb98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb9a:	f000 fbe1 	bl	800c360 <vPortFree>
 800bb9e:	e00a      	b.n	800bbb6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bba6:	f023 0301 	bic.w	r3, r3, #1
 800bbaa:	b2da      	uxtb	r2, r3
 800bbac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bbb2:	e000      	b.n	800bbb6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800bbb4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bbb6:	4b08      	ldr	r3, [pc, #32]	; (800bbd8 <prvProcessReceivedCommands+0x1c0>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	1d39      	adds	r1, r7, #4
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f7fe fb30 	bl	800a224 <xQueueReceive>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	f47f af2a 	bne.w	800ba20 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bbcc:	bf00      	nop
 800bbce:	bf00      	nop
 800bbd0:	3730      	adds	r7, #48	; 0x30
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}
 800bbd6:	bf00      	nop
 800bbd8:	20000f70 	.word	0x20000f70

0800bbdc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b088      	sub	sp, #32
 800bbe0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bbe2:	e048      	b.n	800bc76 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bbe4:	4b2d      	ldr	r3, [pc, #180]	; (800bc9c <prvSwitchTimerLists+0xc0>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	68db      	ldr	r3, [r3, #12]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbee:	4b2b      	ldr	r3, [pc, #172]	; (800bc9c <prvSwitchTimerLists+0xc0>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	68db      	ldr	r3, [r3, #12]
 800bbf4:	68db      	ldr	r3, [r3, #12]
 800bbf6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	3304      	adds	r3, #4
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	f7fe f80f 	bl	8009c20 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	6a1b      	ldr	r3, [r3, #32]
 800bc06:	68f8      	ldr	r0, [r7, #12]
 800bc08:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc10:	f003 0304 	and.w	r3, r3, #4
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d02e      	beq.n	800bc76 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	699b      	ldr	r3, [r3, #24]
 800bc1c:	693a      	ldr	r2, [r7, #16]
 800bc1e:	4413      	add	r3, r2
 800bc20:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bc22:	68ba      	ldr	r2, [r7, #8]
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	429a      	cmp	r2, r3
 800bc28:	d90e      	bls.n	800bc48 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	68ba      	ldr	r2, [r7, #8]
 800bc2e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	68fa      	ldr	r2, [r7, #12]
 800bc34:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bc36:	4b19      	ldr	r3, [pc, #100]	; (800bc9c <prvSwitchTimerLists+0xc0>)
 800bc38:	681a      	ldr	r2, [r3, #0]
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	3304      	adds	r3, #4
 800bc3e:	4619      	mov	r1, r3
 800bc40:	4610      	mov	r0, r2
 800bc42:	f7fd ffb4 	bl	8009bae <vListInsert>
 800bc46:	e016      	b.n	800bc76 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bc48:	2300      	movs	r3, #0
 800bc4a:	9300      	str	r3, [sp, #0]
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	693a      	ldr	r2, [r7, #16]
 800bc50:	2100      	movs	r1, #0
 800bc52:	68f8      	ldr	r0, [r7, #12]
 800bc54:	f7ff fd60 	bl	800b718 <xTimerGenericCommand>
 800bc58:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d10a      	bne.n	800bc76 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800bc60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc64:	f383 8811 	msr	BASEPRI, r3
 800bc68:	f3bf 8f6f 	isb	sy
 800bc6c:	f3bf 8f4f 	dsb	sy
 800bc70:	603b      	str	r3, [r7, #0]
}
 800bc72:	bf00      	nop
 800bc74:	e7fe      	b.n	800bc74 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bc76:	4b09      	ldr	r3, [pc, #36]	; (800bc9c <prvSwitchTimerLists+0xc0>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d1b1      	bne.n	800bbe4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bc80:	4b06      	ldr	r3, [pc, #24]	; (800bc9c <prvSwitchTimerLists+0xc0>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bc86:	4b06      	ldr	r3, [pc, #24]	; (800bca0 <prvSwitchTimerLists+0xc4>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	4a04      	ldr	r2, [pc, #16]	; (800bc9c <prvSwitchTimerLists+0xc0>)
 800bc8c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bc8e:	4a04      	ldr	r2, [pc, #16]	; (800bca0 <prvSwitchTimerLists+0xc4>)
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	6013      	str	r3, [r2, #0]
}
 800bc94:	bf00      	nop
 800bc96:	3718      	adds	r7, #24
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}
 800bc9c:	20000f68 	.word	0x20000f68
 800bca0:	20000f6c 	.word	0x20000f6c

0800bca4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b082      	sub	sp, #8
 800bca8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bcaa:	f000 f96b 	bl	800bf84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bcae:	4b15      	ldr	r3, [pc, #84]	; (800bd04 <prvCheckForValidListAndQueue+0x60>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d120      	bne.n	800bcf8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bcb6:	4814      	ldr	r0, [pc, #80]	; (800bd08 <prvCheckForValidListAndQueue+0x64>)
 800bcb8:	f7fd ff28 	bl	8009b0c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bcbc:	4813      	ldr	r0, [pc, #76]	; (800bd0c <prvCheckForValidListAndQueue+0x68>)
 800bcbe:	f7fd ff25 	bl	8009b0c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bcc2:	4b13      	ldr	r3, [pc, #76]	; (800bd10 <prvCheckForValidListAndQueue+0x6c>)
 800bcc4:	4a10      	ldr	r2, [pc, #64]	; (800bd08 <prvCheckForValidListAndQueue+0x64>)
 800bcc6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bcc8:	4b12      	ldr	r3, [pc, #72]	; (800bd14 <prvCheckForValidListAndQueue+0x70>)
 800bcca:	4a10      	ldr	r2, [pc, #64]	; (800bd0c <prvCheckForValidListAndQueue+0x68>)
 800bccc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bcce:	2300      	movs	r3, #0
 800bcd0:	9300      	str	r3, [sp, #0]
 800bcd2:	4b11      	ldr	r3, [pc, #68]	; (800bd18 <prvCheckForValidListAndQueue+0x74>)
 800bcd4:	4a11      	ldr	r2, [pc, #68]	; (800bd1c <prvCheckForValidListAndQueue+0x78>)
 800bcd6:	2110      	movs	r1, #16
 800bcd8:	200a      	movs	r0, #10
 800bcda:	f7fe f833 	bl	8009d44 <xQueueGenericCreateStatic>
 800bcde:	4603      	mov	r3, r0
 800bce0:	4a08      	ldr	r2, [pc, #32]	; (800bd04 <prvCheckForValidListAndQueue+0x60>)
 800bce2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bce4:	4b07      	ldr	r3, [pc, #28]	; (800bd04 <prvCheckForValidListAndQueue+0x60>)
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d005      	beq.n	800bcf8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bcec:	4b05      	ldr	r3, [pc, #20]	; (800bd04 <prvCheckForValidListAndQueue+0x60>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	490b      	ldr	r1, [pc, #44]	; (800bd20 <prvCheckForValidListAndQueue+0x7c>)
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f7fe fd42 	bl	800a77c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bcf8:	f000 f974 	bl	800bfe4 <vPortExitCritical>
}
 800bcfc:	bf00      	nop
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}
 800bd02:	bf00      	nop
 800bd04:	20000f70 	.word	0x20000f70
 800bd08:	20000f40 	.word	0x20000f40
 800bd0c:	20000f54 	.word	0x20000f54
 800bd10:	20000f68 	.word	0x20000f68
 800bd14:	20000f6c 	.word	0x20000f6c
 800bd18:	2000101c 	.word	0x2000101c
 800bd1c:	20000f7c 	.word	0x20000f7c
 800bd20:	0800cf68 	.word	0x0800cf68

0800bd24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bd24:	b480      	push	{r7}
 800bd26:	b085      	sub	sp, #20
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	60f8      	str	r0, [r7, #12]
 800bd2c:	60b9      	str	r1, [r7, #8]
 800bd2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	3b04      	subs	r3, #4
 800bd34:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bd3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	3b04      	subs	r3, #4
 800bd42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bd44:	68bb      	ldr	r3, [r7, #8]
 800bd46:	f023 0201 	bic.w	r2, r3, #1
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	3b04      	subs	r3, #4
 800bd52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bd54:	4a0c      	ldr	r2, [pc, #48]	; (800bd88 <pxPortInitialiseStack+0x64>)
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	3b14      	subs	r3, #20
 800bd5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bd60:	687a      	ldr	r2, [r7, #4]
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	3b04      	subs	r3, #4
 800bd6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	f06f 0202 	mvn.w	r2, #2
 800bd72:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	3b20      	subs	r3, #32
 800bd78:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	3714      	adds	r7, #20
 800bd80:	46bd      	mov	sp, r7
 800bd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd86:	4770      	bx	lr
 800bd88:	0800bd8d 	.word	0x0800bd8d

0800bd8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	b085      	sub	sp, #20
 800bd90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bd92:	2300      	movs	r3, #0
 800bd94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bd96:	4b12      	ldr	r3, [pc, #72]	; (800bde0 <prvTaskExitError+0x54>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd9e:	d00a      	beq.n	800bdb6 <prvTaskExitError+0x2a>
	__asm volatile
 800bda0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda4:	f383 8811 	msr	BASEPRI, r3
 800bda8:	f3bf 8f6f 	isb	sy
 800bdac:	f3bf 8f4f 	dsb	sy
 800bdb0:	60fb      	str	r3, [r7, #12]
}
 800bdb2:	bf00      	nop
 800bdb4:	e7fe      	b.n	800bdb4 <prvTaskExitError+0x28>
	__asm volatile
 800bdb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdba:	f383 8811 	msr	BASEPRI, r3
 800bdbe:	f3bf 8f6f 	isb	sy
 800bdc2:	f3bf 8f4f 	dsb	sy
 800bdc6:	60bb      	str	r3, [r7, #8]
}
 800bdc8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bdca:	bf00      	nop
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d0fc      	beq.n	800bdcc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bdd2:	bf00      	nop
 800bdd4:	bf00      	nop
 800bdd6:	3714      	adds	r7, #20
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdde:	4770      	bx	lr
 800bde0:	2000002c 	.word	0x2000002c
	...

0800bdf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bdf0:	4b07      	ldr	r3, [pc, #28]	; (800be10 <pxCurrentTCBConst2>)
 800bdf2:	6819      	ldr	r1, [r3, #0]
 800bdf4:	6808      	ldr	r0, [r1, #0]
 800bdf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdfa:	f380 8809 	msr	PSP, r0
 800bdfe:	f3bf 8f6f 	isb	sy
 800be02:	f04f 0000 	mov.w	r0, #0
 800be06:	f380 8811 	msr	BASEPRI, r0
 800be0a:	4770      	bx	lr
 800be0c:	f3af 8000 	nop.w

0800be10 <pxCurrentTCBConst2>:
 800be10:	20000a40 	.word	0x20000a40
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800be14:	bf00      	nop
 800be16:	bf00      	nop

0800be18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800be18:	4808      	ldr	r0, [pc, #32]	; (800be3c <prvPortStartFirstTask+0x24>)
 800be1a:	6800      	ldr	r0, [r0, #0]
 800be1c:	6800      	ldr	r0, [r0, #0]
 800be1e:	f380 8808 	msr	MSP, r0
 800be22:	f04f 0000 	mov.w	r0, #0
 800be26:	f380 8814 	msr	CONTROL, r0
 800be2a:	b662      	cpsie	i
 800be2c:	b661      	cpsie	f
 800be2e:	f3bf 8f4f 	dsb	sy
 800be32:	f3bf 8f6f 	isb	sy
 800be36:	df00      	svc	0
 800be38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800be3a:	bf00      	nop
 800be3c:	e000ed08 	.word	0xe000ed08

0800be40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b086      	sub	sp, #24
 800be44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800be46:	4b46      	ldr	r3, [pc, #280]	; (800bf60 <xPortStartScheduler+0x120>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	4a46      	ldr	r2, [pc, #280]	; (800bf64 <xPortStartScheduler+0x124>)
 800be4c:	4293      	cmp	r3, r2
 800be4e:	d10a      	bne.n	800be66 <xPortStartScheduler+0x26>
	__asm volatile
 800be50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be54:	f383 8811 	msr	BASEPRI, r3
 800be58:	f3bf 8f6f 	isb	sy
 800be5c:	f3bf 8f4f 	dsb	sy
 800be60:	613b      	str	r3, [r7, #16]
}
 800be62:	bf00      	nop
 800be64:	e7fe      	b.n	800be64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800be66:	4b3e      	ldr	r3, [pc, #248]	; (800bf60 <xPortStartScheduler+0x120>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	4a3f      	ldr	r2, [pc, #252]	; (800bf68 <xPortStartScheduler+0x128>)
 800be6c:	4293      	cmp	r3, r2
 800be6e:	d10a      	bne.n	800be86 <xPortStartScheduler+0x46>
	__asm volatile
 800be70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be74:	f383 8811 	msr	BASEPRI, r3
 800be78:	f3bf 8f6f 	isb	sy
 800be7c:	f3bf 8f4f 	dsb	sy
 800be80:	60fb      	str	r3, [r7, #12]
}
 800be82:	bf00      	nop
 800be84:	e7fe      	b.n	800be84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800be86:	4b39      	ldr	r3, [pc, #228]	; (800bf6c <xPortStartScheduler+0x12c>)
 800be88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800be8a:	697b      	ldr	r3, [r7, #20]
 800be8c:	781b      	ldrb	r3, [r3, #0]
 800be8e:	b2db      	uxtb	r3, r3
 800be90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800be92:	697b      	ldr	r3, [r7, #20]
 800be94:	22ff      	movs	r2, #255	; 0xff
 800be96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800be98:	697b      	ldr	r3, [r7, #20]
 800be9a:	781b      	ldrb	r3, [r3, #0]
 800be9c:	b2db      	uxtb	r3, r3
 800be9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bea0:	78fb      	ldrb	r3, [r7, #3]
 800bea2:	b2db      	uxtb	r3, r3
 800bea4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bea8:	b2da      	uxtb	r2, r3
 800beaa:	4b31      	ldr	r3, [pc, #196]	; (800bf70 <xPortStartScheduler+0x130>)
 800beac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800beae:	4b31      	ldr	r3, [pc, #196]	; (800bf74 <xPortStartScheduler+0x134>)
 800beb0:	2207      	movs	r2, #7
 800beb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800beb4:	e009      	b.n	800beca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800beb6:	4b2f      	ldr	r3, [pc, #188]	; (800bf74 <xPortStartScheduler+0x134>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	3b01      	subs	r3, #1
 800bebc:	4a2d      	ldr	r2, [pc, #180]	; (800bf74 <xPortStartScheduler+0x134>)
 800bebe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bec0:	78fb      	ldrb	r3, [r7, #3]
 800bec2:	b2db      	uxtb	r3, r3
 800bec4:	005b      	lsls	r3, r3, #1
 800bec6:	b2db      	uxtb	r3, r3
 800bec8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800beca:	78fb      	ldrb	r3, [r7, #3]
 800becc:	b2db      	uxtb	r3, r3
 800bece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bed2:	2b80      	cmp	r3, #128	; 0x80
 800bed4:	d0ef      	beq.n	800beb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bed6:	4b27      	ldr	r3, [pc, #156]	; (800bf74 <xPortStartScheduler+0x134>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	f1c3 0307 	rsb	r3, r3, #7
 800bede:	2b04      	cmp	r3, #4
 800bee0:	d00a      	beq.n	800bef8 <xPortStartScheduler+0xb8>
	__asm volatile
 800bee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bee6:	f383 8811 	msr	BASEPRI, r3
 800beea:	f3bf 8f6f 	isb	sy
 800beee:	f3bf 8f4f 	dsb	sy
 800bef2:	60bb      	str	r3, [r7, #8]
}
 800bef4:	bf00      	nop
 800bef6:	e7fe      	b.n	800bef6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bef8:	4b1e      	ldr	r3, [pc, #120]	; (800bf74 <xPortStartScheduler+0x134>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	021b      	lsls	r3, r3, #8
 800befe:	4a1d      	ldr	r2, [pc, #116]	; (800bf74 <xPortStartScheduler+0x134>)
 800bf00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bf02:	4b1c      	ldr	r3, [pc, #112]	; (800bf74 <xPortStartScheduler+0x134>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bf0a:	4a1a      	ldr	r2, [pc, #104]	; (800bf74 <xPortStartScheduler+0x134>)
 800bf0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	b2da      	uxtb	r2, r3
 800bf12:	697b      	ldr	r3, [r7, #20]
 800bf14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bf16:	4b18      	ldr	r3, [pc, #96]	; (800bf78 <xPortStartScheduler+0x138>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	4a17      	ldr	r2, [pc, #92]	; (800bf78 <xPortStartScheduler+0x138>)
 800bf1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bf20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bf22:	4b15      	ldr	r3, [pc, #84]	; (800bf78 <xPortStartScheduler+0x138>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	4a14      	ldr	r2, [pc, #80]	; (800bf78 <xPortStartScheduler+0x138>)
 800bf28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bf2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bf2e:	f000 f8dd 	bl	800c0ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bf32:	4b12      	ldr	r3, [pc, #72]	; (800bf7c <xPortStartScheduler+0x13c>)
 800bf34:	2200      	movs	r2, #0
 800bf36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bf38:	f000 f8fc 	bl	800c134 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bf3c:	4b10      	ldr	r3, [pc, #64]	; (800bf80 <xPortStartScheduler+0x140>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	4a0f      	ldr	r2, [pc, #60]	; (800bf80 <xPortStartScheduler+0x140>)
 800bf42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bf46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bf48:	f7ff ff66 	bl	800be18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bf4c:	f7ff f846 	bl	800afdc <vTaskSwitchContext>
	prvTaskExitError();
 800bf50:	f7ff ff1c 	bl	800bd8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bf54:	2300      	movs	r3, #0
}
 800bf56:	4618      	mov	r0, r3
 800bf58:	3718      	adds	r7, #24
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd80      	pop	{r7, pc}
 800bf5e:	bf00      	nop
 800bf60:	e000ed00 	.word	0xe000ed00
 800bf64:	410fc271 	.word	0x410fc271
 800bf68:	410fc270 	.word	0x410fc270
 800bf6c:	e000e400 	.word	0xe000e400
 800bf70:	2000106c 	.word	0x2000106c
 800bf74:	20001070 	.word	0x20001070
 800bf78:	e000ed20 	.word	0xe000ed20
 800bf7c:	2000002c 	.word	0x2000002c
 800bf80:	e000ef34 	.word	0xe000ef34

0800bf84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bf84:	b480      	push	{r7}
 800bf86:	b083      	sub	sp, #12
 800bf88:	af00      	add	r7, sp, #0
	__asm volatile
 800bf8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf8e:	f383 8811 	msr	BASEPRI, r3
 800bf92:	f3bf 8f6f 	isb	sy
 800bf96:	f3bf 8f4f 	dsb	sy
 800bf9a:	607b      	str	r3, [r7, #4]
}
 800bf9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bf9e:	4b0f      	ldr	r3, [pc, #60]	; (800bfdc <vPortEnterCritical+0x58>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	3301      	adds	r3, #1
 800bfa4:	4a0d      	ldr	r2, [pc, #52]	; (800bfdc <vPortEnterCritical+0x58>)
 800bfa6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bfa8:	4b0c      	ldr	r3, [pc, #48]	; (800bfdc <vPortEnterCritical+0x58>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	2b01      	cmp	r3, #1
 800bfae:	d10f      	bne.n	800bfd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bfb0:	4b0b      	ldr	r3, [pc, #44]	; (800bfe0 <vPortEnterCritical+0x5c>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	b2db      	uxtb	r3, r3
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d00a      	beq.n	800bfd0 <vPortEnterCritical+0x4c>
	__asm volatile
 800bfba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfbe:	f383 8811 	msr	BASEPRI, r3
 800bfc2:	f3bf 8f6f 	isb	sy
 800bfc6:	f3bf 8f4f 	dsb	sy
 800bfca:	603b      	str	r3, [r7, #0]
}
 800bfcc:	bf00      	nop
 800bfce:	e7fe      	b.n	800bfce <vPortEnterCritical+0x4a>
	}
}
 800bfd0:	bf00      	nop
 800bfd2:	370c      	adds	r7, #12
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfda:	4770      	bx	lr
 800bfdc:	2000002c 	.word	0x2000002c
 800bfe0:	e000ed04 	.word	0xe000ed04

0800bfe4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bfe4:	b480      	push	{r7}
 800bfe6:	b083      	sub	sp, #12
 800bfe8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bfea:	4b12      	ldr	r3, [pc, #72]	; (800c034 <vPortExitCritical+0x50>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d10a      	bne.n	800c008 <vPortExitCritical+0x24>
	__asm volatile
 800bff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff6:	f383 8811 	msr	BASEPRI, r3
 800bffa:	f3bf 8f6f 	isb	sy
 800bffe:	f3bf 8f4f 	dsb	sy
 800c002:	607b      	str	r3, [r7, #4]
}
 800c004:	bf00      	nop
 800c006:	e7fe      	b.n	800c006 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c008:	4b0a      	ldr	r3, [pc, #40]	; (800c034 <vPortExitCritical+0x50>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	3b01      	subs	r3, #1
 800c00e:	4a09      	ldr	r2, [pc, #36]	; (800c034 <vPortExitCritical+0x50>)
 800c010:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c012:	4b08      	ldr	r3, [pc, #32]	; (800c034 <vPortExitCritical+0x50>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d105      	bne.n	800c026 <vPortExitCritical+0x42>
 800c01a:	2300      	movs	r3, #0
 800c01c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	f383 8811 	msr	BASEPRI, r3
}
 800c024:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c026:	bf00      	nop
 800c028:	370c      	adds	r7, #12
 800c02a:	46bd      	mov	sp, r7
 800c02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c030:	4770      	bx	lr
 800c032:	bf00      	nop
 800c034:	2000002c 	.word	0x2000002c
	...

0800c040 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c040:	f3ef 8009 	mrs	r0, PSP
 800c044:	f3bf 8f6f 	isb	sy
 800c048:	4b15      	ldr	r3, [pc, #84]	; (800c0a0 <pxCurrentTCBConst>)
 800c04a:	681a      	ldr	r2, [r3, #0]
 800c04c:	f01e 0f10 	tst.w	lr, #16
 800c050:	bf08      	it	eq
 800c052:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c056:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c05a:	6010      	str	r0, [r2, #0]
 800c05c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c060:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c064:	f380 8811 	msr	BASEPRI, r0
 800c068:	f3bf 8f4f 	dsb	sy
 800c06c:	f3bf 8f6f 	isb	sy
 800c070:	f7fe ffb4 	bl	800afdc <vTaskSwitchContext>
 800c074:	f04f 0000 	mov.w	r0, #0
 800c078:	f380 8811 	msr	BASEPRI, r0
 800c07c:	bc09      	pop	{r0, r3}
 800c07e:	6819      	ldr	r1, [r3, #0]
 800c080:	6808      	ldr	r0, [r1, #0]
 800c082:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c086:	f01e 0f10 	tst.w	lr, #16
 800c08a:	bf08      	it	eq
 800c08c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c090:	f380 8809 	msr	PSP, r0
 800c094:	f3bf 8f6f 	isb	sy
 800c098:	4770      	bx	lr
 800c09a:	bf00      	nop
 800c09c:	f3af 8000 	nop.w

0800c0a0 <pxCurrentTCBConst>:
 800c0a0:	20000a40 	.word	0x20000a40
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c0a4:	bf00      	nop
 800c0a6:	bf00      	nop

0800c0a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b082      	sub	sp, #8
 800c0ac:	af00      	add	r7, sp, #0
	__asm volatile
 800c0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0b2:	f383 8811 	msr	BASEPRI, r3
 800c0b6:	f3bf 8f6f 	isb	sy
 800c0ba:	f3bf 8f4f 	dsb	sy
 800c0be:	607b      	str	r3, [r7, #4]
}
 800c0c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c0c2:	f7fe fed1 	bl	800ae68 <xTaskIncrementTick>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d003      	beq.n	800c0d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c0cc:	4b06      	ldr	r3, [pc, #24]	; (800c0e8 <xPortSysTickHandler+0x40>)
 800c0ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0d2:	601a      	str	r2, [r3, #0]
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	f383 8811 	msr	BASEPRI, r3
}
 800c0de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c0e0:	bf00      	nop
 800c0e2:	3708      	adds	r7, #8
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd80      	pop	{r7, pc}
 800c0e8:	e000ed04 	.word	0xe000ed04

0800c0ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c0ec:	b480      	push	{r7}
 800c0ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c0f0:	4b0b      	ldr	r3, [pc, #44]	; (800c120 <vPortSetupTimerInterrupt+0x34>)
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c0f6:	4b0b      	ldr	r3, [pc, #44]	; (800c124 <vPortSetupTimerInterrupt+0x38>)
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c0fc:	4b0a      	ldr	r3, [pc, #40]	; (800c128 <vPortSetupTimerInterrupt+0x3c>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	4a0a      	ldr	r2, [pc, #40]	; (800c12c <vPortSetupTimerInterrupt+0x40>)
 800c102:	fba2 2303 	umull	r2, r3, r2, r3
 800c106:	099b      	lsrs	r3, r3, #6
 800c108:	4a09      	ldr	r2, [pc, #36]	; (800c130 <vPortSetupTimerInterrupt+0x44>)
 800c10a:	3b01      	subs	r3, #1
 800c10c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c10e:	4b04      	ldr	r3, [pc, #16]	; (800c120 <vPortSetupTimerInterrupt+0x34>)
 800c110:	2207      	movs	r2, #7
 800c112:	601a      	str	r2, [r3, #0]
}
 800c114:	bf00      	nop
 800c116:	46bd      	mov	sp, r7
 800c118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11c:	4770      	bx	lr
 800c11e:	bf00      	nop
 800c120:	e000e010 	.word	0xe000e010
 800c124:	e000e018 	.word	0xe000e018
 800c128:	20000000 	.word	0x20000000
 800c12c:	10624dd3 	.word	0x10624dd3
 800c130:	e000e014 	.word	0xe000e014

0800c134 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c134:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c144 <vPortEnableVFP+0x10>
 800c138:	6801      	ldr	r1, [r0, #0]
 800c13a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c13e:	6001      	str	r1, [r0, #0]
 800c140:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c142:	bf00      	nop
 800c144:	e000ed88 	.word	0xe000ed88

0800c148 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c148:	b480      	push	{r7}
 800c14a:	b085      	sub	sp, #20
 800c14c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c14e:	f3ef 8305 	mrs	r3, IPSR
 800c152:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	2b0f      	cmp	r3, #15
 800c158:	d914      	bls.n	800c184 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c15a:	4a17      	ldr	r2, [pc, #92]	; (800c1b8 <vPortValidateInterruptPriority+0x70>)
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	4413      	add	r3, r2
 800c160:	781b      	ldrb	r3, [r3, #0]
 800c162:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c164:	4b15      	ldr	r3, [pc, #84]	; (800c1bc <vPortValidateInterruptPriority+0x74>)
 800c166:	781b      	ldrb	r3, [r3, #0]
 800c168:	7afa      	ldrb	r2, [r7, #11]
 800c16a:	429a      	cmp	r2, r3
 800c16c:	d20a      	bcs.n	800c184 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c172:	f383 8811 	msr	BASEPRI, r3
 800c176:	f3bf 8f6f 	isb	sy
 800c17a:	f3bf 8f4f 	dsb	sy
 800c17e:	607b      	str	r3, [r7, #4]
}
 800c180:	bf00      	nop
 800c182:	e7fe      	b.n	800c182 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c184:	4b0e      	ldr	r3, [pc, #56]	; (800c1c0 <vPortValidateInterruptPriority+0x78>)
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c18c:	4b0d      	ldr	r3, [pc, #52]	; (800c1c4 <vPortValidateInterruptPriority+0x7c>)
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	429a      	cmp	r2, r3
 800c192:	d90a      	bls.n	800c1aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c198:	f383 8811 	msr	BASEPRI, r3
 800c19c:	f3bf 8f6f 	isb	sy
 800c1a0:	f3bf 8f4f 	dsb	sy
 800c1a4:	603b      	str	r3, [r7, #0]
}
 800c1a6:	bf00      	nop
 800c1a8:	e7fe      	b.n	800c1a8 <vPortValidateInterruptPriority+0x60>
	}
 800c1aa:	bf00      	nop
 800c1ac:	3714      	adds	r7, #20
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b4:	4770      	bx	lr
 800c1b6:	bf00      	nop
 800c1b8:	e000e3f0 	.word	0xe000e3f0
 800c1bc:	2000106c 	.word	0x2000106c
 800c1c0:	e000ed0c 	.word	0xe000ed0c
 800c1c4:	20001070 	.word	0x20001070

0800c1c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b08a      	sub	sp, #40	; 0x28
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c1d4:	f7fe fd8c 	bl	800acf0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c1d8:	4b5b      	ldr	r3, [pc, #364]	; (800c348 <pvPortMalloc+0x180>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d101      	bne.n	800c1e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c1e0:	f000 f920 	bl	800c424 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c1e4:	4b59      	ldr	r3, [pc, #356]	; (800c34c <pvPortMalloc+0x184>)
 800c1e6:	681a      	ldr	r2, [r3, #0]
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	4013      	ands	r3, r2
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	f040 8093 	bne.w	800c318 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d01d      	beq.n	800c234 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c1f8:	2208      	movs	r2, #8
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	4413      	add	r3, r2
 800c1fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f003 0307 	and.w	r3, r3, #7
 800c206:	2b00      	cmp	r3, #0
 800c208:	d014      	beq.n	800c234 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f023 0307 	bic.w	r3, r3, #7
 800c210:	3308      	adds	r3, #8
 800c212:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f003 0307 	and.w	r3, r3, #7
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d00a      	beq.n	800c234 <pvPortMalloc+0x6c>
	__asm volatile
 800c21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c222:	f383 8811 	msr	BASEPRI, r3
 800c226:	f3bf 8f6f 	isb	sy
 800c22a:	f3bf 8f4f 	dsb	sy
 800c22e:	617b      	str	r3, [r7, #20]
}
 800c230:	bf00      	nop
 800c232:	e7fe      	b.n	800c232 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d06e      	beq.n	800c318 <pvPortMalloc+0x150>
 800c23a:	4b45      	ldr	r3, [pc, #276]	; (800c350 <pvPortMalloc+0x188>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	687a      	ldr	r2, [r7, #4]
 800c240:	429a      	cmp	r2, r3
 800c242:	d869      	bhi.n	800c318 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c244:	4b43      	ldr	r3, [pc, #268]	; (800c354 <pvPortMalloc+0x18c>)
 800c246:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c248:	4b42      	ldr	r3, [pc, #264]	; (800c354 <pvPortMalloc+0x18c>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c24e:	e004      	b.n	800c25a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c252:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c25c:	685b      	ldr	r3, [r3, #4]
 800c25e:	687a      	ldr	r2, [r7, #4]
 800c260:	429a      	cmp	r2, r3
 800c262:	d903      	bls.n	800c26c <pvPortMalloc+0xa4>
 800c264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d1f1      	bne.n	800c250 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c26c:	4b36      	ldr	r3, [pc, #216]	; (800c348 <pvPortMalloc+0x180>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c272:	429a      	cmp	r2, r3
 800c274:	d050      	beq.n	800c318 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c276:	6a3b      	ldr	r3, [r7, #32]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	2208      	movs	r2, #8
 800c27c:	4413      	add	r3, r2
 800c27e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c282:	681a      	ldr	r2, [r3, #0]
 800c284:	6a3b      	ldr	r3, [r7, #32]
 800c286:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c28a:	685a      	ldr	r2, [r3, #4]
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	1ad2      	subs	r2, r2, r3
 800c290:	2308      	movs	r3, #8
 800c292:	005b      	lsls	r3, r3, #1
 800c294:	429a      	cmp	r2, r3
 800c296:	d91f      	bls.n	800c2d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	4413      	add	r3, r2
 800c29e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c2a0:	69bb      	ldr	r3, [r7, #24]
 800c2a2:	f003 0307 	and.w	r3, r3, #7
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d00a      	beq.n	800c2c0 <pvPortMalloc+0xf8>
	__asm volatile
 800c2aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ae:	f383 8811 	msr	BASEPRI, r3
 800c2b2:	f3bf 8f6f 	isb	sy
 800c2b6:	f3bf 8f4f 	dsb	sy
 800c2ba:	613b      	str	r3, [r7, #16]
}
 800c2bc:	bf00      	nop
 800c2be:	e7fe      	b.n	800c2be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2c2:	685a      	ldr	r2, [r3, #4]
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	1ad2      	subs	r2, r2, r3
 800c2c8:	69bb      	ldr	r3, [r7, #24]
 800c2ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ce:	687a      	ldr	r2, [r7, #4]
 800c2d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c2d2:	69b8      	ldr	r0, [r7, #24]
 800c2d4:	f000 f908 	bl	800c4e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c2d8:	4b1d      	ldr	r3, [pc, #116]	; (800c350 <pvPortMalloc+0x188>)
 800c2da:	681a      	ldr	r2, [r3, #0]
 800c2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2de:	685b      	ldr	r3, [r3, #4]
 800c2e0:	1ad3      	subs	r3, r2, r3
 800c2e2:	4a1b      	ldr	r2, [pc, #108]	; (800c350 <pvPortMalloc+0x188>)
 800c2e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c2e6:	4b1a      	ldr	r3, [pc, #104]	; (800c350 <pvPortMalloc+0x188>)
 800c2e8:	681a      	ldr	r2, [r3, #0]
 800c2ea:	4b1b      	ldr	r3, [pc, #108]	; (800c358 <pvPortMalloc+0x190>)
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	429a      	cmp	r2, r3
 800c2f0:	d203      	bcs.n	800c2fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c2f2:	4b17      	ldr	r3, [pc, #92]	; (800c350 <pvPortMalloc+0x188>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	4a18      	ldr	r2, [pc, #96]	; (800c358 <pvPortMalloc+0x190>)
 800c2f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2fc:	685a      	ldr	r2, [r3, #4]
 800c2fe:	4b13      	ldr	r3, [pc, #76]	; (800c34c <pvPortMalloc+0x184>)
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	431a      	orrs	r2, r3
 800c304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c306:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c30a:	2200      	movs	r2, #0
 800c30c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c30e:	4b13      	ldr	r3, [pc, #76]	; (800c35c <pvPortMalloc+0x194>)
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	3301      	adds	r3, #1
 800c314:	4a11      	ldr	r2, [pc, #68]	; (800c35c <pvPortMalloc+0x194>)
 800c316:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c318:	f7fe fcf8 	bl	800ad0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c31c:	69fb      	ldr	r3, [r7, #28]
 800c31e:	f003 0307 	and.w	r3, r3, #7
 800c322:	2b00      	cmp	r3, #0
 800c324:	d00a      	beq.n	800c33c <pvPortMalloc+0x174>
	__asm volatile
 800c326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c32a:	f383 8811 	msr	BASEPRI, r3
 800c32e:	f3bf 8f6f 	isb	sy
 800c332:	f3bf 8f4f 	dsb	sy
 800c336:	60fb      	str	r3, [r7, #12]
}
 800c338:	bf00      	nop
 800c33a:	e7fe      	b.n	800c33a <pvPortMalloc+0x172>
	return pvReturn;
 800c33c:	69fb      	ldr	r3, [r7, #28]
}
 800c33e:	4618      	mov	r0, r3
 800c340:	3728      	adds	r7, #40	; 0x28
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}
 800c346:	bf00      	nop
 800c348:	20004c7c 	.word	0x20004c7c
 800c34c:	20004c90 	.word	0x20004c90
 800c350:	20004c80 	.word	0x20004c80
 800c354:	20004c74 	.word	0x20004c74
 800c358:	20004c84 	.word	0x20004c84
 800c35c:	20004c88 	.word	0x20004c88

0800c360 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b086      	sub	sp, #24
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d04d      	beq.n	800c40e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c372:	2308      	movs	r3, #8
 800c374:	425b      	negs	r3, r3
 800c376:	697a      	ldr	r2, [r7, #20]
 800c378:	4413      	add	r3, r2
 800c37a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c37c:	697b      	ldr	r3, [r7, #20]
 800c37e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c380:	693b      	ldr	r3, [r7, #16]
 800c382:	685a      	ldr	r2, [r3, #4]
 800c384:	4b24      	ldr	r3, [pc, #144]	; (800c418 <vPortFree+0xb8>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	4013      	ands	r3, r2
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d10a      	bne.n	800c3a4 <vPortFree+0x44>
	__asm volatile
 800c38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c392:	f383 8811 	msr	BASEPRI, r3
 800c396:	f3bf 8f6f 	isb	sy
 800c39a:	f3bf 8f4f 	dsb	sy
 800c39e:	60fb      	str	r3, [r7, #12]
}
 800c3a0:	bf00      	nop
 800c3a2:	e7fe      	b.n	800c3a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c3a4:	693b      	ldr	r3, [r7, #16]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d00a      	beq.n	800c3c2 <vPortFree+0x62>
	__asm volatile
 800c3ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3b0:	f383 8811 	msr	BASEPRI, r3
 800c3b4:	f3bf 8f6f 	isb	sy
 800c3b8:	f3bf 8f4f 	dsb	sy
 800c3bc:	60bb      	str	r3, [r7, #8]
}
 800c3be:	bf00      	nop
 800c3c0:	e7fe      	b.n	800c3c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c3c2:	693b      	ldr	r3, [r7, #16]
 800c3c4:	685a      	ldr	r2, [r3, #4]
 800c3c6:	4b14      	ldr	r3, [pc, #80]	; (800c418 <vPortFree+0xb8>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	4013      	ands	r3, r2
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d01e      	beq.n	800c40e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c3d0:	693b      	ldr	r3, [r7, #16]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d11a      	bne.n	800c40e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c3d8:	693b      	ldr	r3, [r7, #16]
 800c3da:	685a      	ldr	r2, [r3, #4]
 800c3dc:	4b0e      	ldr	r3, [pc, #56]	; (800c418 <vPortFree+0xb8>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	43db      	mvns	r3, r3
 800c3e2:	401a      	ands	r2, r3
 800c3e4:	693b      	ldr	r3, [r7, #16]
 800c3e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c3e8:	f7fe fc82 	bl	800acf0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c3ec:	693b      	ldr	r3, [r7, #16]
 800c3ee:	685a      	ldr	r2, [r3, #4]
 800c3f0:	4b0a      	ldr	r3, [pc, #40]	; (800c41c <vPortFree+0xbc>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	4413      	add	r3, r2
 800c3f6:	4a09      	ldr	r2, [pc, #36]	; (800c41c <vPortFree+0xbc>)
 800c3f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c3fa:	6938      	ldr	r0, [r7, #16]
 800c3fc:	f000 f874 	bl	800c4e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c400:	4b07      	ldr	r3, [pc, #28]	; (800c420 <vPortFree+0xc0>)
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	3301      	adds	r3, #1
 800c406:	4a06      	ldr	r2, [pc, #24]	; (800c420 <vPortFree+0xc0>)
 800c408:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c40a:	f7fe fc7f 	bl	800ad0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c40e:	bf00      	nop
 800c410:	3718      	adds	r7, #24
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}
 800c416:	bf00      	nop
 800c418:	20004c90 	.word	0x20004c90
 800c41c:	20004c80 	.word	0x20004c80
 800c420:	20004c8c 	.word	0x20004c8c

0800c424 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c424:	b480      	push	{r7}
 800c426:	b085      	sub	sp, #20
 800c428:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c42a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c42e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c430:	4b27      	ldr	r3, [pc, #156]	; (800c4d0 <prvHeapInit+0xac>)
 800c432:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	f003 0307 	and.w	r3, r3, #7
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d00c      	beq.n	800c458 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	3307      	adds	r3, #7
 800c442:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	f023 0307 	bic.w	r3, r3, #7
 800c44a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c44c:	68ba      	ldr	r2, [r7, #8]
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	1ad3      	subs	r3, r2, r3
 800c452:	4a1f      	ldr	r2, [pc, #124]	; (800c4d0 <prvHeapInit+0xac>)
 800c454:	4413      	add	r3, r2
 800c456:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c45c:	4a1d      	ldr	r2, [pc, #116]	; (800c4d4 <prvHeapInit+0xb0>)
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c462:	4b1c      	ldr	r3, [pc, #112]	; (800c4d4 <prvHeapInit+0xb0>)
 800c464:	2200      	movs	r2, #0
 800c466:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	68ba      	ldr	r2, [r7, #8]
 800c46c:	4413      	add	r3, r2
 800c46e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c470:	2208      	movs	r2, #8
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	1a9b      	subs	r3, r3, r2
 800c476:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	f023 0307 	bic.w	r3, r3, #7
 800c47e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	4a15      	ldr	r2, [pc, #84]	; (800c4d8 <prvHeapInit+0xb4>)
 800c484:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c486:	4b14      	ldr	r3, [pc, #80]	; (800c4d8 <prvHeapInit+0xb4>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	2200      	movs	r2, #0
 800c48c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c48e:	4b12      	ldr	r3, [pc, #72]	; (800c4d8 <prvHeapInit+0xb4>)
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	2200      	movs	r2, #0
 800c494:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	68fa      	ldr	r2, [r7, #12]
 800c49e:	1ad2      	subs	r2, r2, r3
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c4a4:	4b0c      	ldr	r3, [pc, #48]	; (800c4d8 <prvHeapInit+0xb4>)
 800c4a6:	681a      	ldr	r2, [r3, #0]
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	685b      	ldr	r3, [r3, #4]
 800c4b0:	4a0a      	ldr	r2, [pc, #40]	; (800c4dc <prvHeapInit+0xb8>)
 800c4b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c4b4:	683b      	ldr	r3, [r7, #0]
 800c4b6:	685b      	ldr	r3, [r3, #4]
 800c4b8:	4a09      	ldr	r2, [pc, #36]	; (800c4e0 <prvHeapInit+0xbc>)
 800c4ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c4bc:	4b09      	ldr	r3, [pc, #36]	; (800c4e4 <prvHeapInit+0xc0>)
 800c4be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c4c2:	601a      	str	r2, [r3, #0]
}
 800c4c4:	bf00      	nop
 800c4c6:	3714      	adds	r7, #20
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ce:	4770      	bx	lr
 800c4d0:	20001074 	.word	0x20001074
 800c4d4:	20004c74 	.word	0x20004c74
 800c4d8:	20004c7c 	.word	0x20004c7c
 800c4dc:	20004c84 	.word	0x20004c84
 800c4e0:	20004c80 	.word	0x20004c80
 800c4e4:	20004c90 	.word	0x20004c90

0800c4e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c4e8:	b480      	push	{r7}
 800c4ea:	b085      	sub	sp, #20
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c4f0:	4b28      	ldr	r3, [pc, #160]	; (800c594 <prvInsertBlockIntoFreeList+0xac>)
 800c4f2:	60fb      	str	r3, [r7, #12]
 800c4f4:	e002      	b.n	800c4fc <prvInsertBlockIntoFreeList+0x14>
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	60fb      	str	r3, [r7, #12]
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	687a      	ldr	r2, [r7, #4]
 800c502:	429a      	cmp	r2, r3
 800c504:	d8f7      	bhi.n	800c4f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	685b      	ldr	r3, [r3, #4]
 800c50e:	68ba      	ldr	r2, [r7, #8]
 800c510:	4413      	add	r3, r2
 800c512:	687a      	ldr	r2, [r7, #4]
 800c514:	429a      	cmp	r2, r3
 800c516:	d108      	bne.n	800c52a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	685a      	ldr	r2, [r3, #4]
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	685b      	ldr	r3, [r3, #4]
 800c520:	441a      	add	r2, r3
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	685b      	ldr	r3, [r3, #4]
 800c532:	68ba      	ldr	r2, [r7, #8]
 800c534:	441a      	add	r2, r3
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	429a      	cmp	r2, r3
 800c53c:	d118      	bne.n	800c570 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	681a      	ldr	r2, [r3, #0]
 800c542:	4b15      	ldr	r3, [pc, #84]	; (800c598 <prvInsertBlockIntoFreeList+0xb0>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	429a      	cmp	r2, r3
 800c548:	d00d      	beq.n	800c566 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	685a      	ldr	r2, [r3, #4]
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	685b      	ldr	r3, [r3, #4]
 800c554:	441a      	add	r2, r3
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	681a      	ldr	r2, [r3, #0]
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	601a      	str	r2, [r3, #0]
 800c564:	e008      	b.n	800c578 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c566:	4b0c      	ldr	r3, [pc, #48]	; (800c598 <prvInsertBlockIntoFreeList+0xb0>)
 800c568:	681a      	ldr	r2, [r3, #0]
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	601a      	str	r2, [r3, #0]
 800c56e:	e003      	b.n	800c578 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	681a      	ldr	r2, [r3, #0]
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c578:	68fa      	ldr	r2, [r7, #12]
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	429a      	cmp	r2, r3
 800c57e:	d002      	beq.n	800c586 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	687a      	ldr	r2, [r7, #4]
 800c584:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c586:	bf00      	nop
 800c588:	3714      	adds	r7, #20
 800c58a:	46bd      	mov	sp, r7
 800c58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c590:	4770      	bx	lr
 800c592:	bf00      	nop
 800c594:	20004c74 	.word	0x20004c74
 800c598:	20004c7c 	.word	0x20004c7c

0800c59c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800c5a0:	2201      	movs	r2, #1
 800c5a2:	490e      	ldr	r1, [pc, #56]	; (800c5dc <MX_USB_HOST_Init+0x40>)
 800c5a4:	480e      	ldr	r0, [pc, #56]	; (800c5e0 <MX_USB_HOST_Init+0x44>)
 800c5a6:	f7fb f96f 	bl	8007888 <USBH_Init>
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d001      	beq.n	800c5b4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c5b0:	f7f4 fb4e 	bl	8000c50 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800c5b4:	490b      	ldr	r1, [pc, #44]	; (800c5e4 <MX_USB_HOST_Init+0x48>)
 800c5b6:	480a      	ldr	r0, [pc, #40]	; (800c5e0 <MX_USB_HOST_Init+0x44>)
 800c5b8:	f7fb fa16 	bl	80079e8 <USBH_RegisterClass>
 800c5bc:	4603      	mov	r3, r0
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d001      	beq.n	800c5c6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c5c2:	f7f4 fb45 	bl	8000c50 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800c5c6:	4806      	ldr	r0, [pc, #24]	; (800c5e0 <MX_USB_HOST_Init+0x44>)
 800c5c8:	f7fb fa9a 	bl	8007b00 <USBH_Start>
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d001      	beq.n	800c5d6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c5d2:	f7f4 fb3d 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c5d6:	bf00      	nop
 800c5d8:	bd80      	pop	{r7, pc}
 800c5da:	bf00      	nop
 800c5dc:	0800c5e9 	.word	0x0800c5e9
 800c5e0:	20004c94 	.word	0x20004c94
 800c5e4:	2000000c 	.word	0x2000000c

0800c5e8 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c5e8:	b480      	push	{r7}
 800c5ea:	b083      	sub	sp, #12
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
 800c5f0:	460b      	mov	r3, r1
 800c5f2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c5f4:	78fb      	ldrb	r3, [r7, #3]
 800c5f6:	3b01      	subs	r3, #1
 800c5f8:	2b04      	cmp	r3, #4
 800c5fa:	d819      	bhi.n	800c630 <USBH_UserProcess+0x48>
 800c5fc:	a201      	add	r2, pc, #4	; (adr r2, 800c604 <USBH_UserProcess+0x1c>)
 800c5fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c602:	bf00      	nop
 800c604:	0800c631 	.word	0x0800c631
 800c608:	0800c621 	.word	0x0800c621
 800c60c:	0800c631 	.word	0x0800c631
 800c610:	0800c629 	.word	0x0800c629
 800c614:	0800c619 	.word	0x0800c619
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c618:	4b09      	ldr	r3, [pc, #36]	; (800c640 <USBH_UserProcess+0x58>)
 800c61a:	2203      	movs	r2, #3
 800c61c:	701a      	strb	r2, [r3, #0]
  break;
 800c61e:	e008      	b.n	800c632 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c620:	4b07      	ldr	r3, [pc, #28]	; (800c640 <USBH_UserProcess+0x58>)
 800c622:	2202      	movs	r2, #2
 800c624:	701a      	strb	r2, [r3, #0]
  break;
 800c626:	e004      	b.n	800c632 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c628:	4b05      	ldr	r3, [pc, #20]	; (800c640 <USBH_UserProcess+0x58>)
 800c62a:	2201      	movs	r2, #1
 800c62c:	701a      	strb	r2, [r3, #0]
  break;
 800c62e:	e000      	b.n	800c632 <USBH_UserProcess+0x4a>

  default:
  break;
 800c630:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c632:	bf00      	nop
 800c634:	370c      	adds	r7, #12
 800c636:	46bd      	mov	sp, r7
 800c638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63c:	4770      	bx	lr
 800c63e:	bf00      	nop
 800c640:	20005078 	.word	0x20005078

0800c644 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b08a      	sub	sp, #40	; 0x28
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c64c:	f107 0314 	add.w	r3, r7, #20
 800c650:	2200      	movs	r2, #0
 800c652:	601a      	str	r2, [r3, #0]
 800c654:	605a      	str	r2, [r3, #4]
 800c656:	609a      	str	r2, [r3, #8]
 800c658:	60da      	str	r2, [r3, #12]
 800c65a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c664:	d147      	bne.n	800c6f6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c666:	2300      	movs	r3, #0
 800c668:	613b      	str	r3, [r7, #16]
 800c66a:	4b25      	ldr	r3, [pc, #148]	; (800c700 <HAL_HCD_MspInit+0xbc>)
 800c66c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c66e:	4a24      	ldr	r2, [pc, #144]	; (800c700 <HAL_HCD_MspInit+0xbc>)
 800c670:	f043 0301 	orr.w	r3, r3, #1
 800c674:	6313      	str	r3, [r2, #48]	; 0x30
 800c676:	4b22      	ldr	r3, [pc, #136]	; (800c700 <HAL_HCD_MspInit+0xbc>)
 800c678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c67a:	f003 0301 	and.w	r3, r3, #1
 800c67e:	613b      	str	r3, [r7, #16]
 800c680:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800c682:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c686:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c688:	2300      	movs	r3, #0
 800c68a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c68c:	2300      	movs	r3, #0
 800c68e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800c690:	f107 0314 	add.w	r3, r7, #20
 800c694:	4619      	mov	r1, r3
 800c696:	481b      	ldr	r0, [pc, #108]	; (800c704 <HAL_HCD_MspInit+0xc0>)
 800c698:	f7f5 fa58 	bl	8001b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800c69c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800c6a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c6a2:	2302      	movs	r3, #2
 800c6a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c6ae:	230a      	movs	r3, #10
 800c6b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c6b2:	f107 0314 	add.w	r3, r7, #20
 800c6b6:	4619      	mov	r1, r3
 800c6b8:	4812      	ldr	r0, [pc, #72]	; (800c704 <HAL_HCD_MspInit+0xc0>)
 800c6ba:	f7f5 fa47 	bl	8001b4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c6be:	4b10      	ldr	r3, [pc, #64]	; (800c700 <HAL_HCD_MspInit+0xbc>)
 800c6c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6c2:	4a0f      	ldr	r2, [pc, #60]	; (800c700 <HAL_HCD_MspInit+0xbc>)
 800c6c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6c8:	6353      	str	r3, [r2, #52]	; 0x34
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	60fb      	str	r3, [r7, #12]
 800c6ce:	4b0c      	ldr	r3, [pc, #48]	; (800c700 <HAL_HCD_MspInit+0xbc>)
 800c6d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6d2:	4a0b      	ldr	r2, [pc, #44]	; (800c700 <HAL_HCD_MspInit+0xbc>)
 800c6d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c6d8:	6453      	str	r3, [r2, #68]	; 0x44
 800c6da:	4b09      	ldr	r3, [pc, #36]	; (800c700 <HAL_HCD_MspInit+0xbc>)
 800c6dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c6e2:	60fb      	str	r3, [r7, #12]
 800c6e4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	2105      	movs	r1, #5
 800c6ea:	2043      	movs	r0, #67	; 0x43
 800c6ec:	f7f5 fa04 	bl	8001af8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c6f0:	2043      	movs	r0, #67	; 0x43
 800c6f2:	f7f5 fa1d 	bl	8001b30 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c6f6:	bf00      	nop
 800c6f8:	3728      	adds	r7, #40	; 0x28
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}
 800c6fe:	bf00      	nop
 800c700:	40023800 	.word	0x40023800
 800c704:	40020000 	.word	0x40020000

0800c708 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b082      	sub	sp, #8
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c716:	4618      	mov	r0, r3
 800c718:	f7fb fea9 	bl	800846e <USBH_LL_IncTimer>
}
 800c71c:	bf00      	nop
 800c71e:	3708      	adds	r7, #8
 800c720:	46bd      	mov	sp, r7
 800c722:	bd80      	pop	{r7, pc}

0800c724 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b082      	sub	sp, #8
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c732:	4618      	mov	r0, r3
 800c734:	f7fb feed 	bl	8008512 <USBH_LL_Connect>
}
 800c738:	bf00      	nop
 800c73a:	3708      	adds	r7, #8
 800c73c:	46bd      	mov	sp, r7
 800c73e:	bd80      	pop	{r7, pc}

0800c740 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b082      	sub	sp, #8
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c74e:	4618      	mov	r0, r3
 800c750:	f7fb ff02 	bl	8008558 <USBH_LL_Disconnect>
}
 800c754:	bf00      	nop
 800c756:	3708      	adds	r7, #8
 800c758:	46bd      	mov	sp, r7
 800c75a:	bd80      	pop	{r7, pc}

0800c75c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b082      	sub	sp, #8
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
 800c764:	460b      	mov	r3, r1
 800c766:	70fb      	strb	r3, [r7, #3]
 800c768:	4613      	mov	r3, r2
 800c76a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c772:	4618      	mov	r0, r3
 800c774:	f7fb ff39 	bl	80085ea <USBH_LL_NotifyURBChange>
#endif
}
 800c778:	bf00      	nop
 800c77a:	3708      	adds	r7, #8
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}

0800c780 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b082      	sub	sp, #8
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c78e:	4618      	mov	r0, r3
 800c790:	f7fb fe97 	bl	80084c2 <USBH_LL_PortEnabled>
}
 800c794:	bf00      	nop
 800c796:	3708      	adds	r7, #8
 800c798:	46bd      	mov	sp, r7
 800c79a:	bd80      	pop	{r7, pc}

0800c79c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b082      	sub	sp, #8
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f7fb fea3 	bl	80084f6 <USBH_LL_PortDisabled>
}
 800c7b0:	bf00      	nop
 800c7b2:	3708      	adds	r7, #8
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd80      	pop	{r7, pc}

0800c7b8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b082      	sub	sp, #8
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c7c6:	2b01      	cmp	r3, #1
 800c7c8:	d12a      	bne.n	800c820 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c7ca:	4a18      	ldr	r2, [pc, #96]	; (800c82c <USBH_LL_Init+0x74>)
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	4a15      	ldr	r2, [pc, #84]	; (800c82c <USBH_LL_Init+0x74>)
 800c7d6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c7da:	4b14      	ldr	r3, [pc, #80]	; (800c82c <USBH_LL_Init+0x74>)
 800c7dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c7e0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800c7e2:	4b12      	ldr	r3, [pc, #72]	; (800c82c <USBH_LL_Init+0x74>)
 800c7e4:	2208      	movs	r2, #8
 800c7e6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c7e8:	4b10      	ldr	r3, [pc, #64]	; (800c82c <USBH_LL_Init+0x74>)
 800c7ea:	2201      	movs	r2, #1
 800c7ec:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c7ee:	4b0f      	ldr	r3, [pc, #60]	; (800c82c <USBH_LL_Init+0x74>)
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c7f4:	4b0d      	ldr	r3, [pc, #52]	; (800c82c <USBH_LL_Init+0x74>)
 800c7f6:	2202      	movs	r2, #2
 800c7f8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c7fa:	4b0c      	ldr	r3, [pc, #48]	; (800c82c <USBH_LL_Init+0x74>)
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c800:	480a      	ldr	r0, [pc, #40]	; (800c82c <USBH_LL_Init+0x74>)
 800c802:	f7f5 fb70 	bl	8001ee6 <HAL_HCD_Init>
 800c806:	4603      	mov	r3, r0
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d001      	beq.n	800c810 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800c80c:	f7f4 fa20 	bl	8000c50 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c810:	4806      	ldr	r0, [pc, #24]	; (800c82c <USBH_LL_Init+0x74>)
 800c812:	f7f5 ff54 	bl	80026be <HAL_HCD_GetCurrentFrame>
 800c816:	4603      	mov	r3, r0
 800c818:	4619      	mov	r1, r3
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f7fb fe18 	bl	8008450 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c820:	2300      	movs	r3, #0
}
 800c822:	4618      	mov	r0, r3
 800c824:	3708      	adds	r7, #8
 800c826:	46bd      	mov	sp, r7
 800c828:	bd80      	pop	{r7, pc}
 800c82a:	bf00      	nop
 800c82c:	2000507c 	.word	0x2000507c

0800c830 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b084      	sub	sp, #16
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c838:	2300      	movs	r3, #0
 800c83a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c83c:	2300      	movs	r3, #0
 800c83e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c846:	4618      	mov	r0, r3
 800c848:	f7f5 fec3 	bl	80025d2 <HAL_HCD_Start>
 800c84c:	4603      	mov	r3, r0
 800c84e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c850:	7bfb      	ldrb	r3, [r7, #15]
 800c852:	4618      	mov	r0, r3
 800c854:	f000 f95c 	bl	800cb10 <USBH_Get_USB_Status>
 800c858:	4603      	mov	r3, r0
 800c85a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c85c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c85e:	4618      	mov	r0, r3
 800c860:	3710      	adds	r7, #16
 800c862:	46bd      	mov	sp, r7
 800c864:	bd80      	pop	{r7, pc}

0800c866 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c866:	b580      	push	{r7, lr}
 800c868:	b084      	sub	sp, #16
 800c86a:	af00      	add	r7, sp, #0
 800c86c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c86e:	2300      	movs	r3, #0
 800c870:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c872:	2300      	movs	r3, #0
 800c874:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c87c:	4618      	mov	r0, r3
 800c87e:	f7f5 fecb 	bl	8002618 <HAL_HCD_Stop>
 800c882:	4603      	mov	r3, r0
 800c884:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c886:	7bfb      	ldrb	r3, [r7, #15]
 800c888:	4618      	mov	r0, r3
 800c88a:	f000 f941 	bl	800cb10 <USBH_Get_USB_Status>
 800c88e:	4603      	mov	r3, r0
 800c890:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c892:	7bbb      	ldrb	r3, [r7, #14]
}
 800c894:	4618      	mov	r0, r3
 800c896:	3710      	adds	r7, #16
 800c898:	46bd      	mov	sp, r7
 800c89a:	bd80      	pop	{r7, pc}

0800c89c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b084      	sub	sp, #16
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c8a4:	2301      	movs	r3, #1
 800c8a6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	f7f5 ff13 	bl	80026da <HAL_HCD_GetCurrentSpeed>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	2b02      	cmp	r3, #2
 800c8b8:	d00c      	beq.n	800c8d4 <USBH_LL_GetSpeed+0x38>
 800c8ba:	2b02      	cmp	r3, #2
 800c8bc:	d80d      	bhi.n	800c8da <USBH_LL_GetSpeed+0x3e>
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d002      	beq.n	800c8c8 <USBH_LL_GetSpeed+0x2c>
 800c8c2:	2b01      	cmp	r3, #1
 800c8c4:	d003      	beq.n	800c8ce <USBH_LL_GetSpeed+0x32>
 800c8c6:	e008      	b.n	800c8da <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	73fb      	strb	r3, [r7, #15]
    break;
 800c8cc:	e008      	b.n	800c8e0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	73fb      	strb	r3, [r7, #15]
    break;
 800c8d2:	e005      	b.n	800c8e0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c8d4:	2302      	movs	r3, #2
 800c8d6:	73fb      	strb	r3, [r7, #15]
    break;
 800c8d8:	e002      	b.n	800c8e0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800c8da:	2301      	movs	r3, #1
 800c8dc:	73fb      	strb	r3, [r7, #15]
    break;
 800c8de:	bf00      	nop
  }
  return  speed;
 800c8e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	3710      	adds	r7, #16
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	bd80      	pop	{r7, pc}

0800c8ea <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c8ea:	b580      	push	{r7, lr}
 800c8ec:	b084      	sub	sp, #16
 800c8ee:	af00      	add	r7, sp, #0
 800c8f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c900:	4618      	mov	r0, r3
 800c902:	f7f5 fea6 	bl	8002652 <HAL_HCD_ResetPort>
 800c906:	4603      	mov	r3, r0
 800c908:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c90a:	7bfb      	ldrb	r3, [r7, #15]
 800c90c:	4618      	mov	r0, r3
 800c90e:	f000 f8ff 	bl	800cb10 <USBH_Get_USB_Status>
 800c912:	4603      	mov	r3, r0
 800c914:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c916:	7bbb      	ldrb	r3, [r7, #14]
}
 800c918:	4618      	mov	r0, r3
 800c91a:	3710      	adds	r7, #16
 800c91c:	46bd      	mov	sp, r7
 800c91e:	bd80      	pop	{r7, pc}

0800c920 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b082      	sub	sp, #8
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
 800c928:	460b      	mov	r3, r1
 800c92a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c932:	78fa      	ldrb	r2, [r7, #3]
 800c934:	4611      	mov	r1, r2
 800c936:	4618      	mov	r0, r3
 800c938:	f7f5 fead 	bl	8002696 <HAL_HCD_HC_GetXferCount>
 800c93c:	4603      	mov	r3, r0
}
 800c93e:	4618      	mov	r0, r3
 800c940:	3708      	adds	r7, #8
 800c942:	46bd      	mov	sp, r7
 800c944:	bd80      	pop	{r7, pc}

0800c946 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c946:	b590      	push	{r4, r7, lr}
 800c948:	b089      	sub	sp, #36	; 0x24
 800c94a:	af04      	add	r7, sp, #16
 800c94c:	6078      	str	r0, [r7, #4]
 800c94e:	4608      	mov	r0, r1
 800c950:	4611      	mov	r1, r2
 800c952:	461a      	mov	r2, r3
 800c954:	4603      	mov	r3, r0
 800c956:	70fb      	strb	r3, [r7, #3]
 800c958:	460b      	mov	r3, r1
 800c95a:	70bb      	strb	r3, [r7, #2]
 800c95c:	4613      	mov	r3, r2
 800c95e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c960:	2300      	movs	r3, #0
 800c962:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c964:	2300      	movs	r3, #0
 800c966:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c96e:	787c      	ldrb	r4, [r7, #1]
 800c970:	78ba      	ldrb	r2, [r7, #2]
 800c972:	78f9      	ldrb	r1, [r7, #3]
 800c974:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c976:	9302      	str	r3, [sp, #8]
 800c978:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c97c:	9301      	str	r3, [sp, #4]
 800c97e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c982:	9300      	str	r3, [sp, #0]
 800c984:	4623      	mov	r3, r4
 800c986:	f7f5 fb10 	bl	8001faa <HAL_HCD_HC_Init>
 800c98a:	4603      	mov	r3, r0
 800c98c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c98e:	7bfb      	ldrb	r3, [r7, #15]
 800c990:	4618      	mov	r0, r3
 800c992:	f000 f8bd 	bl	800cb10 <USBH_Get_USB_Status>
 800c996:	4603      	mov	r3, r0
 800c998:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c99a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c99c:	4618      	mov	r0, r3
 800c99e:	3714      	adds	r7, #20
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd90      	pop	{r4, r7, pc}

0800c9a4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b084      	sub	sp, #16
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
 800c9ac:	460b      	mov	r3, r1
 800c9ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c9be:	78fa      	ldrb	r2, [r7, #3]
 800c9c0:	4611      	mov	r1, r2
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f7f5 fb80 	bl	80020c8 <HAL_HCD_HC_Halt>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c9cc:	7bfb      	ldrb	r3, [r7, #15]
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	f000 f89e 	bl	800cb10 <USBH_Get_USB_Status>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c9d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c9da:	4618      	mov	r0, r3
 800c9dc:	3710      	adds	r7, #16
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}

0800c9e2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c9e2:	b590      	push	{r4, r7, lr}
 800c9e4:	b089      	sub	sp, #36	; 0x24
 800c9e6:	af04      	add	r7, sp, #16
 800c9e8:	6078      	str	r0, [r7, #4]
 800c9ea:	4608      	mov	r0, r1
 800c9ec:	4611      	mov	r1, r2
 800c9ee:	461a      	mov	r2, r3
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	70fb      	strb	r3, [r7, #3]
 800c9f4:	460b      	mov	r3, r1
 800c9f6:	70bb      	strb	r3, [r7, #2]
 800c9f8:	4613      	mov	r3, r2
 800c9fa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ca00:	2300      	movs	r3, #0
 800ca02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ca0a:	787c      	ldrb	r4, [r7, #1]
 800ca0c:	78ba      	ldrb	r2, [r7, #2]
 800ca0e:	78f9      	ldrb	r1, [r7, #3]
 800ca10:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ca14:	9303      	str	r3, [sp, #12]
 800ca16:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ca18:	9302      	str	r3, [sp, #8]
 800ca1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca1c:	9301      	str	r3, [sp, #4]
 800ca1e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ca22:	9300      	str	r3, [sp, #0]
 800ca24:	4623      	mov	r3, r4
 800ca26:	f7f5 fb73 	bl	8002110 <HAL_HCD_HC_SubmitRequest>
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ca2e:	7bfb      	ldrb	r3, [r7, #15]
 800ca30:	4618      	mov	r0, r3
 800ca32:	f000 f86d 	bl	800cb10 <USBH_Get_USB_Status>
 800ca36:	4603      	mov	r3, r0
 800ca38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca3a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	3714      	adds	r7, #20
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd90      	pop	{r4, r7, pc}

0800ca44 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b082      	sub	sp, #8
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
 800ca4c:	460b      	mov	r3, r1
 800ca4e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ca56:	78fa      	ldrb	r2, [r7, #3]
 800ca58:	4611      	mov	r1, r2
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	f7f5 fe07 	bl	800266e <HAL_HCD_HC_GetURBState>
 800ca60:	4603      	mov	r3, r0
}
 800ca62:	4618      	mov	r0, r3
 800ca64:	3708      	adds	r7, #8
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}

0800ca6a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ca6a:	b580      	push	{r7, lr}
 800ca6c:	b082      	sub	sp, #8
 800ca6e:	af00      	add	r7, sp, #0
 800ca70:	6078      	str	r0, [r7, #4]
 800ca72:	460b      	mov	r3, r1
 800ca74:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ca7c:	2b01      	cmp	r3, #1
 800ca7e:	d103      	bne.n	800ca88 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800ca80:	78fb      	ldrb	r3, [r7, #3]
 800ca82:	4618      	mov	r0, r3
 800ca84:	f000 f870 	bl	800cb68 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ca88:	20c8      	movs	r0, #200	; 0xc8
 800ca8a:	f7f4 ff59 	bl	8001940 <HAL_Delay>
  return USBH_OK;
 800ca8e:	2300      	movs	r3, #0
}
 800ca90:	4618      	mov	r0, r3
 800ca92:	3708      	adds	r7, #8
 800ca94:	46bd      	mov	sp, r7
 800ca96:	bd80      	pop	{r7, pc}

0800ca98 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ca98:	b480      	push	{r7}
 800ca9a:	b085      	sub	sp, #20
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
 800caa0:	460b      	mov	r3, r1
 800caa2:	70fb      	strb	r3, [r7, #3]
 800caa4:	4613      	mov	r3, r2
 800caa6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800caae:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800cab0:	78fb      	ldrb	r3, [r7, #3]
 800cab2:	68fa      	ldr	r2, [r7, #12]
 800cab4:	212c      	movs	r1, #44	; 0x2c
 800cab6:	fb01 f303 	mul.w	r3, r1, r3
 800caba:	4413      	add	r3, r2
 800cabc:	333b      	adds	r3, #59	; 0x3b
 800cabe:	781b      	ldrb	r3, [r3, #0]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d009      	beq.n	800cad8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800cac4:	78fb      	ldrb	r3, [r7, #3]
 800cac6:	68fa      	ldr	r2, [r7, #12]
 800cac8:	212c      	movs	r1, #44	; 0x2c
 800caca:	fb01 f303 	mul.w	r3, r1, r3
 800cace:	4413      	add	r3, r2
 800cad0:	3354      	adds	r3, #84	; 0x54
 800cad2:	78ba      	ldrb	r2, [r7, #2]
 800cad4:	701a      	strb	r2, [r3, #0]
 800cad6:	e008      	b.n	800caea <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800cad8:	78fb      	ldrb	r3, [r7, #3]
 800cada:	68fa      	ldr	r2, [r7, #12]
 800cadc:	212c      	movs	r1, #44	; 0x2c
 800cade:	fb01 f303 	mul.w	r3, r1, r3
 800cae2:	4413      	add	r3, r2
 800cae4:	3355      	adds	r3, #85	; 0x55
 800cae6:	78ba      	ldrb	r2, [r7, #2]
 800cae8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800caea:	2300      	movs	r3, #0
}
 800caec:	4618      	mov	r0, r3
 800caee:	3714      	adds	r7, #20
 800caf0:	46bd      	mov	sp, r7
 800caf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf6:	4770      	bx	lr

0800caf8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b082      	sub	sp, #8
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800cb00:	6878      	ldr	r0, [r7, #4]
 800cb02:	f7f4 ff1d 	bl	8001940 <HAL_Delay>
}
 800cb06:	bf00      	nop
 800cb08:	3708      	adds	r7, #8
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd80      	pop	{r7, pc}
	...

0800cb10 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cb10:	b480      	push	{r7}
 800cb12:	b085      	sub	sp, #20
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	4603      	mov	r3, r0
 800cb18:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cb1e:	79fb      	ldrb	r3, [r7, #7]
 800cb20:	2b03      	cmp	r3, #3
 800cb22:	d817      	bhi.n	800cb54 <USBH_Get_USB_Status+0x44>
 800cb24:	a201      	add	r2, pc, #4	; (adr r2, 800cb2c <USBH_Get_USB_Status+0x1c>)
 800cb26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb2a:	bf00      	nop
 800cb2c:	0800cb3d 	.word	0x0800cb3d
 800cb30:	0800cb43 	.word	0x0800cb43
 800cb34:	0800cb49 	.word	0x0800cb49
 800cb38:	0800cb4f 	.word	0x0800cb4f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	73fb      	strb	r3, [r7, #15]
    break;
 800cb40:	e00b      	b.n	800cb5a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800cb42:	2302      	movs	r3, #2
 800cb44:	73fb      	strb	r3, [r7, #15]
    break;
 800cb46:	e008      	b.n	800cb5a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800cb48:	2301      	movs	r3, #1
 800cb4a:	73fb      	strb	r3, [r7, #15]
    break;
 800cb4c:	e005      	b.n	800cb5a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800cb4e:	2302      	movs	r3, #2
 800cb50:	73fb      	strb	r3, [r7, #15]
    break;
 800cb52:	e002      	b.n	800cb5a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800cb54:	2302      	movs	r3, #2
 800cb56:	73fb      	strb	r3, [r7, #15]
    break;
 800cb58:	bf00      	nop
  }
  return usb_status;
 800cb5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	3714      	adds	r7, #20
 800cb60:	46bd      	mov	sp, r7
 800cb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb66:	4770      	bx	lr

0800cb68 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b084      	sub	sp, #16
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	4603      	mov	r3, r0
 800cb70:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800cb72:	79fb      	ldrb	r3, [r7, #7]
 800cb74:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800cb76:	79fb      	ldrb	r3, [r7, #7]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d102      	bne.n	800cb82 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	73fb      	strb	r3, [r7, #15]
 800cb80:	e001      	b.n	800cb86 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800cb82:	2301      	movs	r3, #1
 800cb84:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800cb86:	7bfb      	ldrb	r3, [r7, #15]
 800cb88:	461a      	mov	r2, r3
 800cb8a:	2101      	movs	r1, #1
 800cb8c:	4803      	ldr	r0, [pc, #12]	; (800cb9c <MX_DriverVbusFS+0x34>)
 800cb8e:	f7f5 f991 	bl	8001eb4 <HAL_GPIO_WritePin>
}
 800cb92:	bf00      	nop
 800cb94:	3710      	adds	r7, #16
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd80      	pop	{r7, pc}
 800cb9a:	bf00      	nop
 800cb9c:	40020800 	.word	0x40020800

0800cba0 <malloc>:
 800cba0:	4b02      	ldr	r3, [pc, #8]	; (800cbac <malloc+0xc>)
 800cba2:	4601      	mov	r1, r0
 800cba4:	6818      	ldr	r0, [r3, #0]
 800cba6:	f000 b82b 	b.w	800cc00 <_malloc_r>
 800cbaa:	bf00      	nop
 800cbac:	2000007c 	.word	0x2000007c

0800cbb0 <free>:
 800cbb0:	4b02      	ldr	r3, [pc, #8]	; (800cbbc <free+0xc>)
 800cbb2:	4601      	mov	r1, r0
 800cbb4:	6818      	ldr	r0, [r3, #0]
 800cbb6:	f000 b957 	b.w	800ce68 <_free_r>
 800cbba:	bf00      	nop
 800cbbc:	2000007c 	.word	0x2000007c

0800cbc0 <sbrk_aligned>:
 800cbc0:	b570      	push	{r4, r5, r6, lr}
 800cbc2:	4e0e      	ldr	r6, [pc, #56]	; (800cbfc <sbrk_aligned+0x3c>)
 800cbc4:	460c      	mov	r4, r1
 800cbc6:	6831      	ldr	r1, [r6, #0]
 800cbc8:	4605      	mov	r5, r0
 800cbca:	b911      	cbnz	r1, 800cbd2 <sbrk_aligned+0x12>
 800cbcc:	f000 f902 	bl	800cdd4 <_sbrk_r>
 800cbd0:	6030      	str	r0, [r6, #0]
 800cbd2:	4621      	mov	r1, r4
 800cbd4:	4628      	mov	r0, r5
 800cbd6:	f000 f8fd 	bl	800cdd4 <_sbrk_r>
 800cbda:	1c43      	adds	r3, r0, #1
 800cbdc:	d00a      	beq.n	800cbf4 <sbrk_aligned+0x34>
 800cbde:	1cc4      	adds	r4, r0, #3
 800cbe0:	f024 0403 	bic.w	r4, r4, #3
 800cbe4:	42a0      	cmp	r0, r4
 800cbe6:	d007      	beq.n	800cbf8 <sbrk_aligned+0x38>
 800cbe8:	1a21      	subs	r1, r4, r0
 800cbea:	4628      	mov	r0, r5
 800cbec:	f000 f8f2 	bl	800cdd4 <_sbrk_r>
 800cbf0:	3001      	adds	r0, #1
 800cbf2:	d101      	bne.n	800cbf8 <sbrk_aligned+0x38>
 800cbf4:	f04f 34ff 	mov.w	r4, #4294967295
 800cbf8:	4620      	mov	r0, r4
 800cbfa:	bd70      	pop	{r4, r5, r6, pc}
 800cbfc:	20005384 	.word	0x20005384

0800cc00 <_malloc_r>:
 800cc00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc04:	1ccd      	adds	r5, r1, #3
 800cc06:	f025 0503 	bic.w	r5, r5, #3
 800cc0a:	3508      	adds	r5, #8
 800cc0c:	2d0c      	cmp	r5, #12
 800cc0e:	bf38      	it	cc
 800cc10:	250c      	movcc	r5, #12
 800cc12:	2d00      	cmp	r5, #0
 800cc14:	4607      	mov	r7, r0
 800cc16:	db01      	blt.n	800cc1c <_malloc_r+0x1c>
 800cc18:	42a9      	cmp	r1, r5
 800cc1a:	d905      	bls.n	800cc28 <_malloc_r+0x28>
 800cc1c:	230c      	movs	r3, #12
 800cc1e:	603b      	str	r3, [r7, #0]
 800cc20:	2600      	movs	r6, #0
 800cc22:	4630      	mov	r0, r6
 800cc24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc28:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ccfc <_malloc_r+0xfc>
 800cc2c:	f000 f868 	bl	800cd00 <__malloc_lock>
 800cc30:	f8d8 3000 	ldr.w	r3, [r8]
 800cc34:	461c      	mov	r4, r3
 800cc36:	bb5c      	cbnz	r4, 800cc90 <_malloc_r+0x90>
 800cc38:	4629      	mov	r1, r5
 800cc3a:	4638      	mov	r0, r7
 800cc3c:	f7ff ffc0 	bl	800cbc0 <sbrk_aligned>
 800cc40:	1c43      	adds	r3, r0, #1
 800cc42:	4604      	mov	r4, r0
 800cc44:	d155      	bne.n	800ccf2 <_malloc_r+0xf2>
 800cc46:	f8d8 4000 	ldr.w	r4, [r8]
 800cc4a:	4626      	mov	r6, r4
 800cc4c:	2e00      	cmp	r6, #0
 800cc4e:	d145      	bne.n	800ccdc <_malloc_r+0xdc>
 800cc50:	2c00      	cmp	r4, #0
 800cc52:	d048      	beq.n	800cce6 <_malloc_r+0xe6>
 800cc54:	6823      	ldr	r3, [r4, #0]
 800cc56:	4631      	mov	r1, r6
 800cc58:	4638      	mov	r0, r7
 800cc5a:	eb04 0903 	add.w	r9, r4, r3
 800cc5e:	f000 f8b9 	bl	800cdd4 <_sbrk_r>
 800cc62:	4581      	cmp	r9, r0
 800cc64:	d13f      	bne.n	800cce6 <_malloc_r+0xe6>
 800cc66:	6821      	ldr	r1, [r4, #0]
 800cc68:	1a6d      	subs	r5, r5, r1
 800cc6a:	4629      	mov	r1, r5
 800cc6c:	4638      	mov	r0, r7
 800cc6e:	f7ff ffa7 	bl	800cbc0 <sbrk_aligned>
 800cc72:	3001      	adds	r0, #1
 800cc74:	d037      	beq.n	800cce6 <_malloc_r+0xe6>
 800cc76:	6823      	ldr	r3, [r4, #0]
 800cc78:	442b      	add	r3, r5
 800cc7a:	6023      	str	r3, [r4, #0]
 800cc7c:	f8d8 3000 	ldr.w	r3, [r8]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d038      	beq.n	800ccf6 <_malloc_r+0xf6>
 800cc84:	685a      	ldr	r2, [r3, #4]
 800cc86:	42a2      	cmp	r2, r4
 800cc88:	d12b      	bne.n	800cce2 <_malloc_r+0xe2>
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	605a      	str	r2, [r3, #4]
 800cc8e:	e00f      	b.n	800ccb0 <_malloc_r+0xb0>
 800cc90:	6822      	ldr	r2, [r4, #0]
 800cc92:	1b52      	subs	r2, r2, r5
 800cc94:	d41f      	bmi.n	800ccd6 <_malloc_r+0xd6>
 800cc96:	2a0b      	cmp	r2, #11
 800cc98:	d917      	bls.n	800ccca <_malloc_r+0xca>
 800cc9a:	1961      	adds	r1, r4, r5
 800cc9c:	42a3      	cmp	r3, r4
 800cc9e:	6025      	str	r5, [r4, #0]
 800cca0:	bf18      	it	ne
 800cca2:	6059      	strne	r1, [r3, #4]
 800cca4:	6863      	ldr	r3, [r4, #4]
 800cca6:	bf08      	it	eq
 800cca8:	f8c8 1000 	streq.w	r1, [r8]
 800ccac:	5162      	str	r2, [r4, r5]
 800ccae:	604b      	str	r3, [r1, #4]
 800ccb0:	4638      	mov	r0, r7
 800ccb2:	f104 060b 	add.w	r6, r4, #11
 800ccb6:	f000 f829 	bl	800cd0c <__malloc_unlock>
 800ccba:	f026 0607 	bic.w	r6, r6, #7
 800ccbe:	1d23      	adds	r3, r4, #4
 800ccc0:	1af2      	subs	r2, r6, r3
 800ccc2:	d0ae      	beq.n	800cc22 <_malloc_r+0x22>
 800ccc4:	1b9b      	subs	r3, r3, r6
 800ccc6:	50a3      	str	r3, [r4, r2]
 800ccc8:	e7ab      	b.n	800cc22 <_malloc_r+0x22>
 800ccca:	42a3      	cmp	r3, r4
 800cccc:	6862      	ldr	r2, [r4, #4]
 800ccce:	d1dd      	bne.n	800cc8c <_malloc_r+0x8c>
 800ccd0:	f8c8 2000 	str.w	r2, [r8]
 800ccd4:	e7ec      	b.n	800ccb0 <_malloc_r+0xb0>
 800ccd6:	4623      	mov	r3, r4
 800ccd8:	6864      	ldr	r4, [r4, #4]
 800ccda:	e7ac      	b.n	800cc36 <_malloc_r+0x36>
 800ccdc:	4634      	mov	r4, r6
 800ccde:	6876      	ldr	r6, [r6, #4]
 800cce0:	e7b4      	b.n	800cc4c <_malloc_r+0x4c>
 800cce2:	4613      	mov	r3, r2
 800cce4:	e7cc      	b.n	800cc80 <_malloc_r+0x80>
 800cce6:	230c      	movs	r3, #12
 800cce8:	603b      	str	r3, [r7, #0]
 800ccea:	4638      	mov	r0, r7
 800ccec:	f000 f80e 	bl	800cd0c <__malloc_unlock>
 800ccf0:	e797      	b.n	800cc22 <_malloc_r+0x22>
 800ccf2:	6025      	str	r5, [r4, #0]
 800ccf4:	e7dc      	b.n	800ccb0 <_malloc_r+0xb0>
 800ccf6:	605b      	str	r3, [r3, #4]
 800ccf8:	deff      	udf	#255	; 0xff
 800ccfa:	bf00      	nop
 800ccfc:	20005380 	.word	0x20005380

0800cd00 <__malloc_lock>:
 800cd00:	4801      	ldr	r0, [pc, #4]	; (800cd08 <__malloc_lock+0x8>)
 800cd02:	f000 b8a1 	b.w	800ce48 <__retarget_lock_acquire_recursive>
 800cd06:	bf00      	nop
 800cd08:	200054c4 	.word	0x200054c4

0800cd0c <__malloc_unlock>:
 800cd0c:	4801      	ldr	r0, [pc, #4]	; (800cd14 <__malloc_unlock+0x8>)
 800cd0e:	f000 b89c 	b.w	800ce4a <__retarget_lock_release_recursive>
 800cd12:	bf00      	nop
 800cd14:	200054c4 	.word	0x200054c4

0800cd18 <memset>:
 800cd18:	4402      	add	r2, r0
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	4293      	cmp	r3, r2
 800cd1e:	d100      	bne.n	800cd22 <memset+0xa>
 800cd20:	4770      	bx	lr
 800cd22:	f803 1b01 	strb.w	r1, [r3], #1
 800cd26:	e7f9      	b.n	800cd1c <memset+0x4>

0800cd28 <_reclaim_reent>:
 800cd28:	4b29      	ldr	r3, [pc, #164]	; (800cdd0 <_reclaim_reent+0xa8>)
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	4283      	cmp	r3, r0
 800cd2e:	b570      	push	{r4, r5, r6, lr}
 800cd30:	4604      	mov	r4, r0
 800cd32:	d04b      	beq.n	800cdcc <_reclaim_reent+0xa4>
 800cd34:	69c3      	ldr	r3, [r0, #28]
 800cd36:	b143      	cbz	r3, 800cd4a <_reclaim_reent+0x22>
 800cd38:	68db      	ldr	r3, [r3, #12]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d144      	bne.n	800cdc8 <_reclaim_reent+0xa0>
 800cd3e:	69e3      	ldr	r3, [r4, #28]
 800cd40:	6819      	ldr	r1, [r3, #0]
 800cd42:	b111      	cbz	r1, 800cd4a <_reclaim_reent+0x22>
 800cd44:	4620      	mov	r0, r4
 800cd46:	f000 f88f 	bl	800ce68 <_free_r>
 800cd4a:	6961      	ldr	r1, [r4, #20]
 800cd4c:	b111      	cbz	r1, 800cd54 <_reclaim_reent+0x2c>
 800cd4e:	4620      	mov	r0, r4
 800cd50:	f000 f88a 	bl	800ce68 <_free_r>
 800cd54:	69e1      	ldr	r1, [r4, #28]
 800cd56:	b111      	cbz	r1, 800cd5e <_reclaim_reent+0x36>
 800cd58:	4620      	mov	r0, r4
 800cd5a:	f000 f885 	bl	800ce68 <_free_r>
 800cd5e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800cd60:	b111      	cbz	r1, 800cd68 <_reclaim_reent+0x40>
 800cd62:	4620      	mov	r0, r4
 800cd64:	f000 f880 	bl	800ce68 <_free_r>
 800cd68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd6a:	b111      	cbz	r1, 800cd72 <_reclaim_reent+0x4a>
 800cd6c:	4620      	mov	r0, r4
 800cd6e:	f000 f87b 	bl	800ce68 <_free_r>
 800cd72:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cd74:	b111      	cbz	r1, 800cd7c <_reclaim_reent+0x54>
 800cd76:	4620      	mov	r0, r4
 800cd78:	f000 f876 	bl	800ce68 <_free_r>
 800cd7c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800cd7e:	b111      	cbz	r1, 800cd86 <_reclaim_reent+0x5e>
 800cd80:	4620      	mov	r0, r4
 800cd82:	f000 f871 	bl	800ce68 <_free_r>
 800cd86:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800cd88:	b111      	cbz	r1, 800cd90 <_reclaim_reent+0x68>
 800cd8a:	4620      	mov	r0, r4
 800cd8c:	f000 f86c 	bl	800ce68 <_free_r>
 800cd90:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800cd92:	b111      	cbz	r1, 800cd9a <_reclaim_reent+0x72>
 800cd94:	4620      	mov	r0, r4
 800cd96:	f000 f867 	bl	800ce68 <_free_r>
 800cd9a:	6a23      	ldr	r3, [r4, #32]
 800cd9c:	b1b3      	cbz	r3, 800cdcc <_reclaim_reent+0xa4>
 800cd9e:	4620      	mov	r0, r4
 800cda0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cda4:	4718      	bx	r3
 800cda6:	5949      	ldr	r1, [r1, r5]
 800cda8:	b941      	cbnz	r1, 800cdbc <_reclaim_reent+0x94>
 800cdaa:	3504      	adds	r5, #4
 800cdac:	69e3      	ldr	r3, [r4, #28]
 800cdae:	2d80      	cmp	r5, #128	; 0x80
 800cdb0:	68d9      	ldr	r1, [r3, #12]
 800cdb2:	d1f8      	bne.n	800cda6 <_reclaim_reent+0x7e>
 800cdb4:	4620      	mov	r0, r4
 800cdb6:	f000 f857 	bl	800ce68 <_free_r>
 800cdba:	e7c0      	b.n	800cd3e <_reclaim_reent+0x16>
 800cdbc:	680e      	ldr	r6, [r1, #0]
 800cdbe:	4620      	mov	r0, r4
 800cdc0:	f000 f852 	bl	800ce68 <_free_r>
 800cdc4:	4631      	mov	r1, r6
 800cdc6:	e7ef      	b.n	800cda8 <_reclaim_reent+0x80>
 800cdc8:	2500      	movs	r5, #0
 800cdca:	e7ef      	b.n	800cdac <_reclaim_reent+0x84>
 800cdcc:	bd70      	pop	{r4, r5, r6, pc}
 800cdce:	bf00      	nop
 800cdd0:	2000007c 	.word	0x2000007c

0800cdd4 <_sbrk_r>:
 800cdd4:	b538      	push	{r3, r4, r5, lr}
 800cdd6:	4d06      	ldr	r5, [pc, #24]	; (800cdf0 <_sbrk_r+0x1c>)
 800cdd8:	2300      	movs	r3, #0
 800cdda:	4604      	mov	r4, r0
 800cddc:	4608      	mov	r0, r1
 800cdde:	602b      	str	r3, [r5, #0]
 800cde0:	f7f4 f998 	bl	8001114 <_sbrk>
 800cde4:	1c43      	adds	r3, r0, #1
 800cde6:	d102      	bne.n	800cdee <_sbrk_r+0x1a>
 800cde8:	682b      	ldr	r3, [r5, #0]
 800cdea:	b103      	cbz	r3, 800cdee <_sbrk_r+0x1a>
 800cdec:	6023      	str	r3, [r4, #0]
 800cdee:	bd38      	pop	{r3, r4, r5, pc}
 800cdf0:	200054c0 	.word	0x200054c0

0800cdf4 <__errno>:
 800cdf4:	4b01      	ldr	r3, [pc, #4]	; (800cdfc <__errno+0x8>)
 800cdf6:	6818      	ldr	r0, [r3, #0]
 800cdf8:	4770      	bx	lr
 800cdfa:	bf00      	nop
 800cdfc:	2000007c 	.word	0x2000007c

0800ce00 <__libc_init_array>:
 800ce00:	b570      	push	{r4, r5, r6, lr}
 800ce02:	4d0d      	ldr	r5, [pc, #52]	; (800ce38 <__libc_init_array+0x38>)
 800ce04:	4c0d      	ldr	r4, [pc, #52]	; (800ce3c <__libc_init_array+0x3c>)
 800ce06:	1b64      	subs	r4, r4, r5
 800ce08:	10a4      	asrs	r4, r4, #2
 800ce0a:	2600      	movs	r6, #0
 800ce0c:	42a6      	cmp	r6, r4
 800ce0e:	d109      	bne.n	800ce24 <__libc_init_array+0x24>
 800ce10:	4d0b      	ldr	r5, [pc, #44]	; (800ce40 <__libc_init_array+0x40>)
 800ce12:	4c0c      	ldr	r4, [pc, #48]	; (800ce44 <__libc_init_array+0x44>)
 800ce14:	f000 f874 	bl	800cf00 <_init>
 800ce18:	1b64      	subs	r4, r4, r5
 800ce1a:	10a4      	asrs	r4, r4, #2
 800ce1c:	2600      	movs	r6, #0
 800ce1e:	42a6      	cmp	r6, r4
 800ce20:	d105      	bne.n	800ce2e <__libc_init_array+0x2e>
 800ce22:	bd70      	pop	{r4, r5, r6, pc}
 800ce24:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce28:	4798      	blx	r3
 800ce2a:	3601      	adds	r6, #1
 800ce2c:	e7ee      	b.n	800ce0c <__libc_init_array+0xc>
 800ce2e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce32:	4798      	blx	r3
 800ce34:	3601      	adds	r6, #1
 800ce36:	e7f2      	b.n	800ce1e <__libc_init_array+0x1e>
 800ce38:	0800eff0 	.word	0x0800eff0
 800ce3c:	0800eff0 	.word	0x0800eff0
 800ce40:	0800eff0 	.word	0x0800eff0
 800ce44:	0800eff4 	.word	0x0800eff4

0800ce48 <__retarget_lock_acquire_recursive>:
 800ce48:	4770      	bx	lr

0800ce4a <__retarget_lock_release_recursive>:
 800ce4a:	4770      	bx	lr

0800ce4c <memcpy>:
 800ce4c:	440a      	add	r2, r1
 800ce4e:	4291      	cmp	r1, r2
 800ce50:	f100 33ff 	add.w	r3, r0, #4294967295
 800ce54:	d100      	bne.n	800ce58 <memcpy+0xc>
 800ce56:	4770      	bx	lr
 800ce58:	b510      	push	{r4, lr}
 800ce5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce62:	4291      	cmp	r1, r2
 800ce64:	d1f9      	bne.n	800ce5a <memcpy+0xe>
 800ce66:	bd10      	pop	{r4, pc}

0800ce68 <_free_r>:
 800ce68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ce6a:	2900      	cmp	r1, #0
 800ce6c:	d044      	beq.n	800cef8 <_free_r+0x90>
 800ce6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce72:	9001      	str	r0, [sp, #4]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	f1a1 0404 	sub.w	r4, r1, #4
 800ce7a:	bfb8      	it	lt
 800ce7c:	18e4      	addlt	r4, r4, r3
 800ce7e:	f7ff ff3f 	bl	800cd00 <__malloc_lock>
 800ce82:	4a1e      	ldr	r2, [pc, #120]	; (800cefc <_free_r+0x94>)
 800ce84:	9801      	ldr	r0, [sp, #4]
 800ce86:	6813      	ldr	r3, [r2, #0]
 800ce88:	b933      	cbnz	r3, 800ce98 <_free_r+0x30>
 800ce8a:	6063      	str	r3, [r4, #4]
 800ce8c:	6014      	str	r4, [r2, #0]
 800ce8e:	b003      	add	sp, #12
 800ce90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ce94:	f7ff bf3a 	b.w	800cd0c <__malloc_unlock>
 800ce98:	42a3      	cmp	r3, r4
 800ce9a:	d908      	bls.n	800ceae <_free_r+0x46>
 800ce9c:	6825      	ldr	r5, [r4, #0]
 800ce9e:	1961      	adds	r1, r4, r5
 800cea0:	428b      	cmp	r3, r1
 800cea2:	bf01      	itttt	eq
 800cea4:	6819      	ldreq	r1, [r3, #0]
 800cea6:	685b      	ldreq	r3, [r3, #4]
 800cea8:	1949      	addeq	r1, r1, r5
 800ceaa:	6021      	streq	r1, [r4, #0]
 800ceac:	e7ed      	b.n	800ce8a <_free_r+0x22>
 800ceae:	461a      	mov	r2, r3
 800ceb0:	685b      	ldr	r3, [r3, #4]
 800ceb2:	b10b      	cbz	r3, 800ceb8 <_free_r+0x50>
 800ceb4:	42a3      	cmp	r3, r4
 800ceb6:	d9fa      	bls.n	800ceae <_free_r+0x46>
 800ceb8:	6811      	ldr	r1, [r2, #0]
 800ceba:	1855      	adds	r5, r2, r1
 800cebc:	42a5      	cmp	r5, r4
 800cebe:	d10b      	bne.n	800ced8 <_free_r+0x70>
 800cec0:	6824      	ldr	r4, [r4, #0]
 800cec2:	4421      	add	r1, r4
 800cec4:	1854      	adds	r4, r2, r1
 800cec6:	42a3      	cmp	r3, r4
 800cec8:	6011      	str	r1, [r2, #0]
 800ceca:	d1e0      	bne.n	800ce8e <_free_r+0x26>
 800cecc:	681c      	ldr	r4, [r3, #0]
 800cece:	685b      	ldr	r3, [r3, #4]
 800ced0:	6053      	str	r3, [r2, #4]
 800ced2:	440c      	add	r4, r1
 800ced4:	6014      	str	r4, [r2, #0]
 800ced6:	e7da      	b.n	800ce8e <_free_r+0x26>
 800ced8:	d902      	bls.n	800cee0 <_free_r+0x78>
 800ceda:	230c      	movs	r3, #12
 800cedc:	6003      	str	r3, [r0, #0]
 800cede:	e7d6      	b.n	800ce8e <_free_r+0x26>
 800cee0:	6825      	ldr	r5, [r4, #0]
 800cee2:	1961      	adds	r1, r4, r5
 800cee4:	428b      	cmp	r3, r1
 800cee6:	bf04      	itt	eq
 800cee8:	6819      	ldreq	r1, [r3, #0]
 800ceea:	685b      	ldreq	r3, [r3, #4]
 800ceec:	6063      	str	r3, [r4, #4]
 800ceee:	bf04      	itt	eq
 800cef0:	1949      	addeq	r1, r1, r5
 800cef2:	6021      	streq	r1, [r4, #0]
 800cef4:	6054      	str	r4, [r2, #4]
 800cef6:	e7ca      	b.n	800ce8e <_free_r+0x26>
 800cef8:	b003      	add	sp, #12
 800cefa:	bd30      	pop	{r4, r5, pc}
 800cefc:	20005380 	.word	0x20005380

0800cf00 <_init>:
 800cf00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf02:	bf00      	nop
 800cf04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf06:	bc08      	pop	{r3}
 800cf08:	469e      	mov	lr, r3
 800cf0a:	4770      	bx	lr

0800cf0c <_fini>:
 800cf0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf0e:	bf00      	nop
 800cf10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf12:	bc08      	pop	{r3}
 800cf14:	469e      	mov	lr, r3
 800cf16:	4770      	bx	lr
