
thi-board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba3c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0800bbcc  0800bbcc  0001bbcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc5c  0800bc5c  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc5c  0800bc5c  0001bc5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc64  0800bc64  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc64  0800bc64  0001bc64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bc68  0800bc68  0001bc68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800bc6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
 10 .bss          00005318  20000084  20000084  00020084  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000539c  2000539c  00020084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00024306  00000000  00000000  000200f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000055d1  00000000  00000000  000443fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001ec0  00000000  00000000  000499d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000017bc  00000000  00000000  0004b890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00006a85  00000000  00000000  0004d04c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002687b  00000000  00000000  00053ad1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000def3c  00000000  00000000  0007a34c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000085c0  00000000  00000000  00159288  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00161848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bbb4 	.word	0x0800bbb4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	0800bbb4 	.word	0x0800bbb4

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fd16 	bl	8000f00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f838 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f972 	bl	80007c0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004dc:	f000 f89e 	bl	800061c <MX_I2C1_Init>
  MX_I2S3_Init();
 80004e0:	f000 f8ca 	bl	8000678 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e4:	f000 f8f8 	bl	80006d8 <MX_SPI1_Init>
  MX_TIM7_Init();
 80004e8:	f000 f92c 	bl	8000744 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  /* Enable TIM7 = TIM7->CR1 |= TIM_CR1_CEN */
  HAL_TIM_Base_Start(&htim7);
 80004ec:	480f      	ldr	r0, [pc, #60]	; (800052c <main+0x60>)
 80004ee:	f004 f921 	bl	8004734 <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f2:	f007 fe53 	bl	800819c <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of blinkySWTimer */
  blinkySWTimerHandle = osTimerNew(blinkyTimerCallback, osTimerPeriodic, NULL, &blinkySWTimer_attributes);
 80004f6:	4b0e      	ldr	r3, [pc, #56]	; (8000530 <main+0x64>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	2101      	movs	r1, #1
 80004fc:	480d      	ldr	r0, [pc, #52]	; (8000534 <main+0x68>)
 80004fe:	f007 ff3f 	bl	8008380 <osTimerNew>
 8000502:	4603      	mov	r3, r0
 8000504:	4a0c      	ldr	r2, [pc, #48]	; (8000538 <main+0x6c>)
 8000506:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  osTimerStart(blinkySWTimerHandle, 500);
 8000508:	4b0b      	ldr	r3, [pc, #44]	; (8000538 <main+0x6c>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000510:	4618      	mov	r0, r3
 8000512:	f007 ffb1 	bl	8008478 <osTimerStart>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blinkyTask */
  blinkyTaskHandle = osThreadNew(BlinkyLEDTask, NULL, &blinkyTask_attributes);
 8000516:	4a09      	ldr	r2, [pc, #36]	; (800053c <main+0x70>)
 8000518:	2100      	movs	r1, #0
 800051a:	4809      	ldr	r0, [pc, #36]	; (8000540 <main+0x74>)
 800051c:	f007 fe88 	bl	8008230 <osThreadNew>
 8000520:	4603      	mov	r3, r0
 8000522:	4a08      	ldr	r2, [pc, #32]	; (8000544 <main+0x78>)
 8000524:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000526:	f007 fe5d 	bl	80081e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800052a:	e7fe      	b.n	800052a <main+0x5e>
 800052c:	20000194 	.word	0x20000194
 8000530:	0800bc34 	.word	0x0800bc34
 8000534:	08000a55 	.word	0x08000a55
 8000538:	200001e0 	.word	0x200001e0
 800053c:	0800bc10 	.word	0x0800bc10
 8000540:	080009bd 	.word	0x080009bd
 8000544:	200001dc 	.word	0x200001dc

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b094      	sub	sp, #80	; 0x50
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 0320 	add.w	r3, r7, #32
 8000552:	2230      	movs	r2, #48	; 0x30
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f00b fa8e 	bl	800ba78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	f107 030c 	add.w	r3, r7, #12
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800056c:	2300      	movs	r3, #0
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	4b28      	ldr	r3, [pc, #160]	; (8000614 <SystemClock_Config+0xcc>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	4a27      	ldr	r2, [pc, #156]	; (8000614 <SystemClock_Config+0xcc>)
 8000576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800057a:	6413      	str	r3, [r2, #64]	; 0x40
 800057c:	4b25      	ldr	r3, [pc, #148]	; (8000614 <SystemClock_Config+0xcc>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000584:	60bb      	str	r3, [r7, #8]
 8000586:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000588:	2300      	movs	r3, #0
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	4b22      	ldr	r3, [pc, #136]	; (8000618 <SystemClock_Config+0xd0>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a21      	ldr	r2, [pc, #132]	; (8000618 <SystemClock_Config+0xd0>)
 8000592:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000596:	6013      	str	r3, [r2, #0]
 8000598:	4b1f      	ldr	r3, [pc, #124]	; (8000618 <SystemClock_Config+0xd0>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a4:	2301      	movs	r3, #1
 80005a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ae:	2302      	movs	r3, #2
 80005b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005b8:	2308      	movs	r3, #8
 80005ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005bc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c2:	2302      	movs	r3, #2
 80005c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005c6:	2307      	movs	r3, #7
 80005c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ca:	f107 0320 	add.w	r3, r7, #32
 80005ce:	4618      	mov	r0, r3
 80005d0:	f003 fa14 	bl	80039fc <HAL_RCC_OscConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005da:	f000 fa4b 	bl	8000a74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005de:	230f      	movs	r3, #15
 80005e0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e2:	2302      	movs	r3, #2
 80005e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005f6:	f107 030c 	add.w	r3, r7, #12
 80005fa:	2105      	movs	r1, #5
 80005fc:	4618      	mov	r0, r3
 80005fe:	f003 fc75 	bl	8003eec <HAL_RCC_ClockConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000608:	f000 fa34 	bl	8000a74 <Error_Handler>
  }
}
 800060c:	bf00      	nop
 800060e:	3750      	adds	r7, #80	; 0x50
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40023800 	.word	0x40023800
 8000618:	40007000 	.word	0x40007000

0800061c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000620:	4b12      	ldr	r3, [pc, #72]	; (800066c <MX_I2C1_Init+0x50>)
 8000622:	4a13      	ldr	r2, [pc, #76]	; (8000670 <MX_I2C1_Init+0x54>)
 8000624:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000626:	4b11      	ldr	r3, [pc, #68]	; (800066c <MX_I2C1_Init+0x50>)
 8000628:	4a12      	ldr	r2, [pc, #72]	; (8000674 <MX_I2C1_Init+0x58>)
 800062a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800062c:	4b0f      	ldr	r3, [pc, #60]	; (800066c <MX_I2C1_Init+0x50>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000632:	4b0e      	ldr	r3, [pc, #56]	; (800066c <MX_I2C1_Init+0x50>)
 8000634:	2200      	movs	r2, #0
 8000636:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000638:	4b0c      	ldr	r3, [pc, #48]	; (800066c <MX_I2C1_Init+0x50>)
 800063a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800063e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000640:	4b0a      	ldr	r3, [pc, #40]	; (800066c <MX_I2C1_Init+0x50>)
 8000642:	2200      	movs	r2, #0
 8000644:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000646:	4b09      	ldr	r3, [pc, #36]	; (800066c <MX_I2C1_Init+0x50>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800064c:	4b07      	ldr	r3, [pc, #28]	; (800066c <MX_I2C1_Init+0x50>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000652:	4b06      	ldr	r3, [pc, #24]	; (800066c <MX_I2C1_Init+0x50>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000658:	4804      	ldr	r0, [pc, #16]	; (800066c <MX_I2C1_Init+0x50>)
 800065a:	f002 fbeb 	bl	8002e34 <HAL_I2C_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000664:	f000 fa06 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}
 800066c:	200000a0 	.word	0x200000a0
 8000670:	40005400 	.word	0x40005400
 8000674:	000186a0 	.word	0x000186a0

08000678 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800067c:	4b13      	ldr	r3, [pc, #76]	; (80006cc <MX_I2S3_Init+0x54>)
 800067e:	4a14      	ldr	r2, [pc, #80]	; (80006d0 <MX_I2S3_Init+0x58>)
 8000680:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000682:	4b12      	ldr	r3, [pc, #72]	; (80006cc <MX_I2S3_Init+0x54>)
 8000684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000688:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <MX_I2S3_Init+0x54>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000690:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <MX_I2S3_Init+0x54>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000696:	4b0d      	ldr	r3, [pc, #52]	; (80006cc <MX_I2S3_Init+0x54>)
 8000698:	f44f 7200 	mov.w	r2, #512	; 0x200
 800069c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800069e:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <MX_I2S3_Init+0x54>)
 80006a0:	4a0c      	ldr	r2, [pc, #48]	; (80006d4 <MX_I2S3_Init+0x5c>)
 80006a2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <MX_I2S3_Init+0x54>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006aa:	4b08      	ldr	r3, [pc, #32]	; (80006cc <MX_I2S3_Init+0x54>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <MX_I2S3_Init+0x54>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006b6:	4805      	ldr	r0, [pc, #20]	; (80006cc <MX_I2S3_Init+0x54>)
 80006b8:	f002 fd00 	bl	80030bc <HAL_I2S_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006c2:	f000 f9d7 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	200000f4 	.word	0x200000f4
 80006d0:	40003c00 	.word	0x40003c00
 80006d4:	00017700 	.word	0x00017700

080006d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006dc:	4b17      	ldr	r3, [pc, #92]	; (800073c <MX_SPI1_Init+0x64>)
 80006de:	4a18      	ldr	r2, [pc, #96]	; (8000740 <MX_SPI1_Init+0x68>)
 80006e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006e2:	4b16      	ldr	r3, [pc, #88]	; (800073c <MX_SPI1_Init+0x64>)
 80006e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ea:	4b14      	ldr	r3, [pc, #80]	; (800073c <MX_SPI1_Init+0x64>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006f0:	4b12      	ldr	r3, [pc, #72]	; (800073c <MX_SPI1_Init+0x64>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_SPI1_Init+0x64>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_SPI1_Init+0x64>)
 80006fe:	2200      	movs	r2, #0
 8000700:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_SPI1_Init+0x64>)
 8000704:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000708:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800070a:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_SPI1_Init+0x64>)
 800070c:	2200      	movs	r2, #0
 800070e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000710:	4b0a      	ldr	r3, [pc, #40]	; (800073c <MX_SPI1_Init+0x64>)
 8000712:	2200      	movs	r2, #0
 8000714:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_SPI1_Init+0x64>)
 8000718:	2200      	movs	r2, #0
 800071a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800071c:	4b07      	ldr	r3, [pc, #28]	; (800073c <MX_SPI1_Init+0x64>)
 800071e:	2200      	movs	r2, #0
 8000720:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_SPI1_Init+0x64>)
 8000724:	220a      	movs	r2, #10
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000728:	4804      	ldr	r0, [pc, #16]	; (800073c <MX_SPI1_Init+0x64>)
 800072a:	f003 ff2b 	bl	8004584 <HAL_SPI_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000734:	f000 f99e 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	2000013c 	.word	0x2000013c
 8000740:	40013000 	.word	0x40013000

08000744 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800074a:	463b      	mov	r3, r7
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000752:	4b19      	ldr	r3, [pc, #100]	; (80007b8 <MX_TIM7_Init+0x74>)
 8000754:	4a19      	ldr	r2, [pc, #100]	; (80007bc <MX_TIM7_Init+0x78>)
 8000756:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 8000758:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <MX_TIM7_Init+0x74>)
 800075a:	2253      	movs	r2, #83	; 0x53
 800075c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800075e:	4b16      	ldr	r3, [pc, #88]	; (80007b8 <MX_TIM7_Init+0x74>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8000764:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <MX_TIM7_Init+0x74>)
 8000766:	f240 32e7 	movw	r2, #999	; 0x3e7
 800076a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <MX_TIM7_Init+0x74>)
 800076e:	2200      	movs	r2, #0
 8000770:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000772:	4811      	ldr	r0, [pc, #68]	; (80007b8 <MX_TIM7_Init+0x74>)
 8000774:	f003 ff8f 	bl	8004696 <HAL_TIM_Base_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800077e:	f000 f979 	bl	8000a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000782:	2320      	movs	r3, #32
 8000784:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800078a:	463b      	mov	r3, r7
 800078c:	4619      	mov	r1, r3
 800078e:	480a      	ldr	r0, [pc, #40]	; (80007b8 <MX_TIM7_Init+0x74>)
 8000790:	f004 fa12 	bl	8004bb8 <HAL_TIMEx_MasterConfigSynchronization>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800079a:	f000 f96b 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  __HAL_TIM_ENABLE_IT(&htim7, TIM_IT_UPDATE);
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <MX_TIM7_Init+0x74>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	68da      	ldr	r2, [r3, #12]
 80007a4:	4b04      	ldr	r3, [pc, #16]	; (80007b8 <MX_TIM7_Init+0x74>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f042 0201 	orr.w	r2, r2, #1
 80007ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END TIM7_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000194 	.word	0x20000194
 80007bc:	40001400 	.word	0x40001400

080007c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08c      	sub	sp, #48	; 0x30
 80007c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c6:	f107 031c 	add.w	r3, r7, #28
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
 80007d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	61bb      	str	r3, [r7, #24]
 80007da:	4b72      	ldr	r3, [pc, #456]	; (80009a4 <MX_GPIO_Init+0x1e4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a71      	ldr	r2, [pc, #452]	; (80009a4 <MX_GPIO_Init+0x1e4>)
 80007e0:	f043 0310 	orr.w	r3, r3, #16
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b6f      	ldr	r3, [pc, #444]	; (80009a4 <MX_GPIO_Init+0x1e4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0310 	and.w	r3, r3, #16
 80007ee:	61bb      	str	r3, [r7, #24]
 80007f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
 80007f6:	4b6b      	ldr	r3, [pc, #428]	; (80009a4 <MX_GPIO_Init+0x1e4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a6a      	ldr	r2, [pc, #424]	; (80009a4 <MX_GPIO_Init+0x1e4>)
 80007fc:	f043 0304 	orr.w	r3, r3, #4
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b68      	ldr	r3, [pc, #416]	; (80009a4 <MX_GPIO_Init+0x1e4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0304 	and.w	r3, r3, #4
 800080a:	617b      	str	r3, [r7, #20]
 800080c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]
 8000812:	4b64      	ldr	r3, [pc, #400]	; (80009a4 <MX_GPIO_Init+0x1e4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a63      	ldr	r2, [pc, #396]	; (80009a4 <MX_GPIO_Init+0x1e4>)
 8000818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b61      	ldr	r3, [pc, #388]	; (80009a4 <MX_GPIO_Init+0x1e4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	4b5d      	ldr	r3, [pc, #372]	; (80009a4 <MX_GPIO_Init+0x1e4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a5c      	ldr	r2, [pc, #368]	; (80009a4 <MX_GPIO_Init+0x1e4>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b5a      	ldr	r3, [pc, #360]	; (80009a4 <MX_GPIO_Init+0x1e4>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	4b56      	ldr	r3, [pc, #344]	; (80009a4 <MX_GPIO_Init+0x1e4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a55      	ldr	r2, [pc, #340]	; (80009a4 <MX_GPIO_Init+0x1e4>)
 8000850:	f043 0302 	orr.w	r3, r3, #2
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b53      	ldr	r3, [pc, #332]	; (80009a4 <MX_GPIO_Init+0x1e4>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0302 	and.w	r3, r3, #2
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	4b4f      	ldr	r3, [pc, #316]	; (80009a4 <MX_GPIO_Init+0x1e4>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a4e      	ldr	r2, [pc, #312]	; (80009a4 <MX_GPIO_Init+0x1e4>)
 800086c:	f043 0308 	orr.w	r3, r3, #8
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b4c      	ldr	r3, [pc, #304]	; (80009a4 <MX_GPIO_Init+0x1e4>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0308 	and.w	r3, r3, #8
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	2108      	movs	r1, #8
 8000882:	4849      	ldr	r0, [pc, #292]	; (80009a8 <MX_GPIO_Init+0x1e8>)
 8000884:	f000 fe98 	bl	80015b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000888:	2201      	movs	r2, #1
 800088a:	2101      	movs	r1, #1
 800088c:	4847      	ldr	r0, [pc, #284]	; (80009ac <MX_GPIO_Init+0x1ec>)
 800088e:	f000 fe93 	bl	80015b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000892:	2200      	movs	r2, #0
 8000894:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000898:	4845      	ldr	r0, [pc, #276]	; (80009b0 <MX_GPIO_Init+0x1f0>)
 800089a:	f000 fe8d 	bl	80015b8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800089e:	2308      	movs	r3, #8
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a2:	2301      	movs	r3, #1
 80008a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2300      	movs	r3, #0
 80008ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	4619      	mov	r1, r3
 80008b4:	483c      	ldr	r0, [pc, #240]	; (80009a8 <MX_GPIO_Init+0x1e8>)
 80008b6:	f000 fccb 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008ba:	2301      	movs	r3, #1
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008be:	2301      	movs	r3, #1
 80008c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	4619      	mov	r1, r3
 80008d0:	4836      	ldr	r0, [pc, #216]	; (80009ac <MX_GPIO_Init+0x1ec>)
 80008d2:	f000 fcbd 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008d6:	2308      	movs	r3, #8
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008da:	2302      	movs	r3, #2
 80008dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008e6:	2305      	movs	r3, #5
 80008e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	482e      	ldr	r0, [pc, #184]	; (80009ac <MX_GPIO_Init+0x1ec>)
 80008f2:	f000 fcad 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008f6:	2301      	movs	r3, #1
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008fa:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	4619      	mov	r1, r3
 800090a:	482a      	ldr	r0, [pc, #168]	; (80009b4 <MX_GPIO_Init+0x1f4>)
 800090c:	f000 fca0 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000910:	2304      	movs	r3, #4
 8000912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000914:	2300      	movs	r3, #0
 8000916:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800091c:	f107 031c 	add.w	r3, r7, #28
 8000920:	4619      	mov	r1, r3
 8000922:	4825      	ldr	r0, [pc, #148]	; (80009b8 <MX_GPIO_Init+0x1f8>)
 8000924:	f000 fc94 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000928:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092e:	2302      	movs	r3, #2
 8000930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800093a:	2305      	movs	r3, #5
 800093c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4619      	mov	r1, r3
 8000944:	481c      	ldr	r0, [pc, #112]	; (80009b8 <MX_GPIO_Init+0x1f8>)
 8000946:	f000 fc83 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800094a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800094e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000950:	2301      	movs	r3, #1
 8000952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000958:	2300      	movs	r3, #0
 800095a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800095c:	f107 031c 	add.w	r3, r7, #28
 8000960:	4619      	mov	r1, r3
 8000962:	4813      	ldr	r0, [pc, #76]	; (80009b0 <MX_GPIO_Init+0x1f0>)
 8000964:	f000 fc74 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000968:	2320      	movs	r3, #32
 800096a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096c:	2300      	movs	r3, #0
 800096e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	4619      	mov	r1, r3
 800097a:	480d      	ldr	r0, [pc, #52]	; (80009b0 <MX_GPIO_Init+0x1f0>)
 800097c:	f000 fc68 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000980:	2302      	movs	r3, #2
 8000982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000984:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	4804      	ldr	r0, [pc, #16]	; (80009a8 <MX_GPIO_Init+0x1e8>)
 8000996:	f000 fc5b 	bl	8001250 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800099a:	bf00      	nop
 800099c:	3730      	adds	r7, #48	; 0x30
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40021000 	.word	0x40021000
 80009ac:	40020800 	.word	0x40020800
 80009b0:	40020c00 	.word	0x40020c00
 80009b4:	40020000 	.word	0x40020000
 80009b8:	40020400 	.word	0x40020400

080009bc <BlinkyLEDTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_BlinkyLEDTask */
void BlinkyLEDTask(void *argument)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80009c4:	f00a fc9a 	bl	800b2fc <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  /* PD13 */
	  if ((ms_counter % 125) == 0)
 80009c8:	4b1c      	ldr	r3, [pc, #112]	; (8000a3c <BlinkyLEDTask+0x80>)
 80009ca:	6819      	ldr	r1, [r3, #0]
 80009cc:	4b1c      	ldr	r3, [pc, #112]	; (8000a40 <BlinkyLEDTask+0x84>)
 80009ce:	fba3 2301 	umull	r2, r3, r3, r1
 80009d2:	08da      	lsrs	r2, r3, #3
 80009d4:	4613      	mov	r3, r2
 80009d6:	015b      	lsls	r3, r3, #5
 80009d8:	1a9b      	subs	r3, r3, r2
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	4413      	add	r3, r2
 80009de:	1aca      	subs	r2, r1, r3
 80009e0:	2a00      	cmp	r2, #0
 80009e2:	d104      	bne.n	80009ee <BlinkyLEDTask+0x32>
	  {
	    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80009e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009e8:	4816      	ldr	r0, [pc, #88]	; (8000a44 <BlinkyLEDTask+0x88>)
 80009ea:	f000 fdfe 	bl	80015ea <HAL_GPIO_TogglePin>
	  }

	  /* PD12 */
	  if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) != GPIO_PIN_RESET)
 80009ee:	2101      	movs	r1, #1
 80009f0:	4815      	ldr	r0, [pc, #84]	; (8000a48 <BlinkyLEDTask+0x8c>)
 80009f2:	f000 fdc9 	bl	8001588 <HAL_GPIO_ReadPin>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d012      	beq.n	8000a22 <BlinkyLEDTask+0x66>
	  {
	    if (!osTimerIsRunning(blinkySWTimerHandle))
 80009fc:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <BlinkyLEDTask+0x90>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4618      	mov	r0, r3
 8000a02:	f007 fd67 	bl	80084d4 <osTimerIsRunning>
		  /* Start SWTimer as soon as user btn is pressed */
		  /* 500 ticks are equal to 500ms as the tick rate of the RTOS kernel is set to 1KHz */
		  //osTimerStart(blinkySWTimerHandle, 500);
		}
		/* SWTimer sets a flag every 500ms */
		if (blinkyTrigger)
 8000a06:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <BlinkyLEDTask+0x94>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d0db      	beq.n	80009c8 <BlinkyLEDTask+0xc>
		{
		  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000a10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a14:	480b      	ldr	r0, [pc, #44]	; (8000a44 <BlinkyLEDTask+0x88>)
 8000a16:	f000 fde8 	bl	80015ea <HAL_GPIO_TogglePin>
		  //osDelay(500);
		  blinkyTrigger = 0;
 8000a1a:	4b0d      	ldr	r3, [pc, #52]	; (8000a50 <BlinkyLEDTask+0x94>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	701a      	strb	r2, [r3, #0]
 8000a20:	e7d2      	b.n	80009c8 <BlinkyLEDTask+0xc>
		//osDelay(500);
	  }
	  else
	  {
	    /* Stop SWTimer */
		if (osTimerIsRunning(blinkySWTimerHandle))
 8000a22:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <BlinkyLEDTask+0x90>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4618      	mov	r0, r3
 8000a28:	f007 fd54 	bl	80084d4 <osTimerIsRunning>
		{
		  //osTimerStop(blinkySWTimerHandle);
		}
		//blinkyTrigger = 1;
	    HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a32:	4804      	ldr	r0, [pc, #16]	; (8000a44 <BlinkyLEDTask+0x88>)
 8000a34:	f000 fdc0 	bl	80015b8 <HAL_GPIO_WritePin>
	  if ((ms_counter % 125) == 0)
 8000a38:	e7c6      	b.n	80009c8 <BlinkyLEDTask+0xc>
 8000a3a:	bf00      	nop
 8000a3c:	200001e4 	.word	0x200001e4
 8000a40:	10624dd3 	.word	0x10624dd3
 8000a44:	40020c00 	.word	0x40020c00
 8000a48:	40020000 	.word	0x40020000
 8000a4c:	200001e0 	.word	0x200001e0
 8000a50:	20000000 	.word	0x20000000

08000a54 <blinkyTimerCallback>:
  /* USER CODE END 5 */
}

/* blinkyTimerCallback function */
void blinkyTimerCallback(void *argument)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blinkyTimerCallback */
  blinkyTrigger = 1;
 8000a5c:	4b04      	ldr	r3, [pc, #16]	; (8000a70 <blinkyTimerCallback+0x1c>)
 8000a5e:	2201      	movs	r2, #1
 8000a60:	701a      	strb	r2, [r3, #0]
  /* USER CODE END blinkyTimerCallback */
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	20000000 	.word	0x20000000

08000a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a78:	b672      	cpsid	i
}
 8000a7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <Error_Handler+0x8>
	...

08000a80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	607b      	str	r3, [r7, #4]
 8000a8a:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <HAL_MspInit+0x54>)
 8000a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8e:	4a11      	ldr	r2, [pc, #68]	; (8000ad4 <HAL_MspInit+0x54>)
 8000a90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a94:	6453      	str	r3, [r2, #68]	; 0x44
 8000a96:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <HAL_MspInit+0x54>)
 8000a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	603b      	str	r3, [r7, #0]
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <HAL_MspInit+0x54>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ad4 <HAL_MspInit+0x54>)
 8000aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab2:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <HAL_MspInit+0x54>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	210f      	movs	r1, #15
 8000ac2:	f06f 0001 	mvn.w	r0, #1
 8000ac6:	f000 fb8c 	bl	80011e2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40023800 	.word	0x40023800

08000ad8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08a      	sub	sp, #40	; 0x28
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a19      	ldr	r2, [pc, #100]	; (8000b5c <HAL_I2C_MspInit+0x84>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d12c      	bne.n	8000b54 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <HAL_I2C_MspInit+0x88>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a17      	ldr	r2, [pc, #92]	; (8000b60 <HAL_I2C_MspInit+0x88>)
 8000b04:	f043 0302 	orr.w	r3, r3, #2
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <HAL_I2C_MspInit+0x88>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0302 	and.w	r3, r3, #2
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b16:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b1c:	2312      	movs	r3, #18
 8000b1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b20:	2301      	movs	r3, #1
 8000b22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2300      	movs	r3, #0
 8000b26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b28:	2304      	movs	r3, #4
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	4619      	mov	r1, r3
 8000b32:	480c      	ldr	r0, [pc, #48]	; (8000b64 <HAL_I2C_MspInit+0x8c>)
 8000b34:	f000 fb8c 	bl	8001250 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <HAL_I2C_MspInit+0x88>)
 8000b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b40:	4a07      	ldr	r2, [pc, #28]	; (8000b60 <HAL_I2C_MspInit+0x88>)
 8000b42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b46:	6413      	str	r3, [r2, #64]	; 0x40
 8000b48:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <HAL_I2C_MspInit+0x88>)
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b54:	bf00      	nop
 8000b56:	3728      	adds	r7, #40	; 0x28
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40005400 	.word	0x40005400
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40020400 	.word	0x40020400

08000b68 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08e      	sub	sp, #56	; 0x38
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a31      	ldr	r2, [pc, #196]	; (8000c58 <HAL_I2S_MspInit+0xf0>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d15a      	bne.n	8000c4e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b9c:	23c0      	movs	r3, #192	; 0xc0
 8000b9e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f003 fbab 	bl	8004304 <HAL_RCCEx_PeriphCLKConfig>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000bb4:	f7ff ff5e 	bl	8000a74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000bb8:	2300      	movs	r3, #0
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	4b27      	ldr	r3, [pc, #156]	; (8000c5c <HAL_I2S_MspInit+0xf4>)
 8000bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc0:	4a26      	ldr	r2, [pc, #152]	; (8000c5c <HAL_I2S_MspInit+0xf4>)
 8000bc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bc6:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc8:	4b24      	ldr	r3, [pc, #144]	; (8000c5c <HAL_I2S_MspInit+0xf4>)
 8000bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bd0:	613b      	str	r3, [r7, #16]
 8000bd2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	4b20      	ldr	r3, [pc, #128]	; (8000c5c <HAL_I2S_MspInit+0xf4>)
 8000bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bdc:	4a1f      	ldr	r2, [pc, #124]	; (8000c5c <HAL_I2S_MspInit+0xf4>)
 8000bde:	f043 0301 	orr.w	r3, r3, #1
 8000be2:	6313      	str	r3, [r2, #48]	; 0x30
 8000be4:	4b1d      	ldr	r3, [pc, #116]	; (8000c5c <HAL_I2S_MspInit+0xf4>)
 8000be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be8:	f003 0301 	and.w	r3, r3, #1
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60bb      	str	r3, [r7, #8]
 8000bf4:	4b19      	ldr	r3, [pc, #100]	; (8000c5c <HAL_I2S_MspInit+0xf4>)
 8000bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf8:	4a18      	ldr	r2, [pc, #96]	; (8000c5c <HAL_I2S_MspInit+0xf4>)
 8000bfa:	f043 0304 	orr.w	r3, r3, #4
 8000bfe:	6313      	str	r3, [r2, #48]	; 0x30
 8000c00:	4b16      	ldr	r3, [pc, #88]	; (8000c5c <HAL_I2S_MspInit+0xf4>)
 8000c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c04:	f003 0304 	and.w	r3, r3, #4
 8000c08:	60bb      	str	r3, [r7, #8]
 8000c0a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c0c:	2310      	movs	r3, #16
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c10:	2302      	movs	r3, #2
 8000c12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c1c:	2306      	movs	r3, #6
 8000c1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c24:	4619      	mov	r1, r3
 8000c26:	480e      	ldr	r0, [pc, #56]	; (8000c60 <HAL_I2S_MspInit+0xf8>)
 8000c28:	f000 fb12 	bl	8001250 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c2c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c32:	2302      	movs	r3, #2
 8000c34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c3e:	2306      	movs	r3, #6
 8000c40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c46:	4619      	mov	r1, r3
 8000c48:	4806      	ldr	r0, [pc, #24]	; (8000c64 <HAL_I2S_MspInit+0xfc>)
 8000c4a:	f000 fb01 	bl	8001250 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c4e:	bf00      	nop
 8000c50:	3738      	adds	r7, #56	; 0x38
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40003c00 	.word	0x40003c00
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40020000 	.word	0x40020000
 8000c64:	40020800 	.word	0x40020800

08000c68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08a      	sub	sp, #40	; 0x28
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a19      	ldr	r2, [pc, #100]	; (8000cec <HAL_SPI_MspInit+0x84>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d12b      	bne.n	8000ce2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	613b      	str	r3, [r7, #16]
 8000c8e:	4b18      	ldr	r3, [pc, #96]	; (8000cf0 <HAL_SPI_MspInit+0x88>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c92:	4a17      	ldr	r2, [pc, #92]	; (8000cf0 <HAL_SPI_MspInit+0x88>)
 8000c94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c98:	6453      	str	r3, [r2, #68]	; 0x44
 8000c9a:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <HAL_SPI_MspInit+0x88>)
 8000c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <HAL_SPI_MspInit+0x88>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a10      	ldr	r2, [pc, #64]	; (8000cf0 <HAL_SPI_MspInit+0x88>)
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <HAL_SPI_MspInit+0x88>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000cc2:	23e0      	movs	r3, #224	; 0xe0
 8000cc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cd2:	2305      	movs	r3, #5
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd6:	f107 0314 	add.w	r3, r7, #20
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <HAL_SPI_MspInit+0x8c>)
 8000cde:	f000 fab7 	bl	8001250 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ce2:	bf00      	nop
 8000ce4:	3728      	adds	r7, #40	; 0x28
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40013000 	.word	0x40013000
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40020000 	.word	0x40020000

08000cf8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a0e      	ldr	r2, [pc, #56]	; (8000d40 <HAL_TIM_Base_MspInit+0x48>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d115      	bne.n	8000d36 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	4b0d      	ldr	r3, [pc, #52]	; (8000d44 <HAL_TIM_Base_MspInit+0x4c>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	4a0c      	ldr	r2, [pc, #48]	; (8000d44 <HAL_TIM_Base_MspInit+0x4c>)
 8000d14:	f043 0320 	orr.w	r3, r3, #32
 8000d18:	6413      	str	r3, [r2, #64]	; 0x40
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <HAL_TIM_Base_MspInit+0x4c>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1e:	f003 0320 	and.w	r3, r3, #32
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2105      	movs	r1, #5
 8000d2a:	2037      	movs	r0, #55	; 0x37
 8000d2c:	f000 fa59 	bl	80011e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000d30:	2037      	movs	r0, #55	; 0x37
 8000d32:	f000 fa72 	bl	800121a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000d36:	bf00      	nop
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40001400 	.word	0x40001400
 8000d44:	40023800 	.word	0x40023800

08000d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <NMI_Handler+0x4>

08000d4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d52:	e7fe      	b.n	8000d52 <HardFault_Handler+0x4>

08000d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <MemManage_Handler+0x4>

08000d5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d5e:	e7fe      	b.n	8000d5e <BusFault_Handler+0x4>

08000d60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <UsageFault_Handler+0x4>

08000d66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d78:	f000 f914 	bl	8000fa4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000d7c:	f009 f970 	bl	800a060 <xTaskGetSchedulerState>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d001      	beq.n	8000d8a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000d86:	f00a f83f 	bl	800ae08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
	...

08000d90 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000d94:	4804      	ldr	r0, [pc, #16]	; (8000da8 <TIM7_IRQHandler+0x18>)
 8000d96:	f003 fd35 	bl	8004804 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  ms_counter += 1;
 8000d9a:	4b04      	ldr	r3, [pc, #16]	; (8000dac <TIM7_IRQHandler+0x1c>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	4a02      	ldr	r2, [pc, #8]	; (8000dac <TIM7_IRQHandler+0x1c>)
 8000da2:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM7_IRQn 1 */
}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000194 	.word	0x20000194
 8000dac:	200001e4 	.word	0x200001e4

08000db0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000db4:	4802      	ldr	r0, [pc, #8]	; (8000dc0 <OTG_FS_IRQHandler+0x10>)
 8000db6:	f000 fe9d 	bl	8001af4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20004f50 	.word	0x20004f50

08000dc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dcc:	4a14      	ldr	r2, [pc, #80]	; (8000e20 <_sbrk+0x5c>)
 8000dce:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <_sbrk+0x60>)
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dd8:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <_sbrk+0x64>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d102      	bne.n	8000de6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000de0:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <_sbrk+0x64>)
 8000de2:	4a12      	ldr	r2, [pc, #72]	; (8000e2c <_sbrk+0x68>)
 8000de4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000de6:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <_sbrk+0x64>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4413      	add	r3, r2
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d207      	bcs.n	8000e04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000df4:	f00a fe58 	bl	800baa8 <__errno>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	220c      	movs	r2, #12
 8000dfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000e02:	e009      	b.n	8000e18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e04:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <_sbrk+0x64>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e0a:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <_sbrk+0x64>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4413      	add	r3, r2
 8000e12:	4a05      	ldr	r2, [pc, #20]	; (8000e28 <_sbrk+0x64>)
 8000e14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e16:	68fb      	ldr	r3, [r7, #12]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20020000 	.word	0x20020000
 8000e24:	00000400 	.word	0x00000400
 8000e28:	200001e8 	.word	0x200001e8
 8000e2c:	200053a0 	.word	0x200053a0

08000e30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <SystemInit+0x20>)
 8000e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e3a:	4a05      	ldr	r2, [pc, #20]	; (8000e50 <SystemInit+0x20>)
 8000e3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e58:	480d      	ldr	r0, [pc, #52]	; (8000e90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e5a:	490e      	ldr	r1, [pc, #56]	; (8000e94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e5c:	4a0e      	ldr	r2, [pc, #56]	; (8000e98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e60:	e002      	b.n	8000e68 <LoopCopyDataInit>

08000e62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e66:	3304      	adds	r3, #4

08000e68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e6c:	d3f9      	bcc.n	8000e62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e6e:	4a0b      	ldr	r2, [pc, #44]	; (8000e9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e70:	4c0b      	ldr	r4, [pc, #44]	; (8000ea0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e74:	e001      	b.n	8000e7a <LoopFillZerobss>

08000e76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e78:	3204      	adds	r2, #4

08000e7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e7c:	d3fb      	bcc.n	8000e76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e7e:	f7ff ffd7 	bl	8000e30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e82:	f00a fe17 	bl	800bab4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e86:	f7ff fb21 	bl	80004cc <main>
  bx  lr    
 8000e8a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e94:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000e98:	0800bc6c 	.word	0x0800bc6c
  ldr r2, =_sbss
 8000e9c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000ea0:	2000539c 	.word	0x2000539c

08000ea4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea4:	e7fe      	b.n	8000ea4 <ADC_IRQHandler>
	...

08000ea8 <TIM6_DAC_IRQHandler>:
#include "mcpr_timer.h"
#include <stdbool.h>

// IRQ Handler fuer TIM6, welche fuer die delay funktionen genutzt wird
void TIM6_DAC_IRQHandler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
	if (TIM6->SR & TIM_SR_UIF)
 8000eac:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <TIM6_DAC_IRQHandler+0x50>)
 8000eae:	691b      	ldr	r3, [r3, #16]
 8000eb0:	f003 0301 	and.w	r3, r3, #1
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d00c      	beq.n	8000ed2 <TIM6_DAC_IRQHandler+0x2a>
	{
		// Resetten des Status Registers ansonsten wird die Service Routine sofort neu ausgeloest
		// gilt fuer alle Interrupts
		TIM6->SR &= ~TIM_SR_UIF;
 8000eb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <TIM6_DAC_IRQHandler+0x50>)
 8000eba:	691b      	ldr	r3, [r3, #16]
 8000ebc:	4a0e      	ldr	r2, [pc, #56]	; (8000ef8 <TIM6_DAC_IRQHandler+0x50>)
 8000ebe:	f023 0301 	bic.w	r3, r3, #1
 8000ec2:	6113      	str	r3, [r2, #16]
		resetCnt++;
 8000ec4:	4b0d      	ldr	r3, [pc, #52]	; (8000efc <TIM6_DAC_IRQHandler+0x54>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	3301      	adds	r3, #1
 8000ecc:	b2da      	uxtb	r2, r3
 8000ece:	4b0b      	ldr	r3, [pc, #44]	; (8000efc <TIM6_DAC_IRQHandler+0x54>)
 8000ed0:	701a      	strb	r2, [r3, #0]
	}
	if (resetCnt == 2)
 8000ed2:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <TIM6_DAC_IRQHandler+0x54>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d108      	bne.n	8000eee <TIM6_DAC_IRQHandler+0x46>
	{
		resetCnt = 0;
 8000edc:	4b07      	ldr	r3, [pc, #28]	; (8000efc <TIM6_DAC_IRQHandler+0x54>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	701a      	strb	r2, [r3, #0]
		//Beende den Timer
		TIM6->CR1 &= ~TIM_CR1_CEN;
 8000ee2:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <TIM6_DAC_IRQHandler+0x50>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a04      	ldr	r2, [pc, #16]	; (8000ef8 <TIM6_DAC_IRQHandler+0x50>)
 8000ee8:	f023 0301 	bic.w	r3, r3, #1
 8000eec:	6013      	str	r3, [r2, #0]
	}
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	40001000 	.word	0x40001000
 8000efc:	200001ec 	.word	0x200001ec

08000f00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f04:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <HAL_Init+0x40>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a0d      	ldr	r2, [pc, #52]	; (8000f40 <HAL_Init+0x40>)
 8000f0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f10:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <HAL_Init+0x40>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a0a      	ldr	r2, [pc, #40]	; (8000f40 <HAL_Init+0x40>)
 8000f16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f1c:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <HAL_Init+0x40>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a07      	ldr	r2, [pc, #28]	; (8000f40 <HAL_Init+0x40>)
 8000f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f28:	2003      	movs	r0, #3
 8000f2a:	f000 f94f 	bl	80011cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f2e:	200f      	movs	r0, #15
 8000f30:	f000 f808 	bl	8000f44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f34:	f7ff fda4 	bl	8000a80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40023c00 	.word	0x40023c00

08000f44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <HAL_InitTick+0x54>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <HAL_InitTick+0x58>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	4619      	mov	r1, r3
 8000f56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 f967 	bl	8001236 <HAL_SYSTICK_Config>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e00e      	b.n	8000f90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2b0f      	cmp	r3, #15
 8000f76:	d80a      	bhi.n	8000f8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	6879      	ldr	r1, [r7, #4]
 8000f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f80:	f000 f92f 	bl	80011e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f84:	4a06      	ldr	r2, [pc, #24]	; (8000fa0 <HAL_InitTick+0x5c>)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	e000      	b.n	8000f90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000004 	.word	0x20000004
 8000f9c:	2000000c 	.word	0x2000000c
 8000fa0:	20000008 	.word	0x20000008

08000fa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <HAL_IncTick+0x20>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	461a      	mov	r2, r3
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <HAL_IncTick+0x24>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	4a04      	ldr	r2, [pc, #16]	; (8000fc8 <HAL_IncTick+0x24>)
 8000fb6:	6013      	str	r3, [r2, #0]
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	2000000c 	.word	0x2000000c
 8000fc8:	200001f0 	.word	0x200001f0

08000fcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd0:	4b03      	ldr	r3, [pc, #12]	; (8000fe0 <HAL_GetTick+0x14>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	200001f0 	.word	0x200001f0

08000fe4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fec:	f7ff ffee 	bl	8000fcc <HAL_GetTick>
 8000ff0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ffc:	d005      	beq.n	800100a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ffe:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <HAL_Delay+0x44>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	461a      	mov	r2, r3
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	4413      	add	r3, r2
 8001008:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800100a:	bf00      	nop
 800100c:	f7ff ffde 	bl	8000fcc <HAL_GetTick>
 8001010:	4602      	mov	r2, r0
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	68fa      	ldr	r2, [r7, #12]
 8001018:	429a      	cmp	r2, r3
 800101a:	d8f7      	bhi.n	800100c <HAL_Delay+0x28>
  {
  }
}
 800101c:	bf00      	nop
 800101e:	bf00      	nop
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	2000000c 	.word	0x2000000c

0800102c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800103c:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <__NVIC_SetPriorityGrouping+0x44>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001042:	68ba      	ldr	r2, [r7, #8]
 8001044:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001048:	4013      	ands	r3, r2
 800104a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001054:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800105c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800105e:	4a04      	ldr	r2, [pc, #16]	; (8001070 <__NVIC_SetPriorityGrouping+0x44>)
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	60d3      	str	r3, [r2, #12]
}
 8001064:	bf00      	nop
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001078:	4b04      	ldr	r3, [pc, #16]	; (800108c <__NVIC_GetPriorityGrouping+0x18>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	0a1b      	lsrs	r3, r3, #8
 800107e:	f003 0307 	and.w	r3, r3, #7
}
 8001082:	4618      	mov	r0, r3
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800109a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	db0b      	blt.n	80010ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	f003 021f 	and.w	r2, r3, #31
 80010a8:	4907      	ldr	r1, [pc, #28]	; (80010c8 <__NVIC_EnableIRQ+0x38>)
 80010aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ae:	095b      	lsrs	r3, r3, #5
 80010b0:	2001      	movs	r0, #1
 80010b2:	fa00 f202 	lsl.w	r2, r0, r2
 80010b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	e000e100 	.word	0xe000e100

080010cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	6039      	str	r1, [r7, #0]
 80010d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	db0a      	blt.n	80010f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	490c      	ldr	r1, [pc, #48]	; (8001118 <__NVIC_SetPriority+0x4c>)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	0112      	lsls	r2, r2, #4
 80010ec:	b2d2      	uxtb	r2, r2
 80010ee:	440b      	add	r3, r1
 80010f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f4:	e00a      	b.n	800110c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	4908      	ldr	r1, [pc, #32]	; (800111c <__NVIC_SetPriority+0x50>)
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	f003 030f 	and.w	r3, r3, #15
 8001102:	3b04      	subs	r3, #4
 8001104:	0112      	lsls	r2, r2, #4
 8001106:	b2d2      	uxtb	r2, r2
 8001108:	440b      	add	r3, r1
 800110a:	761a      	strb	r2, [r3, #24]
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000e100 	.word	0xe000e100
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001120:	b480      	push	{r7}
 8001122:	b089      	sub	sp, #36	; 0x24
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	f1c3 0307 	rsb	r3, r3, #7
 800113a:	2b04      	cmp	r3, #4
 800113c:	bf28      	it	cs
 800113e:	2304      	movcs	r3, #4
 8001140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	3304      	adds	r3, #4
 8001146:	2b06      	cmp	r3, #6
 8001148:	d902      	bls.n	8001150 <NVIC_EncodePriority+0x30>
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	3b03      	subs	r3, #3
 800114e:	e000      	b.n	8001152 <NVIC_EncodePriority+0x32>
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001154:	f04f 32ff 	mov.w	r2, #4294967295
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	43da      	mvns	r2, r3
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	401a      	ands	r2, r3
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001168:	f04f 31ff 	mov.w	r1, #4294967295
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	fa01 f303 	lsl.w	r3, r1, r3
 8001172:	43d9      	mvns	r1, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001178:	4313      	orrs	r3, r2
         );
}
 800117a:	4618      	mov	r0, r3
 800117c:	3724      	adds	r7, #36	; 0x24
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
	...

08001188 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3b01      	subs	r3, #1
 8001194:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001198:	d301      	bcc.n	800119e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800119a:	2301      	movs	r3, #1
 800119c:	e00f      	b.n	80011be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800119e:	4a0a      	ldr	r2, [pc, #40]	; (80011c8 <SysTick_Config+0x40>)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011a6:	210f      	movs	r1, #15
 80011a8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ac:	f7ff ff8e 	bl	80010cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b0:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <SysTick_Config+0x40>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011b6:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <SysTick_Config+0x40>)
 80011b8:	2207      	movs	r2, #7
 80011ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	e000e010 	.word	0xe000e010

080011cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff ff29 	bl	800102c <__NVIC_SetPriorityGrouping>
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b086      	sub	sp, #24
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	4603      	mov	r3, r0
 80011ea:	60b9      	str	r1, [r7, #8]
 80011ec:	607a      	str	r2, [r7, #4]
 80011ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011f4:	f7ff ff3e 	bl	8001074 <__NVIC_GetPriorityGrouping>
 80011f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	68b9      	ldr	r1, [r7, #8]
 80011fe:	6978      	ldr	r0, [r7, #20]
 8001200:	f7ff ff8e 	bl	8001120 <NVIC_EncodePriority>
 8001204:	4602      	mov	r2, r0
 8001206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800120a:	4611      	mov	r1, r2
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ff5d 	bl	80010cc <__NVIC_SetPriority>
}
 8001212:	bf00      	nop
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	4603      	mov	r3, r0
 8001222:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ff31 	bl	8001090 <__NVIC_EnableIRQ>
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff ffa2 	bl	8001188 <SysTick_Config>
 8001244:	4603      	mov	r3, r0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001250:	b480      	push	{r7}
 8001252:	b089      	sub	sp, #36	; 0x24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800125e:	2300      	movs	r3, #0
 8001260:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001262:	2300      	movs	r3, #0
 8001264:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001266:	2300      	movs	r3, #0
 8001268:	61fb      	str	r3, [r7, #28]
 800126a:	e16b      	b.n	8001544 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800126c:	2201      	movs	r2, #1
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	697a      	ldr	r2, [r7, #20]
 800127c:	4013      	ands	r3, r2
 800127e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	429a      	cmp	r2, r3
 8001286:	f040 815a 	bne.w	800153e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f003 0303 	and.w	r3, r3, #3
 8001292:	2b01      	cmp	r3, #1
 8001294:	d005      	beq.n	80012a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d130      	bne.n	8001304 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	2203      	movs	r2, #3
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43db      	mvns	r3, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4013      	ands	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	68da      	ldr	r2, [r3, #12]
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012d8:	2201      	movs	r2, #1
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	091b      	lsrs	r3, r3, #4
 80012ee:	f003 0201 	and.w	r2, r3, #1
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f003 0303 	and.w	r3, r3, #3
 800130c:	2b03      	cmp	r3, #3
 800130e:	d017      	beq.n	8001340 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	2203      	movs	r2, #3
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4013      	ands	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	689a      	ldr	r2, [r3, #8]
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4313      	orrs	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f003 0303 	and.w	r3, r3, #3
 8001348:	2b02      	cmp	r3, #2
 800134a:	d123      	bne.n	8001394 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	08da      	lsrs	r2, r3, #3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3208      	adds	r2, #8
 8001354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001358:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	f003 0307 	and.w	r3, r3, #7
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	220f      	movs	r2, #15
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	43db      	mvns	r3, r3
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4013      	ands	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	691a      	ldr	r2, [r3, #16]
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4313      	orrs	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	08da      	lsrs	r2, r3, #3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	3208      	adds	r2, #8
 800138e:	69b9      	ldr	r1, [r7, #24]
 8001390:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	2203      	movs	r2, #3
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	43db      	mvns	r3, r3
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4013      	ands	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f003 0203 	and.w	r2, r3, #3
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4313      	orrs	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	f000 80b4 	beq.w	800153e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	4b60      	ldr	r3, [pc, #384]	; (800155c <HAL_GPIO_Init+0x30c>)
 80013dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013de:	4a5f      	ldr	r2, [pc, #380]	; (800155c <HAL_GPIO_Init+0x30c>)
 80013e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e4:	6453      	str	r3, [r2, #68]	; 0x44
 80013e6:	4b5d      	ldr	r3, [pc, #372]	; (800155c <HAL_GPIO_Init+0x30c>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013f2:	4a5b      	ldr	r2, [pc, #364]	; (8001560 <HAL_GPIO_Init+0x310>)
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	089b      	lsrs	r3, r3, #2
 80013f8:	3302      	adds	r3, #2
 80013fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	f003 0303 	and.w	r3, r3, #3
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	220f      	movs	r2, #15
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43db      	mvns	r3, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4013      	ands	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a52      	ldr	r2, [pc, #328]	; (8001564 <HAL_GPIO_Init+0x314>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d02b      	beq.n	8001476 <HAL_GPIO_Init+0x226>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a51      	ldr	r2, [pc, #324]	; (8001568 <HAL_GPIO_Init+0x318>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d025      	beq.n	8001472 <HAL_GPIO_Init+0x222>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a50      	ldr	r2, [pc, #320]	; (800156c <HAL_GPIO_Init+0x31c>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d01f      	beq.n	800146e <HAL_GPIO_Init+0x21e>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a4f      	ldr	r2, [pc, #316]	; (8001570 <HAL_GPIO_Init+0x320>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d019      	beq.n	800146a <HAL_GPIO_Init+0x21a>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a4e      	ldr	r2, [pc, #312]	; (8001574 <HAL_GPIO_Init+0x324>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d013      	beq.n	8001466 <HAL_GPIO_Init+0x216>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a4d      	ldr	r2, [pc, #308]	; (8001578 <HAL_GPIO_Init+0x328>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d00d      	beq.n	8001462 <HAL_GPIO_Init+0x212>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a4c      	ldr	r2, [pc, #304]	; (800157c <HAL_GPIO_Init+0x32c>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d007      	beq.n	800145e <HAL_GPIO_Init+0x20e>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a4b      	ldr	r2, [pc, #300]	; (8001580 <HAL_GPIO_Init+0x330>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d101      	bne.n	800145a <HAL_GPIO_Init+0x20a>
 8001456:	2307      	movs	r3, #7
 8001458:	e00e      	b.n	8001478 <HAL_GPIO_Init+0x228>
 800145a:	2308      	movs	r3, #8
 800145c:	e00c      	b.n	8001478 <HAL_GPIO_Init+0x228>
 800145e:	2306      	movs	r3, #6
 8001460:	e00a      	b.n	8001478 <HAL_GPIO_Init+0x228>
 8001462:	2305      	movs	r3, #5
 8001464:	e008      	b.n	8001478 <HAL_GPIO_Init+0x228>
 8001466:	2304      	movs	r3, #4
 8001468:	e006      	b.n	8001478 <HAL_GPIO_Init+0x228>
 800146a:	2303      	movs	r3, #3
 800146c:	e004      	b.n	8001478 <HAL_GPIO_Init+0x228>
 800146e:	2302      	movs	r3, #2
 8001470:	e002      	b.n	8001478 <HAL_GPIO_Init+0x228>
 8001472:	2301      	movs	r3, #1
 8001474:	e000      	b.n	8001478 <HAL_GPIO_Init+0x228>
 8001476:	2300      	movs	r3, #0
 8001478:	69fa      	ldr	r2, [r7, #28]
 800147a:	f002 0203 	and.w	r2, r2, #3
 800147e:	0092      	lsls	r2, r2, #2
 8001480:	4093      	lsls	r3, r2
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4313      	orrs	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001488:	4935      	ldr	r1, [pc, #212]	; (8001560 <HAL_GPIO_Init+0x310>)
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	089b      	lsrs	r3, r3, #2
 800148e:	3302      	adds	r3, #2
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001496:	4b3b      	ldr	r3, [pc, #236]	; (8001584 <HAL_GPIO_Init+0x334>)
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	43db      	mvns	r3, r3
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	4013      	ands	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d003      	beq.n	80014ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014ba:	4a32      	ldr	r2, [pc, #200]	; (8001584 <HAL_GPIO_Init+0x334>)
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014c0:	4b30      	ldr	r3, [pc, #192]	; (8001584 <HAL_GPIO_Init+0x334>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	43db      	mvns	r3, r3
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	4013      	ands	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d003      	beq.n	80014e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014e4:	4a27      	ldr	r2, [pc, #156]	; (8001584 <HAL_GPIO_Init+0x334>)
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014ea:	4b26      	ldr	r3, [pc, #152]	; (8001584 <HAL_GPIO_Init+0x334>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	43db      	mvns	r3, r3
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	4013      	ands	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d003      	beq.n	800150e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	4313      	orrs	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800150e:	4a1d      	ldr	r2, [pc, #116]	; (8001584 <HAL_GPIO_Init+0x334>)
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001514:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <HAL_GPIO_Init+0x334>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	43db      	mvns	r3, r3
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	4013      	ands	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d003      	beq.n	8001538 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	4313      	orrs	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001538:	4a12      	ldr	r2, [pc, #72]	; (8001584 <HAL_GPIO_Init+0x334>)
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	3301      	adds	r3, #1
 8001542:	61fb      	str	r3, [r7, #28]
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	2b0f      	cmp	r3, #15
 8001548:	f67f ae90 	bls.w	800126c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800154c:	bf00      	nop
 800154e:	bf00      	nop
 8001550:	3724      	adds	r7, #36	; 0x24
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	40023800 	.word	0x40023800
 8001560:	40013800 	.word	0x40013800
 8001564:	40020000 	.word	0x40020000
 8001568:	40020400 	.word	0x40020400
 800156c:	40020800 	.word	0x40020800
 8001570:	40020c00 	.word	0x40020c00
 8001574:	40021000 	.word	0x40021000
 8001578:	40021400 	.word	0x40021400
 800157c:	40021800 	.word	0x40021800
 8001580:	40021c00 	.word	0x40021c00
 8001584:	40013c00 	.word	0x40013c00

08001588 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	460b      	mov	r3, r1
 8001592:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	691a      	ldr	r2, [r3, #16]
 8001598:	887b      	ldrh	r3, [r7, #2]
 800159a:	4013      	ands	r3, r2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d002      	beq.n	80015a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015a0:	2301      	movs	r3, #1
 80015a2:	73fb      	strb	r3, [r7, #15]
 80015a4:	e001      	b.n	80015aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015a6:	2300      	movs	r3, #0
 80015a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3714      	adds	r7, #20
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	460b      	mov	r3, r1
 80015c2:	807b      	strh	r3, [r7, #2]
 80015c4:	4613      	mov	r3, r2
 80015c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015c8:	787b      	ldrb	r3, [r7, #1]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d003      	beq.n	80015d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015ce:	887a      	ldrh	r2, [r7, #2]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015d4:	e003      	b.n	80015de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015d6:	887b      	ldrh	r3, [r7, #2]
 80015d8:	041a      	lsls	r2, r3, #16
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	619a      	str	r2, [r3, #24]
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b085      	sub	sp, #20
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
 80015f2:	460b      	mov	r3, r1
 80015f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	695b      	ldr	r3, [r3, #20]
 80015fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015fc:	887a      	ldrh	r2, [r7, #2]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	4013      	ands	r3, r2
 8001602:	041a      	lsls	r2, r3, #16
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	43d9      	mvns	r1, r3
 8001608:	887b      	ldrh	r3, [r7, #2]
 800160a:	400b      	ands	r3, r1
 800160c:	431a      	orrs	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	619a      	str	r2, [r3, #24]
}
 8001612:	bf00      	nop
 8001614:	3714      	adds	r7, #20
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800161e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001620:	b08f      	sub	sp, #60	; 0x3c
 8001622:	af0a      	add	r7, sp, #40	; 0x28
 8001624:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d101      	bne.n	8001630 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e054      	b.n	80016da <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b00      	cmp	r3, #0
 8001640:	d106      	bne.n	8001650 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f009 feaa 	bl	800b3a4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2203      	movs	r2, #3
 8001654:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800165c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001660:	2b00      	cmp	r3, #0
 8001662:	d102      	bne.n	800166a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4618      	mov	r0, r3
 8001670:	f003 fba4 	bl	8004dbc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	603b      	str	r3, [r7, #0]
 800167a:	687e      	ldr	r6, [r7, #4]
 800167c:	466d      	mov	r5, sp
 800167e:	f106 0410 	add.w	r4, r6, #16
 8001682:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001684:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001686:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001688:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800168a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800168e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001692:	1d33      	adds	r3, r6, #4
 8001694:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001696:	6838      	ldr	r0, [r7, #0]
 8001698:	f003 fb1e 	bl	8004cd8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2101      	movs	r1, #1
 80016a2:	4618      	mov	r0, r3
 80016a4:	f003 fb9b 	bl	8004dde <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	603b      	str	r3, [r7, #0]
 80016ae:	687e      	ldr	r6, [r7, #4]
 80016b0:	466d      	mov	r5, sp
 80016b2:	f106 0410 	add.w	r4, r6, #16
 80016b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80016c6:	1d33      	adds	r3, r6, #4
 80016c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016ca:	6838      	ldr	r0, [r7, #0]
 80016cc:	f003 fd24 	bl	8005118 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016e2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80016e2:	b590      	push	{r4, r7, lr}
 80016e4:	b089      	sub	sp, #36	; 0x24
 80016e6:	af04      	add	r7, sp, #16
 80016e8:	6078      	str	r0, [r7, #4]
 80016ea:	4608      	mov	r0, r1
 80016ec:	4611      	mov	r1, r2
 80016ee:	461a      	mov	r2, r3
 80016f0:	4603      	mov	r3, r0
 80016f2:	70fb      	strb	r3, [r7, #3]
 80016f4:	460b      	mov	r3, r1
 80016f6:	70bb      	strb	r3, [r7, #2]
 80016f8:	4613      	mov	r3, r2
 80016fa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001702:	2b01      	cmp	r3, #1
 8001704:	d101      	bne.n	800170a <HAL_HCD_HC_Init+0x28>
 8001706:	2302      	movs	r3, #2
 8001708:	e076      	b.n	80017f8 <HAL_HCD_HC_Init+0x116>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2201      	movs	r2, #1
 800170e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001712:	78fb      	ldrb	r3, [r7, #3]
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	212c      	movs	r1, #44	; 0x2c
 8001718:	fb01 f303 	mul.w	r3, r1, r3
 800171c:	4413      	add	r3, r2
 800171e:	333d      	adds	r3, #61	; 0x3d
 8001720:	2200      	movs	r2, #0
 8001722:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001724:	78fb      	ldrb	r3, [r7, #3]
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	212c      	movs	r1, #44	; 0x2c
 800172a:	fb01 f303 	mul.w	r3, r1, r3
 800172e:	4413      	add	r3, r2
 8001730:	3338      	adds	r3, #56	; 0x38
 8001732:	787a      	ldrb	r2, [r7, #1]
 8001734:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001736:	78fb      	ldrb	r3, [r7, #3]
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	212c      	movs	r1, #44	; 0x2c
 800173c:	fb01 f303 	mul.w	r3, r1, r3
 8001740:	4413      	add	r3, r2
 8001742:	3340      	adds	r3, #64	; 0x40
 8001744:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001746:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001748:	78fb      	ldrb	r3, [r7, #3]
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	212c      	movs	r1, #44	; 0x2c
 800174e:	fb01 f303 	mul.w	r3, r1, r3
 8001752:	4413      	add	r3, r2
 8001754:	3339      	adds	r3, #57	; 0x39
 8001756:	78fa      	ldrb	r2, [r7, #3]
 8001758:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800175a:	78fb      	ldrb	r3, [r7, #3]
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	212c      	movs	r1, #44	; 0x2c
 8001760:	fb01 f303 	mul.w	r3, r1, r3
 8001764:	4413      	add	r3, r2
 8001766:	333f      	adds	r3, #63	; 0x3f
 8001768:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800176c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800176e:	78fb      	ldrb	r3, [r7, #3]
 8001770:	78ba      	ldrb	r2, [r7, #2]
 8001772:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001776:	b2d0      	uxtb	r0, r2
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	212c      	movs	r1, #44	; 0x2c
 800177c:	fb01 f303 	mul.w	r3, r1, r3
 8001780:	4413      	add	r3, r2
 8001782:	333a      	adds	r3, #58	; 0x3a
 8001784:	4602      	mov	r2, r0
 8001786:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001788:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800178c:	2b00      	cmp	r3, #0
 800178e:	da09      	bge.n	80017a4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001790:	78fb      	ldrb	r3, [r7, #3]
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	212c      	movs	r1, #44	; 0x2c
 8001796:	fb01 f303 	mul.w	r3, r1, r3
 800179a:	4413      	add	r3, r2
 800179c:	333b      	adds	r3, #59	; 0x3b
 800179e:	2201      	movs	r2, #1
 80017a0:	701a      	strb	r2, [r3, #0]
 80017a2:	e008      	b.n	80017b6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80017a4:	78fb      	ldrb	r3, [r7, #3]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	212c      	movs	r1, #44	; 0x2c
 80017aa:	fb01 f303 	mul.w	r3, r1, r3
 80017ae:	4413      	add	r3, r2
 80017b0:	333b      	adds	r3, #59	; 0x3b
 80017b2:	2200      	movs	r2, #0
 80017b4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80017b6:	78fb      	ldrb	r3, [r7, #3]
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	212c      	movs	r1, #44	; 0x2c
 80017bc:	fb01 f303 	mul.w	r3, r1, r3
 80017c0:	4413      	add	r3, r2
 80017c2:	333c      	adds	r3, #60	; 0x3c
 80017c4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80017c8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6818      	ldr	r0, [r3, #0]
 80017ce:	787c      	ldrb	r4, [r7, #1]
 80017d0:	78ba      	ldrb	r2, [r7, #2]
 80017d2:	78f9      	ldrb	r1, [r7, #3]
 80017d4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80017d6:	9302      	str	r3, [sp, #8]
 80017d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80017dc:	9301      	str	r3, [sp, #4]
 80017de:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017e2:	9300      	str	r3, [sp, #0]
 80017e4:	4623      	mov	r3, r4
 80017e6:	f003 fe1d 	bl	8005424 <USB_HC_Init>
 80017ea:	4603      	mov	r3, r0
 80017ec:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80017f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd90      	pop	{r4, r7, pc}

08001800 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	460b      	mov	r3, r1
 800180a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800180c:	2300      	movs	r3, #0
 800180e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001816:	2b01      	cmp	r3, #1
 8001818:	d101      	bne.n	800181e <HAL_HCD_HC_Halt+0x1e>
 800181a:	2302      	movs	r3, #2
 800181c:	e00f      	b.n	800183e <HAL_HCD_HC_Halt+0x3e>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2201      	movs	r2, #1
 8001822:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	78fa      	ldrb	r2, [r7, #3]
 800182c:	4611      	mov	r1, r2
 800182e:	4618      	mov	r0, r3
 8001830:	f004 f86d 	bl	800590e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800183c:	7bfb      	ldrb	r3, [r7, #15]
}
 800183e:	4618      	mov	r0, r3
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	4608      	mov	r0, r1
 8001852:	4611      	mov	r1, r2
 8001854:	461a      	mov	r2, r3
 8001856:	4603      	mov	r3, r0
 8001858:	70fb      	strb	r3, [r7, #3]
 800185a:	460b      	mov	r3, r1
 800185c:	70bb      	strb	r3, [r7, #2]
 800185e:	4613      	mov	r3, r2
 8001860:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001862:	78fb      	ldrb	r3, [r7, #3]
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	212c      	movs	r1, #44	; 0x2c
 8001868:	fb01 f303 	mul.w	r3, r1, r3
 800186c:	4413      	add	r3, r2
 800186e:	333b      	adds	r3, #59	; 0x3b
 8001870:	78ba      	ldrb	r2, [r7, #2]
 8001872:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001874:	78fb      	ldrb	r3, [r7, #3]
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	212c      	movs	r1, #44	; 0x2c
 800187a:	fb01 f303 	mul.w	r3, r1, r3
 800187e:	4413      	add	r3, r2
 8001880:	333f      	adds	r3, #63	; 0x3f
 8001882:	787a      	ldrb	r2, [r7, #1]
 8001884:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001886:	7c3b      	ldrb	r3, [r7, #16]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d112      	bne.n	80018b2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800188c:	78fb      	ldrb	r3, [r7, #3]
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	212c      	movs	r1, #44	; 0x2c
 8001892:	fb01 f303 	mul.w	r3, r1, r3
 8001896:	4413      	add	r3, r2
 8001898:	3342      	adds	r3, #66	; 0x42
 800189a:	2203      	movs	r2, #3
 800189c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800189e:	78fb      	ldrb	r3, [r7, #3]
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	212c      	movs	r1, #44	; 0x2c
 80018a4:	fb01 f303 	mul.w	r3, r1, r3
 80018a8:	4413      	add	r3, r2
 80018aa:	333d      	adds	r3, #61	; 0x3d
 80018ac:	7f3a      	ldrb	r2, [r7, #28]
 80018ae:	701a      	strb	r2, [r3, #0]
 80018b0:	e008      	b.n	80018c4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018b2:	78fb      	ldrb	r3, [r7, #3]
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	212c      	movs	r1, #44	; 0x2c
 80018b8:	fb01 f303 	mul.w	r3, r1, r3
 80018bc:	4413      	add	r3, r2
 80018be:	3342      	adds	r3, #66	; 0x42
 80018c0:	2202      	movs	r2, #2
 80018c2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80018c4:	787b      	ldrb	r3, [r7, #1]
 80018c6:	2b03      	cmp	r3, #3
 80018c8:	f200 80c6 	bhi.w	8001a58 <HAL_HCD_HC_SubmitRequest+0x210>
 80018cc:	a201      	add	r2, pc, #4	; (adr r2, 80018d4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80018ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018d2:	bf00      	nop
 80018d4:	080018e5 	.word	0x080018e5
 80018d8:	08001a45 	.word	0x08001a45
 80018dc:	08001949 	.word	0x08001949
 80018e0:	080019c7 	.word	0x080019c7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80018e4:	7c3b      	ldrb	r3, [r7, #16]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	f040 80b8 	bne.w	8001a5c <HAL_HCD_HC_SubmitRequest+0x214>
 80018ec:	78bb      	ldrb	r3, [r7, #2]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f040 80b4 	bne.w	8001a5c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80018f4:	8b3b      	ldrh	r3, [r7, #24]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d108      	bne.n	800190c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80018fa:	78fb      	ldrb	r3, [r7, #3]
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	212c      	movs	r1, #44	; 0x2c
 8001900:	fb01 f303 	mul.w	r3, r1, r3
 8001904:	4413      	add	r3, r2
 8001906:	3355      	adds	r3, #85	; 0x55
 8001908:	2201      	movs	r2, #1
 800190a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800190c:	78fb      	ldrb	r3, [r7, #3]
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	212c      	movs	r1, #44	; 0x2c
 8001912:	fb01 f303 	mul.w	r3, r1, r3
 8001916:	4413      	add	r3, r2
 8001918:	3355      	adds	r3, #85	; 0x55
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d109      	bne.n	8001934 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001920:	78fb      	ldrb	r3, [r7, #3]
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	212c      	movs	r1, #44	; 0x2c
 8001926:	fb01 f303 	mul.w	r3, r1, r3
 800192a:	4413      	add	r3, r2
 800192c:	3342      	adds	r3, #66	; 0x42
 800192e:	2200      	movs	r2, #0
 8001930:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001932:	e093      	b.n	8001a5c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001934:	78fb      	ldrb	r3, [r7, #3]
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	212c      	movs	r1, #44	; 0x2c
 800193a:	fb01 f303 	mul.w	r3, r1, r3
 800193e:	4413      	add	r3, r2
 8001940:	3342      	adds	r3, #66	; 0x42
 8001942:	2202      	movs	r2, #2
 8001944:	701a      	strb	r2, [r3, #0]
      break;
 8001946:	e089      	b.n	8001a5c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001948:	78bb      	ldrb	r3, [r7, #2]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d11d      	bne.n	800198a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800194e:	78fb      	ldrb	r3, [r7, #3]
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	212c      	movs	r1, #44	; 0x2c
 8001954:	fb01 f303 	mul.w	r3, r1, r3
 8001958:	4413      	add	r3, r2
 800195a:	3355      	adds	r3, #85	; 0x55
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d109      	bne.n	8001976 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001962:	78fb      	ldrb	r3, [r7, #3]
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	212c      	movs	r1, #44	; 0x2c
 8001968:	fb01 f303 	mul.w	r3, r1, r3
 800196c:	4413      	add	r3, r2
 800196e:	3342      	adds	r3, #66	; 0x42
 8001970:	2200      	movs	r2, #0
 8001972:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001974:	e073      	b.n	8001a5e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001976:	78fb      	ldrb	r3, [r7, #3]
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	212c      	movs	r1, #44	; 0x2c
 800197c:	fb01 f303 	mul.w	r3, r1, r3
 8001980:	4413      	add	r3, r2
 8001982:	3342      	adds	r3, #66	; 0x42
 8001984:	2202      	movs	r2, #2
 8001986:	701a      	strb	r2, [r3, #0]
      break;
 8001988:	e069      	b.n	8001a5e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800198a:	78fb      	ldrb	r3, [r7, #3]
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	212c      	movs	r1, #44	; 0x2c
 8001990:	fb01 f303 	mul.w	r3, r1, r3
 8001994:	4413      	add	r3, r2
 8001996:	3354      	adds	r3, #84	; 0x54
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d109      	bne.n	80019b2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800199e:	78fb      	ldrb	r3, [r7, #3]
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	212c      	movs	r1, #44	; 0x2c
 80019a4:	fb01 f303 	mul.w	r3, r1, r3
 80019a8:	4413      	add	r3, r2
 80019aa:	3342      	adds	r3, #66	; 0x42
 80019ac:	2200      	movs	r2, #0
 80019ae:	701a      	strb	r2, [r3, #0]
      break;
 80019b0:	e055      	b.n	8001a5e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019b2:	78fb      	ldrb	r3, [r7, #3]
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	212c      	movs	r1, #44	; 0x2c
 80019b8:	fb01 f303 	mul.w	r3, r1, r3
 80019bc:	4413      	add	r3, r2
 80019be:	3342      	adds	r3, #66	; 0x42
 80019c0:	2202      	movs	r2, #2
 80019c2:	701a      	strb	r2, [r3, #0]
      break;
 80019c4:	e04b      	b.n	8001a5e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80019c6:	78bb      	ldrb	r3, [r7, #2]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d11d      	bne.n	8001a08 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80019cc:	78fb      	ldrb	r3, [r7, #3]
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	212c      	movs	r1, #44	; 0x2c
 80019d2:	fb01 f303 	mul.w	r3, r1, r3
 80019d6:	4413      	add	r3, r2
 80019d8:	3355      	adds	r3, #85	; 0x55
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d109      	bne.n	80019f4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019e0:	78fb      	ldrb	r3, [r7, #3]
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	212c      	movs	r1, #44	; 0x2c
 80019e6:	fb01 f303 	mul.w	r3, r1, r3
 80019ea:	4413      	add	r3, r2
 80019ec:	3342      	adds	r3, #66	; 0x42
 80019ee:	2200      	movs	r2, #0
 80019f0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80019f2:	e034      	b.n	8001a5e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019f4:	78fb      	ldrb	r3, [r7, #3]
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	212c      	movs	r1, #44	; 0x2c
 80019fa:	fb01 f303 	mul.w	r3, r1, r3
 80019fe:	4413      	add	r3, r2
 8001a00:	3342      	adds	r3, #66	; 0x42
 8001a02:	2202      	movs	r2, #2
 8001a04:	701a      	strb	r2, [r3, #0]
      break;
 8001a06:	e02a      	b.n	8001a5e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a08:	78fb      	ldrb	r3, [r7, #3]
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	212c      	movs	r1, #44	; 0x2c
 8001a0e:	fb01 f303 	mul.w	r3, r1, r3
 8001a12:	4413      	add	r3, r2
 8001a14:	3354      	adds	r3, #84	; 0x54
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d109      	bne.n	8001a30 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a1c:	78fb      	ldrb	r3, [r7, #3]
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	212c      	movs	r1, #44	; 0x2c
 8001a22:	fb01 f303 	mul.w	r3, r1, r3
 8001a26:	4413      	add	r3, r2
 8001a28:	3342      	adds	r3, #66	; 0x42
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	701a      	strb	r2, [r3, #0]
      break;
 8001a2e:	e016      	b.n	8001a5e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a30:	78fb      	ldrb	r3, [r7, #3]
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	212c      	movs	r1, #44	; 0x2c
 8001a36:	fb01 f303 	mul.w	r3, r1, r3
 8001a3a:	4413      	add	r3, r2
 8001a3c:	3342      	adds	r3, #66	; 0x42
 8001a3e:	2202      	movs	r2, #2
 8001a40:	701a      	strb	r2, [r3, #0]
      break;
 8001a42:	e00c      	b.n	8001a5e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a44:	78fb      	ldrb	r3, [r7, #3]
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	212c      	movs	r1, #44	; 0x2c
 8001a4a:	fb01 f303 	mul.w	r3, r1, r3
 8001a4e:	4413      	add	r3, r2
 8001a50:	3342      	adds	r3, #66	; 0x42
 8001a52:	2200      	movs	r2, #0
 8001a54:	701a      	strb	r2, [r3, #0]
      break;
 8001a56:	e002      	b.n	8001a5e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001a58:	bf00      	nop
 8001a5a:	e000      	b.n	8001a5e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001a5c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001a5e:	78fb      	ldrb	r3, [r7, #3]
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	212c      	movs	r1, #44	; 0x2c
 8001a64:	fb01 f303 	mul.w	r3, r1, r3
 8001a68:	4413      	add	r3, r2
 8001a6a:	3344      	adds	r3, #68	; 0x44
 8001a6c:	697a      	ldr	r2, [r7, #20]
 8001a6e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001a70:	78fb      	ldrb	r3, [r7, #3]
 8001a72:	8b3a      	ldrh	r2, [r7, #24]
 8001a74:	6879      	ldr	r1, [r7, #4]
 8001a76:	202c      	movs	r0, #44	; 0x2c
 8001a78:	fb00 f303 	mul.w	r3, r0, r3
 8001a7c:	440b      	add	r3, r1
 8001a7e:	334c      	adds	r3, #76	; 0x4c
 8001a80:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a82:	78fb      	ldrb	r3, [r7, #3]
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	212c      	movs	r1, #44	; 0x2c
 8001a88:	fb01 f303 	mul.w	r3, r1, r3
 8001a8c:	4413      	add	r3, r2
 8001a8e:	3360      	adds	r3, #96	; 0x60
 8001a90:	2200      	movs	r2, #0
 8001a92:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001a94:	78fb      	ldrb	r3, [r7, #3]
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	212c      	movs	r1, #44	; 0x2c
 8001a9a:	fb01 f303 	mul.w	r3, r1, r3
 8001a9e:	4413      	add	r3, r2
 8001aa0:	3350      	adds	r3, #80	; 0x50
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001aa6:	78fb      	ldrb	r3, [r7, #3]
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	212c      	movs	r1, #44	; 0x2c
 8001aac:	fb01 f303 	mul.w	r3, r1, r3
 8001ab0:	4413      	add	r3, r2
 8001ab2:	3339      	adds	r3, #57	; 0x39
 8001ab4:	78fa      	ldrb	r2, [r7, #3]
 8001ab6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001ab8:	78fb      	ldrb	r3, [r7, #3]
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	212c      	movs	r1, #44	; 0x2c
 8001abe:	fb01 f303 	mul.w	r3, r1, r3
 8001ac2:	4413      	add	r3, r2
 8001ac4:	3361      	adds	r3, #97	; 0x61
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6818      	ldr	r0, [r3, #0]
 8001ace:	78fb      	ldrb	r3, [r7, #3]
 8001ad0:	222c      	movs	r2, #44	; 0x2c
 8001ad2:	fb02 f303 	mul.w	r3, r2, r3
 8001ad6:	3338      	adds	r3, #56	; 0x38
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	18d1      	adds	r1, r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	691b      	ldr	r3, [r3, #16]
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	f003 fdc0 	bl	8005668 <USB_HC_StartXfer>
 8001ae8:	4603      	mov	r3, r0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop

08001af4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f003 fac1 	bl	8005092 <USB_GetMode>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	f040 80f6 	bne.w	8001d04 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f003 faa5 	bl	800506c <USB_ReadInterrupts>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f000 80ec 	beq.w	8001d02 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f003 fa9c 	bl	800506c <USB_ReadInterrupts>
 8001b34:	4603      	mov	r3, r0
 8001b36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b3e:	d104      	bne.n	8001b4a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001b48:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f003 fa8c 	bl	800506c <USB_ReadInterrupts>
 8001b54:	4603      	mov	r3, r0
 8001b56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b5e:	d104      	bne.n	8001b6a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b68:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f003 fa7c 	bl	800506c <USB_ReadInterrupts>
 8001b74:	4603      	mov	r3, r0
 8001b76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b7a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001b7e:	d104      	bne.n	8001b8a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b88:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f003 fa6c 	bl	800506c <USB_ReadInterrupts>
 8001b94:	4603      	mov	r3, r0
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d103      	bne.n	8001ba6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f003 fa5e 	bl	800506c <USB_ReadInterrupts>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001bb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bba:	d11c      	bne.n	8001bf6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001bc4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d10f      	bne.n	8001bf6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001bd6:	2110      	movs	r1, #16
 8001bd8:	6938      	ldr	r0, [r7, #16]
 8001bda:	f003 f94d 	bl	8004e78 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001bde:	6938      	ldr	r0, [r7, #16]
 8001be0:	f003 f97e 	bl	8004ee0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2101      	movs	r1, #1
 8001bea:	4618      	mov	r0, r3
 8001bec:	f003 fb54 	bl	8005298 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f009 fc55 	bl	800b4a0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f003 fa36 	bl	800506c <USB_ReadInterrupts>
 8001c00:	4603      	mov	r3, r0
 8001c02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c0a:	d102      	bne.n	8001c12 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f001 f89e 	bl	8002d4e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f003 fa28 	bl	800506c <USB_ReadInterrupts>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	f003 0308 	and.w	r3, r3, #8
 8001c22:	2b08      	cmp	r3, #8
 8001c24:	d106      	bne.n	8001c34 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f009 fc1e 	bl	800b468 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2208      	movs	r2, #8
 8001c32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f003 fa17 	bl	800506c <USB_ReadInterrupts>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	f003 0310 	and.w	r3, r3, #16
 8001c44:	2b10      	cmp	r3, #16
 8001c46:	d101      	bne.n	8001c4c <HAL_HCD_IRQHandler+0x158>
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e000      	b.n	8001c4e <HAL_HCD_IRQHandler+0x15a>
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d012      	beq.n	8001c78 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	699a      	ldr	r2, [r3, #24]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f022 0210 	bic.w	r2, r2, #16
 8001c60:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 ffa1 	bl	8002baa <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	699a      	ldr	r2, [r3, #24]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f042 0210 	orr.w	r2, r2, #16
 8001c76:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f003 f9f5 	bl	800506c <USB_ReadInterrupts>
 8001c82:	4603      	mov	r3, r0
 8001c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c8c:	d13a      	bne.n	8001d04 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f003 fe2a 	bl	80058ec <USB_HC_ReadInterrupt>
 8001c98:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	617b      	str	r3, [r7, #20]
 8001c9e:	e025      	b.n	8001cec <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	f003 030f 	and.w	r3, r3, #15
 8001ca6:	68ba      	ldr	r2, [r7, #8]
 8001ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cac:	f003 0301 	and.w	r3, r3, #1
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d018      	beq.n	8001ce6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	015a      	lsls	r2, r3, #5
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	4413      	add	r3, r2
 8001cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cca:	d106      	bne.n	8001cda <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 f8ab 	bl	8001e2e <HCD_HC_IN_IRQHandler>
 8001cd8:	e005      	b.n	8001ce6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	4619      	mov	r1, r3
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f000 fbf9 	bl	80024d8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	617b      	str	r3, [r7, #20]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d3d4      	bcc.n	8001ca0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cfe:	615a      	str	r2, [r3, #20]
 8001d00:	e000      	b.n	8001d04 <HAL_HCD_IRQHandler+0x210>
      return;
 8001d02:	bf00      	nop
    }
  }
}
 8001d04:	3718      	adds	r7, #24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d101      	bne.n	8001d20 <HAL_HCD_Start+0x16>
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	e013      	b.n	8001d48 <HAL_HCD_Start+0x3e>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f003 fb16 	bl	8005360 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f003 f82e 	bl	8004d9a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d101      	bne.n	8001d66 <HAL_HCD_Stop+0x16>
 8001d62:	2302      	movs	r3, #2
 8001d64:	e00d      	b.n	8001d82 <HAL_HCD_Stop+0x32>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f003 ff04 	bl	8005b80 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b082      	sub	sp, #8
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f003 fab8 	bl	800530c <USB_ResetPort>
 8001d9c:	4603      	mov	r3, r0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b083      	sub	sp, #12
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
 8001dae:	460b      	mov	r3, r1
 8001db0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001db2:	78fb      	ldrb	r3, [r7, #3]
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	212c      	movs	r1, #44	; 0x2c
 8001db8:	fb01 f303 	mul.w	r3, r1, r3
 8001dbc:	4413      	add	r3, r2
 8001dbe:	3360      	adds	r3, #96	; 0x60
 8001dc0:	781b      	ldrb	r3, [r3, #0]
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001dda:	78fb      	ldrb	r3, [r7, #3]
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	212c      	movs	r1, #44	; 0x2c
 8001de0:	fb01 f303 	mul.w	r3, r1, r3
 8001de4:	4413      	add	r3, r2
 8001de6:	3350      	adds	r3, #80	; 0x50
 8001de8:	681b      	ldr	r3, [r3, #0]
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b082      	sub	sp, #8
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f003 fafc 	bl	8005400 <USB_GetCurrentFrame>
 8001e08:	4603      	mov	r3, r0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b082      	sub	sp, #8
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f003 fad7 	bl	80053d2 <USB_GetHostSpeed>
 8001e24:	4603      	mov	r3, r0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b086      	sub	sp, #24
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
 8001e36:	460b      	mov	r3, r1
 8001e38:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001e44:	78fb      	ldrb	r3, [r7, #3]
 8001e46:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	015a      	lsls	r2, r3, #5
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	4413      	add	r3, r2
 8001e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f003 0304 	and.w	r3, r3, #4
 8001e5a:	2b04      	cmp	r3, #4
 8001e5c:	d11a      	bne.n	8001e94 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	015a      	lsls	r2, r3, #5
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	4413      	add	r3, r2
 8001e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	2304      	movs	r3, #4
 8001e6e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	212c      	movs	r1, #44	; 0x2c
 8001e76:	fb01 f303 	mul.w	r3, r1, r3
 8001e7a:	4413      	add	r3, r2
 8001e7c:	3361      	adds	r3, #97	; 0x61
 8001e7e:	2206      	movs	r2, #6
 8001e80:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	b2d2      	uxtb	r2, r2
 8001e8a:	4611      	mov	r1, r2
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f003 fd3e 	bl	800590e <USB_HC_Halt>
 8001e92:	e0af      	b.n	8001ff4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	015a      	lsls	r2, r3, #5
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001eaa:	d11b      	bne.n	8001ee4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	015a      	lsls	r2, r3, #5
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb8:	461a      	mov	r2, r3
 8001eba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ebe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	212c      	movs	r1, #44	; 0x2c
 8001ec6:	fb01 f303 	mul.w	r3, r1, r3
 8001eca:	4413      	add	r3, r2
 8001ecc:	3361      	adds	r3, #97	; 0x61
 8001ece:	2207      	movs	r2, #7
 8001ed0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	b2d2      	uxtb	r2, r2
 8001eda:	4611      	mov	r1, r2
 8001edc:	4618      	mov	r0, r3
 8001ede:	f003 fd16 	bl	800590e <USB_HC_Halt>
 8001ee2:	e087      	b.n	8001ff4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	015a      	lsls	r2, r3, #5
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	4413      	add	r3, r2
 8001eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 0320 	and.w	r3, r3, #32
 8001ef6:	2b20      	cmp	r3, #32
 8001ef8:	d109      	bne.n	8001f0e <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	015a      	lsls	r2, r3, #5
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	4413      	add	r3, r2
 8001f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f06:	461a      	mov	r2, r3
 8001f08:	2320      	movs	r3, #32
 8001f0a:	6093      	str	r3, [r2, #8]
 8001f0c:	e072      	b.n	8001ff4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	015a      	lsls	r2, r3, #5
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	4413      	add	r3, r2
 8001f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f003 0308 	and.w	r3, r3, #8
 8001f20:	2b08      	cmp	r3, #8
 8001f22:	d11a      	bne.n	8001f5a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	015a      	lsls	r2, r3, #5
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f30:	461a      	mov	r2, r3
 8001f32:	2308      	movs	r3, #8
 8001f34:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	212c      	movs	r1, #44	; 0x2c
 8001f3c:	fb01 f303 	mul.w	r3, r1, r3
 8001f40:	4413      	add	r3, r2
 8001f42:	3361      	adds	r3, #97	; 0x61
 8001f44:	2205      	movs	r2, #5
 8001f46:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	b2d2      	uxtb	r2, r2
 8001f50:	4611      	mov	r1, r2
 8001f52:	4618      	mov	r0, r3
 8001f54:	f003 fcdb 	bl	800590e <USB_HC_Halt>
 8001f58:	e04c      	b.n	8001ff4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	015a      	lsls	r2, r3, #5
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	4413      	add	r3, r2
 8001f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f70:	d11b      	bne.n	8001faa <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	015a      	lsls	r2, r3, #5
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	4413      	add	r3, r2
 8001f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f7e:	461a      	mov	r2, r3
 8001f80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f84:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	212c      	movs	r1, #44	; 0x2c
 8001f8c:	fb01 f303 	mul.w	r3, r1, r3
 8001f90:	4413      	add	r3, r2
 8001f92:	3361      	adds	r3, #97	; 0x61
 8001f94:	2208      	movs	r2, #8
 8001f96:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	b2d2      	uxtb	r2, r2
 8001fa0:	4611      	mov	r1, r2
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f003 fcb3 	bl	800590e <USB_HC_Halt>
 8001fa8:	e024      	b.n	8001ff4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	015a      	lsls	r2, r3, #5
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fbc:	2b80      	cmp	r3, #128	; 0x80
 8001fbe:	d119      	bne.n	8001ff4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	015a      	lsls	r2, r3, #5
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fcc:	461a      	mov	r2, r3
 8001fce:	2380      	movs	r3, #128	; 0x80
 8001fd0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	212c      	movs	r1, #44	; 0x2c
 8001fd8:	fb01 f303 	mul.w	r3, r1, r3
 8001fdc:	4413      	add	r3, r2
 8001fde:	3361      	adds	r3, #97	; 0x61
 8001fe0:	2206      	movs	r2, #6
 8001fe2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	b2d2      	uxtb	r2, r2
 8001fec:	4611      	mov	r1, r2
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f003 fc8d 	bl	800590e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	015a      	lsls	r2, r3, #5
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002006:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800200a:	d112      	bne.n	8002032 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	4611      	mov	r1, r2
 8002016:	4618      	mov	r0, r3
 8002018:	f003 fc79 	bl	800590e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	015a      	lsls	r2, r3, #5
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	4413      	add	r3, r2
 8002024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002028:	461a      	mov	r2, r3
 800202a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800202e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002030:	e24e      	b.n	80024d0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	015a      	lsls	r2, r3, #5
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	4413      	add	r3, r2
 800203a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	2b01      	cmp	r3, #1
 8002046:	f040 80df 	bne.w	8002208 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d019      	beq.n	8002086 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	212c      	movs	r1, #44	; 0x2c
 8002058:	fb01 f303 	mul.w	r3, r1, r3
 800205c:	4413      	add	r3, r2
 800205e:	3348      	adds	r3, #72	; 0x48
 8002060:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	0159      	lsls	r1, r3, #5
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	440b      	add	r3, r1
 800206a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800206e:	691b      	ldr	r3, [r3, #16]
 8002070:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002074:	1ad2      	subs	r2, r2, r3
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	202c      	movs	r0, #44	; 0x2c
 800207c:	fb00 f303 	mul.w	r3, r0, r3
 8002080:	440b      	add	r3, r1
 8002082:	3350      	adds	r3, #80	; 0x50
 8002084:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	212c      	movs	r1, #44	; 0x2c
 800208c:	fb01 f303 	mul.w	r3, r1, r3
 8002090:	4413      	add	r3, r2
 8002092:	3361      	adds	r3, #97	; 0x61
 8002094:	2201      	movs	r2, #1
 8002096:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	212c      	movs	r1, #44	; 0x2c
 800209e:	fb01 f303 	mul.w	r3, r1, r3
 80020a2:	4413      	add	r3, r2
 80020a4:	335c      	adds	r3, #92	; 0x5c
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	015a      	lsls	r2, r3, #5
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	4413      	add	r3, r2
 80020b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b6:	461a      	mov	r2, r3
 80020b8:	2301      	movs	r3, #1
 80020ba:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	212c      	movs	r1, #44	; 0x2c
 80020c2:	fb01 f303 	mul.w	r3, r1, r3
 80020c6:	4413      	add	r3, r2
 80020c8:	333f      	adds	r3, #63	; 0x3f
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d009      	beq.n	80020e4 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	212c      	movs	r1, #44	; 0x2c
 80020d6:	fb01 f303 	mul.w	r3, r1, r3
 80020da:	4413      	add	r3, r2
 80020dc:	333f      	adds	r3, #63	; 0x3f
 80020de:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d111      	bne.n	8002108 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	b2d2      	uxtb	r2, r2
 80020ec:	4611      	mov	r1, r2
 80020ee:	4618      	mov	r0, r3
 80020f0:	f003 fc0d 	bl	800590e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	015a      	lsls	r2, r3, #5
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	4413      	add	r3, r2
 80020fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002100:	461a      	mov	r2, r3
 8002102:	2310      	movs	r3, #16
 8002104:	6093      	str	r3, [r2, #8]
 8002106:	e03a      	b.n	800217e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	212c      	movs	r1, #44	; 0x2c
 800210e:	fb01 f303 	mul.w	r3, r1, r3
 8002112:	4413      	add	r3, r2
 8002114:	333f      	adds	r3, #63	; 0x3f
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2b03      	cmp	r3, #3
 800211a:	d009      	beq.n	8002130 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	212c      	movs	r1, #44	; 0x2c
 8002122:	fb01 f303 	mul.w	r3, r1, r3
 8002126:	4413      	add	r3, r2
 8002128:	333f      	adds	r3, #63	; 0x3f
 800212a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800212c:	2b01      	cmp	r3, #1
 800212e:	d126      	bne.n	800217e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	015a      	lsls	r2, r3, #5
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	4413      	add	r3, r2
 8002138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	0151      	lsls	r1, r2, #5
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	440a      	add	r2, r1
 8002146:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800214a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800214e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	212c      	movs	r1, #44	; 0x2c
 8002156:	fb01 f303 	mul.w	r3, r1, r3
 800215a:	4413      	add	r3, r2
 800215c:	3360      	adds	r3, #96	; 0x60
 800215e:	2201      	movs	r2, #1
 8002160:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	b2d9      	uxtb	r1, r3
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	202c      	movs	r0, #44	; 0x2c
 800216c:	fb00 f303 	mul.w	r3, r0, r3
 8002170:	4413      	add	r3, r2
 8002172:	3360      	adds	r3, #96	; 0x60
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	461a      	mov	r2, r3
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f009 f99f 	bl	800b4bc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d12b      	bne.n	80021de <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	212c      	movs	r1, #44	; 0x2c
 800218c:	fb01 f303 	mul.w	r3, r1, r3
 8002190:	4413      	add	r3, r2
 8002192:	3348      	adds	r3, #72	; 0x48
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	202c      	movs	r0, #44	; 0x2c
 800219c:	fb00 f202 	mul.w	r2, r0, r2
 80021a0:	440a      	add	r2, r1
 80021a2:	3240      	adds	r2, #64	; 0x40
 80021a4:	8812      	ldrh	r2, [r2, #0]
 80021a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f000 818e 	beq.w	80024d0 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	212c      	movs	r1, #44	; 0x2c
 80021ba:	fb01 f303 	mul.w	r3, r1, r3
 80021be:	4413      	add	r3, r2
 80021c0:	3354      	adds	r3, #84	; 0x54
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	f083 0301 	eor.w	r3, r3, #1
 80021c8:	b2d8      	uxtb	r0, r3
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	212c      	movs	r1, #44	; 0x2c
 80021d0:	fb01 f303 	mul.w	r3, r1, r3
 80021d4:	4413      	add	r3, r2
 80021d6:	3354      	adds	r3, #84	; 0x54
 80021d8:	4602      	mov	r2, r0
 80021da:	701a      	strb	r2, [r3, #0]
}
 80021dc:	e178      	b.n	80024d0 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	212c      	movs	r1, #44	; 0x2c
 80021e4:	fb01 f303 	mul.w	r3, r1, r3
 80021e8:	4413      	add	r3, r2
 80021ea:	3354      	adds	r3, #84	; 0x54
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	f083 0301 	eor.w	r3, r3, #1
 80021f2:	b2d8      	uxtb	r0, r3
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	212c      	movs	r1, #44	; 0x2c
 80021fa:	fb01 f303 	mul.w	r3, r1, r3
 80021fe:	4413      	add	r3, r2
 8002200:	3354      	adds	r3, #84	; 0x54
 8002202:	4602      	mov	r2, r0
 8002204:	701a      	strb	r2, [r3, #0]
}
 8002206:	e163      	b.n	80024d0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	015a      	lsls	r2, r3, #5
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	4413      	add	r3, r2
 8002210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b02      	cmp	r3, #2
 800221c:	f040 80f6 	bne.w	800240c <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	212c      	movs	r1, #44	; 0x2c
 8002226:	fb01 f303 	mul.w	r3, r1, r3
 800222a:	4413      	add	r3, r2
 800222c:	3361      	adds	r3, #97	; 0x61
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d109      	bne.n	8002248 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	212c      	movs	r1, #44	; 0x2c
 800223a:	fb01 f303 	mul.w	r3, r1, r3
 800223e:	4413      	add	r3, r2
 8002240:	3360      	adds	r3, #96	; 0x60
 8002242:	2201      	movs	r2, #1
 8002244:	701a      	strb	r2, [r3, #0]
 8002246:	e0c9      	b.n	80023dc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	212c      	movs	r1, #44	; 0x2c
 800224e:	fb01 f303 	mul.w	r3, r1, r3
 8002252:	4413      	add	r3, r2
 8002254:	3361      	adds	r3, #97	; 0x61
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	2b05      	cmp	r3, #5
 800225a:	d109      	bne.n	8002270 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	212c      	movs	r1, #44	; 0x2c
 8002262:	fb01 f303 	mul.w	r3, r1, r3
 8002266:	4413      	add	r3, r2
 8002268:	3360      	adds	r3, #96	; 0x60
 800226a:	2205      	movs	r2, #5
 800226c:	701a      	strb	r2, [r3, #0]
 800226e:	e0b5      	b.n	80023dc <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	212c      	movs	r1, #44	; 0x2c
 8002276:	fb01 f303 	mul.w	r3, r1, r3
 800227a:	4413      	add	r3, r2
 800227c:	3361      	adds	r3, #97	; 0x61
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	2b06      	cmp	r3, #6
 8002282:	d009      	beq.n	8002298 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	212c      	movs	r1, #44	; 0x2c
 800228a:	fb01 f303 	mul.w	r3, r1, r3
 800228e:	4413      	add	r3, r2
 8002290:	3361      	adds	r3, #97	; 0x61
 8002292:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002294:	2b08      	cmp	r3, #8
 8002296:	d150      	bne.n	800233a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	212c      	movs	r1, #44	; 0x2c
 800229e:	fb01 f303 	mul.w	r3, r1, r3
 80022a2:	4413      	add	r3, r2
 80022a4:	335c      	adds	r3, #92	; 0x5c
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	1c5a      	adds	r2, r3, #1
 80022aa:	6879      	ldr	r1, [r7, #4]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	202c      	movs	r0, #44	; 0x2c
 80022b0:	fb00 f303 	mul.w	r3, r0, r3
 80022b4:	440b      	add	r3, r1
 80022b6:	335c      	adds	r3, #92	; 0x5c
 80022b8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	212c      	movs	r1, #44	; 0x2c
 80022c0:	fb01 f303 	mul.w	r3, r1, r3
 80022c4:	4413      	add	r3, r2
 80022c6:	335c      	adds	r3, #92	; 0x5c
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d912      	bls.n	80022f4 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	212c      	movs	r1, #44	; 0x2c
 80022d4:	fb01 f303 	mul.w	r3, r1, r3
 80022d8:	4413      	add	r3, r2
 80022da:	335c      	adds	r3, #92	; 0x5c
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	212c      	movs	r1, #44	; 0x2c
 80022e6:	fb01 f303 	mul.w	r3, r1, r3
 80022ea:	4413      	add	r3, r2
 80022ec:	3360      	adds	r3, #96	; 0x60
 80022ee:	2204      	movs	r2, #4
 80022f0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80022f2:	e073      	b.n	80023dc <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	212c      	movs	r1, #44	; 0x2c
 80022fa:	fb01 f303 	mul.w	r3, r1, r3
 80022fe:	4413      	add	r3, r2
 8002300:	3360      	adds	r3, #96	; 0x60
 8002302:	2202      	movs	r2, #2
 8002304:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	015a      	lsls	r2, r3, #5
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	4413      	add	r3, r2
 800230e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800231c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002324:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	015a      	lsls	r2, r3, #5
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	4413      	add	r3, r2
 800232e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002332:	461a      	mov	r2, r3
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002338:	e050      	b.n	80023dc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	212c      	movs	r1, #44	; 0x2c
 8002340:	fb01 f303 	mul.w	r3, r1, r3
 8002344:	4413      	add	r3, r2
 8002346:	3361      	adds	r3, #97	; 0x61
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b03      	cmp	r3, #3
 800234c:	d122      	bne.n	8002394 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	212c      	movs	r1, #44	; 0x2c
 8002354:	fb01 f303 	mul.w	r3, r1, r3
 8002358:	4413      	add	r3, r2
 800235a:	3360      	adds	r3, #96	; 0x60
 800235c:	2202      	movs	r2, #2
 800235e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	015a      	lsls	r2, r3, #5
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	4413      	add	r3, r2
 8002368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002376:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800237e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	015a      	lsls	r2, r3, #5
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	4413      	add	r3, r2
 8002388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800238c:	461a      	mov	r2, r3
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	6013      	str	r3, [r2, #0]
 8002392:	e023      	b.n	80023dc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	212c      	movs	r1, #44	; 0x2c
 800239a:	fb01 f303 	mul.w	r3, r1, r3
 800239e:	4413      	add	r3, r2
 80023a0:	3361      	adds	r3, #97	; 0x61
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	2b07      	cmp	r3, #7
 80023a6:	d119      	bne.n	80023dc <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	212c      	movs	r1, #44	; 0x2c
 80023ae:	fb01 f303 	mul.w	r3, r1, r3
 80023b2:	4413      	add	r3, r2
 80023b4:	335c      	adds	r3, #92	; 0x5c
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	1c5a      	adds	r2, r3, #1
 80023ba:	6879      	ldr	r1, [r7, #4]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	202c      	movs	r0, #44	; 0x2c
 80023c0:	fb00 f303 	mul.w	r3, r0, r3
 80023c4:	440b      	add	r3, r1
 80023c6:	335c      	adds	r3, #92	; 0x5c
 80023c8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	212c      	movs	r1, #44	; 0x2c
 80023d0:	fb01 f303 	mul.w	r3, r1, r3
 80023d4:	4413      	add	r3, r2
 80023d6:	3360      	adds	r3, #96	; 0x60
 80023d8:	2204      	movs	r2, #4
 80023da:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	015a      	lsls	r2, r3, #5
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	4413      	add	r3, r2
 80023e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e8:	461a      	mov	r2, r3
 80023ea:	2302      	movs	r3, #2
 80023ec:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	b2d9      	uxtb	r1, r3
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	202c      	movs	r0, #44	; 0x2c
 80023f8:	fb00 f303 	mul.w	r3, r0, r3
 80023fc:	4413      	add	r3, r2
 80023fe:	3360      	adds	r3, #96	; 0x60
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	461a      	mov	r2, r3
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f009 f859 	bl	800b4bc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800240a:	e061      	b.n	80024d0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	015a      	lsls	r2, r3, #5
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	4413      	add	r3, r2
 8002414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 0310 	and.w	r3, r3, #16
 800241e:	2b10      	cmp	r3, #16
 8002420:	d156      	bne.n	80024d0 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	212c      	movs	r1, #44	; 0x2c
 8002428:	fb01 f303 	mul.w	r3, r1, r3
 800242c:	4413      	add	r3, r2
 800242e:	333f      	adds	r3, #63	; 0x3f
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	2b03      	cmp	r3, #3
 8002434:	d111      	bne.n	800245a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	212c      	movs	r1, #44	; 0x2c
 800243c:	fb01 f303 	mul.w	r3, r1, r3
 8002440:	4413      	add	r3, r2
 8002442:	335c      	adds	r3, #92	; 0x5c
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	b2d2      	uxtb	r2, r2
 8002450:	4611      	mov	r1, r2
 8002452:	4618      	mov	r0, r3
 8002454:	f003 fa5b 	bl	800590e <USB_HC_Halt>
 8002458:	e031      	b.n	80024be <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	212c      	movs	r1, #44	; 0x2c
 8002460:	fb01 f303 	mul.w	r3, r1, r3
 8002464:	4413      	add	r3, r2
 8002466:	333f      	adds	r3, #63	; 0x3f
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d009      	beq.n	8002482 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	212c      	movs	r1, #44	; 0x2c
 8002474:	fb01 f303 	mul.w	r3, r1, r3
 8002478:	4413      	add	r3, r2
 800247a:	333f      	adds	r3, #63	; 0x3f
 800247c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800247e:	2b02      	cmp	r3, #2
 8002480:	d11d      	bne.n	80024be <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	212c      	movs	r1, #44	; 0x2c
 8002488:	fb01 f303 	mul.w	r3, r1, r3
 800248c:	4413      	add	r3, r2
 800248e:	335c      	adds	r3, #92	; 0x5c
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d110      	bne.n	80024be <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	212c      	movs	r1, #44	; 0x2c
 80024a2:	fb01 f303 	mul.w	r3, r1, r3
 80024a6:	4413      	add	r3, r2
 80024a8:	3361      	adds	r3, #97	; 0x61
 80024aa:	2203      	movs	r2, #3
 80024ac:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	4611      	mov	r1, r2
 80024b8:	4618      	mov	r0, r3
 80024ba:	f003 fa28 	bl	800590e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	015a      	lsls	r2, r3, #5
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	4413      	add	r3, r2
 80024c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ca:	461a      	mov	r2, r3
 80024cc:	2310      	movs	r3, #16
 80024ce:	6093      	str	r3, [r2, #8]
}
 80024d0:	bf00      	nop
 80024d2:	3718      	adds	r7, #24
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b088      	sub	sp, #32
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	460b      	mov	r3, r1
 80024e2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80024ee:	78fb      	ldrb	r3, [r7, #3]
 80024f0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	015a      	lsls	r2, r3, #5
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	4413      	add	r3, r2
 80024fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 0304 	and.w	r3, r3, #4
 8002504:	2b04      	cmp	r3, #4
 8002506:	d11a      	bne.n	800253e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	015a      	lsls	r2, r3, #5
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	4413      	add	r3, r2
 8002510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002514:	461a      	mov	r2, r3
 8002516:	2304      	movs	r3, #4
 8002518:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	212c      	movs	r1, #44	; 0x2c
 8002520:	fb01 f303 	mul.w	r3, r1, r3
 8002524:	4413      	add	r3, r2
 8002526:	3361      	adds	r3, #97	; 0x61
 8002528:	2206      	movs	r2, #6
 800252a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	697a      	ldr	r2, [r7, #20]
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	4611      	mov	r1, r2
 8002536:	4618      	mov	r0, r3
 8002538:	f003 f9e9 	bl	800590e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800253c:	e331      	b.n	8002ba2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	015a      	lsls	r2, r3, #5
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	4413      	add	r3, r2
 8002546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f003 0320 	and.w	r3, r3, #32
 8002550:	2b20      	cmp	r3, #32
 8002552:	d12e      	bne.n	80025b2 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	015a      	lsls	r2, r3, #5
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	4413      	add	r3, r2
 800255c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002560:	461a      	mov	r2, r3
 8002562:	2320      	movs	r3, #32
 8002564:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	212c      	movs	r1, #44	; 0x2c
 800256c:	fb01 f303 	mul.w	r3, r1, r3
 8002570:	4413      	add	r3, r2
 8002572:	333d      	adds	r3, #61	; 0x3d
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b01      	cmp	r3, #1
 8002578:	f040 8313 	bne.w	8002ba2 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	212c      	movs	r1, #44	; 0x2c
 8002582:	fb01 f303 	mul.w	r3, r1, r3
 8002586:	4413      	add	r3, r2
 8002588:	333d      	adds	r3, #61	; 0x3d
 800258a:	2200      	movs	r2, #0
 800258c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	212c      	movs	r1, #44	; 0x2c
 8002594:	fb01 f303 	mul.w	r3, r1, r3
 8002598:	4413      	add	r3, r2
 800259a:	3360      	adds	r3, #96	; 0x60
 800259c:	2202      	movs	r2, #2
 800259e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	697a      	ldr	r2, [r7, #20]
 80025a6:	b2d2      	uxtb	r2, r2
 80025a8:	4611      	mov	r1, r2
 80025aa:	4618      	mov	r0, r3
 80025ac:	f003 f9af 	bl	800590e <USB_HC_Halt>
}
 80025b0:	e2f7      	b.n	8002ba2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	015a      	lsls	r2, r3, #5
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	4413      	add	r3, r2
 80025ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025c8:	d112      	bne.n	80025f0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	015a      	lsls	r2, r3, #5
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	4413      	add	r3, r2
 80025d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d6:	461a      	mov	r2, r3
 80025d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025dc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	4611      	mov	r1, r2
 80025e8:	4618      	mov	r0, r3
 80025ea:	f003 f990 	bl	800590e <USB_HC_Halt>
}
 80025ee:	e2d8      	b.n	8002ba2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	015a      	lsls	r2, r3, #5
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	4413      	add	r3, r2
 80025f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b01      	cmp	r3, #1
 8002604:	d140      	bne.n	8002688 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	212c      	movs	r1, #44	; 0x2c
 800260c:	fb01 f303 	mul.w	r3, r1, r3
 8002610:	4413      	add	r3, r2
 8002612:	335c      	adds	r3, #92	; 0x5c
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	015a      	lsls	r2, r3, #5
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	4413      	add	r3, r2
 8002620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800262a:	2b40      	cmp	r3, #64	; 0x40
 800262c:	d111      	bne.n	8002652 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	212c      	movs	r1, #44	; 0x2c
 8002634:	fb01 f303 	mul.w	r3, r1, r3
 8002638:	4413      	add	r3, r2
 800263a:	333d      	adds	r3, #61	; 0x3d
 800263c:	2201      	movs	r2, #1
 800263e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	015a      	lsls	r2, r3, #5
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	4413      	add	r3, r2
 8002648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800264c:	461a      	mov	r2, r3
 800264e:	2340      	movs	r3, #64	; 0x40
 8002650:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	015a      	lsls	r2, r3, #5
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	4413      	add	r3, r2
 800265a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265e:	461a      	mov	r2, r3
 8002660:	2301      	movs	r3, #1
 8002662:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	212c      	movs	r1, #44	; 0x2c
 800266a:	fb01 f303 	mul.w	r3, r1, r3
 800266e:	4413      	add	r3, r2
 8002670:	3361      	adds	r3, #97	; 0x61
 8002672:	2201      	movs	r2, #1
 8002674:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	b2d2      	uxtb	r2, r2
 800267e:	4611      	mov	r1, r2
 8002680:	4618      	mov	r0, r3
 8002682:	f003 f944 	bl	800590e <USB_HC_Halt>
}
 8002686:	e28c      	b.n	8002ba2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	015a      	lsls	r2, r3, #5
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	4413      	add	r3, r2
 8002690:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800269a:	2b40      	cmp	r3, #64	; 0x40
 800269c:	d12c      	bne.n	80026f8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	212c      	movs	r1, #44	; 0x2c
 80026a4:	fb01 f303 	mul.w	r3, r1, r3
 80026a8:	4413      	add	r3, r2
 80026aa:	3361      	adds	r3, #97	; 0x61
 80026ac:	2204      	movs	r2, #4
 80026ae:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	212c      	movs	r1, #44	; 0x2c
 80026b6:	fb01 f303 	mul.w	r3, r1, r3
 80026ba:	4413      	add	r3, r2
 80026bc:	333d      	adds	r3, #61	; 0x3d
 80026be:	2201      	movs	r2, #1
 80026c0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	212c      	movs	r1, #44	; 0x2c
 80026c8:	fb01 f303 	mul.w	r3, r1, r3
 80026cc:	4413      	add	r3, r2
 80026ce:	335c      	adds	r3, #92	; 0x5c
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	4611      	mov	r1, r2
 80026de:	4618      	mov	r0, r3
 80026e0:	f003 f915 	bl	800590e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	015a      	lsls	r2, r3, #5
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	4413      	add	r3, r2
 80026ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f0:	461a      	mov	r2, r3
 80026f2:	2340      	movs	r3, #64	; 0x40
 80026f4:	6093      	str	r3, [r2, #8]
}
 80026f6:	e254      	b.n	8002ba2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	015a      	lsls	r2, r3, #5
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	4413      	add	r3, r2
 8002700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 0308 	and.w	r3, r3, #8
 800270a:	2b08      	cmp	r3, #8
 800270c:	d11a      	bne.n	8002744 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	015a      	lsls	r2, r3, #5
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	4413      	add	r3, r2
 8002716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800271a:	461a      	mov	r2, r3
 800271c:	2308      	movs	r3, #8
 800271e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	212c      	movs	r1, #44	; 0x2c
 8002726:	fb01 f303 	mul.w	r3, r1, r3
 800272a:	4413      	add	r3, r2
 800272c:	3361      	adds	r3, #97	; 0x61
 800272e:	2205      	movs	r2, #5
 8002730:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	4611      	mov	r1, r2
 800273c:	4618      	mov	r0, r3
 800273e:	f003 f8e6 	bl	800590e <USB_HC_Halt>
}
 8002742:	e22e      	b.n	8002ba2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	015a      	lsls	r2, r3, #5
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	4413      	add	r3, r2
 800274c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 0310 	and.w	r3, r3, #16
 8002756:	2b10      	cmp	r3, #16
 8002758:	d140      	bne.n	80027dc <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	212c      	movs	r1, #44	; 0x2c
 8002760:	fb01 f303 	mul.w	r3, r1, r3
 8002764:	4413      	add	r3, r2
 8002766:	335c      	adds	r3, #92	; 0x5c
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	212c      	movs	r1, #44	; 0x2c
 8002772:	fb01 f303 	mul.w	r3, r1, r3
 8002776:	4413      	add	r3, r2
 8002778:	3361      	adds	r3, #97	; 0x61
 800277a:	2203      	movs	r2, #3
 800277c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	212c      	movs	r1, #44	; 0x2c
 8002784:	fb01 f303 	mul.w	r3, r1, r3
 8002788:	4413      	add	r3, r2
 800278a:	333d      	adds	r3, #61	; 0x3d
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d112      	bne.n	80027b8 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	212c      	movs	r1, #44	; 0x2c
 8002798:	fb01 f303 	mul.w	r3, r1, r3
 800279c:	4413      	add	r3, r2
 800279e:	333c      	adds	r3, #60	; 0x3c
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d108      	bne.n	80027b8 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	212c      	movs	r1, #44	; 0x2c
 80027ac:	fb01 f303 	mul.w	r3, r1, r3
 80027b0:	4413      	add	r3, r2
 80027b2:	333d      	adds	r3, #61	; 0x3d
 80027b4:	2201      	movs	r2, #1
 80027b6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	b2d2      	uxtb	r2, r2
 80027c0:	4611      	mov	r1, r2
 80027c2:	4618      	mov	r0, r3
 80027c4:	f003 f8a3 	bl	800590e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	015a      	lsls	r2, r3, #5
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	4413      	add	r3, r2
 80027d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d4:	461a      	mov	r2, r3
 80027d6:	2310      	movs	r3, #16
 80027d8:	6093      	str	r3, [r2, #8]
}
 80027da:	e1e2      	b.n	8002ba2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	015a      	lsls	r2, r3, #5
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	4413      	add	r3, r2
 80027e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ee:	2b80      	cmp	r3, #128	; 0x80
 80027f0:	d164      	bne.n	80028bc <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d111      	bne.n	800281e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	212c      	movs	r1, #44	; 0x2c
 8002800:	fb01 f303 	mul.w	r3, r1, r3
 8002804:	4413      	add	r3, r2
 8002806:	3361      	adds	r3, #97	; 0x61
 8002808:	2206      	movs	r2, #6
 800280a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	4611      	mov	r1, r2
 8002816:	4618      	mov	r0, r3
 8002818:	f003 f879 	bl	800590e <USB_HC_Halt>
 800281c:	e044      	b.n	80028a8 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	212c      	movs	r1, #44	; 0x2c
 8002824:	fb01 f303 	mul.w	r3, r1, r3
 8002828:	4413      	add	r3, r2
 800282a:	335c      	adds	r3, #92	; 0x5c
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	1c5a      	adds	r2, r3, #1
 8002830:	6879      	ldr	r1, [r7, #4]
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	202c      	movs	r0, #44	; 0x2c
 8002836:	fb00 f303 	mul.w	r3, r0, r3
 800283a:	440b      	add	r3, r1
 800283c:	335c      	adds	r3, #92	; 0x5c
 800283e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	212c      	movs	r1, #44	; 0x2c
 8002846:	fb01 f303 	mul.w	r3, r1, r3
 800284a:	4413      	add	r3, r2
 800284c:	335c      	adds	r3, #92	; 0x5c
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2b02      	cmp	r3, #2
 8002852:	d920      	bls.n	8002896 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	212c      	movs	r1, #44	; 0x2c
 800285a:	fb01 f303 	mul.w	r3, r1, r3
 800285e:	4413      	add	r3, r2
 8002860:	335c      	adds	r3, #92	; 0x5c
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	212c      	movs	r1, #44	; 0x2c
 800286c:	fb01 f303 	mul.w	r3, r1, r3
 8002870:	4413      	add	r3, r2
 8002872:	3360      	adds	r3, #96	; 0x60
 8002874:	2204      	movs	r2, #4
 8002876:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	b2d9      	uxtb	r1, r3
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	202c      	movs	r0, #44	; 0x2c
 8002882:	fb00 f303 	mul.w	r3, r0, r3
 8002886:	4413      	add	r3, r2
 8002888:	3360      	adds	r3, #96	; 0x60
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	461a      	mov	r2, r3
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f008 fe14 	bl	800b4bc <HAL_HCD_HC_NotifyURBChange_Callback>
 8002894:	e008      	b.n	80028a8 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	212c      	movs	r1, #44	; 0x2c
 800289c:	fb01 f303 	mul.w	r3, r1, r3
 80028a0:	4413      	add	r3, r2
 80028a2:	3360      	adds	r3, #96	; 0x60
 80028a4:	2202      	movs	r2, #2
 80028a6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	015a      	lsls	r2, r3, #5
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	4413      	add	r3, r2
 80028b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b4:	461a      	mov	r2, r3
 80028b6:	2380      	movs	r3, #128	; 0x80
 80028b8:	6093      	str	r3, [r2, #8]
}
 80028ba:	e172      	b.n	8002ba2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	015a      	lsls	r2, r3, #5
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	4413      	add	r3, r2
 80028c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028d2:	d11b      	bne.n	800290c <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	212c      	movs	r1, #44	; 0x2c
 80028da:	fb01 f303 	mul.w	r3, r1, r3
 80028de:	4413      	add	r3, r2
 80028e0:	3361      	adds	r3, #97	; 0x61
 80028e2:	2208      	movs	r2, #8
 80028e4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	4611      	mov	r1, r2
 80028f0:	4618      	mov	r0, r3
 80028f2:	f003 f80c 	bl	800590e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	015a      	lsls	r2, r3, #5
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	4413      	add	r3, r2
 80028fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002902:	461a      	mov	r2, r3
 8002904:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002908:	6093      	str	r3, [r2, #8]
}
 800290a:	e14a      	b.n	8002ba2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	015a      	lsls	r2, r3, #5
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	4413      	add	r3, r2
 8002914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b02      	cmp	r3, #2
 8002920:	f040 813f 	bne.w	8002ba2 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	212c      	movs	r1, #44	; 0x2c
 800292a:	fb01 f303 	mul.w	r3, r1, r3
 800292e:	4413      	add	r3, r2
 8002930:	3361      	adds	r3, #97	; 0x61
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d17d      	bne.n	8002a34 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	212c      	movs	r1, #44	; 0x2c
 800293e:	fb01 f303 	mul.w	r3, r1, r3
 8002942:	4413      	add	r3, r2
 8002944:	3360      	adds	r3, #96	; 0x60
 8002946:	2201      	movs	r2, #1
 8002948:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	212c      	movs	r1, #44	; 0x2c
 8002950:	fb01 f303 	mul.w	r3, r1, r3
 8002954:	4413      	add	r3, r2
 8002956:	333f      	adds	r3, #63	; 0x3f
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	2b02      	cmp	r3, #2
 800295c:	d00a      	beq.n	8002974 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	212c      	movs	r1, #44	; 0x2c
 8002964:	fb01 f303 	mul.w	r3, r1, r3
 8002968:	4413      	add	r3, r2
 800296a:	333f      	adds	r3, #63	; 0x3f
 800296c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800296e:	2b03      	cmp	r3, #3
 8002970:	f040 8100 	bne.w	8002b74 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d113      	bne.n	80029a4 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	212c      	movs	r1, #44	; 0x2c
 8002982:	fb01 f303 	mul.w	r3, r1, r3
 8002986:	4413      	add	r3, r2
 8002988:	3355      	adds	r3, #85	; 0x55
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	f083 0301 	eor.w	r3, r3, #1
 8002990:	b2d8      	uxtb	r0, r3
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	212c      	movs	r1, #44	; 0x2c
 8002998:	fb01 f303 	mul.w	r3, r1, r3
 800299c:	4413      	add	r3, r2
 800299e:	3355      	adds	r3, #85	; 0x55
 80029a0:	4602      	mov	r2, r0
 80029a2:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	f040 80e3 	bne.w	8002b74 <HCD_HC_OUT_IRQHandler+0x69c>
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	212c      	movs	r1, #44	; 0x2c
 80029b4:	fb01 f303 	mul.w	r3, r1, r3
 80029b8:	4413      	add	r3, r2
 80029ba:	334c      	adds	r3, #76	; 0x4c
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f000 80d8 	beq.w	8002b74 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	212c      	movs	r1, #44	; 0x2c
 80029ca:	fb01 f303 	mul.w	r3, r1, r3
 80029ce:	4413      	add	r3, r2
 80029d0:	334c      	adds	r3, #76	; 0x4c
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6879      	ldr	r1, [r7, #4]
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	202c      	movs	r0, #44	; 0x2c
 80029da:	fb00 f202 	mul.w	r2, r0, r2
 80029de:	440a      	add	r2, r1
 80029e0:	3240      	adds	r2, #64	; 0x40
 80029e2:	8812      	ldrh	r2, [r2, #0]
 80029e4:	4413      	add	r3, r2
 80029e6:	3b01      	subs	r3, #1
 80029e8:	6879      	ldr	r1, [r7, #4]
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	202c      	movs	r0, #44	; 0x2c
 80029ee:	fb00 f202 	mul.w	r2, r0, r2
 80029f2:	440a      	add	r2, r1
 80029f4:	3240      	adds	r2, #64	; 0x40
 80029f6:	8812      	ldrh	r2, [r2, #0]
 80029f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80029fc:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 80b5 	beq.w	8002b74 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	212c      	movs	r1, #44	; 0x2c
 8002a10:	fb01 f303 	mul.w	r3, r1, r3
 8002a14:	4413      	add	r3, r2
 8002a16:	3355      	adds	r3, #85	; 0x55
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	f083 0301 	eor.w	r3, r3, #1
 8002a1e:	b2d8      	uxtb	r0, r3
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	212c      	movs	r1, #44	; 0x2c
 8002a26:	fb01 f303 	mul.w	r3, r1, r3
 8002a2a:	4413      	add	r3, r2
 8002a2c:	3355      	adds	r3, #85	; 0x55
 8002a2e:	4602      	mov	r2, r0
 8002a30:	701a      	strb	r2, [r3, #0]
 8002a32:	e09f      	b.n	8002b74 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	212c      	movs	r1, #44	; 0x2c
 8002a3a:	fb01 f303 	mul.w	r3, r1, r3
 8002a3e:	4413      	add	r3, r2
 8002a40:	3361      	adds	r3, #97	; 0x61
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	2b03      	cmp	r3, #3
 8002a46:	d109      	bne.n	8002a5c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	212c      	movs	r1, #44	; 0x2c
 8002a4e:	fb01 f303 	mul.w	r3, r1, r3
 8002a52:	4413      	add	r3, r2
 8002a54:	3360      	adds	r3, #96	; 0x60
 8002a56:	2202      	movs	r2, #2
 8002a58:	701a      	strb	r2, [r3, #0]
 8002a5a:	e08b      	b.n	8002b74 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	212c      	movs	r1, #44	; 0x2c
 8002a62:	fb01 f303 	mul.w	r3, r1, r3
 8002a66:	4413      	add	r3, r2
 8002a68:	3361      	adds	r3, #97	; 0x61
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	2b04      	cmp	r3, #4
 8002a6e:	d109      	bne.n	8002a84 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	212c      	movs	r1, #44	; 0x2c
 8002a76:	fb01 f303 	mul.w	r3, r1, r3
 8002a7a:	4413      	add	r3, r2
 8002a7c:	3360      	adds	r3, #96	; 0x60
 8002a7e:	2202      	movs	r2, #2
 8002a80:	701a      	strb	r2, [r3, #0]
 8002a82:	e077      	b.n	8002b74 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	212c      	movs	r1, #44	; 0x2c
 8002a8a:	fb01 f303 	mul.w	r3, r1, r3
 8002a8e:	4413      	add	r3, r2
 8002a90:	3361      	adds	r3, #97	; 0x61
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b05      	cmp	r3, #5
 8002a96:	d109      	bne.n	8002aac <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	212c      	movs	r1, #44	; 0x2c
 8002a9e:	fb01 f303 	mul.w	r3, r1, r3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	3360      	adds	r3, #96	; 0x60
 8002aa6:	2205      	movs	r2, #5
 8002aa8:	701a      	strb	r2, [r3, #0]
 8002aaa:	e063      	b.n	8002b74 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	212c      	movs	r1, #44	; 0x2c
 8002ab2:	fb01 f303 	mul.w	r3, r1, r3
 8002ab6:	4413      	add	r3, r2
 8002ab8:	3361      	adds	r3, #97	; 0x61
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	2b06      	cmp	r3, #6
 8002abe:	d009      	beq.n	8002ad4 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	212c      	movs	r1, #44	; 0x2c
 8002ac6:	fb01 f303 	mul.w	r3, r1, r3
 8002aca:	4413      	add	r3, r2
 8002acc:	3361      	adds	r3, #97	; 0x61
 8002ace:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ad0:	2b08      	cmp	r3, #8
 8002ad2:	d14f      	bne.n	8002b74 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	212c      	movs	r1, #44	; 0x2c
 8002ada:	fb01 f303 	mul.w	r3, r1, r3
 8002ade:	4413      	add	r3, r2
 8002ae0:	335c      	adds	r3, #92	; 0x5c
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	1c5a      	adds	r2, r3, #1
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	202c      	movs	r0, #44	; 0x2c
 8002aec:	fb00 f303 	mul.w	r3, r0, r3
 8002af0:	440b      	add	r3, r1
 8002af2:	335c      	adds	r3, #92	; 0x5c
 8002af4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	212c      	movs	r1, #44	; 0x2c
 8002afc:	fb01 f303 	mul.w	r3, r1, r3
 8002b00:	4413      	add	r3, r2
 8002b02:	335c      	adds	r3, #92	; 0x5c
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d912      	bls.n	8002b30 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	212c      	movs	r1, #44	; 0x2c
 8002b10:	fb01 f303 	mul.w	r3, r1, r3
 8002b14:	4413      	add	r3, r2
 8002b16:	335c      	adds	r3, #92	; 0x5c
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	212c      	movs	r1, #44	; 0x2c
 8002b22:	fb01 f303 	mul.w	r3, r1, r3
 8002b26:	4413      	add	r3, r2
 8002b28:	3360      	adds	r3, #96	; 0x60
 8002b2a:	2204      	movs	r2, #4
 8002b2c:	701a      	strb	r2, [r3, #0]
 8002b2e:	e021      	b.n	8002b74 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	212c      	movs	r1, #44	; 0x2c
 8002b36:	fb01 f303 	mul.w	r3, r1, r3
 8002b3a:	4413      	add	r3, r2
 8002b3c:	3360      	adds	r3, #96	; 0x60
 8002b3e:	2202      	movs	r2, #2
 8002b40:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	015a      	lsls	r2, r3, #5
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	4413      	add	r3, r2
 8002b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b58:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b60:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	015a      	lsls	r2, r3, #5
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	4413      	add	r3, r2
 8002b6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b6e:	461a      	mov	r2, r3
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	015a      	lsls	r2, r3, #5
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b80:	461a      	mov	r2, r3
 8002b82:	2302      	movs	r3, #2
 8002b84:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	b2d9      	uxtb	r1, r3
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	202c      	movs	r0, #44	; 0x2c
 8002b90:	fb00 f303 	mul.w	r3, r0, r3
 8002b94:	4413      	add	r3, r2
 8002b96:	3360      	adds	r3, #96	; 0x60
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f008 fc8d 	bl	800b4bc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002ba2:	bf00      	nop
 8002ba4:	3720      	adds	r7, #32
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b08a      	sub	sp, #40	; 0x28
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bba:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	f003 030f 	and.w	r3, r3, #15
 8002bca:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	0c5b      	lsrs	r3, r3, #17
 8002bd0:	f003 030f 	and.w	r3, r3, #15
 8002bd4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	091b      	lsrs	r3, r3, #4
 8002bda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bde:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d004      	beq.n	8002bf0 <HCD_RXQLVL_IRQHandler+0x46>
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	2b05      	cmp	r3, #5
 8002bea:	f000 80a9 	beq.w	8002d40 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002bee:	e0aa      	b.n	8002d46 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f000 80a6 	beq.w	8002d44 <HCD_RXQLVL_IRQHandler+0x19a>
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	212c      	movs	r1, #44	; 0x2c
 8002bfe:	fb01 f303 	mul.w	r3, r1, r3
 8002c02:	4413      	add	r3, r2
 8002c04:	3344      	adds	r3, #68	; 0x44
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 809b 	beq.w	8002d44 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	212c      	movs	r1, #44	; 0x2c
 8002c14:	fb01 f303 	mul.w	r3, r1, r3
 8002c18:	4413      	add	r3, r2
 8002c1a:	3350      	adds	r3, #80	; 0x50
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	441a      	add	r2, r3
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	202c      	movs	r0, #44	; 0x2c
 8002c28:	fb00 f303 	mul.w	r3, r0, r3
 8002c2c:	440b      	add	r3, r1
 8002c2e:	334c      	adds	r3, #76	; 0x4c
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d87a      	bhi.n	8002d2c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6818      	ldr	r0, [r3, #0]
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	212c      	movs	r1, #44	; 0x2c
 8002c40:	fb01 f303 	mul.w	r3, r1, r3
 8002c44:	4413      	add	r3, r2
 8002c46:	3344      	adds	r3, #68	; 0x44
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	b292      	uxth	r2, r2
 8002c4e:	4619      	mov	r1, r3
 8002c50:	f002 f9b4 	bl	8004fbc <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	212c      	movs	r1, #44	; 0x2c
 8002c5a:	fb01 f303 	mul.w	r3, r1, r3
 8002c5e:	4413      	add	r3, r2
 8002c60:	3344      	adds	r3, #68	; 0x44
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	441a      	add	r2, r3
 8002c68:	6879      	ldr	r1, [r7, #4]
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	202c      	movs	r0, #44	; 0x2c
 8002c6e:	fb00 f303 	mul.w	r3, r0, r3
 8002c72:	440b      	add	r3, r1
 8002c74:	3344      	adds	r3, #68	; 0x44
 8002c76:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	212c      	movs	r1, #44	; 0x2c
 8002c7e:	fb01 f303 	mul.w	r3, r1, r3
 8002c82:	4413      	add	r3, r2
 8002c84:	3350      	adds	r3, #80	; 0x50
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	441a      	add	r2, r3
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	202c      	movs	r0, #44	; 0x2c
 8002c92:	fb00 f303 	mul.w	r3, r0, r3
 8002c96:	440b      	add	r3, r1
 8002c98:	3350      	adds	r3, #80	; 0x50
 8002c9a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	015a      	lsls	r2, r3, #5
 8002ca0:	6a3b      	ldr	r3, [r7, #32]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	0cdb      	lsrs	r3, r3, #19
 8002cac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cb0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	212c      	movs	r1, #44	; 0x2c
 8002cb8:	fb01 f303 	mul.w	r3, r1, r3
 8002cbc:	4413      	add	r3, r2
 8002cbe:	3340      	adds	r3, #64	; 0x40
 8002cc0:	881b      	ldrh	r3, [r3, #0]
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d13c      	bne.n	8002d44 <HCD_RXQLVL_IRQHandler+0x19a>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d039      	beq.n	8002d44 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	015a      	lsls	r2, r3, #5
 8002cd4:	6a3b      	ldr	r3, [r7, #32]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ce6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002cee:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	015a      	lsls	r2, r3, #5
 8002cf4:	6a3b      	ldr	r3, [r7, #32]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	212c      	movs	r1, #44	; 0x2c
 8002d08:	fb01 f303 	mul.w	r3, r1, r3
 8002d0c:	4413      	add	r3, r2
 8002d0e:	3354      	adds	r3, #84	; 0x54
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	f083 0301 	eor.w	r3, r3, #1
 8002d16:	b2d8      	uxtb	r0, r3
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	212c      	movs	r1, #44	; 0x2c
 8002d1e:	fb01 f303 	mul.w	r3, r1, r3
 8002d22:	4413      	add	r3, r2
 8002d24:	3354      	adds	r3, #84	; 0x54
 8002d26:	4602      	mov	r2, r0
 8002d28:	701a      	strb	r2, [r3, #0]
      break;
 8002d2a:	e00b      	b.n	8002d44 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	212c      	movs	r1, #44	; 0x2c
 8002d32:	fb01 f303 	mul.w	r3, r1, r3
 8002d36:	4413      	add	r3, r2
 8002d38:	3360      	adds	r3, #96	; 0x60
 8002d3a:	2204      	movs	r2, #4
 8002d3c:	701a      	strb	r2, [r3, #0]
      break;
 8002d3e:	e001      	b.n	8002d44 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002d40:	bf00      	nop
 8002d42:	e000      	b.n	8002d46 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002d44:	bf00      	nop
  }
}
 8002d46:	bf00      	nop
 8002d48:	3728      	adds	r7, #40	; 0x28
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b086      	sub	sp, #24
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002d7a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d10b      	bne.n	8002d9e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d102      	bne.n	8002d96 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f008 fb77 	bl	800b484 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	f043 0302 	orr.w	r3, r3, #2
 8002d9c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f003 0308 	and.w	r3, r3, #8
 8002da4:	2b08      	cmp	r3, #8
 8002da6:	d132      	bne.n	8002e0e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	f043 0308 	orr.w	r3, r3, #8
 8002dae:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f003 0304 	and.w	r3, r3, #4
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	d126      	bne.n	8002e08 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d113      	bne.n	8002dea <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002dc8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002dcc:	d106      	bne.n	8002ddc <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2102      	movs	r1, #2
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f002 fa5f 	bl	8005298 <USB_InitFSLSPClkSel>
 8002dda:	e011      	b.n	8002e00 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2101      	movs	r1, #1
 8002de2:	4618      	mov	r0, r3
 8002de4:	f002 fa58 	bl	8005298 <USB_InitFSLSPClkSel>
 8002de8:	e00a      	b.n	8002e00 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d106      	bne.n	8002e00 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002df8:	461a      	mov	r2, r3
 8002dfa:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002dfe:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f008 fb6d 	bl	800b4e0 <HAL_HCD_PortEnabled_Callback>
 8002e06:	e002      	b.n	8002e0e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f008 fb77 	bl	800b4fc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f003 0320 	and.w	r3, r3, #32
 8002e14:	2b20      	cmp	r3, #32
 8002e16:	d103      	bne.n	8002e20 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	f043 0320 	orr.w	r3, r3, #32
 8002e1e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e26:	461a      	mov	r2, r3
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	6013      	str	r3, [r2, #0]
}
 8002e2c:	bf00      	nop
 8002e2e:	3718      	adds	r7, #24
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e12b      	b.n	800309e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d106      	bne.n	8002e60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7fd fe3c 	bl	8000ad8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2224      	movs	r2, #36	; 0x24
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 0201 	bic.w	r2, r2, #1
 8002e76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e98:	f001 fa20 	bl	80042dc <HAL_RCC_GetPCLK1Freq>
 8002e9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	4a81      	ldr	r2, [pc, #516]	; (80030a8 <HAL_I2C_Init+0x274>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d807      	bhi.n	8002eb8 <HAL_I2C_Init+0x84>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	4a80      	ldr	r2, [pc, #512]	; (80030ac <HAL_I2C_Init+0x278>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	bf94      	ite	ls
 8002eb0:	2301      	movls	r3, #1
 8002eb2:	2300      	movhi	r3, #0
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	e006      	b.n	8002ec6 <HAL_I2C_Init+0x92>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	4a7d      	ldr	r2, [pc, #500]	; (80030b0 <HAL_I2C_Init+0x27c>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	bf94      	ite	ls
 8002ec0:	2301      	movls	r3, #1
 8002ec2:	2300      	movhi	r3, #0
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e0e7      	b.n	800309e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	4a78      	ldr	r2, [pc, #480]	; (80030b4 <HAL_I2C_Init+0x280>)
 8002ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed6:	0c9b      	lsrs	r3, r3, #18
 8002ed8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68ba      	ldr	r2, [r7, #8]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	4a6a      	ldr	r2, [pc, #424]	; (80030a8 <HAL_I2C_Init+0x274>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d802      	bhi.n	8002f08 <HAL_I2C_Init+0xd4>
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	3301      	adds	r3, #1
 8002f06:	e009      	b.n	8002f1c <HAL_I2C_Init+0xe8>
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f0e:	fb02 f303 	mul.w	r3, r2, r3
 8002f12:	4a69      	ldr	r2, [pc, #420]	; (80030b8 <HAL_I2C_Init+0x284>)
 8002f14:	fba2 2303 	umull	r2, r3, r2, r3
 8002f18:	099b      	lsrs	r3, r3, #6
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	6812      	ldr	r2, [r2, #0]
 8002f20:	430b      	orrs	r3, r1
 8002f22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	495c      	ldr	r1, [pc, #368]	; (80030a8 <HAL_I2C_Init+0x274>)
 8002f38:	428b      	cmp	r3, r1
 8002f3a:	d819      	bhi.n	8002f70 <HAL_I2C_Init+0x13c>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	1e59      	subs	r1, r3, #1
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f4a:	1c59      	adds	r1, r3, #1
 8002f4c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f50:	400b      	ands	r3, r1
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00a      	beq.n	8002f6c <HAL_I2C_Init+0x138>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	1e59      	subs	r1, r3, #1
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f64:	3301      	adds	r3, #1
 8002f66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f6a:	e051      	b.n	8003010 <HAL_I2C_Init+0x1dc>
 8002f6c:	2304      	movs	r3, #4
 8002f6e:	e04f      	b.n	8003010 <HAL_I2C_Init+0x1dc>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d111      	bne.n	8002f9c <HAL_I2C_Init+0x168>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	1e58      	subs	r0, r3, #1
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6859      	ldr	r1, [r3, #4]
 8002f80:	460b      	mov	r3, r1
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	440b      	add	r3, r1
 8002f86:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	bf0c      	ite	eq
 8002f94:	2301      	moveq	r3, #1
 8002f96:	2300      	movne	r3, #0
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	e012      	b.n	8002fc2 <HAL_I2C_Init+0x18e>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	1e58      	subs	r0, r3, #1
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6859      	ldr	r1, [r3, #4]
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	440b      	add	r3, r1
 8002faa:	0099      	lsls	r1, r3, #2
 8002fac:	440b      	add	r3, r1
 8002fae:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	bf0c      	ite	eq
 8002fbc:	2301      	moveq	r3, #1
 8002fbe:	2300      	movne	r3, #0
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <HAL_I2C_Init+0x196>
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e022      	b.n	8003010 <HAL_I2C_Init+0x1dc>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10e      	bne.n	8002ff0 <HAL_I2C_Init+0x1bc>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	1e58      	subs	r0, r3, #1
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6859      	ldr	r1, [r3, #4]
 8002fda:	460b      	mov	r3, r1
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	440b      	add	r3, r1
 8002fe0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fee:	e00f      	b.n	8003010 <HAL_I2C_Init+0x1dc>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	1e58      	subs	r0, r3, #1
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6859      	ldr	r1, [r3, #4]
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	0099      	lsls	r1, r3, #2
 8003000:	440b      	add	r3, r1
 8003002:	fbb0 f3f3 	udiv	r3, r0, r3
 8003006:	3301      	adds	r3, #1
 8003008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800300c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003010:	6879      	ldr	r1, [r7, #4]
 8003012:	6809      	ldr	r1, [r1, #0]
 8003014:	4313      	orrs	r3, r2
 8003016:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	69da      	ldr	r2, [r3, #28]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	431a      	orrs	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	430a      	orrs	r2, r1
 8003032:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800303e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	6911      	ldr	r1, [r2, #16]
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	68d2      	ldr	r2, [r2, #12]
 800304a:	4311      	orrs	r1, r2
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	6812      	ldr	r2, [r2, #0]
 8003050:	430b      	orrs	r3, r1
 8003052:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	695a      	ldr	r2, [r3, #20]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	431a      	orrs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	430a      	orrs	r2, r1
 800306e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f042 0201 	orr.w	r2, r2, #1
 800307e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2220      	movs	r2, #32
 800308a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	000186a0 	.word	0x000186a0
 80030ac:	001e847f 	.word	0x001e847f
 80030b0:	003d08ff 	.word	0x003d08ff
 80030b4:	431bde83 	.word	0x431bde83
 80030b8:	10624dd3 	.word	0x10624dd3

080030bc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b088      	sub	sp, #32
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e128      	b.n	8003320 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d109      	bne.n	80030ee <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a90      	ldr	r2, [pc, #576]	; (8003328 <HAL_I2S_Init+0x26c>)
 80030e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f7fd fd3d 	bl	8000b68 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2202      	movs	r2, #2
 80030f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	69db      	ldr	r3, [r3, #28]
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	6812      	ldr	r2, [r2, #0]
 8003100:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003104:	f023 030f 	bic.w	r3, r3, #15
 8003108:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2202      	movs	r2, #2
 8003110:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	2b02      	cmp	r3, #2
 8003118:	d060      	beq.n	80031dc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d102      	bne.n	8003128 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003122:	2310      	movs	r3, #16
 8003124:	617b      	str	r3, [r7, #20]
 8003126:	e001      	b.n	800312c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003128:	2320      	movs	r3, #32
 800312a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	2b20      	cmp	r3, #32
 8003132:	d802      	bhi.n	800313a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800313a:	2001      	movs	r0, #1
 800313c:	f001 f9c4 	bl	80044c8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003140:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800314a:	d125      	bne.n	8003198 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d010      	beq.n	8003176 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	fbb2 f2f3 	udiv	r2, r2, r3
 800315e:	4613      	mov	r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	4413      	add	r3, r2
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	461a      	mov	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003170:	3305      	adds	r3, #5
 8003172:	613b      	str	r3, [r7, #16]
 8003174:	e01f      	b.n	80031b6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003180:	4613      	mov	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4413      	add	r3, r2
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	461a      	mov	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003192:	3305      	adds	r3, #5
 8003194:	613b      	str	r3, [r7, #16]
 8003196:	e00e      	b.n	80031b6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	fbb2 f2f3 	udiv	r2, r2, r3
 80031a0:	4613      	mov	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4413      	add	r3, r2
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	461a      	mov	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b2:	3305      	adds	r3, #5
 80031b4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	4a5c      	ldr	r2, [pc, #368]	; (800332c <HAL_I2S_Init+0x270>)
 80031ba:	fba2 2303 	umull	r2, r3, r2, r3
 80031be:	08db      	lsrs	r3, r3, #3
 80031c0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	085b      	lsrs	r3, r3, #1
 80031d2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	021b      	lsls	r3, r3, #8
 80031d8:	61bb      	str	r3, [r7, #24]
 80031da:	e003      	b.n	80031e4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80031dc:	2302      	movs	r3, #2
 80031de:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80031e0:	2300      	movs	r3, #0
 80031e2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d902      	bls.n	80031f0 <HAL_I2S_Init+0x134>
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	2bff      	cmp	r3, #255	; 0xff
 80031ee:	d907      	bls.n	8003200 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f4:	f043 0210 	orr.w	r2, r3, #16
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e08f      	b.n	8003320 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	691a      	ldr	r2, [r3, #16]
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	ea42 0103 	orr.w	r1, r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	69fa      	ldr	r2, [r7, #28]
 8003210:	430a      	orrs	r2, r1
 8003212:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800321e:	f023 030f 	bic.w	r3, r3, #15
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	6851      	ldr	r1, [r2, #4]
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	6892      	ldr	r2, [r2, #8]
 800322a:	4311      	orrs	r1, r2
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	68d2      	ldr	r2, [r2, #12]
 8003230:	4311      	orrs	r1, r2
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	6992      	ldr	r2, [r2, #24]
 8003236:	430a      	orrs	r2, r1
 8003238:	431a      	orrs	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003242:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a1b      	ldr	r3, [r3, #32]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d161      	bne.n	8003310 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a38      	ldr	r2, [pc, #224]	; (8003330 <HAL_I2S_Init+0x274>)
 8003250:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a37      	ldr	r2, [pc, #220]	; (8003334 <HAL_I2S_Init+0x278>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d101      	bne.n	8003260 <HAL_I2S_Init+0x1a4>
 800325c:	4b36      	ldr	r3, [pc, #216]	; (8003338 <HAL_I2S_Init+0x27c>)
 800325e:	e001      	b.n	8003264 <HAL_I2S_Init+0x1a8>
 8003260:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	6812      	ldr	r2, [r2, #0]
 800326a:	4932      	ldr	r1, [pc, #200]	; (8003334 <HAL_I2S_Init+0x278>)
 800326c:	428a      	cmp	r2, r1
 800326e:	d101      	bne.n	8003274 <HAL_I2S_Init+0x1b8>
 8003270:	4a31      	ldr	r2, [pc, #196]	; (8003338 <HAL_I2S_Init+0x27c>)
 8003272:	e001      	b.n	8003278 <HAL_I2S_Init+0x1bc>
 8003274:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003278:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800327c:	f023 030f 	bic.w	r3, r3, #15
 8003280:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a2b      	ldr	r2, [pc, #172]	; (8003334 <HAL_I2S_Init+0x278>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d101      	bne.n	8003290 <HAL_I2S_Init+0x1d4>
 800328c:	4b2a      	ldr	r3, [pc, #168]	; (8003338 <HAL_I2S_Init+0x27c>)
 800328e:	e001      	b.n	8003294 <HAL_I2S_Init+0x1d8>
 8003290:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003294:	2202      	movs	r2, #2
 8003296:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a25      	ldr	r2, [pc, #148]	; (8003334 <HAL_I2S_Init+0x278>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d101      	bne.n	80032a6 <HAL_I2S_Init+0x1ea>
 80032a2:	4b25      	ldr	r3, [pc, #148]	; (8003338 <HAL_I2S_Init+0x27c>)
 80032a4:	e001      	b.n	80032aa <HAL_I2S_Init+0x1ee>
 80032a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032aa:	69db      	ldr	r3, [r3, #28]
 80032ac:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032b6:	d003      	beq.n	80032c0 <HAL_I2S_Init+0x204>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d103      	bne.n	80032c8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80032c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032c4:	613b      	str	r3, [r7, #16]
 80032c6:	e001      	b.n	80032cc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80032c8:	2300      	movs	r3, #0
 80032ca:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80032d6:	4313      	orrs	r3, r2
 80032d8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80032e0:	4313      	orrs	r3, r2
 80032e2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80032ea:	4313      	orrs	r3, r2
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	897b      	ldrh	r3, [r7, #10]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80032f8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a0d      	ldr	r2, [pc, #52]	; (8003334 <HAL_I2S_Init+0x278>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d101      	bne.n	8003308 <HAL_I2S_Init+0x24c>
 8003304:	4b0c      	ldr	r3, [pc, #48]	; (8003338 <HAL_I2S_Init+0x27c>)
 8003306:	e001      	b.n	800330c <HAL_I2S_Init+0x250>
 8003308:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800330c:	897a      	ldrh	r2, [r7, #10]
 800330e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3720      	adds	r7, #32
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	08003433 	.word	0x08003433
 800332c:	cccccccd 	.word	0xcccccccd
 8003330:	08003549 	.word	0x08003549
 8003334:	40003800 	.word	0x40003800
 8003338:	40003400 	.word	0x40003400

0800333c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003384:	881a      	ldrh	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003390:	1c9a      	adds	r2, r3, #2
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800339a:	b29b      	uxth	r3, r3
 800339c:	3b01      	subs	r3, #1
 800339e:	b29a      	uxth	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10e      	bne.n	80033cc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80033bc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f7ff ffb8 	bl	800333c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80033cc:	bf00      	nop
 80033ce:	3708      	adds	r7, #8
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68da      	ldr	r2, [r3, #12]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e6:	b292      	uxth	r2, r2
 80033e8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ee:	1c9a      	adds	r2, r3, #2
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	3b01      	subs	r3, #1
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003406:	b29b      	uxth	r3, r3
 8003408:	2b00      	cmp	r3, #0
 800340a:	d10e      	bne.n	800342a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	685a      	ldr	r2, [r3, #4]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800341a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f7ff ff93 	bl	8003350 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800342a:	bf00      	nop
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b086      	sub	sp, #24
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b04      	cmp	r3, #4
 800344c:	d13a      	bne.n	80034c4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	2b01      	cmp	r3, #1
 8003456:	d109      	bne.n	800346c <I2S_IRQHandler+0x3a>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003462:	2b40      	cmp	r3, #64	; 0x40
 8003464:	d102      	bne.n	800346c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7ff ffb4 	bl	80033d4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003472:	2b40      	cmp	r3, #64	; 0x40
 8003474:	d126      	bne.n	80034c4 <I2S_IRQHandler+0x92>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f003 0320 	and.w	r3, r3, #32
 8003480:	2b20      	cmp	r3, #32
 8003482:	d11f      	bne.n	80034c4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003492:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003494:	2300      	movs	r3, #0
 8003496:	613b      	str	r3, [r7, #16]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	613b      	str	r3, [r7, #16]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	613b      	str	r3, [r7, #16]
 80034a8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b6:	f043 0202 	orr.w	r2, r3, #2
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7ff ff50 	bl	8003364 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b03      	cmp	r3, #3
 80034ce:	d136      	bne.n	800353e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d109      	bne.n	80034ee <I2S_IRQHandler+0xbc>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e4:	2b80      	cmp	r3, #128	; 0x80
 80034e6:	d102      	bne.n	80034ee <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f7ff ff45 	bl	8003378 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	f003 0308 	and.w	r3, r3, #8
 80034f4:	2b08      	cmp	r3, #8
 80034f6:	d122      	bne.n	800353e <I2S_IRQHandler+0x10c>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f003 0320 	and.w	r3, r3, #32
 8003502:	2b20      	cmp	r3, #32
 8003504:	d11b      	bne.n	800353e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003514:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003516:	2300      	movs	r3, #0
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	60fb      	str	r3, [r7, #12]
 8003522:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003530:	f043 0204 	orr.w	r2, r3, #4
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f7ff ff13 	bl	8003364 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800353e:	bf00      	nop
 8003540:	3718      	adds	r7, #24
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
	...

08003548 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b088      	sub	sp, #32
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a92      	ldr	r2, [pc, #584]	; (80037a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d101      	bne.n	8003566 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003562:	4b92      	ldr	r3, [pc, #584]	; (80037ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003564:	e001      	b.n	800356a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003566:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a8b      	ldr	r2, [pc, #556]	; (80037a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d101      	bne.n	8003584 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003580:	4b8a      	ldr	r3, [pc, #552]	; (80037ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003582:	e001      	b.n	8003588 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003584:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003594:	d004      	beq.n	80035a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	f040 8099 	bne.w	80036d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d107      	bne.n	80035ba <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d002      	beq.n	80035ba <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 f925 	bl	8003804 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	f003 0301 	and.w	r3, r3, #1
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d107      	bne.n	80035d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d002      	beq.n	80035d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f9c8 	bl	8003964 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035da:	2b40      	cmp	r3, #64	; 0x40
 80035dc:	d13a      	bne.n	8003654 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	f003 0320 	and.w	r3, r3, #32
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d035      	beq.n	8003654 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a6e      	ldr	r2, [pc, #440]	; (80037a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d101      	bne.n	80035f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80035f2:	4b6e      	ldr	r3, [pc, #440]	; (80037ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035f4:	e001      	b.n	80035fa <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80035f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035fa:	685a      	ldr	r2, [r3, #4]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4969      	ldr	r1, [pc, #420]	; (80037a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003602:	428b      	cmp	r3, r1
 8003604:	d101      	bne.n	800360a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003606:	4b69      	ldr	r3, [pc, #420]	; (80037ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003608:	e001      	b.n	800360e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800360a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800360e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003612:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	685a      	ldr	r2, [r3, #4]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003622:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003624:	2300      	movs	r3, #0
 8003626:	60fb      	str	r3, [r7, #12]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	60fb      	str	r3, [r7, #12]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	60fb      	str	r3, [r7, #12]
 8003638:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2201      	movs	r2, #1
 800363e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003646:	f043 0202 	orr.w	r2, r3, #2
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7ff fe88 	bl	8003364 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	f003 0308 	and.w	r3, r3, #8
 800365a:	2b08      	cmp	r3, #8
 800365c:	f040 80c3 	bne.w	80037e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	f003 0320 	and.w	r3, r3, #32
 8003666:	2b00      	cmp	r3, #0
 8003668:	f000 80bd 	beq.w	80037e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	685a      	ldr	r2, [r3, #4]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800367a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a49      	ldr	r2, [pc, #292]	; (80037a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d101      	bne.n	800368a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003686:	4b49      	ldr	r3, [pc, #292]	; (80037ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003688:	e001      	b.n	800368e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800368a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4944      	ldr	r1, [pc, #272]	; (80037a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003696:	428b      	cmp	r3, r1
 8003698:	d101      	bne.n	800369e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800369a:	4b44      	ldr	r3, [pc, #272]	; (80037ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800369c:	e001      	b.n	80036a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800369e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036a6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80036a8:	2300      	movs	r3, #0
 80036aa:	60bb      	str	r3, [r7, #8]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	60bb      	str	r3, [r7, #8]
 80036b4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c2:	f043 0204 	orr.w	r2, r3, #4
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7ff fe4a 	bl	8003364 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036d0:	e089      	b.n	80037e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d107      	bne.n	80036ec <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d002      	beq.n	80036ec <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f8be 	bl	8003868 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d107      	bne.n	8003706 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d002      	beq.n	8003706 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 f8fd 	bl	8003900 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800370c:	2b40      	cmp	r3, #64	; 0x40
 800370e:	d12f      	bne.n	8003770 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	f003 0320 	and.w	r3, r3, #32
 8003716:	2b00      	cmp	r3, #0
 8003718:	d02a      	beq.n	8003770 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	685a      	ldr	r2, [r3, #4]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003728:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a1e      	ldr	r2, [pc, #120]	; (80037a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d101      	bne.n	8003738 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003734:	4b1d      	ldr	r3, [pc, #116]	; (80037ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003736:	e001      	b.n	800373c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003738:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800373c:	685a      	ldr	r2, [r3, #4]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4919      	ldr	r1, [pc, #100]	; (80037a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003744:	428b      	cmp	r3, r1
 8003746:	d101      	bne.n	800374c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003748:	4b18      	ldr	r3, [pc, #96]	; (80037ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800374a:	e001      	b.n	8003750 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800374c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003750:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003754:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003762:	f043 0202 	orr.w	r2, r3, #2
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7ff fdfa 	bl	8003364 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	f003 0308 	and.w	r3, r3, #8
 8003776:	2b08      	cmp	r3, #8
 8003778:	d136      	bne.n	80037e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	f003 0320 	and.w	r3, r3, #32
 8003780:	2b00      	cmp	r3, #0
 8003782:	d031      	beq.n	80037e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a07      	ldr	r2, [pc, #28]	; (80037a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d101      	bne.n	8003792 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800378e:	4b07      	ldr	r3, [pc, #28]	; (80037ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003790:	e001      	b.n	8003796 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003792:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4902      	ldr	r1, [pc, #8]	; (80037a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800379e:	428b      	cmp	r3, r1
 80037a0:	d106      	bne.n	80037b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80037a2:	4b02      	ldr	r3, [pc, #8]	; (80037ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037a4:	e006      	b.n	80037b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80037a6:	bf00      	nop
 80037a8:	40003800 	.word	0x40003800
 80037ac:	40003400 	.word	0x40003400
 80037b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037b8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	685a      	ldr	r2, [r3, #4]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037c8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d6:	f043 0204 	orr.w	r2, r3, #4
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f7ff fdc0 	bl	8003364 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037e4:	e000      	b.n	80037e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037e6:	bf00      	nop
}
 80037e8:	bf00      	nop
 80037ea:	3720      	adds	r7, #32
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	1c99      	adds	r1, r3, #2
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	6251      	str	r1, [r2, #36]	; 0x24
 8003816:	881a      	ldrh	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003822:	b29b      	uxth	r3, r3
 8003824:	3b01      	subs	r3, #1
 8003826:	b29a      	uxth	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003830:	b29b      	uxth	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d113      	bne.n	800385e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	685a      	ldr	r2, [r3, #4]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003844:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800384a:	b29b      	uxth	r3, r3
 800384c:	2b00      	cmp	r3, #0
 800384e:	d106      	bne.n	800385e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f7ff ffc9 	bl	80037f0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800385e:	bf00      	nop
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
	...

08003868 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003874:	1c99      	adds	r1, r3, #2
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6251      	str	r1, [r2, #36]	; 0x24
 800387a:	8819      	ldrh	r1, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a1d      	ldr	r2, [pc, #116]	; (80038f8 <I2SEx_TxISR_I2SExt+0x90>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d101      	bne.n	800388a <I2SEx_TxISR_I2SExt+0x22>
 8003886:	4b1d      	ldr	r3, [pc, #116]	; (80038fc <I2SEx_TxISR_I2SExt+0x94>)
 8003888:	e001      	b.n	800388e <I2SEx_TxISR_I2SExt+0x26>
 800388a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800388e:	460a      	mov	r2, r1
 8003890:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003896:	b29b      	uxth	r3, r3
 8003898:	3b01      	subs	r3, #1
 800389a:	b29a      	uxth	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d121      	bne.n	80038ee <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a12      	ldr	r2, [pc, #72]	; (80038f8 <I2SEx_TxISR_I2SExt+0x90>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d101      	bne.n	80038b8 <I2SEx_TxISR_I2SExt+0x50>
 80038b4:	4b11      	ldr	r3, [pc, #68]	; (80038fc <I2SEx_TxISR_I2SExt+0x94>)
 80038b6:	e001      	b.n	80038bc <I2SEx_TxISR_I2SExt+0x54>
 80038b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038bc:	685a      	ldr	r2, [r3, #4]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	490d      	ldr	r1, [pc, #52]	; (80038f8 <I2SEx_TxISR_I2SExt+0x90>)
 80038c4:	428b      	cmp	r3, r1
 80038c6:	d101      	bne.n	80038cc <I2SEx_TxISR_I2SExt+0x64>
 80038c8:	4b0c      	ldr	r3, [pc, #48]	; (80038fc <I2SEx_TxISR_I2SExt+0x94>)
 80038ca:	e001      	b.n	80038d0 <I2SEx_TxISR_I2SExt+0x68>
 80038cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038d4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038da:	b29b      	uxth	r3, r3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d106      	bne.n	80038ee <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f7ff ff81 	bl	80037f0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038ee:	bf00      	nop
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	40003800 	.word	0x40003800
 80038fc:	40003400 	.word	0x40003400

08003900 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68d8      	ldr	r0, [r3, #12]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003912:	1c99      	adds	r1, r3, #2
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003918:	b282      	uxth	r2, r0
 800391a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003920:	b29b      	uxth	r3, r3
 8003922:	3b01      	subs	r3, #1
 8003924:	b29a      	uxth	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800392e:	b29b      	uxth	r3, r3
 8003930:	2b00      	cmp	r3, #0
 8003932:	d113      	bne.n	800395c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685a      	ldr	r2, [r3, #4]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003942:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003948:	b29b      	uxth	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d106      	bne.n	800395c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7ff ff4a 	bl	80037f0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800395c:	bf00      	nop
 800395e:	3708      	adds	r7, #8
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a20      	ldr	r2, [pc, #128]	; (80039f4 <I2SEx_RxISR_I2SExt+0x90>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d101      	bne.n	800397a <I2SEx_RxISR_I2SExt+0x16>
 8003976:	4b20      	ldr	r3, [pc, #128]	; (80039f8 <I2SEx_RxISR_I2SExt+0x94>)
 8003978:	e001      	b.n	800397e <I2SEx_RxISR_I2SExt+0x1a>
 800397a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800397e:	68d8      	ldr	r0, [r3, #12]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003984:	1c99      	adds	r1, r3, #2
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	62d1      	str	r1, [r2, #44]	; 0x2c
 800398a:	b282      	uxth	r2, r0
 800398c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003992:	b29b      	uxth	r3, r3
 8003994:	3b01      	subs	r3, #1
 8003996:	b29a      	uxth	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d121      	bne.n	80039ea <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a12      	ldr	r2, [pc, #72]	; (80039f4 <I2SEx_RxISR_I2SExt+0x90>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d101      	bne.n	80039b4 <I2SEx_RxISR_I2SExt+0x50>
 80039b0:	4b11      	ldr	r3, [pc, #68]	; (80039f8 <I2SEx_RxISR_I2SExt+0x94>)
 80039b2:	e001      	b.n	80039b8 <I2SEx_RxISR_I2SExt+0x54>
 80039b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039b8:	685a      	ldr	r2, [r3, #4]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	490d      	ldr	r1, [pc, #52]	; (80039f4 <I2SEx_RxISR_I2SExt+0x90>)
 80039c0:	428b      	cmp	r3, r1
 80039c2:	d101      	bne.n	80039c8 <I2SEx_RxISR_I2SExt+0x64>
 80039c4:	4b0c      	ldr	r3, [pc, #48]	; (80039f8 <I2SEx_RxISR_I2SExt+0x94>)
 80039c6:	e001      	b.n	80039cc <I2SEx_RxISR_I2SExt+0x68>
 80039c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039cc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039d0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d106      	bne.n	80039ea <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f7ff ff03 	bl	80037f0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039ea:	bf00      	nop
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	40003800 	.word	0x40003800
 80039f8:	40003400 	.word	0x40003400

080039fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e267      	b.n	8003ede <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d075      	beq.n	8003b06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a1a:	4b88      	ldr	r3, [pc, #544]	; (8003c3c <HAL_RCC_OscConfig+0x240>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f003 030c 	and.w	r3, r3, #12
 8003a22:	2b04      	cmp	r3, #4
 8003a24:	d00c      	beq.n	8003a40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a26:	4b85      	ldr	r3, [pc, #532]	; (8003c3c <HAL_RCC_OscConfig+0x240>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a2e:	2b08      	cmp	r3, #8
 8003a30:	d112      	bne.n	8003a58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a32:	4b82      	ldr	r3, [pc, #520]	; (8003c3c <HAL_RCC_OscConfig+0x240>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a3e:	d10b      	bne.n	8003a58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a40:	4b7e      	ldr	r3, [pc, #504]	; (8003c3c <HAL_RCC_OscConfig+0x240>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d05b      	beq.n	8003b04 <HAL_RCC_OscConfig+0x108>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d157      	bne.n	8003b04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e242      	b.n	8003ede <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a60:	d106      	bne.n	8003a70 <HAL_RCC_OscConfig+0x74>
 8003a62:	4b76      	ldr	r3, [pc, #472]	; (8003c3c <HAL_RCC_OscConfig+0x240>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a75      	ldr	r2, [pc, #468]	; (8003c3c <HAL_RCC_OscConfig+0x240>)
 8003a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a6c:	6013      	str	r3, [r2, #0]
 8003a6e:	e01d      	b.n	8003aac <HAL_RCC_OscConfig+0xb0>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a78:	d10c      	bne.n	8003a94 <HAL_RCC_OscConfig+0x98>
 8003a7a:	4b70      	ldr	r3, [pc, #448]	; (8003c3c <HAL_RCC_OscConfig+0x240>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a6f      	ldr	r2, [pc, #444]	; (8003c3c <HAL_RCC_OscConfig+0x240>)
 8003a80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a84:	6013      	str	r3, [r2, #0]
 8003a86:	4b6d      	ldr	r3, [pc, #436]	; (8003c3c <HAL_RCC_OscConfig+0x240>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a6c      	ldr	r2, [pc, #432]	; (8003c3c <HAL_RCC_OscConfig+0x240>)
 8003a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a90:	6013      	str	r3, [r2, #0]
 8003a92:	e00b      	b.n	8003aac <HAL_RCC_OscConfig+0xb0>
 8003a94:	4b69      	ldr	r3, [pc, #420]	; (8003c3c <HAL_RCC_OscConfig+0x240>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a68      	ldr	r2, [pc, #416]	; (8003c3c <HAL_RCC_OscConfig+0x240>)
 8003a9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a9e:	6013      	str	r3, [r2, #0]
 8003aa0:	4b66      	ldr	r3, [pc, #408]	; (8003c3c <HAL_RCC_OscConfig+0x240>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a65      	ldr	r2, [pc, #404]	; (8003c3c <HAL_RCC_OscConfig+0x240>)
 8003aa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d013      	beq.n	8003adc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab4:	f7fd fa8a 	bl	8000fcc <HAL_GetTick>
 8003ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aba:	e008      	b.n	8003ace <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003abc:	f7fd fa86 	bl	8000fcc <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b64      	cmp	r3, #100	; 0x64
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e207      	b.n	8003ede <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ace:	4b5b      	ldr	r3, [pc, #364]	; (8003c3c <HAL_RCC_OscConfig+0x240>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d0f0      	beq.n	8003abc <HAL_RCC_OscConfig+0xc0>
 8003ada:	e014      	b.n	8003b06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003adc:	f7fd fa76 	bl	8000fcc <HAL_GetTick>
 8003ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ae2:	e008      	b.n	8003af6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ae4:	f7fd fa72 	bl	8000fcc <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b64      	cmp	r3, #100	; 0x64
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e1f3      	b.n	8003ede <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003af6:	4b51      	ldr	r3, [pc, #324]	; (8003c3c <HAL_RCC_OscConfig+0x240>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1f0      	bne.n	8003ae4 <HAL_RCC_OscConfig+0xe8>
 8003b02:	e000      	b.n	8003b06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d063      	beq.n	8003bda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b12:	4b4a      	ldr	r3, [pc, #296]	; (8003c3c <HAL_RCC_OscConfig+0x240>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f003 030c 	and.w	r3, r3, #12
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00b      	beq.n	8003b36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b1e:	4b47      	ldr	r3, [pc, #284]	; (8003c3c <HAL_RCC_OscConfig+0x240>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b26:	2b08      	cmp	r3, #8
 8003b28:	d11c      	bne.n	8003b64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b2a:	4b44      	ldr	r3, [pc, #272]	; (8003c3c <HAL_RCC_OscConfig+0x240>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d116      	bne.n	8003b64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b36:	4b41      	ldr	r3, [pc, #260]	; (8003c3c <HAL_RCC_OscConfig+0x240>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d005      	beq.n	8003b4e <HAL_RCC_OscConfig+0x152>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d001      	beq.n	8003b4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e1c7      	b.n	8003ede <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b4e:	4b3b      	ldr	r3, [pc, #236]	; (8003c3c <HAL_RCC_OscConfig+0x240>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	00db      	lsls	r3, r3, #3
 8003b5c:	4937      	ldr	r1, [pc, #220]	; (8003c3c <HAL_RCC_OscConfig+0x240>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b62:	e03a      	b.n	8003bda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d020      	beq.n	8003bae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b6c:	4b34      	ldr	r3, [pc, #208]	; (8003c40 <HAL_RCC_OscConfig+0x244>)
 8003b6e:	2201      	movs	r2, #1
 8003b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b72:	f7fd fa2b 	bl	8000fcc <HAL_GetTick>
 8003b76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b78:	e008      	b.n	8003b8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b7a:	f7fd fa27 	bl	8000fcc <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e1a8      	b.n	8003ede <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b8c:	4b2b      	ldr	r3, [pc, #172]	; (8003c3c <HAL_RCC_OscConfig+0x240>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d0f0      	beq.n	8003b7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b98:	4b28      	ldr	r3, [pc, #160]	; (8003c3c <HAL_RCC_OscConfig+0x240>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	00db      	lsls	r3, r3, #3
 8003ba6:	4925      	ldr	r1, [pc, #148]	; (8003c3c <HAL_RCC_OscConfig+0x240>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	600b      	str	r3, [r1, #0]
 8003bac:	e015      	b.n	8003bda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bae:	4b24      	ldr	r3, [pc, #144]	; (8003c40 <HAL_RCC_OscConfig+0x244>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb4:	f7fd fa0a 	bl	8000fcc <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bbc:	f7fd fa06 	bl	8000fcc <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e187      	b.n	8003ede <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bce:	4b1b      	ldr	r3, [pc, #108]	; (8003c3c <HAL_RCC_OscConfig+0x240>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1f0      	bne.n	8003bbc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0308 	and.w	r3, r3, #8
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d036      	beq.n	8003c54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d016      	beq.n	8003c1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bee:	4b15      	ldr	r3, [pc, #84]	; (8003c44 <HAL_RCC_OscConfig+0x248>)
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf4:	f7fd f9ea 	bl	8000fcc <HAL_GetTick>
 8003bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bfa:	e008      	b.n	8003c0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bfc:	f7fd f9e6 	bl	8000fcc <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e167      	b.n	8003ede <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c0e:	4b0b      	ldr	r3, [pc, #44]	; (8003c3c <HAL_RCC_OscConfig+0x240>)
 8003c10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d0f0      	beq.n	8003bfc <HAL_RCC_OscConfig+0x200>
 8003c1a:	e01b      	b.n	8003c54 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c1c:	4b09      	ldr	r3, [pc, #36]	; (8003c44 <HAL_RCC_OscConfig+0x248>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c22:	f7fd f9d3 	bl	8000fcc <HAL_GetTick>
 8003c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c28:	e00e      	b.n	8003c48 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c2a:	f7fd f9cf 	bl	8000fcc <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d907      	bls.n	8003c48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e150      	b.n	8003ede <HAL_RCC_OscConfig+0x4e2>
 8003c3c:	40023800 	.word	0x40023800
 8003c40:	42470000 	.word	0x42470000
 8003c44:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c48:	4b88      	ldr	r3, [pc, #544]	; (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003c4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1ea      	bne.n	8003c2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0304 	and.w	r3, r3, #4
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f000 8097 	beq.w	8003d90 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c62:	2300      	movs	r3, #0
 8003c64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c66:	4b81      	ldr	r3, [pc, #516]	; (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10f      	bne.n	8003c92 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c72:	2300      	movs	r3, #0
 8003c74:	60bb      	str	r3, [r7, #8]
 8003c76:	4b7d      	ldr	r3, [pc, #500]	; (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7a:	4a7c      	ldr	r2, [pc, #496]	; (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c80:	6413      	str	r3, [r2, #64]	; 0x40
 8003c82:	4b7a      	ldr	r3, [pc, #488]	; (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c8a:	60bb      	str	r3, [r7, #8]
 8003c8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c92:	4b77      	ldr	r3, [pc, #476]	; (8003e70 <HAL_RCC_OscConfig+0x474>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d118      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c9e:	4b74      	ldr	r3, [pc, #464]	; (8003e70 <HAL_RCC_OscConfig+0x474>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a73      	ldr	r2, [pc, #460]	; (8003e70 <HAL_RCC_OscConfig+0x474>)
 8003ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ca8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003caa:	f7fd f98f 	bl	8000fcc <HAL_GetTick>
 8003cae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cb0:	e008      	b.n	8003cc4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cb2:	f7fd f98b 	bl	8000fcc <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d901      	bls.n	8003cc4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e10c      	b.n	8003ede <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc4:	4b6a      	ldr	r3, [pc, #424]	; (8003e70 <HAL_RCC_OscConfig+0x474>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d0f0      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d106      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x2ea>
 8003cd8:	4b64      	ldr	r3, [pc, #400]	; (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cdc:	4a63      	ldr	r2, [pc, #396]	; (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003cde:	f043 0301 	orr.w	r3, r3, #1
 8003ce2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ce4:	e01c      	b.n	8003d20 <HAL_RCC_OscConfig+0x324>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	2b05      	cmp	r3, #5
 8003cec:	d10c      	bne.n	8003d08 <HAL_RCC_OscConfig+0x30c>
 8003cee:	4b5f      	ldr	r3, [pc, #380]	; (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf2:	4a5e      	ldr	r2, [pc, #376]	; (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003cf4:	f043 0304 	orr.w	r3, r3, #4
 8003cf8:	6713      	str	r3, [r2, #112]	; 0x70
 8003cfa:	4b5c      	ldr	r3, [pc, #368]	; (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cfe:	4a5b      	ldr	r2, [pc, #364]	; (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003d00:	f043 0301 	orr.w	r3, r3, #1
 8003d04:	6713      	str	r3, [r2, #112]	; 0x70
 8003d06:	e00b      	b.n	8003d20 <HAL_RCC_OscConfig+0x324>
 8003d08:	4b58      	ldr	r3, [pc, #352]	; (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0c:	4a57      	ldr	r2, [pc, #348]	; (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003d0e:	f023 0301 	bic.w	r3, r3, #1
 8003d12:	6713      	str	r3, [r2, #112]	; 0x70
 8003d14:	4b55      	ldr	r3, [pc, #340]	; (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d18:	4a54      	ldr	r2, [pc, #336]	; (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003d1a:	f023 0304 	bic.w	r3, r3, #4
 8003d1e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d015      	beq.n	8003d54 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d28:	f7fd f950 	bl	8000fcc <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d2e:	e00a      	b.n	8003d46 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d30:	f7fd f94c 	bl	8000fcc <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e0cb      	b.n	8003ede <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d46:	4b49      	ldr	r3, [pc, #292]	; (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d0ee      	beq.n	8003d30 <HAL_RCC_OscConfig+0x334>
 8003d52:	e014      	b.n	8003d7e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d54:	f7fd f93a 	bl	8000fcc <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d5a:	e00a      	b.n	8003d72 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d5c:	f7fd f936 	bl	8000fcc <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e0b5      	b.n	8003ede <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d72:	4b3e      	ldr	r3, [pc, #248]	; (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1ee      	bne.n	8003d5c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d7e:	7dfb      	ldrb	r3, [r7, #23]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d105      	bne.n	8003d90 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d84:	4b39      	ldr	r3, [pc, #228]	; (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d88:	4a38      	ldr	r2, [pc, #224]	; (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003d8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d8e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 80a1 	beq.w	8003edc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d9a:	4b34      	ldr	r3, [pc, #208]	; (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f003 030c 	and.w	r3, r3, #12
 8003da2:	2b08      	cmp	r3, #8
 8003da4:	d05c      	beq.n	8003e60 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d141      	bne.n	8003e32 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dae:	4b31      	ldr	r3, [pc, #196]	; (8003e74 <HAL_RCC_OscConfig+0x478>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db4:	f7fd f90a 	bl	8000fcc <HAL_GetTick>
 8003db8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dba:	e008      	b.n	8003dce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dbc:	f7fd f906 	bl	8000fcc <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e087      	b.n	8003ede <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dce:	4b27      	ldr	r3, [pc, #156]	; (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1f0      	bne.n	8003dbc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	69da      	ldr	r2, [r3, #28]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	431a      	orrs	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de8:	019b      	lsls	r3, r3, #6
 8003dea:	431a      	orrs	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df0:	085b      	lsrs	r3, r3, #1
 8003df2:	3b01      	subs	r3, #1
 8003df4:	041b      	lsls	r3, r3, #16
 8003df6:	431a      	orrs	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfc:	061b      	lsls	r3, r3, #24
 8003dfe:	491b      	ldr	r1, [pc, #108]	; (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e04:	4b1b      	ldr	r3, [pc, #108]	; (8003e74 <HAL_RCC_OscConfig+0x478>)
 8003e06:	2201      	movs	r2, #1
 8003e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e0a:	f7fd f8df 	bl	8000fcc <HAL_GetTick>
 8003e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e10:	e008      	b.n	8003e24 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e12:	f7fd f8db 	bl	8000fcc <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d901      	bls.n	8003e24 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e05c      	b.n	8003ede <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e24:	4b11      	ldr	r3, [pc, #68]	; (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d0f0      	beq.n	8003e12 <HAL_RCC_OscConfig+0x416>
 8003e30:	e054      	b.n	8003edc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e32:	4b10      	ldr	r3, [pc, #64]	; (8003e74 <HAL_RCC_OscConfig+0x478>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e38:	f7fd f8c8 	bl	8000fcc <HAL_GetTick>
 8003e3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e3e:	e008      	b.n	8003e52 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e40:	f7fd f8c4 	bl	8000fcc <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e045      	b.n	8003ede <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e52:	4b06      	ldr	r3, [pc, #24]	; (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1f0      	bne.n	8003e40 <HAL_RCC_OscConfig+0x444>
 8003e5e:	e03d      	b.n	8003edc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d107      	bne.n	8003e78 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e038      	b.n	8003ede <HAL_RCC_OscConfig+0x4e2>
 8003e6c:	40023800 	.word	0x40023800
 8003e70:	40007000 	.word	0x40007000
 8003e74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e78:	4b1b      	ldr	r3, [pc, #108]	; (8003ee8 <HAL_RCC_OscConfig+0x4ec>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d028      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d121      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d11a      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003eae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d111      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ebe:	085b      	lsrs	r3, r3, #1
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d107      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d001      	beq.n	8003edc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e000      	b.n	8003ede <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3718      	adds	r7, #24
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	40023800 	.word	0x40023800

08003eec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d101      	bne.n	8003f00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e0cc      	b.n	800409a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f00:	4b68      	ldr	r3, [pc, #416]	; (80040a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0307 	and.w	r3, r3, #7
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d90c      	bls.n	8003f28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f0e:	4b65      	ldr	r3, [pc, #404]	; (80040a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f10:	683a      	ldr	r2, [r7, #0]
 8003f12:	b2d2      	uxtb	r2, r2
 8003f14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f16:	4b63      	ldr	r3, [pc, #396]	; (80040a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0307 	and.w	r3, r3, #7
 8003f1e:	683a      	ldr	r2, [r7, #0]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d001      	beq.n	8003f28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e0b8      	b.n	800409a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d020      	beq.n	8003f76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0304 	and.w	r3, r3, #4
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d005      	beq.n	8003f4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f40:	4b59      	ldr	r3, [pc, #356]	; (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	4a58      	ldr	r2, [pc, #352]	; (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0308 	and.w	r3, r3, #8
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d005      	beq.n	8003f64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f58:	4b53      	ldr	r3, [pc, #332]	; (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	4a52      	ldr	r2, [pc, #328]	; (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f64:	4b50      	ldr	r3, [pc, #320]	; (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	494d      	ldr	r1, [pc, #308]	; (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d044      	beq.n	800400c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d107      	bne.n	8003f9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f8a:	4b47      	ldr	r3, [pc, #284]	; (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d119      	bne.n	8003fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e07f      	b.n	800409a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d003      	beq.n	8003faa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fa6:	2b03      	cmp	r3, #3
 8003fa8:	d107      	bne.n	8003fba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003faa:	4b3f      	ldr	r3, [pc, #252]	; (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d109      	bne.n	8003fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e06f      	b.n	800409a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fba:	4b3b      	ldr	r3, [pc, #236]	; (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e067      	b.n	800409a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fca:	4b37      	ldr	r3, [pc, #220]	; (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f023 0203 	bic.w	r2, r3, #3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	4934      	ldr	r1, [pc, #208]	; (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fdc:	f7fc fff6 	bl	8000fcc <HAL_GetTick>
 8003fe0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fe2:	e00a      	b.n	8003ffa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fe4:	f7fc fff2 	bl	8000fcc <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e04f      	b.n	800409a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ffa:	4b2b      	ldr	r3, [pc, #172]	; (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f003 020c 	and.w	r2, r3, #12
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	429a      	cmp	r2, r3
 800400a:	d1eb      	bne.n	8003fe4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800400c:	4b25      	ldr	r3, [pc, #148]	; (80040a4 <HAL_RCC_ClockConfig+0x1b8>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0307 	and.w	r3, r3, #7
 8004014:	683a      	ldr	r2, [r7, #0]
 8004016:	429a      	cmp	r2, r3
 8004018:	d20c      	bcs.n	8004034 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800401a:	4b22      	ldr	r3, [pc, #136]	; (80040a4 <HAL_RCC_ClockConfig+0x1b8>)
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	b2d2      	uxtb	r2, r2
 8004020:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004022:	4b20      	ldr	r3, [pc, #128]	; (80040a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0307 	and.w	r3, r3, #7
 800402a:	683a      	ldr	r2, [r7, #0]
 800402c:	429a      	cmp	r2, r3
 800402e:	d001      	beq.n	8004034 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e032      	b.n	800409a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0304 	and.w	r3, r3, #4
 800403c:	2b00      	cmp	r3, #0
 800403e:	d008      	beq.n	8004052 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004040:	4b19      	ldr	r3, [pc, #100]	; (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	4916      	ldr	r1, [pc, #88]	; (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 800404e:	4313      	orrs	r3, r2
 8004050:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0308 	and.w	r3, r3, #8
 800405a:	2b00      	cmp	r3, #0
 800405c:	d009      	beq.n	8004072 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800405e:	4b12      	ldr	r3, [pc, #72]	; (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	00db      	lsls	r3, r3, #3
 800406c:	490e      	ldr	r1, [pc, #56]	; (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 800406e:	4313      	orrs	r3, r2
 8004070:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004072:	f000 f821 	bl	80040b8 <HAL_RCC_GetSysClockFreq>
 8004076:	4602      	mov	r2, r0
 8004078:	4b0b      	ldr	r3, [pc, #44]	; (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	091b      	lsrs	r3, r3, #4
 800407e:	f003 030f 	and.w	r3, r3, #15
 8004082:	490a      	ldr	r1, [pc, #40]	; (80040ac <HAL_RCC_ClockConfig+0x1c0>)
 8004084:	5ccb      	ldrb	r3, [r1, r3]
 8004086:	fa22 f303 	lsr.w	r3, r2, r3
 800408a:	4a09      	ldr	r2, [pc, #36]	; (80040b0 <HAL_RCC_ClockConfig+0x1c4>)
 800408c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800408e:	4b09      	ldr	r3, [pc, #36]	; (80040b4 <HAL_RCC_ClockConfig+0x1c8>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4618      	mov	r0, r3
 8004094:	f7fc ff56 	bl	8000f44 <HAL_InitTick>

  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	40023c00 	.word	0x40023c00
 80040a8:	40023800 	.word	0x40023800
 80040ac:	0800bc44 	.word	0x0800bc44
 80040b0:	20000004 	.word	0x20000004
 80040b4:	20000008 	.word	0x20000008

080040b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040bc:	b094      	sub	sp, #80	; 0x50
 80040be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040c0:	2300      	movs	r3, #0
 80040c2:	647b      	str	r3, [r7, #68]	; 0x44
 80040c4:	2300      	movs	r3, #0
 80040c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040c8:	2300      	movs	r3, #0
 80040ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80040cc:	2300      	movs	r3, #0
 80040ce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040d0:	4b79      	ldr	r3, [pc, #484]	; (80042b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f003 030c 	and.w	r3, r3, #12
 80040d8:	2b08      	cmp	r3, #8
 80040da:	d00d      	beq.n	80040f8 <HAL_RCC_GetSysClockFreq+0x40>
 80040dc:	2b08      	cmp	r3, #8
 80040de:	f200 80e1 	bhi.w	80042a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d002      	beq.n	80040ec <HAL_RCC_GetSysClockFreq+0x34>
 80040e6:	2b04      	cmp	r3, #4
 80040e8:	d003      	beq.n	80040f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80040ea:	e0db      	b.n	80042a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040ec:	4b73      	ldr	r3, [pc, #460]	; (80042bc <HAL_RCC_GetSysClockFreq+0x204>)
 80040ee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80040f0:	e0db      	b.n	80042aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040f2:	4b73      	ldr	r3, [pc, #460]	; (80042c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80040f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040f6:	e0d8      	b.n	80042aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040f8:	4b6f      	ldr	r3, [pc, #444]	; (80042b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004100:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004102:	4b6d      	ldr	r3, [pc, #436]	; (80042b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d063      	beq.n	80041d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800410e:	4b6a      	ldr	r3, [pc, #424]	; (80042b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	099b      	lsrs	r3, r3, #6
 8004114:	2200      	movs	r2, #0
 8004116:	63bb      	str	r3, [r7, #56]	; 0x38
 8004118:	63fa      	str	r2, [r7, #60]	; 0x3c
 800411a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800411c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004120:	633b      	str	r3, [r7, #48]	; 0x30
 8004122:	2300      	movs	r3, #0
 8004124:	637b      	str	r3, [r7, #52]	; 0x34
 8004126:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800412a:	4622      	mov	r2, r4
 800412c:	462b      	mov	r3, r5
 800412e:	f04f 0000 	mov.w	r0, #0
 8004132:	f04f 0100 	mov.w	r1, #0
 8004136:	0159      	lsls	r1, r3, #5
 8004138:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800413c:	0150      	lsls	r0, r2, #5
 800413e:	4602      	mov	r2, r0
 8004140:	460b      	mov	r3, r1
 8004142:	4621      	mov	r1, r4
 8004144:	1a51      	subs	r1, r2, r1
 8004146:	6139      	str	r1, [r7, #16]
 8004148:	4629      	mov	r1, r5
 800414a:	eb63 0301 	sbc.w	r3, r3, r1
 800414e:	617b      	str	r3, [r7, #20]
 8004150:	f04f 0200 	mov.w	r2, #0
 8004154:	f04f 0300 	mov.w	r3, #0
 8004158:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800415c:	4659      	mov	r1, fp
 800415e:	018b      	lsls	r3, r1, #6
 8004160:	4651      	mov	r1, sl
 8004162:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004166:	4651      	mov	r1, sl
 8004168:	018a      	lsls	r2, r1, #6
 800416a:	4651      	mov	r1, sl
 800416c:	ebb2 0801 	subs.w	r8, r2, r1
 8004170:	4659      	mov	r1, fp
 8004172:	eb63 0901 	sbc.w	r9, r3, r1
 8004176:	f04f 0200 	mov.w	r2, #0
 800417a:	f04f 0300 	mov.w	r3, #0
 800417e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004182:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004186:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800418a:	4690      	mov	r8, r2
 800418c:	4699      	mov	r9, r3
 800418e:	4623      	mov	r3, r4
 8004190:	eb18 0303 	adds.w	r3, r8, r3
 8004194:	60bb      	str	r3, [r7, #8]
 8004196:	462b      	mov	r3, r5
 8004198:	eb49 0303 	adc.w	r3, r9, r3
 800419c:	60fb      	str	r3, [r7, #12]
 800419e:	f04f 0200 	mov.w	r2, #0
 80041a2:	f04f 0300 	mov.w	r3, #0
 80041a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80041aa:	4629      	mov	r1, r5
 80041ac:	024b      	lsls	r3, r1, #9
 80041ae:	4621      	mov	r1, r4
 80041b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80041b4:	4621      	mov	r1, r4
 80041b6:	024a      	lsls	r2, r1, #9
 80041b8:	4610      	mov	r0, r2
 80041ba:	4619      	mov	r1, r3
 80041bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041be:	2200      	movs	r2, #0
 80041c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80041c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041c8:	f7fc f802 	bl	80001d0 <__aeabi_uldivmod>
 80041cc:	4602      	mov	r2, r0
 80041ce:	460b      	mov	r3, r1
 80041d0:	4613      	mov	r3, r2
 80041d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041d4:	e058      	b.n	8004288 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041d6:	4b38      	ldr	r3, [pc, #224]	; (80042b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	099b      	lsrs	r3, r3, #6
 80041dc:	2200      	movs	r2, #0
 80041de:	4618      	mov	r0, r3
 80041e0:	4611      	mov	r1, r2
 80041e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80041e6:	623b      	str	r3, [r7, #32]
 80041e8:	2300      	movs	r3, #0
 80041ea:	627b      	str	r3, [r7, #36]	; 0x24
 80041ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80041f0:	4642      	mov	r2, r8
 80041f2:	464b      	mov	r3, r9
 80041f4:	f04f 0000 	mov.w	r0, #0
 80041f8:	f04f 0100 	mov.w	r1, #0
 80041fc:	0159      	lsls	r1, r3, #5
 80041fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004202:	0150      	lsls	r0, r2, #5
 8004204:	4602      	mov	r2, r0
 8004206:	460b      	mov	r3, r1
 8004208:	4641      	mov	r1, r8
 800420a:	ebb2 0a01 	subs.w	sl, r2, r1
 800420e:	4649      	mov	r1, r9
 8004210:	eb63 0b01 	sbc.w	fp, r3, r1
 8004214:	f04f 0200 	mov.w	r2, #0
 8004218:	f04f 0300 	mov.w	r3, #0
 800421c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004220:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004224:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004228:	ebb2 040a 	subs.w	r4, r2, sl
 800422c:	eb63 050b 	sbc.w	r5, r3, fp
 8004230:	f04f 0200 	mov.w	r2, #0
 8004234:	f04f 0300 	mov.w	r3, #0
 8004238:	00eb      	lsls	r3, r5, #3
 800423a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800423e:	00e2      	lsls	r2, r4, #3
 8004240:	4614      	mov	r4, r2
 8004242:	461d      	mov	r5, r3
 8004244:	4643      	mov	r3, r8
 8004246:	18e3      	adds	r3, r4, r3
 8004248:	603b      	str	r3, [r7, #0]
 800424a:	464b      	mov	r3, r9
 800424c:	eb45 0303 	adc.w	r3, r5, r3
 8004250:	607b      	str	r3, [r7, #4]
 8004252:	f04f 0200 	mov.w	r2, #0
 8004256:	f04f 0300 	mov.w	r3, #0
 800425a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800425e:	4629      	mov	r1, r5
 8004260:	028b      	lsls	r3, r1, #10
 8004262:	4621      	mov	r1, r4
 8004264:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004268:	4621      	mov	r1, r4
 800426a:	028a      	lsls	r2, r1, #10
 800426c:	4610      	mov	r0, r2
 800426e:	4619      	mov	r1, r3
 8004270:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004272:	2200      	movs	r2, #0
 8004274:	61bb      	str	r3, [r7, #24]
 8004276:	61fa      	str	r2, [r7, #28]
 8004278:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800427c:	f7fb ffa8 	bl	80001d0 <__aeabi_uldivmod>
 8004280:	4602      	mov	r2, r0
 8004282:	460b      	mov	r3, r1
 8004284:	4613      	mov	r3, r2
 8004286:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004288:	4b0b      	ldr	r3, [pc, #44]	; (80042b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	0c1b      	lsrs	r3, r3, #16
 800428e:	f003 0303 	and.w	r3, r3, #3
 8004292:	3301      	adds	r3, #1
 8004294:	005b      	lsls	r3, r3, #1
 8004296:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004298:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800429a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800429c:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042a2:	e002      	b.n	80042aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042a4:	4b05      	ldr	r3, [pc, #20]	; (80042bc <HAL_RCC_GetSysClockFreq+0x204>)
 80042a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3750      	adds	r7, #80	; 0x50
 80042b0:	46bd      	mov	sp, r7
 80042b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042b6:	bf00      	nop
 80042b8:	40023800 	.word	0x40023800
 80042bc:	00f42400 	.word	0x00f42400
 80042c0:	007a1200 	.word	0x007a1200

080042c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042c4:	b480      	push	{r7}
 80042c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042c8:	4b03      	ldr	r3, [pc, #12]	; (80042d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80042ca:	681b      	ldr	r3, [r3, #0]
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	20000004 	.word	0x20000004

080042dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042e0:	f7ff fff0 	bl	80042c4 <HAL_RCC_GetHCLKFreq>
 80042e4:	4602      	mov	r2, r0
 80042e6:	4b05      	ldr	r3, [pc, #20]	; (80042fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	0a9b      	lsrs	r3, r3, #10
 80042ec:	f003 0307 	and.w	r3, r3, #7
 80042f0:	4903      	ldr	r1, [pc, #12]	; (8004300 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042f2:	5ccb      	ldrb	r3, [r1, r3]
 80042f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	40023800 	.word	0x40023800
 8004300:	0800bc54 	.word	0x0800bc54

08004304 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800430c:	2300      	movs	r3, #0
 800430e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004310:	2300      	movs	r3, #0
 8004312:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	2b00      	cmp	r3, #0
 800431e:	d105      	bne.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004328:	2b00      	cmp	r3, #0
 800432a:	d035      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800432c:	4b62      	ldr	r3, [pc, #392]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800432e:	2200      	movs	r2, #0
 8004330:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004332:	f7fc fe4b 	bl	8000fcc <HAL_GetTick>
 8004336:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004338:	e008      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800433a:	f7fc fe47 	bl	8000fcc <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	2b02      	cmp	r3, #2
 8004346:	d901      	bls.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e0b0      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800434c:	4b5b      	ldr	r3, [pc, #364]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1f0      	bne.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	019a      	lsls	r2, r3, #6
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	071b      	lsls	r3, r3, #28
 8004364:	4955      	ldr	r1, [pc, #340]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004366:	4313      	orrs	r3, r2
 8004368:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800436c:	4b52      	ldr	r3, [pc, #328]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800436e:	2201      	movs	r2, #1
 8004370:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004372:	f7fc fe2b 	bl	8000fcc <HAL_GetTick>
 8004376:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004378:	e008      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800437a:	f7fc fe27 	bl	8000fcc <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	2b02      	cmp	r3, #2
 8004386:	d901      	bls.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e090      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800438c:	4b4b      	ldr	r3, [pc, #300]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d0f0      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f000 8083 	beq.w	80044ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80043a6:	2300      	movs	r3, #0
 80043a8:	60fb      	str	r3, [r7, #12]
 80043aa:	4b44      	ldr	r3, [pc, #272]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ae:	4a43      	ldr	r2, [pc, #268]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043b4:	6413      	str	r3, [r2, #64]	; 0x40
 80043b6:	4b41      	ldr	r3, [pc, #260]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043be:	60fb      	str	r3, [r7, #12]
 80043c0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80043c2:	4b3f      	ldr	r3, [pc, #252]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a3e      	ldr	r2, [pc, #248]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043cc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80043ce:	f7fc fdfd 	bl	8000fcc <HAL_GetTick>
 80043d2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043d4:	e008      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80043d6:	f7fc fdf9 	bl	8000fcc <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d901      	bls.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e062      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043e8:	4b35      	ldr	r3, [pc, #212]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d0f0      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043f4:	4b31      	ldr	r3, [pc, #196]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043fc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d02f      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	429a      	cmp	r2, r3
 8004410:	d028      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004412:	4b2a      	ldr	r3, [pc, #168]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004416:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800441a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800441c:	4b29      	ldr	r3, [pc, #164]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800441e:	2201      	movs	r2, #1
 8004420:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004422:	4b28      	ldr	r3, [pc, #160]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004424:	2200      	movs	r2, #0
 8004426:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004428:	4a24      	ldr	r2, [pc, #144]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800442e:	4b23      	ldr	r3, [pc, #140]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b01      	cmp	r3, #1
 8004438:	d114      	bne.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800443a:	f7fc fdc7 	bl	8000fcc <HAL_GetTick>
 800443e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004440:	e00a      	b.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004442:	f7fc fdc3 	bl	8000fcc <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004450:	4293      	cmp	r3, r2
 8004452:	d901      	bls.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e02a      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004458:	4b18      	ldr	r3, [pc, #96]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800445a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d0ee      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800446c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004470:	d10d      	bne.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004472:	4b12      	ldr	r3, [pc, #72]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004482:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004486:	490d      	ldr	r1, [pc, #52]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004488:	4313      	orrs	r3, r2
 800448a:	608b      	str	r3, [r1, #8]
 800448c:	e005      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800448e:	4b0b      	ldr	r3, [pc, #44]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	4a0a      	ldr	r2, [pc, #40]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004494:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004498:	6093      	str	r3, [r2, #8]
 800449a:	4b08      	ldr	r3, [pc, #32]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800449c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044a6:	4905      	ldr	r1, [pc, #20]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3718      	adds	r7, #24
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	42470068 	.word	0x42470068
 80044bc:	40023800 	.word	0x40023800
 80044c0:	40007000 	.word	0x40007000
 80044c4:	42470e40 	.word	0x42470e40

080044c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b087      	sub	sp, #28
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80044d4:	2300      	movs	r3, #0
 80044d6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80044d8:	2300      	movs	r3, #0
 80044da:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80044dc:	2300      	movs	r3, #0
 80044de:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d13e      	bne.n	8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80044e6:	4b23      	ldr	r3, [pc, #140]	; (8004574 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044ee:	60fb      	str	r3, [r7, #12]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d005      	beq.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d12f      	bne.n	800455c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80044fc:	4b1e      	ldr	r3, [pc, #120]	; (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80044fe:	617b      	str	r3, [r7, #20]
          break;
 8004500:	e02f      	b.n	8004562 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004502:	4b1c      	ldr	r3, [pc, #112]	; (8004574 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800450a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800450e:	d108      	bne.n	8004522 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004510:	4b18      	ldr	r3, [pc, #96]	; (8004574 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004518:	4a18      	ldr	r2, [pc, #96]	; (800457c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800451a:	fbb2 f3f3 	udiv	r3, r2, r3
 800451e:	613b      	str	r3, [r7, #16]
 8004520:	e007      	b.n	8004532 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004522:	4b14      	ldr	r3, [pc, #80]	; (8004574 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800452a:	4a15      	ldr	r2, [pc, #84]	; (8004580 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800452c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004530:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004532:	4b10      	ldr	r3, [pc, #64]	; (8004574 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004534:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004538:	099b      	lsrs	r3, r3, #6
 800453a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	fb02 f303 	mul.w	r3, r2, r3
 8004544:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004546:	4b0b      	ldr	r3, [pc, #44]	; (8004574 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004548:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800454c:	0f1b      	lsrs	r3, r3, #28
 800454e:	f003 0307 	and.w	r3, r3, #7
 8004552:	68ba      	ldr	r2, [r7, #8]
 8004554:	fbb2 f3f3 	udiv	r3, r2, r3
 8004558:	617b      	str	r3, [r7, #20]
          break;
 800455a:	e002      	b.n	8004562 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800455c:	2300      	movs	r3, #0
 800455e:	617b      	str	r3, [r7, #20]
          break;
 8004560:	bf00      	nop
        }
      }
      break;
 8004562:	bf00      	nop
    }
  }
  return frequency;
 8004564:	697b      	ldr	r3, [r7, #20]
}
 8004566:	4618      	mov	r0, r3
 8004568:	371c      	adds	r7, #28
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	40023800 	.word	0x40023800
 8004578:	00bb8000 	.word	0x00bb8000
 800457c:	007a1200 	.word	0x007a1200
 8004580:	00f42400 	.word	0x00f42400

08004584 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e07b      	b.n	800468e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459a:	2b00      	cmp	r3, #0
 800459c:	d108      	bne.n	80045b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045a6:	d009      	beq.n	80045bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	61da      	str	r2, [r3, #28]
 80045ae:	e005      	b.n	80045bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d106      	bne.n	80045dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f7fc fb46 	bl	8000c68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2202      	movs	r2, #2
 80045e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004604:	431a      	orrs	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800460e:	431a      	orrs	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	f003 0302 	and.w	r3, r3, #2
 8004618:	431a      	orrs	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	431a      	orrs	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800462c:	431a      	orrs	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	69db      	ldr	r3, [r3, #28]
 8004632:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004636:	431a      	orrs	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a1b      	ldr	r3, [r3, #32]
 800463c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004640:	ea42 0103 	orr.w	r1, r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004648:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	430a      	orrs	r2, r1
 8004652:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	0c1b      	lsrs	r3, r3, #16
 800465a:	f003 0104 	and.w	r1, r3, #4
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004662:	f003 0210 	and.w	r2, r3, #16
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	430a      	orrs	r2, r1
 800466c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	69da      	ldr	r2, [r3, #28]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800467c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3708      	adds	r7, #8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b082      	sub	sp, #8
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d101      	bne.n	80046a8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e041      	b.n	800472c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d106      	bne.n	80046c2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f7fc fb1b 	bl	8000cf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2202      	movs	r2, #2
 80046c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	3304      	adds	r3, #4
 80046d2:	4619      	mov	r1, r3
 80046d4:	4610      	mov	r0, r2
 80046d6:	f000 f9cf 	bl	8004a78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2201      	movs	r2, #1
 8004716:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2201      	movs	r2, #1
 800471e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3708      	adds	r7, #8
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2b01      	cmp	r3, #1
 8004746:	d001      	beq.n	800474c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e046      	b.n	80047da <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2202      	movs	r2, #2
 8004750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a23      	ldr	r2, [pc, #140]	; (80047e8 <HAL_TIM_Base_Start+0xb4>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d022      	beq.n	80047a4 <HAL_TIM_Base_Start+0x70>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004766:	d01d      	beq.n	80047a4 <HAL_TIM_Base_Start+0x70>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a1f      	ldr	r2, [pc, #124]	; (80047ec <HAL_TIM_Base_Start+0xb8>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d018      	beq.n	80047a4 <HAL_TIM_Base_Start+0x70>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a1e      	ldr	r2, [pc, #120]	; (80047f0 <HAL_TIM_Base_Start+0xbc>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d013      	beq.n	80047a4 <HAL_TIM_Base_Start+0x70>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a1c      	ldr	r2, [pc, #112]	; (80047f4 <HAL_TIM_Base_Start+0xc0>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d00e      	beq.n	80047a4 <HAL_TIM_Base_Start+0x70>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a1b      	ldr	r2, [pc, #108]	; (80047f8 <HAL_TIM_Base_Start+0xc4>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d009      	beq.n	80047a4 <HAL_TIM_Base_Start+0x70>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a19      	ldr	r2, [pc, #100]	; (80047fc <HAL_TIM_Base_Start+0xc8>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d004      	beq.n	80047a4 <HAL_TIM_Base_Start+0x70>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a18      	ldr	r2, [pc, #96]	; (8004800 <HAL_TIM_Base_Start+0xcc>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d111      	bne.n	80047c8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f003 0307 	and.w	r3, r3, #7
 80047ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2b06      	cmp	r3, #6
 80047b4:	d010      	beq.n	80047d8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f042 0201 	orr.w	r2, r2, #1
 80047c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047c6:	e007      	b.n	80047d8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f042 0201 	orr.w	r2, r2, #1
 80047d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3714      	adds	r7, #20
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	40010000 	.word	0x40010000
 80047ec:	40000400 	.word	0x40000400
 80047f0:	40000800 	.word	0x40000800
 80047f4:	40000c00 	.word	0x40000c00
 80047f8:	40010400 	.word	0x40010400
 80047fc:	40014000 	.word	0x40014000
 8004800:	40001800 	.word	0x40001800

08004804 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	2b02      	cmp	r3, #2
 8004818:	d122      	bne.n	8004860 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	f003 0302 	and.w	r3, r3, #2
 8004824:	2b02      	cmp	r3, #2
 8004826:	d11b      	bne.n	8004860 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f06f 0202 	mvn.w	r2, #2
 8004830:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2201      	movs	r2, #1
 8004836:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	f003 0303 	and.w	r3, r3, #3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d003      	beq.n	800484e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f8f8 	bl	8004a3c <HAL_TIM_IC_CaptureCallback>
 800484c:	e005      	b.n	800485a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 f8ea 	bl	8004a28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 f8fb 	bl	8004a50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	f003 0304 	and.w	r3, r3, #4
 800486a:	2b04      	cmp	r3, #4
 800486c:	d122      	bne.n	80048b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	2b04      	cmp	r3, #4
 800487a:	d11b      	bne.n	80048b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f06f 0204 	mvn.w	r2, #4
 8004884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2202      	movs	r2, #2
 800488a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004896:	2b00      	cmp	r3, #0
 8004898:	d003      	beq.n	80048a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 f8ce 	bl	8004a3c <HAL_TIM_IC_CaptureCallback>
 80048a0:	e005      	b.n	80048ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f8c0 	bl	8004a28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 f8d1 	bl	8004a50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	f003 0308 	and.w	r3, r3, #8
 80048be:	2b08      	cmp	r3, #8
 80048c0:	d122      	bne.n	8004908 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	f003 0308 	and.w	r3, r3, #8
 80048cc:	2b08      	cmp	r3, #8
 80048ce:	d11b      	bne.n	8004908 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f06f 0208 	mvn.w	r2, #8
 80048d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2204      	movs	r2, #4
 80048de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	69db      	ldr	r3, [r3, #28]
 80048e6:	f003 0303 	and.w	r3, r3, #3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f8a4 	bl	8004a3c <HAL_TIM_IC_CaptureCallback>
 80048f4:	e005      	b.n	8004902 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 f896 	bl	8004a28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 f8a7 	bl	8004a50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	f003 0310 	and.w	r3, r3, #16
 8004912:	2b10      	cmp	r3, #16
 8004914:	d122      	bne.n	800495c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	f003 0310 	and.w	r3, r3, #16
 8004920:	2b10      	cmp	r3, #16
 8004922:	d11b      	bne.n	800495c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f06f 0210 	mvn.w	r2, #16
 800492c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2208      	movs	r2, #8
 8004932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	69db      	ldr	r3, [r3, #28]
 800493a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 f87a 	bl	8004a3c <HAL_TIM_IC_CaptureCallback>
 8004948:	e005      	b.n	8004956 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 f86c 	bl	8004a28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 f87d 	bl	8004a50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	2b01      	cmp	r3, #1
 8004968:	d10e      	bne.n	8004988 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	f003 0301 	and.w	r3, r3, #1
 8004974:	2b01      	cmp	r3, #1
 8004976:	d107      	bne.n	8004988 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f06f 0201 	mvn.w	r2, #1
 8004980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f846 	bl	8004a14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004992:	2b80      	cmp	r3, #128	; 0x80
 8004994:	d10e      	bne.n	80049b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a0:	2b80      	cmp	r3, #128	; 0x80
 80049a2:	d107      	bne.n	80049b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 f988 	bl	8004cc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049be:	2b40      	cmp	r3, #64	; 0x40
 80049c0:	d10e      	bne.n	80049e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049cc:	2b40      	cmp	r3, #64	; 0x40
 80049ce:	d107      	bne.n	80049e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 f842 	bl	8004a64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	f003 0320 	and.w	r3, r3, #32
 80049ea:	2b20      	cmp	r3, #32
 80049ec:	d10e      	bne.n	8004a0c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	f003 0320 	and.w	r3, r3, #32
 80049f8:	2b20      	cmp	r3, #32
 80049fa:	d107      	bne.n	8004a0c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f06f 0220 	mvn.w	r2, #32
 8004a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f952 	bl	8004cb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a0c:	bf00      	nop
 8004a0e:	3708      	adds	r7, #8
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a44:	bf00      	nop
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a40      	ldr	r2, [pc, #256]	; (8004b8c <TIM_Base_SetConfig+0x114>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d013      	beq.n	8004ab8 <TIM_Base_SetConfig+0x40>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a96:	d00f      	beq.n	8004ab8 <TIM_Base_SetConfig+0x40>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a3d      	ldr	r2, [pc, #244]	; (8004b90 <TIM_Base_SetConfig+0x118>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d00b      	beq.n	8004ab8 <TIM_Base_SetConfig+0x40>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a3c      	ldr	r2, [pc, #240]	; (8004b94 <TIM_Base_SetConfig+0x11c>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d007      	beq.n	8004ab8 <TIM_Base_SetConfig+0x40>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a3b      	ldr	r2, [pc, #236]	; (8004b98 <TIM_Base_SetConfig+0x120>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d003      	beq.n	8004ab8 <TIM_Base_SetConfig+0x40>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4a3a      	ldr	r2, [pc, #232]	; (8004b9c <TIM_Base_SetConfig+0x124>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d108      	bne.n	8004aca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004abe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a2f      	ldr	r2, [pc, #188]	; (8004b8c <TIM_Base_SetConfig+0x114>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d02b      	beq.n	8004b2a <TIM_Base_SetConfig+0xb2>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ad8:	d027      	beq.n	8004b2a <TIM_Base_SetConfig+0xb2>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a2c      	ldr	r2, [pc, #176]	; (8004b90 <TIM_Base_SetConfig+0x118>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d023      	beq.n	8004b2a <TIM_Base_SetConfig+0xb2>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a2b      	ldr	r2, [pc, #172]	; (8004b94 <TIM_Base_SetConfig+0x11c>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d01f      	beq.n	8004b2a <TIM_Base_SetConfig+0xb2>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a2a      	ldr	r2, [pc, #168]	; (8004b98 <TIM_Base_SetConfig+0x120>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d01b      	beq.n	8004b2a <TIM_Base_SetConfig+0xb2>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a29      	ldr	r2, [pc, #164]	; (8004b9c <TIM_Base_SetConfig+0x124>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d017      	beq.n	8004b2a <TIM_Base_SetConfig+0xb2>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a28      	ldr	r2, [pc, #160]	; (8004ba0 <TIM_Base_SetConfig+0x128>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d013      	beq.n	8004b2a <TIM_Base_SetConfig+0xb2>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a27      	ldr	r2, [pc, #156]	; (8004ba4 <TIM_Base_SetConfig+0x12c>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d00f      	beq.n	8004b2a <TIM_Base_SetConfig+0xb2>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a26      	ldr	r2, [pc, #152]	; (8004ba8 <TIM_Base_SetConfig+0x130>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d00b      	beq.n	8004b2a <TIM_Base_SetConfig+0xb2>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a25      	ldr	r2, [pc, #148]	; (8004bac <TIM_Base_SetConfig+0x134>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d007      	beq.n	8004b2a <TIM_Base_SetConfig+0xb2>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a24      	ldr	r2, [pc, #144]	; (8004bb0 <TIM_Base_SetConfig+0x138>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d003      	beq.n	8004b2a <TIM_Base_SetConfig+0xb2>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a23      	ldr	r2, [pc, #140]	; (8004bb4 <TIM_Base_SetConfig+0x13c>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d108      	bne.n	8004b3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	689a      	ldr	r2, [r3, #8]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a0a      	ldr	r2, [pc, #40]	; (8004b8c <TIM_Base_SetConfig+0x114>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d003      	beq.n	8004b70 <TIM_Base_SetConfig+0xf8>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a0c      	ldr	r2, [pc, #48]	; (8004b9c <TIM_Base_SetConfig+0x124>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d103      	bne.n	8004b78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	691a      	ldr	r2, [r3, #16]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	615a      	str	r2, [r3, #20]
}
 8004b7e:	bf00      	nop
 8004b80:	3714      	adds	r7, #20
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	40010000 	.word	0x40010000
 8004b90:	40000400 	.word	0x40000400
 8004b94:	40000800 	.word	0x40000800
 8004b98:	40000c00 	.word	0x40000c00
 8004b9c:	40010400 	.word	0x40010400
 8004ba0:	40014000 	.word	0x40014000
 8004ba4:	40014400 	.word	0x40014400
 8004ba8:	40014800 	.word	0x40014800
 8004bac:	40001800 	.word	0x40001800
 8004bb0:	40001c00 	.word	0x40001c00
 8004bb4:	40002000 	.word	0x40002000

08004bb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d101      	bne.n	8004bd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bcc:	2302      	movs	r3, #2
 8004bce:	e05a      	b.n	8004c86 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2202      	movs	r2, #2
 8004bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a21      	ldr	r2, [pc, #132]	; (8004c94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d022      	beq.n	8004c5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c1c:	d01d      	beq.n	8004c5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a1d      	ldr	r2, [pc, #116]	; (8004c98 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d018      	beq.n	8004c5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a1b      	ldr	r2, [pc, #108]	; (8004c9c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d013      	beq.n	8004c5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a1a      	ldr	r2, [pc, #104]	; (8004ca0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d00e      	beq.n	8004c5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a18      	ldr	r2, [pc, #96]	; (8004ca4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d009      	beq.n	8004c5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a17      	ldr	r2, [pc, #92]	; (8004ca8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d004      	beq.n	8004c5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a15      	ldr	r2, [pc, #84]	; (8004cac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d10c      	bne.n	8004c74 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	68ba      	ldr	r2, [r7, #8]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68ba      	ldr	r2, [r7, #8]
 8004c72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3714      	adds	r7, #20
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	40010000 	.word	0x40010000
 8004c98:	40000400 	.word	0x40000400
 8004c9c:	40000800 	.word	0x40000800
 8004ca0:	40000c00 	.word	0x40000c00
 8004ca4:	40010400 	.word	0x40010400
 8004ca8:	40014000 	.word	0x40014000
 8004cac:	40001800 	.word	0x40001800

08004cb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cb8:	bf00      	nop
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004cd8:	b084      	sub	sp, #16
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b084      	sub	sp, #16
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
 8004ce2:	f107 001c 	add.w	r0, r7, #28
 8004ce6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d122      	bne.n	8004d36 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004d04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004d18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d105      	bne.n	8004d2a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 f9c0 	bl	80050b0 <USB_CoreReset>
 8004d30:	4603      	mov	r3, r0
 8004d32:	73fb      	strb	r3, [r7, #15]
 8004d34:	e01a      	b.n	8004d6c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 f9b4 	bl	80050b0 <USB_CoreReset>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004d4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d106      	bne.n	8004d60 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d56:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	639a      	str	r2, [r3, #56]	; 0x38
 8004d5e:	e005      	b.n	8004d6c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d10b      	bne.n	8004d8a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f043 0206 	orr.w	r2, r3, #6
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f043 0220 	orr.w	r2, r3, #32
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d96:	b004      	add	sp, #16
 8004d98:	4770      	bx	lr

08004d9a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b083      	sub	sp, #12
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f043 0201 	orr.w	r2, r3, #1
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f023 0201 	bic.w	r2, r3, #1
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	370c      	adds	r7, #12
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr

08004dde <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004dde:	b580      	push	{r7, lr}
 8004de0:	b084      	sub	sp, #16
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
 8004de6:	460b      	mov	r3, r1
 8004de8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004dea:	2300      	movs	r3, #0
 8004dec:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004dfa:	78fb      	ldrb	r3, [r7, #3]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d115      	bne.n	8004e2c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e0c:	2001      	movs	r0, #1
 8004e0e:	f7fc f8e9 	bl	8000fe4 <HAL_Delay>
      ms++;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	3301      	adds	r3, #1
 8004e16:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 f93a 	bl	8005092 <USB_GetMode>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d01e      	beq.n	8004e62 <USB_SetCurrentMode+0x84>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2b31      	cmp	r3, #49	; 0x31
 8004e28:	d9f0      	bls.n	8004e0c <USB_SetCurrentMode+0x2e>
 8004e2a:	e01a      	b.n	8004e62 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004e2c:	78fb      	ldrb	r3, [r7, #3]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d115      	bne.n	8004e5e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e3e:	2001      	movs	r0, #1
 8004e40:	f7fc f8d0 	bl	8000fe4 <HAL_Delay>
      ms++;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	3301      	adds	r3, #1
 8004e48:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 f921 	bl	8005092 <USB_GetMode>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d005      	beq.n	8004e62 <USB_SetCurrentMode+0x84>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2b31      	cmp	r3, #49	; 0x31
 8004e5a:	d9f0      	bls.n	8004e3e <USB_SetCurrentMode+0x60>
 8004e5c:	e001      	b.n	8004e62 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e005      	b.n	8004e6e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2b32      	cmp	r3, #50	; 0x32
 8004e66:	d101      	bne.n	8004e6c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e000      	b.n	8004e6e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
	...

08004e78 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e82:	2300      	movs	r3, #0
 8004e84:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	3301      	adds	r3, #1
 8004e8a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	4a13      	ldr	r2, [pc, #76]	; (8004edc <USB_FlushTxFifo+0x64>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d901      	bls.n	8004e98 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e01b      	b.n	8004ed0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	daf2      	bge.n	8004e86 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	019b      	lsls	r3, r3, #6
 8004ea8:	f043 0220 	orr.w	r2, r3, #32
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	4a08      	ldr	r2, [pc, #32]	; (8004edc <USB_FlushTxFifo+0x64>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d901      	bls.n	8004ec2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e006      	b.n	8004ed0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	f003 0320 	and.w	r3, r3, #32
 8004eca:	2b20      	cmp	r3, #32
 8004ecc:	d0f0      	beq.n	8004eb0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3714      	adds	r7, #20
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr
 8004edc:	00030d40 	.word	0x00030d40

08004ee0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	3301      	adds	r3, #1
 8004ef0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	4a11      	ldr	r2, [pc, #68]	; (8004f3c <USB_FlushRxFifo+0x5c>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d901      	bls.n	8004efe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e018      	b.n	8004f30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	daf2      	bge.n	8004eec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004f06:	2300      	movs	r3, #0
 8004f08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2210      	movs	r2, #16
 8004f0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	3301      	adds	r3, #1
 8004f14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	4a08      	ldr	r2, [pc, #32]	; (8004f3c <USB_FlushRxFifo+0x5c>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d901      	bls.n	8004f22 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e006      	b.n	8004f30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	f003 0310 	and.w	r3, r3, #16
 8004f2a:	2b10      	cmp	r3, #16
 8004f2c:	d0f0      	beq.n	8004f10 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3714      	adds	r7, #20
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr
 8004f3c:	00030d40 	.word	0x00030d40

08004f40 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b089      	sub	sp, #36	; 0x24
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	4611      	mov	r1, r2
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	460b      	mov	r3, r1
 8004f50:	71fb      	strb	r3, [r7, #7]
 8004f52:	4613      	mov	r3, r2
 8004f54:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004f5e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d123      	bne.n	8004fae <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004f66:	88bb      	ldrh	r3, [r7, #4]
 8004f68:	3303      	adds	r3, #3
 8004f6a:	089b      	lsrs	r3, r3, #2
 8004f6c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004f6e:	2300      	movs	r3, #0
 8004f70:	61bb      	str	r3, [r7, #24]
 8004f72:	e018      	b.n	8004fa6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004f74:	79fb      	ldrb	r3, [r7, #7]
 8004f76:	031a      	lsls	r2, r3, #12
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f80:	461a      	mov	r2, r3
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	3301      	adds	r3, #1
 8004f92:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	3301      	adds	r3, #1
 8004f98:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	61bb      	str	r3, [r7, #24]
 8004fa6:	69ba      	ldr	r2, [r7, #24]
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d3e2      	bcc.n	8004f74 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3724      	adds	r7, #36	; 0x24
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b08b      	sub	sp, #44	; 0x2c
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004fd2:	88fb      	ldrh	r3, [r7, #6]
 8004fd4:	089b      	lsrs	r3, r3, #2
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004fda:	88fb      	ldrh	r3, [r7, #6]
 8004fdc:	f003 0303 	and.w	r3, r3, #3
 8004fe0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	623b      	str	r3, [r7, #32]
 8004fe6:	e014      	b.n	8005012 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff2:	601a      	str	r2, [r3, #0]
    pDest++;
 8004ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005002:	3301      	adds	r3, #1
 8005004:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005008:	3301      	adds	r3, #1
 800500a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800500c:	6a3b      	ldr	r3, [r7, #32]
 800500e:	3301      	adds	r3, #1
 8005010:	623b      	str	r3, [r7, #32]
 8005012:	6a3a      	ldr	r2, [r7, #32]
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	429a      	cmp	r2, r3
 8005018:	d3e6      	bcc.n	8004fe8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800501a:	8bfb      	ldrh	r3, [r7, #30]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d01e      	beq.n	800505e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005020:	2300      	movs	r3, #0
 8005022:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800502a:	461a      	mov	r2, r3
 800502c:	f107 0310 	add.w	r3, r7, #16
 8005030:	6812      	ldr	r2, [r2, #0]
 8005032:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	6a3b      	ldr	r3, [r7, #32]
 8005038:	b2db      	uxtb	r3, r3
 800503a:	00db      	lsls	r3, r3, #3
 800503c:	fa22 f303 	lsr.w	r3, r2, r3
 8005040:	b2da      	uxtb	r2, r3
 8005042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005044:	701a      	strb	r2, [r3, #0]
      i++;
 8005046:	6a3b      	ldr	r3, [r7, #32]
 8005048:	3301      	adds	r3, #1
 800504a:	623b      	str	r3, [r7, #32]
      pDest++;
 800504c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504e:	3301      	adds	r3, #1
 8005050:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005052:	8bfb      	ldrh	r3, [r7, #30]
 8005054:	3b01      	subs	r3, #1
 8005056:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005058:	8bfb      	ldrh	r3, [r7, #30]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1ea      	bne.n	8005034 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800505e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005060:	4618      	mov	r0, r3
 8005062:	372c      	adds	r7, #44	; 0x2c
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	4013      	ands	r3, r2
 8005082:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005084:	68fb      	ldr	r3, [r7, #12]
}
 8005086:	4618      	mov	r0, r3
 8005088:	3714      	adds	r7, #20
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr

08005092 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005092:	b480      	push	{r7}
 8005094:	b083      	sub	sp, #12
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	f003 0301 	and.w	r3, r3, #1
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	370c      	adds	r7, #12
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr
	...

080050b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050b8:	2300      	movs	r3, #0
 80050ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	3301      	adds	r3, #1
 80050c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	4a13      	ldr	r2, [pc, #76]	; (8005114 <USB_CoreReset+0x64>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d901      	bls.n	80050ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e01b      	b.n	8005106 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	daf2      	bge.n	80050bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80050d6:	2300      	movs	r3, #0
 80050d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	f043 0201 	orr.w	r2, r3, #1
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	3301      	adds	r3, #1
 80050ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	4a09      	ldr	r2, [pc, #36]	; (8005114 <USB_CoreReset+0x64>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d901      	bls.n	80050f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e006      	b.n	8005106 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	f003 0301 	and.w	r3, r3, #1
 8005100:	2b01      	cmp	r3, #1
 8005102:	d0f0      	beq.n	80050e6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3714      	adds	r7, #20
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	00030d40 	.word	0x00030d40

08005118 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005118:	b084      	sub	sp, #16
 800511a:	b580      	push	{r7, lr}
 800511c:	b086      	sub	sp, #24
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
 8005122:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005126:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800512a:	2300      	movs	r3, #0
 800512c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005138:	461a      	mov	r2, r3
 800513a:	2300      	movs	r3, #0
 800513c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005142:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800516a:	2b00      	cmp	r3, #0
 800516c:	d018      	beq.n	80051a0 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800516e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005170:	2b01      	cmp	r3, #1
 8005172:	d10a      	bne.n	800518a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005182:	f043 0304 	orr.w	r3, r3, #4
 8005186:	6013      	str	r3, [r2, #0]
 8005188:	e014      	b.n	80051b4 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005198:	f023 0304 	bic.w	r3, r3, #4
 800519c:	6013      	str	r3, [r2, #0]
 800519e:	e009      	b.n	80051b4 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051ae:	f023 0304 	bic.w	r3, r3, #4
 80051b2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80051b4:	2110      	movs	r1, #16
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f7ff fe5e 	bl	8004e78 <USB_FlushTxFifo>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d001      	beq.n	80051c6 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f7ff fe8a 	bl	8004ee0 <USB_FlushRxFifo>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d001      	beq.n	80051d6 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80051d6:	2300      	movs	r3, #0
 80051d8:	613b      	str	r3, [r7, #16]
 80051da:	e015      	b.n	8005208 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051e8:	461a      	mov	r2, r3
 80051ea:	f04f 33ff 	mov.w	r3, #4294967295
 80051ee:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	015a      	lsls	r2, r3, #5
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	4413      	add	r3, r2
 80051f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051fc:	461a      	mov	r2, r3
 80051fe:	2300      	movs	r3, #0
 8005200:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	3301      	adds	r3, #1
 8005206:	613b      	str	r3, [r7, #16]
 8005208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	429a      	cmp	r2, r3
 800520e:	d3e5      	bcc.n	80051dc <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f04f 32ff 	mov.w	r2, #4294967295
 800521c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00b      	beq.n	8005242 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005230:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a13      	ldr	r2, [pc, #76]	; (8005284 <USB_HostInit+0x16c>)
 8005236:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a13      	ldr	r2, [pc, #76]	; (8005288 <USB_HostInit+0x170>)
 800523c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005240:	e009      	b.n	8005256 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2280      	movs	r2, #128	; 0x80
 8005246:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a10      	ldr	r2, [pc, #64]	; (800528c <USB_HostInit+0x174>)
 800524c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a0f      	ldr	r2, [pc, #60]	; (8005290 <USB_HostInit+0x178>)
 8005252:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005258:	2b00      	cmp	r3, #0
 800525a:	d105      	bne.n	8005268 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	699b      	ldr	r3, [r3, #24]
 8005260:	f043 0210 	orr.w	r2, r3, #16
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	699a      	ldr	r2, [r3, #24]
 800526c:	4b09      	ldr	r3, [pc, #36]	; (8005294 <USB_HostInit+0x17c>)
 800526e:	4313      	orrs	r3, r2
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005274:	7dfb      	ldrb	r3, [r7, #23]
}
 8005276:	4618      	mov	r0, r3
 8005278:	3718      	adds	r7, #24
 800527a:	46bd      	mov	sp, r7
 800527c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005280:	b004      	add	sp, #16
 8005282:	4770      	bx	lr
 8005284:	01000200 	.word	0x01000200
 8005288:	00e00300 	.word	0x00e00300
 800528c:	00600080 	.word	0x00600080
 8005290:	004000e0 	.word	0x004000e0
 8005294:	a3200008 	.word	0xa3200008

08005298 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	460b      	mov	r3, r1
 80052a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052b6:	f023 0303 	bic.w	r3, r3, #3
 80052ba:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	78fb      	ldrb	r3, [r7, #3]
 80052c6:	f003 0303 	and.w	r3, r3, #3
 80052ca:	68f9      	ldr	r1, [r7, #12]
 80052cc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80052d0:	4313      	orrs	r3, r2
 80052d2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80052d4:	78fb      	ldrb	r3, [r7, #3]
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d107      	bne.n	80052ea <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052e0:	461a      	mov	r2, r3
 80052e2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80052e6:	6053      	str	r3, [r2, #4]
 80052e8:	e009      	b.n	80052fe <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80052ea:	78fb      	ldrb	r3, [r7, #3]
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d106      	bne.n	80052fe <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052f6:	461a      	mov	r2, r3
 80052f8:	f241 7370 	movw	r3, #6000	; 0x1770
 80052fc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	3714      	adds	r7, #20
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005318:	2300      	movs	r3, #0
 800531a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800532c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005336:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800533a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800533c:	2064      	movs	r0, #100	; 0x64
 800533e:	f7fb fe51 	bl	8000fe4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800534a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800534e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005350:	200a      	movs	r0, #10
 8005352:	f7fb fe47 	bl	8000fe4 <HAL_Delay>

  return HAL_OK;
 8005356:	2300      	movs	r3, #0
}
 8005358:	4618      	mov	r0, r3
 800535a:	3710      	adds	r7, #16
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	460b      	mov	r3, r1
 800536a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005370:	2300      	movs	r3, #0
 8005372:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005384:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d109      	bne.n	80053a4 <USB_DriveVbus+0x44>
 8005390:	78fb      	ldrb	r3, [r7, #3]
 8005392:	2b01      	cmp	r3, #1
 8005394:	d106      	bne.n	80053a4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800539e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80053a2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ae:	d109      	bne.n	80053c4 <USB_DriveVbus+0x64>
 80053b0:	78fb      	ldrb	r3, [r7, #3]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d106      	bne.n	80053c4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80053be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053c2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3714      	adds	r7, #20
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr

080053d2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b085      	sub	sp, #20
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80053de:	2300      	movs	r3, #0
 80053e0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	0c5b      	lsrs	r3, r3, #17
 80053f0:	f003 0303 	and.w	r3, r3, #3
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3714      	adds	r7, #20
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	b29b      	uxth	r3, r3
}
 8005416:	4618      	mov	r0, r3
 8005418:	3714      	adds	r7, #20
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
	...

08005424 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b088      	sub	sp, #32
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	4608      	mov	r0, r1
 800542e:	4611      	mov	r1, r2
 8005430:	461a      	mov	r2, r3
 8005432:	4603      	mov	r3, r0
 8005434:	70fb      	strb	r3, [r7, #3]
 8005436:	460b      	mov	r3, r1
 8005438:	70bb      	strb	r3, [r7, #2]
 800543a:	4613      	mov	r3, r2
 800543c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800543e:	2300      	movs	r3, #0
 8005440:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005446:	78fb      	ldrb	r3, [r7, #3]
 8005448:	015a      	lsls	r2, r3, #5
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	4413      	add	r3, r2
 800544e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005452:	461a      	mov	r2, r3
 8005454:	f04f 33ff 	mov.w	r3, #4294967295
 8005458:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800545a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800545e:	2b03      	cmp	r3, #3
 8005460:	d87e      	bhi.n	8005560 <USB_HC_Init+0x13c>
 8005462:	a201      	add	r2, pc, #4	; (adr r2, 8005468 <USB_HC_Init+0x44>)
 8005464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005468:	08005479 	.word	0x08005479
 800546c:	08005523 	.word	0x08005523
 8005470:	08005479 	.word	0x08005479
 8005474:	080054e5 	.word	0x080054e5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005478:	78fb      	ldrb	r3, [r7, #3]
 800547a:	015a      	lsls	r2, r3, #5
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	4413      	add	r3, r2
 8005480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005484:	461a      	mov	r2, r3
 8005486:	f240 439d 	movw	r3, #1181	; 0x49d
 800548a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800548c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005490:	2b00      	cmp	r3, #0
 8005492:	da10      	bge.n	80054b6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005494:	78fb      	ldrb	r3, [r7, #3]
 8005496:	015a      	lsls	r2, r3, #5
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	4413      	add	r3, r2
 800549c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	78fa      	ldrb	r2, [r7, #3]
 80054a4:	0151      	lsls	r1, r2, #5
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	440a      	add	r2, r1
 80054aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054b2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80054b4:	e057      	b.n	8005566 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d051      	beq.n	8005566 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80054c2:	78fb      	ldrb	r3, [r7, #3]
 80054c4:	015a      	lsls	r2, r3, #5
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	4413      	add	r3, r2
 80054ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	78fa      	ldrb	r2, [r7, #3]
 80054d2:	0151      	lsls	r1, r2, #5
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	440a      	add	r2, r1
 80054d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054dc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80054e0:	60d3      	str	r3, [r2, #12]
      break;
 80054e2:	e040      	b.n	8005566 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80054e4:	78fb      	ldrb	r3, [r7, #3]
 80054e6:	015a      	lsls	r2, r3, #5
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054f0:	461a      	mov	r2, r3
 80054f2:	f240 639d 	movw	r3, #1693	; 0x69d
 80054f6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80054f8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	da34      	bge.n	800556a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005500:	78fb      	ldrb	r3, [r7, #3]
 8005502:	015a      	lsls	r2, r3, #5
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	4413      	add	r3, r2
 8005508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	78fa      	ldrb	r2, [r7, #3]
 8005510:	0151      	lsls	r1, r2, #5
 8005512:	693a      	ldr	r2, [r7, #16]
 8005514:	440a      	add	r2, r1
 8005516:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800551a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800551e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005520:	e023      	b.n	800556a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005522:	78fb      	ldrb	r3, [r7, #3]
 8005524:	015a      	lsls	r2, r3, #5
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	4413      	add	r3, r2
 800552a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800552e:	461a      	mov	r2, r3
 8005530:	f240 2325 	movw	r3, #549	; 0x225
 8005534:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005536:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800553a:	2b00      	cmp	r3, #0
 800553c:	da17      	bge.n	800556e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800553e:	78fb      	ldrb	r3, [r7, #3]
 8005540:	015a      	lsls	r2, r3, #5
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	4413      	add	r3, r2
 8005546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	78fa      	ldrb	r2, [r7, #3]
 800554e:	0151      	lsls	r1, r2, #5
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	440a      	add	r2, r1
 8005554:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005558:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800555c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800555e:	e006      	b.n	800556e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	77fb      	strb	r3, [r7, #31]
      break;
 8005564:	e004      	b.n	8005570 <USB_HC_Init+0x14c>
      break;
 8005566:	bf00      	nop
 8005568:	e002      	b.n	8005570 <USB_HC_Init+0x14c>
      break;
 800556a:	bf00      	nop
 800556c:	e000      	b.n	8005570 <USB_HC_Init+0x14c>
      break;
 800556e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005570:	78fb      	ldrb	r3, [r7, #3]
 8005572:	015a      	lsls	r2, r3, #5
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	4413      	add	r3, r2
 8005578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	78fa      	ldrb	r2, [r7, #3]
 8005580:	0151      	lsls	r1, r2, #5
 8005582:	693a      	ldr	r2, [r7, #16]
 8005584:	440a      	add	r2, r1
 8005586:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800558a:	f043 0302 	orr.w	r3, r3, #2
 800558e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005596:	699a      	ldr	r2, [r3, #24]
 8005598:	78fb      	ldrb	r3, [r7, #3]
 800559a:	f003 030f 	and.w	r3, r3, #15
 800559e:	2101      	movs	r1, #1
 80055a0:	fa01 f303 	lsl.w	r3, r1, r3
 80055a4:	6939      	ldr	r1, [r7, #16]
 80055a6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80055aa:	4313      	orrs	r3, r2
 80055ac:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80055ba:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	da03      	bge.n	80055ca <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80055c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055c6:	61bb      	str	r3, [r7, #24]
 80055c8:	e001      	b.n	80055ce <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80055ca:	2300      	movs	r3, #0
 80055cc:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f7ff feff 	bl	80053d2 <USB_GetHostSpeed>
 80055d4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80055d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d106      	bne.n	80055ec <USB_HC_Init+0x1c8>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d003      	beq.n	80055ec <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80055e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055e8:	617b      	str	r3, [r7, #20]
 80055ea:	e001      	b.n	80055f0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80055ec:	2300      	movs	r3, #0
 80055ee:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80055f0:	787b      	ldrb	r3, [r7, #1]
 80055f2:	059b      	lsls	r3, r3, #22
 80055f4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80055f8:	78bb      	ldrb	r3, [r7, #2]
 80055fa:	02db      	lsls	r3, r3, #11
 80055fc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005600:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005602:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005606:	049b      	lsls	r3, r3, #18
 8005608:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800560c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800560e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005610:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005614:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800561a:	78fb      	ldrb	r3, [r7, #3]
 800561c:	0159      	lsls	r1, r3, #5
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	440b      	add	r3, r1
 8005622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005626:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800562c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800562e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005632:	2b03      	cmp	r3, #3
 8005634:	d003      	beq.n	800563e <USB_HC_Init+0x21a>
 8005636:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800563a:	2b01      	cmp	r3, #1
 800563c:	d10f      	bne.n	800565e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800563e:	78fb      	ldrb	r3, [r7, #3]
 8005640:	015a      	lsls	r2, r3, #5
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	4413      	add	r3, r2
 8005646:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	78fa      	ldrb	r2, [r7, #3]
 800564e:	0151      	lsls	r1, r2, #5
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	440a      	add	r2, r1
 8005654:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005658:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800565c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800565e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005660:	4618      	mov	r0, r3
 8005662:	3720      	adds	r7, #32
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b08c      	sub	sp, #48	; 0x30
 800566c:	af02      	add	r7, sp, #8
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	4613      	mov	r3, r2
 8005674:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	785b      	ldrb	r3, [r3, #1]
 800567e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005680:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005684:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800568a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800568e:	2b00      	cmp	r3, #0
 8005690:	d02d      	beq.n	80056ee <USB_HC_StartXfer+0x86>
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	791b      	ldrb	r3, [r3, #4]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d129      	bne.n	80056ee <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800569a:	79fb      	ldrb	r3, [r7, #7]
 800569c:	2b01      	cmp	r3, #1
 800569e:	d117      	bne.n	80056d0 <USB_HC_StartXfer+0x68>
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	79db      	ldrb	r3, [r3, #7]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d003      	beq.n	80056b0 <USB_HC_StartXfer+0x48>
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	79db      	ldrb	r3, [r3, #7]
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d10f      	bne.n	80056d0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	015a      	lsls	r2, r3, #5
 80056b4:	6a3b      	ldr	r3, [r7, #32]
 80056b6:	4413      	add	r3, r2
 80056b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	69fa      	ldr	r2, [r7, #28]
 80056c0:	0151      	lsls	r1, r2, #5
 80056c2:	6a3a      	ldr	r2, [r7, #32]
 80056c4:	440a      	add	r2, r1
 80056c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ce:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80056d0:	79fb      	ldrb	r3, [r7, #7]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d10b      	bne.n	80056ee <USB_HC_StartXfer+0x86>
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	795b      	ldrb	r3, [r3, #5]
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d107      	bne.n	80056ee <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	785b      	ldrb	r3, [r3, #1]
 80056e2:	4619      	mov	r1, r3
 80056e4:	68f8      	ldr	r0, [r7, #12]
 80056e6:	f000 fa0f 	bl	8005b08 <USB_DoPing>
      return HAL_OK;
 80056ea:	2300      	movs	r3, #0
 80056ec:	e0f8      	b.n	80058e0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d018      	beq.n	8005728 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	695b      	ldr	r3, [r3, #20]
 80056fa:	68ba      	ldr	r2, [r7, #8]
 80056fc:	8912      	ldrh	r2, [r2, #8]
 80056fe:	4413      	add	r3, r2
 8005700:	3b01      	subs	r3, #1
 8005702:	68ba      	ldr	r2, [r7, #8]
 8005704:	8912      	ldrh	r2, [r2, #8]
 8005706:	fbb3 f3f2 	udiv	r3, r3, r2
 800570a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800570c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800570e:	8b7b      	ldrh	r3, [r7, #26]
 8005710:	429a      	cmp	r2, r3
 8005712:	d90b      	bls.n	800572c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005714:	8b7b      	ldrh	r3, [r7, #26]
 8005716:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005718:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800571a:	68ba      	ldr	r2, [r7, #8]
 800571c:	8912      	ldrh	r2, [r2, #8]
 800571e:	fb03 f202 	mul.w	r2, r3, r2
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	611a      	str	r2, [r3, #16]
 8005726:	e001      	b.n	800572c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005728:	2301      	movs	r3, #1
 800572a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	78db      	ldrb	r3, [r3, #3]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d007      	beq.n	8005744 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005734:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005736:	68ba      	ldr	r2, [r7, #8]
 8005738:	8912      	ldrh	r2, [r2, #8]
 800573a:	fb03 f202 	mul.w	r2, r3, r2
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	611a      	str	r2, [r3, #16]
 8005742:	e003      	b.n	800574c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	695a      	ldr	r2, [r3, #20]
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005754:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005756:	04d9      	lsls	r1, r3, #19
 8005758:	4b63      	ldr	r3, [pc, #396]	; (80058e8 <USB_HC_StartXfer+0x280>)
 800575a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800575c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	7a9b      	ldrb	r3, [r3, #10]
 8005762:	075b      	lsls	r3, r3, #29
 8005764:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005768:	69f9      	ldr	r1, [r7, #28]
 800576a:	0148      	lsls	r0, r1, #5
 800576c:	6a39      	ldr	r1, [r7, #32]
 800576e:	4401      	add	r1, r0
 8005770:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005774:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005776:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005778:	79fb      	ldrb	r3, [r7, #7]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d009      	beq.n	8005792 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	68d9      	ldr	r1, [r3, #12]
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	015a      	lsls	r2, r3, #5
 8005786:	6a3b      	ldr	r3, [r7, #32]
 8005788:	4413      	add	r3, r2
 800578a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800578e:	460a      	mov	r2, r1
 8005790:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005792:	6a3b      	ldr	r3, [r7, #32]
 8005794:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	f003 0301 	and.w	r3, r3, #1
 800579e:	2b00      	cmp	r3, #0
 80057a0:	bf0c      	ite	eq
 80057a2:	2301      	moveq	r3, #1
 80057a4:	2300      	movne	r3, #0
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	015a      	lsls	r2, r3, #5
 80057ae:	6a3b      	ldr	r3, [r7, #32]
 80057b0:	4413      	add	r3, r2
 80057b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	69fa      	ldr	r2, [r7, #28]
 80057ba:	0151      	lsls	r1, r2, #5
 80057bc:	6a3a      	ldr	r2, [r7, #32]
 80057be:	440a      	add	r2, r1
 80057c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057c4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80057c8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	015a      	lsls	r2, r3, #5
 80057ce:	6a3b      	ldr	r3, [r7, #32]
 80057d0:	4413      	add	r3, r2
 80057d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	7e7b      	ldrb	r3, [r7, #25]
 80057da:	075b      	lsls	r3, r3, #29
 80057dc:	69f9      	ldr	r1, [r7, #28]
 80057de:	0148      	lsls	r0, r1, #5
 80057e0:	6a39      	ldr	r1, [r7, #32]
 80057e2:	4401      	add	r1, r0
 80057e4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80057e8:	4313      	orrs	r3, r2
 80057ea:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	015a      	lsls	r2, r3, #5
 80057f0:	6a3b      	ldr	r3, [r7, #32]
 80057f2:	4413      	add	r3, r2
 80057f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005802:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	78db      	ldrb	r3, [r3, #3]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d004      	beq.n	8005816 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005812:	613b      	str	r3, [r7, #16]
 8005814:	e003      	b.n	800581e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800581c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005824:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	015a      	lsls	r2, r3, #5
 800582a:	6a3b      	ldr	r3, [r7, #32]
 800582c:	4413      	add	r3, r2
 800582e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005832:	461a      	mov	r2, r3
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005838:	79fb      	ldrb	r3, [r7, #7]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d001      	beq.n	8005842 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800583e:	2300      	movs	r3, #0
 8005840:	e04e      	b.n	80058e0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	78db      	ldrb	r3, [r3, #3]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d149      	bne.n	80058de <USB_HC_StartXfer+0x276>
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d045      	beq.n	80058de <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	79db      	ldrb	r3, [r3, #7]
 8005856:	2b03      	cmp	r3, #3
 8005858:	d830      	bhi.n	80058bc <USB_HC_StartXfer+0x254>
 800585a:	a201      	add	r2, pc, #4	; (adr r2, 8005860 <USB_HC_StartXfer+0x1f8>)
 800585c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005860:	08005871 	.word	0x08005871
 8005864:	08005895 	.word	0x08005895
 8005868:	08005871 	.word	0x08005871
 800586c:	08005895 	.word	0x08005895
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	695b      	ldr	r3, [r3, #20]
 8005874:	3303      	adds	r3, #3
 8005876:	089b      	lsrs	r3, r3, #2
 8005878:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800587a:	8afa      	ldrh	r2, [r7, #22]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005880:	b29b      	uxth	r3, r3
 8005882:	429a      	cmp	r2, r3
 8005884:	d91c      	bls.n	80058c0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	f043 0220 	orr.w	r2, r3, #32
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	619a      	str	r2, [r3, #24]
        }
        break;
 8005892:	e015      	b.n	80058c0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	695b      	ldr	r3, [r3, #20]
 8005898:	3303      	adds	r3, #3
 800589a:	089b      	lsrs	r3, r3, #2
 800589c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800589e:	8afa      	ldrh	r2, [r7, #22]
 80058a0:	6a3b      	ldr	r3, [r7, #32]
 80058a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d90a      	bls.n	80058c4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	619a      	str	r2, [r3, #24]
        }
        break;
 80058ba:	e003      	b.n	80058c4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80058bc:	bf00      	nop
 80058be:	e002      	b.n	80058c6 <USB_HC_StartXfer+0x25e>
        break;
 80058c0:	bf00      	nop
 80058c2:	e000      	b.n	80058c6 <USB_HC_StartXfer+0x25e>
        break;
 80058c4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	68d9      	ldr	r1, [r3, #12]
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	785a      	ldrb	r2, [r3, #1]
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	2000      	movs	r0, #0
 80058d6:	9000      	str	r0, [sp, #0]
 80058d8:	68f8      	ldr	r0, [r7, #12]
 80058da:	f7ff fb31 	bl	8004f40 <USB_WritePacket>
  }

  return HAL_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3728      	adds	r7, #40	; 0x28
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	1ff80000 	.word	0x1ff80000

080058ec <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b085      	sub	sp, #20
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058fe:	695b      	ldr	r3, [r3, #20]
 8005900:	b29b      	uxth	r3, r3
}
 8005902:	4618      	mov	r0, r3
 8005904:	3714      	adds	r7, #20
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr

0800590e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800590e:	b480      	push	{r7}
 8005910:	b089      	sub	sp, #36	; 0x24
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
 8005916:	460b      	mov	r3, r1
 8005918:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800591e:	78fb      	ldrb	r3, [r7, #3]
 8005920:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005922:	2300      	movs	r3, #0
 8005924:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	015a      	lsls	r2, r3, #5
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	4413      	add	r3, r2
 800592e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	0c9b      	lsrs	r3, r3, #18
 8005936:	f003 0303 	and.w	r3, r3, #3
 800593a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	015a      	lsls	r2, r3, #5
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	4413      	add	r3, r2
 8005944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	0fdb      	lsrs	r3, r3, #31
 800594c:	f003 0301 	and.w	r3, r3, #1
 8005950:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	f003 0320 	and.w	r3, r3, #32
 800595a:	2b20      	cmp	r3, #32
 800595c:	d104      	bne.n	8005968 <USB_HC_Halt+0x5a>
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d101      	bne.n	8005968 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005964:	2300      	movs	r3, #0
 8005966:	e0c8      	b.n	8005afa <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d002      	beq.n	8005974 <USB_HC_Halt+0x66>
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	2b02      	cmp	r3, #2
 8005972:	d163      	bne.n	8005a3c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	015a      	lsls	r2, r3, #5
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	4413      	add	r3, r2
 800597c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	69ba      	ldr	r2, [r7, #24]
 8005984:	0151      	lsls	r1, r2, #5
 8005986:	69fa      	ldr	r2, [r7, #28]
 8005988:	440a      	add	r2, r1
 800598a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800598e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005992:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f003 0320 	and.w	r3, r3, #32
 800599c:	2b00      	cmp	r3, #0
 800599e:	f040 80ab 	bne.w	8005af8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d133      	bne.n	8005a16 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	015a      	lsls	r2, r3, #5
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	4413      	add	r3, r2
 80059b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	69ba      	ldr	r2, [r7, #24]
 80059be:	0151      	lsls	r1, r2, #5
 80059c0:	69fa      	ldr	r2, [r7, #28]
 80059c2:	440a      	add	r2, r1
 80059c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80059cc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	015a      	lsls	r2, r3, #5
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	4413      	add	r3, r2
 80059d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	69ba      	ldr	r2, [r7, #24]
 80059de:	0151      	lsls	r1, r2, #5
 80059e0:	69fa      	ldr	r2, [r7, #28]
 80059e2:	440a      	add	r2, r1
 80059e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059ec:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	3301      	adds	r3, #1
 80059f2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059fa:	d81d      	bhi.n	8005a38 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	015a      	lsls	r2, r3, #5
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	4413      	add	r3, r2
 8005a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a12:	d0ec      	beq.n	80059ee <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005a14:	e070      	b.n	8005af8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	015a      	lsls	r2, r3, #5
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	69ba      	ldr	r2, [r7, #24]
 8005a26:	0151      	lsls	r1, r2, #5
 8005a28:	69fa      	ldr	r2, [r7, #28]
 8005a2a:	440a      	add	r2, r1
 8005a2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a34:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005a36:	e05f      	b.n	8005af8 <USB_HC_Halt+0x1ea>
            break;
 8005a38:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005a3a:	e05d      	b.n	8005af8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	015a      	lsls	r2, r3, #5
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	4413      	add	r3, r2
 8005a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	69ba      	ldr	r2, [r7, #24]
 8005a4c:	0151      	lsls	r1, r2, #5
 8005a4e:	69fa      	ldr	r2, [r7, #28]
 8005a50:	440a      	add	r2, r1
 8005a52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a5a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d133      	bne.n	8005ad4 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	015a      	lsls	r2, r3, #5
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	4413      	add	r3, r2
 8005a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	69ba      	ldr	r2, [r7, #24]
 8005a7c:	0151      	lsls	r1, r2, #5
 8005a7e:	69fa      	ldr	r2, [r7, #28]
 8005a80:	440a      	add	r2, r1
 8005a82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a8a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	015a      	lsls	r2, r3, #5
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	4413      	add	r3, r2
 8005a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	69ba      	ldr	r2, [r7, #24]
 8005a9c:	0151      	lsls	r1, r2, #5
 8005a9e:	69fa      	ldr	r2, [r7, #28]
 8005aa0:	440a      	add	r2, r1
 8005aa2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005aa6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005aaa:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	3301      	adds	r3, #1
 8005ab0:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ab8:	d81d      	bhi.n	8005af6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	015a      	lsls	r2, r3, #5
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005acc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ad0:	d0ec      	beq.n	8005aac <USB_HC_Halt+0x19e>
 8005ad2:	e011      	b.n	8005af8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	015a      	lsls	r2, r3, #5
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	4413      	add	r3, r2
 8005adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	69ba      	ldr	r2, [r7, #24]
 8005ae4:	0151      	lsls	r1, r2, #5
 8005ae6:	69fa      	ldr	r2, [r7, #28]
 8005ae8:	440a      	add	r2, r1
 8005aea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005af2:	6013      	str	r3, [r2, #0]
 8005af4:	e000      	b.n	8005af8 <USB_HC_Halt+0x1ea>
          break;
 8005af6:	bf00      	nop
    }
  }

  return HAL_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3724      	adds	r7, #36	; 0x24
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
	...

08005b08 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b087      	sub	sp, #28
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	460b      	mov	r3, r1
 8005b12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005b18:	78fb      	ldrb	r3, [r7, #3]
 8005b1a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	04da      	lsls	r2, r3, #19
 8005b24:	4b15      	ldr	r3, [pc, #84]	; (8005b7c <USB_DoPing+0x74>)
 8005b26:	4013      	ands	r3, r2
 8005b28:	693a      	ldr	r2, [r7, #16]
 8005b2a:	0151      	lsls	r1, r2, #5
 8005b2c:	697a      	ldr	r2, [r7, #20]
 8005b2e:	440a      	add	r2, r1
 8005b30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b38:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	015a      	lsls	r2, r3, #5
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	4413      	add	r3, r2
 8005b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b50:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b58:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	015a      	lsls	r2, r3, #5
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	4413      	add	r3, r2
 8005b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b66:	461a      	mov	r2, r3
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	371c      	adds	r7, #28
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop
 8005b7c:	1ff80000 	.word	0x1ff80000

08005b80 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b088      	sub	sp, #32
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005b90:	2300      	movs	r3, #0
 8005b92:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f7ff f911 	bl	8004dbc <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005b9a:	2110      	movs	r1, #16
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f7ff f96b 	bl	8004e78 <USB_FlushTxFifo>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d001      	beq.n	8005bac <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f7ff f997 	bl	8004ee0 <USB_FlushRxFifo>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d001      	beq.n	8005bbc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	61bb      	str	r3, [r7, #24]
 8005bc0:	e01f      	b.n	8005c02 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	015a      	lsls	r2, r3, #5
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	4413      	add	r3, r2
 8005bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bd8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005be0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005be8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	015a      	lsls	r2, r3, #5
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	3301      	adds	r3, #1
 8005c00:	61bb      	str	r3, [r7, #24]
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	2b0f      	cmp	r3, #15
 8005c06:	d9dc      	bls.n	8005bc2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005c08:	2300      	movs	r3, #0
 8005c0a:	61bb      	str	r3, [r7, #24]
 8005c0c:	e034      	b.n	8005c78 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	015a      	lsls	r2, r3, #5
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	4413      	add	r3, r2
 8005c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c24:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c2c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c34:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	015a      	lsls	r2, r3, #5
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c42:	461a      	mov	r2, r3
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c54:	d80c      	bhi.n	8005c70 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	015a      	lsls	r2, r3, #5
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c6c:	d0ec      	beq.n	8005c48 <USB_StopHost+0xc8>
 8005c6e:	e000      	b.n	8005c72 <USB_StopHost+0xf2>
        break;
 8005c70:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	3301      	adds	r3, #1
 8005c76:	61bb      	str	r3, [r7, #24]
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	2b0f      	cmp	r3, #15
 8005c7c:	d9c7      	bls.n	8005c0e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c84:	461a      	mov	r2, r3
 8005c86:	f04f 33ff 	mov.w	r3, #4294967295
 8005c8a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c92:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f7ff f880 	bl	8004d9a <USB_EnableGlobalInt>

  return ret;
 8005c9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3720      	adds	r7, #32
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005ca4:	b590      	push	{r4, r7, lr}
 8005ca6:	b089      	sub	sp, #36	; 0x24
 8005ca8:	af04      	add	r7, sp, #16
 8005caa:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005cac:	2301      	movs	r3, #1
 8005cae:	2202      	movs	r2, #2
 8005cb0:	2102      	movs	r1, #2
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 fcb2 	bl	800661c <USBH_FindInterface>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005cbc:	7bfb      	ldrb	r3, [r7, #15]
 8005cbe:	2bff      	cmp	r3, #255	; 0xff
 8005cc0:	d002      	beq.n	8005cc8 <USBH_CDC_InterfaceInit+0x24>
 8005cc2:	7bfb      	ldrb	r3, [r7, #15]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d901      	bls.n	8005ccc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005cc8:	2302      	movs	r3, #2
 8005cca:	e13d      	b.n	8005f48 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005ccc:	7bfb      	ldrb	r3, [r7, #15]
 8005cce:	4619      	mov	r1, r3
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 fc87 	bl	80065e4 <USBH_SelectInterface>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005cda:	7bbb      	ldrb	r3, [r7, #14]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d001      	beq.n	8005ce4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005ce0:	2302      	movs	r3, #2
 8005ce2:	e131      	b.n	8005f48 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005cea:	2050      	movs	r0, #80	; 0x50
 8005cec:	f005 fe08 	bl	800b900 <malloc>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005cfa:	69db      	ldr	r3, [r3, #28]
 8005cfc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d101      	bne.n	8005d08 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005d04:	2302      	movs	r3, #2
 8005d06:	e11f      	b.n	8005f48 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005d08:	2250      	movs	r2, #80	; 0x50
 8005d0a:	2100      	movs	r1, #0
 8005d0c:	68b8      	ldr	r0, [r7, #8]
 8005d0e:	f005 feb3 	bl	800ba78 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005d12:	7bfb      	ldrb	r3, [r7, #15]
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	211a      	movs	r1, #26
 8005d18:	fb01 f303 	mul.w	r3, r1, r3
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	b25b      	sxtb	r3, r3
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	da15      	bge.n	8005d56 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005d2a:	7bfb      	ldrb	r3, [r7, #15]
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	211a      	movs	r1, #26
 8005d30:	fb01 f303 	mul.w	r3, r1, r3
 8005d34:	4413      	add	r3, r2
 8005d36:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005d3a:	781a      	ldrb	r2, [r3, #0]
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005d40:	7bfb      	ldrb	r3, [r7, #15]
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	211a      	movs	r1, #26
 8005d46:	fb01 f303 	mul.w	r3, r1, r3
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005d50:	881a      	ldrh	r2, [r3, #0]
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	785b      	ldrb	r3, [r3, #1]
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f002 f986 	bl	800806e <USBH_AllocPipe>
 8005d62:	4603      	mov	r3, r0
 8005d64:	461a      	mov	r2, r3
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	7819      	ldrb	r1, [r3, #0]
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	7858      	ldrb	r0, [r3, #1]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005d7e:	68ba      	ldr	r2, [r7, #8]
 8005d80:	8952      	ldrh	r2, [r2, #10]
 8005d82:	9202      	str	r2, [sp, #8]
 8005d84:	2203      	movs	r2, #3
 8005d86:	9201      	str	r2, [sp, #4]
 8005d88:	9300      	str	r3, [sp, #0]
 8005d8a:	4623      	mov	r3, r4
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f002 f93e 	bl	8008010 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f005 fd2b 	bl	800b7f8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005da2:	2300      	movs	r3, #0
 8005da4:	2200      	movs	r2, #0
 8005da6:	210a      	movs	r1, #10
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f000 fc37 	bl	800661c <USBH_FindInterface>
 8005dae:	4603      	mov	r3, r0
 8005db0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005db2:	7bfb      	ldrb	r3, [r7, #15]
 8005db4:	2bff      	cmp	r3, #255	; 0xff
 8005db6:	d002      	beq.n	8005dbe <USBH_CDC_InterfaceInit+0x11a>
 8005db8:	7bfb      	ldrb	r3, [r7, #15]
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d901      	bls.n	8005dc2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005dbe:	2302      	movs	r3, #2
 8005dc0:	e0c2      	b.n	8005f48 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005dc2:	7bfb      	ldrb	r3, [r7, #15]
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	211a      	movs	r1, #26
 8005dc8:	fb01 f303 	mul.w	r3, r1, r3
 8005dcc:	4413      	add	r3, r2
 8005dce:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	b25b      	sxtb	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	da16      	bge.n	8005e08 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005dda:	7bfb      	ldrb	r3, [r7, #15]
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	211a      	movs	r1, #26
 8005de0:	fb01 f303 	mul.w	r3, r1, r3
 8005de4:	4413      	add	r3, r2
 8005de6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005dea:	781a      	ldrb	r2, [r3, #0]
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005df0:	7bfb      	ldrb	r3, [r7, #15]
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	211a      	movs	r1, #26
 8005df6:	fb01 f303 	mul.w	r3, r1, r3
 8005dfa:	4413      	add	r3, r2
 8005dfc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005e00:	881a      	ldrh	r2, [r3, #0]
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	835a      	strh	r2, [r3, #26]
 8005e06:	e015      	b.n	8005e34 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005e08:	7bfb      	ldrb	r3, [r7, #15]
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	211a      	movs	r1, #26
 8005e0e:	fb01 f303 	mul.w	r3, r1, r3
 8005e12:	4413      	add	r3, r2
 8005e14:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005e18:	781a      	ldrb	r2, [r3, #0]
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005e1e:	7bfb      	ldrb	r3, [r7, #15]
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	211a      	movs	r1, #26
 8005e24:	fb01 f303 	mul.w	r3, r1, r3
 8005e28:	4413      	add	r3, r2
 8005e2a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005e2e:	881a      	ldrh	r2, [r3, #0]
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005e34:	7bfb      	ldrb	r3, [r7, #15]
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	211a      	movs	r1, #26
 8005e3a:	fb01 f303 	mul.w	r3, r1, r3
 8005e3e:	4413      	add	r3, r2
 8005e40:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	b25b      	sxtb	r3, r3
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	da16      	bge.n	8005e7a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005e4c:	7bfb      	ldrb	r3, [r7, #15]
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	211a      	movs	r1, #26
 8005e52:	fb01 f303 	mul.w	r3, r1, r3
 8005e56:	4413      	add	r3, r2
 8005e58:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005e5c:	781a      	ldrb	r2, [r3, #0]
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005e62:	7bfb      	ldrb	r3, [r7, #15]
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	211a      	movs	r1, #26
 8005e68:	fb01 f303 	mul.w	r3, r1, r3
 8005e6c:	4413      	add	r3, r2
 8005e6e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005e72:	881a      	ldrh	r2, [r3, #0]
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	835a      	strh	r2, [r3, #26]
 8005e78:	e015      	b.n	8005ea6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005e7a:	7bfb      	ldrb	r3, [r7, #15]
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	211a      	movs	r1, #26
 8005e80:	fb01 f303 	mul.w	r3, r1, r3
 8005e84:	4413      	add	r3, r2
 8005e86:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005e8a:	781a      	ldrb	r2, [r3, #0]
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005e90:	7bfb      	ldrb	r3, [r7, #15]
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	211a      	movs	r1, #26
 8005e96:	fb01 f303 	mul.w	r3, r1, r3
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005ea0:	881a      	ldrh	r2, [r3, #0]
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	7b9b      	ldrb	r3, [r3, #14]
 8005eaa:	4619      	mov	r1, r3
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f002 f8de 	bl	800806e <USBH_AllocPipe>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	7bdb      	ldrb	r3, [r3, #15]
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f002 f8d4 	bl	800806e <USBH_AllocPipe>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	461a      	mov	r2, r3
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	7b59      	ldrb	r1, [r3, #13]
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	7b98      	ldrb	r0, [r3, #14]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005ee2:	68ba      	ldr	r2, [r7, #8]
 8005ee4:	8b12      	ldrh	r2, [r2, #24]
 8005ee6:	9202      	str	r2, [sp, #8]
 8005ee8:	2202      	movs	r2, #2
 8005eea:	9201      	str	r2, [sp, #4]
 8005eec:	9300      	str	r3, [sp, #0]
 8005eee:	4623      	mov	r3, r4
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f002 f88c 	bl	8008010 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	7b19      	ldrb	r1, [r3, #12]
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	7bd8      	ldrb	r0, [r3, #15]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005f0c:	68ba      	ldr	r2, [r7, #8]
 8005f0e:	8b52      	ldrh	r2, [r2, #26]
 8005f10:	9202      	str	r2, [sp, #8]
 8005f12:	2202      	movs	r2, #2
 8005f14:	9201      	str	r2, [sp, #4]
 8005f16:	9300      	str	r3, [sp, #0]
 8005f18:	4623      	mov	r3, r4
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f002 f877 	bl	8008010 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	7b5b      	ldrb	r3, [r3, #13]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	4619      	mov	r1, r3
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f005 fc60 	bl	800b7f8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	7b1b      	ldrb	r3, [r3, #12]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	4619      	mov	r1, r3
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f005 fc59 	bl	800b7f8 <USBH_LL_SetToggle>

  return USBH_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3714      	adds	r7, #20
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd90      	pop	{r4, r7, pc}

08005f50 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f5e:	69db      	ldr	r3, [r3, #28]
 8005f60:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00e      	beq.n	8005f88 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	4619      	mov	r1, r3
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f002 f86c 	bl	800804e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f002 f897 	bl	80080b0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	7b1b      	ldrb	r3, [r3, #12]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00e      	beq.n	8005fae <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	7b1b      	ldrb	r3, [r3, #12]
 8005f94:	4619      	mov	r1, r3
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f002 f859 	bl	800804e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	7b1b      	ldrb	r3, [r3, #12]
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f002 f884 	bl	80080b0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2200      	movs	r2, #0
 8005fac:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	7b5b      	ldrb	r3, [r3, #13]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00e      	beq.n	8005fd4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	7b5b      	ldrb	r3, [r3, #13]
 8005fba:	4619      	mov	r1, r3
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f002 f846 	bl	800804e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	7b5b      	ldrb	r3, [r3, #13]
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f002 f871 	bl	80080b0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fda:	69db      	ldr	r3, [r3, #28]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d00b      	beq.n	8005ff8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fe6:	69db      	ldr	r3, [r3, #28]
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f005 fc91 	bl	800b910 <free>
    phost->pActiveClass->pData = 0U;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3710      	adds	r7, #16
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006002:	b580      	push	{r7, lr}
 8006004:	b084      	sub	sp, #16
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006010:	69db      	ldr	r3, [r3, #28]
 8006012:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	3340      	adds	r3, #64	; 0x40
 8006018:	4619      	mov	r1, r3
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 f8b1 	bl	8006182 <GetLineCoding>
 8006020:	4603      	mov	r3, r0
 8006022:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006024:	7afb      	ldrb	r3, [r7, #11]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d105      	bne.n	8006036 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006030:	2102      	movs	r1, #2
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006036:	7afb      	ldrb	r3, [r7, #11]
}
 8006038:	4618      	mov	r0, r3
 800603a:	3710      	adds	r7, #16
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006048:	2301      	movs	r3, #1
 800604a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800604c:	2300      	movs	r3, #0
 800604e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006056:	69db      	ldr	r3, [r3, #28]
 8006058:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006060:	2b04      	cmp	r3, #4
 8006062:	d877      	bhi.n	8006154 <USBH_CDC_Process+0x114>
 8006064:	a201      	add	r2, pc, #4	; (adr r2, 800606c <USBH_CDC_Process+0x2c>)
 8006066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800606a:	bf00      	nop
 800606c:	08006081 	.word	0x08006081
 8006070:	08006087 	.word	0x08006087
 8006074:	080060b7 	.word	0x080060b7
 8006078:	0800612b 	.word	0x0800612b
 800607c:	08006139 	.word	0x08006139
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006080:	2300      	movs	r3, #0
 8006082:	73fb      	strb	r3, [r7, #15]
      break;
 8006084:	e06d      	b.n	8006162 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800608a:	4619      	mov	r1, r3
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 f897 	bl	80061c0 <SetLineCoding>
 8006092:	4603      	mov	r3, r0
 8006094:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006096:	7bbb      	ldrb	r3, [r7, #14]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d104      	bne.n	80060a6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	2202      	movs	r2, #2
 80060a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80060a4:	e058      	b.n	8006158 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80060a6:	7bbb      	ldrb	r3, [r7, #14]
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d055      	beq.n	8006158 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	2204      	movs	r2, #4
 80060b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80060b4:	e050      	b.n	8006158 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	3340      	adds	r3, #64	; 0x40
 80060ba:	4619      	mov	r1, r3
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 f860 	bl	8006182 <GetLineCoding>
 80060c2:	4603      	mov	r3, r0
 80060c4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80060c6:	7bbb      	ldrb	r3, [r7, #14]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d126      	bne.n	800611a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060de:	791b      	ldrb	r3, [r3, #4]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d13b      	bne.n	800615c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060ee:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d133      	bne.n	800615c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060fe:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006100:	429a      	cmp	r2, r3
 8006102:	d12b      	bne.n	800615c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800610c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800610e:	429a      	cmp	r2, r3
 8006110:	d124      	bne.n	800615c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 f982 	bl	800641c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006118:	e020      	b.n	800615c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800611a:	7bbb      	ldrb	r3, [r7, #14]
 800611c:	2b01      	cmp	r3, #1
 800611e:	d01d      	beq.n	800615c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	2204      	movs	r2, #4
 8006124:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006128:	e018      	b.n	800615c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 f867 	bl	80061fe <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 f8f6 	bl	8006322 <CDC_ProcessReception>
      break;
 8006136:	e014      	b.n	8006162 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006138:	2100      	movs	r1, #0
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f001 f957 	bl	80073ee <USBH_ClrFeature>
 8006140:	4603      	mov	r3, r0
 8006142:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006144:	7bbb      	ldrb	r3, [r7, #14]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d10a      	bne.n	8006160 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	2200      	movs	r2, #0
 800614e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006152:	e005      	b.n	8006160 <USBH_CDC_Process+0x120>

    default:
      break;
 8006154:	bf00      	nop
 8006156:	e004      	b.n	8006162 <USBH_CDC_Process+0x122>
      break;
 8006158:	bf00      	nop
 800615a:	e002      	b.n	8006162 <USBH_CDC_Process+0x122>
      break;
 800615c:	bf00      	nop
 800615e:	e000      	b.n	8006162 <USBH_CDC_Process+0x122>
      break;
 8006160:	bf00      	nop

  }

  return status;
 8006162:	7bfb      	ldrb	r3, [r7, #15]
}
 8006164:	4618      	mov	r0, r3
 8006166:	3710      	adds	r7, #16
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	370c      	adds	r7, #12
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr

08006182 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006182:	b580      	push	{r7, lr}
 8006184:	b082      	sub	sp, #8
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
 800618a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	22a1      	movs	r2, #161	; 0xa1
 8006190:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2221      	movs	r2, #33	; 0x21
 8006196:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2207      	movs	r2, #7
 80061a8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	2207      	movs	r2, #7
 80061ae:	4619      	mov	r1, r3
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f001 fbeb 	bl	800798c <USBH_CtlReq>
 80061b6:	4603      	mov	r3, r0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3708      	adds	r7, #8
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2221      	movs	r2, #33	; 0x21
 80061ce:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2220      	movs	r2, #32
 80061d4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2207      	movs	r2, #7
 80061e6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	2207      	movs	r2, #7
 80061ec:	4619      	mov	r1, r3
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f001 fbcc 	bl	800798c <USBH_CtlReq>
 80061f4:	4603      	mov	r3, r0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3708      	adds	r7, #8
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b086      	sub	sp, #24
 8006202:	af02      	add	r7, sp, #8
 8006204:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800620c:	69db      	ldr	r3, [r3, #28]
 800620e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006210:	2300      	movs	r3, #0
 8006212:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800621a:	2b01      	cmp	r3, #1
 800621c:	d002      	beq.n	8006224 <CDC_ProcessTransmission+0x26>
 800621e:	2b02      	cmp	r3, #2
 8006220:	d023      	beq.n	800626a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006222:	e07a      	b.n	800631a <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	8b12      	ldrh	r2, [r2, #24]
 800622c:	4293      	cmp	r3, r2
 800622e:	d90b      	bls.n	8006248 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	69d9      	ldr	r1, [r3, #28]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	8b1a      	ldrh	r2, [r3, #24]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	7b5b      	ldrb	r3, [r3, #13]
 800623c:	2001      	movs	r0, #1
 800623e:	9000      	str	r0, [sp, #0]
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f001 fea2 	bl	8007f8a <USBH_BulkSendData>
 8006246:	e00b      	b.n	8006260 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006250:	b29a      	uxth	r2, r3
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	7b5b      	ldrb	r3, [r3, #13]
 8006256:	2001      	movs	r0, #1
 8006258:	9000      	str	r0, [sp, #0]
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f001 fe95 	bl	8007f8a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2202      	movs	r2, #2
 8006264:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006268:	e057      	b.n	800631a <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	7b5b      	ldrb	r3, [r3, #13]
 800626e:	4619      	mov	r1, r3
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f005 fa97 	bl	800b7a4 <USBH_LL_GetURBState>
 8006276:	4603      	mov	r3, r0
 8006278:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800627a:	7afb      	ldrb	r3, [r7, #11]
 800627c:	2b01      	cmp	r3, #1
 800627e:	d136      	bne.n	80062ee <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	8b12      	ldrh	r2, [r2, #24]
 8006288:	4293      	cmp	r3, r2
 800628a:	d90e      	bls.n	80062aa <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	8b12      	ldrh	r2, [r2, #24]
 8006294:	1a9a      	subs	r2, r3, r2
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	69db      	ldr	r3, [r3, #28]
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	8b12      	ldrh	r2, [r2, #24]
 80062a2:	441a      	add	r2, r3
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	61da      	str	r2, [r3, #28]
 80062a8:	e002      	b.n	80062b0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2200      	movs	r2, #0
 80062ae:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d004      	beq.n	80062c2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80062c0:	e006      	b.n	80062d0 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 f892 	bl	80063f4 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2204      	movs	r2, #4
 80062d4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80062e4:	2300      	movs	r3, #0
 80062e6:	2200      	movs	r2, #0
 80062e8:	f002 f984 	bl	80085f4 <osMessageQueuePut>
      break;
 80062ec:	e014      	b.n	8006318 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 80062ee:	7afb      	ldrb	r3, [r7, #11]
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	d111      	bne.n	8006318 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2204      	movs	r2, #4
 8006300:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006310:	2300      	movs	r3, #0
 8006312:	2200      	movs	r2, #0
 8006314:	f002 f96e 	bl	80085f4 <osMessageQueuePut>
      break;
 8006318:	bf00      	nop
  }
}
 800631a:	bf00      	nop
 800631c:	3710      	adds	r7, #16
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}

08006322 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006322:	b580      	push	{r7, lr}
 8006324:	b086      	sub	sp, #24
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006330:	69db      	ldr	r3, [r3, #28]
 8006332:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006334:	2300      	movs	r3, #0
 8006336:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800633e:	2b03      	cmp	r3, #3
 8006340:	d002      	beq.n	8006348 <CDC_ProcessReception+0x26>
 8006342:	2b04      	cmp	r3, #4
 8006344:	d00e      	beq.n	8006364 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006346:	e051      	b.n	80063ec <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	6a19      	ldr	r1, [r3, #32]
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	8b5a      	ldrh	r2, [r3, #26]
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	7b1b      	ldrb	r3, [r3, #12]
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f001 fe3d 	bl	8007fd4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	2204      	movs	r2, #4
 800635e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006362:	e043      	b.n	80063ec <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	7b1b      	ldrb	r3, [r3, #12]
 8006368:	4619      	mov	r1, r3
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f005 fa1a 	bl	800b7a4 <USBH_LL_GetURBState>
 8006370:	4603      	mov	r3, r0
 8006372:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006374:	7cfb      	ldrb	r3, [r7, #19]
 8006376:	2b01      	cmp	r3, #1
 8006378:	d137      	bne.n	80063ea <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	7b1b      	ldrb	r3, [r3, #12]
 800637e:	4619      	mov	r1, r3
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f005 f97d 	bl	800b680 <USBH_LL_GetLastXferSize>
 8006386:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	429a      	cmp	r2, r3
 8006390:	d016      	beq.n	80063c0 <CDC_ProcessReception+0x9e>
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	8b5b      	ldrh	r3, [r3, #26]
 8006396:	461a      	mov	r2, r3
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	4293      	cmp	r3, r2
 800639c:	d910      	bls.n	80063c0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	1ad2      	subs	r2, r2, r3
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	6a1a      	ldr	r2, [r3, #32]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	441a      	add	r2, r3
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	2203      	movs	r2, #3
 80063ba:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 80063be:	e006      	b.n	80063ce <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 f81d 	bl	8006408 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2204      	movs	r2, #4
 80063d2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80063e2:	2300      	movs	r3, #0
 80063e4:	2200      	movs	r2, #0
 80063e6:	f002 f905 	bl	80085f4 <osMessageQueuePut>
      break;
 80063ea:	bf00      	nop
  }
}
 80063ec:	bf00      	nop
 80063ee:	3718      	adds	r7, #24
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80063fc:	bf00      	nop
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006410:	bf00      	nop
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006424:	bf00      	nop
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	4613      	mov	r3, r2
 800643c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d101      	bne.n	8006448 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006444:	2302      	movs	r3, #2
 8006446:	e044      	b.n	80064d2 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	79fa      	ldrb	r2, [r7, #7]
 800644c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2200      	movs	r2, #0
 8006454:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2200      	movs	r2, #0
 800645c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006460:	68f8      	ldr	r0, [r7, #12]
 8006462:	f000 f841 	bl	80064e8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2200      	movs	r2, #0
 800646a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2200      	movs	r2, #0
 8006472:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2200      	movs	r2, #0
 800647a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d003      	beq.n	8006494 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	68ba      	ldr	r2, [r7, #8]
 8006490:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8006494:	2200      	movs	r2, #0
 8006496:	2104      	movs	r1, #4
 8006498:	2010      	movs	r0, #16
 800649a:	f002 f837 	bl	800850c <osMessageQueueNew>
 800649e:	4602      	mov	r2, r0
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 80064a6:	4b0d      	ldr	r3, [pc, #52]	; (80064dc <USBH_Init+0xac>)
 80064a8:	4a0d      	ldr	r2, [pc, #52]	; (80064e0 <USBH_Init+0xb0>)
 80064aa:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 80064ac:	4b0b      	ldr	r3, [pc, #44]	; (80064dc <USBH_Init+0xac>)
 80064ae:	2280      	movs	r2, #128	; 0x80
 80064b0:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 80064b2:	4b0a      	ldr	r3, [pc, #40]	; (80064dc <USBH_Init+0xac>)
 80064b4:	2218      	movs	r2, #24
 80064b6:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 80064b8:	4a08      	ldr	r2, [pc, #32]	; (80064dc <USBH_Init+0xac>)
 80064ba:	68f9      	ldr	r1, [r7, #12]
 80064bc:	4809      	ldr	r0, [pc, #36]	; (80064e4 <USBH_Init+0xb4>)
 80064be:	f001 feb7 	bl	8008230 <osThreadNew>
 80064c2:	4602      	mov	r2, r0
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80064ca:	68f8      	ldr	r0, [r7, #12]
 80064cc:	f005 f824 	bl	800b518 <USBH_LL_Init>

  return USBH_OK;
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3710      	adds	r7, #16
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	bf00      	nop
 80064dc:	200001f4 	.word	0x200001f4
 80064e0:	0800bbec 	.word	0x0800bbec
 80064e4:	08007165 	.word	0x08007165

080064e8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b085      	sub	sp, #20
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80064f0:	2300      	movs	r3, #0
 80064f2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80064f4:	2300      	movs	r3, #0
 80064f6:	60fb      	str	r3, [r7, #12]
 80064f8:	e009      	b.n	800650e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	33e0      	adds	r3, #224	; 0xe0
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	4413      	add	r3, r2
 8006504:	2200      	movs	r2, #0
 8006506:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	3301      	adds	r3, #1
 800650c:	60fb      	str	r3, [r7, #12]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2b0f      	cmp	r3, #15
 8006512:	d9f2      	bls.n	80064fa <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006514:	2300      	movs	r3, #0
 8006516:	60fb      	str	r3, [r7, #12]
 8006518:	e009      	b.n	800652e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	4413      	add	r3, r2
 8006520:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006524:	2200      	movs	r2, #0
 8006526:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	3301      	adds	r3, #1
 800652c:	60fb      	str	r3, [r7, #12]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006534:	d3f1      	bcc.n	800651a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2201      	movs	r2, #1
 8006546:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2240      	movs	r2, #64	; 0x40
 800655a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2201      	movs	r2, #1
 800656e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006582:	2300      	movs	r3, #0
}
 8006584:	4618      	mov	r0, r3
 8006586:	3714      	adds	r7, #20
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006590:	b480      	push	{r7}
 8006592:	b085      	sub	sp, #20
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800659a:	2300      	movs	r3, #0
 800659c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d016      	beq.n	80065d2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d10e      	bne.n	80065cc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80065b4:	1c59      	adds	r1, r3, #1
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	33de      	adds	r3, #222	; 0xde
 80065c0:	6839      	ldr	r1, [r7, #0]
 80065c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80065c6:	2300      	movs	r3, #0
 80065c8:	73fb      	strb	r3, [r7, #15]
 80065ca:	e004      	b.n	80065d6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80065cc:	2302      	movs	r3, #2
 80065ce:	73fb      	strb	r3, [r7, #15]
 80065d0:	e001      	b.n	80065d6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80065d2:	2302      	movs	r3, #2
 80065d4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80065d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3714      	adds	r7, #20
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	460b      	mov	r3, r1
 80065ee:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80065f0:	2300      	movs	r3, #0
 80065f2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80065fa:	78fa      	ldrb	r2, [r7, #3]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d204      	bcs.n	800660a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	78fa      	ldrb	r2, [r7, #3]
 8006604:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006608:	e001      	b.n	800660e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800660a:	2302      	movs	r3, #2
 800660c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800660e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006610:	4618      	mov	r0, r3
 8006612:	3714      	adds	r7, #20
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800661c:	b480      	push	{r7}
 800661e:	b087      	sub	sp, #28
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	4608      	mov	r0, r1
 8006626:	4611      	mov	r1, r2
 8006628:	461a      	mov	r2, r3
 800662a:	4603      	mov	r3, r0
 800662c:	70fb      	strb	r3, [r7, #3]
 800662e:	460b      	mov	r3, r1
 8006630:	70bb      	strb	r3, [r7, #2]
 8006632:	4613      	mov	r3, r2
 8006634:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006636:	2300      	movs	r3, #0
 8006638:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800663a:	2300      	movs	r3, #0
 800663c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006644:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006646:	e025      	b.n	8006694 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006648:	7dfb      	ldrb	r3, [r7, #23]
 800664a:	221a      	movs	r2, #26
 800664c:	fb02 f303 	mul.w	r3, r2, r3
 8006650:	3308      	adds	r3, #8
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	4413      	add	r3, r2
 8006656:	3302      	adds	r3, #2
 8006658:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	795b      	ldrb	r3, [r3, #5]
 800665e:	78fa      	ldrb	r2, [r7, #3]
 8006660:	429a      	cmp	r2, r3
 8006662:	d002      	beq.n	800666a <USBH_FindInterface+0x4e>
 8006664:	78fb      	ldrb	r3, [r7, #3]
 8006666:	2bff      	cmp	r3, #255	; 0xff
 8006668:	d111      	bne.n	800668e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800666e:	78ba      	ldrb	r2, [r7, #2]
 8006670:	429a      	cmp	r2, r3
 8006672:	d002      	beq.n	800667a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006674:	78bb      	ldrb	r3, [r7, #2]
 8006676:	2bff      	cmp	r3, #255	; 0xff
 8006678:	d109      	bne.n	800668e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800667e:	787a      	ldrb	r2, [r7, #1]
 8006680:	429a      	cmp	r2, r3
 8006682:	d002      	beq.n	800668a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006684:	787b      	ldrb	r3, [r7, #1]
 8006686:	2bff      	cmp	r3, #255	; 0xff
 8006688:	d101      	bne.n	800668e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800668a:	7dfb      	ldrb	r3, [r7, #23]
 800668c:	e006      	b.n	800669c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800668e:	7dfb      	ldrb	r3, [r7, #23]
 8006690:	3301      	adds	r3, #1
 8006692:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006694:	7dfb      	ldrb	r3, [r7, #23]
 8006696:	2b01      	cmp	r3, #1
 8006698:	d9d6      	bls.n	8006648 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800669a:	23ff      	movs	r3, #255	; 0xff
}
 800669c:	4618      	mov	r0, r3
 800669e:	371c      	adds	r7, #28
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b082      	sub	sp, #8
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f004 ff6d 	bl	800b590 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80066b6:	2101      	movs	r1, #1
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f005 f886 	bl	800b7ca <USBH_LL_DriverVBUS>

  return USBH_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3708      	adds	r7, #8
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b088      	sub	sp, #32
 80066cc:	af04      	add	r7, sp, #16
 80066ce:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80066d0:	2302      	movs	r3, #2
 80066d2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80066d4:	2300      	movs	r3, #0
 80066d6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d102      	bne.n	80066ea <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2203      	movs	r2, #3
 80066e8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	2b0b      	cmp	r3, #11
 80066f2:	f200 8247 	bhi.w	8006b84 <USBH_Process+0x4bc>
 80066f6:	a201      	add	r2, pc, #4	; (adr r2, 80066fc <USBH_Process+0x34>)
 80066f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066fc:	0800672d 	.word	0x0800672d
 8006700:	0800677b 	.word	0x0800677b
 8006704:	080067ff 	.word	0x080067ff
 8006708:	08006b03 	.word	0x08006b03
 800670c:	08006b85 	.word	0x08006b85
 8006710:	080068bf 	.word	0x080068bf
 8006714:	08006a8d 	.word	0x08006a8d
 8006718:	08006911 	.word	0x08006911
 800671c:	0800694d 	.word	0x0800694d
 8006720:	08006987 	.word	0x08006987
 8006724:	080069e5 	.word	0x080069e5
 8006728:	08006aeb 	.word	0x08006aeb
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006732:	b2db      	uxtb	r3, r3
 8006734:	2b00      	cmp	r3, #0
 8006736:	f000 8227 	beq.w	8006b88 <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2201      	movs	r2, #1
 800673e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006740:	20c8      	movs	r0, #200	; 0xc8
 8006742:	f005 f889 	bl	800b858 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f004 ff7f 	bl	800b64a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006770:	2300      	movs	r3, #0
 8006772:	2200      	movs	r2, #0
 8006774:	f001 ff3e 	bl	80085f4 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8006778:	e206      	b.n	8006b88 <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006780:	2b01      	cmp	r3, #1
 8006782:	d107      	bne.n	8006794 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2202      	movs	r2, #2
 8006790:	701a      	strb	r2, [r3, #0]
 8006792:	e025      	b.n	80067e0 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800679a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800679e:	d914      	bls.n	80067ca <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80067a6:	3301      	adds	r3, #1
 80067a8:	b2da      	uxtb	r2, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80067b6:	2b03      	cmp	r3, #3
 80067b8:	d903      	bls.n	80067c2 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	220d      	movs	r2, #13
 80067be:	701a      	strb	r2, [r3, #0]
 80067c0:	e00e      	b.n	80067e0 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	701a      	strb	r2, [r3, #0]
 80067c8:	e00a      	b.n	80067e0 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80067d0:	f103 020a 	add.w	r2, r3, #10
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80067da:	200a      	movs	r0, #10
 80067dc:	f005 f83c 	bl	800b858 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80067f4:	2300      	movs	r3, #0
 80067f6:	2200      	movs	r2, #0
 80067f8:	f001 fefc 	bl	80085f4 <osMessageQueuePut>
#endif
#endif
      break;
 80067fc:	e1cb      	b.n	8006b96 <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006804:	2b00      	cmp	r3, #0
 8006806:	d005      	beq.n	8006814 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800680e:	2104      	movs	r1, #4
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006814:	2064      	movs	r0, #100	; 0x64
 8006816:	f005 f81f 	bl	800b858 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f004 feee 	bl	800b5fc <USBH_LL_GetSpeed>
 8006820:	4603      	mov	r3, r0
 8006822:	461a      	mov	r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2205      	movs	r2, #5
 800682e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006830:	2100      	movs	r1, #0
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f001 fc1b 	bl	800806e <USBH_AllocPipe>
 8006838:	4603      	mov	r3, r0
 800683a:	461a      	mov	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006840:	2180      	movs	r1, #128	; 0x80
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f001 fc13 	bl	800806e <USBH_AllocPipe>
 8006848:	4603      	mov	r3, r0
 800684a:	461a      	mov	r2, r3
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	7919      	ldrb	r1, [r3, #4]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006864:	b292      	uxth	r2, r2
 8006866:	9202      	str	r2, [sp, #8]
 8006868:	2200      	movs	r2, #0
 800686a:	9201      	str	r2, [sp, #4]
 800686c:	9300      	str	r3, [sp, #0]
 800686e:	4603      	mov	r3, r0
 8006870:	2280      	movs	r2, #128	; 0x80
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f001 fbcc 	bl	8008010 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	7959      	ldrb	r1, [r3, #5]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800688c:	b292      	uxth	r2, r2
 800688e:	9202      	str	r2, [sp, #8]
 8006890:	2200      	movs	r2, #0
 8006892:	9201      	str	r2, [sp, #4]
 8006894:	9300      	str	r3, [sp, #0]
 8006896:	4603      	mov	r3, r0
 8006898:	2200      	movs	r2, #0
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f001 fbb8 	bl	8008010 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80068b4:	2300      	movs	r3, #0
 80068b6:	2200      	movs	r2, #0
 80068b8:	f001 fe9c 	bl	80085f4 <osMessageQueuePut>
#endif
#endif
      break;
 80068bc:	e16b      	b.n	8006b96 <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 f96e 	bl	8006ba0 <USBH_HandleEnum>
 80068c4:	4603      	mov	r3, r0
 80068c6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80068c8:	7bbb      	ldrb	r3, [r7, #14]
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f040 815d 	bne.w	8006b8c <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d103      	bne.n	80068ec <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2208      	movs	r2, #8
 80068e8:	701a      	strb	r2, [r3, #0]
 80068ea:	e002      	b.n	80068f2 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2207      	movs	r2, #7
 80068f0:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2205      	movs	r2, #5
 80068f6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006906:	2300      	movs	r3, #0
 8006908:	2200      	movs	r2, #0
 800690a:	f001 fe73 	bl	80085f4 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800690e:	e13d      	b.n	8006b8c <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006916:	2b00      	cmp	r3, #0
 8006918:	f000 813a 	beq.w	8006b90 <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006922:	2101      	movs	r1, #1
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2208      	movs	r2, #8
 800692c:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2205      	movs	r2, #5
 8006932:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006942:	2300      	movs	r3, #0
 8006944:	2200      	movs	r2, #0
 8006946:	f001 fe55 	bl	80085f4 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800694a:	e121      	b.n	8006b90 <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006952:	b29b      	uxth	r3, r3
 8006954:	4619      	mov	r1, r3
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 fd02 	bl	8007360 <USBH_SetCfg>
 800695c:	4603      	mov	r3, r0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d102      	bne.n	8006968 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2209      	movs	r2, #9
 8006966:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2201      	movs	r2, #1
 800696c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800697c:	2300      	movs	r3, #0
 800697e:	2200      	movs	r2, #0
 8006980:	f001 fe38 	bl	80085f4 <osMessageQueuePut>
#endif
#endif
      break;
 8006984:	e107      	b.n	8006b96 <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800698c:	f003 0320 	and.w	r3, r3, #32
 8006990:	2b00      	cmp	r3, #0
 8006992:	d015      	beq.n	80069c0 <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006994:	2101      	movs	r1, #1
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 fd05 	bl	80073a6 <USBH_SetFeature>
 800699c:	4603      	mov	r3, r0
 800699e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80069a0:	7bbb      	ldrb	r3, [r7, #14]
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d103      	bne.n	80069b0 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	220a      	movs	r2, #10
 80069ac:	701a      	strb	r2, [r3, #0]
 80069ae:	e00a      	b.n	80069c6 <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 80069b0:	7bbb      	ldrb	r3, [r7, #14]
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	2b03      	cmp	r3, #3
 80069b6:	d106      	bne.n	80069c6 <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	220a      	movs	r2, #10
 80069bc:	701a      	strb	r2, [r3, #0]
 80069be:	e002      	b.n	80069c6 <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	220a      	movs	r2, #10
 80069c4:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2201      	movs	r2, #1
 80069ca:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80069da:	2300      	movs	r3, #0
 80069dc:	2200      	movs	r2, #0
 80069de:	f001 fe09 	bl	80085f4 <osMessageQueuePut>
#endif
#endif
      break;
 80069e2:	e0d8      	b.n	8006b96 <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d03f      	beq.n	8006a6e <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80069f6:	2300      	movs	r3, #0
 80069f8:	73fb      	strb	r3, [r7, #15]
 80069fa:	e016      	b.n	8006a2a <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80069fc:	7bfa      	ldrb	r2, [r7, #15]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	32de      	adds	r2, #222	; 0xde
 8006a02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a06:	791a      	ldrb	r2, [r3, #4]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d108      	bne.n	8006a24 <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006a12:	7bfa      	ldrb	r2, [r7, #15]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	32de      	adds	r2, #222	; 0xde
 8006a18:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006a22:	e005      	b.n	8006a30 <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006a24:	7bfb      	ldrb	r3, [r7, #15]
 8006a26:	3301      	adds	r3, #1
 8006a28:	73fb      	strb	r3, [r7, #15]
 8006a2a:	7bfb      	ldrb	r3, [r7, #15]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d0e5      	beq.n	80069fc <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d016      	beq.n	8006a68 <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	4798      	blx	r3
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d109      	bne.n	8006a60 <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2206      	movs	r2, #6
 8006a50:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a58:	2103      	movs	r1, #3
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	4798      	blx	r3
 8006a5e:	e006      	b.n	8006a6e <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	220d      	movs	r2, #13
 8006a64:	701a      	strb	r2, [r3, #0]
 8006a66:	e002      	b.n	8006a6e <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	220d      	movs	r2, #13
 8006a6c:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2205      	movs	r2, #5
 8006a72:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006a82:	2300      	movs	r3, #0
 8006a84:	2200      	movs	r2, #0
 8006a86:	f001 fdb5 	bl	80085f4 <osMessageQueuePut>
#endif
#endif
      break;
 8006a8a:	e084      	b.n	8006b96 <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d017      	beq.n	8006ac6 <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	4798      	blx	r3
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006aa6:	7bbb      	ldrb	r3, [r7, #14]
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d103      	bne.n	8006ab6 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	220b      	movs	r2, #11
 8006ab2:	701a      	strb	r2, [r3, #0]
 8006ab4:	e00a      	b.n	8006acc <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 8006ab6:	7bbb      	ldrb	r3, [r7, #14]
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	2b02      	cmp	r3, #2
 8006abc:	d106      	bne.n	8006acc <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	220d      	movs	r2, #13
 8006ac2:	701a      	strb	r2, [r3, #0]
 8006ac4:	e002      	b.n	8006acc <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	220d      	movs	r2, #13
 8006aca:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2205      	movs	r2, #5
 8006ad0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f001 fd86 	bl	80085f4 <osMessageQueuePut>
#endif
#endif
      break;
 8006ae8:	e055      	b.n	8006b96 <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d04f      	beq.n	8006b94 <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006afa:	695b      	ldr	r3, [r3, #20]
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	4798      	blx	r3
      }
      break;
 8006b00:	e048      	b.n	8006b94 <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f7ff fcec 	bl	80064e8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d009      	beq.n	8006b2e <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d005      	beq.n	8006b44 <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b3e:	2105      	movs	r1, #5
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d107      	bne.n	8006b60 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f7ff fda5 	bl	80066a8 <USBH_Start>
 8006b5e:	e002      	b.n	8006b66 <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f004 fd15 	bl	800b590 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f001 fd39 	bl	80085f4 <osMessageQueuePut>
#endif
#endif
      break;
 8006b82:	e008      	b.n	8006b96 <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 8006b84:	bf00      	nop
 8006b86:	e006      	b.n	8006b96 <USBH_Process+0x4ce>
      break;
 8006b88:	bf00      	nop
 8006b8a:	e004      	b.n	8006b96 <USBH_Process+0x4ce>
      break;
 8006b8c:	bf00      	nop
 8006b8e:	e002      	b.n	8006b96 <USBH_Process+0x4ce>
    break;
 8006b90:	bf00      	nop
 8006b92:	e000      	b.n	8006b96 <USBH_Process+0x4ce>
      break;
 8006b94:	bf00      	nop
  }
  return USBH_OK;
 8006b96:	2300      	movs	r3, #0
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3710      	adds	r7, #16
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b088      	sub	sp, #32
 8006ba4:	af04      	add	r7, sp, #16
 8006ba6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006bac:	2301      	movs	r3, #1
 8006bae:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	785b      	ldrb	r3, [r3, #1]
 8006bb4:	2b07      	cmp	r3, #7
 8006bb6:	f200 8208 	bhi.w	8006fca <USBH_HandleEnum+0x42a>
 8006bba:	a201      	add	r2, pc, #4	; (adr r2, 8006bc0 <USBH_HandleEnum+0x20>)
 8006bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc0:	08006be1 	.word	0x08006be1
 8006bc4:	08006c9f 	.word	0x08006c9f
 8006bc8:	08006d09 	.word	0x08006d09
 8006bcc:	08006d97 	.word	0x08006d97
 8006bd0:	08006e01 	.word	0x08006e01
 8006bd4:	08006e71 	.word	0x08006e71
 8006bd8:	08006f0d 	.word	0x08006f0d
 8006bdc:	08006f8b 	.word	0x08006f8b
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006be0:	2108      	movs	r1, #8
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 faec 	bl	80071c0 <USBH_Get_DevDesc>
 8006be8:	4603      	mov	r3, r0
 8006bea:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006bec:	7bbb      	ldrb	r3, [r7, #14]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d130      	bne.n	8006c54 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	7919      	ldrb	r1, [r3, #4]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006c16:	b292      	uxth	r2, r2
 8006c18:	9202      	str	r2, [sp, #8]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	9201      	str	r2, [sp, #4]
 8006c1e:	9300      	str	r3, [sp, #0]
 8006c20:	4603      	mov	r3, r0
 8006c22:	2280      	movs	r2, #128	; 0x80
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f001 f9f3 	bl	8008010 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	7959      	ldrb	r1, [r3, #5]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006c3e:	b292      	uxth	r2, r2
 8006c40:	9202      	str	r2, [sp, #8]
 8006c42:	2200      	movs	r2, #0
 8006c44:	9201      	str	r2, [sp, #4]
 8006c46:	9300      	str	r3, [sp, #0]
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f001 f9df 	bl	8008010 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006c52:	e1bc      	b.n	8006fce <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006c54:	7bbb      	ldrb	r3, [r7, #14]
 8006c56:	2b03      	cmp	r3, #3
 8006c58:	f040 81b9 	bne.w	8006fce <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c62:	3301      	adds	r3, #1
 8006c64:	b2da      	uxtb	r2, r3
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c72:	2b03      	cmp	r3, #3
 8006c74:	d903      	bls.n	8006c7e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	220d      	movs	r2, #13
 8006c7a:	701a      	strb	r2, [r3, #0]
      break;
 8006c7c:	e1a7      	b.n	8006fce <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	795b      	ldrb	r3, [r3, #5]
 8006c82:	4619      	mov	r1, r3
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f001 fa13 	bl	80080b0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	791b      	ldrb	r3, [r3, #4]
 8006c8e:	4619      	mov	r1, r3
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f001 fa0d 	bl	80080b0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	701a      	strb	r2, [r3, #0]
      break;
 8006c9c:	e197      	b.n	8006fce <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006c9e:	2112      	movs	r1, #18
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 fa8d 	bl	80071c0 <USBH_Get_DevDesc>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006caa:	7bbb      	ldrb	r3, [r7, #14]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d103      	bne.n	8006cb8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2202      	movs	r2, #2
 8006cb4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006cb6:	e18c      	b.n	8006fd2 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006cb8:	7bbb      	ldrb	r3, [r7, #14]
 8006cba:	2b03      	cmp	r3, #3
 8006cbc:	f040 8189 	bne.w	8006fd2 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	b2da      	uxtb	r2, r3
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006cd6:	2b03      	cmp	r3, #3
 8006cd8:	d903      	bls.n	8006ce2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	220d      	movs	r2, #13
 8006cde:	701a      	strb	r2, [r3, #0]
      break;
 8006ce0:	e177      	b.n	8006fd2 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	795b      	ldrb	r3, [r3, #5]
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f001 f9e1 	bl	80080b0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	791b      	ldrb	r3, [r3, #4]
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f001 f9db 	bl	80080b0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	701a      	strb	r2, [r3, #0]
      break;
 8006d06:	e164      	b.n	8006fd2 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006d08:	2101      	movs	r1, #1
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 fb04 	bl	8007318 <USBH_SetAddress>
 8006d10:	4603      	mov	r3, r0
 8006d12:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006d14:	7bbb      	ldrb	r3, [r7, #14]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d132      	bne.n	8006d80 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006d1a:	2002      	movs	r0, #2
 8006d1c:	f004 fd9c 	bl	800b858 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2203      	movs	r2, #3
 8006d2c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	7919      	ldrb	r1, [r3, #4]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006d42:	b292      	uxth	r2, r2
 8006d44:	9202      	str	r2, [sp, #8]
 8006d46:	2200      	movs	r2, #0
 8006d48:	9201      	str	r2, [sp, #4]
 8006d4a:	9300      	str	r3, [sp, #0]
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2280      	movs	r2, #128	; 0x80
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f001 f95d 	bl	8008010 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	7959      	ldrb	r1, [r3, #5]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006d6a:	b292      	uxth	r2, r2
 8006d6c:	9202      	str	r2, [sp, #8]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	9201      	str	r2, [sp, #4]
 8006d72:	9300      	str	r3, [sp, #0]
 8006d74:	4603      	mov	r3, r0
 8006d76:	2200      	movs	r2, #0
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f001 f949 	bl	8008010 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006d7e:	e12a      	b.n	8006fd6 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d80:	7bbb      	ldrb	r3, [r7, #14]
 8006d82:	2b03      	cmp	r3, #3
 8006d84:	f040 8127 	bne.w	8006fd6 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	220d      	movs	r2, #13
 8006d8c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	705a      	strb	r2, [r3, #1]
      break;
 8006d94:	e11f      	b.n	8006fd6 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006d96:	2109      	movs	r1, #9
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 fa39 	bl	8007210 <USBH_Get_CfgDesc>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006da2:	7bbb      	ldrb	r3, [r7, #14]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d103      	bne.n	8006db0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2204      	movs	r2, #4
 8006dac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006dae:	e114      	b.n	8006fda <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006db0:	7bbb      	ldrb	r3, [r7, #14]
 8006db2:	2b03      	cmp	r3, #3
 8006db4:	f040 8111 	bne.w	8006fda <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	b2da      	uxtb	r2, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006dce:	2b03      	cmp	r3, #3
 8006dd0:	d903      	bls.n	8006dda <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	220d      	movs	r2, #13
 8006dd6:	701a      	strb	r2, [r3, #0]
      break;
 8006dd8:	e0ff      	b.n	8006fda <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	795b      	ldrb	r3, [r3, #5]
 8006dde:	4619      	mov	r1, r3
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f001 f965 	bl	80080b0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	791b      	ldrb	r3, [r3, #4]
 8006dea:	4619      	mov	r1, r3
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f001 f95f 	bl	80080b0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	701a      	strb	r2, [r3, #0]
      break;
 8006dfe:	e0ec      	b.n	8006fda <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006e06:	4619      	mov	r1, r3
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 fa01 	bl	8007210 <USBH_Get_CfgDesc>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006e12:	7bbb      	ldrb	r3, [r7, #14]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d103      	bne.n	8006e20 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2205      	movs	r2, #5
 8006e1c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006e1e:	e0de      	b.n	8006fde <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e20:	7bbb      	ldrb	r3, [r7, #14]
 8006e22:	2b03      	cmp	r3, #3
 8006e24:	f040 80db 	bne.w	8006fde <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e2e:	3301      	adds	r3, #1
 8006e30:	b2da      	uxtb	r2, r3
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e3e:	2b03      	cmp	r3, #3
 8006e40:	d903      	bls.n	8006e4a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	220d      	movs	r2, #13
 8006e46:	701a      	strb	r2, [r3, #0]
      break;
 8006e48:	e0c9      	b.n	8006fde <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	795b      	ldrb	r3, [r3, #5]
 8006e4e:	4619      	mov	r1, r3
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f001 f92d 	bl	80080b0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	791b      	ldrb	r3, [r3, #4]
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f001 f927 	bl	80080b0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	701a      	strb	r2, [r3, #0]
      break;
 8006e6e:	e0b6      	b.n	8006fde <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d036      	beq.n	8006ee8 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006e86:	23ff      	movs	r3, #255	; 0xff
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 f9e5 	bl	8007258 <USBH_Get_StringDesc>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006e92:	7bbb      	ldrb	r3, [r7, #14]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d111      	bne.n	8006ebc <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2206      	movs	r2, #6
 8006e9c:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2205      	movs	r2, #5
 8006ea2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f001 fb9d 	bl	80085f4 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006eba:	e092      	b.n	8006fe2 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ebc:	7bbb      	ldrb	r3, [r7, #14]
 8006ebe:	2b03      	cmp	r3, #3
 8006ec0:	f040 808f 	bne.w	8006fe2 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2206      	movs	r2, #6
 8006ec8:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2205      	movs	r2, #5
 8006ece:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006ede:	2300      	movs	r3, #0
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f001 fb87 	bl	80085f4 <osMessageQueuePut>
      break;
 8006ee6:	e07c      	b.n	8006fe2 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2206      	movs	r2, #6
 8006eec:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2205      	movs	r2, #5
 8006ef2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006f02:	2300      	movs	r3, #0
 8006f04:	2200      	movs	r2, #0
 8006f06:	f001 fb75 	bl	80085f4 <osMessageQueuePut>
      break;
 8006f0a:	e06a      	b.n	8006fe2 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d027      	beq.n	8006f66 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006f22:	23ff      	movs	r3, #255	; 0xff
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 f997 	bl	8007258 <USBH_Get_StringDesc>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006f2e:	7bbb      	ldrb	r3, [r7, #14]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d103      	bne.n	8006f3c <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2207      	movs	r2, #7
 8006f38:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006f3a:	e054      	b.n	8006fe6 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f3c:	7bbb      	ldrb	r3, [r7, #14]
 8006f3e:	2b03      	cmp	r3, #3
 8006f40:	d151      	bne.n	8006fe6 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2207      	movs	r2, #7
 8006f46:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2205      	movs	r2, #5
 8006f4c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f001 fb48 	bl	80085f4 <osMessageQueuePut>
      break;
 8006f64:	e03f      	b.n	8006fe6 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2207      	movs	r2, #7
 8006f6a:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2205      	movs	r2, #5
 8006f70:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006f80:	2300      	movs	r3, #0
 8006f82:	2200      	movs	r2, #0
 8006f84:	f001 fb36 	bl	80085f4 <osMessageQueuePut>
      break;
 8006f88:	e02d      	b.n	8006fe6 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d017      	beq.n	8006fc4 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006fa0:	23ff      	movs	r3, #255	; 0xff
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 f958 	bl	8007258 <USBH_Get_StringDesc>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006fac:	7bbb      	ldrb	r3, [r7, #14]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d102      	bne.n	8006fb8 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006fb6:	e018      	b.n	8006fea <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006fb8:	7bbb      	ldrb	r3, [r7, #14]
 8006fba:	2b03      	cmp	r3, #3
 8006fbc:	d115      	bne.n	8006fea <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	73fb      	strb	r3, [r7, #15]
      break;
 8006fc2:	e012      	b.n	8006fea <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	73fb      	strb	r3, [r7, #15]
      break;
 8006fc8:	e00f      	b.n	8006fea <USBH_HandleEnum+0x44a>

    default:
      break;
 8006fca:	bf00      	nop
 8006fcc:	e00e      	b.n	8006fec <USBH_HandleEnum+0x44c>
      break;
 8006fce:	bf00      	nop
 8006fd0:	e00c      	b.n	8006fec <USBH_HandleEnum+0x44c>
      break;
 8006fd2:	bf00      	nop
 8006fd4:	e00a      	b.n	8006fec <USBH_HandleEnum+0x44c>
      break;
 8006fd6:	bf00      	nop
 8006fd8:	e008      	b.n	8006fec <USBH_HandleEnum+0x44c>
      break;
 8006fda:	bf00      	nop
 8006fdc:	e006      	b.n	8006fec <USBH_HandleEnum+0x44c>
      break;
 8006fde:	bf00      	nop
 8006fe0:	e004      	b.n	8006fec <USBH_HandleEnum+0x44c>
      break;
 8006fe2:	bf00      	nop
 8006fe4:	e002      	b.n	8006fec <USBH_HandleEnum+0x44c>
      break;
 8006fe6:	bf00      	nop
 8006fe8:	e000      	b.n	8006fec <USBH_HandleEnum+0x44c>
      break;
 8006fea:	bf00      	nop
  }
  return Status;
 8006fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop

08006ff8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	683a      	ldr	r2, [r7, #0]
 8007006:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800700a:	bf00      	nop
 800700c:	370c      	adds	r7, #12
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr

08007016 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007016:	b580      	push	{r7, lr}
 8007018:	b082      	sub	sp, #8
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007024:	1c5a      	adds	r2, r3, #1
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 f804 	bl	800703a <USBH_HandleSof>
}
 8007032:	bf00      	nop
 8007034:	3708      	adds	r7, #8
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}

0800703a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800703a:	b580      	push	{r7, lr}
 800703c:	b082      	sub	sp, #8
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	b2db      	uxtb	r3, r3
 8007048:	2b0b      	cmp	r3, #11
 800704a:	d10a      	bne.n	8007062 <USBH_HandleSof+0x28>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007052:	2b00      	cmp	r3, #0
 8007054:	d005      	beq.n	8007062 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800705c:	699b      	ldr	r3, [r3, #24]
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	4798      	blx	r3
  }
}
 8007062:	bf00      	nop
 8007064:	3708      	adds	r7, #8
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}

0800706a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800706a:	b580      	push	{r7, lr}
 800706c:	b082      	sub	sp, #8
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2201      	movs	r2, #1
 8007076:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2201      	movs	r2, #1
 800707e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800708e:	2300      	movs	r3, #0
 8007090:	2200      	movs	r2, #0
 8007092:	f001 faaf 	bl	80085f4 <osMessageQueuePut>
#endif
#endif

  return;
 8007096:	bf00      	nop
}
 8007098:	3708      	adds	r7, #8
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800709e:	b480      	push	{r7}
 80070a0:	b083      	sub	sp, #12
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80070ae:	bf00      	nop
}
 80070b0:	370c      	adds	r7, #12
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr

080070ba <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b082      	sub	sp, #8
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2201      	movs	r2, #1
 80070c6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2201      	movs	r2, #1
 80070de:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80070ee:	2300      	movs	r3, #0
 80070f0:	2200      	movs	r2, #0
 80070f2:	f001 fa7f 	bl	80085f4 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 80070f6:	2300      	movs	r3, #0
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3708      	adds	r7, #8
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f004 fa50 	bl	800b5c6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	791b      	ldrb	r3, [r3, #4]
 800712a:	4619      	mov	r1, r3
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 ffbf 	bl	80080b0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	795b      	ldrb	r3, [r3, #5]
 8007136:	4619      	mov	r1, r3
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 ffb9 	bl	80080b0 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2201      	movs	r2, #1
 8007142:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007152:	2300      	movs	r3, #0
 8007154:	2200      	movs	r2, #0
 8007156:	f001 fa4d 	bl	80085f4 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800715a:	2300      	movs	r3, #0
}
 800715c:	4618      	mov	r0, r3
 800715e:	3708      	adds	r7, #8
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b084      	sub	sp, #16
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007178:	f04f 33ff 	mov.w	r3, #4294967295
 800717c:	2200      	movs	r2, #0
 800717e:	f001 fa99 	bl	80086b4 <osMessageQueueGet>
 8007182:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d1f0      	bne.n	800716c <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f7ff fa9c 	bl	80066c8 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007190:	e7ec      	b.n	800716c <USBH_Process_OS+0x8>

08007192 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8007192:	b580      	push	{r7, lr}
 8007194:	b082      	sub	sp, #8
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2201      	movs	r2, #1
 800719e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80071ae:	2300      	movs	r3, #0
 80071b0:	2200      	movs	r2, #0
 80071b2:	f001 fa1f 	bl	80085f4 <osMessageQueuePut>
#endif

  return USBH_OK;
 80071b6:	2300      	movs	r3, #0
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3708      	adds	r7, #8
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b086      	sub	sp, #24
 80071c4:	af02      	add	r7, sp, #8
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	460b      	mov	r3, r1
 80071ca:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80071d2:	78fb      	ldrb	r3, [r7, #3]
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	9300      	str	r3, [sp, #0]
 80071d8:	4613      	mov	r3, r2
 80071da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80071de:	2100      	movs	r1, #0
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 f864 	bl	80072ae <USBH_GetDescriptor>
 80071e6:	4603      	mov	r3, r0
 80071e8:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80071ea:	7bfb      	ldrb	r3, [r7, #15]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d10a      	bne.n	8007206 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f203 3026 	addw	r0, r3, #806	; 0x326
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80071fc:	78fa      	ldrb	r2, [r7, #3]
 80071fe:	b292      	uxth	r2, r2
 8007200:	4619      	mov	r1, r3
 8007202:	f000 f919 	bl	8007438 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007206:	7bfb      	ldrb	r3, [r7, #15]
}
 8007208:	4618      	mov	r0, r3
 800720a:	3710      	adds	r7, #16
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007210:	b580      	push	{r7, lr}
 8007212:	b086      	sub	sp, #24
 8007214:	af02      	add	r7, sp, #8
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	460b      	mov	r3, r1
 800721a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	331c      	adds	r3, #28
 8007220:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007222:	887b      	ldrh	r3, [r7, #2]
 8007224:	9300      	str	r3, [sp, #0]
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	f44f 7200 	mov.w	r2, #512	; 0x200
 800722c:	2100      	movs	r1, #0
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 f83d 	bl	80072ae <USBH_GetDescriptor>
 8007234:	4603      	mov	r3, r0
 8007236:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007238:	7bfb      	ldrb	r3, [r7, #15]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d107      	bne.n	800724e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800723e:	887b      	ldrh	r3, [r7, #2]
 8007240:	461a      	mov	r2, r3
 8007242:	68b9      	ldr	r1, [r7, #8]
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 f989 	bl	800755c <USBH_ParseCfgDesc>
 800724a:	4603      	mov	r3, r0
 800724c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800724e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007250:	4618      	mov	r0, r3
 8007252:	3710      	adds	r7, #16
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b088      	sub	sp, #32
 800725c:	af02      	add	r7, sp, #8
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	607a      	str	r2, [r7, #4]
 8007262:	461a      	mov	r2, r3
 8007264:	460b      	mov	r3, r1
 8007266:	72fb      	strb	r3, [r7, #11]
 8007268:	4613      	mov	r3, r2
 800726a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800726c:	7afb      	ldrb	r3, [r7, #11]
 800726e:	b29b      	uxth	r3, r3
 8007270:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007274:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800727c:	893b      	ldrh	r3, [r7, #8]
 800727e:	9300      	str	r3, [sp, #0]
 8007280:	460b      	mov	r3, r1
 8007282:	2100      	movs	r1, #0
 8007284:	68f8      	ldr	r0, [r7, #12]
 8007286:	f000 f812 	bl	80072ae <USBH_GetDescriptor>
 800728a:	4603      	mov	r3, r0
 800728c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800728e:	7dfb      	ldrb	r3, [r7, #23]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d107      	bne.n	80072a4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800729a:	893a      	ldrh	r2, [r7, #8]
 800729c:	6879      	ldr	r1, [r7, #4]
 800729e:	4618      	mov	r0, r3
 80072a0:	f000 fb26 	bl	80078f0 <USBH_ParseStringDesc>
  }

  return status;
 80072a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3718      	adds	r7, #24
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}

080072ae <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80072ae:	b580      	push	{r7, lr}
 80072b0:	b084      	sub	sp, #16
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	60f8      	str	r0, [r7, #12]
 80072b6:	607b      	str	r3, [r7, #4]
 80072b8:	460b      	mov	r3, r1
 80072ba:	72fb      	strb	r3, [r7, #11]
 80072bc:	4613      	mov	r3, r2
 80072be:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	789b      	ldrb	r3, [r3, #2]
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d11c      	bne.n	8007302 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80072c8:	7afb      	ldrb	r3, [r7, #11]
 80072ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80072ce:	b2da      	uxtb	r2, r3
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2206      	movs	r2, #6
 80072d8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	893a      	ldrh	r2, [r7, #8]
 80072de:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80072e0:	893b      	ldrh	r3, [r7, #8]
 80072e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80072e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072ea:	d104      	bne.n	80072f6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f240 4209 	movw	r2, #1033	; 0x409
 80072f2:	829a      	strh	r2, [r3, #20]
 80072f4:	e002      	b.n	80072fc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2200      	movs	r2, #0
 80072fa:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	8b3a      	ldrh	r2, [r7, #24]
 8007300:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007302:	8b3b      	ldrh	r3, [r7, #24]
 8007304:	461a      	mov	r2, r3
 8007306:	6879      	ldr	r1, [r7, #4]
 8007308:	68f8      	ldr	r0, [r7, #12]
 800730a:	f000 fb3f 	bl	800798c <USBH_CtlReq>
 800730e:	4603      	mov	r3, r0
}
 8007310:	4618      	mov	r0, r3
 8007312:	3710      	adds	r7, #16
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	460b      	mov	r3, r1
 8007322:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	789b      	ldrb	r3, [r3, #2]
 8007328:	2b01      	cmp	r3, #1
 800732a:	d10f      	bne.n	800734c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2200      	movs	r2, #0
 8007330:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2205      	movs	r2, #5
 8007336:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007338:	78fb      	ldrb	r3, [r7, #3]
 800733a:	b29a      	uxth	r2, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800734c:	2200      	movs	r2, #0
 800734e:	2100      	movs	r1, #0
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 fb1b 	bl	800798c <USBH_CtlReq>
 8007356:	4603      	mov	r3, r0
}
 8007358:	4618      	mov	r0, r3
 800735a:	3708      	adds	r7, #8
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	460b      	mov	r3, r1
 800736a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	789b      	ldrb	r3, [r3, #2]
 8007370:	2b01      	cmp	r3, #1
 8007372:	d10e      	bne.n	8007392 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2209      	movs	r2, #9
 800737e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	887a      	ldrh	r2, [r7, #2]
 8007384:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007392:	2200      	movs	r2, #0
 8007394:	2100      	movs	r1, #0
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 faf8 	bl	800798c <USBH_CtlReq>
 800739c:	4603      	mov	r3, r0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3708      	adds	r7, #8
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}

080073a6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80073a6:	b580      	push	{r7, lr}
 80073a8:	b082      	sub	sp, #8
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
 80073ae:	460b      	mov	r3, r1
 80073b0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	789b      	ldrb	r3, [r3, #2]
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d10f      	bne.n	80073da <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2203      	movs	r2, #3
 80073c4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80073c6:	78fb      	ldrb	r3, [r7, #3]
 80073c8:	b29a      	uxth	r2, r3
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80073da:	2200      	movs	r2, #0
 80073dc:	2100      	movs	r1, #0
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 fad4 	bl	800798c <USBH_CtlReq>
 80073e4:	4603      	mov	r3, r0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3708      	adds	r7, #8
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80073ee:	b580      	push	{r7, lr}
 80073f0:	b082      	sub	sp, #8
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
 80073f6:	460b      	mov	r3, r1
 80073f8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	789b      	ldrb	r3, [r3, #2]
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d10f      	bne.n	8007422 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2202      	movs	r2, #2
 8007406:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2201      	movs	r2, #1
 800740c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007414:	78fb      	ldrb	r3, [r7, #3]
 8007416:	b29a      	uxth	r2, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007422:	2200      	movs	r2, #0
 8007424:	2100      	movs	r1, #0
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 fab0 	bl	800798c <USBH_CtlReq>
 800742c:	4603      	mov	r3, r0
}
 800742e:	4618      	mov	r0, r3
 8007430:	3708      	adds	r7, #8
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
	...

08007438 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007438:	b480      	push	{r7}
 800743a:	b085      	sub	sp, #20
 800743c:	af00      	add	r7, sp, #0
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	60b9      	str	r1, [r7, #8]
 8007442:	4613      	mov	r3, r2
 8007444:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	781a      	ldrb	r2, [r3, #0]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	785a      	ldrb	r2, [r3, #1]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	3302      	adds	r3, #2
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	b29a      	uxth	r2, r3
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	3303      	adds	r3, #3
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	b29b      	uxth	r3, r3
 8007466:	021b      	lsls	r3, r3, #8
 8007468:	b29b      	uxth	r3, r3
 800746a:	4313      	orrs	r3, r2
 800746c:	b29a      	uxth	r2, r3
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	791a      	ldrb	r2, [r3, #4]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	795a      	ldrb	r2, [r3, #5]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	799a      	ldrb	r2, [r3, #6]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	79da      	ldrb	r2, [r3, #7]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	79db      	ldrb	r3, [r3, #7]
 8007496:	2b20      	cmp	r3, #32
 8007498:	dc0f      	bgt.n	80074ba <USBH_ParseDevDesc+0x82>
 800749a:	2b08      	cmp	r3, #8
 800749c:	db14      	blt.n	80074c8 <USBH_ParseDevDesc+0x90>
 800749e:	3b08      	subs	r3, #8
 80074a0:	4a2d      	ldr	r2, [pc, #180]	; (8007558 <USBH_ParseDevDesc+0x120>)
 80074a2:	fa22 f303 	lsr.w	r3, r2, r3
 80074a6:	f003 0301 	and.w	r3, r3, #1
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	bf14      	ite	ne
 80074ae:	2301      	movne	r3, #1
 80074b0:	2300      	moveq	r3, #0
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d102      	bne.n	80074be <USBH_ParseDevDesc+0x86>
 80074b8:	e006      	b.n	80074c8 <USBH_ParseDevDesc+0x90>
 80074ba:	2b40      	cmp	r3, #64	; 0x40
 80074bc:	d104      	bne.n	80074c8 <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	79da      	ldrb	r2, [r3, #7]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	71da      	strb	r2, [r3, #7]
      break;
 80074c6:	e003      	b.n	80074d0 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2240      	movs	r2, #64	; 0x40
 80074cc:	71da      	strb	r2, [r3, #7]
      break;
 80074ce:	bf00      	nop
  }

  if (length > 8U)
 80074d0:	88fb      	ldrh	r3, [r7, #6]
 80074d2:	2b08      	cmp	r3, #8
 80074d4:	d939      	bls.n	800754a <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	3308      	adds	r3, #8
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	b29a      	uxth	r2, r3
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	3309      	adds	r3, #9
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	021b      	lsls	r3, r3, #8
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	4313      	orrs	r3, r2
 80074ec:	b29a      	uxth	r2, r3
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	330a      	adds	r3, #10
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	b29a      	uxth	r2, r3
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	330b      	adds	r3, #11
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	b29b      	uxth	r3, r3
 8007502:	021b      	lsls	r3, r3, #8
 8007504:	b29b      	uxth	r3, r3
 8007506:	4313      	orrs	r3, r2
 8007508:	b29a      	uxth	r2, r3
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	330c      	adds	r3, #12
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	b29a      	uxth	r2, r3
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	330d      	adds	r3, #13
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	b29b      	uxth	r3, r3
 800751e:	021b      	lsls	r3, r3, #8
 8007520:	b29b      	uxth	r3, r3
 8007522:	4313      	orrs	r3, r2
 8007524:	b29a      	uxth	r2, r3
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	7b9a      	ldrb	r2, [r3, #14]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	7bda      	ldrb	r2, [r3, #15]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	7c1a      	ldrb	r2, [r3, #16]
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	7c5a      	ldrb	r2, [r3, #17]
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	745a      	strb	r2, [r3, #17]
  }
}
 800754a:	bf00      	nop
 800754c:	3714      	adds	r7, #20
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr
 8007556:	bf00      	nop
 8007558:	01000101 	.word	0x01000101

0800755c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b08c      	sub	sp, #48	; 0x30
 8007560:	af00      	add	r7, sp, #0
 8007562:	60f8      	str	r0, [r7, #12]
 8007564:	60b9      	str	r1, [r7, #8]
 8007566:	4613      	mov	r3, r2
 8007568:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007570:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007572:	2300      	movs	r3, #0
 8007574:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800757c:	2300      	movs	r3, #0
 800757e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007582:	2300      	movs	r3, #0
 8007584:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	781a      	ldrb	r2, [r3, #0]
 8007590:	6a3b      	ldr	r3, [r7, #32]
 8007592:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	785a      	ldrb	r2, [r3, #1]
 8007598:	6a3b      	ldr	r3, [r7, #32]
 800759a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	3302      	adds	r3, #2
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	b29a      	uxth	r2, r3
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	3303      	adds	r3, #3
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	021b      	lsls	r3, r3, #8
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	4313      	orrs	r3, r2
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075b8:	bf28      	it	cs
 80075ba:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80075be:	b29a      	uxth	r2, r3
 80075c0:	6a3b      	ldr	r3, [r7, #32]
 80075c2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	791a      	ldrb	r2, [r3, #4]
 80075c8:	6a3b      	ldr	r3, [r7, #32]
 80075ca:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	795a      	ldrb	r2, [r3, #5]
 80075d0:	6a3b      	ldr	r3, [r7, #32]
 80075d2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	799a      	ldrb	r2, [r3, #6]
 80075d8:	6a3b      	ldr	r3, [r7, #32]
 80075da:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	79da      	ldrb	r2, [r3, #7]
 80075e0:	6a3b      	ldr	r3, [r7, #32]
 80075e2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	7a1a      	ldrb	r2, [r3, #8]
 80075e8:	6a3b      	ldr	r3, [r7, #32]
 80075ea:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 80075ec:	6a3b      	ldr	r3, [r7, #32]
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	2b09      	cmp	r3, #9
 80075f2:	d002      	beq.n	80075fa <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80075f4:	6a3b      	ldr	r3, [r7, #32]
 80075f6:	2209      	movs	r2, #9
 80075f8:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80075fa:	88fb      	ldrh	r3, [r7, #6]
 80075fc:	2b09      	cmp	r3, #9
 80075fe:	f240 809d 	bls.w	800773c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007602:	2309      	movs	r3, #9
 8007604:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007606:	2300      	movs	r3, #0
 8007608:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800760a:	e081      	b.n	8007710 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800760c:	f107 0316 	add.w	r3, r7, #22
 8007610:	4619      	mov	r1, r3
 8007612:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007614:	f000 f99f 	bl	8007956 <USBH_GetNextDesc>
 8007618:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800761a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800761c:	785b      	ldrb	r3, [r3, #1]
 800761e:	2b04      	cmp	r3, #4
 8007620:	d176      	bne.n	8007710 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	2b09      	cmp	r3, #9
 8007628:	d002      	beq.n	8007630 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800762a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800762c:	2209      	movs	r2, #9
 800762e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007630:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007634:	221a      	movs	r2, #26
 8007636:	fb02 f303 	mul.w	r3, r2, r3
 800763a:	3308      	adds	r3, #8
 800763c:	6a3a      	ldr	r2, [r7, #32]
 800763e:	4413      	add	r3, r2
 8007640:	3302      	adds	r3, #2
 8007642:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007644:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007646:	69f8      	ldr	r0, [r7, #28]
 8007648:	f000 f87e 	bl	8007748 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800764c:	2300      	movs	r3, #0
 800764e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007652:	2300      	movs	r3, #0
 8007654:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007656:	e043      	b.n	80076e0 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007658:	f107 0316 	add.w	r3, r7, #22
 800765c:	4619      	mov	r1, r3
 800765e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007660:	f000 f979 	bl	8007956 <USBH_GetNextDesc>
 8007664:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007668:	785b      	ldrb	r3, [r3, #1]
 800766a:	2b05      	cmp	r3, #5
 800766c:	d138      	bne.n	80076e0 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800766e:	69fb      	ldr	r3, [r7, #28]
 8007670:	795b      	ldrb	r3, [r3, #5]
 8007672:	2b01      	cmp	r3, #1
 8007674:	d10f      	bne.n	8007696 <USBH_ParseCfgDesc+0x13a>
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	799b      	ldrb	r3, [r3, #6]
 800767a:	2b02      	cmp	r3, #2
 800767c:	d10b      	bne.n	8007696 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	79db      	ldrb	r3, [r3, #7]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d10f      	bne.n	80076a6 <USBH_ParseCfgDesc+0x14a>
 8007686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	2b09      	cmp	r3, #9
 800768c:	d00b      	beq.n	80076a6 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800768e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007690:	2209      	movs	r2, #9
 8007692:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007694:	e007      	b.n	80076a6 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	2b07      	cmp	r3, #7
 800769c:	d004      	beq.n	80076a8 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800769e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a0:	2207      	movs	r2, #7
 80076a2:	701a      	strb	r2, [r3, #0]
 80076a4:	e000      	b.n	80076a8 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80076a6:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80076a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80076ac:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80076b0:	3201      	adds	r2, #1
 80076b2:	00d2      	lsls	r2, r2, #3
 80076b4:	211a      	movs	r1, #26
 80076b6:	fb01 f303 	mul.w	r3, r1, r3
 80076ba:	4413      	add	r3, r2
 80076bc:	3308      	adds	r3, #8
 80076be:	6a3a      	ldr	r2, [r7, #32]
 80076c0:	4413      	add	r3, r2
 80076c2:	3304      	adds	r3, #4
 80076c4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80076c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076c8:	69b9      	ldr	r1, [r7, #24]
 80076ca:	68f8      	ldr	r0, [r7, #12]
 80076cc:	f000 f86b 	bl	80077a6 <USBH_ParseEPDesc>
 80076d0:	4603      	mov	r3, r0
 80076d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80076d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80076da:	3301      	adds	r3, #1
 80076dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	791b      	ldrb	r3, [r3, #4]
 80076e4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d204      	bcs.n	80076f6 <USBH_ParseCfgDesc+0x19a>
 80076ec:	6a3b      	ldr	r3, [r7, #32]
 80076ee:	885a      	ldrh	r2, [r3, #2]
 80076f0:	8afb      	ldrh	r3, [r7, #22]
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d8b0      	bhi.n	8007658 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80076f6:	69fb      	ldr	r3, [r7, #28]
 80076f8:	791b      	ldrb	r3, [r3, #4]
 80076fa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80076fe:	429a      	cmp	r2, r3
 8007700:	d201      	bcs.n	8007706 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007702:	2303      	movs	r3, #3
 8007704:	e01c      	b.n	8007740 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007706:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800770a:	3301      	adds	r3, #1
 800770c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007710:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007714:	2b01      	cmp	r3, #1
 8007716:	d805      	bhi.n	8007724 <USBH_ParseCfgDesc+0x1c8>
 8007718:	6a3b      	ldr	r3, [r7, #32]
 800771a:	885a      	ldrh	r2, [r3, #2]
 800771c:	8afb      	ldrh	r3, [r7, #22]
 800771e:	429a      	cmp	r2, r3
 8007720:	f63f af74 	bhi.w	800760c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007724:	6a3b      	ldr	r3, [r7, #32]
 8007726:	791b      	ldrb	r3, [r3, #4]
 8007728:	2b02      	cmp	r3, #2
 800772a:	bf28      	it	cs
 800772c:	2302      	movcs	r3, #2
 800772e:	b2db      	uxtb	r3, r3
 8007730:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007734:	429a      	cmp	r2, r3
 8007736:	d201      	bcs.n	800773c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007738:	2303      	movs	r3, #3
 800773a:	e001      	b.n	8007740 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800773c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007740:	4618      	mov	r0, r3
 8007742:	3730      	adds	r7, #48	; 0x30
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	781a      	ldrb	r2, [r3, #0]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	785a      	ldrb	r2, [r3, #1]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	789a      	ldrb	r2, [r3, #2]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	78da      	ldrb	r2, [r3, #3]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	791a      	ldrb	r2, [r3, #4]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	795a      	ldrb	r2, [r3, #5]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	799a      	ldrb	r2, [r3, #6]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	79da      	ldrb	r2, [r3, #7]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	7a1a      	ldrb	r2, [r3, #8]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	721a      	strb	r2, [r3, #8]
}
 800779a:	bf00      	nop
 800779c:	370c      	adds	r7, #12
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr

080077a6 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 80077a6:	b480      	push	{r7}
 80077a8:	b087      	sub	sp, #28
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	60f8      	str	r0, [r7, #12]
 80077ae:	60b9      	str	r1, [r7, #8]
 80077b0:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80077b2:	2300      	movs	r3, #0
 80077b4:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	781a      	ldrb	r2, [r3, #0]
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	785a      	ldrb	r2, [r3, #1]
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	789a      	ldrb	r2, [r3, #2]
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	78da      	ldrb	r2, [r3, #3]
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	3304      	adds	r3, #4
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	b29a      	uxth	r2, r3
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	3305      	adds	r3, #5
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	021b      	lsls	r3, r3, #8
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	4313      	orrs	r3, r2
 80077ec:	b29a      	uxth	r2, r3
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	799a      	ldrb	r2, [r3, #6]
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	889b      	ldrh	r3, [r3, #4]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d102      	bne.n	8007808 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007802:	2303      	movs	r3, #3
 8007804:	75fb      	strb	r3, [r7, #23]
 8007806:	e033      	b.n	8007870 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	889b      	ldrh	r3, [r3, #4]
 800780c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007810:	f023 0307 	bic.w	r3, r3, #7
 8007814:	b29a      	uxth	r2, r3
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	889b      	ldrh	r3, [r3, #4]
 800781e:	b21a      	sxth	r2, r3
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	3304      	adds	r3, #4
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	b299      	uxth	r1, r3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	3305      	adds	r3, #5
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	b29b      	uxth	r3, r3
 8007830:	021b      	lsls	r3, r3, #8
 8007832:	b29b      	uxth	r3, r3
 8007834:	430b      	orrs	r3, r1
 8007836:	b29b      	uxth	r3, r3
 8007838:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800783c:	2b00      	cmp	r3, #0
 800783e:	d110      	bne.n	8007862 <USBH_ParseEPDesc+0xbc>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	3304      	adds	r3, #4
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	b299      	uxth	r1, r3
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	3305      	adds	r3, #5
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	b29b      	uxth	r3, r3
 8007850:	021b      	lsls	r3, r3, #8
 8007852:	b29b      	uxth	r3, r3
 8007854:	430b      	orrs	r3, r1
 8007856:	b29b      	uxth	r3, r3
 8007858:	b21b      	sxth	r3, r3
 800785a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800785e:	b21b      	sxth	r3, r3
 8007860:	e001      	b.n	8007866 <USBH_ParseEPDesc+0xc0>
 8007862:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007866:	4313      	orrs	r3, r2
 8007868:	b21b      	sxth	r3, r3
 800786a:	b29a      	uxth	r2, r3
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007876:	2b00      	cmp	r3, #0
 8007878:	d116      	bne.n	80078a8 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	78db      	ldrb	r3, [r3, #3]
 800787e:	f003 0303 	and.w	r3, r3, #3
 8007882:	2b01      	cmp	r3, #1
 8007884:	d005      	beq.n	8007892 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	78db      	ldrb	r3, [r3, #3]
 800788a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800788e:	2b03      	cmp	r3, #3
 8007890:	d127      	bne.n	80078e2 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	799b      	ldrb	r3, [r3, #6]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d003      	beq.n	80078a2 <USBH_ParseEPDesc+0xfc>
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	799b      	ldrb	r3, [r3, #6]
 800789e:	2b10      	cmp	r3, #16
 80078a0:	d91f      	bls.n	80078e2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80078a2:	2303      	movs	r3, #3
 80078a4:	75fb      	strb	r3, [r7, #23]
 80078a6:	e01c      	b.n	80078e2 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	78db      	ldrb	r3, [r3, #3]
 80078ac:	f003 0303 	and.w	r3, r3, #3
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d10a      	bne.n	80078ca <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	799b      	ldrb	r3, [r3, #6]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d003      	beq.n	80078c4 <USBH_ParseEPDesc+0x11e>
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	799b      	ldrb	r3, [r3, #6]
 80078c0:	2b10      	cmp	r3, #16
 80078c2:	d90e      	bls.n	80078e2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80078c4:	2303      	movs	r3, #3
 80078c6:	75fb      	strb	r3, [r7, #23]
 80078c8:	e00b      	b.n	80078e2 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	78db      	ldrb	r3, [r3, #3]
 80078ce:	f003 0303 	and.w	r3, r3, #3
 80078d2:	2b03      	cmp	r3, #3
 80078d4:	d105      	bne.n	80078e2 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	799b      	ldrb	r3, [r3, #6]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d101      	bne.n	80078e2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80078de:	2303      	movs	r3, #3
 80078e0:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80078e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	371c      	adds	r7, #28
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr

080078f0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b087      	sub	sp, #28
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	60b9      	str	r1, [r7, #8]
 80078fa:	4613      	mov	r3, r2
 80078fc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	3301      	adds	r3, #1
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	2b03      	cmp	r3, #3
 8007906:	d120      	bne.n	800794a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	1e9a      	subs	r2, r3, #2
 800790e:	88fb      	ldrh	r3, [r7, #6]
 8007910:	4293      	cmp	r3, r2
 8007912:	bf28      	it	cs
 8007914:	4613      	movcs	r3, r2
 8007916:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	3302      	adds	r3, #2
 800791c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800791e:	2300      	movs	r3, #0
 8007920:	82fb      	strh	r3, [r7, #22]
 8007922:	e00b      	b.n	800793c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007924:	8afb      	ldrh	r3, [r7, #22]
 8007926:	68fa      	ldr	r2, [r7, #12]
 8007928:	4413      	add	r3, r2
 800792a:	781a      	ldrb	r2, [r3, #0]
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	3301      	adds	r3, #1
 8007934:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007936:	8afb      	ldrh	r3, [r7, #22]
 8007938:	3302      	adds	r3, #2
 800793a:	82fb      	strh	r3, [r7, #22]
 800793c:	8afa      	ldrh	r2, [r7, #22]
 800793e:	8abb      	ldrh	r3, [r7, #20]
 8007940:	429a      	cmp	r2, r3
 8007942:	d3ef      	bcc.n	8007924 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	2200      	movs	r2, #0
 8007948:	701a      	strb	r2, [r3, #0]
  }
}
 800794a:	bf00      	nop
 800794c:	371c      	adds	r7, #28
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr

08007956 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007956:	b480      	push	{r7}
 8007958:	b085      	sub	sp, #20
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
 800795e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	881a      	ldrh	r2, [r3, #0]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	b29b      	uxth	r3, r3
 800796a:	4413      	add	r3, r2
 800796c:	b29a      	uxth	r2, r3
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4413      	add	r3, r2
 800797c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800797e:	68fb      	ldr	r3, [r7, #12]
}
 8007980:	4618      	mov	r0, r3
 8007982:	3714      	adds	r7, #20
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr

0800798c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b086      	sub	sp, #24
 8007990:	af00      	add	r7, sp, #0
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	60b9      	str	r1, [r7, #8]
 8007996:	4613      	mov	r3, r2
 8007998:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800799a:	2301      	movs	r3, #1
 800799c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	789b      	ldrb	r3, [r3, #2]
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d002      	beq.n	80079ac <USBH_CtlReq+0x20>
 80079a6:	2b02      	cmp	r3, #2
 80079a8:	d01d      	beq.n	80079e6 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 80079aa:	e043      	b.n	8007a34 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	68ba      	ldr	r2, [r7, #8]
 80079b0:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	88fa      	ldrh	r2, [r7, #6]
 80079b6:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2201      	movs	r2, #1
 80079bc:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2202      	movs	r2, #2
 80079c2:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80079c4:	2301      	movs	r3, #1
 80079c6:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2203      	movs	r2, #3
 80079cc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80079dc:	2300      	movs	r3, #0
 80079de:	2200      	movs	r2, #0
 80079e0:	f000 fe08 	bl	80085f4 <osMessageQueuePut>
      break;
 80079e4:	e026      	b.n	8007a34 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 80079e6:	68f8      	ldr	r0, [r7, #12]
 80079e8:	f000 f82a 	bl	8007a40 <USBH_HandleControl>
 80079ec:	4603      	mov	r3, r0
 80079ee:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80079f0:	7dfb      	ldrb	r3, [r7, #23]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d002      	beq.n	80079fc <USBH_CtlReq+0x70>
 80079f6:	7dfb      	ldrb	r3, [r7, #23]
 80079f8:	2b03      	cmp	r3, #3
 80079fa:	d106      	bne.n	8007a0a <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2201      	movs	r2, #1
 8007a00:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2200      	movs	r2, #0
 8007a06:	761a      	strb	r2, [r3, #24]
 8007a08:	e005      	b.n	8007a16 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8007a0a:	7dfb      	ldrb	r3, [r7, #23]
 8007a0c:	2b02      	cmp	r3, #2
 8007a0e:	d102      	bne.n	8007a16 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2201      	movs	r2, #1
 8007a14:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2203      	movs	r2, #3
 8007a1a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f000 fde1 	bl	80085f4 <osMessageQueuePut>
      break;
 8007a32:	bf00      	nop
  }
  return status;
 8007a34:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3718      	adds	r7, #24
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
	...

08007a40 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b086      	sub	sp, #24
 8007a44:	af02      	add	r7, sp, #8
 8007a46:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	7e1b      	ldrb	r3, [r3, #24]
 8007a54:	3b01      	subs	r3, #1
 8007a56:	2b0a      	cmp	r3, #10
 8007a58:	f200 8229 	bhi.w	8007eae <USBH_HandleControl+0x46e>
 8007a5c:	a201      	add	r2, pc, #4	; (adr r2, 8007a64 <USBH_HandleControl+0x24>)
 8007a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a62:	bf00      	nop
 8007a64:	08007a91 	.word	0x08007a91
 8007a68:	08007aab 	.word	0x08007aab
 8007a6c:	08007b4d 	.word	0x08007b4d
 8007a70:	08007b73 	.word	0x08007b73
 8007a74:	08007bff 	.word	0x08007bff
 8007a78:	08007c29 	.word	0x08007c29
 8007a7c:	08007ceb 	.word	0x08007ceb
 8007a80:	08007d0d 	.word	0x08007d0d
 8007a84:	08007d9f 	.word	0x08007d9f
 8007a88:	08007dc5 	.word	0x08007dc5
 8007a8c:	08007e57 	.word	0x08007e57
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f103 0110 	add.w	r1, r3, #16
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	795b      	ldrb	r3, [r3, #5]
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 fa17 	bl	8007ed0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2202      	movs	r2, #2
 8007aa6:	761a      	strb	r2, [r3, #24]
      break;
 8007aa8:	e20c      	b.n	8007ec4 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	795b      	ldrb	r3, [r3, #5]
 8007aae:	4619      	mov	r1, r3
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f003 fe77 	bl	800b7a4 <USBH_LL_GetURBState>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007aba:	7bbb      	ldrb	r3, [r7, #14]
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d12c      	bne.n	8007b1a <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	7c1b      	ldrb	r3, [r3, #16]
 8007ac4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007ac8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	8adb      	ldrh	r3, [r3, #22]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d00a      	beq.n	8007ae8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007ad2:	7b7b      	ldrb	r3, [r7, #13]
 8007ad4:	2b80      	cmp	r3, #128	; 0x80
 8007ad6:	d103      	bne.n	8007ae0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2203      	movs	r2, #3
 8007adc:	761a      	strb	r2, [r3, #24]
 8007ade:	e00d      	b.n	8007afc <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2205      	movs	r2, #5
 8007ae4:	761a      	strb	r2, [r3, #24]
 8007ae6:	e009      	b.n	8007afc <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8007ae8:	7b7b      	ldrb	r3, [r7, #13]
 8007aea:	2b80      	cmp	r3, #128	; 0x80
 8007aec:	d103      	bne.n	8007af6 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2209      	movs	r2, #9
 8007af2:	761a      	strb	r2, [r3, #24]
 8007af4:	e002      	b.n	8007afc <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2207      	movs	r2, #7
 8007afa:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2203      	movs	r2, #3
 8007b00:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007b10:	2300      	movs	r3, #0
 8007b12:	2200      	movs	r2, #0
 8007b14:	f000 fd6e 	bl	80085f4 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007b18:	e1cb      	b.n	8007eb2 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007b1a:	7bbb      	ldrb	r3, [r7, #14]
 8007b1c:	2b04      	cmp	r3, #4
 8007b1e:	d003      	beq.n	8007b28 <USBH_HandleControl+0xe8>
 8007b20:	7bbb      	ldrb	r3, [r7, #14]
 8007b22:	2b02      	cmp	r3, #2
 8007b24:	f040 81c5 	bne.w	8007eb2 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	220b      	movs	r2, #11
 8007b2c:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2203      	movs	r2, #3
 8007b32:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007b42:	2300      	movs	r3, #0
 8007b44:	2200      	movs	r2, #0
 8007b46:	f000 fd55 	bl	80085f4 <osMessageQueuePut>
      break;
 8007b4a:	e1b2      	b.n	8007eb2 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007b52:	b29a      	uxth	r2, r3
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6899      	ldr	r1, [r3, #8]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	899a      	ldrh	r2, [r3, #12]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	791b      	ldrb	r3, [r3, #4]
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 f9f2 	bl	8007f4e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2204      	movs	r2, #4
 8007b6e:	761a      	strb	r2, [r3, #24]
      break;
 8007b70:	e1a8      	b.n	8007ec4 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	791b      	ldrb	r3, [r3, #4]
 8007b76:	4619      	mov	r1, r3
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f003 fe13 	bl	800b7a4 <USBH_LL_GetURBState>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007b82:	7bbb      	ldrb	r3, [r7, #14]
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d110      	bne.n	8007baa <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2209      	movs	r2, #9
 8007b8c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2203      	movs	r2, #3
 8007b92:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f000 fd25 	bl	80085f4 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007baa:	7bbb      	ldrb	r3, [r7, #14]
 8007bac:	2b05      	cmp	r3, #5
 8007bae:	d110      	bne.n	8007bd2 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007bb0:	2303      	movs	r3, #3
 8007bb2:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2203      	movs	r2, #3
 8007bb8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007bc8:	2300      	movs	r3, #0
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f000 fd12 	bl	80085f4 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007bd0:	e171      	b.n	8007eb6 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 8007bd2:	7bbb      	ldrb	r3, [r7, #14]
 8007bd4:	2b04      	cmp	r3, #4
 8007bd6:	f040 816e 	bne.w	8007eb6 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	220b      	movs	r2, #11
 8007bde:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2203      	movs	r2, #3
 8007be4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f000 fcfc 	bl	80085f4 <osMessageQueuePut>
      break;
 8007bfc:	e15b      	b.n	8007eb6 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6899      	ldr	r1, [r3, #8]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	899a      	ldrh	r2, [r3, #12]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	795b      	ldrb	r3, [r3, #5]
 8007c0a:	2001      	movs	r0, #1
 8007c0c:	9000      	str	r0, [sp, #0]
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 f978 	bl	8007f04 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007c1a:	b29a      	uxth	r2, r3
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2206      	movs	r2, #6
 8007c24:	761a      	strb	r2, [r3, #24]
      break;
 8007c26:	e14d      	b.n	8007ec4 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	795b      	ldrb	r3, [r3, #5]
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f003 fdb8 	bl	800b7a4 <USBH_LL_GetURBState>
 8007c34:	4603      	mov	r3, r0
 8007c36:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007c38:	7bbb      	ldrb	r3, [r7, #14]
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d111      	bne.n	8007c62 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2207      	movs	r2, #7
 8007c42:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2203      	movs	r2, #3
 8007c48:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007c58:	2300      	movs	r3, #0
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	f000 fcca 	bl	80085f4 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007c60:	e12b      	b.n	8007eba <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 8007c62:	7bbb      	ldrb	r3, [r7, #14]
 8007c64:	2b05      	cmp	r3, #5
 8007c66:	d113      	bne.n	8007c90 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	220c      	movs	r2, #12
 8007c6c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007c6e:	2303      	movs	r3, #3
 8007c70:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2203      	movs	r2, #3
 8007c76:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007c86:	2300      	movs	r3, #0
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f000 fcb3 	bl	80085f4 <osMessageQueuePut>
      break;
 8007c8e:	e114      	b.n	8007eba <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007c90:	7bbb      	ldrb	r3, [r7, #14]
 8007c92:	2b02      	cmp	r3, #2
 8007c94:	d111      	bne.n	8007cba <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2205      	movs	r2, #5
 8007c9a:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2203      	movs	r2, #3
 8007ca0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f000 fc9e 	bl	80085f4 <osMessageQueuePut>
      break;
 8007cb8:	e0ff      	b.n	8007eba <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8007cba:	7bbb      	ldrb	r3, [r7, #14]
 8007cbc:	2b04      	cmp	r3, #4
 8007cbe:	f040 80fc 	bne.w	8007eba <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	220b      	movs	r2, #11
 8007cc6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007cc8:	2302      	movs	r3, #2
 8007cca:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2203      	movs	r2, #3
 8007cd0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f000 fc86 	bl	80085f4 <osMessageQueuePut>
      break;
 8007ce8:	e0e7      	b.n	8007eba <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	791b      	ldrb	r3, [r3, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	2100      	movs	r1, #0
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 f92b 	bl	8007f4e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007cfe:	b29a      	uxth	r2, r3
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2208      	movs	r2, #8
 8007d08:	761a      	strb	r2, [r3, #24]

      break;
 8007d0a:	e0db      	b.n	8007ec4 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	791b      	ldrb	r3, [r3, #4]
 8007d10:	4619      	mov	r1, r3
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f003 fd46 	bl	800b7a4 <USBH_LL_GetURBState>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007d1c:	7bbb      	ldrb	r3, [r7, #14]
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d113      	bne.n	8007d4a <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	220d      	movs	r2, #13
 8007d26:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2203      	movs	r2, #3
 8007d30:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007d40:	2300      	movs	r3, #0
 8007d42:	2200      	movs	r2, #0
 8007d44:	f000 fc56 	bl	80085f4 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007d48:	e0b9      	b.n	8007ebe <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 8007d4a:	7bbb      	ldrb	r3, [r7, #14]
 8007d4c:	2b04      	cmp	r3, #4
 8007d4e:	d111      	bne.n	8007d74 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	220b      	movs	r2, #11
 8007d54:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2203      	movs	r2, #3
 8007d5a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	f000 fc41 	bl	80085f4 <osMessageQueuePut>
      break;
 8007d72:	e0a4      	b.n	8007ebe <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 8007d74:	7bbb      	ldrb	r3, [r7, #14]
 8007d76:	2b05      	cmp	r3, #5
 8007d78:	f040 80a1 	bne.w	8007ebe <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 8007d7c:	2303      	movs	r3, #3
 8007d7e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2203      	movs	r2, #3
 8007d84:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007d94:	2300      	movs	r3, #0
 8007d96:	2200      	movs	r2, #0
 8007d98:	f000 fc2c 	bl	80085f4 <osMessageQueuePut>
      break;
 8007d9c:	e08f      	b.n	8007ebe <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	795b      	ldrb	r3, [r3, #5]
 8007da2:	2201      	movs	r2, #1
 8007da4:	9200      	str	r2, [sp, #0]
 8007da6:	2200      	movs	r2, #0
 8007da8:	2100      	movs	r1, #0
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 f8aa 	bl	8007f04 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007db6:	b29a      	uxth	r2, r3
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	220a      	movs	r2, #10
 8007dc0:	761a      	strb	r2, [r3, #24]
      break;
 8007dc2:	e07f      	b.n	8007ec4 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	795b      	ldrb	r3, [r3, #5]
 8007dc8:	4619      	mov	r1, r3
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f003 fcea 	bl	800b7a4 <USBH_LL_GetURBState>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007dd4:	7bbb      	ldrb	r3, [r7, #14]
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d113      	bne.n	8007e02 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	220d      	movs	r2, #13
 8007de2:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2203      	movs	r2, #3
 8007de8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007df8:	2300      	movs	r3, #0
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f000 fbfa 	bl	80085f4 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007e00:	e05f      	b.n	8007ec2 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007e02:	7bbb      	ldrb	r3, [r7, #14]
 8007e04:	2b02      	cmp	r3, #2
 8007e06:	d111      	bne.n	8007e2c <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2209      	movs	r2, #9
 8007e0c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2203      	movs	r2, #3
 8007e12:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007e22:	2300      	movs	r3, #0
 8007e24:	2200      	movs	r2, #0
 8007e26:	f000 fbe5 	bl	80085f4 <osMessageQueuePut>
      break;
 8007e2a:	e04a      	b.n	8007ec2 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8007e2c:	7bbb      	ldrb	r3, [r7, #14]
 8007e2e:	2b04      	cmp	r3, #4
 8007e30:	d147      	bne.n	8007ec2 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	220b      	movs	r2, #11
 8007e36:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2203      	movs	r2, #3
 8007e3c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f000 fbd0 	bl	80085f4 <osMessageQueuePut>
      break;
 8007e54:	e035      	b.n	8007ec2 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	7e5b      	ldrb	r3, [r3, #25]
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	b2da      	uxtb	r2, r3
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	765a      	strb	r2, [r3, #25]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	7e5b      	ldrb	r3, [r3, #25]
 8007e66:	2b02      	cmp	r3, #2
 8007e68:	d806      	bhi.n	8007e78 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007e76:	e025      	b.n	8007ec4 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007e7e:	2106      	movs	r1, #6
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2200      	movs	r2, #0
 8007e88:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	795b      	ldrb	r3, [r3, #5]
 8007e8e:	4619      	mov	r1, r3
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 f90d 	bl	80080b0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	791b      	ldrb	r3, [r3, #4]
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 f907 	bl	80080b0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007ea8:	2302      	movs	r3, #2
 8007eaa:	73fb      	strb	r3, [r7, #15]
      break;
 8007eac:	e00a      	b.n	8007ec4 <USBH_HandleControl+0x484>

    default:
      break;
 8007eae:	bf00      	nop
 8007eb0:	e008      	b.n	8007ec4 <USBH_HandleControl+0x484>
      break;
 8007eb2:	bf00      	nop
 8007eb4:	e006      	b.n	8007ec4 <USBH_HandleControl+0x484>
      break;
 8007eb6:	bf00      	nop
 8007eb8:	e004      	b.n	8007ec4 <USBH_HandleControl+0x484>
      break;
 8007eba:	bf00      	nop
 8007ebc:	e002      	b.n	8007ec4 <USBH_HandleControl+0x484>
      break;
 8007ebe:	bf00      	nop
 8007ec0:	e000      	b.n	8007ec4 <USBH_HandleControl+0x484>
      break;
 8007ec2:	bf00      	nop
  }

  return status;
 8007ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3710      	adds	r7, #16
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop

08007ed0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b088      	sub	sp, #32
 8007ed4:	af04      	add	r7, sp, #16
 8007ed6:	60f8      	str	r0, [r7, #12]
 8007ed8:	60b9      	str	r1, [r7, #8]
 8007eda:	4613      	mov	r3, r2
 8007edc:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007ede:	79f9      	ldrb	r1, [r7, #7]
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	9303      	str	r3, [sp, #12]
 8007ee4:	2308      	movs	r3, #8
 8007ee6:	9302      	str	r3, [sp, #8]
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	9301      	str	r3, [sp, #4]
 8007eec:	2300      	movs	r3, #0
 8007eee:	9300      	str	r3, [sp, #0]
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	68f8      	ldr	r0, [r7, #12]
 8007ef6:	f003 fc24 	bl	800b742 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007efa:	2300      	movs	r3, #0
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3710      	adds	r7, #16
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b088      	sub	sp, #32
 8007f08:	af04      	add	r7, sp, #16
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	60b9      	str	r1, [r7, #8]
 8007f0e:	4611      	mov	r1, r2
 8007f10:	461a      	mov	r2, r3
 8007f12:	460b      	mov	r3, r1
 8007f14:	80fb      	strh	r3, [r7, #6]
 8007f16:	4613      	mov	r3, r2
 8007f18:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d001      	beq.n	8007f28 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007f24:	2300      	movs	r3, #0
 8007f26:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007f28:	7979      	ldrb	r1, [r7, #5]
 8007f2a:	7e3b      	ldrb	r3, [r7, #24]
 8007f2c:	9303      	str	r3, [sp, #12]
 8007f2e:	88fb      	ldrh	r3, [r7, #6]
 8007f30:	9302      	str	r3, [sp, #8]
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	9301      	str	r3, [sp, #4]
 8007f36:	2301      	movs	r3, #1
 8007f38:	9300      	str	r3, [sp, #0]
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	68f8      	ldr	r0, [r7, #12]
 8007f40:	f003 fbff 	bl	800b742 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007f44:	2300      	movs	r3, #0
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3710      	adds	r7, #16
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}

08007f4e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	b088      	sub	sp, #32
 8007f52:	af04      	add	r7, sp, #16
 8007f54:	60f8      	str	r0, [r7, #12]
 8007f56:	60b9      	str	r1, [r7, #8]
 8007f58:	4611      	mov	r1, r2
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	80fb      	strh	r3, [r7, #6]
 8007f60:	4613      	mov	r3, r2
 8007f62:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007f64:	7979      	ldrb	r1, [r7, #5]
 8007f66:	2300      	movs	r3, #0
 8007f68:	9303      	str	r3, [sp, #12]
 8007f6a:	88fb      	ldrh	r3, [r7, #6]
 8007f6c:	9302      	str	r3, [sp, #8]
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	9301      	str	r3, [sp, #4]
 8007f72:	2301      	movs	r3, #1
 8007f74:	9300      	str	r3, [sp, #0]
 8007f76:	2300      	movs	r3, #0
 8007f78:	2201      	movs	r2, #1
 8007f7a:	68f8      	ldr	r0, [r7, #12]
 8007f7c:	f003 fbe1 	bl	800b742 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007f80:	2300      	movs	r3, #0

}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}

08007f8a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007f8a:	b580      	push	{r7, lr}
 8007f8c:	b088      	sub	sp, #32
 8007f8e:	af04      	add	r7, sp, #16
 8007f90:	60f8      	str	r0, [r7, #12]
 8007f92:	60b9      	str	r1, [r7, #8]
 8007f94:	4611      	mov	r1, r2
 8007f96:	461a      	mov	r2, r3
 8007f98:	460b      	mov	r3, r1
 8007f9a:	80fb      	strh	r3, [r7, #6]
 8007f9c:	4613      	mov	r3, r2
 8007f9e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d001      	beq.n	8007fae <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007faa:	2300      	movs	r3, #0
 8007fac:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007fae:	7979      	ldrb	r1, [r7, #5]
 8007fb0:	7e3b      	ldrb	r3, [r7, #24]
 8007fb2:	9303      	str	r3, [sp, #12]
 8007fb4:	88fb      	ldrh	r3, [r7, #6]
 8007fb6:	9302      	str	r3, [sp, #8]
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	9301      	str	r3, [sp, #4]
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	9300      	str	r3, [sp, #0]
 8007fc0:	2302      	movs	r3, #2
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	68f8      	ldr	r0, [r7, #12]
 8007fc6:	f003 fbbc 	bl	800b742 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007fca:	2300      	movs	r3, #0
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3710      	adds	r7, #16
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b088      	sub	sp, #32
 8007fd8:	af04      	add	r7, sp, #16
 8007fda:	60f8      	str	r0, [r7, #12]
 8007fdc:	60b9      	str	r1, [r7, #8]
 8007fde:	4611      	mov	r1, r2
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	460b      	mov	r3, r1
 8007fe4:	80fb      	strh	r3, [r7, #6]
 8007fe6:	4613      	mov	r3, r2
 8007fe8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007fea:	7979      	ldrb	r1, [r7, #5]
 8007fec:	2300      	movs	r3, #0
 8007fee:	9303      	str	r3, [sp, #12]
 8007ff0:	88fb      	ldrh	r3, [r7, #6]
 8007ff2:	9302      	str	r3, [sp, #8]
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	9301      	str	r3, [sp, #4]
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	9300      	str	r3, [sp, #0]
 8007ffc:	2302      	movs	r3, #2
 8007ffe:	2201      	movs	r2, #1
 8008000:	68f8      	ldr	r0, [r7, #12]
 8008002:	f003 fb9e 	bl	800b742 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008006:	2300      	movs	r3, #0
}
 8008008:	4618      	mov	r0, r3
 800800a:	3710      	adds	r7, #16
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b086      	sub	sp, #24
 8008014:	af04      	add	r7, sp, #16
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	4608      	mov	r0, r1
 800801a:	4611      	mov	r1, r2
 800801c:	461a      	mov	r2, r3
 800801e:	4603      	mov	r3, r0
 8008020:	70fb      	strb	r3, [r7, #3]
 8008022:	460b      	mov	r3, r1
 8008024:	70bb      	strb	r3, [r7, #2]
 8008026:	4613      	mov	r3, r2
 8008028:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800802a:	7878      	ldrb	r0, [r7, #1]
 800802c:	78ba      	ldrb	r2, [r7, #2]
 800802e:	78f9      	ldrb	r1, [r7, #3]
 8008030:	8b3b      	ldrh	r3, [r7, #24]
 8008032:	9302      	str	r3, [sp, #8]
 8008034:	7d3b      	ldrb	r3, [r7, #20]
 8008036:	9301      	str	r3, [sp, #4]
 8008038:	7c3b      	ldrb	r3, [r7, #16]
 800803a:	9300      	str	r3, [sp, #0]
 800803c:	4603      	mov	r3, r0
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f003 fb31 	bl	800b6a6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008044:	2300      	movs	r3, #0
}
 8008046:	4618      	mov	r0, r3
 8008048:	3708      	adds	r7, #8
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}

0800804e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800804e:	b580      	push	{r7, lr}
 8008050:	b082      	sub	sp, #8
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
 8008056:	460b      	mov	r3, r1
 8008058:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800805a:	78fb      	ldrb	r3, [r7, #3]
 800805c:	4619      	mov	r1, r3
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f003 fb50 	bl	800b704 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008064:	2300      	movs	r3, #0
}
 8008066:	4618      	mov	r0, r3
 8008068:	3708      	adds	r7, #8
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}

0800806e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800806e:	b580      	push	{r7, lr}
 8008070:	b084      	sub	sp, #16
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
 8008076:	460b      	mov	r3, r1
 8008078:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 f836 	bl	80080ec <USBH_GetFreePipe>
 8008080:	4603      	mov	r3, r0
 8008082:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008084:	89fb      	ldrh	r3, [r7, #14]
 8008086:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800808a:	4293      	cmp	r3, r2
 800808c:	d00a      	beq.n	80080a4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800808e:	78fa      	ldrb	r2, [r7, #3]
 8008090:	89fb      	ldrh	r3, [r7, #14]
 8008092:	f003 030f 	and.w	r3, r3, #15
 8008096:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800809a:	6879      	ldr	r1, [r7, #4]
 800809c:	33e0      	adds	r3, #224	; 0xe0
 800809e:	009b      	lsls	r3, r3, #2
 80080a0:	440b      	add	r3, r1
 80080a2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80080a4:	89fb      	ldrh	r3, [r7, #14]
 80080a6:	b2db      	uxtb	r3, r3
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3710      	adds	r7, #16
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	460b      	mov	r3, r1
 80080ba:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80080bc:	78fb      	ldrb	r3, [r7, #3]
 80080be:	2b0f      	cmp	r3, #15
 80080c0:	d80d      	bhi.n	80080de <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80080c2:	78fb      	ldrb	r3, [r7, #3]
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	33e0      	adds	r3, #224	; 0xe0
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	4413      	add	r3, r2
 80080cc:	685a      	ldr	r2, [r3, #4]
 80080ce:	78fb      	ldrb	r3, [r7, #3]
 80080d0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80080d4:	6879      	ldr	r1, [r7, #4]
 80080d6:	33e0      	adds	r3, #224	; 0xe0
 80080d8:	009b      	lsls	r3, r3, #2
 80080da:	440b      	add	r3, r1
 80080dc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80080de:	2300      	movs	r3, #0
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	370c      	adds	r7, #12
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b085      	sub	sp, #20
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80080f4:	2300      	movs	r3, #0
 80080f6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80080f8:	2300      	movs	r3, #0
 80080fa:	73fb      	strb	r3, [r7, #15]
 80080fc:	e00f      	b.n	800811e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80080fe:	7bfb      	ldrb	r3, [r7, #15]
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	33e0      	adds	r3, #224	; 0xe0
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	4413      	add	r3, r2
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800810e:	2b00      	cmp	r3, #0
 8008110:	d102      	bne.n	8008118 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008112:	7bfb      	ldrb	r3, [r7, #15]
 8008114:	b29b      	uxth	r3, r3
 8008116:	e007      	b.n	8008128 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008118:	7bfb      	ldrb	r3, [r7, #15]
 800811a:	3301      	adds	r3, #1
 800811c:	73fb      	strb	r3, [r7, #15]
 800811e:	7bfb      	ldrb	r3, [r7, #15]
 8008120:	2b0f      	cmp	r3, #15
 8008122:	d9ec      	bls.n	80080fe <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008124:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008128:	4618      	mov	r0, r3
 800812a:	3714      	adds	r7, #20
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr

08008134 <__NVIC_SetPriority>:
{
 8008134:	b480      	push	{r7}
 8008136:	b083      	sub	sp, #12
 8008138:	af00      	add	r7, sp, #0
 800813a:	4603      	mov	r3, r0
 800813c:	6039      	str	r1, [r7, #0]
 800813e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008144:	2b00      	cmp	r3, #0
 8008146:	db0a      	blt.n	800815e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	b2da      	uxtb	r2, r3
 800814c:	490c      	ldr	r1, [pc, #48]	; (8008180 <__NVIC_SetPriority+0x4c>)
 800814e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008152:	0112      	lsls	r2, r2, #4
 8008154:	b2d2      	uxtb	r2, r2
 8008156:	440b      	add	r3, r1
 8008158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800815c:	e00a      	b.n	8008174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	b2da      	uxtb	r2, r3
 8008162:	4908      	ldr	r1, [pc, #32]	; (8008184 <__NVIC_SetPriority+0x50>)
 8008164:	79fb      	ldrb	r3, [r7, #7]
 8008166:	f003 030f 	and.w	r3, r3, #15
 800816a:	3b04      	subs	r3, #4
 800816c:	0112      	lsls	r2, r2, #4
 800816e:	b2d2      	uxtb	r2, r2
 8008170:	440b      	add	r3, r1
 8008172:	761a      	strb	r2, [r3, #24]
}
 8008174:	bf00      	nop
 8008176:	370c      	adds	r7, #12
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr
 8008180:	e000e100 	.word	0xe000e100
 8008184:	e000ed00 	.word	0xe000ed00

08008188 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008188:	b580      	push	{r7, lr}
 800818a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800818c:	2100      	movs	r1, #0
 800818e:	f06f 0004 	mvn.w	r0, #4
 8008192:	f7ff ffcf 	bl	8008134 <__NVIC_SetPriority>
#endif
}
 8008196:	bf00      	nop
 8008198:	bd80      	pop	{r7, pc}
	...

0800819c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800819c:	b480      	push	{r7}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081a2:	f3ef 8305 	mrs	r3, IPSR
 80081a6:	603b      	str	r3, [r7, #0]
  return(result);
 80081a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d003      	beq.n	80081b6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80081ae:	f06f 0305 	mvn.w	r3, #5
 80081b2:	607b      	str	r3, [r7, #4]
 80081b4:	e00c      	b.n	80081d0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80081b6:	4b0a      	ldr	r3, [pc, #40]	; (80081e0 <osKernelInitialize+0x44>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d105      	bne.n	80081ca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80081be:	4b08      	ldr	r3, [pc, #32]	; (80081e0 <osKernelInitialize+0x44>)
 80081c0:	2201      	movs	r2, #1
 80081c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80081c4:	2300      	movs	r3, #0
 80081c6:	607b      	str	r3, [r7, #4]
 80081c8:	e002      	b.n	80081d0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80081ca:	f04f 33ff 	mov.w	r3, #4294967295
 80081ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80081d0:	687b      	ldr	r3, [r7, #4]
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	370c      	adds	r7, #12
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr
 80081de:	bf00      	nop
 80081e0:	20000218 	.word	0x20000218

080081e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b082      	sub	sp, #8
 80081e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081ea:	f3ef 8305 	mrs	r3, IPSR
 80081ee:	603b      	str	r3, [r7, #0]
  return(result);
 80081f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d003      	beq.n	80081fe <osKernelStart+0x1a>
    stat = osErrorISR;
 80081f6:	f06f 0305 	mvn.w	r3, #5
 80081fa:	607b      	str	r3, [r7, #4]
 80081fc:	e010      	b.n	8008220 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80081fe:	4b0b      	ldr	r3, [pc, #44]	; (800822c <osKernelStart+0x48>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	2b01      	cmp	r3, #1
 8008204:	d109      	bne.n	800821a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008206:	f7ff ffbf 	bl	8008188 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800820a:	4b08      	ldr	r3, [pc, #32]	; (800822c <osKernelStart+0x48>)
 800820c:	2202      	movs	r2, #2
 800820e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008210:	f001 fade 	bl	80097d0 <vTaskStartScheduler>
      stat = osOK;
 8008214:	2300      	movs	r3, #0
 8008216:	607b      	str	r3, [r7, #4]
 8008218:	e002      	b.n	8008220 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800821a:	f04f 33ff 	mov.w	r3, #4294967295
 800821e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008220:	687b      	ldr	r3, [r7, #4]
}
 8008222:	4618      	mov	r0, r3
 8008224:	3708      	adds	r7, #8
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop
 800822c:	20000218 	.word	0x20000218

08008230 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008230:	b580      	push	{r7, lr}
 8008232:	b08e      	sub	sp, #56	; 0x38
 8008234:	af04      	add	r7, sp, #16
 8008236:	60f8      	str	r0, [r7, #12]
 8008238:	60b9      	str	r1, [r7, #8]
 800823a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800823c:	2300      	movs	r3, #0
 800823e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008240:	f3ef 8305 	mrs	r3, IPSR
 8008244:	617b      	str	r3, [r7, #20]
  return(result);
 8008246:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008248:	2b00      	cmp	r3, #0
 800824a:	d17e      	bne.n	800834a <osThreadNew+0x11a>
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d07b      	beq.n	800834a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008252:	2380      	movs	r3, #128	; 0x80
 8008254:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008256:	2318      	movs	r3, #24
 8008258:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800825a:	2300      	movs	r3, #0
 800825c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800825e:	f04f 33ff 	mov.w	r3, #4294967295
 8008262:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d045      	beq.n	80082f6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d002      	beq.n	8008278 <osThreadNew+0x48>
        name = attr->name;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	699b      	ldr	r3, [r3, #24]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d002      	beq.n	8008286 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	699b      	ldr	r3, [r3, #24]
 8008284:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d008      	beq.n	800829e <osThreadNew+0x6e>
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	2b38      	cmp	r3, #56	; 0x38
 8008290:	d805      	bhi.n	800829e <osThreadNew+0x6e>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	f003 0301 	and.w	r3, r3, #1
 800829a:	2b00      	cmp	r3, #0
 800829c:	d001      	beq.n	80082a2 <osThreadNew+0x72>
        return (NULL);
 800829e:	2300      	movs	r3, #0
 80082a0:	e054      	b.n	800834c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	695b      	ldr	r3, [r3, #20]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d003      	beq.n	80082b2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	695b      	ldr	r3, [r3, #20]
 80082ae:	089b      	lsrs	r3, r3, #2
 80082b0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	689b      	ldr	r3, [r3, #8]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d00e      	beq.n	80082d8 <osThreadNew+0xa8>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	2b5b      	cmp	r3, #91	; 0x5b
 80082c0:	d90a      	bls.n	80082d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d006      	beq.n	80082d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	695b      	ldr	r3, [r3, #20]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d002      	beq.n	80082d8 <osThreadNew+0xa8>
        mem = 1;
 80082d2:	2301      	movs	r3, #1
 80082d4:	61bb      	str	r3, [r7, #24]
 80082d6:	e010      	b.n	80082fa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d10c      	bne.n	80082fa <osThreadNew+0xca>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d108      	bne.n	80082fa <osThreadNew+0xca>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	691b      	ldr	r3, [r3, #16]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d104      	bne.n	80082fa <osThreadNew+0xca>
          mem = 0;
 80082f0:	2300      	movs	r3, #0
 80082f2:	61bb      	str	r3, [r7, #24]
 80082f4:	e001      	b.n	80082fa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80082f6:	2300      	movs	r3, #0
 80082f8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80082fa:	69bb      	ldr	r3, [r7, #24]
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d110      	bne.n	8008322 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008308:	9202      	str	r2, [sp, #8]
 800830a:	9301      	str	r3, [sp, #4]
 800830c:	69fb      	ldr	r3, [r7, #28]
 800830e:	9300      	str	r3, [sp, #0]
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	6a3a      	ldr	r2, [r7, #32]
 8008314:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008316:	68f8      	ldr	r0, [r7, #12]
 8008318:	f001 f8b8 	bl	800948c <xTaskCreateStatic>
 800831c:	4603      	mov	r3, r0
 800831e:	613b      	str	r3, [r7, #16]
 8008320:	e013      	b.n	800834a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008322:	69bb      	ldr	r3, [r7, #24]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d110      	bne.n	800834a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008328:	6a3b      	ldr	r3, [r7, #32]
 800832a:	b29a      	uxth	r2, r3
 800832c:	f107 0310 	add.w	r3, r7, #16
 8008330:	9301      	str	r3, [sp, #4]
 8008332:	69fb      	ldr	r3, [r7, #28]
 8008334:	9300      	str	r3, [sp, #0]
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800833a:	68f8      	ldr	r0, [r7, #12]
 800833c:	f001 f903 	bl	8009546 <xTaskCreate>
 8008340:	4603      	mov	r3, r0
 8008342:	2b01      	cmp	r3, #1
 8008344:	d001      	beq.n	800834a <osThreadNew+0x11a>
            hTask = NULL;
 8008346:	2300      	movs	r3, #0
 8008348:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800834a:	693b      	ldr	r3, [r7, #16]
}
 800834c:	4618      	mov	r0, r3
 800834e:	3728      	adds	r7, #40	; 0x28
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8008354:	b580      	push	{r7, lr}
 8008356:	b084      	sub	sp, #16
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f002 fb70 	bl	800aa42 <pvTimerGetTimerID>
 8008362:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d005      	beq.n	8008376 <TimerCallback+0x22>
    callb->func (callb->arg);
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	68fa      	ldr	r2, [r7, #12]
 8008370:	6852      	ldr	r2, [r2, #4]
 8008372:	4610      	mov	r0, r2
 8008374:	4798      	blx	r3
  }
}
 8008376:	bf00      	nop
 8008378:	3710      	adds	r7, #16
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
	...

08008380 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8008380:	b580      	push	{r7, lr}
 8008382:	b08c      	sub	sp, #48	; 0x30
 8008384:	af02      	add	r7, sp, #8
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	607a      	str	r2, [r7, #4]
 800838a:	603b      	str	r3, [r7, #0]
 800838c:	460b      	mov	r3, r1
 800838e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8008390:	2300      	movs	r3, #0
 8008392:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008394:	f3ef 8305 	mrs	r3, IPSR
 8008398:	613b      	str	r3, [r7, #16]
  return(result);
 800839a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800839c:	2b00      	cmp	r3, #0
 800839e:	d163      	bne.n	8008468 <osTimerNew+0xe8>
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d060      	beq.n	8008468 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80083a6:	2008      	movs	r0, #8
 80083a8:	f002 fdbe 	bl	800af28 <pvPortMalloc>
 80083ac:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d059      	beq.n	8008468 <osTimerNew+0xe8>
      callb->func = func;
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	68fa      	ldr	r2, [r7, #12]
 80083b8:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 80083c0:	7afb      	ldrb	r3, [r7, #11]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d102      	bne.n	80083cc <osTimerNew+0x4c>
        reload = pdFALSE;
 80083c6:	2300      	movs	r3, #0
 80083c8:	61fb      	str	r3, [r7, #28]
 80083ca:	e001      	b.n	80083d0 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 80083cc:	2301      	movs	r3, #1
 80083ce:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 80083d0:	f04f 33ff 	mov.w	r3, #4294967295
 80083d4:	61bb      	str	r3, [r7, #24]
      name = NULL;
 80083d6:	2300      	movs	r3, #0
 80083d8:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d01c      	beq.n	800841a <osTimerNew+0x9a>
        if (attr->name != NULL) {
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d002      	beq.n	80083ee <osTimerNew+0x6e>
          name = attr->name;
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d006      	beq.n	8008404 <osTimerNew+0x84>
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	68db      	ldr	r3, [r3, #12]
 80083fa:	2b2b      	cmp	r3, #43	; 0x2b
 80083fc:	d902      	bls.n	8008404 <osTimerNew+0x84>
          mem = 1;
 80083fe:	2301      	movs	r3, #1
 8008400:	61bb      	str	r3, [r7, #24]
 8008402:	e00c      	b.n	800841e <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d108      	bne.n	800841e <osTimerNew+0x9e>
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	68db      	ldr	r3, [r3, #12]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d104      	bne.n	800841e <osTimerNew+0x9e>
            mem = 0;
 8008414:	2300      	movs	r3, #0
 8008416:	61bb      	str	r3, [r7, #24]
 8008418:	e001      	b.n	800841e <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800841a:	2300      	movs	r3, #0
 800841c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800841e:	69bb      	ldr	r3, [r7, #24]
 8008420:	2b01      	cmp	r3, #1
 8008422:	d10c      	bne.n	800843e <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	9301      	str	r3, [sp, #4]
 800842a:	4b12      	ldr	r3, [pc, #72]	; (8008474 <osTimerNew+0xf4>)
 800842c:	9300      	str	r3, [sp, #0]
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	69fa      	ldr	r2, [r7, #28]
 8008432:	2101      	movs	r1, #1
 8008434:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008436:	f001 ff5c 	bl	800a2f2 <xTimerCreateStatic>
 800843a:	6238      	str	r0, [r7, #32]
 800843c:	e00b      	b.n	8008456 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800843e:	69bb      	ldr	r3, [r7, #24]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d108      	bne.n	8008456 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8008444:	4b0b      	ldr	r3, [pc, #44]	; (8008474 <osTimerNew+0xf4>)
 8008446:	9300      	str	r3, [sp, #0]
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	69fa      	ldr	r2, [r7, #28]
 800844c:	2101      	movs	r1, #1
 800844e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008450:	f001 ff2e 	bl	800a2b0 <xTimerCreate>
 8008454:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8008456:	6a3b      	ldr	r3, [r7, #32]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d105      	bne.n	8008468 <osTimerNew+0xe8>
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d002      	beq.n	8008468 <osTimerNew+0xe8>
        vPortFree (callb);
 8008462:	6978      	ldr	r0, [r7, #20]
 8008464:	f002 fe2c 	bl	800b0c0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8008468:	6a3b      	ldr	r3, [r7, #32]
}
 800846a:	4618      	mov	r0, r3
 800846c:	3728      	adds	r7, #40	; 0x28
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	08008355 	.word	0x08008355

08008478 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8008478:	b580      	push	{r7, lr}
 800847a:	b088      	sub	sp, #32
 800847c:	af02      	add	r7, sp, #8
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008486:	f3ef 8305 	mrs	r3, IPSR
 800848a:	60fb      	str	r3, [r7, #12]
  return(result);
 800848c:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800848e:	2b00      	cmp	r3, #0
 8008490:	d003      	beq.n	800849a <osTimerStart+0x22>
    stat = osErrorISR;
 8008492:	f06f 0305 	mvn.w	r3, #5
 8008496:	617b      	str	r3, [r7, #20]
 8008498:	e017      	b.n	80084ca <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d103      	bne.n	80084a8 <osTimerStart+0x30>
    stat = osErrorParameter;
 80084a0:	f06f 0303 	mvn.w	r3, #3
 80084a4:	617b      	str	r3, [r7, #20]
 80084a6:	e010      	b.n	80084ca <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 80084a8:	2300      	movs	r3, #0
 80084aa:	9300      	str	r3, [sp, #0]
 80084ac:	2300      	movs	r3, #0
 80084ae:	683a      	ldr	r2, [r7, #0]
 80084b0:	2104      	movs	r1, #4
 80084b2:	6938      	ldr	r0, [r7, #16]
 80084b4:	f001 ff96 	bl	800a3e4 <xTimerGenericCommand>
 80084b8:	4603      	mov	r3, r0
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d102      	bne.n	80084c4 <osTimerStart+0x4c>
      stat = osOK;
 80084be:	2300      	movs	r3, #0
 80084c0:	617b      	str	r3, [r7, #20]
 80084c2:	e002      	b.n	80084ca <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 80084c4:	f06f 0302 	mvn.w	r3, #2
 80084c8:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80084ca:	697b      	ldr	r3, [r7, #20]
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3718      	adds	r7, #24
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <osTimerIsRunning>:
  }

  return (stat);
}

uint32_t osTimerIsRunning (osTimerId_t timer_id) {
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b086      	sub	sp, #24
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084e0:	f3ef 8305 	mrs	r3, IPSR
 80084e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80084e6:	68fb      	ldr	r3, [r7, #12]
  uint32_t running;

  if (IS_IRQ() || (hTimer == NULL)) {
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d102      	bne.n	80084f2 <osTimerIsRunning+0x1e>
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d102      	bne.n	80084f8 <osTimerIsRunning+0x24>
    running = 0U;
 80084f2:	2300      	movs	r3, #0
 80084f4:	617b      	str	r3, [r7, #20]
 80084f6:	e004      	b.n	8008502 <osTimerIsRunning+0x2e>
  } else {
    running = (uint32_t)xTimerIsTimerActive (hTimer);
 80084f8:	6938      	ldr	r0, [r7, #16]
 80084fa:	f002 fa79 	bl	800a9f0 <xTimerIsTimerActive>
 80084fe:	4603      	mov	r3, r0
 8008500:	617b      	str	r3, [r7, #20]
  }

  return (running);
 8008502:	697b      	ldr	r3, [r7, #20]
}
 8008504:	4618      	mov	r0, r3
 8008506:	3718      	adds	r7, #24
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800850c:	b580      	push	{r7, lr}
 800850e:	b08a      	sub	sp, #40	; 0x28
 8008510:	af02      	add	r7, sp, #8
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	60b9      	str	r1, [r7, #8]
 8008516:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008518:	2300      	movs	r3, #0
 800851a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800851c:	f3ef 8305 	mrs	r3, IPSR
 8008520:	613b      	str	r3, [r7, #16]
  return(result);
 8008522:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008524:	2b00      	cmp	r3, #0
 8008526:	d15f      	bne.n	80085e8 <osMessageQueueNew+0xdc>
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d05c      	beq.n	80085e8 <osMessageQueueNew+0xdc>
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d059      	beq.n	80085e8 <osMessageQueueNew+0xdc>
    mem = -1;
 8008534:	f04f 33ff 	mov.w	r3, #4294967295
 8008538:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d029      	beq.n	8008594 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	689b      	ldr	r3, [r3, #8]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d012      	beq.n	800856e <osMessageQueueNew+0x62>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	68db      	ldr	r3, [r3, #12]
 800854c:	2b4f      	cmp	r3, #79	; 0x4f
 800854e:	d90e      	bls.n	800856e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008554:	2b00      	cmp	r3, #0
 8008556:	d00a      	beq.n	800856e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	695a      	ldr	r2, [r3, #20]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	68b9      	ldr	r1, [r7, #8]
 8008560:	fb01 f303 	mul.w	r3, r1, r3
 8008564:	429a      	cmp	r2, r3
 8008566:	d302      	bcc.n	800856e <osMessageQueueNew+0x62>
        mem = 1;
 8008568:	2301      	movs	r3, #1
 800856a:	61bb      	str	r3, [r7, #24]
 800856c:	e014      	b.n	8008598 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d110      	bne.n	8008598 <osMessageQueueNew+0x8c>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	68db      	ldr	r3, [r3, #12]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d10c      	bne.n	8008598 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008582:	2b00      	cmp	r3, #0
 8008584:	d108      	bne.n	8008598 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	695b      	ldr	r3, [r3, #20]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d104      	bne.n	8008598 <osMessageQueueNew+0x8c>
          mem = 0;
 800858e:	2300      	movs	r3, #0
 8008590:	61bb      	str	r3, [r7, #24]
 8008592:	e001      	b.n	8008598 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008594:	2300      	movs	r3, #0
 8008596:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008598:	69bb      	ldr	r3, [r7, #24]
 800859a:	2b01      	cmp	r3, #1
 800859c:	d10b      	bne.n	80085b6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	691a      	ldr	r2, [r3, #16]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	689b      	ldr	r3, [r3, #8]
 80085a6:	2100      	movs	r1, #0
 80085a8:	9100      	str	r1, [sp, #0]
 80085aa:	68b9      	ldr	r1, [r7, #8]
 80085ac:	68f8      	ldr	r0, [r7, #12]
 80085ae:	f000 fa2f 	bl	8008a10 <xQueueGenericCreateStatic>
 80085b2:	61f8      	str	r0, [r7, #28]
 80085b4:	e008      	b.n	80085c8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80085b6:	69bb      	ldr	r3, [r7, #24]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d105      	bne.n	80085c8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80085bc:	2200      	movs	r2, #0
 80085be:	68b9      	ldr	r1, [r7, #8]
 80085c0:	68f8      	ldr	r0, [r7, #12]
 80085c2:	f000 fa9d 	bl	8008b00 <xQueueGenericCreate>
 80085c6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80085c8:	69fb      	ldr	r3, [r7, #28]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d00c      	beq.n	80085e8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d003      	beq.n	80085dc <osMessageQueueNew+0xd0>
        name = attr->name;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	617b      	str	r3, [r7, #20]
 80085da:	e001      	b.n	80085e0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80085dc:	2300      	movs	r3, #0
 80085de:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80085e0:	6979      	ldr	r1, [r7, #20]
 80085e2:	69f8      	ldr	r0, [r7, #28]
 80085e4:	f000 fef4 	bl	80093d0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80085e8:	69fb      	ldr	r3, [r7, #28]
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3720      	adds	r7, #32
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}
	...

080085f4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b088      	sub	sp, #32
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	60f8      	str	r0, [r7, #12]
 80085fc:	60b9      	str	r1, [r7, #8]
 80085fe:	603b      	str	r3, [r7, #0]
 8008600:	4613      	mov	r3, r2
 8008602:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008608:	2300      	movs	r3, #0
 800860a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800860c:	f3ef 8305 	mrs	r3, IPSR
 8008610:	617b      	str	r3, [r7, #20]
  return(result);
 8008612:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008614:	2b00      	cmp	r3, #0
 8008616:	d028      	beq.n	800866a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008618:	69bb      	ldr	r3, [r7, #24]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d005      	beq.n	800862a <osMessageQueuePut+0x36>
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d002      	beq.n	800862a <osMessageQueuePut+0x36>
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d003      	beq.n	8008632 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800862a:	f06f 0303 	mvn.w	r3, #3
 800862e:	61fb      	str	r3, [r7, #28]
 8008630:	e038      	b.n	80086a4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8008632:	2300      	movs	r3, #0
 8008634:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008636:	f107 0210 	add.w	r2, r7, #16
 800863a:	2300      	movs	r3, #0
 800863c:	68b9      	ldr	r1, [r7, #8]
 800863e:	69b8      	ldr	r0, [r7, #24]
 8008640:	f000 fbba 	bl	8008db8 <xQueueGenericSendFromISR>
 8008644:	4603      	mov	r3, r0
 8008646:	2b01      	cmp	r3, #1
 8008648:	d003      	beq.n	8008652 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800864a:	f06f 0302 	mvn.w	r3, #2
 800864e:	61fb      	str	r3, [r7, #28]
 8008650:	e028      	b.n	80086a4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d025      	beq.n	80086a4 <osMessageQueuePut+0xb0>
 8008658:	4b15      	ldr	r3, [pc, #84]	; (80086b0 <osMessageQueuePut+0xbc>)
 800865a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800865e:	601a      	str	r2, [r3, #0]
 8008660:	f3bf 8f4f 	dsb	sy
 8008664:	f3bf 8f6f 	isb	sy
 8008668:	e01c      	b.n	80086a4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800866a:	69bb      	ldr	r3, [r7, #24]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d002      	beq.n	8008676 <osMessageQueuePut+0x82>
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d103      	bne.n	800867e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8008676:	f06f 0303 	mvn.w	r3, #3
 800867a:	61fb      	str	r3, [r7, #28]
 800867c:	e012      	b.n	80086a4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800867e:	2300      	movs	r3, #0
 8008680:	683a      	ldr	r2, [r7, #0]
 8008682:	68b9      	ldr	r1, [r7, #8]
 8008684:	69b8      	ldr	r0, [r7, #24]
 8008686:	f000 fa99 	bl	8008bbc <xQueueGenericSend>
 800868a:	4603      	mov	r3, r0
 800868c:	2b01      	cmp	r3, #1
 800868e:	d009      	beq.n	80086a4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d003      	beq.n	800869e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8008696:	f06f 0301 	mvn.w	r3, #1
 800869a:	61fb      	str	r3, [r7, #28]
 800869c:	e002      	b.n	80086a4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800869e:	f06f 0302 	mvn.w	r3, #2
 80086a2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80086a4:	69fb      	ldr	r3, [r7, #28]
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3720      	adds	r7, #32
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
 80086ae:	bf00      	nop
 80086b0:	e000ed04 	.word	0xe000ed04

080086b4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b088      	sub	sp, #32
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	60f8      	str	r0, [r7, #12]
 80086bc:	60b9      	str	r1, [r7, #8]
 80086be:	607a      	str	r2, [r7, #4]
 80086c0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80086c6:	2300      	movs	r3, #0
 80086c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086ca:	f3ef 8305 	mrs	r3, IPSR
 80086ce:	617b      	str	r3, [r7, #20]
  return(result);
 80086d0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d028      	beq.n	8008728 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80086d6:	69bb      	ldr	r3, [r7, #24]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d005      	beq.n	80086e8 <osMessageQueueGet+0x34>
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d002      	beq.n	80086e8 <osMessageQueueGet+0x34>
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d003      	beq.n	80086f0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80086e8:	f06f 0303 	mvn.w	r3, #3
 80086ec:	61fb      	str	r3, [r7, #28]
 80086ee:	e037      	b.n	8008760 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80086f0:	2300      	movs	r3, #0
 80086f2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80086f4:	f107 0310 	add.w	r3, r7, #16
 80086f8:	461a      	mov	r2, r3
 80086fa:	68b9      	ldr	r1, [r7, #8]
 80086fc:	69b8      	ldr	r0, [r7, #24]
 80086fe:	f000 fcd7 	bl	80090b0 <xQueueReceiveFromISR>
 8008702:	4603      	mov	r3, r0
 8008704:	2b01      	cmp	r3, #1
 8008706:	d003      	beq.n	8008710 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008708:	f06f 0302 	mvn.w	r3, #2
 800870c:	61fb      	str	r3, [r7, #28]
 800870e:	e027      	b.n	8008760 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d024      	beq.n	8008760 <osMessageQueueGet+0xac>
 8008716:	4b15      	ldr	r3, [pc, #84]	; (800876c <osMessageQueueGet+0xb8>)
 8008718:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800871c:	601a      	str	r2, [r3, #0]
 800871e:	f3bf 8f4f 	dsb	sy
 8008722:	f3bf 8f6f 	isb	sy
 8008726:	e01b      	b.n	8008760 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008728:	69bb      	ldr	r3, [r7, #24]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d002      	beq.n	8008734 <osMessageQueueGet+0x80>
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d103      	bne.n	800873c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008734:	f06f 0303 	mvn.w	r3, #3
 8008738:	61fb      	str	r3, [r7, #28]
 800873a:	e011      	b.n	8008760 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800873c:	683a      	ldr	r2, [r7, #0]
 800873e:	68b9      	ldr	r1, [r7, #8]
 8008740:	69b8      	ldr	r0, [r7, #24]
 8008742:	f000 fbd5 	bl	8008ef0 <xQueueReceive>
 8008746:	4603      	mov	r3, r0
 8008748:	2b01      	cmp	r3, #1
 800874a:	d009      	beq.n	8008760 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d003      	beq.n	800875a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8008752:	f06f 0301 	mvn.w	r3, #1
 8008756:	61fb      	str	r3, [r7, #28]
 8008758:	e002      	b.n	8008760 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800875a:	f06f 0302 	mvn.w	r3, #2
 800875e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008760:	69fb      	ldr	r3, [r7, #28]
}
 8008762:	4618      	mov	r0, r3
 8008764:	3720      	adds	r7, #32
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
 800876a:	bf00      	nop
 800876c:	e000ed04 	.word	0xe000ed04

08008770 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008770:	b480      	push	{r7}
 8008772:	b085      	sub	sp, #20
 8008774:	af00      	add	r7, sp, #0
 8008776:	60f8      	str	r0, [r7, #12]
 8008778:	60b9      	str	r1, [r7, #8]
 800877a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	4a07      	ldr	r2, [pc, #28]	; (800879c <vApplicationGetIdleTaskMemory+0x2c>)
 8008780:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	4a06      	ldr	r2, [pc, #24]	; (80087a0 <vApplicationGetIdleTaskMemory+0x30>)
 8008786:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2280      	movs	r2, #128	; 0x80
 800878c:	601a      	str	r2, [r3, #0]
}
 800878e:	bf00      	nop
 8008790:	3714      	adds	r7, #20
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr
 800879a:	bf00      	nop
 800879c:	2000021c 	.word	0x2000021c
 80087a0:	20000278 	.word	0x20000278

080087a4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80087a4:	b480      	push	{r7}
 80087a6:	b085      	sub	sp, #20
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	4a07      	ldr	r2, [pc, #28]	; (80087d0 <vApplicationGetTimerTaskMemory+0x2c>)
 80087b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	4a06      	ldr	r2, [pc, #24]	; (80087d4 <vApplicationGetTimerTaskMemory+0x30>)
 80087ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80087c2:	601a      	str	r2, [r3, #0]
}
 80087c4:	bf00      	nop
 80087c6:	3714      	adds	r7, #20
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr
 80087d0:	20000478 	.word	0x20000478
 80087d4:	200004d4 	.word	0x200004d4

080087d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f103 0208 	add.w	r2, r3, #8
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f04f 32ff 	mov.w	r2, #4294967295
 80087f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f103 0208 	add.w	r2, r3, #8
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f103 0208 	add.w	r2, r3, #8
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2200      	movs	r2, #0
 800880a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800880c:	bf00      	nop
 800880e:	370c      	adds	r7, #12
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr

08008818 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2200      	movs	r2, #0
 8008824:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008826:	bf00      	nop
 8008828:	370c      	adds	r7, #12
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr

08008832 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008832:	b480      	push	{r7}
 8008834:	b085      	sub	sp, #20
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
 800883a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	68fa      	ldr	r2, [r7, #12]
 8008846:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	689a      	ldr	r2, [r3, #8]
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	689b      	ldr	r3, [r3, #8]
 8008854:	683a      	ldr	r2, [r7, #0]
 8008856:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	683a      	ldr	r2, [r7, #0]
 800885c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	1c5a      	adds	r2, r3, #1
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	601a      	str	r2, [r3, #0]
}
 800886e:	bf00      	nop
 8008870:	3714      	adds	r7, #20
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr

0800887a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800887a:	b480      	push	{r7}
 800887c:	b085      	sub	sp, #20
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
 8008882:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008890:	d103      	bne.n	800889a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	691b      	ldr	r3, [r3, #16]
 8008896:	60fb      	str	r3, [r7, #12]
 8008898:	e00c      	b.n	80088b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	3308      	adds	r3, #8
 800889e:	60fb      	str	r3, [r7, #12]
 80088a0:	e002      	b.n	80088a8 <vListInsert+0x2e>
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	60fb      	str	r3, [r7, #12]
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	68ba      	ldr	r2, [r7, #8]
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d2f6      	bcs.n	80088a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	685a      	ldr	r2, [r3, #4]
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	683a      	ldr	r2, [r7, #0]
 80088c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	68fa      	ldr	r2, [r7, #12]
 80088c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	683a      	ldr	r2, [r7, #0]
 80088ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	1c5a      	adds	r2, r3, #1
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	601a      	str	r2, [r3, #0]
}
 80088e0:	bf00      	nop
 80088e2:	3714      	adds	r7, #20
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr

080088ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80088ec:	b480      	push	{r7}
 80088ee:	b085      	sub	sp, #20
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	691b      	ldr	r3, [r3, #16]
 80088f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	6892      	ldr	r2, [r2, #8]
 8008902:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	689b      	ldr	r3, [r3, #8]
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	6852      	ldr	r2, [r2, #4]
 800890c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	429a      	cmp	r2, r3
 8008916:	d103      	bne.n	8008920 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	689a      	ldr	r2, [r3, #8]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	1e5a      	subs	r2, r3, #1
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
}
 8008934:	4618      	mov	r0, r3
 8008936:	3714      	adds	r7, #20
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr

08008940 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d10a      	bne.n	800896a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008958:	f383 8811 	msr	BASEPRI, r3
 800895c:	f3bf 8f6f 	isb	sy
 8008960:	f3bf 8f4f 	dsb	sy
 8008964:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008966:	bf00      	nop
 8008968:	e7fe      	b.n	8008968 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800896a:	f002 f9bb 	bl	800ace4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008976:	68f9      	ldr	r1, [r7, #12]
 8008978:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800897a:	fb01 f303 	mul.w	r3, r1, r3
 800897e:	441a      	add	r2, r3
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2200      	movs	r2, #0
 8008988:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681a      	ldr	r2, [r3, #0]
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681a      	ldr	r2, [r3, #0]
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800899a:	3b01      	subs	r3, #1
 800899c:	68f9      	ldr	r1, [r7, #12]
 800899e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80089a0:	fb01 f303 	mul.w	r3, r1, r3
 80089a4:	441a      	add	r2, r3
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	22ff      	movs	r2, #255	; 0xff
 80089ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	22ff      	movs	r2, #255	; 0xff
 80089b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d114      	bne.n	80089ea <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	691b      	ldr	r3, [r3, #16]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d01a      	beq.n	80089fe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	3310      	adds	r3, #16
 80089cc:	4618      	mov	r0, r3
 80089ce:	f001 f989 	bl	8009ce4 <xTaskRemoveFromEventList>
 80089d2:	4603      	mov	r3, r0
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d012      	beq.n	80089fe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80089d8:	4b0c      	ldr	r3, [pc, #48]	; (8008a0c <xQueueGenericReset+0xcc>)
 80089da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089de:	601a      	str	r2, [r3, #0]
 80089e0:	f3bf 8f4f 	dsb	sy
 80089e4:	f3bf 8f6f 	isb	sy
 80089e8:	e009      	b.n	80089fe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	3310      	adds	r3, #16
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7ff fef2 	bl	80087d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	3324      	adds	r3, #36	; 0x24
 80089f8:	4618      	mov	r0, r3
 80089fa:	f7ff feed 	bl	80087d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80089fe:	f002 f9a1 	bl	800ad44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008a02:	2301      	movs	r3, #1
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3710      	adds	r7, #16
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}
 8008a0c:	e000ed04 	.word	0xe000ed04

08008a10 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b08e      	sub	sp, #56	; 0x38
 8008a14:	af02      	add	r7, sp, #8
 8008a16:	60f8      	str	r0, [r7, #12]
 8008a18:	60b9      	str	r1, [r7, #8]
 8008a1a:	607a      	str	r2, [r7, #4]
 8008a1c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d10a      	bne.n	8008a3a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a28:	f383 8811 	msr	BASEPRI, r3
 8008a2c:	f3bf 8f6f 	isb	sy
 8008a30:	f3bf 8f4f 	dsb	sy
 8008a34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008a36:	bf00      	nop
 8008a38:	e7fe      	b.n	8008a38 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d10a      	bne.n	8008a56 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a44:	f383 8811 	msr	BASEPRI, r3
 8008a48:	f3bf 8f6f 	isb	sy
 8008a4c:	f3bf 8f4f 	dsb	sy
 8008a50:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008a52:	bf00      	nop
 8008a54:	e7fe      	b.n	8008a54 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d002      	beq.n	8008a62 <xQueueGenericCreateStatic+0x52>
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d001      	beq.n	8008a66 <xQueueGenericCreateStatic+0x56>
 8008a62:	2301      	movs	r3, #1
 8008a64:	e000      	b.n	8008a68 <xQueueGenericCreateStatic+0x58>
 8008a66:	2300      	movs	r3, #0
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d10a      	bne.n	8008a82 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a70:	f383 8811 	msr	BASEPRI, r3
 8008a74:	f3bf 8f6f 	isb	sy
 8008a78:	f3bf 8f4f 	dsb	sy
 8008a7c:	623b      	str	r3, [r7, #32]
}
 8008a7e:	bf00      	nop
 8008a80:	e7fe      	b.n	8008a80 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d102      	bne.n	8008a8e <xQueueGenericCreateStatic+0x7e>
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d101      	bne.n	8008a92 <xQueueGenericCreateStatic+0x82>
 8008a8e:	2301      	movs	r3, #1
 8008a90:	e000      	b.n	8008a94 <xQueueGenericCreateStatic+0x84>
 8008a92:	2300      	movs	r3, #0
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d10a      	bne.n	8008aae <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a9c:	f383 8811 	msr	BASEPRI, r3
 8008aa0:	f3bf 8f6f 	isb	sy
 8008aa4:	f3bf 8f4f 	dsb	sy
 8008aa8:	61fb      	str	r3, [r7, #28]
}
 8008aaa:	bf00      	nop
 8008aac:	e7fe      	b.n	8008aac <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008aae:	2350      	movs	r3, #80	; 0x50
 8008ab0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	2b50      	cmp	r3, #80	; 0x50
 8008ab6:	d00a      	beq.n	8008ace <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008abc:	f383 8811 	msr	BASEPRI, r3
 8008ac0:	f3bf 8f6f 	isb	sy
 8008ac4:	f3bf 8f4f 	dsb	sy
 8008ac8:	61bb      	str	r3, [r7, #24]
}
 8008aca:	bf00      	nop
 8008acc:	e7fe      	b.n	8008acc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008ace:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d00d      	beq.n	8008af6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008adc:	2201      	movs	r2, #1
 8008ade:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008ae2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae8:	9300      	str	r3, [sp, #0]
 8008aea:	4613      	mov	r3, r2
 8008aec:	687a      	ldr	r2, [r7, #4]
 8008aee:	68b9      	ldr	r1, [r7, #8]
 8008af0:	68f8      	ldr	r0, [r7, #12]
 8008af2:	f000 f83f 	bl	8008b74 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3730      	adds	r7, #48	; 0x30
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b08a      	sub	sp, #40	; 0x28
 8008b04:	af02      	add	r7, sp, #8
 8008b06:	60f8      	str	r0, [r7, #12]
 8008b08:	60b9      	str	r1, [r7, #8]
 8008b0a:	4613      	mov	r3, r2
 8008b0c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d10a      	bne.n	8008b2a <xQueueGenericCreate+0x2a>
	__asm volatile
 8008b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b18:	f383 8811 	msr	BASEPRI, r3
 8008b1c:	f3bf 8f6f 	isb	sy
 8008b20:	f3bf 8f4f 	dsb	sy
 8008b24:	613b      	str	r3, [r7, #16]
}
 8008b26:	bf00      	nop
 8008b28:	e7fe      	b.n	8008b28 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	68ba      	ldr	r2, [r7, #8]
 8008b2e:	fb02 f303 	mul.w	r3, r2, r3
 8008b32:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008b34:	69fb      	ldr	r3, [r7, #28]
 8008b36:	3350      	adds	r3, #80	; 0x50
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f002 f9f5 	bl	800af28 <pvPortMalloc>
 8008b3e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008b40:	69bb      	ldr	r3, [r7, #24]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d011      	beq.n	8008b6a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008b46:	69bb      	ldr	r3, [r7, #24]
 8008b48:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	3350      	adds	r3, #80	; 0x50
 8008b4e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008b50:	69bb      	ldr	r3, [r7, #24]
 8008b52:	2200      	movs	r2, #0
 8008b54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008b58:	79fa      	ldrb	r2, [r7, #7]
 8008b5a:	69bb      	ldr	r3, [r7, #24]
 8008b5c:	9300      	str	r3, [sp, #0]
 8008b5e:	4613      	mov	r3, r2
 8008b60:	697a      	ldr	r2, [r7, #20]
 8008b62:	68b9      	ldr	r1, [r7, #8]
 8008b64:	68f8      	ldr	r0, [r7, #12]
 8008b66:	f000 f805 	bl	8008b74 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008b6a:	69bb      	ldr	r3, [r7, #24]
	}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3720      	adds	r7, #32
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	60b9      	str	r1, [r7, #8]
 8008b7e:	607a      	str	r2, [r7, #4]
 8008b80:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d103      	bne.n	8008b90 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008b88:	69bb      	ldr	r3, [r7, #24]
 8008b8a:	69ba      	ldr	r2, [r7, #24]
 8008b8c:	601a      	str	r2, [r3, #0]
 8008b8e:	e002      	b.n	8008b96 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008b90:	69bb      	ldr	r3, [r7, #24]
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008b96:	69bb      	ldr	r3, [r7, #24]
 8008b98:	68fa      	ldr	r2, [r7, #12]
 8008b9a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008b9c:	69bb      	ldr	r3, [r7, #24]
 8008b9e:	68ba      	ldr	r2, [r7, #8]
 8008ba0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008ba2:	2101      	movs	r1, #1
 8008ba4:	69b8      	ldr	r0, [r7, #24]
 8008ba6:	f7ff fecb 	bl	8008940 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008baa:	69bb      	ldr	r3, [r7, #24]
 8008bac:	78fa      	ldrb	r2, [r7, #3]
 8008bae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008bb2:	bf00      	nop
 8008bb4:	3710      	adds	r7, #16
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
	...

08008bbc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b08e      	sub	sp, #56	; 0x38
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	60b9      	str	r1, [r7, #8]
 8008bc6:	607a      	str	r2, [r7, #4]
 8008bc8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d10a      	bne.n	8008bee <xQueueGenericSend+0x32>
	__asm volatile
 8008bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bdc:	f383 8811 	msr	BASEPRI, r3
 8008be0:	f3bf 8f6f 	isb	sy
 8008be4:	f3bf 8f4f 	dsb	sy
 8008be8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008bea:	bf00      	nop
 8008bec:	e7fe      	b.n	8008bec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d103      	bne.n	8008bfc <xQueueGenericSend+0x40>
 8008bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d101      	bne.n	8008c00 <xQueueGenericSend+0x44>
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	e000      	b.n	8008c02 <xQueueGenericSend+0x46>
 8008c00:	2300      	movs	r3, #0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d10a      	bne.n	8008c1c <xQueueGenericSend+0x60>
	__asm volatile
 8008c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c0a:	f383 8811 	msr	BASEPRI, r3
 8008c0e:	f3bf 8f6f 	isb	sy
 8008c12:	f3bf 8f4f 	dsb	sy
 8008c16:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008c18:	bf00      	nop
 8008c1a:	e7fe      	b.n	8008c1a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	2b02      	cmp	r3, #2
 8008c20:	d103      	bne.n	8008c2a <xQueueGenericSend+0x6e>
 8008c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d101      	bne.n	8008c2e <xQueueGenericSend+0x72>
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e000      	b.n	8008c30 <xQueueGenericSend+0x74>
 8008c2e:	2300      	movs	r3, #0
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d10a      	bne.n	8008c4a <xQueueGenericSend+0x8e>
	__asm volatile
 8008c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c38:	f383 8811 	msr	BASEPRI, r3
 8008c3c:	f3bf 8f6f 	isb	sy
 8008c40:	f3bf 8f4f 	dsb	sy
 8008c44:	623b      	str	r3, [r7, #32]
}
 8008c46:	bf00      	nop
 8008c48:	e7fe      	b.n	8008c48 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c4a:	f001 fa09 	bl	800a060 <xTaskGetSchedulerState>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d102      	bne.n	8008c5a <xQueueGenericSend+0x9e>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d101      	bne.n	8008c5e <xQueueGenericSend+0xa2>
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	e000      	b.n	8008c60 <xQueueGenericSend+0xa4>
 8008c5e:	2300      	movs	r3, #0
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d10a      	bne.n	8008c7a <xQueueGenericSend+0xbe>
	__asm volatile
 8008c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c68:	f383 8811 	msr	BASEPRI, r3
 8008c6c:	f3bf 8f6f 	isb	sy
 8008c70:	f3bf 8f4f 	dsb	sy
 8008c74:	61fb      	str	r3, [r7, #28]
}
 8008c76:	bf00      	nop
 8008c78:	e7fe      	b.n	8008c78 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008c7a:	f002 f833 	bl	800ace4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d302      	bcc.n	8008c90 <xQueueGenericSend+0xd4>
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	2b02      	cmp	r3, #2
 8008c8e:	d129      	bne.n	8008ce4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c90:	683a      	ldr	r2, [r7, #0]
 8008c92:	68b9      	ldr	r1, [r7, #8]
 8008c94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c96:	f000 fa8b 	bl	80091b0 <prvCopyDataToQueue>
 8008c9a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d010      	beq.n	8008cc6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca6:	3324      	adds	r3, #36	; 0x24
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f001 f81b 	bl	8009ce4 <xTaskRemoveFromEventList>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d013      	beq.n	8008cdc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008cb4:	4b3f      	ldr	r3, [pc, #252]	; (8008db4 <xQueueGenericSend+0x1f8>)
 8008cb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cba:	601a      	str	r2, [r3, #0]
 8008cbc:	f3bf 8f4f 	dsb	sy
 8008cc0:	f3bf 8f6f 	isb	sy
 8008cc4:	e00a      	b.n	8008cdc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d007      	beq.n	8008cdc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008ccc:	4b39      	ldr	r3, [pc, #228]	; (8008db4 <xQueueGenericSend+0x1f8>)
 8008cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cd2:	601a      	str	r2, [r3, #0]
 8008cd4:	f3bf 8f4f 	dsb	sy
 8008cd8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008cdc:	f002 f832 	bl	800ad44 <vPortExitCritical>
				return pdPASS;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	e063      	b.n	8008dac <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d103      	bne.n	8008cf2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008cea:	f002 f82b 	bl	800ad44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	e05c      	b.n	8008dac <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d106      	bne.n	8008d06 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008cf8:	f107 0314 	add.w	r3, r7, #20
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f001 f855 	bl	8009dac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d02:	2301      	movs	r3, #1
 8008d04:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d06:	f002 f81d 	bl	800ad44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d0a:	f000 fdc7 	bl	800989c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d0e:	f001 ffe9 	bl	800ace4 <vPortEnterCritical>
 8008d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d18:	b25b      	sxtb	r3, r3
 8008d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d1e:	d103      	bne.n	8008d28 <xQueueGenericSend+0x16c>
 8008d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d22:	2200      	movs	r2, #0
 8008d24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d2e:	b25b      	sxtb	r3, r3
 8008d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d34:	d103      	bne.n	8008d3e <xQueueGenericSend+0x182>
 8008d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d38:	2200      	movs	r2, #0
 8008d3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d3e:	f002 f801 	bl	800ad44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d42:	1d3a      	adds	r2, r7, #4
 8008d44:	f107 0314 	add.w	r3, r7, #20
 8008d48:	4611      	mov	r1, r2
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f001 f844 	bl	8009dd8 <xTaskCheckForTimeOut>
 8008d50:	4603      	mov	r3, r0
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d124      	bne.n	8008da0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008d56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d58:	f000 fb22 	bl	80093a0 <prvIsQueueFull>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d018      	beq.n	8008d94 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d64:	3310      	adds	r3, #16
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	4611      	mov	r1, r2
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f000 ff6a 	bl	8009c44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008d70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d72:	f000 faad 	bl	80092d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008d76:	f000 fd9f 	bl	80098b8 <xTaskResumeAll>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	f47f af7c 	bne.w	8008c7a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008d82:	4b0c      	ldr	r3, [pc, #48]	; (8008db4 <xQueueGenericSend+0x1f8>)
 8008d84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d88:	601a      	str	r2, [r3, #0]
 8008d8a:	f3bf 8f4f 	dsb	sy
 8008d8e:	f3bf 8f6f 	isb	sy
 8008d92:	e772      	b.n	8008c7a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008d94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d96:	f000 fa9b 	bl	80092d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d9a:	f000 fd8d 	bl	80098b8 <xTaskResumeAll>
 8008d9e:	e76c      	b.n	8008c7a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008da0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008da2:	f000 fa95 	bl	80092d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008da6:	f000 fd87 	bl	80098b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008daa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3738      	adds	r7, #56	; 0x38
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}
 8008db4:	e000ed04 	.word	0xe000ed04

08008db8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b090      	sub	sp, #64	; 0x40
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	60f8      	str	r0, [r7, #12]
 8008dc0:	60b9      	str	r1, [r7, #8]
 8008dc2:	607a      	str	r2, [r7, #4]
 8008dc4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d10a      	bne.n	8008de6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd4:	f383 8811 	msr	BASEPRI, r3
 8008dd8:	f3bf 8f6f 	isb	sy
 8008ddc:	f3bf 8f4f 	dsb	sy
 8008de0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008de2:	bf00      	nop
 8008de4:	e7fe      	b.n	8008de4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d103      	bne.n	8008df4 <xQueueGenericSendFromISR+0x3c>
 8008dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d101      	bne.n	8008df8 <xQueueGenericSendFromISR+0x40>
 8008df4:	2301      	movs	r3, #1
 8008df6:	e000      	b.n	8008dfa <xQueueGenericSendFromISR+0x42>
 8008df8:	2300      	movs	r3, #0
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d10a      	bne.n	8008e14 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e02:	f383 8811 	msr	BASEPRI, r3
 8008e06:	f3bf 8f6f 	isb	sy
 8008e0a:	f3bf 8f4f 	dsb	sy
 8008e0e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008e10:	bf00      	nop
 8008e12:	e7fe      	b.n	8008e12 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	2b02      	cmp	r3, #2
 8008e18:	d103      	bne.n	8008e22 <xQueueGenericSendFromISR+0x6a>
 8008e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d101      	bne.n	8008e26 <xQueueGenericSendFromISR+0x6e>
 8008e22:	2301      	movs	r3, #1
 8008e24:	e000      	b.n	8008e28 <xQueueGenericSendFromISR+0x70>
 8008e26:	2300      	movs	r3, #0
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d10a      	bne.n	8008e42 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e30:	f383 8811 	msr	BASEPRI, r3
 8008e34:	f3bf 8f6f 	isb	sy
 8008e38:	f3bf 8f4f 	dsb	sy
 8008e3c:	623b      	str	r3, [r7, #32]
}
 8008e3e:	bf00      	nop
 8008e40:	e7fe      	b.n	8008e40 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008e42:	f002 f831 	bl	800aea8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008e46:	f3ef 8211 	mrs	r2, BASEPRI
 8008e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e4e:	f383 8811 	msr	BASEPRI, r3
 8008e52:	f3bf 8f6f 	isb	sy
 8008e56:	f3bf 8f4f 	dsb	sy
 8008e5a:	61fa      	str	r2, [r7, #28]
 8008e5c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008e5e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008e60:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d302      	bcc.n	8008e74 <xQueueGenericSendFromISR+0xbc>
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	2b02      	cmp	r3, #2
 8008e72:	d12f      	bne.n	8008ed4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e82:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008e84:	683a      	ldr	r2, [r7, #0]
 8008e86:	68b9      	ldr	r1, [r7, #8]
 8008e88:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008e8a:	f000 f991 	bl	80091b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008e8e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e96:	d112      	bne.n	8008ebe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d016      	beq.n	8008ece <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea2:	3324      	adds	r3, #36	; 0x24
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f000 ff1d 	bl	8009ce4 <xTaskRemoveFromEventList>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d00e      	beq.n	8008ece <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d00b      	beq.n	8008ece <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2201      	movs	r2, #1
 8008eba:	601a      	str	r2, [r3, #0]
 8008ebc:	e007      	b.n	8008ece <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008ebe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	b2db      	uxtb	r3, r3
 8008ec6:	b25a      	sxtb	r2, r3
 8008ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008ed2:	e001      	b.n	8008ed8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eda:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008ee2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3740      	adds	r7, #64	; 0x40
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
	...

08008ef0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b08c      	sub	sp, #48	; 0x30
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	60f8      	str	r0, [r7, #12]
 8008ef8:	60b9      	str	r1, [r7, #8]
 8008efa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008efc:	2300      	movs	r3, #0
 8008efe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d10a      	bne.n	8008f20 <xQueueReceive+0x30>
	__asm volatile
 8008f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f0e:	f383 8811 	msr	BASEPRI, r3
 8008f12:	f3bf 8f6f 	isb	sy
 8008f16:	f3bf 8f4f 	dsb	sy
 8008f1a:	623b      	str	r3, [r7, #32]
}
 8008f1c:	bf00      	nop
 8008f1e:	e7fe      	b.n	8008f1e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d103      	bne.n	8008f2e <xQueueReceive+0x3e>
 8008f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d101      	bne.n	8008f32 <xQueueReceive+0x42>
 8008f2e:	2301      	movs	r3, #1
 8008f30:	e000      	b.n	8008f34 <xQueueReceive+0x44>
 8008f32:	2300      	movs	r3, #0
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d10a      	bne.n	8008f4e <xQueueReceive+0x5e>
	__asm volatile
 8008f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f3c:	f383 8811 	msr	BASEPRI, r3
 8008f40:	f3bf 8f6f 	isb	sy
 8008f44:	f3bf 8f4f 	dsb	sy
 8008f48:	61fb      	str	r3, [r7, #28]
}
 8008f4a:	bf00      	nop
 8008f4c:	e7fe      	b.n	8008f4c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f4e:	f001 f887 	bl	800a060 <xTaskGetSchedulerState>
 8008f52:	4603      	mov	r3, r0
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d102      	bne.n	8008f5e <xQueueReceive+0x6e>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d101      	bne.n	8008f62 <xQueueReceive+0x72>
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e000      	b.n	8008f64 <xQueueReceive+0x74>
 8008f62:	2300      	movs	r3, #0
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d10a      	bne.n	8008f7e <xQueueReceive+0x8e>
	__asm volatile
 8008f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6c:	f383 8811 	msr	BASEPRI, r3
 8008f70:	f3bf 8f6f 	isb	sy
 8008f74:	f3bf 8f4f 	dsb	sy
 8008f78:	61bb      	str	r3, [r7, #24]
}
 8008f7a:	bf00      	nop
 8008f7c:	e7fe      	b.n	8008f7c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f7e:	f001 feb1 	bl	800ace4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f86:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d01f      	beq.n	8008fce <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008f8e:	68b9      	ldr	r1, [r7, #8]
 8008f90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f92:	f000 f977 	bl	8009284 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f98:	1e5a      	subs	r2, r3, #1
 8008f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f9c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa0:	691b      	ldr	r3, [r3, #16]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d00f      	beq.n	8008fc6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa8:	3310      	adds	r3, #16
 8008faa:	4618      	mov	r0, r3
 8008fac:	f000 fe9a 	bl	8009ce4 <xTaskRemoveFromEventList>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d007      	beq.n	8008fc6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008fb6:	4b3d      	ldr	r3, [pc, #244]	; (80090ac <xQueueReceive+0x1bc>)
 8008fb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fbc:	601a      	str	r2, [r3, #0]
 8008fbe:	f3bf 8f4f 	dsb	sy
 8008fc2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008fc6:	f001 febd 	bl	800ad44 <vPortExitCritical>
				return pdPASS;
 8008fca:	2301      	movs	r3, #1
 8008fcc:	e069      	b.n	80090a2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d103      	bne.n	8008fdc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008fd4:	f001 feb6 	bl	800ad44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	e062      	b.n	80090a2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d106      	bne.n	8008ff0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008fe2:	f107 0310 	add.w	r3, r7, #16
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f000 fee0 	bl	8009dac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008fec:	2301      	movs	r3, #1
 8008fee:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008ff0:	f001 fea8 	bl	800ad44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008ff4:	f000 fc52 	bl	800989c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ff8:	f001 fe74 	bl	800ace4 <vPortEnterCritical>
 8008ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ffe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009002:	b25b      	sxtb	r3, r3
 8009004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009008:	d103      	bne.n	8009012 <xQueueReceive+0x122>
 800900a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800900c:	2200      	movs	r2, #0
 800900e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009014:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009018:	b25b      	sxtb	r3, r3
 800901a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800901e:	d103      	bne.n	8009028 <xQueueReceive+0x138>
 8009020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009022:	2200      	movs	r2, #0
 8009024:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009028:	f001 fe8c 	bl	800ad44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800902c:	1d3a      	adds	r2, r7, #4
 800902e:	f107 0310 	add.w	r3, r7, #16
 8009032:	4611      	mov	r1, r2
 8009034:	4618      	mov	r0, r3
 8009036:	f000 fecf 	bl	8009dd8 <xTaskCheckForTimeOut>
 800903a:	4603      	mov	r3, r0
 800903c:	2b00      	cmp	r3, #0
 800903e:	d123      	bne.n	8009088 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009040:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009042:	f000 f997 	bl	8009374 <prvIsQueueEmpty>
 8009046:	4603      	mov	r3, r0
 8009048:	2b00      	cmp	r3, #0
 800904a:	d017      	beq.n	800907c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800904c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800904e:	3324      	adds	r3, #36	; 0x24
 8009050:	687a      	ldr	r2, [r7, #4]
 8009052:	4611      	mov	r1, r2
 8009054:	4618      	mov	r0, r3
 8009056:	f000 fdf5 	bl	8009c44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800905a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800905c:	f000 f938 	bl	80092d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009060:	f000 fc2a 	bl	80098b8 <xTaskResumeAll>
 8009064:	4603      	mov	r3, r0
 8009066:	2b00      	cmp	r3, #0
 8009068:	d189      	bne.n	8008f7e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800906a:	4b10      	ldr	r3, [pc, #64]	; (80090ac <xQueueReceive+0x1bc>)
 800906c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009070:	601a      	str	r2, [r3, #0]
 8009072:	f3bf 8f4f 	dsb	sy
 8009076:	f3bf 8f6f 	isb	sy
 800907a:	e780      	b.n	8008f7e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800907c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800907e:	f000 f927 	bl	80092d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009082:	f000 fc19 	bl	80098b8 <xTaskResumeAll>
 8009086:	e77a      	b.n	8008f7e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009088:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800908a:	f000 f921 	bl	80092d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800908e:	f000 fc13 	bl	80098b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009092:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009094:	f000 f96e 	bl	8009374 <prvIsQueueEmpty>
 8009098:	4603      	mov	r3, r0
 800909a:	2b00      	cmp	r3, #0
 800909c:	f43f af6f 	beq.w	8008f7e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80090a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3730      	adds	r7, #48	; 0x30
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
 80090aa:	bf00      	nop
 80090ac:	e000ed04 	.word	0xe000ed04

080090b0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b08e      	sub	sp, #56	; 0x38
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	60b9      	str	r1, [r7, #8]
 80090ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80090c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d10a      	bne.n	80090dc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80090c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ca:	f383 8811 	msr	BASEPRI, r3
 80090ce:	f3bf 8f6f 	isb	sy
 80090d2:	f3bf 8f4f 	dsb	sy
 80090d6:	623b      	str	r3, [r7, #32]
}
 80090d8:	bf00      	nop
 80090da:	e7fe      	b.n	80090da <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d103      	bne.n	80090ea <xQueueReceiveFromISR+0x3a>
 80090e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d101      	bne.n	80090ee <xQueueReceiveFromISR+0x3e>
 80090ea:	2301      	movs	r3, #1
 80090ec:	e000      	b.n	80090f0 <xQueueReceiveFromISR+0x40>
 80090ee:	2300      	movs	r3, #0
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d10a      	bne.n	800910a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80090f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f8:	f383 8811 	msr	BASEPRI, r3
 80090fc:	f3bf 8f6f 	isb	sy
 8009100:	f3bf 8f4f 	dsb	sy
 8009104:	61fb      	str	r3, [r7, #28]
}
 8009106:	bf00      	nop
 8009108:	e7fe      	b.n	8009108 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800910a:	f001 fecd 	bl	800aea8 <vPortValidateInterruptPriority>
	__asm volatile
 800910e:	f3ef 8211 	mrs	r2, BASEPRI
 8009112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009116:	f383 8811 	msr	BASEPRI, r3
 800911a:	f3bf 8f6f 	isb	sy
 800911e:	f3bf 8f4f 	dsb	sy
 8009122:	61ba      	str	r2, [r7, #24]
 8009124:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009126:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009128:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800912a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800912c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800912e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009132:	2b00      	cmp	r3, #0
 8009134:	d02f      	beq.n	8009196 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009138:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800913c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009140:	68b9      	ldr	r1, [r7, #8]
 8009142:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009144:	f000 f89e 	bl	8009284 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800914a:	1e5a      	subs	r2, r3, #1
 800914c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009150:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009158:	d112      	bne.n	8009180 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800915a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800915c:	691b      	ldr	r3, [r3, #16]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d016      	beq.n	8009190 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009164:	3310      	adds	r3, #16
 8009166:	4618      	mov	r0, r3
 8009168:	f000 fdbc 	bl	8009ce4 <xTaskRemoveFromEventList>
 800916c:	4603      	mov	r3, r0
 800916e:	2b00      	cmp	r3, #0
 8009170:	d00e      	beq.n	8009190 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d00b      	beq.n	8009190 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2201      	movs	r2, #1
 800917c:	601a      	str	r2, [r3, #0]
 800917e:	e007      	b.n	8009190 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009180:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009184:	3301      	adds	r3, #1
 8009186:	b2db      	uxtb	r3, r3
 8009188:	b25a      	sxtb	r2, r3
 800918a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800918c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009190:	2301      	movs	r3, #1
 8009192:	637b      	str	r3, [r7, #52]	; 0x34
 8009194:	e001      	b.n	800919a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8009196:	2300      	movs	r3, #0
 8009198:	637b      	str	r3, [r7, #52]	; 0x34
 800919a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800919c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	f383 8811 	msr	BASEPRI, r3
}
 80091a4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80091a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3738      	adds	r7, #56	; 0x38
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b086      	sub	sp, #24
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	60f8      	str	r0, [r7, #12]
 80091b8:	60b9      	str	r1, [r7, #8]
 80091ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80091bc:	2300      	movs	r3, #0
 80091be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d10d      	bne.n	80091ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d14d      	bne.n	8009272 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	689b      	ldr	r3, [r3, #8]
 80091da:	4618      	mov	r0, r3
 80091dc:	f000 ff5e 	bl	800a09c <xTaskPriorityDisinherit>
 80091e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2200      	movs	r2, #0
 80091e6:	609a      	str	r2, [r3, #8]
 80091e8:	e043      	b.n	8009272 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d119      	bne.n	8009224 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	6858      	ldr	r0, [r3, #4]
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091f8:	461a      	mov	r2, r3
 80091fa:	68b9      	ldr	r1, [r7, #8]
 80091fc:	f002 fc80 	bl	800bb00 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	685a      	ldr	r2, [r3, #4]
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009208:	441a      	add	r2, r3
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	685a      	ldr	r2, [r3, #4]
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	689b      	ldr	r3, [r3, #8]
 8009216:	429a      	cmp	r2, r3
 8009218:	d32b      	bcc.n	8009272 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681a      	ldr	r2, [r3, #0]
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	605a      	str	r2, [r3, #4]
 8009222:	e026      	b.n	8009272 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	68d8      	ldr	r0, [r3, #12]
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800922c:	461a      	mov	r2, r3
 800922e:	68b9      	ldr	r1, [r7, #8]
 8009230:	f002 fc66 	bl	800bb00 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	68da      	ldr	r2, [r3, #12]
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800923c:	425b      	negs	r3, r3
 800923e:	441a      	add	r2, r3
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	68da      	ldr	r2, [r3, #12]
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	429a      	cmp	r2, r3
 800924e:	d207      	bcs.n	8009260 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	689a      	ldr	r2, [r3, #8]
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009258:	425b      	negs	r3, r3
 800925a:	441a      	add	r2, r3
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2b02      	cmp	r3, #2
 8009264:	d105      	bne.n	8009272 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d002      	beq.n	8009272 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	3b01      	subs	r3, #1
 8009270:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	1c5a      	adds	r2, r3, #1
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800927a:	697b      	ldr	r3, [r7, #20]
}
 800927c:	4618      	mov	r0, r3
 800927e:	3718      	adds	r7, #24
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}

08009284 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b082      	sub	sp, #8
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009292:	2b00      	cmp	r3, #0
 8009294:	d018      	beq.n	80092c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	68da      	ldr	r2, [r3, #12]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800929e:	441a      	add	r2, r3
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	68da      	ldr	r2, [r3, #12]
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d303      	bcc.n	80092b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681a      	ldr	r2, [r3, #0]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	68d9      	ldr	r1, [r3, #12]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092c0:	461a      	mov	r2, r3
 80092c2:	6838      	ldr	r0, [r7, #0]
 80092c4:	f002 fc1c 	bl	800bb00 <memcpy>
	}
}
 80092c8:	bf00      	nop
 80092ca:	3708      	adds	r7, #8
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}

080092d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b084      	sub	sp, #16
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80092d8:	f001 fd04 	bl	800ace4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80092e4:	e011      	b.n	800930a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d012      	beq.n	8009314 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	3324      	adds	r3, #36	; 0x24
 80092f2:	4618      	mov	r0, r3
 80092f4:	f000 fcf6 	bl	8009ce4 <xTaskRemoveFromEventList>
 80092f8:	4603      	mov	r3, r0
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d001      	beq.n	8009302 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80092fe:	f000 fdcd 	bl	8009e9c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009302:	7bfb      	ldrb	r3, [r7, #15]
 8009304:	3b01      	subs	r3, #1
 8009306:	b2db      	uxtb	r3, r3
 8009308:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800930a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800930e:	2b00      	cmp	r3, #0
 8009310:	dce9      	bgt.n	80092e6 <prvUnlockQueue+0x16>
 8009312:	e000      	b.n	8009316 <prvUnlockQueue+0x46>
					break;
 8009314:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	22ff      	movs	r2, #255	; 0xff
 800931a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800931e:	f001 fd11 	bl	800ad44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009322:	f001 fcdf 	bl	800ace4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800932c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800932e:	e011      	b.n	8009354 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	691b      	ldr	r3, [r3, #16]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d012      	beq.n	800935e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	3310      	adds	r3, #16
 800933c:	4618      	mov	r0, r3
 800933e:	f000 fcd1 	bl	8009ce4 <xTaskRemoveFromEventList>
 8009342:	4603      	mov	r3, r0
 8009344:	2b00      	cmp	r3, #0
 8009346:	d001      	beq.n	800934c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009348:	f000 fda8 	bl	8009e9c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800934c:	7bbb      	ldrb	r3, [r7, #14]
 800934e:	3b01      	subs	r3, #1
 8009350:	b2db      	uxtb	r3, r3
 8009352:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009354:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009358:	2b00      	cmp	r3, #0
 800935a:	dce9      	bgt.n	8009330 <prvUnlockQueue+0x60>
 800935c:	e000      	b.n	8009360 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800935e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	22ff      	movs	r2, #255	; 0xff
 8009364:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009368:	f001 fcec 	bl	800ad44 <vPortExitCritical>
}
 800936c:	bf00      	nop
 800936e:	3710      	adds	r7, #16
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b084      	sub	sp, #16
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800937c:	f001 fcb2 	bl	800ace4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009384:	2b00      	cmp	r3, #0
 8009386:	d102      	bne.n	800938e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009388:	2301      	movs	r3, #1
 800938a:	60fb      	str	r3, [r7, #12]
 800938c:	e001      	b.n	8009392 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800938e:	2300      	movs	r3, #0
 8009390:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009392:	f001 fcd7 	bl	800ad44 <vPortExitCritical>

	return xReturn;
 8009396:	68fb      	ldr	r3, [r7, #12]
}
 8009398:	4618      	mov	r0, r3
 800939a:	3710      	adds	r7, #16
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}

080093a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b084      	sub	sp, #16
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80093a8:	f001 fc9c 	bl	800ace4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d102      	bne.n	80093be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80093b8:	2301      	movs	r3, #1
 80093ba:	60fb      	str	r3, [r7, #12]
 80093bc:	e001      	b.n	80093c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80093be:	2300      	movs	r3, #0
 80093c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80093c2:	f001 fcbf 	bl	800ad44 <vPortExitCritical>

	return xReturn;
 80093c6:	68fb      	ldr	r3, [r7, #12]
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3710      	adds	r7, #16
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80093d0:	b480      	push	{r7}
 80093d2:	b085      	sub	sp, #20
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80093da:	2300      	movs	r3, #0
 80093dc:	60fb      	str	r3, [r7, #12]
 80093de:	e014      	b.n	800940a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80093e0:	4a0f      	ldr	r2, [pc, #60]	; (8009420 <vQueueAddToRegistry+0x50>)
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d10b      	bne.n	8009404 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80093ec:	490c      	ldr	r1, [pc, #48]	; (8009420 <vQueueAddToRegistry+0x50>)
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	683a      	ldr	r2, [r7, #0]
 80093f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80093f6:	4a0a      	ldr	r2, [pc, #40]	; (8009420 <vQueueAddToRegistry+0x50>)
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	00db      	lsls	r3, r3, #3
 80093fc:	4413      	add	r3, r2
 80093fe:	687a      	ldr	r2, [r7, #4]
 8009400:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009402:	e006      	b.n	8009412 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	3301      	adds	r3, #1
 8009408:	60fb      	str	r3, [r7, #12]
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2b07      	cmp	r3, #7
 800940e:	d9e7      	bls.n	80093e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009410:	bf00      	nop
 8009412:	bf00      	nop
 8009414:	3714      	adds	r7, #20
 8009416:	46bd      	mov	sp, r7
 8009418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941c:	4770      	bx	lr
 800941e:	bf00      	nop
 8009420:	200008d4 	.word	0x200008d4

08009424 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009424:	b580      	push	{r7, lr}
 8009426:	b086      	sub	sp, #24
 8009428:	af00      	add	r7, sp, #0
 800942a:	60f8      	str	r0, [r7, #12]
 800942c:	60b9      	str	r1, [r7, #8]
 800942e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009434:	f001 fc56 	bl	800ace4 <vPortEnterCritical>
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800943e:	b25b      	sxtb	r3, r3
 8009440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009444:	d103      	bne.n	800944e <vQueueWaitForMessageRestricted+0x2a>
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	2200      	movs	r2, #0
 800944a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009454:	b25b      	sxtb	r3, r3
 8009456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800945a:	d103      	bne.n	8009464 <vQueueWaitForMessageRestricted+0x40>
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	2200      	movs	r2, #0
 8009460:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009464:	f001 fc6e 	bl	800ad44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800946c:	2b00      	cmp	r3, #0
 800946e:	d106      	bne.n	800947e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	3324      	adds	r3, #36	; 0x24
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	68b9      	ldr	r1, [r7, #8]
 8009478:	4618      	mov	r0, r3
 800947a:	f000 fc07 	bl	8009c8c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800947e:	6978      	ldr	r0, [r7, #20]
 8009480:	f7ff ff26 	bl	80092d0 <prvUnlockQueue>
	}
 8009484:	bf00      	nop
 8009486:	3718      	adds	r7, #24
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}

0800948c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800948c:	b580      	push	{r7, lr}
 800948e:	b08e      	sub	sp, #56	; 0x38
 8009490:	af04      	add	r7, sp, #16
 8009492:	60f8      	str	r0, [r7, #12]
 8009494:	60b9      	str	r1, [r7, #8]
 8009496:	607a      	str	r2, [r7, #4]
 8009498:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800949a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800949c:	2b00      	cmp	r3, #0
 800949e:	d10a      	bne.n	80094b6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80094a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a4:	f383 8811 	msr	BASEPRI, r3
 80094a8:	f3bf 8f6f 	isb	sy
 80094ac:	f3bf 8f4f 	dsb	sy
 80094b0:	623b      	str	r3, [r7, #32]
}
 80094b2:	bf00      	nop
 80094b4:	e7fe      	b.n	80094b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80094b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d10a      	bne.n	80094d2 <xTaskCreateStatic+0x46>
	__asm volatile
 80094bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c0:	f383 8811 	msr	BASEPRI, r3
 80094c4:	f3bf 8f6f 	isb	sy
 80094c8:	f3bf 8f4f 	dsb	sy
 80094cc:	61fb      	str	r3, [r7, #28]
}
 80094ce:	bf00      	nop
 80094d0:	e7fe      	b.n	80094d0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80094d2:	235c      	movs	r3, #92	; 0x5c
 80094d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	2b5c      	cmp	r3, #92	; 0x5c
 80094da:	d00a      	beq.n	80094f2 <xTaskCreateStatic+0x66>
	__asm volatile
 80094dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e0:	f383 8811 	msr	BASEPRI, r3
 80094e4:	f3bf 8f6f 	isb	sy
 80094e8:	f3bf 8f4f 	dsb	sy
 80094ec:	61bb      	str	r3, [r7, #24]
}
 80094ee:	bf00      	nop
 80094f0:	e7fe      	b.n	80094f0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80094f2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80094f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d01e      	beq.n	8009538 <xTaskCreateStatic+0xac>
 80094fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d01b      	beq.n	8009538 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009502:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009506:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009508:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800950a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800950c:	2202      	movs	r2, #2
 800950e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009512:	2300      	movs	r3, #0
 8009514:	9303      	str	r3, [sp, #12]
 8009516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009518:	9302      	str	r3, [sp, #8]
 800951a:	f107 0314 	add.w	r3, r7, #20
 800951e:	9301      	str	r3, [sp, #4]
 8009520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009522:	9300      	str	r3, [sp, #0]
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	687a      	ldr	r2, [r7, #4]
 8009528:	68b9      	ldr	r1, [r7, #8]
 800952a:	68f8      	ldr	r0, [r7, #12]
 800952c:	f000 f850 	bl	80095d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009530:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009532:	f000 f8dd 	bl	80096f0 <prvAddNewTaskToReadyList>
 8009536:	e001      	b.n	800953c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009538:	2300      	movs	r3, #0
 800953a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800953c:	697b      	ldr	r3, [r7, #20]
	}
 800953e:	4618      	mov	r0, r3
 8009540:	3728      	adds	r7, #40	; 0x28
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}

08009546 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009546:	b580      	push	{r7, lr}
 8009548:	b08c      	sub	sp, #48	; 0x30
 800954a:	af04      	add	r7, sp, #16
 800954c:	60f8      	str	r0, [r7, #12]
 800954e:	60b9      	str	r1, [r7, #8]
 8009550:	603b      	str	r3, [r7, #0]
 8009552:	4613      	mov	r3, r2
 8009554:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009556:	88fb      	ldrh	r3, [r7, #6]
 8009558:	009b      	lsls	r3, r3, #2
 800955a:	4618      	mov	r0, r3
 800955c:	f001 fce4 	bl	800af28 <pvPortMalloc>
 8009560:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d00e      	beq.n	8009586 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009568:	205c      	movs	r0, #92	; 0x5c
 800956a:	f001 fcdd 	bl	800af28 <pvPortMalloc>
 800956e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009570:	69fb      	ldr	r3, [r7, #28]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d003      	beq.n	800957e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009576:	69fb      	ldr	r3, [r7, #28]
 8009578:	697a      	ldr	r2, [r7, #20]
 800957a:	631a      	str	r2, [r3, #48]	; 0x30
 800957c:	e005      	b.n	800958a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800957e:	6978      	ldr	r0, [r7, #20]
 8009580:	f001 fd9e 	bl	800b0c0 <vPortFree>
 8009584:	e001      	b.n	800958a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009586:	2300      	movs	r3, #0
 8009588:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800958a:	69fb      	ldr	r3, [r7, #28]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d017      	beq.n	80095c0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009590:	69fb      	ldr	r3, [r7, #28]
 8009592:	2200      	movs	r2, #0
 8009594:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009598:	88fa      	ldrh	r2, [r7, #6]
 800959a:	2300      	movs	r3, #0
 800959c:	9303      	str	r3, [sp, #12]
 800959e:	69fb      	ldr	r3, [r7, #28]
 80095a0:	9302      	str	r3, [sp, #8]
 80095a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a4:	9301      	str	r3, [sp, #4]
 80095a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a8:	9300      	str	r3, [sp, #0]
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	68b9      	ldr	r1, [r7, #8]
 80095ae:	68f8      	ldr	r0, [r7, #12]
 80095b0:	f000 f80e 	bl	80095d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80095b4:	69f8      	ldr	r0, [r7, #28]
 80095b6:	f000 f89b 	bl	80096f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80095ba:	2301      	movs	r3, #1
 80095bc:	61bb      	str	r3, [r7, #24]
 80095be:	e002      	b.n	80095c6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80095c0:	f04f 33ff 	mov.w	r3, #4294967295
 80095c4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80095c6:	69bb      	ldr	r3, [r7, #24]
	}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3720      	adds	r7, #32
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b088      	sub	sp, #32
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	60f8      	str	r0, [r7, #12]
 80095d8:	60b9      	str	r1, [r7, #8]
 80095da:	607a      	str	r2, [r7, #4]
 80095dc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80095de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	009b      	lsls	r3, r3, #2
 80095e6:	461a      	mov	r2, r3
 80095e8:	21a5      	movs	r1, #165	; 0xa5
 80095ea:	f002 fa45 	bl	800ba78 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80095ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80095f8:	3b01      	subs	r3, #1
 80095fa:	009b      	lsls	r3, r3, #2
 80095fc:	4413      	add	r3, r2
 80095fe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009600:	69bb      	ldr	r3, [r7, #24]
 8009602:	f023 0307 	bic.w	r3, r3, #7
 8009606:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009608:	69bb      	ldr	r3, [r7, #24]
 800960a:	f003 0307 	and.w	r3, r3, #7
 800960e:	2b00      	cmp	r3, #0
 8009610:	d00a      	beq.n	8009628 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009616:	f383 8811 	msr	BASEPRI, r3
 800961a:	f3bf 8f6f 	isb	sy
 800961e:	f3bf 8f4f 	dsb	sy
 8009622:	617b      	str	r3, [r7, #20]
}
 8009624:	bf00      	nop
 8009626:	e7fe      	b.n	8009626 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d01f      	beq.n	800966e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800962e:	2300      	movs	r3, #0
 8009630:	61fb      	str	r3, [r7, #28]
 8009632:	e012      	b.n	800965a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009634:	68ba      	ldr	r2, [r7, #8]
 8009636:	69fb      	ldr	r3, [r7, #28]
 8009638:	4413      	add	r3, r2
 800963a:	7819      	ldrb	r1, [r3, #0]
 800963c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800963e:	69fb      	ldr	r3, [r7, #28]
 8009640:	4413      	add	r3, r2
 8009642:	3334      	adds	r3, #52	; 0x34
 8009644:	460a      	mov	r2, r1
 8009646:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009648:	68ba      	ldr	r2, [r7, #8]
 800964a:	69fb      	ldr	r3, [r7, #28]
 800964c:	4413      	add	r3, r2
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d006      	beq.n	8009662 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009654:	69fb      	ldr	r3, [r7, #28]
 8009656:	3301      	adds	r3, #1
 8009658:	61fb      	str	r3, [r7, #28]
 800965a:	69fb      	ldr	r3, [r7, #28]
 800965c:	2b0f      	cmp	r3, #15
 800965e:	d9e9      	bls.n	8009634 <prvInitialiseNewTask+0x64>
 8009660:	e000      	b.n	8009664 <prvInitialiseNewTask+0x94>
			{
				break;
 8009662:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009666:	2200      	movs	r2, #0
 8009668:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800966c:	e003      	b.n	8009676 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800966e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009670:	2200      	movs	r2, #0
 8009672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009678:	2b37      	cmp	r3, #55	; 0x37
 800967a:	d901      	bls.n	8009680 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800967c:	2337      	movs	r3, #55	; 0x37
 800967e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009682:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009684:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009688:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800968a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800968c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800968e:	2200      	movs	r2, #0
 8009690:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009694:	3304      	adds	r3, #4
 8009696:	4618      	mov	r0, r3
 8009698:	f7ff f8be 	bl	8008818 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800969c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800969e:	3318      	adds	r3, #24
 80096a0:	4618      	mov	r0, r3
 80096a2:	f7ff f8b9 	bl	8008818 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80096a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096aa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80096b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80096b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096ba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80096bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096be:	2200      	movs	r2, #0
 80096c0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80096c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c4:	2200      	movs	r2, #0
 80096c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80096ca:	683a      	ldr	r2, [r7, #0]
 80096cc:	68f9      	ldr	r1, [r7, #12]
 80096ce:	69b8      	ldr	r0, [r7, #24]
 80096d0:	f001 f9d8 	bl	800aa84 <pxPortInitialiseStack>
 80096d4:	4602      	mov	r2, r0
 80096d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80096da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d002      	beq.n	80096e6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80096e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80096e6:	bf00      	nop
 80096e8:	3720      	adds	r7, #32
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}
	...

080096f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b082      	sub	sp, #8
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80096f8:	f001 faf4 	bl	800ace4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80096fc:	4b2d      	ldr	r3, [pc, #180]	; (80097b4 <prvAddNewTaskToReadyList+0xc4>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	3301      	adds	r3, #1
 8009702:	4a2c      	ldr	r2, [pc, #176]	; (80097b4 <prvAddNewTaskToReadyList+0xc4>)
 8009704:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009706:	4b2c      	ldr	r3, [pc, #176]	; (80097b8 <prvAddNewTaskToReadyList+0xc8>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d109      	bne.n	8009722 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800970e:	4a2a      	ldr	r2, [pc, #168]	; (80097b8 <prvAddNewTaskToReadyList+0xc8>)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009714:	4b27      	ldr	r3, [pc, #156]	; (80097b4 <prvAddNewTaskToReadyList+0xc4>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	2b01      	cmp	r3, #1
 800971a:	d110      	bne.n	800973e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800971c:	f000 fbe2 	bl	8009ee4 <prvInitialiseTaskLists>
 8009720:	e00d      	b.n	800973e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009722:	4b26      	ldr	r3, [pc, #152]	; (80097bc <prvAddNewTaskToReadyList+0xcc>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d109      	bne.n	800973e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800972a:	4b23      	ldr	r3, [pc, #140]	; (80097b8 <prvAddNewTaskToReadyList+0xc8>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009734:	429a      	cmp	r2, r3
 8009736:	d802      	bhi.n	800973e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009738:	4a1f      	ldr	r2, [pc, #124]	; (80097b8 <prvAddNewTaskToReadyList+0xc8>)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800973e:	4b20      	ldr	r3, [pc, #128]	; (80097c0 <prvAddNewTaskToReadyList+0xd0>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	3301      	adds	r3, #1
 8009744:	4a1e      	ldr	r2, [pc, #120]	; (80097c0 <prvAddNewTaskToReadyList+0xd0>)
 8009746:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009748:	4b1d      	ldr	r3, [pc, #116]	; (80097c0 <prvAddNewTaskToReadyList+0xd0>)
 800974a:	681a      	ldr	r2, [r3, #0]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009754:	4b1b      	ldr	r3, [pc, #108]	; (80097c4 <prvAddNewTaskToReadyList+0xd4>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	429a      	cmp	r2, r3
 800975a:	d903      	bls.n	8009764 <prvAddNewTaskToReadyList+0x74>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009760:	4a18      	ldr	r2, [pc, #96]	; (80097c4 <prvAddNewTaskToReadyList+0xd4>)
 8009762:	6013      	str	r3, [r2, #0]
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009768:	4613      	mov	r3, r2
 800976a:	009b      	lsls	r3, r3, #2
 800976c:	4413      	add	r3, r2
 800976e:	009b      	lsls	r3, r3, #2
 8009770:	4a15      	ldr	r2, [pc, #84]	; (80097c8 <prvAddNewTaskToReadyList+0xd8>)
 8009772:	441a      	add	r2, r3
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	3304      	adds	r3, #4
 8009778:	4619      	mov	r1, r3
 800977a:	4610      	mov	r0, r2
 800977c:	f7ff f859 	bl	8008832 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009780:	f001 fae0 	bl	800ad44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009784:	4b0d      	ldr	r3, [pc, #52]	; (80097bc <prvAddNewTaskToReadyList+0xcc>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d00e      	beq.n	80097aa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800978c:	4b0a      	ldr	r3, [pc, #40]	; (80097b8 <prvAddNewTaskToReadyList+0xc8>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009796:	429a      	cmp	r2, r3
 8009798:	d207      	bcs.n	80097aa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800979a:	4b0c      	ldr	r3, [pc, #48]	; (80097cc <prvAddNewTaskToReadyList+0xdc>)
 800979c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097a0:	601a      	str	r2, [r3, #0]
 80097a2:	f3bf 8f4f 	dsb	sy
 80097a6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80097aa:	bf00      	nop
 80097ac:	3708      	adds	r7, #8
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	bf00      	nop
 80097b4:	20000de8 	.word	0x20000de8
 80097b8:	20000914 	.word	0x20000914
 80097bc:	20000df4 	.word	0x20000df4
 80097c0:	20000e04 	.word	0x20000e04
 80097c4:	20000df0 	.word	0x20000df0
 80097c8:	20000918 	.word	0x20000918
 80097cc:	e000ed04 	.word	0xe000ed04

080097d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b08a      	sub	sp, #40	; 0x28
 80097d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80097d6:	2300      	movs	r3, #0
 80097d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80097da:	2300      	movs	r3, #0
 80097dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80097de:	463a      	mov	r2, r7
 80097e0:	1d39      	adds	r1, r7, #4
 80097e2:	f107 0308 	add.w	r3, r7, #8
 80097e6:	4618      	mov	r0, r3
 80097e8:	f7fe ffc2 	bl	8008770 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80097ec:	6839      	ldr	r1, [r7, #0]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	68ba      	ldr	r2, [r7, #8]
 80097f2:	9202      	str	r2, [sp, #8]
 80097f4:	9301      	str	r3, [sp, #4]
 80097f6:	2300      	movs	r3, #0
 80097f8:	9300      	str	r3, [sp, #0]
 80097fa:	2300      	movs	r3, #0
 80097fc:	460a      	mov	r2, r1
 80097fe:	4921      	ldr	r1, [pc, #132]	; (8009884 <vTaskStartScheduler+0xb4>)
 8009800:	4821      	ldr	r0, [pc, #132]	; (8009888 <vTaskStartScheduler+0xb8>)
 8009802:	f7ff fe43 	bl	800948c <xTaskCreateStatic>
 8009806:	4603      	mov	r3, r0
 8009808:	4a20      	ldr	r2, [pc, #128]	; (800988c <vTaskStartScheduler+0xbc>)
 800980a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800980c:	4b1f      	ldr	r3, [pc, #124]	; (800988c <vTaskStartScheduler+0xbc>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d002      	beq.n	800981a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009814:	2301      	movs	r3, #1
 8009816:	617b      	str	r3, [r7, #20]
 8009818:	e001      	b.n	800981e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800981a:	2300      	movs	r3, #0
 800981c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	2b01      	cmp	r3, #1
 8009822:	d102      	bne.n	800982a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009824:	f000 fcfc 	bl	800a220 <xTimerCreateTimerTask>
 8009828:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	2b01      	cmp	r3, #1
 800982e:	d116      	bne.n	800985e <vTaskStartScheduler+0x8e>
	__asm volatile
 8009830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009834:	f383 8811 	msr	BASEPRI, r3
 8009838:	f3bf 8f6f 	isb	sy
 800983c:	f3bf 8f4f 	dsb	sy
 8009840:	613b      	str	r3, [r7, #16]
}
 8009842:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009844:	4b12      	ldr	r3, [pc, #72]	; (8009890 <vTaskStartScheduler+0xc0>)
 8009846:	f04f 32ff 	mov.w	r2, #4294967295
 800984a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800984c:	4b11      	ldr	r3, [pc, #68]	; (8009894 <vTaskStartScheduler+0xc4>)
 800984e:	2201      	movs	r2, #1
 8009850:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009852:	4b11      	ldr	r3, [pc, #68]	; (8009898 <vTaskStartScheduler+0xc8>)
 8009854:	2200      	movs	r2, #0
 8009856:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009858:	f001 f9a2 	bl	800aba0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800985c:	e00e      	b.n	800987c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009864:	d10a      	bne.n	800987c <vTaskStartScheduler+0xac>
	__asm volatile
 8009866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800986a:	f383 8811 	msr	BASEPRI, r3
 800986e:	f3bf 8f6f 	isb	sy
 8009872:	f3bf 8f4f 	dsb	sy
 8009876:	60fb      	str	r3, [r7, #12]
}
 8009878:	bf00      	nop
 800987a:	e7fe      	b.n	800987a <vTaskStartScheduler+0xaa>
}
 800987c:	bf00      	nop
 800987e:	3718      	adds	r7, #24
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}
 8009884:	0800bbf8 	.word	0x0800bbf8
 8009888:	08009eb5 	.word	0x08009eb5
 800988c:	20000e0c 	.word	0x20000e0c
 8009890:	20000e08 	.word	0x20000e08
 8009894:	20000df4 	.word	0x20000df4
 8009898:	20000dec 	.word	0x20000dec

0800989c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800989c:	b480      	push	{r7}
 800989e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80098a0:	4b04      	ldr	r3, [pc, #16]	; (80098b4 <vTaskSuspendAll+0x18>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	3301      	adds	r3, #1
 80098a6:	4a03      	ldr	r2, [pc, #12]	; (80098b4 <vTaskSuspendAll+0x18>)
 80098a8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80098aa:	bf00      	nop
 80098ac:	46bd      	mov	sp, r7
 80098ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b2:	4770      	bx	lr
 80098b4:	20000e10 	.word	0x20000e10

080098b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b084      	sub	sp, #16
 80098bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80098be:	2300      	movs	r3, #0
 80098c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80098c2:	2300      	movs	r3, #0
 80098c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80098c6:	4b42      	ldr	r3, [pc, #264]	; (80099d0 <xTaskResumeAll+0x118>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d10a      	bne.n	80098e4 <xTaskResumeAll+0x2c>
	__asm volatile
 80098ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d2:	f383 8811 	msr	BASEPRI, r3
 80098d6:	f3bf 8f6f 	isb	sy
 80098da:	f3bf 8f4f 	dsb	sy
 80098de:	603b      	str	r3, [r7, #0]
}
 80098e0:	bf00      	nop
 80098e2:	e7fe      	b.n	80098e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80098e4:	f001 f9fe 	bl	800ace4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80098e8:	4b39      	ldr	r3, [pc, #228]	; (80099d0 <xTaskResumeAll+0x118>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	3b01      	subs	r3, #1
 80098ee:	4a38      	ldr	r2, [pc, #224]	; (80099d0 <xTaskResumeAll+0x118>)
 80098f0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098f2:	4b37      	ldr	r3, [pc, #220]	; (80099d0 <xTaskResumeAll+0x118>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d162      	bne.n	80099c0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80098fa:	4b36      	ldr	r3, [pc, #216]	; (80099d4 <xTaskResumeAll+0x11c>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d05e      	beq.n	80099c0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009902:	e02f      	b.n	8009964 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009904:	4b34      	ldr	r3, [pc, #208]	; (80099d8 <xTaskResumeAll+0x120>)
 8009906:	68db      	ldr	r3, [r3, #12]
 8009908:	68db      	ldr	r3, [r3, #12]
 800990a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	3318      	adds	r3, #24
 8009910:	4618      	mov	r0, r3
 8009912:	f7fe ffeb 	bl	80088ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	3304      	adds	r3, #4
 800991a:	4618      	mov	r0, r3
 800991c:	f7fe ffe6 	bl	80088ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009924:	4b2d      	ldr	r3, [pc, #180]	; (80099dc <xTaskResumeAll+0x124>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	429a      	cmp	r2, r3
 800992a:	d903      	bls.n	8009934 <xTaskResumeAll+0x7c>
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009930:	4a2a      	ldr	r2, [pc, #168]	; (80099dc <xTaskResumeAll+0x124>)
 8009932:	6013      	str	r3, [r2, #0]
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009938:	4613      	mov	r3, r2
 800993a:	009b      	lsls	r3, r3, #2
 800993c:	4413      	add	r3, r2
 800993e:	009b      	lsls	r3, r3, #2
 8009940:	4a27      	ldr	r2, [pc, #156]	; (80099e0 <xTaskResumeAll+0x128>)
 8009942:	441a      	add	r2, r3
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	3304      	adds	r3, #4
 8009948:	4619      	mov	r1, r3
 800994a:	4610      	mov	r0, r2
 800994c:	f7fe ff71 	bl	8008832 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009954:	4b23      	ldr	r3, [pc, #140]	; (80099e4 <xTaskResumeAll+0x12c>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800995a:	429a      	cmp	r2, r3
 800995c:	d302      	bcc.n	8009964 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800995e:	4b22      	ldr	r3, [pc, #136]	; (80099e8 <xTaskResumeAll+0x130>)
 8009960:	2201      	movs	r2, #1
 8009962:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009964:	4b1c      	ldr	r3, [pc, #112]	; (80099d8 <xTaskResumeAll+0x120>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d1cb      	bne.n	8009904 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d001      	beq.n	8009976 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009972:	f000 fb55 	bl	800a020 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009976:	4b1d      	ldr	r3, [pc, #116]	; (80099ec <xTaskResumeAll+0x134>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d010      	beq.n	80099a4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009982:	f000 f847 	bl	8009a14 <xTaskIncrementTick>
 8009986:	4603      	mov	r3, r0
 8009988:	2b00      	cmp	r3, #0
 800998a:	d002      	beq.n	8009992 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800998c:	4b16      	ldr	r3, [pc, #88]	; (80099e8 <xTaskResumeAll+0x130>)
 800998e:	2201      	movs	r2, #1
 8009990:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	3b01      	subs	r3, #1
 8009996:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d1f1      	bne.n	8009982 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800999e:	4b13      	ldr	r3, [pc, #76]	; (80099ec <xTaskResumeAll+0x134>)
 80099a0:	2200      	movs	r2, #0
 80099a2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80099a4:	4b10      	ldr	r3, [pc, #64]	; (80099e8 <xTaskResumeAll+0x130>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d009      	beq.n	80099c0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80099ac:	2301      	movs	r3, #1
 80099ae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80099b0:	4b0f      	ldr	r3, [pc, #60]	; (80099f0 <xTaskResumeAll+0x138>)
 80099b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099b6:	601a      	str	r2, [r3, #0]
 80099b8:	f3bf 8f4f 	dsb	sy
 80099bc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80099c0:	f001 f9c0 	bl	800ad44 <vPortExitCritical>

	return xAlreadyYielded;
 80099c4:	68bb      	ldr	r3, [r7, #8]
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3710      	adds	r7, #16
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}
 80099ce:	bf00      	nop
 80099d0:	20000e10 	.word	0x20000e10
 80099d4:	20000de8 	.word	0x20000de8
 80099d8:	20000da8 	.word	0x20000da8
 80099dc:	20000df0 	.word	0x20000df0
 80099e0:	20000918 	.word	0x20000918
 80099e4:	20000914 	.word	0x20000914
 80099e8:	20000dfc 	.word	0x20000dfc
 80099ec:	20000df8 	.word	0x20000df8
 80099f0:	e000ed04 	.word	0xe000ed04

080099f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80099f4:	b480      	push	{r7}
 80099f6:	b083      	sub	sp, #12
 80099f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80099fa:	4b05      	ldr	r3, [pc, #20]	; (8009a10 <xTaskGetTickCount+0x1c>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009a00:	687b      	ldr	r3, [r7, #4]
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	370c      	adds	r7, #12
 8009a06:	46bd      	mov	sp, r7
 8009a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0c:	4770      	bx	lr
 8009a0e:	bf00      	nop
 8009a10:	20000dec 	.word	0x20000dec

08009a14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b086      	sub	sp, #24
 8009a18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a1e:	4b4f      	ldr	r3, [pc, #316]	; (8009b5c <xTaskIncrementTick+0x148>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	f040 808f 	bne.w	8009b46 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009a28:	4b4d      	ldr	r3, [pc, #308]	; (8009b60 <xTaskIncrementTick+0x14c>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	3301      	adds	r3, #1
 8009a2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009a30:	4a4b      	ldr	r2, [pc, #300]	; (8009b60 <xTaskIncrementTick+0x14c>)
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d120      	bne.n	8009a7e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009a3c:	4b49      	ldr	r3, [pc, #292]	; (8009b64 <xTaskIncrementTick+0x150>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d00a      	beq.n	8009a5c <xTaskIncrementTick+0x48>
	__asm volatile
 8009a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a4a:	f383 8811 	msr	BASEPRI, r3
 8009a4e:	f3bf 8f6f 	isb	sy
 8009a52:	f3bf 8f4f 	dsb	sy
 8009a56:	603b      	str	r3, [r7, #0]
}
 8009a58:	bf00      	nop
 8009a5a:	e7fe      	b.n	8009a5a <xTaskIncrementTick+0x46>
 8009a5c:	4b41      	ldr	r3, [pc, #260]	; (8009b64 <xTaskIncrementTick+0x150>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	60fb      	str	r3, [r7, #12]
 8009a62:	4b41      	ldr	r3, [pc, #260]	; (8009b68 <xTaskIncrementTick+0x154>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4a3f      	ldr	r2, [pc, #252]	; (8009b64 <xTaskIncrementTick+0x150>)
 8009a68:	6013      	str	r3, [r2, #0]
 8009a6a:	4a3f      	ldr	r2, [pc, #252]	; (8009b68 <xTaskIncrementTick+0x154>)
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	6013      	str	r3, [r2, #0]
 8009a70:	4b3e      	ldr	r3, [pc, #248]	; (8009b6c <xTaskIncrementTick+0x158>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	3301      	adds	r3, #1
 8009a76:	4a3d      	ldr	r2, [pc, #244]	; (8009b6c <xTaskIncrementTick+0x158>)
 8009a78:	6013      	str	r3, [r2, #0]
 8009a7a:	f000 fad1 	bl	800a020 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009a7e:	4b3c      	ldr	r3, [pc, #240]	; (8009b70 <xTaskIncrementTick+0x15c>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	693a      	ldr	r2, [r7, #16]
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d349      	bcc.n	8009b1c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a88:	4b36      	ldr	r3, [pc, #216]	; (8009b64 <xTaskIncrementTick+0x150>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d104      	bne.n	8009a9c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a92:	4b37      	ldr	r3, [pc, #220]	; (8009b70 <xTaskIncrementTick+0x15c>)
 8009a94:	f04f 32ff 	mov.w	r2, #4294967295
 8009a98:	601a      	str	r2, [r3, #0]
					break;
 8009a9a:	e03f      	b.n	8009b1c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a9c:	4b31      	ldr	r3, [pc, #196]	; (8009b64 <xTaskIncrementTick+0x150>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	68db      	ldr	r3, [r3, #12]
 8009aa2:	68db      	ldr	r3, [r3, #12]
 8009aa4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009aac:	693a      	ldr	r2, [r7, #16]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d203      	bcs.n	8009abc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009ab4:	4a2e      	ldr	r2, [pc, #184]	; (8009b70 <xTaskIncrementTick+0x15c>)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009aba:	e02f      	b.n	8009b1c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	3304      	adds	r3, #4
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f7fe ff13 	bl	80088ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d004      	beq.n	8009ad8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	3318      	adds	r3, #24
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f7fe ff0a 	bl	80088ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009adc:	4b25      	ldr	r3, [pc, #148]	; (8009b74 <xTaskIncrementTick+0x160>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	d903      	bls.n	8009aec <xTaskIncrementTick+0xd8>
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ae8:	4a22      	ldr	r2, [pc, #136]	; (8009b74 <xTaskIncrementTick+0x160>)
 8009aea:	6013      	str	r3, [r2, #0]
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009af0:	4613      	mov	r3, r2
 8009af2:	009b      	lsls	r3, r3, #2
 8009af4:	4413      	add	r3, r2
 8009af6:	009b      	lsls	r3, r3, #2
 8009af8:	4a1f      	ldr	r2, [pc, #124]	; (8009b78 <xTaskIncrementTick+0x164>)
 8009afa:	441a      	add	r2, r3
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	3304      	adds	r3, #4
 8009b00:	4619      	mov	r1, r3
 8009b02:	4610      	mov	r0, r2
 8009b04:	f7fe fe95 	bl	8008832 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b0c:	4b1b      	ldr	r3, [pc, #108]	; (8009b7c <xTaskIncrementTick+0x168>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d3b8      	bcc.n	8009a88 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009b16:	2301      	movs	r3, #1
 8009b18:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b1a:	e7b5      	b.n	8009a88 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009b1c:	4b17      	ldr	r3, [pc, #92]	; (8009b7c <xTaskIncrementTick+0x168>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b22:	4915      	ldr	r1, [pc, #84]	; (8009b78 <xTaskIncrementTick+0x164>)
 8009b24:	4613      	mov	r3, r2
 8009b26:	009b      	lsls	r3, r3, #2
 8009b28:	4413      	add	r3, r2
 8009b2a:	009b      	lsls	r3, r3, #2
 8009b2c:	440b      	add	r3, r1
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	d901      	bls.n	8009b38 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009b34:	2301      	movs	r3, #1
 8009b36:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009b38:	4b11      	ldr	r3, [pc, #68]	; (8009b80 <xTaskIncrementTick+0x16c>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d007      	beq.n	8009b50 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009b40:	2301      	movs	r3, #1
 8009b42:	617b      	str	r3, [r7, #20]
 8009b44:	e004      	b.n	8009b50 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009b46:	4b0f      	ldr	r3, [pc, #60]	; (8009b84 <xTaskIncrementTick+0x170>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	3301      	adds	r3, #1
 8009b4c:	4a0d      	ldr	r2, [pc, #52]	; (8009b84 <xTaskIncrementTick+0x170>)
 8009b4e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009b50:	697b      	ldr	r3, [r7, #20]
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3718      	adds	r7, #24
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}
 8009b5a:	bf00      	nop
 8009b5c:	20000e10 	.word	0x20000e10
 8009b60:	20000dec 	.word	0x20000dec
 8009b64:	20000da0 	.word	0x20000da0
 8009b68:	20000da4 	.word	0x20000da4
 8009b6c:	20000e00 	.word	0x20000e00
 8009b70:	20000e08 	.word	0x20000e08
 8009b74:	20000df0 	.word	0x20000df0
 8009b78:	20000918 	.word	0x20000918
 8009b7c:	20000914 	.word	0x20000914
 8009b80:	20000dfc 	.word	0x20000dfc
 8009b84:	20000df8 	.word	0x20000df8

08009b88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b085      	sub	sp, #20
 8009b8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009b8e:	4b28      	ldr	r3, [pc, #160]	; (8009c30 <vTaskSwitchContext+0xa8>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d003      	beq.n	8009b9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009b96:	4b27      	ldr	r3, [pc, #156]	; (8009c34 <vTaskSwitchContext+0xac>)
 8009b98:	2201      	movs	r2, #1
 8009b9a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009b9c:	e041      	b.n	8009c22 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8009b9e:	4b25      	ldr	r3, [pc, #148]	; (8009c34 <vTaskSwitchContext+0xac>)
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ba4:	4b24      	ldr	r3, [pc, #144]	; (8009c38 <vTaskSwitchContext+0xb0>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	60fb      	str	r3, [r7, #12]
 8009baa:	e010      	b.n	8009bce <vTaskSwitchContext+0x46>
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d10a      	bne.n	8009bc8 <vTaskSwitchContext+0x40>
	__asm volatile
 8009bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb6:	f383 8811 	msr	BASEPRI, r3
 8009bba:	f3bf 8f6f 	isb	sy
 8009bbe:	f3bf 8f4f 	dsb	sy
 8009bc2:	607b      	str	r3, [r7, #4]
}
 8009bc4:	bf00      	nop
 8009bc6:	e7fe      	b.n	8009bc6 <vTaskSwitchContext+0x3e>
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	3b01      	subs	r3, #1
 8009bcc:	60fb      	str	r3, [r7, #12]
 8009bce:	491b      	ldr	r1, [pc, #108]	; (8009c3c <vTaskSwitchContext+0xb4>)
 8009bd0:	68fa      	ldr	r2, [r7, #12]
 8009bd2:	4613      	mov	r3, r2
 8009bd4:	009b      	lsls	r3, r3, #2
 8009bd6:	4413      	add	r3, r2
 8009bd8:	009b      	lsls	r3, r3, #2
 8009bda:	440b      	add	r3, r1
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d0e4      	beq.n	8009bac <vTaskSwitchContext+0x24>
 8009be2:	68fa      	ldr	r2, [r7, #12]
 8009be4:	4613      	mov	r3, r2
 8009be6:	009b      	lsls	r3, r3, #2
 8009be8:	4413      	add	r3, r2
 8009bea:	009b      	lsls	r3, r3, #2
 8009bec:	4a13      	ldr	r2, [pc, #76]	; (8009c3c <vTaskSwitchContext+0xb4>)
 8009bee:	4413      	add	r3, r2
 8009bf0:	60bb      	str	r3, [r7, #8]
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	685b      	ldr	r3, [r3, #4]
 8009bf6:	685a      	ldr	r2, [r3, #4]
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	605a      	str	r2, [r3, #4]
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	685a      	ldr	r2, [r3, #4]
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	3308      	adds	r3, #8
 8009c04:	429a      	cmp	r2, r3
 8009c06:	d104      	bne.n	8009c12 <vTaskSwitchContext+0x8a>
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	685b      	ldr	r3, [r3, #4]
 8009c0c:	685a      	ldr	r2, [r3, #4]
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	605a      	str	r2, [r3, #4]
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	68db      	ldr	r3, [r3, #12]
 8009c18:	4a09      	ldr	r2, [pc, #36]	; (8009c40 <vTaskSwitchContext+0xb8>)
 8009c1a:	6013      	str	r3, [r2, #0]
 8009c1c:	4a06      	ldr	r2, [pc, #24]	; (8009c38 <vTaskSwitchContext+0xb0>)
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	6013      	str	r3, [r2, #0]
}
 8009c22:	bf00      	nop
 8009c24:	3714      	adds	r7, #20
 8009c26:	46bd      	mov	sp, r7
 8009c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2c:	4770      	bx	lr
 8009c2e:	bf00      	nop
 8009c30:	20000e10 	.word	0x20000e10
 8009c34:	20000dfc 	.word	0x20000dfc
 8009c38:	20000df0 	.word	0x20000df0
 8009c3c:	20000918 	.word	0x20000918
 8009c40:	20000914 	.word	0x20000914

08009c44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d10a      	bne.n	8009c6a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c58:	f383 8811 	msr	BASEPRI, r3
 8009c5c:	f3bf 8f6f 	isb	sy
 8009c60:	f3bf 8f4f 	dsb	sy
 8009c64:	60fb      	str	r3, [r7, #12]
}
 8009c66:	bf00      	nop
 8009c68:	e7fe      	b.n	8009c68 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009c6a:	4b07      	ldr	r3, [pc, #28]	; (8009c88 <vTaskPlaceOnEventList+0x44>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	3318      	adds	r3, #24
 8009c70:	4619      	mov	r1, r3
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f7fe fe01 	bl	800887a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009c78:	2101      	movs	r1, #1
 8009c7a:	6838      	ldr	r0, [r7, #0]
 8009c7c:	f000 fa7c 	bl	800a178 <prvAddCurrentTaskToDelayedList>
}
 8009c80:	bf00      	nop
 8009c82:	3710      	adds	r7, #16
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}
 8009c88:	20000914 	.word	0x20000914

08009c8c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b086      	sub	sp, #24
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	60f8      	str	r0, [r7, #12]
 8009c94:	60b9      	str	r1, [r7, #8]
 8009c96:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d10a      	bne.n	8009cb4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca2:	f383 8811 	msr	BASEPRI, r3
 8009ca6:	f3bf 8f6f 	isb	sy
 8009caa:	f3bf 8f4f 	dsb	sy
 8009cae:	617b      	str	r3, [r7, #20]
}
 8009cb0:	bf00      	nop
 8009cb2:	e7fe      	b.n	8009cb2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009cb4:	4b0a      	ldr	r3, [pc, #40]	; (8009ce0 <vTaskPlaceOnEventListRestricted+0x54>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	3318      	adds	r3, #24
 8009cba:	4619      	mov	r1, r3
 8009cbc:	68f8      	ldr	r0, [r7, #12]
 8009cbe:	f7fe fdb8 	bl	8008832 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d002      	beq.n	8009cce <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8009ccc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009cce:	6879      	ldr	r1, [r7, #4]
 8009cd0:	68b8      	ldr	r0, [r7, #8]
 8009cd2:	f000 fa51 	bl	800a178 <prvAddCurrentTaskToDelayedList>
	}
 8009cd6:	bf00      	nop
 8009cd8:	3718      	adds	r7, #24
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}
 8009cde:	bf00      	nop
 8009ce0:	20000914 	.word	0x20000914

08009ce4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b086      	sub	sp, #24
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	68db      	ldr	r3, [r3, #12]
 8009cf0:	68db      	ldr	r3, [r3, #12]
 8009cf2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d10a      	bne.n	8009d10 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cfe:	f383 8811 	msr	BASEPRI, r3
 8009d02:	f3bf 8f6f 	isb	sy
 8009d06:	f3bf 8f4f 	dsb	sy
 8009d0a:	60fb      	str	r3, [r7, #12]
}
 8009d0c:	bf00      	nop
 8009d0e:	e7fe      	b.n	8009d0e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	3318      	adds	r3, #24
 8009d14:	4618      	mov	r0, r3
 8009d16:	f7fe fde9 	bl	80088ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d1a:	4b1e      	ldr	r3, [pc, #120]	; (8009d94 <xTaskRemoveFromEventList+0xb0>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d11d      	bne.n	8009d5e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	3304      	adds	r3, #4
 8009d26:	4618      	mov	r0, r3
 8009d28:	f7fe fde0 	bl	80088ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009d2c:	693b      	ldr	r3, [r7, #16]
 8009d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d30:	4b19      	ldr	r3, [pc, #100]	; (8009d98 <xTaskRemoveFromEventList+0xb4>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	429a      	cmp	r2, r3
 8009d36:	d903      	bls.n	8009d40 <xTaskRemoveFromEventList+0x5c>
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d3c:	4a16      	ldr	r2, [pc, #88]	; (8009d98 <xTaskRemoveFromEventList+0xb4>)
 8009d3e:	6013      	str	r3, [r2, #0]
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d44:	4613      	mov	r3, r2
 8009d46:	009b      	lsls	r3, r3, #2
 8009d48:	4413      	add	r3, r2
 8009d4a:	009b      	lsls	r3, r3, #2
 8009d4c:	4a13      	ldr	r2, [pc, #76]	; (8009d9c <xTaskRemoveFromEventList+0xb8>)
 8009d4e:	441a      	add	r2, r3
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	3304      	adds	r3, #4
 8009d54:	4619      	mov	r1, r3
 8009d56:	4610      	mov	r0, r2
 8009d58:	f7fe fd6b 	bl	8008832 <vListInsertEnd>
 8009d5c:	e005      	b.n	8009d6a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	3318      	adds	r3, #24
 8009d62:	4619      	mov	r1, r3
 8009d64:	480e      	ldr	r0, [pc, #56]	; (8009da0 <xTaskRemoveFromEventList+0xbc>)
 8009d66:	f7fe fd64 	bl	8008832 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d6e:	4b0d      	ldr	r3, [pc, #52]	; (8009da4 <xTaskRemoveFromEventList+0xc0>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d74:	429a      	cmp	r2, r3
 8009d76:	d905      	bls.n	8009d84 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009d78:	2301      	movs	r3, #1
 8009d7a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009d7c:	4b0a      	ldr	r3, [pc, #40]	; (8009da8 <xTaskRemoveFromEventList+0xc4>)
 8009d7e:	2201      	movs	r2, #1
 8009d80:	601a      	str	r2, [r3, #0]
 8009d82:	e001      	b.n	8009d88 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009d84:	2300      	movs	r3, #0
 8009d86:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009d88:	697b      	ldr	r3, [r7, #20]
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3718      	adds	r7, #24
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	20000e10 	.word	0x20000e10
 8009d98:	20000df0 	.word	0x20000df0
 8009d9c:	20000918 	.word	0x20000918
 8009da0:	20000da8 	.word	0x20000da8
 8009da4:	20000914 	.word	0x20000914
 8009da8:	20000dfc 	.word	0x20000dfc

08009dac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009dac:	b480      	push	{r7}
 8009dae:	b083      	sub	sp, #12
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009db4:	4b06      	ldr	r3, [pc, #24]	; (8009dd0 <vTaskInternalSetTimeOutState+0x24>)
 8009db6:	681a      	ldr	r2, [r3, #0]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009dbc:	4b05      	ldr	r3, [pc, #20]	; (8009dd4 <vTaskInternalSetTimeOutState+0x28>)
 8009dbe:	681a      	ldr	r2, [r3, #0]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	605a      	str	r2, [r3, #4]
}
 8009dc4:	bf00      	nop
 8009dc6:	370c      	adds	r7, #12
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dce:	4770      	bx	lr
 8009dd0:	20000e00 	.word	0x20000e00
 8009dd4:	20000dec 	.word	0x20000dec

08009dd8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b088      	sub	sp, #32
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d10a      	bne.n	8009dfe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dec:	f383 8811 	msr	BASEPRI, r3
 8009df0:	f3bf 8f6f 	isb	sy
 8009df4:	f3bf 8f4f 	dsb	sy
 8009df8:	613b      	str	r3, [r7, #16]
}
 8009dfa:	bf00      	nop
 8009dfc:	e7fe      	b.n	8009dfc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d10a      	bne.n	8009e1a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e08:	f383 8811 	msr	BASEPRI, r3
 8009e0c:	f3bf 8f6f 	isb	sy
 8009e10:	f3bf 8f4f 	dsb	sy
 8009e14:	60fb      	str	r3, [r7, #12]
}
 8009e16:	bf00      	nop
 8009e18:	e7fe      	b.n	8009e18 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009e1a:	f000 ff63 	bl	800ace4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009e1e:	4b1d      	ldr	r3, [pc, #116]	; (8009e94 <xTaskCheckForTimeOut+0xbc>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	69ba      	ldr	r2, [r7, #24]
 8009e2a:	1ad3      	subs	r3, r2, r3
 8009e2c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e36:	d102      	bne.n	8009e3e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	61fb      	str	r3, [r7, #28]
 8009e3c:	e023      	b.n	8009e86 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681a      	ldr	r2, [r3, #0]
 8009e42:	4b15      	ldr	r3, [pc, #84]	; (8009e98 <xTaskCheckForTimeOut+0xc0>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	429a      	cmp	r2, r3
 8009e48:	d007      	beq.n	8009e5a <xTaskCheckForTimeOut+0x82>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	685b      	ldr	r3, [r3, #4]
 8009e4e:	69ba      	ldr	r2, [r7, #24]
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d302      	bcc.n	8009e5a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009e54:	2301      	movs	r3, #1
 8009e56:	61fb      	str	r3, [r7, #28]
 8009e58:	e015      	b.n	8009e86 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	697a      	ldr	r2, [r7, #20]
 8009e60:	429a      	cmp	r2, r3
 8009e62:	d20b      	bcs.n	8009e7c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	681a      	ldr	r2, [r3, #0]
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	1ad2      	subs	r2, r2, r3
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f7ff ff9b 	bl	8009dac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009e76:	2300      	movs	r3, #0
 8009e78:	61fb      	str	r3, [r7, #28]
 8009e7a:	e004      	b.n	8009e86 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009e82:	2301      	movs	r3, #1
 8009e84:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009e86:	f000 ff5d 	bl	800ad44 <vPortExitCritical>

	return xReturn;
 8009e8a:	69fb      	ldr	r3, [r7, #28]
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	3720      	adds	r7, #32
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}
 8009e94:	20000dec 	.word	0x20000dec
 8009e98:	20000e00 	.word	0x20000e00

08009e9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009ea0:	4b03      	ldr	r3, [pc, #12]	; (8009eb0 <vTaskMissedYield+0x14>)
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	601a      	str	r2, [r3, #0]
}
 8009ea6:	bf00      	nop
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eae:	4770      	bx	lr
 8009eb0:	20000dfc 	.word	0x20000dfc

08009eb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b082      	sub	sp, #8
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009ebc:	f000 f852 	bl	8009f64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009ec0:	4b06      	ldr	r3, [pc, #24]	; (8009edc <prvIdleTask+0x28>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	d9f9      	bls.n	8009ebc <prvIdleTask+0x8>
			{
				taskYIELD();
 8009ec8:	4b05      	ldr	r3, [pc, #20]	; (8009ee0 <prvIdleTask+0x2c>)
 8009eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ece:	601a      	str	r2, [r3, #0]
 8009ed0:	f3bf 8f4f 	dsb	sy
 8009ed4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009ed8:	e7f0      	b.n	8009ebc <prvIdleTask+0x8>
 8009eda:	bf00      	nop
 8009edc:	20000918 	.word	0x20000918
 8009ee0:	e000ed04 	.word	0xe000ed04

08009ee4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b082      	sub	sp, #8
 8009ee8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009eea:	2300      	movs	r3, #0
 8009eec:	607b      	str	r3, [r7, #4]
 8009eee:	e00c      	b.n	8009f0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009ef0:	687a      	ldr	r2, [r7, #4]
 8009ef2:	4613      	mov	r3, r2
 8009ef4:	009b      	lsls	r3, r3, #2
 8009ef6:	4413      	add	r3, r2
 8009ef8:	009b      	lsls	r3, r3, #2
 8009efa:	4a12      	ldr	r2, [pc, #72]	; (8009f44 <prvInitialiseTaskLists+0x60>)
 8009efc:	4413      	add	r3, r2
 8009efe:	4618      	mov	r0, r3
 8009f00:	f7fe fc6a 	bl	80087d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	3301      	adds	r3, #1
 8009f08:	607b      	str	r3, [r7, #4]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2b37      	cmp	r3, #55	; 0x37
 8009f0e:	d9ef      	bls.n	8009ef0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009f10:	480d      	ldr	r0, [pc, #52]	; (8009f48 <prvInitialiseTaskLists+0x64>)
 8009f12:	f7fe fc61 	bl	80087d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009f16:	480d      	ldr	r0, [pc, #52]	; (8009f4c <prvInitialiseTaskLists+0x68>)
 8009f18:	f7fe fc5e 	bl	80087d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009f1c:	480c      	ldr	r0, [pc, #48]	; (8009f50 <prvInitialiseTaskLists+0x6c>)
 8009f1e:	f7fe fc5b 	bl	80087d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009f22:	480c      	ldr	r0, [pc, #48]	; (8009f54 <prvInitialiseTaskLists+0x70>)
 8009f24:	f7fe fc58 	bl	80087d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009f28:	480b      	ldr	r0, [pc, #44]	; (8009f58 <prvInitialiseTaskLists+0x74>)
 8009f2a:	f7fe fc55 	bl	80087d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009f2e:	4b0b      	ldr	r3, [pc, #44]	; (8009f5c <prvInitialiseTaskLists+0x78>)
 8009f30:	4a05      	ldr	r2, [pc, #20]	; (8009f48 <prvInitialiseTaskLists+0x64>)
 8009f32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009f34:	4b0a      	ldr	r3, [pc, #40]	; (8009f60 <prvInitialiseTaskLists+0x7c>)
 8009f36:	4a05      	ldr	r2, [pc, #20]	; (8009f4c <prvInitialiseTaskLists+0x68>)
 8009f38:	601a      	str	r2, [r3, #0]
}
 8009f3a:	bf00      	nop
 8009f3c:	3708      	adds	r7, #8
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}
 8009f42:	bf00      	nop
 8009f44:	20000918 	.word	0x20000918
 8009f48:	20000d78 	.word	0x20000d78
 8009f4c:	20000d8c 	.word	0x20000d8c
 8009f50:	20000da8 	.word	0x20000da8
 8009f54:	20000dbc 	.word	0x20000dbc
 8009f58:	20000dd4 	.word	0x20000dd4
 8009f5c:	20000da0 	.word	0x20000da0
 8009f60:	20000da4 	.word	0x20000da4

08009f64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b082      	sub	sp, #8
 8009f68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009f6a:	e019      	b.n	8009fa0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009f6c:	f000 feba 	bl	800ace4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f70:	4b10      	ldr	r3, [pc, #64]	; (8009fb4 <prvCheckTasksWaitingTermination+0x50>)
 8009f72:	68db      	ldr	r3, [r3, #12]
 8009f74:	68db      	ldr	r3, [r3, #12]
 8009f76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	3304      	adds	r3, #4
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f7fe fcb5 	bl	80088ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009f82:	4b0d      	ldr	r3, [pc, #52]	; (8009fb8 <prvCheckTasksWaitingTermination+0x54>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	3b01      	subs	r3, #1
 8009f88:	4a0b      	ldr	r2, [pc, #44]	; (8009fb8 <prvCheckTasksWaitingTermination+0x54>)
 8009f8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009f8c:	4b0b      	ldr	r3, [pc, #44]	; (8009fbc <prvCheckTasksWaitingTermination+0x58>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	3b01      	subs	r3, #1
 8009f92:	4a0a      	ldr	r2, [pc, #40]	; (8009fbc <prvCheckTasksWaitingTermination+0x58>)
 8009f94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009f96:	f000 fed5 	bl	800ad44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f000 f810 	bl	8009fc0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009fa0:	4b06      	ldr	r3, [pc, #24]	; (8009fbc <prvCheckTasksWaitingTermination+0x58>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d1e1      	bne.n	8009f6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009fa8:	bf00      	nop
 8009faa:	bf00      	nop
 8009fac:	3708      	adds	r7, #8
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}
 8009fb2:	bf00      	nop
 8009fb4:	20000dbc 	.word	0x20000dbc
 8009fb8:	20000de8 	.word	0x20000de8
 8009fbc:	20000dd0 	.word	0x20000dd0

08009fc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b084      	sub	sp, #16
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d108      	bne.n	8009fe4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f001 f872 	bl	800b0c0 <vPortFree>
				vPortFree( pxTCB );
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f001 f86f 	bl	800b0c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009fe2:	e018      	b.n	800a016 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009fea:	2b01      	cmp	r3, #1
 8009fec:	d103      	bne.n	8009ff6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f001 f866 	bl	800b0c0 <vPortFree>
	}
 8009ff4:	e00f      	b.n	800a016 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009ffc:	2b02      	cmp	r3, #2
 8009ffe:	d00a      	beq.n	800a016 <prvDeleteTCB+0x56>
	__asm volatile
 800a000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a004:	f383 8811 	msr	BASEPRI, r3
 800a008:	f3bf 8f6f 	isb	sy
 800a00c:	f3bf 8f4f 	dsb	sy
 800a010:	60fb      	str	r3, [r7, #12]
}
 800a012:	bf00      	nop
 800a014:	e7fe      	b.n	800a014 <prvDeleteTCB+0x54>
	}
 800a016:	bf00      	nop
 800a018:	3710      	adds	r7, #16
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}
	...

0800a020 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a020:	b480      	push	{r7}
 800a022:	b083      	sub	sp, #12
 800a024:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a026:	4b0c      	ldr	r3, [pc, #48]	; (800a058 <prvResetNextTaskUnblockTime+0x38>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d104      	bne.n	800a03a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a030:	4b0a      	ldr	r3, [pc, #40]	; (800a05c <prvResetNextTaskUnblockTime+0x3c>)
 800a032:	f04f 32ff 	mov.w	r2, #4294967295
 800a036:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a038:	e008      	b.n	800a04c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a03a:	4b07      	ldr	r3, [pc, #28]	; (800a058 <prvResetNextTaskUnblockTime+0x38>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	68db      	ldr	r3, [r3, #12]
 800a040:	68db      	ldr	r3, [r3, #12]
 800a042:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	685b      	ldr	r3, [r3, #4]
 800a048:	4a04      	ldr	r2, [pc, #16]	; (800a05c <prvResetNextTaskUnblockTime+0x3c>)
 800a04a:	6013      	str	r3, [r2, #0]
}
 800a04c:	bf00      	nop
 800a04e:	370c      	adds	r7, #12
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr
 800a058:	20000da0 	.word	0x20000da0
 800a05c:	20000e08 	.word	0x20000e08

0800a060 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a060:	b480      	push	{r7}
 800a062:	b083      	sub	sp, #12
 800a064:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a066:	4b0b      	ldr	r3, [pc, #44]	; (800a094 <xTaskGetSchedulerState+0x34>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d102      	bne.n	800a074 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a06e:	2301      	movs	r3, #1
 800a070:	607b      	str	r3, [r7, #4]
 800a072:	e008      	b.n	800a086 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a074:	4b08      	ldr	r3, [pc, #32]	; (800a098 <xTaskGetSchedulerState+0x38>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d102      	bne.n	800a082 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a07c:	2302      	movs	r3, #2
 800a07e:	607b      	str	r3, [r7, #4]
 800a080:	e001      	b.n	800a086 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a082:	2300      	movs	r3, #0
 800a084:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a086:	687b      	ldr	r3, [r7, #4]
	}
 800a088:	4618      	mov	r0, r3
 800a08a:	370c      	adds	r7, #12
 800a08c:	46bd      	mov	sp, r7
 800a08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a092:	4770      	bx	lr
 800a094:	20000df4 	.word	0x20000df4
 800a098:	20000e10 	.word	0x20000e10

0800a09c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b086      	sub	sp, #24
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d056      	beq.n	800a160 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a0b2:	4b2e      	ldr	r3, [pc, #184]	; (800a16c <xTaskPriorityDisinherit+0xd0>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	693a      	ldr	r2, [r7, #16]
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	d00a      	beq.n	800a0d2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c0:	f383 8811 	msr	BASEPRI, r3
 800a0c4:	f3bf 8f6f 	isb	sy
 800a0c8:	f3bf 8f4f 	dsb	sy
 800a0cc:	60fb      	str	r3, [r7, #12]
}
 800a0ce:	bf00      	nop
 800a0d0:	e7fe      	b.n	800a0d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a0d2:	693b      	ldr	r3, [r7, #16]
 800a0d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d10a      	bne.n	800a0f0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0de:	f383 8811 	msr	BASEPRI, r3
 800a0e2:	f3bf 8f6f 	isb	sy
 800a0e6:	f3bf 8f4f 	dsb	sy
 800a0ea:	60bb      	str	r3, [r7, #8]
}
 800a0ec:	bf00      	nop
 800a0ee:	e7fe      	b.n	800a0ee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0f4:	1e5a      	subs	r2, r3, #1
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a102:	429a      	cmp	r2, r3
 800a104:	d02c      	beq.n	800a160 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d128      	bne.n	800a160 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	3304      	adds	r3, #4
 800a112:	4618      	mov	r0, r3
 800a114:	f7fe fbea 	bl	80088ec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a124:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a12c:	693b      	ldr	r3, [r7, #16]
 800a12e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a130:	4b0f      	ldr	r3, [pc, #60]	; (800a170 <xTaskPriorityDisinherit+0xd4>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	429a      	cmp	r2, r3
 800a136:	d903      	bls.n	800a140 <xTaskPriorityDisinherit+0xa4>
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a13c:	4a0c      	ldr	r2, [pc, #48]	; (800a170 <xTaskPriorityDisinherit+0xd4>)
 800a13e:	6013      	str	r3, [r2, #0]
 800a140:	693b      	ldr	r3, [r7, #16]
 800a142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a144:	4613      	mov	r3, r2
 800a146:	009b      	lsls	r3, r3, #2
 800a148:	4413      	add	r3, r2
 800a14a:	009b      	lsls	r3, r3, #2
 800a14c:	4a09      	ldr	r2, [pc, #36]	; (800a174 <xTaskPriorityDisinherit+0xd8>)
 800a14e:	441a      	add	r2, r3
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	3304      	adds	r3, #4
 800a154:	4619      	mov	r1, r3
 800a156:	4610      	mov	r0, r2
 800a158:	f7fe fb6b 	bl	8008832 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a15c:	2301      	movs	r3, #1
 800a15e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a160:	697b      	ldr	r3, [r7, #20]
	}
 800a162:	4618      	mov	r0, r3
 800a164:	3718      	adds	r7, #24
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
 800a16a:	bf00      	nop
 800a16c:	20000914 	.word	0x20000914
 800a170:	20000df0 	.word	0x20000df0
 800a174:	20000918 	.word	0x20000918

0800a178 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b084      	sub	sp, #16
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
 800a180:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a182:	4b21      	ldr	r3, [pc, #132]	; (800a208 <prvAddCurrentTaskToDelayedList+0x90>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a188:	4b20      	ldr	r3, [pc, #128]	; (800a20c <prvAddCurrentTaskToDelayedList+0x94>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	3304      	adds	r3, #4
 800a18e:	4618      	mov	r0, r3
 800a190:	f7fe fbac 	bl	80088ec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a19a:	d10a      	bne.n	800a1b2 <prvAddCurrentTaskToDelayedList+0x3a>
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d007      	beq.n	800a1b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1a2:	4b1a      	ldr	r3, [pc, #104]	; (800a20c <prvAddCurrentTaskToDelayedList+0x94>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	3304      	adds	r3, #4
 800a1a8:	4619      	mov	r1, r3
 800a1aa:	4819      	ldr	r0, [pc, #100]	; (800a210 <prvAddCurrentTaskToDelayedList+0x98>)
 800a1ac:	f7fe fb41 	bl	8008832 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a1b0:	e026      	b.n	800a200 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a1b2:	68fa      	ldr	r2, [r7, #12]
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	4413      	add	r3, r2
 800a1b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a1ba:	4b14      	ldr	r3, [pc, #80]	; (800a20c <prvAddCurrentTaskToDelayedList+0x94>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	68ba      	ldr	r2, [r7, #8]
 800a1c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a1c2:	68ba      	ldr	r2, [r7, #8]
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d209      	bcs.n	800a1de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1ca:	4b12      	ldr	r3, [pc, #72]	; (800a214 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a1cc:	681a      	ldr	r2, [r3, #0]
 800a1ce:	4b0f      	ldr	r3, [pc, #60]	; (800a20c <prvAddCurrentTaskToDelayedList+0x94>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	3304      	adds	r3, #4
 800a1d4:	4619      	mov	r1, r3
 800a1d6:	4610      	mov	r0, r2
 800a1d8:	f7fe fb4f 	bl	800887a <vListInsert>
}
 800a1dc:	e010      	b.n	800a200 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1de:	4b0e      	ldr	r3, [pc, #56]	; (800a218 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a1e0:	681a      	ldr	r2, [r3, #0]
 800a1e2:	4b0a      	ldr	r3, [pc, #40]	; (800a20c <prvAddCurrentTaskToDelayedList+0x94>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	3304      	adds	r3, #4
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	4610      	mov	r0, r2
 800a1ec:	f7fe fb45 	bl	800887a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a1f0:	4b0a      	ldr	r3, [pc, #40]	; (800a21c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	68ba      	ldr	r2, [r7, #8]
 800a1f6:	429a      	cmp	r2, r3
 800a1f8:	d202      	bcs.n	800a200 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a1fa:	4a08      	ldr	r2, [pc, #32]	; (800a21c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	6013      	str	r3, [r2, #0]
}
 800a200:	bf00      	nop
 800a202:	3710      	adds	r7, #16
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}
 800a208:	20000dec 	.word	0x20000dec
 800a20c:	20000914 	.word	0x20000914
 800a210:	20000dd4 	.word	0x20000dd4
 800a214:	20000da4 	.word	0x20000da4
 800a218:	20000da0 	.word	0x20000da0
 800a21c:	20000e08 	.word	0x20000e08

0800a220 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b08a      	sub	sp, #40	; 0x28
 800a224:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a226:	2300      	movs	r3, #0
 800a228:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a22a:	f000 fba1 	bl	800a970 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a22e:	4b1c      	ldr	r3, [pc, #112]	; (800a2a0 <xTimerCreateTimerTask+0x80>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d021      	beq.n	800a27a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a236:	2300      	movs	r3, #0
 800a238:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a23a:	2300      	movs	r3, #0
 800a23c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a23e:	1d3a      	adds	r2, r7, #4
 800a240:	f107 0108 	add.w	r1, r7, #8
 800a244:	f107 030c 	add.w	r3, r7, #12
 800a248:	4618      	mov	r0, r3
 800a24a:	f7fe faab 	bl	80087a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a24e:	6879      	ldr	r1, [r7, #4]
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	68fa      	ldr	r2, [r7, #12]
 800a254:	9202      	str	r2, [sp, #8]
 800a256:	9301      	str	r3, [sp, #4]
 800a258:	2302      	movs	r3, #2
 800a25a:	9300      	str	r3, [sp, #0]
 800a25c:	2300      	movs	r3, #0
 800a25e:	460a      	mov	r2, r1
 800a260:	4910      	ldr	r1, [pc, #64]	; (800a2a4 <xTimerCreateTimerTask+0x84>)
 800a262:	4811      	ldr	r0, [pc, #68]	; (800a2a8 <xTimerCreateTimerTask+0x88>)
 800a264:	f7ff f912 	bl	800948c <xTaskCreateStatic>
 800a268:	4603      	mov	r3, r0
 800a26a:	4a10      	ldr	r2, [pc, #64]	; (800a2ac <xTimerCreateTimerTask+0x8c>)
 800a26c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a26e:	4b0f      	ldr	r3, [pc, #60]	; (800a2ac <xTimerCreateTimerTask+0x8c>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d001      	beq.n	800a27a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a276:	2301      	movs	r3, #1
 800a278:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d10a      	bne.n	800a296 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a284:	f383 8811 	msr	BASEPRI, r3
 800a288:	f3bf 8f6f 	isb	sy
 800a28c:	f3bf 8f4f 	dsb	sy
 800a290:	613b      	str	r3, [r7, #16]
}
 800a292:	bf00      	nop
 800a294:	e7fe      	b.n	800a294 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a296:	697b      	ldr	r3, [r7, #20]
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3718      	adds	r7, #24
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}
 800a2a0:	20000e44 	.word	0x20000e44
 800a2a4:	0800bc00 	.word	0x0800bc00
 800a2a8:	0800a519 	.word	0x0800a519
 800a2ac:	20000e48 	.word	0x20000e48

0800a2b0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b088      	sub	sp, #32
 800a2b4:	af02      	add	r7, sp, #8
 800a2b6:	60f8      	str	r0, [r7, #12]
 800a2b8:	60b9      	str	r1, [r7, #8]
 800a2ba:	607a      	str	r2, [r7, #4]
 800a2bc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800a2be:	202c      	movs	r0, #44	; 0x2c
 800a2c0:	f000 fe32 	bl	800af28 <pvPortMalloc>
 800a2c4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d00d      	beq.n	800a2e8 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	9301      	str	r3, [sp, #4]
 800a2d8:	6a3b      	ldr	r3, [r7, #32]
 800a2da:	9300      	str	r3, [sp, #0]
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	687a      	ldr	r2, [r7, #4]
 800a2e0:	68b9      	ldr	r1, [r7, #8]
 800a2e2:	68f8      	ldr	r0, [r7, #12]
 800a2e4:	f000 f843 	bl	800a36e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800a2e8:	697b      	ldr	r3, [r7, #20]
	}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3718      	adds	r7, #24
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}

0800a2f2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800a2f2:	b580      	push	{r7, lr}
 800a2f4:	b08a      	sub	sp, #40	; 0x28
 800a2f6:	af02      	add	r7, sp, #8
 800a2f8:	60f8      	str	r0, [r7, #12]
 800a2fa:	60b9      	str	r1, [r7, #8]
 800a2fc:	607a      	str	r2, [r7, #4]
 800a2fe:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800a300:	232c      	movs	r3, #44	; 0x2c
 800a302:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	2b2c      	cmp	r3, #44	; 0x2c
 800a308:	d00a      	beq.n	800a320 <xTimerCreateStatic+0x2e>
	__asm volatile
 800a30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a30e:	f383 8811 	msr	BASEPRI, r3
 800a312:	f3bf 8f6f 	isb	sy
 800a316:	f3bf 8f4f 	dsb	sy
 800a31a:	61bb      	str	r3, [r7, #24]
}
 800a31c:	bf00      	nop
 800a31e:	e7fe      	b.n	800a31e <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a320:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800a322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a324:	2b00      	cmp	r3, #0
 800a326:	d10a      	bne.n	800a33e <xTimerCreateStatic+0x4c>
	__asm volatile
 800a328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a32c:	f383 8811 	msr	BASEPRI, r3
 800a330:	f3bf 8f6f 	isb	sy
 800a334:	f3bf 8f4f 	dsb	sy
 800a338:	617b      	str	r3, [r7, #20]
}
 800a33a:	bf00      	nop
 800a33c:	e7fe      	b.n	800a33c <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800a33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a340:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800a342:	69fb      	ldr	r3, [r7, #28]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d00d      	beq.n	800a364 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800a348:	69fb      	ldr	r3, [r7, #28]
 800a34a:	2202      	movs	r2, #2
 800a34c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a350:	69fb      	ldr	r3, [r7, #28]
 800a352:	9301      	str	r3, [sp, #4]
 800a354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a356:	9300      	str	r3, [sp, #0]
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	687a      	ldr	r2, [r7, #4]
 800a35c:	68b9      	ldr	r1, [r7, #8]
 800a35e:	68f8      	ldr	r0, [r7, #12]
 800a360:	f000 f805 	bl	800a36e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800a364:	69fb      	ldr	r3, [r7, #28]
	}
 800a366:	4618      	mov	r0, r3
 800a368:	3720      	adds	r7, #32
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}

0800a36e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800a36e:	b580      	push	{r7, lr}
 800a370:	b086      	sub	sp, #24
 800a372:	af00      	add	r7, sp, #0
 800a374:	60f8      	str	r0, [r7, #12]
 800a376:	60b9      	str	r1, [r7, #8]
 800a378:	607a      	str	r2, [r7, #4]
 800a37a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d10a      	bne.n	800a398 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800a382:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a386:	f383 8811 	msr	BASEPRI, r3
 800a38a:	f3bf 8f6f 	isb	sy
 800a38e:	f3bf 8f4f 	dsb	sy
 800a392:	617b      	str	r3, [r7, #20]
}
 800a394:	bf00      	nop
 800a396:	e7fe      	b.n	800a396 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800a398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d01e      	beq.n	800a3dc <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800a39e:	f000 fae7 	bl	800a970 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800a3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a4:	68fa      	ldr	r2, [r7, #12]
 800a3a6:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800a3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3aa:	68ba      	ldr	r2, [r7, #8]
 800a3ac:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800a3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b0:	683a      	ldr	r2, [r7, #0]
 800a3b2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800a3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b6:	6a3a      	ldr	r2, [r7, #32]
 800a3b8:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800a3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3bc:	3304      	adds	r3, #4
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f7fe fa2a 	bl	8008818 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d008      	beq.n	800a3dc <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800a3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3d0:	f043 0304 	orr.w	r3, r3, #4
 800a3d4:	b2da      	uxtb	r2, r3
 800a3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800a3dc:	bf00      	nop
 800a3de:	3718      	adds	r7, #24
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b08a      	sub	sp, #40	; 0x28
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	60f8      	str	r0, [r7, #12]
 800a3ec:	60b9      	str	r1, [r7, #8]
 800a3ee:	607a      	str	r2, [r7, #4]
 800a3f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d10a      	bne.n	800a412 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a3fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a400:	f383 8811 	msr	BASEPRI, r3
 800a404:	f3bf 8f6f 	isb	sy
 800a408:	f3bf 8f4f 	dsb	sy
 800a40c:	623b      	str	r3, [r7, #32]
}
 800a40e:	bf00      	nop
 800a410:	e7fe      	b.n	800a410 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a412:	4b1a      	ldr	r3, [pc, #104]	; (800a47c <xTimerGenericCommand+0x98>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d02a      	beq.n	800a470 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	2b05      	cmp	r3, #5
 800a42a:	dc18      	bgt.n	800a45e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a42c:	f7ff fe18 	bl	800a060 <xTaskGetSchedulerState>
 800a430:	4603      	mov	r3, r0
 800a432:	2b02      	cmp	r3, #2
 800a434:	d109      	bne.n	800a44a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a436:	4b11      	ldr	r3, [pc, #68]	; (800a47c <xTimerGenericCommand+0x98>)
 800a438:	6818      	ldr	r0, [r3, #0]
 800a43a:	f107 0110 	add.w	r1, r7, #16
 800a43e:	2300      	movs	r3, #0
 800a440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a442:	f7fe fbbb 	bl	8008bbc <xQueueGenericSend>
 800a446:	6278      	str	r0, [r7, #36]	; 0x24
 800a448:	e012      	b.n	800a470 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a44a:	4b0c      	ldr	r3, [pc, #48]	; (800a47c <xTimerGenericCommand+0x98>)
 800a44c:	6818      	ldr	r0, [r3, #0]
 800a44e:	f107 0110 	add.w	r1, r7, #16
 800a452:	2300      	movs	r3, #0
 800a454:	2200      	movs	r2, #0
 800a456:	f7fe fbb1 	bl	8008bbc <xQueueGenericSend>
 800a45a:	6278      	str	r0, [r7, #36]	; 0x24
 800a45c:	e008      	b.n	800a470 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a45e:	4b07      	ldr	r3, [pc, #28]	; (800a47c <xTimerGenericCommand+0x98>)
 800a460:	6818      	ldr	r0, [r3, #0]
 800a462:	f107 0110 	add.w	r1, r7, #16
 800a466:	2300      	movs	r3, #0
 800a468:	683a      	ldr	r2, [r7, #0]
 800a46a:	f7fe fca5 	bl	8008db8 <xQueueGenericSendFromISR>
 800a46e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a472:	4618      	mov	r0, r3
 800a474:	3728      	adds	r7, #40	; 0x28
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}
 800a47a:	bf00      	nop
 800a47c:	20000e44 	.word	0x20000e44

0800a480 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b088      	sub	sp, #32
 800a484:	af02      	add	r7, sp, #8
 800a486:	6078      	str	r0, [r7, #4]
 800a488:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a48a:	4b22      	ldr	r3, [pc, #136]	; (800a514 <prvProcessExpiredTimer+0x94>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	68db      	ldr	r3, [r3, #12]
 800a490:	68db      	ldr	r3, [r3, #12]
 800a492:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a494:	697b      	ldr	r3, [r7, #20]
 800a496:	3304      	adds	r3, #4
 800a498:	4618      	mov	r0, r3
 800a49a:	f7fe fa27 	bl	80088ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4a4:	f003 0304 	and.w	r3, r3, #4
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d022      	beq.n	800a4f2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a4ac:	697b      	ldr	r3, [r7, #20]
 800a4ae:	699a      	ldr	r2, [r3, #24]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	18d1      	adds	r1, r2, r3
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	683a      	ldr	r2, [r7, #0]
 800a4b8:	6978      	ldr	r0, [r7, #20]
 800a4ba:	f000 f8d1 	bl	800a660 <prvInsertTimerInActiveList>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d01f      	beq.n	800a504 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	9300      	str	r3, [sp, #0]
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	687a      	ldr	r2, [r7, #4]
 800a4cc:	2100      	movs	r1, #0
 800a4ce:	6978      	ldr	r0, [r7, #20]
 800a4d0:	f7ff ff88 	bl	800a3e4 <xTimerGenericCommand>
 800a4d4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d113      	bne.n	800a504 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e0:	f383 8811 	msr	BASEPRI, r3
 800a4e4:	f3bf 8f6f 	isb	sy
 800a4e8:	f3bf 8f4f 	dsb	sy
 800a4ec:	60fb      	str	r3, [r7, #12]
}
 800a4ee:	bf00      	nop
 800a4f0:	e7fe      	b.n	800a4f0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4f8:	f023 0301 	bic.w	r3, r3, #1
 800a4fc:	b2da      	uxtb	r2, r3
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	6a1b      	ldr	r3, [r3, #32]
 800a508:	6978      	ldr	r0, [r7, #20]
 800a50a:	4798      	blx	r3
}
 800a50c:	bf00      	nop
 800a50e:	3718      	adds	r7, #24
 800a510:	46bd      	mov	sp, r7
 800a512:	bd80      	pop	{r7, pc}
 800a514:	20000e3c 	.word	0x20000e3c

0800a518 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b084      	sub	sp, #16
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a520:	f107 0308 	add.w	r3, r7, #8
 800a524:	4618      	mov	r0, r3
 800a526:	f000 f857 	bl	800a5d8 <prvGetNextExpireTime>
 800a52a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	4619      	mov	r1, r3
 800a530:	68f8      	ldr	r0, [r7, #12]
 800a532:	f000 f803 	bl	800a53c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a536:	f000 f8d5 	bl	800a6e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a53a:	e7f1      	b.n	800a520 <prvTimerTask+0x8>

0800a53c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b084      	sub	sp, #16
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
 800a544:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a546:	f7ff f9a9 	bl	800989c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a54a:	f107 0308 	add.w	r3, r7, #8
 800a54e:	4618      	mov	r0, r3
 800a550:	f000 f866 	bl	800a620 <prvSampleTimeNow>
 800a554:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d130      	bne.n	800a5be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d10a      	bne.n	800a578 <prvProcessTimerOrBlockTask+0x3c>
 800a562:	687a      	ldr	r2, [r7, #4]
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	429a      	cmp	r2, r3
 800a568:	d806      	bhi.n	800a578 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a56a:	f7ff f9a5 	bl	80098b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a56e:	68f9      	ldr	r1, [r7, #12]
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f7ff ff85 	bl	800a480 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a576:	e024      	b.n	800a5c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d008      	beq.n	800a590 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a57e:	4b13      	ldr	r3, [pc, #76]	; (800a5cc <prvProcessTimerOrBlockTask+0x90>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d101      	bne.n	800a58c <prvProcessTimerOrBlockTask+0x50>
 800a588:	2301      	movs	r3, #1
 800a58a:	e000      	b.n	800a58e <prvProcessTimerOrBlockTask+0x52>
 800a58c:	2300      	movs	r3, #0
 800a58e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a590:	4b0f      	ldr	r3, [pc, #60]	; (800a5d0 <prvProcessTimerOrBlockTask+0x94>)
 800a592:	6818      	ldr	r0, [r3, #0]
 800a594:	687a      	ldr	r2, [r7, #4]
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	1ad3      	subs	r3, r2, r3
 800a59a:	683a      	ldr	r2, [r7, #0]
 800a59c:	4619      	mov	r1, r3
 800a59e:	f7fe ff41 	bl	8009424 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a5a2:	f7ff f989 	bl	80098b8 <xTaskResumeAll>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d10a      	bne.n	800a5c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a5ac:	4b09      	ldr	r3, [pc, #36]	; (800a5d4 <prvProcessTimerOrBlockTask+0x98>)
 800a5ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5b2:	601a      	str	r2, [r3, #0]
 800a5b4:	f3bf 8f4f 	dsb	sy
 800a5b8:	f3bf 8f6f 	isb	sy
}
 800a5bc:	e001      	b.n	800a5c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a5be:	f7ff f97b 	bl	80098b8 <xTaskResumeAll>
}
 800a5c2:	bf00      	nop
 800a5c4:	3710      	adds	r7, #16
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}
 800a5ca:	bf00      	nop
 800a5cc:	20000e40 	.word	0x20000e40
 800a5d0:	20000e44 	.word	0x20000e44
 800a5d4:	e000ed04 	.word	0xe000ed04

0800a5d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b085      	sub	sp, #20
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a5e0:	4b0e      	ldr	r3, [pc, #56]	; (800a61c <prvGetNextExpireTime+0x44>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d101      	bne.n	800a5ee <prvGetNextExpireTime+0x16>
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	e000      	b.n	800a5f0 <prvGetNextExpireTime+0x18>
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d105      	bne.n	800a608 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a5fc:	4b07      	ldr	r3, [pc, #28]	; (800a61c <prvGetNextExpireTime+0x44>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	68db      	ldr	r3, [r3, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	60fb      	str	r3, [r7, #12]
 800a606:	e001      	b.n	800a60c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a608:	2300      	movs	r3, #0
 800a60a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a60c:	68fb      	ldr	r3, [r7, #12]
}
 800a60e:	4618      	mov	r0, r3
 800a610:	3714      	adds	r7, #20
 800a612:	46bd      	mov	sp, r7
 800a614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a618:	4770      	bx	lr
 800a61a:	bf00      	nop
 800a61c:	20000e3c 	.word	0x20000e3c

0800a620 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b084      	sub	sp, #16
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a628:	f7ff f9e4 	bl	80099f4 <xTaskGetTickCount>
 800a62c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a62e:	4b0b      	ldr	r3, [pc, #44]	; (800a65c <prvSampleTimeNow+0x3c>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	68fa      	ldr	r2, [r7, #12]
 800a634:	429a      	cmp	r2, r3
 800a636:	d205      	bcs.n	800a644 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a638:	f000 f936 	bl	800a8a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2201      	movs	r2, #1
 800a640:	601a      	str	r2, [r3, #0]
 800a642:	e002      	b.n	800a64a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2200      	movs	r2, #0
 800a648:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a64a:	4a04      	ldr	r2, [pc, #16]	; (800a65c <prvSampleTimeNow+0x3c>)
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a650:	68fb      	ldr	r3, [r7, #12]
}
 800a652:	4618      	mov	r0, r3
 800a654:	3710      	adds	r7, #16
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}
 800a65a:	bf00      	nop
 800a65c:	20000e4c 	.word	0x20000e4c

0800a660 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b086      	sub	sp, #24
 800a664:	af00      	add	r7, sp, #0
 800a666:	60f8      	str	r0, [r7, #12]
 800a668:	60b9      	str	r1, [r7, #8]
 800a66a:	607a      	str	r2, [r7, #4]
 800a66c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a66e:	2300      	movs	r3, #0
 800a670:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	68ba      	ldr	r2, [r7, #8]
 800a676:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	68fa      	ldr	r2, [r7, #12]
 800a67c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a67e:	68ba      	ldr	r2, [r7, #8]
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	429a      	cmp	r2, r3
 800a684:	d812      	bhi.n	800a6ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a686:	687a      	ldr	r2, [r7, #4]
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	1ad2      	subs	r2, r2, r3
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	699b      	ldr	r3, [r3, #24]
 800a690:	429a      	cmp	r2, r3
 800a692:	d302      	bcc.n	800a69a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a694:	2301      	movs	r3, #1
 800a696:	617b      	str	r3, [r7, #20]
 800a698:	e01b      	b.n	800a6d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a69a:	4b10      	ldr	r3, [pc, #64]	; (800a6dc <prvInsertTimerInActiveList+0x7c>)
 800a69c:	681a      	ldr	r2, [r3, #0]
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	3304      	adds	r3, #4
 800a6a2:	4619      	mov	r1, r3
 800a6a4:	4610      	mov	r0, r2
 800a6a6:	f7fe f8e8 	bl	800887a <vListInsert>
 800a6aa:	e012      	b.n	800a6d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a6ac:	687a      	ldr	r2, [r7, #4]
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	d206      	bcs.n	800a6c2 <prvInsertTimerInActiveList+0x62>
 800a6b4:	68ba      	ldr	r2, [r7, #8]
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	429a      	cmp	r2, r3
 800a6ba:	d302      	bcc.n	800a6c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a6bc:	2301      	movs	r3, #1
 800a6be:	617b      	str	r3, [r7, #20]
 800a6c0:	e007      	b.n	800a6d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a6c2:	4b07      	ldr	r3, [pc, #28]	; (800a6e0 <prvInsertTimerInActiveList+0x80>)
 800a6c4:	681a      	ldr	r2, [r3, #0]
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	3304      	adds	r3, #4
 800a6ca:	4619      	mov	r1, r3
 800a6cc:	4610      	mov	r0, r2
 800a6ce:	f7fe f8d4 	bl	800887a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a6d2:	697b      	ldr	r3, [r7, #20]
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	3718      	adds	r7, #24
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}
 800a6dc:	20000e40 	.word	0x20000e40
 800a6e0:	20000e3c 	.word	0x20000e3c

0800a6e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b08e      	sub	sp, #56	; 0x38
 800a6e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a6ea:	e0ca      	b.n	800a882 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	da18      	bge.n	800a724 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a6f2:	1d3b      	adds	r3, r7, #4
 800a6f4:	3304      	adds	r3, #4
 800a6f6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d10a      	bne.n	800a714 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a6fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a702:	f383 8811 	msr	BASEPRI, r3
 800a706:	f3bf 8f6f 	isb	sy
 800a70a:	f3bf 8f4f 	dsb	sy
 800a70e:	61fb      	str	r3, [r7, #28]
}
 800a710:	bf00      	nop
 800a712:	e7fe      	b.n	800a712 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a71a:	6850      	ldr	r0, [r2, #4]
 800a71c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a71e:	6892      	ldr	r2, [r2, #8]
 800a720:	4611      	mov	r1, r2
 800a722:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2b00      	cmp	r3, #0
 800a728:	f2c0 80ab 	blt.w	800a882 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a732:	695b      	ldr	r3, [r3, #20]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d004      	beq.n	800a742 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a73a:	3304      	adds	r3, #4
 800a73c:	4618      	mov	r0, r3
 800a73e:	f7fe f8d5 	bl	80088ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a742:	463b      	mov	r3, r7
 800a744:	4618      	mov	r0, r3
 800a746:	f7ff ff6b 	bl	800a620 <prvSampleTimeNow>
 800a74a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2b09      	cmp	r3, #9
 800a750:	f200 8096 	bhi.w	800a880 <prvProcessReceivedCommands+0x19c>
 800a754:	a201      	add	r2, pc, #4	; (adr r2, 800a75c <prvProcessReceivedCommands+0x78>)
 800a756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a75a:	bf00      	nop
 800a75c:	0800a785 	.word	0x0800a785
 800a760:	0800a785 	.word	0x0800a785
 800a764:	0800a785 	.word	0x0800a785
 800a768:	0800a7f9 	.word	0x0800a7f9
 800a76c:	0800a80d 	.word	0x0800a80d
 800a770:	0800a857 	.word	0x0800a857
 800a774:	0800a785 	.word	0x0800a785
 800a778:	0800a785 	.word	0x0800a785
 800a77c:	0800a7f9 	.word	0x0800a7f9
 800a780:	0800a80d 	.word	0x0800a80d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a786:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a78a:	f043 0301 	orr.w	r3, r3, #1
 800a78e:	b2da      	uxtb	r2, r3
 800a790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a792:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a796:	68ba      	ldr	r2, [r7, #8]
 800a798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a79a:	699b      	ldr	r3, [r3, #24]
 800a79c:	18d1      	adds	r1, r2, r3
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7a4:	f7ff ff5c 	bl	800a660 <prvInsertTimerInActiveList>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d069      	beq.n	800a882 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b0:	6a1b      	ldr	r3, [r3, #32]
 800a7b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7bc:	f003 0304 	and.w	r3, r3, #4
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d05e      	beq.n	800a882 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a7c4:	68ba      	ldr	r2, [r7, #8]
 800a7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c8:	699b      	ldr	r3, [r3, #24]
 800a7ca:	441a      	add	r2, r3
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	9300      	str	r3, [sp, #0]
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	2100      	movs	r1, #0
 800a7d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7d6:	f7ff fe05 	bl	800a3e4 <xTimerGenericCommand>
 800a7da:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a7dc:	6a3b      	ldr	r3, [r7, #32]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d14f      	bne.n	800a882 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a7e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e6:	f383 8811 	msr	BASEPRI, r3
 800a7ea:	f3bf 8f6f 	isb	sy
 800a7ee:	f3bf 8f4f 	dsb	sy
 800a7f2:	61bb      	str	r3, [r7, #24]
}
 800a7f4:	bf00      	nop
 800a7f6:	e7fe      	b.n	800a7f6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7fe:	f023 0301 	bic.w	r3, r3, #1
 800a802:	b2da      	uxtb	r2, r3
 800a804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a806:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a80a:	e03a      	b.n	800a882 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a80e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a812:	f043 0301 	orr.w	r3, r3, #1
 800a816:	b2da      	uxtb	r2, r3
 800a818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a81a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a81e:	68ba      	ldr	r2, [r7, #8]
 800a820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a822:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a826:	699b      	ldr	r3, [r3, #24]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d10a      	bne.n	800a842 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a82c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a830:	f383 8811 	msr	BASEPRI, r3
 800a834:	f3bf 8f6f 	isb	sy
 800a838:	f3bf 8f4f 	dsb	sy
 800a83c:	617b      	str	r3, [r7, #20]
}
 800a83e:	bf00      	nop
 800a840:	e7fe      	b.n	800a840 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a844:	699a      	ldr	r2, [r3, #24]
 800a846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a848:	18d1      	adds	r1, r2, r3
 800a84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a84c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a84e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a850:	f7ff ff06 	bl	800a660 <prvInsertTimerInActiveList>
					break;
 800a854:	e015      	b.n	800a882 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a858:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a85c:	f003 0302 	and.w	r3, r3, #2
 800a860:	2b00      	cmp	r3, #0
 800a862:	d103      	bne.n	800a86c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a864:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a866:	f000 fc2b 	bl	800b0c0 <vPortFree>
 800a86a:	e00a      	b.n	800a882 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a86c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a86e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a872:	f023 0301 	bic.w	r3, r3, #1
 800a876:	b2da      	uxtb	r2, r3
 800a878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a87a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a87e:	e000      	b.n	800a882 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800a880:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a882:	4b08      	ldr	r3, [pc, #32]	; (800a8a4 <prvProcessReceivedCommands+0x1c0>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	1d39      	adds	r1, r7, #4
 800a888:	2200      	movs	r2, #0
 800a88a:	4618      	mov	r0, r3
 800a88c:	f7fe fb30 	bl	8008ef0 <xQueueReceive>
 800a890:	4603      	mov	r3, r0
 800a892:	2b00      	cmp	r3, #0
 800a894:	f47f af2a 	bne.w	800a6ec <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a898:	bf00      	nop
 800a89a:	bf00      	nop
 800a89c:	3730      	adds	r7, #48	; 0x30
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}
 800a8a2:	bf00      	nop
 800a8a4:	20000e44 	.word	0x20000e44

0800a8a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b088      	sub	sp, #32
 800a8ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a8ae:	e048      	b.n	800a942 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a8b0:	4b2d      	ldr	r3, [pc, #180]	; (800a968 <prvSwitchTimerLists+0xc0>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	68db      	ldr	r3, [r3, #12]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8ba:	4b2b      	ldr	r3, [pc, #172]	; (800a968 <prvSwitchTimerLists+0xc0>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	68db      	ldr	r3, [r3, #12]
 800a8c0:	68db      	ldr	r3, [r3, #12]
 800a8c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	3304      	adds	r3, #4
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f7fe f80f 	bl	80088ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	6a1b      	ldr	r3, [r3, #32]
 800a8d2:	68f8      	ldr	r0, [r7, #12]
 800a8d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a8dc:	f003 0304 	and.w	r3, r3, #4
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d02e      	beq.n	800a942 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	699b      	ldr	r3, [r3, #24]
 800a8e8:	693a      	ldr	r2, [r7, #16]
 800a8ea:	4413      	add	r3, r2
 800a8ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a8ee:	68ba      	ldr	r2, [r7, #8]
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	d90e      	bls.n	800a914 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	68ba      	ldr	r2, [r7, #8]
 800a8fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	68fa      	ldr	r2, [r7, #12]
 800a900:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a902:	4b19      	ldr	r3, [pc, #100]	; (800a968 <prvSwitchTimerLists+0xc0>)
 800a904:	681a      	ldr	r2, [r3, #0]
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	3304      	adds	r3, #4
 800a90a:	4619      	mov	r1, r3
 800a90c:	4610      	mov	r0, r2
 800a90e:	f7fd ffb4 	bl	800887a <vListInsert>
 800a912:	e016      	b.n	800a942 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a914:	2300      	movs	r3, #0
 800a916:	9300      	str	r3, [sp, #0]
 800a918:	2300      	movs	r3, #0
 800a91a:	693a      	ldr	r2, [r7, #16]
 800a91c:	2100      	movs	r1, #0
 800a91e:	68f8      	ldr	r0, [r7, #12]
 800a920:	f7ff fd60 	bl	800a3e4 <xTimerGenericCommand>
 800a924:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d10a      	bne.n	800a942 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a92c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a930:	f383 8811 	msr	BASEPRI, r3
 800a934:	f3bf 8f6f 	isb	sy
 800a938:	f3bf 8f4f 	dsb	sy
 800a93c:	603b      	str	r3, [r7, #0]
}
 800a93e:	bf00      	nop
 800a940:	e7fe      	b.n	800a940 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a942:	4b09      	ldr	r3, [pc, #36]	; (800a968 <prvSwitchTimerLists+0xc0>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d1b1      	bne.n	800a8b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a94c:	4b06      	ldr	r3, [pc, #24]	; (800a968 <prvSwitchTimerLists+0xc0>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a952:	4b06      	ldr	r3, [pc, #24]	; (800a96c <prvSwitchTimerLists+0xc4>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	4a04      	ldr	r2, [pc, #16]	; (800a968 <prvSwitchTimerLists+0xc0>)
 800a958:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a95a:	4a04      	ldr	r2, [pc, #16]	; (800a96c <prvSwitchTimerLists+0xc4>)
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	6013      	str	r3, [r2, #0]
}
 800a960:	bf00      	nop
 800a962:	3718      	adds	r7, #24
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}
 800a968:	20000e3c 	.word	0x20000e3c
 800a96c:	20000e40 	.word	0x20000e40

0800a970 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b082      	sub	sp, #8
 800a974:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a976:	f000 f9b5 	bl	800ace4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a97a:	4b15      	ldr	r3, [pc, #84]	; (800a9d0 <prvCheckForValidListAndQueue+0x60>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d120      	bne.n	800a9c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a982:	4814      	ldr	r0, [pc, #80]	; (800a9d4 <prvCheckForValidListAndQueue+0x64>)
 800a984:	f7fd ff28 	bl	80087d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a988:	4813      	ldr	r0, [pc, #76]	; (800a9d8 <prvCheckForValidListAndQueue+0x68>)
 800a98a:	f7fd ff25 	bl	80087d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a98e:	4b13      	ldr	r3, [pc, #76]	; (800a9dc <prvCheckForValidListAndQueue+0x6c>)
 800a990:	4a10      	ldr	r2, [pc, #64]	; (800a9d4 <prvCheckForValidListAndQueue+0x64>)
 800a992:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a994:	4b12      	ldr	r3, [pc, #72]	; (800a9e0 <prvCheckForValidListAndQueue+0x70>)
 800a996:	4a10      	ldr	r2, [pc, #64]	; (800a9d8 <prvCheckForValidListAndQueue+0x68>)
 800a998:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a99a:	2300      	movs	r3, #0
 800a99c:	9300      	str	r3, [sp, #0]
 800a99e:	4b11      	ldr	r3, [pc, #68]	; (800a9e4 <prvCheckForValidListAndQueue+0x74>)
 800a9a0:	4a11      	ldr	r2, [pc, #68]	; (800a9e8 <prvCheckForValidListAndQueue+0x78>)
 800a9a2:	2110      	movs	r1, #16
 800a9a4:	200a      	movs	r0, #10
 800a9a6:	f7fe f833 	bl	8008a10 <xQueueGenericCreateStatic>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	4a08      	ldr	r2, [pc, #32]	; (800a9d0 <prvCheckForValidListAndQueue+0x60>)
 800a9ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a9b0:	4b07      	ldr	r3, [pc, #28]	; (800a9d0 <prvCheckForValidListAndQueue+0x60>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d005      	beq.n	800a9c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a9b8:	4b05      	ldr	r3, [pc, #20]	; (800a9d0 <prvCheckForValidListAndQueue+0x60>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	490b      	ldr	r1, [pc, #44]	; (800a9ec <prvCheckForValidListAndQueue+0x7c>)
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f7fe fd06 	bl	80093d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a9c4:	f000 f9be 	bl	800ad44 <vPortExitCritical>
}
 800a9c8:	bf00      	nop
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}
 800a9ce:	bf00      	nop
 800a9d0:	20000e44 	.word	0x20000e44
 800a9d4:	20000e14 	.word	0x20000e14
 800a9d8:	20000e28 	.word	0x20000e28
 800a9dc:	20000e3c 	.word	0x20000e3c
 800a9e0:	20000e40 	.word	0x20000e40
 800a9e4:	20000ef0 	.word	0x20000ef0
 800a9e8:	20000e50 	.word	0x20000e50
 800a9ec:	0800bc08 	.word	0x0800bc08

0800a9f0 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b086      	sub	sp, #24
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d10a      	bne.n	800aa18 <xTimerIsTimerActive+0x28>
	__asm volatile
 800aa02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa06:	f383 8811 	msr	BASEPRI, r3
 800aa0a:	f3bf 8f6f 	isb	sy
 800aa0e:	f3bf 8f4f 	dsb	sy
 800aa12:	60fb      	str	r3, [r7, #12]
}
 800aa14:	bf00      	nop
 800aa16:	e7fe      	b.n	800aa16 <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800aa18:	f000 f964 	bl	800ace4 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 800aa1c:	693b      	ldr	r3, [r7, #16]
 800aa1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa22:	f003 0301 	and.w	r3, r3, #1
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d102      	bne.n	800aa30 <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	617b      	str	r3, [r7, #20]
 800aa2e:	e001      	b.n	800aa34 <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 800aa30:	2301      	movs	r3, #1
 800aa32:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800aa34:	f000 f986 	bl	800ad44 <vPortExitCritical>

	return xReturn;
 800aa38:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3718      	adds	r7, #24
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}

0800aa42 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800aa42:	b580      	push	{r7, lr}
 800aa44:	b086      	sub	sp, #24
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d10a      	bne.n	800aa6a <pvTimerGetTimerID+0x28>
	__asm volatile
 800aa54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa58:	f383 8811 	msr	BASEPRI, r3
 800aa5c:	f3bf 8f6f 	isb	sy
 800aa60:	f3bf 8f4f 	dsb	sy
 800aa64:	60fb      	str	r3, [r7, #12]
}
 800aa66:	bf00      	nop
 800aa68:	e7fe      	b.n	800aa68 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800aa6a:	f000 f93b 	bl	800ace4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	69db      	ldr	r3, [r3, #28]
 800aa72:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800aa74:	f000 f966 	bl	800ad44 <vPortExitCritical>

	return pvReturn;
 800aa78:	693b      	ldr	r3, [r7, #16]
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	3718      	adds	r7, #24
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}
	...

0800aa84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aa84:	b480      	push	{r7}
 800aa86:	b085      	sub	sp, #20
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	60f8      	str	r0, [r7, #12]
 800aa8c:	60b9      	str	r1, [r7, #8]
 800aa8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	3b04      	subs	r3, #4
 800aa94:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800aa9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	3b04      	subs	r3, #4
 800aaa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	f023 0201 	bic.w	r2, r3, #1
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	3b04      	subs	r3, #4
 800aab2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aab4:	4a0c      	ldr	r2, [pc, #48]	; (800aae8 <pxPortInitialiseStack+0x64>)
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	3b14      	subs	r3, #20
 800aabe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800aac0:	687a      	ldr	r2, [r7, #4]
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	3b04      	subs	r3, #4
 800aaca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	f06f 0202 	mvn.w	r2, #2
 800aad2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	3b20      	subs	r3, #32
 800aad8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800aada:	68fb      	ldr	r3, [r7, #12]
}
 800aadc:	4618      	mov	r0, r3
 800aade:	3714      	adds	r7, #20
 800aae0:	46bd      	mov	sp, r7
 800aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae6:	4770      	bx	lr
 800aae8:	0800aaed 	.word	0x0800aaed

0800aaec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aaec:	b480      	push	{r7}
 800aaee:	b085      	sub	sp, #20
 800aaf0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800aaf6:	4b12      	ldr	r3, [pc, #72]	; (800ab40 <prvTaskExitError+0x54>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aafe:	d00a      	beq.n	800ab16 <prvTaskExitError+0x2a>
	__asm volatile
 800ab00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab04:	f383 8811 	msr	BASEPRI, r3
 800ab08:	f3bf 8f6f 	isb	sy
 800ab0c:	f3bf 8f4f 	dsb	sy
 800ab10:	60fb      	str	r3, [r7, #12]
}
 800ab12:	bf00      	nop
 800ab14:	e7fe      	b.n	800ab14 <prvTaskExitError+0x28>
	__asm volatile
 800ab16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab1a:	f383 8811 	msr	BASEPRI, r3
 800ab1e:	f3bf 8f6f 	isb	sy
 800ab22:	f3bf 8f4f 	dsb	sy
 800ab26:	60bb      	str	r3, [r7, #8]
}
 800ab28:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ab2a:	bf00      	nop
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d0fc      	beq.n	800ab2c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ab32:	bf00      	nop
 800ab34:	bf00      	nop
 800ab36:	3714      	adds	r7, #20
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3e:	4770      	bx	lr
 800ab40:	20000030 	.word	0x20000030
	...

0800ab50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ab50:	4b07      	ldr	r3, [pc, #28]	; (800ab70 <pxCurrentTCBConst2>)
 800ab52:	6819      	ldr	r1, [r3, #0]
 800ab54:	6808      	ldr	r0, [r1, #0]
 800ab56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab5a:	f380 8809 	msr	PSP, r0
 800ab5e:	f3bf 8f6f 	isb	sy
 800ab62:	f04f 0000 	mov.w	r0, #0
 800ab66:	f380 8811 	msr	BASEPRI, r0
 800ab6a:	4770      	bx	lr
 800ab6c:	f3af 8000 	nop.w

0800ab70 <pxCurrentTCBConst2>:
 800ab70:	20000914 	.word	0x20000914
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ab74:	bf00      	nop
 800ab76:	bf00      	nop

0800ab78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ab78:	4808      	ldr	r0, [pc, #32]	; (800ab9c <prvPortStartFirstTask+0x24>)
 800ab7a:	6800      	ldr	r0, [r0, #0]
 800ab7c:	6800      	ldr	r0, [r0, #0]
 800ab7e:	f380 8808 	msr	MSP, r0
 800ab82:	f04f 0000 	mov.w	r0, #0
 800ab86:	f380 8814 	msr	CONTROL, r0
 800ab8a:	b662      	cpsie	i
 800ab8c:	b661      	cpsie	f
 800ab8e:	f3bf 8f4f 	dsb	sy
 800ab92:	f3bf 8f6f 	isb	sy
 800ab96:	df00      	svc	0
 800ab98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ab9a:	bf00      	nop
 800ab9c:	e000ed08 	.word	0xe000ed08

0800aba0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b086      	sub	sp, #24
 800aba4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800aba6:	4b46      	ldr	r3, [pc, #280]	; (800acc0 <xPortStartScheduler+0x120>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	4a46      	ldr	r2, [pc, #280]	; (800acc4 <xPortStartScheduler+0x124>)
 800abac:	4293      	cmp	r3, r2
 800abae:	d10a      	bne.n	800abc6 <xPortStartScheduler+0x26>
	__asm volatile
 800abb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb4:	f383 8811 	msr	BASEPRI, r3
 800abb8:	f3bf 8f6f 	isb	sy
 800abbc:	f3bf 8f4f 	dsb	sy
 800abc0:	613b      	str	r3, [r7, #16]
}
 800abc2:	bf00      	nop
 800abc4:	e7fe      	b.n	800abc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800abc6:	4b3e      	ldr	r3, [pc, #248]	; (800acc0 <xPortStartScheduler+0x120>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	4a3f      	ldr	r2, [pc, #252]	; (800acc8 <xPortStartScheduler+0x128>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	d10a      	bne.n	800abe6 <xPortStartScheduler+0x46>
	__asm volatile
 800abd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd4:	f383 8811 	msr	BASEPRI, r3
 800abd8:	f3bf 8f6f 	isb	sy
 800abdc:	f3bf 8f4f 	dsb	sy
 800abe0:	60fb      	str	r3, [r7, #12]
}
 800abe2:	bf00      	nop
 800abe4:	e7fe      	b.n	800abe4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800abe6:	4b39      	ldr	r3, [pc, #228]	; (800accc <xPortStartScheduler+0x12c>)
 800abe8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	781b      	ldrb	r3, [r3, #0]
 800abee:	b2db      	uxtb	r3, r3
 800abf0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	22ff      	movs	r2, #255	; 0xff
 800abf6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	781b      	ldrb	r3, [r3, #0]
 800abfc:	b2db      	uxtb	r3, r3
 800abfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ac00:	78fb      	ldrb	r3, [r7, #3]
 800ac02:	b2db      	uxtb	r3, r3
 800ac04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ac08:	b2da      	uxtb	r2, r3
 800ac0a:	4b31      	ldr	r3, [pc, #196]	; (800acd0 <xPortStartScheduler+0x130>)
 800ac0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ac0e:	4b31      	ldr	r3, [pc, #196]	; (800acd4 <xPortStartScheduler+0x134>)
 800ac10:	2207      	movs	r2, #7
 800ac12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ac14:	e009      	b.n	800ac2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ac16:	4b2f      	ldr	r3, [pc, #188]	; (800acd4 <xPortStartScheduler+0x134>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	3b01      	subs	r3, #1
 800ac1c:	4a2d      	ldr	r2, [pc, #180]	; (800acd4 <xPortStartScheduler+0x134>)
 800ac1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ac20:	78fb      	ldrb	r3, [r7, #3]
 800ac22:	b2db      	uxtb	r3, r3
 800ac24:	005b      	lsls	r3, r3, #1
 800ac26:	b2db      	uxtb	r3, r3
 800ac28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ac2a:	78fb      	ldrb	r3, [r7, #3]
 800ac2c:	b2db      	uxtb	r3, r3
 800ac2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac32:	2b80      	cmp	r3, #128	; 0x80
 800ac34:	d0ef      	beq.n	800ac16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ac36:	4b27      	ldr	r3, [pc, #156]	; (800acd4 <xPortStartScheduler+0x134>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f1c3 0307 	rsb	r3, r3, #7
 800ac3e:	2b04      	cmp	r3, #4
 800ac40:	d00a      	beq.n	800ac58 <xPortStartScheduler+0xb8>
	__asm volatile
 800ac42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac46:	f383 8811 	msr	BASEPRI, r3
 800ac4a:	f3bf 8f6f 	isb	sy
 800ac4e:	f3bf 8f4f 	dsb	sy
 800ac52:	60bb      	str	r3, [r7, #8]
}
 800ac54:	bf00      	nop
 800ac56:	e7fe      	b.n	800ac56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ac58:	4b1e      	ldr	r3, [pc, #120]	; (800acd4 <xPortStartScheduler+0x134>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	021b      	lsls	r3, r3, #8
 800ac5e:	4a1d      	ldr	r2, [pc, #116]	; (800acd4 <xPortStartScheduler+0x134>)
 800ac60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ac62:	4b1c      	ldr	r3, [pc, #112]	; (800acd4 <xPortStartScheduler+0x134>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ac6a:	4a1a      	ldr	r2, [pc, #104]	; (800acd4 <xPortStartScheduler+0x134>)
 800ac6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	b2da      	uxtb	r2, r3
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ac76:	4b18      	ldr	r3, [pc, #96]	; (800acd8 <xPortStartScheduler+0x138>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	4a17      	ldr	r2, [pc, #92]	; (800acd8 <xPortStartScheduler+0x138>)
 800ac7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ac80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ac82:	4b15      	ldr	r3, [pc, #84]	; (800acd8 <xPortStartScheduler+0x138>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	4a14      	ldr	r2, [pc, #80]	; (800acd8 <xPortStartScheduler+0x138>)
 800ac88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ac8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ac8e:	f000 f8dd 	bl	800ae4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ac92:	4b12      	ldr	r3, [pc, #72]	; (800acdc <xPortStartScheduler+0x13c>)
 800ac94:	2200      	movs	r2, #0
 800ac96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ac98:	f000 f8fc 	bl	800ae94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ac9c:	4b10      	ldr	r3, [pc, #64]	; (800ace0 <xPortStartScheduler+0x140>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	4a0f      	ldr	r2, [pc, #60]	; (800ace0 <xPortStartScheduler+0x140>)
 800aca2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800aca6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800aca8:	f7ff ff66 	bl	800ab78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800acac:	f7fe ff6c 	bl	8009b88 <vTaskSwitchContext>
	prvTaskExitError();
 800acb0:	f7ff ff1c 	bl	800aaec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800acb4:	2300      	movs	r3, #0
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	3718      	adds	r7, #24
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}
 800acbe:	bf00      	nop
 800acc0:	e000ed00 	.word	0xe000ed00
 800acc4:	410fc271 	.word	0x410fc271
 800acc8:	410fc270 	.word	0x410fc270
 800accc:	e000e400 	.word	0xe000e400
 800acd0:	20000f40 	.word	0x20000f40
 800acd4:	20000f44 	.word	0x20000f44
 800acd8:	e000ed20 	.word	0xe000ed20
 800acdc:	20000030 	.word	0x20000030
 800ace0:	e000ef34 	.word	0xe000ef34

0800ace4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ace4:	b480      	push	{r7}
 800ace6:	b083      	sub	sp, #12
 800ace8:	af00      	add	r7, sp, #0
	__asm volatile
 800acea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acee:	f383 8811 	msr	BASEPRI, r3
 800acf2:	f3bf 8f6f 	isb	sy
 800acf6:	f3bf 8f4f 	dsb	sy
 800acfa:	607b      	str	r3, [r7, #4]
}
 800acfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800acfe:	4b0f      	ldr	r3, [pc, #60]	; (800ad3c <vPortEnterCritical+0x58>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	3301      	adds	r3, #1
 800ad04:	4a0d      	ldr	r2, [pc, #52]	; (800ad3c <vPortEnterCritical+0x58>)
 800ad06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ad08:	4b0c      	ldr	r3, [pc, #48]	; (800ad3c <vPortEnterCritical+0x58>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	2b01      	cmp	r3, #1
 800ad0e:	d10f      	bne.n	800ad30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ad10:	4b0b      	ldr	r3, [pc, #44]	; (800ad40 <vPortEnterCritical+0x5c>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	b2db      	uxtb	r3, r3
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d00a      	beq.n	800ad30 <vPortEnterCritical+0x4c>
	__asm volatile
 800ad1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad1e:	f383 8811 	msr	BASEPRI, r3
 800ad22:	f3bf 8f6f 	isb	sy
 800ad26:	f3bf 8f4f 	dsb	sy
 800ad2a:	603b      	str	r3, [r7, #0]
}
 800ad2c:	bf00      	nop
 800ad2e:	e7fe      	b.n	800ad2e <vPortEnterCritical+0x4a>
	}
}
 800ad30:	bf00      	nop
 800ad32:	370c      	adds	r7, #12
 800ad34:	46bd      	mov	sp, r7
 800ad36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3a:	4770      	bx	lr
 800ad3c:	20000030 	.word	0x20000030
 800ad40:	e000ed04 	.word	0xe000ed04

0800ad44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ad44:	b480      	push	{r7}
 800ad46:	b083      	sub	sp, #12
 800ad48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ad4a:	4b12      	ldr	r3, [pc, #72]	; (800ad94 <vPortExitCritical+0x50>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d10a      	bne.n	800ad68 <vPortExitCritical+0x24>
	__asm volatile
 800ad52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad56:	f383 8811 	msr	BASEPRI, r3
 800ad5a:	f3bf 8f6f 	isb	sy
 800ad5e:	f3bf 8f4f 	dsb	sy
 800ad62:	607b      	str	r3, [r7, #4]
}
 800ad64:	bf00      	nop
 800ad66:	e7fe      	b.n	800ad66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ad68:	4b0a      	ldr	r3, [pc, #40]	; (800ad94 <vPortExitCritical+0x50>)
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	3b01      	subs	r3, #1
 800ad6e:	4a09      	ldr	r2, [pc, #36]	; (800ad94 <vPortExitCritical+0x50>)
 800ad70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ad72:	4b08      	ldr	r3, [pc, #32]	; (800ad94 <vPortExitCritical+0x50>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d105      	bne.n	800ad86 <vPortExitCritical+0x42>
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	f383 8811 	msr	BASEPRI, r3
}
 800ad84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ad86:	bf00      	nop
 800ad88:	370c      	adds	r7, #12
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad90:	4770      	bx	lr
 800ad92:	bf00      	nop
 800ad94:	20000030 	.word	0x20000030
	...

0800ada0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ada0:	f3ef 8009 	mrs	r0, PSP
 800ada4:	f3bf 8f6f 	isb	sy
 800ada8:	4b15      	ldr	r3, [pc, #84]	; (800ae00 <pxCurrentTCBConst>)
 800adaa:	681a      	ldr	r2, [r3, #0]
 800adac:	f01e 0f10 	tst.w	lr, #16
 800adb0:	bf08      	it	eq
 800adb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800adb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adba:	6010      	str	r0, [r2, #0]
 800adbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800adc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800adc4:	f380 8811 	msr	BASEPRI, r0
 800adc8:	f3bf 8f4f 	dsb	sy
 800adcc:	f3bf 8f6f 	isb	sy
 800add0:	f7fe feda 	bl	8009b88 <vTaskSwitchContext>
 800add4:	f04f 0000 	mov.w	r0, #0
 800add8:	f380 8811 	msr	BASEPRI, r0
 800addc:	bc09      	pop	{r0, r3}
 800adde:	6819      	ldr	r1, [r3, #0]
 800ade0:	6808      	ldr	r0, [r1, #0]
 800ade2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ade6:	f01e 0f10 	tst.w	lr, #16
 800adea:	bf08      	it	eq
 800adec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800adf0:	f380 8809 	msr	PSP, r0
 800adf4:	f3bf 8f6f 	isb	sy
 800adf8:	4770      	bx	lr
 800adfa:	bf00      	nop
 800adfc:	f3af 8000 	nop.w

0800ae00 <pxCurrentTCBConst>:
 800ae00:	20000914 	.word	0x20000914
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ae04:	bf00      	nop
 800ae06:	bf00      	nop

0800ae08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b082      	sub	sp, #8
 800ae0c:	af00      	add	r7, sp, #0
	__asm volatile
 800ae0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae12:	f383 8811 	msr	BASEPRI, r3
 800ae16:	f3bf 8f6f 	isb	sy
 800ae1a:	f3bf 8f4f 	dsb	sy
 800ae1e:	607b      	str	r3, [r7, #4]
}
 800ae20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ae22:	f7fe fdf7 	bl	8009a14 <xTaskIncrementTick>
 800ae26:	4603      	mov	r3, r0
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d003      	beq.n	800ae34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ae2c:	4b06      	ldr	r3, [pc, #24]	; (800ae48 <xPortSysTickHandler+0x40>)
 800ae2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae32:	601a      	str	r2, [r3, #0]
 800ae34:	2300      	movs	r3, #0
 800ae36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	f383 8811 	msr	BASEPRI, r3
}
 800ae3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ae40:	bf00      	nop
 800ae42:	3708      	adds	r7, #8
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}
 800ae48:	e000ed04 	.word	0xe000ed04

0800ae4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ae50:	4b0b      	ldr	r3, [pc, #44]	; (800ae80 <vPortSetupTimerInterrupt+0x34>)
 800ae52:	2200      	movs	r2, #0
 800ae54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ae56:	4b0b      	ldr	r3, [pc, #44]	; (800ae84 <vPortSetupTimerInterrupt+0x38>)
 800ae58:	2200      	movs	r2, #0
 800ae5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ae5c:	4b0a      	ldr	r3, [pc, #40]	; (800ae88 <vPortSetupTimerInterrupt+0x3c>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	4a0a      	ldr	r2, [pc, #40]	; (800ae8c <vPortSetupTimerInterrupt+0x40>)
 800ae62:	fba2 2303 	umull	r2, r3, r2, r3
 800ae66:	099b      	lsrs	r3, r3, #6
 800ae68:	4a09      	ldr	r2, [pc, #36]	; (800ae90 <vPortSetupTimerInterrupt+0x44>)
 800ae6a:	3b01      	subs	r3, #1
 800ae6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ae6e:	4b04      	ldr	r3, [pc, #16]	; (800ae80 <vPortSetupTimerInterrupt+0x34>)
 800ae70:	2207      	movs	r2, #7
 800ae72:	601a      	str	r2, [r3, #0]
}
 800ae74:	bf00      	nop
 800ae76:	46bd      	mov	sp, r7
 800ae78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7c:	4770      	bx	lr
 800ae7e:	bf00      	nop
 800ae80:	e000e010 	.word	0xe000e010
 800ae84:	e000e018 	.word	0xe000e018
 800ae88:	20000004 	.word	0x20000004
 800ae8c:	10624dd3 	.word	0x10624dd3
 800ae90:	e000e014 	.word	0xe000e014

0800ae94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ae94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800aea4 <vPortEnableVFP+0x10>
 800ae98:	6801      	ldr	r1, [r0, #0]
 800ae9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ae9e:	6001      	str	r1, [r0, #0]
 800aea0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aea2:	bf00      	nop
 800aea4:	e000ed88 	.word	0xe000ed88

0800aea8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aea8:	b480      	push	{r7}
 800aeaa:	b085      	sub	sp, #20
 800aeac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aeae:	f3ef 8305 	mrs	r3, IPSR
 800aeb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	2b0f      	cmp	r3, #15
 800aeb8:	d914      	bls.n	800aee4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aeba:	4a17      	ldr	r2, [pc, #92]	; (800af18 <vPortValidateInterruptPriority+0x70>)
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	4413      	add	r3, r2
 800aec0:	781b      	ldrb	r3, [r3, #0]
 800aec2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aec4:	4b15      	ldr	r3, [pc, #84]	; (800af1c <vPortValidateInterruptPriority+0x74>)
 800aec6:	781b      	ldrb	r3, [r3, #0]
 800aec8:	7afa      	ldrb	r2, [r7, #11]
 800aeca:	429a      	cmp	r2, r3
 800aecc:	d20a      	bcs.n	800aee4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800aece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aed2:	f383 8811 	msr	BASEPRI, r3
 800aed6:	f3bf 8f6f 	isb	sy
 800aeda:	f3bf 8f4f 	dsb	sy
 800aede:	607b      	str	r3, [r7, #4]
}
 800aee0:	bf00      	nop
 800aee2:	e7fe      	b.n	800aee2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aee4:	4b0e      	ldr	r3, [pc, #56]	; (800af20 <vPortValidateInterruptPriority+0x78>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800aeec:	4b0d      	ldr	r3, [pc, #52]	; (800af24 <vPortValidateInterruptPriority+0x7c>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	429a      	cmp	r2, r3
 800aef2:	d90a      	bls.n	800af0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800aef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aef8:	f383 8811 	msr	BASEPRI, r3
 800aefc:	f3bf 8f6f 	isb	sy
 800af00:	f3bf 8f4f 	dsb	sy
 800af04:	603b      	str	r3, [r7, #0]
}
 800af06:	bf00      	nop
 800af08:	e7fe      	b.n	800af08 <vPortValidateInterruptPriority+0x60>
	}
 800af0a:	bf00      	nop
 800af0c:	3714      	adds	r7, #20
 800af0e:	46bd      	mov	sp, r7
 800af10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af14:	4770      	bx	lr
 800af16:	bf00      	nop
 800af18:	e000e3f0 	.word	0xe000e3f0
 800af1c:	20000f40 	.word	0x20000f40
 800af20:	e000ed0c 	.word	0xe000ed0c
 800af24:	20000f44 	.word	0x20000f44

0800af28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b08a      	sub	sp, #40	; 0x28
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800af30:	2300      	movs	r3, #0
 800af32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800af34:	f7fe fcb2 	bl	800989c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800af38:	4b5b      	ldr	r3, [pc, #364]	; (800b0a8 <pvPortMalloc+0x180>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d101      	bne.n	800af44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800af40:	f000 f920 	bl	800b184 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800af44:	4b59      	ldr	r3, [pc, #356]	; (800b0ac <pvPortMalloc+0x184>)
 800af46:	681a      	ldr	r2, [r3, #0]
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	4013      	ands	r3, r2
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	f040 8093 	bne.w	800b078 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d01d      	beq.n	800af94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800af58:	2208      	movs	r2, #8
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	4413      	add	r3, r2
 800af5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f003 0307 	and.w	r3, r3, #7
 800af66:	2b00      	cmp	r3, #0
 800af68:	d014      	beq.n	800af94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	f023 0307 	bic.w	r3, r3, #7
 800af70:	3308      	adds	r3, #8
 800af72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f003 0307 	and.w	r3, r3, #7
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d00a      	beq.n	800af94 <pvPortMalloc+0x6c>
	__asm volatile
 800af7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af82:	f383 8811 	msr	BASEPRI, r3
 800af86:	f3bf 8f6f 	isb	sy
 800af8a:	f3bf 8f4f 	dsb	sy
 800af8e:	617b      	str	r3, [r7, #20]
}
 800af90:	bf00      	nop
 800af92:	e7fe      	b.n	800af92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d06e      	beq.n	800b078 <pvPortMalloc+0x150>
 800af9a:	4b45      	ldr	r3, [pc, #276]	; (800b0b0 <pvPortMalloc+0x188>)
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	687a      	ldr	r2, [r7, #4]
 800afa0:	429a      	cmp	r2, r3
 800afa2:	d869      	bhi.n	800b078 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800afa4:	4b43      	ldr	r3, [pc, #268]	; (800b0b4 <pvPortMalloc+0x18c>)
 800afa6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800afa8:	4b42      	ldr	r3, [pc, #264]	; (800b0b4 <pvPortMalloc+0x18c>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800afae:	e004      	b.n	800afba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800afb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800afb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800afba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afbc:	685b      	ldr	r3, [r3, #4]
 800afbe:	687a      	ldr	r2, [r7, #4]
 800afc0:	429a      	cmp	r2, r3
 800afc2:	d903      	bls.n	800afcc <pvPortMalloc+0xa4>
 800afc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d1f1      	bne.n	800afb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800afcc:	4b36      	ldr	r3, [pc, #216]	; (800b0a8 <pvPortMalloc+0x180>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afd2:	429a      	cmp	r2, r3
 800afd4:	d050      	beq.n	800b078 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800afd6:	6a3b      	ldr	r3, [r7, #32]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	2208      	movs	r2, #8
 800afdc:	4413      	add	r3, r2
 800afde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800afe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe2:	681a      	ldr	r2, [r3, #0]
 800afe4:	6a3b      	ldr	r3, [r7, #32]
 800afe6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800afe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afea:	685a      	ldr	r2, [r3, #4]
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	1ad2      	subs	r2, r2, r3
 800aff0:	2308      	movs	r3, #8
 800aff2:	005b      	lsls	r3, r3, #1
 800aff4:	429a      	cmp	r2, r3
 800aff6:	d91f      	bls.n	800b038 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	4413      	add	r3, r2
 800affe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b000:	69bb      	ldr	r3, [r7, #24]
 800b002:	f003 0307 	and.w	r3, r3, #7
 800b006:	2b00      	cmp	r3, #0
 800b008:	d00a      	beq.n	800b020 <pvPortMalloc+0xf8>
	__asm volatile
 800b00a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b00e:	f383 8811 	msr	BASEPRI, r3
 800b012:	f3bf 8f6f 	isb	sy
 800b016:	f3bf 8f4f 	dsb	sy
 800b01a:	613b      	str	r3, [r7, #16]
}
 800b01c:	bf00      	nop
 800b01e:	e7fe      	b.n	800b01e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b022:	685a      	ldr	r2, [r3, #4]
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	1ad2      	subs	r2, r2, r3
 800b028:	69bb      	ldr	r3, [r7, #24]
 800b02a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b02e:	687a      	ldr	r2, [r7, #4]
 800b030:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b032:	69b8      	ldr	r0, [r7, #24]
 800b034:	f000 f908 	bl	800b248 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b038:	4b1d      	ldr	r3, [pc, #116]	; (800b0b0 <pvPortMalloc+0x188>)
 800b03a:	681a      	ldr	r2, [r3, #0]
 800b03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b03e:	685b      	ldr	r3, [r3, #4]
 800b040:	1ad3      	subs	r3, r2, r3
 800b042:	4a1b      	ldr	r2, [pc, #108]	; (800b0b0 <pvPortMalloc+0x188>)
 800b044:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b046:	4b1a      	ldr	r3, [pc, #104]	; (800b0b0 <pvPortMalloc+0x188>)
 800b048:	681a      	ldr	r2, [r3, #0]
 800b04a:	4b1b      	ldr	r3, [pc, #108]	; (800b0b8 <pvPortMalloc+0x190>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	429a      	cmp	r2, r3
 800b050:	d203      	bcs.n	800b05a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b052:	4b17      	ldr	r3, [pc, #92]	; (800b0b0 <pvPortMalloc+0x188>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	4a18      	ldr	r2, [pc, #96]	; (800b0b8 <pvPortMalloc+0x190>)
 800b058:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b05c:	685a      	ldr	r2, [r3, #4]
 800b05e:	4b13      	ldr	r3, [pc, #76]	; (800b0ac <pvPortMalloc+0x184>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	431a      	orrs	r2, r3
 800b064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b066:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b06a:	2200      	movs	r2, #0
 800b06c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b06e:	4b13      	ldr	r3, [pc, #76]	; (800b0bc <pvPortMalloc+0x194>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	3301      	adds	r3, #1
 800b074:	4a11      	ldr	r2, [pc, #68]	; (800b0bc <pvPortMalloc+0x194>)
 800b076:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b078:	f7fe fc1e 	bl	80098b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b07c:	69fb      	ldr	r3, [r7, #28]
 800b07e:	f003 0307 	and.w	r3, r3, #7
 800b082:	2b00      	cmp	r3, #0
 800b084:	d00a      	beq.n	800b09c <pvPortMalloc+0x174>
	__asm volatile
 800b086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b08a:	f383 8811 	msr	BASEPRI, r3
 800b08e:	f3bf 8f6f 	isb	sy
 800b092:	f3bf 8f4f 	dsb	sy
 800b096:	60fb      	str	r3, [r7, #12]
}
 800b098:	bf00      	nop
 800b09a:	e7fe      	b.n	800b09a <pvPortMalloc+0x172>
	return pvReturn;
 800b09c:	69fb      	ldr	r3, [r7, #28]
}
 800b09e:	4618      	mov	r0, r3
 800b0a0:	3728      	adds	r7, #40	; 0x28
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}
 800b0a6:	bf00      	nop
 800b0a8:	20004b50 	.word	0x20004b50
 800b0ac:	20004b64 	.word	0x20004b64
 800b0b0:	20004b54 	.word	0x20004b54
 800b0b4:	20004b48 	.word	0x20004b48
 800b0b8:	20004b58 	.word	0x20004b58
 800b0bc:	20004b5c 	.word	0x20004b5c

0800b0c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b086      	sub	sp, #24
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d04d      	beq.n	800b16e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b0d2:	2308      	movs	r3, #8
 800b0d4:	425b      	negs	r3, r3
 800b0d6:	697a      	ldr	r2, [r7, #20]
 800b0d8:	4413      	add	r3, r2
 800b0da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b0dc:	697b      	ldr	r3, [r7, #20]
 800b0de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b0e0:	693b      	ldr	r3, [r7, #16]
 800b0e2:	685a      	ldr	r2, [r3, #4]
 800b0e4:	4b24      	ldr	r3, [pc, #144]	; (800b178 <vPortFree+0xb8>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	4013      	ands	r3, r2
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d10a      	bne.n	800b104 <vPortFree+0x44>
	__asm volatile
 800b0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f2:	f383 8811 	msr	BASEPRI, r3
 800b0f6:	f3bf 8f6f 	isb	sy
 800b0fa:	f3bf 8f4f 	dsb	sy
 800b0fe:	60fb      	str	r3, [r7, #12]
}
 800b100:	bf00      	nop
 800b102:	e7fe      	b.n	800b102 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b104:	693b      	ldr	r3, [r7, #16]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d00a      	beq.n	800b122 <vPortFree+0x62>
	__asm volatile
 800b10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b110:	f383 8811 	msr	BASEPRI, r3
 800b114:	f3bf 8f6f 	isb	sy
 800b118:	f3bf 8f4f 	dsb	sy
 800b11c:	60bb      	str	r3, [r7, #8]
}
 800b11e:	bf00      	nop
 800b120:	e7fe      	b.n	800b120 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b122:	693b      	ldr	r3, [r7, #16]
 800b124:	685a      	ldr	r2, [r3, #4]
 800b126:	4b14      	ldr	r3, [pc, #80]	; (800b178 <vPortFree+0xb8>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	4013      	ands	r3, r2
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d01e      	beq.n	800b16e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b130:	693b      	ldr	r3, [r7, #16]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d11a      	bne.n	800b16e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b138:	693b      	ldr	r3, [r7, #16]
 800b13a:	685a      	ldr	r2, [r3, #4]
 800b13c:	4b0e      	ldr	r3, [pc, #56]	; (800b178 <vPortFree+0xb8>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	43db      	mvns	r3, r3
 800b142:	401a      	ands	r2, r3
 800b144:	693b      	ldr	r3, [r7, #16]
 800b146:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b148:	f7fe fba8 	bl	800989c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b14c:	693b      	ldr	r3, [r7, #16]
 800b14e:	685a      	ldr	r2, [r3, #4]
 800b150:	4b0a      	ldr	r3, [pc, #40]	; (800b17c <vPortFree+0xbc>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	4413      	add	r3, r2
 800b156:	4a09      	ldr	r2, [pc, #36]	; (800b17c <vPortFree+0xbc>)
 800b158:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b15a:	6938      	ldr	r0, [r7, #16]
 800b15c:	f000 f874 	bl	800b248 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b160:	4b07      	ldr	r3, [pc, #28]	; (800b180 <vPortFree+0xc0>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	3301      	adds	r3, #1
 800b166:	4a06      	ldr	r2, [pc, #24]	; (800b180 <vPortFree+0xc0>)
 800b168:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b16a:	f7fe fba5 	bl	80098b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b16e:	bf00      	nop
 800b170:	3718      	adds	r7, #24
 800b172:	46bd      	mov	sp, r7
 800b174:	bd80      	pop	{r7, pc}
 800b176:	bf00      	nop
 800b178:	20004b64 	.word	0x20004b64
 800b17c:	20004b54 	.word	0x20004b54
 800b180:	20004b60 	.word	0x20004b60

0800b184 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b184:	b480      	push	{r7}
 800b186:	b085      	sub	sp, #20
 800b188:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b18a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b18e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b190:	4b27      	ldr	r3, [pc, #156]	; (800b230 <prvHeapInit+0xac>)
 800b192:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	f003 0307 	and.w	r3, r3, #7
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d00c      	beq.n	800b1b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	3307      	adds	r3, #7
 800b1a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	f023 0307 	bic.w	r3, r3, #7
 800b1aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b1ac:	68ba      	ldr	r2, [r7, #8]
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	1ad3      	subs	r3, r2, r3
 800b1b2:	4a1f      	ldr	r2, [pc, #124]	; (800b230 <prvHeapInit+0xac>)
 800b1b4:	4413      	add	r3, r2
 800b1b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b1bc:	4a1d      	ldr	r2, [pc, #116]	; (800b234 <prvHeapInit+0xb0>)
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b1c2:	4b1c      	ldr	r3, [pc, #112]	; (800b234 <prvHeapInit+0xb0>)
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	68ba      	ldr	r2, [r7, #8]
 800b1cc:	4413      	add	r3, r2
 800b1ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b1d0:	2208      	movs	r2, #8
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	1a9b      	subs	r3, r3, r2
 800b1d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	f023 0307 	bic.w	r3, r3, #7
 800b1de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	4a15      	ldr	r2, [pc, #84]	; (800b238 <prvHeapInit+0xb4>)
 800b1e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b1e6:	4b14      	ldr	r3, [pc, #80]	; (800b238 <prvHeapInit+0xb4>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b1ee:	4b12      	ldr	r3, [pc, #72]	; (800b238 <prvHeapInit+0xb4>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	68fa      	ldr	r2, [r7, #12]
 800b1fe:	1ad2      	subs	r2, r2, r3
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b204:	4b0c      	ldr	r3, [pc, #48]	; (800b238 <prvHeapInit+0xb4>)
 800b206:	681a      	ldr	r2, [r3, #0]
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	685b      	ldr	r3, [r3, #4]
 800b210:	4a0a      	ldr	r2, [pc, #40]	; (800b23c <prvHeapInit+0xb8>)
 800b212:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	685b      	ldr	r3, [r3, #4]
 800b218:	4a09      	ldr	r2, [pc, #36]	; (800b240 <prvHeapInit+0xbc>)
 800b21a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b21c:	4b09      	ldr	r3, [pc, #36]	; (800b244 <prvHeapInit+0xc0>)
 800b21e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b222:	601a      	str	r2, [r3, #0]
}
 800b224:	bf00      	nop
 800b226:	3714      	adds	r7, #20
 800b228:	46bd      	mov	sp, r7
 800b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22e:	4770      	bx	lr
 800b230:	20000f48 	.word	0x20000f48
 800b234:	20004b48 	.word	0x20004b48
 800b238:	20004b50 	.word	0x20004b50
 800b23c:	20004b58 	.word	0x20004b58
 800b240:	20004b54 	.word	0x20004b54
 800b244:	20004b64 	.word	0x20004b64

0800b248 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b248:	b480      	push	{r7}
 800b24a:	b085      	sub	sp, #20
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b250:	4b28      	ldr	r3, [pc, #160]	; (800b2f4 <prvInsertBlockIntoFreeList+0xac>)
 800b252:	60fb      	str	r3, [r7, #12]
 800b254:	e002      	b.n	800b25c <prvInsertBlockIntoFreeList+0x14>
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	60fb      	str	r3, [r7, #12]
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	687a      	ldr	r2, [r7, #4]
 800b262:	429a      	cmp	r2, r3
 800b264:	d8f7      	bhi.n	800b256 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	685b      	ldr	r3, [r3, #4]
 800b26e:	68ba      	ldr	r2, [r7, #8]
 800b270:	4413      	add	r3, r2
 800b272:	687a      	ldr	r2, [r7, #4]
 800b274:	429a      	cmp	r2, r3
 800b276:	d108      	bne.n	800b28a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	685a      	ldr	r2, [r3, #4]
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	685b      	ldr	r3, [r3, #4]
 800b280:	441a      	add	r2, r3
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	685b      	ldr	r3, [r3, #4]
 800b292:	68ba      	ldr	r2, [r7, #8]
 800b294:	441a      	add	r2, r3
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	429a      	cmp	r2, r3
 800b29c:	d118      	bne.n	800b2d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	681a      	ldr	r2, [r3, #0]
 800b2a2:	4b15      	ldr	r3, [pc, #84]	; (800b2f8 <prvInsertBlockIntoFreeList+0xb0>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	429a      	cmp	r2, r3
 800b2a8:	d00d      	beq.n	800b2c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	685a      	ldr	r2, [r3, #4]
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	441a      	add	r2, r3
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	681a      	ldr	r2, [r3, #0]
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	601a      	str	r2, [r3, #0]
 800b2c4:	e008      	b.n	800b2d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b2c6:	4b0c      	ldr	r3, [pc, #48]	; (800b2f8 <prvInsertBlockIntoFreeList+0xb0>)
 800b2c8:	681a      	ldr	r2, [r3, #0]
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	601a      	str	r2, [r3, #0]
 800b2ce:	e003      	b.n	800b2d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	681a      	ldr	r2, [r3, #0]
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b2d8:	68fa      	ldr	r2, [r7, #12]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	429a      	cmp	r2, r3
 800b2de:	d002      	beq.n	800b2e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	687a      	ldr	r2, [r7, #4]
 800b2e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b2e6:	bf00      	nop
 800b2e8:	3714      	adds	r7, #20
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f0:	4770      	bx	lr
 800b2f2:	bf00      	nop
 800b2f4:	20004b48 	.word	0x20004b48
 800b2f8:	20004b50 	.word	0x20004b50

0800b2fc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b300:	2201      	movs	r2, #1
 800b302:	490e      	ldr	r1, [pc, #56]	; (800b33c <MX_USB_HOST_Init+0x40>)
 800b304:	480e      	ldr	r0, [pc, #56]	; (800b340 <MX_USB_HOST_Init+0x44>)
 800b306:	f7fb f893 	bl	8006430 <USBH_Init>
 800b30a:	4603      	mov	r3, r0
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d001      	beq.n	800b314 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b310:	f7f5 fbb0 	bl	8000a74 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b314:	490b      	ldr	r1, [pc, #44]	; (800b344 <MX_USB_HOST_Init+0x48>)
 800b316:	480a      	ldr	r0, [pc, #40]	; (800b340 <MX_USB_HOST_Init+0x44>)
 800b318:	f7fb f93a 	bl	8006590 <USBH_RegisterClass>
 800b31c:	4603      	mov	r3, r0
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d001      	beq.n	800b326 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b322:	f7f5 fba7 	bl	8000a74 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b326:	4806      	ldr	r0, [pc, #24]	; (800b340 <MX_USB_HOST_Init+0x44>)
 800b328:	f7fb f9be 	bl	80066a8 <USBH_Start>
 800b32c:	4603      	mov	r3, r0
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d001      	beq.n	800b336 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b332:	f7f5 fb9f 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b336:	bf00      	nop
 800b338:	bd80      	pop	{r7, pc}
 800b33a:	bf00      	nop
 800b33c:	0800b349 	.word	0x0800b349
 800b340:	20004b68 	.word	0x20004b68
 800b344:	20000010 	.word	0x20000010

0800b348 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b348:	b480      	push	{r7}
 800b34a:	b083      	sub	sp, #12
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
 800b350:	460b      	mov	r3, r1
 800b352:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b354:	78fb      	ldrb	r3, [r7, #3]
 800b356:	3b01      	subs	r3, #1
 800b358:	2b04      	cmp	r3, #4
 800b35a:	d819      	bhi.n	800b390 <USBH_UserProcess+0x48>
 800b35c:	a201      	add	r2, pc, #4	; (adr r2, 800b364 <USBH_UserProcess+0x1c>)
 800b35e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b362:	bf00      	nop
 800b364:	0800b391 	.word	0x0800b391
 800b368:	0800b381 	.word	0x0800b381
 800b36c:	0800b391 	.word	0x0800b391
 800b370:	0800b389 	.word	0x0800b389
 800b374:	0800b379 	.word	0x0800b379
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b378:	4b09      	ldr	r3, [pc, #36]	; (800b3a0 <USBH_UserProcess+0x58>)
 800b37a:	2203      	movs	r2, #3
 800b37c:	701a      	strb	r2, [r3, #0]
  break;
 800b37e:	e008      	b.n	800b392 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b380:	4b07      	ldr	r3, [pc, #28]	; (800b3a0 <USBH_UserProcess+0x58>)
 800b382:	2202      	movs	r2, #2
 800b384:	701a      	strb	r2, [r3, #0]
  break;
 800b386:	e004      	b.n	800b392 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b388:	4b05      	ldr	r3, [pc, #20]	; (800b3a0 <USBH_UserProcess+0x58>)
 800b38a:	2201      	movs	r2, #1
 800b38c:	701a      	strb	r2, [r3, #0]
  break;
 800b38e:	e000      	b.n	800b392 <USBH_UserProcess+0x4a>

  default:
  break;
 800b390:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b392:	bf00      	nop
 800b394:	370c      	adds	r7, #12
 800b396:	46bd      	mov	sp, r7
 800b398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39c:	4770      	bx	lr
 800b39e:	bf00      	nop
 800b3a0:	20004f4c 	.word	0x20004f4c

0800b3a4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b08a      	sub	sp, #40	; 0x28
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b3ac:	f107 0314 	add.w	r3, r7, #20
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	601a      	str	r2, [r3, #0]
 800b3b4:	605a      	str	r2, [r3, #4]
 800b3b6:	609a      	str	r2, [r3, #8]
 800b3b8:	60da      	str	r2, [r3, #12]
 800b3ba:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b3c4:	d147      	bne.n	800b456 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	613b      	str	r3, [r7, #16]
 800b3ca:	4b25      	ldr	r3, [pc, #148]	; (800b460 <HAL_HCD_MspInit+0xbc>)
 800b3cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3ce:	4a24      	ldr	r2, [pc, #144]	; (800b460 <HAL_HCD_MspInit+0xbc>)
 800b3d0:	f043 0301 	orr.w	r3, r3, #1
 800b3d4:	6313      	str	r3, [r2, #48]	; 0x30
 800b3d6:	4b22      	ldr	r3, [pc, #136]	; (800b460 <HAL_HCD_MspInit+0xbc>)
 800b3d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3da:	f003 0301 	and.w	r3, r3, #1
 800b3de:	613b      	str	r3, [r7, #16]
 800b3e0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b3e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b3e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b3f0:	f107 0314 	add.w	r3, r7, #20
 800b3f4:	4619      	mov	r1, r3
 800b3f6:	481b      	ldr	r0, [pc, #108]	; (800b464 <HAL_HCD_MspInit+0xc0>)
 800b3f8:	f7f5 ff2a 	bl	8001250 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b3fc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800b400:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b402:	2302      	movs	r3, #2
 800b404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b406:	2300      	movs	r3, #0
 800b408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b40a:	2300      	movs	r3, #0
 800b40c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b40e:	230a      	movs	r3, #10
 800b410:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b412:	f107 0314 	add.w	r3, r7, #20
 800b416:	4619      	mov	r1, r3
 800b418:	4812      	ldr	r0, [pc, #72]	; (800b464 <HAL_HCD_MspInit+0xc0>)
 800b41a:	f7f5 ff19 	bl	8001250 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b41e:	4b10      	ldr	r3, [pc, #64]	; (800b460 <HAL_HCD_MspInit+0xbc>)
 800b420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b422:	4a0f      	ldr	r2, [pc, #60]	; (800b460 <HAL_HCD_MspInit+0xbc>)
 800b424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b428:	6353      	str	r3, [r2, #52]	; 0x34
 800b42a:	2300      	movs	r3, #0
 800b42c:	60fb      	str	r3, [r7, #12]
 800b42e:	4b0c      	ldr	r3, [pc, #48]	; (800b460 <HAL_HCD_MspInit+0xbc>)
 800b430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b432:	4a0b      	ldr	r2, [pc, #44]	; (800b460 <HAL_HCD_MspInit+0xbc>)
 800b434:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b438:	6453      	str	r3, [r2, #68]	; 0x44
 800b43a:	4b09      	ldr	r3, [pc, #36]	; (800b460 <HAL_HCD_MspInit+0xbc>)
 800b43c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b43e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b442:	60fb      	str	r3, [r7, #12]
 800b444:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800b446:	2200      	movs	r2, #0
 800b448:	2105      	movs	r1, #5
 800b44a:	2043      	movs	r0, #67	; 0x43
 800b44c:	f7f5 fec9 	bl	80011e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b450:	2043      	movs	r0, #67	; 0x43
 800b452:	f7f5 fee2 	bl	800121a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b456:	bf00      	nop
 800b458:	3728      	adds	r7, #40	; 0x28
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}
 800b45e:	bf00      	nop
 800b460:	40023800 	.word	0x40023800
 800b464:	40020000 	.word	0x40020000

0800b468 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b082      	sub	sp, #8
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b476:	4618      	mov	r0, r3
 800b478:	f7fb fdcd 	bl	8007016 <USBH_LL_IncTimer>
}
 800b47c:	bf00      	nop
 800b47e:	3708      	adds	r7, #8
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}

0800b484 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b082      	sub	sp, #8
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b492:	4618      	mov	r0, r3
 800b494:	f7fb fe11 	bl	80070ba <USBH_LL_Connect>
}
 800b498:	bf00      	nop
 800b49a:	3708      	adds	r7, #8
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}

0800b4a0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b082      	sub	sp, #8
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f7fb fe26 	bl	8007100 <USBH_LL_Disconnect>
}
 800b4b4:	bf00      	nop
 800b4b6:	3708      	adds	r7, #8
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}

0800b4bc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b082      	sub	sp, #8
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
 800b4c4:	460b      	mov	r3, r1
 800b4c6:	70fb      	strb	r3, [r7, #3]
 800b4c8:	4613      	mov	r3, r2
 800b4ca:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f7fb fe5d 	bl	8007192 <USBH_LL_NotifyURBChange>
#endif
}
 800b4d8:	bf00      	nop
 800b4da:	3708      	adds	r7, #8
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}

0800b4e0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b082      	sub	sp, #8
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	f7fb fdbb 	bl	800706a <USBH_LL_PortEnabled>
}
 800b4f4:	bf00      	nop
 800b4f6:	3708      	adds	r7, #8
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bd80      	pop	{r7, pc}

0800b4fc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b082      	sub	sp, #8
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b50a:	4618      	mov	r0, r3
 800b50c:	f7fb fdc7 	bl	800709e <USBH_LL_PortDisabled>
}
 800b510:	bf00      	nop
 800b512:	3708      	adds	r7, #8
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}

0800b518 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b082      	sub	sp, #8
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b526:	2b01      	cmp	r3, #1
 800b528:	d12a      	bne.n	800b580 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b52a:	4a18      	ldr	r2, [pc, #96]	; (800b58c <USBH_LL_Init+0x74>)
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	4a15      	ldr	r2, [pc, #84]	; (800b58c <USBH_LL_Init+0x74>)
 800b536:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b53a:	4b14      	ldr	r3, [pc, #80]	; (800b58c <USBH_LL_Init+0x74>)
 800b53c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b540:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b542:	4b12      	ldr	r3, [pc, #72]	; (800b58c <USBH_LL_Init+0x74>)
 800b544:	2208      	movs	r2, #8
 800b546:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b548:	4b10      	ldr	r3, [pc, #64]	; (800b58c <USBH_LL_Init+0x74>)
 800b54a:	2201      	movs	r2, #1
 800b54c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b54e:	4b0f      	ldr	r3, [pc, #60]	; (800b58c <USBH_LL_Init+0x74>)
 800b550:	2200      	movs	r2, #0
 800b552:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b554:	4b0d      	ldr	r3, [pc, #52]	; (800b58c <USBH_LL_Init+0x74>)
 800b556:	2202      	movs	r2, #2
 800b558:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b55a:	4b0c      	ldr	r3, [pc, #48]	; (800b58c <USBH_LL_Init+0x74>)
 800b55c:	2200      	movs	r2, #0
 800b55e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b560:	480a      	ldr	r0, [pc, #40]	; (800b58c <USBH_LL_Init+0x74>)
 800b562:	f7f6 f85c 	bl	800161e <HAL_HCD_Init>
 800b566:	4603      	mov	r3, r0
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d001      	beq.n	800b570 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b56c:	f7f5 fa82 	bl	8000a74 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b570:	4806      	ldr	r0, [pc, #24]	; (800b58c <USBH_LL_Init+0x74>)
 800b572:	f7f6 fc40 	bl	8001df6 <HAL_HCD_GetCurrentFrame>
 800b576:	4603      	mov	r3, r0
 800b578:	4619      	mov	r1, r3
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f7fb fd3c 	bl	8006ff8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b580:	2300      	movs	r3, #0
}
 800b582:	4618      	mov	r0, r3
 800b584:	3708      	adds	r7, #8
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}
 800b58a:	bf00      	nop
 800b58c:	20004f50 	.word	0x20004f50

0800b590 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b084      	sub	sp, #16
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b598:	2300      	movs	r3, #0
 800b59a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b59c:	2300      	movs	r3, #0
 800b59e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f7f6 fbaf 	bl	8001d0a <HAL_HCD_Start>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b5b0:	7bfb      	ldrb	r3, [r7, #15]
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f000 f95c 	bl	800b870 <USBH_Get_USB_Status>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	3710      	adds	r7, #16
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}

0800b5c6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b5c6:	b580      	push	{r7, lr}
 800b5c8:	b084      	sub	sp, #16
 800b5ca:	af00      	add	r7, sp, #0
 800b5cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b5dc:	4618      	mov	r0, r3
 800b5de:	f7f6 fbb7 	bl	8001d50 <HAL_HCD_Stop>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b5e6:	7bfb      	ldrb	r3, [r7, #15]
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	f000 f941 	bl	800b870 <USBH_Get_USB_Status>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	3710      	adds	r7, #16
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd80      	pop	{r7, pc}

0800b5fc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b084      	sub	sp, #16
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b604:	2301      	movs	r3, #1
 800b606:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b60e:	4618      	mov	r0, r3
 800b610:	f7f6 fbff 	bl	8001e12 <HAL_HCD_GetCurrentSpeed>
 800b614:	4603      	mov	r3, r0
 800b616:	2b02      	cmp	r3, #2
 800b618:	d00c      	beq.n	800b634 <USBH_LL_GetSpeed+0x38>
 800b61a:	2b02      	cmp	r3, #2
 800b61c:	d80d      	bhi.n	800b63a <USBH_LL_GetSpeed+0x3e>
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d002      	beq.n	800b628 <USBH_LL_GetSpeed+0x2c>
 800b622:	2b01      	cmp	r3, #1
 800b624:	d003      	beq.n	800b62e <USBH_LL_GetSpeed+0x32>
 800b626:	e008      	b.n	800b63a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b628:	2300      	movs	r3, #0
 800b62a:	73fb      	strb	r3, [r7, #15]
    break;
 800b62c:	e008      	b.n	800b640 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b62e:	2301      	movs	r3, #1
 800b630:	73fb      	strb	r3, [r7, #15]
    break;
 800b632:	e005      	b.n	800b640 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b634:	2302      	movs	r3, #2
 800b636:	73fb      	strb	r3, [r7, #15]
    break;
 800b638:	e002      	b.n	800b640 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b63a:	2301      	movs	r3, #1
 800b63c:	73fb      	strb	r3, [r7, #15]
    break;
 800b63e:	bf00      	nop
  }
  return  speed;
 800b640:	7bfb      	ldrb	r3, [r7, #15]
}
 800b642:	4618      	mov	r0, r3
 800b644:	3710      	adds	r7, #16
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}

0800b64a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b64a:	b580      	push	{r7, lr}
 800b64c:	b084      	sub	sp, #16
 800b64e:	af00      	add	r7, sp, #0
 800b650:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b652:	2300      	movs	r3, #0
 800b654:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b656:	2300      	movs	r3, #0
 800b658:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b660:	4618      	mov	r0, r3
 800b662:	f7f6 fb92 	bl	8001d8a <HAL_HCD_ResetPort>
 800b666:	4603      	mov	r3, r0
 800b668:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b66a:	7bfb      	ldrb	r3, [r7, #15]
 800b66c:	4618      	mov	r0, r3
 800b66e:	f000 f8ff 	bl	800b870 <USBH_Get_USB_Status>
 800b672:	4603      	mov	r3, r0
 800b674:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b676:	7bbb      	ldrb	r3, [r7, #14]
}
 800b678:	4618      	mov	r0, r3
 800b67a:	3710      	adds	r7, #16
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}

0800b680 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b082      	sub	sp, #8
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
 800b688:	460b      	mov	r3, r1
 800b68a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b692:	78fa      	ldrb	r2, [r7, #3]
 800b694:	4611      	mov	r1, r2
 800b696:	4618      	mov	r0, r3
 800b698:	f7f6 fb99 	bl	8001dce <HAL_HCD_HC_GetXferCount>
 800b69c:	4603      	mov	r3, r0
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3708      	adds	r7, #8
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}

0800b6a6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b6a6:	b590      	push	{r4, r7, lr}
 800b6a8:	b089      	sub	sp, #36	; 0x24
 800b6aa:	af04      	add	r7, sp, #16
 800b6ac:	6078      	str	r0, [r7, #4]
 800b6ae:	4608      	mov	r0, r1
 800b6b0:	4611      	mov	r1, r2
 800b6b2:	461a      	mov	r2, r3
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	70fb      	strb	r3, [r7, #3]
 800b6b8:	460b      	mov	r3, r1
 800b6ba:	70bb      	strb	r3, [r7, #2]
 800b6bc:	4613      	mov	r3, r2
 800b6be:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b6ce:	787c      	ldrb	r4, [r7, #1]
 800b6d0:	78ba      	ldrb	r2, [r7, #2]
 800b6d2:	78f9      	ldrb	r1, [r7, #3]
 800b6d4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b6d6:	9302      	str	r3, [sp, #8]
 800b6d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b6dc:	9301      	str	r3, [sp, #4]
 800b6de:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b6e2:	9300      	str	r3, [sp, #0]
 800b6e4:	4623      	mov	r3, r4
 800b6e6:	f7f5 fffc 	bl	80016e2 <HAL_HCD_HC_Init>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b6ee:	7bfb      	ldrb	r3, [r7, #15]
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f000 f8bd 	bl	800b870 <USBH_Get_USB_Status>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b6fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	3714      	adds	r7, #20
 800b700:	46bd      	mov	sp, r7
 800b702:	bd90      	pop	{r4, r7, pc}

0800b704 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b084      	sub	sp, #16
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
 800b70c:	460b      	mov	r3, r1
 800b70e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b710:	2300      	movs	r3, #0
 800b712:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b714:	2300      	movs	r3, #0
 800b716:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b71e:	78fa      	ldrb	r2, [r7, #3]
 800b720:	4611      	mov	r1, r2
 800b722:	4618      	mov	r0, r3
 800b724:	f7f6 f86c 	bl	8001800 <HAL_HCD_HC_Halt>
 800b728:	4603      	mov	r3, r0
 800b72a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b72c:	7bfb      	ldrb	r3, [r7, #15]
 800b72e:	4618      	mov	r0, r3
 800b730:	f000 f89e 	bl	800b870 <USBH_Get_USB_Status>
 800b734:	4603      	mov	r3, r0
 800b736:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b738:	7bbb      	ldrb	r3, [r7, #14]
}
 800b73a:	4618      	mov	r0, r3
 800b73c:	3710      	adds	r7, #16
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}

0800b742 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b742:	b590      	push	{r4, r7, lr}
 800b744:	b089      	sub	sp, #36	; 0x24
 800b746:	af04      	add	r7, sp, #16
 800b748:	6078      	str	r0, [r7, #4]
 800b74a:	4608      	mov	r0, r1
 800b74c:	4611      	mov	r1, r2
 800b74e:	461a      	mov	r2, r3
 800b750:	4603      	mov	r3, r0
 800b752:	70fb      	strb	r3, [r7, #3]
 800b754:	460b      	mov	r3, r1
 800b756:	70bb      	strb	r3, [r7, #2]
 800b758:	4613      	mov	r3, r2
 800b75a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b75c:	2300      	movs	r3, #0
 800b75e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b760:	2300      	movs	r3, #0
 800b762:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b76a:	787c      	ldrb	r4, [r7, #1]
 800b76c:	78ba      	ldrb	r2, [r7, #2]
 800b76e:	78f9      	ldrb	r1, [r7, #3]
 800b770:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b774:	9303      	str	r3, [sp, #12]
 800b776:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b778:	9302      	str	r3, [sp, #8]
 800b77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b77c:	9301      	str	r3, [sp, #4]
 800b77e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b782:	9300      	str	r3, [sp, #0]
 800b784:	4623      	mov	r3, r4
 800b786:	f7f6 f85f 	bl	8001848 <HAL_HCD_HC_SubmitRequest>
 800b78a:	4603      	mov	r3, r0
 800b78c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b78e:	7bfb      	ldrb	r3, [r7, #15]
 800b790:	4618      	mov	r0, r3
 800b792:	f000 f86d 	bl	800b870 <USBH_Get_USB_Status>
 800b796:	4603      	mov	r3, r0
 800b798:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b79a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	3714      	adds	r7, #20
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd90      	pop	{r4, r7, pc}

0800b7a4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b082      	sub	sp, #8
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
 800b7ac:	460b      	mov	r3, r1
 800b7ae:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b7b6:	78fa      	ldrb	r2, [r7, #3]
 800b7b8:	4611      	mov	r1, r2
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f7f6 faf3 	bl	8001da6 <HAL_HCD_HC_GetURBState>
 800b7c0:	4603      	mov	r3, r0
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	3708      	adds	r7, #8
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}

0800b7ca <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b7ca:	b580      	push	{r7, lr}
 800b7cc:	b082      	sub	sp, #8
 800b7ce:	af00      	add	r7, sp, #0
 800b7d0:	6078      	str	r0, [r7, #4]
 800b7d2:	460b      	mov	r3, r1
 800b7d4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b7dc:	2b01      	cmp	r3, #1
 800b7de:	d103      	bne.n	800b7e8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b7e0:	78fb      	ldrb	r3, [r7, #3]
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f000 f870 	bl	800b8c8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b7e8:	20c8      	movs	r0, #200	; 0xc8
 800b7ea:	f7f5 fbfb 	bl	8000fe4 <HAL_Delay>
  return USBH_OK;
 800b7ee:	2300      	movs	r3, #0
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	3708      	adds	r7, #8
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}

0800b7f8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b085      	sub	sp, #20
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
 800b800:	460b      	mov	r3, r1
 800b802:	70fb      	strb	r3, [r7, #3]
 800b804:	4613      	mov	r3, r2
 800b806:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b80e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b810:	78fb      	ldrb	r3, [r7, #3]
 800b812:	68fa      	ldr	r2, [r7, #12]
 800b814:	212c      	movs	r1, #44	; 0x2c
 800b816:	fb01 f303 	mul.w	r3, r1, r3
 800b81a:	4413      	add	r3, r2
 800b81c:	333b      	adds	r3, #59	; 0x3b
 800b81e:	781b      	ldrb	r3, [r3, #0]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d009      	beq.n	800b838 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b824:	78fb      	ldrb	r3, [r7, #3]
 800b826:	68fa      	ldr	r2, [r7, #12]
 800b828:	212c      	movs	r1, #44	; 0x2c
 800b82a:	fb01 f303 	mul.w	r3, r1, r3
 800b82e:	4413      	add	r3, r2
 800b830:	3354      	adds	r3, #84	; 0x54
 800b832:	78ba      	ldrb	r2, [r7, #2]
 800b834:	701a      	strb	r2, [r3, #0]
 800b836:	e008      	b.n	800b84a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b838:	78fb      	ldrb	r3, [r7, #3]
 800b83a:	68fa      	ldr	r2, [r7, #12]
 800b83c:	212c      	movs	r1, #44	; 0x2c
 800b83e:	fb01 f303 	mul.w	r3, r1, r3
 800b842:	4413      	add	r3, r2
 800b844:	3355      	adds	r3, #85	; 0x55
 800b846:	78ba      	ldrb	r2, [r7, #2]
 800b848:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b84a:	2300      	movs	r3, #0
}
 800b84c:	4618      	mov	r0, r3
 800b84e:	3714      	adds	r7, #20
 800b850:	46bd      	mov	sp, r7
 800b852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b856:	4770      	bx	lr

0800b858 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b082      	sub	sp, #8
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b860:	6878      	ldr	r0, [r7, #4]
 800b862:	f7f5 fbbf 	bl	8000fe4 <HAL_Delay>
}
 800b866:	bf00      	nop
 800b868:	3708      	adds	r7, #8
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}
	...

0800b870 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b870:	b480      	push	{r7}
 800b872:	b085      	sub	sp, #20
 800b874:	af00      	add	r7, sp, #0
 800b876:	4603      	mov	r3, r0
 800b878:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b87a:	2300      	movs	r3, #0
 800b87c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b87e:	79fb      	ldrb	r3, [r7, #7]
 800b880:	2b03      	cmp	r3, #3
 800b882:	d817      	bhi.n	800b8b4 <USBH_Get_USB_Status+0x44>
 800b884:	a201      	add	r2, pc, #4	; (adr r2, 800b88c <USBH_Get_USB_Status+0x1c>)
 800b886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b88a:	bf00      	nop
 800b88c:	0800b89d 	.word	0x0800b89d
 800b890:	0800b8a3 	.word	0x0800b8a3
 800b894:	0800b8a9 	.word	0x0800b8a9
 800b898:	0800b8af 	.word	0x0800b8af
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b89c:	2300      	movs	r3, #0
 800b89e:	73fb      	strb	r3, [r7, #15]
    break;
 800b8a0:	e00b      	b.n	800b8ba <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b8a2:	2302      	movs	r3, #2
 800b8a4:	73fb      	strb	r3, [r7, #15]
    break;
 800b8a6:	e008      	b.n	800b8ba <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	73fb      	strb	r3, [r7, #15]
    break;
 800b8ac:	e005      	b.n	800b8ba <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b8ae:	2302      	movs	r3, #2
 800b8b0:	73fb      	strb	r3, [r7, #15]
    break;
 800b8b2:	e002      	b.n	800b8ba <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b8b4:	2302      	movs	r3, #2
 800b8b6:	73fb      	strb	r3, [r7, #15]
    break;
 800b8b8:	bf00      	nop
  }
  return usb_status;
 800b8ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8bc:	4618      	mov	r0, r3
 800b8be:	3714      	adds	r7, #20
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c6:	4770      	bx	lr

0800b8c8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b084      	sub	sp, #16
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b8d2:	79fb      	ldrb	r3, [r7, #7]
 800b8d4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b8d6:	79fb      	ldrb	r3, [r7, #7]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d102      	bne.n	800b8e2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b8dc:	2300      	movs	r3, #0
 800b8de:	73fb      	strb	r3, [r7, #15]
 800b8e0:	e001      	b.n	800b8e6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b8e6:	7bfb      	ldrb	r3, [r7, #15]
 800b8e8:	461a      	mov	r2, r3
 800b8ea:	2101      	movs	r1, #1
 800b8ec:	4803      	ldr	r0, [pc, #12]	; (800b8fc <MX_DriverVbusFS+0x34>)
 800b8ee:	f7f5 fe63 	bl	80015b8 <HAL_GPIO_WritePin>
}
 800b8f2:	bf00      	nop
 800b8f4:	3710      	adds	r7, #16
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}
 800b8fa:	bf00      	nop
 800b8fc:	40020800 	.word	0x40020800

0800b900 <malloc>:
 800b900:	4b02      	ldr	r3, [pc, #8]	; (800b90c <malloc+0xc>)
 800b902:	4601      	mov	r1, r0
 800b904:	6818      	ldr	r0, [r3, #0]
 800b906:	f000 b82b 	b.w	800b960 <_malloc_r>
 800b90a:	bf00      	nop
 800b90c:	20000080 	.word	0x20000080

0800b910 <free>:
 800b910:	4b02      	ldr	r3, [pc, #8]	; (800b91c <free+0xc>)
 800b912:	4601      	mov	r1, r0
 800b914:	6818      	ldr	r0, [r3, #0]
 800b916:	f000 b901 	b.w	800bb1c <_free_r>
 800b91a:	bf00      	nop
 800b91c:	20000080 	.word	0x20000080

0800b920 <sbrk_aligned>:
 800b920:	b570      	push	{r4, r5, r6, lr}
 800b922:	4e0e      	ldr	r6, [pc, #56]	; (800b95c <sbrk_aligned+0x3c>)
 800b924:	460c      	mov	r4, r1
 800b926:	6831      	ldr	r1, [r6, #0]
 800b928:	4605      	mov	r5, r0
 800b92a:	b911      	cbnz	r1, 800b932 <sbrk_aligned+0x12>
 800b92c:	f000 f8ac 	bl	800ba88 <_sbrk_r>
 800b930:	6030      	str	r0, [r6, #0]
 800b932:	4621      	mov	r1, r4
 800b934:	4628      	mov	r0, r5
 800b936:	f000 f8a7 	bl	800ba88 <_sbrk_r>
 800b93a:	1c43      	adds	r3, r0, #1
 800b93c:	d00a      	beq.n	800b954 <sbrk_aligned+0x34>
 800b93e:	1cc4      	adds	r4, r0, #3
 800b940:	f024 0403 	bic.w	r4, r4, #3
 800b944:	42a0      	cmp	r0, r4
 800b946:	d007      	beq.n	800b958 <sbrk_aligned+0x38>
 800b948:	1a21      	subs	r1, r4, r0
 800b94a:	4628      	mov	r0, r5
 800b94c:	f000 f89c 	bl	800ba88 <_sbrk_r>
 800b950:	3001      	adds	r0, #1
 800b952:	d101      	bne.n	800b958 <sbrk_aligned+0x38>
 800b954:	f04f 34ff 	mov.w	r4, #4294967295
 800b958:	4620      	mov	r0, r4
 800b95a:	bd70      	pop	{r4, r5, r6, pc}
 800b95c:	20005258 	.word	0x20005258

0800b960 <_malloc_r>:
 800b960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b964:	1ccd      	adds	r5, r1, #3
 800b966:	f025 0503 	bic.w	r5, r5, #3
 800b96a:	3508      	adds	r5, #8
 800b96c:	2d0c      	cmp	r5, #12
 800b96e:	bf38      	it	cc
 800b970:	250c      	movcc	r5, #12
 800b972:	2d00      	cmp	r5, #0
 800b974:	4607      	mov	r7, r0
 800b976:	db01      	blt.n	800b97c <_malloc_r+0x1c>
 800b978:	42a9      	cmp	r1, r5
 800b97a:	d905      	bls.n	800b988 <_malloc_r+0x28>
 800b97c:	230c      	movs	r3, #12
 800b97e:	603b      	str	r3, [r7, #0]
 800b980:	2600      	movs	r6, #0
 800b982:	4630      	mov	r0, r6
 800b984:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b988:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ba5c <_malloc_r+0xfc>
 800b98c:	f000 f868 	bl	800ba60 <__malloc_lock>
 800b990:	f8d8 3000 	ldr.w	r3, [r8]
 800b994:	461c      	mov	r4, r3
 800b996:	bb5c      	cbnz	r4, 800b9f0 <_malloc_r+0x90>
 800b998:	4629      	mov	r1, r5
 800b99a:	4638      	mov	r0, r7
 800b99c:	f7ff ffc0 	bl	800b920 <sbrk_aligned>
 800b9a0:	1c43      	adds	r3, r0, #1
 800b9a2:	4604      	mov	r4, r0
 800b9a4:	d155      	bne.n	800ba52 <_malloc_r+0xf2>
 800b9a6:	f8d8 4000 	ldr.w	r4, [r8]
 800b9aa:	4626      	mov	r6, r4
 800b9ac:	2e00      	cmp	r6, #0
 800b9ae:	d145      	bne.n	800ba3c <_malloc_r+0xdc>
 800b9b0:	2c00      	cmp	r4, #0
 800b9b2:	d048      	beq.n	800ba46 <_malloc_r+0xe6>
 800b9b4:	6823      	ldr	r3, [r4, #0]
 800b9b6:	4631      	mov	r1, r6
 800b9b8:	4638      	mov	r0, r7
 800b9ba:	eb04 0903 	add.w	r9, r4, r3
 800b9be:	f000 f863 	bl	800ba88 <_sbrk_r>
 800b9c2:	4581      	cmp	r9, r0
 800b9c4:	d13f      	bne.n	800ba46 <_malloc_r+0xe6>
 800b9c6:	6821      	ldr	r1, [r4, #0]
 800b9c8:	1a6d      	subs	r5, r5, r1
 800b9ca:	4629      	mov	r1, r5
 800b9cc:	4638      	mov	r0, r7
 800b9ce:	f7ff ffa7 	bl	800b920 <sbrk_aligned>
 800b9d2:	3001      	adds	r0, #1
 800b9d4:	d037      	beq.n	800ba46 <_malloc_r+0xe6>
 800b9d6:	6823      	ldr	r3, [r4, #0]
 800b9d8:	442b      	add	r3, r5
 800b9da:	6023      	str	r3, [r4, #0]
 800b9dc:	f8d8 3000 	ldr.w	r3, [r8]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d038      	beq.n	800ba56 <_malloc_r+0xf6>
 800b9e4:	685a      	ldr	r2, [r3, #4]
 800b9e6:	42a2      	cmp	r2, r4
 800b9e8:	d12b      	bne.n	800ba42 <_malloc_r+0xe2>
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	605a      	str	r2, [r3, #4]
 800b9ee:	e00f      	b.n	800ba10 <_malloc_r+0xb0>
 800b9f0:	6822      	ldr	r2, [r4, #0]
 800b9f2:	1b52      	subs	r2, r2, r5
 800b9f4:	d41f      	bmi.n	800ba36 <_malloc_r+0xd6>
 800b9f6:	2a0b      	cmp	r2, #11
 800b9f8:	d917      	bls.n	800ba2a <_malloc_r+0xca>
 800b9fa:	1961      	adds	r1, r4, r5
 800b9fc:	42a3      	cmp	r3, r4
 800b9fe:	6025      	str	r5, [r4, #0]
 800ba00:	bf18      	it	ne
 800ba02:	6059      	strne	r1, [r3, #4]
 800ba04:	6863      	ldr	r3, [r4, #4]
 800ba06:	bf08      	it	eq
 800ba08:	f8c8 1000 	streq.w	r1, [r8]
 800ba0c:	5162      	str	r2, [r4, r5]
 800ba0e:	604b      	str	r3, [r1, #4]
 800ba10:	4638      	mov	r0, r7
 800ba12:	f104 060b 	add.w	r6, r4, #11
 800ba16:	f000 f829 	bl	800ba6c <__malloc_unlock>
 800ba1a:	f026 0607 	bic.w	r6, r6, #7
 800ba1e:	1d23      	adds	r3, r4, #4
 800ba20:	1af2      	subs	r2, r6, r3
 800ba22:	d0ae      	beq.n	800b982 <_malloc_r+0x22>
 800ba24:	1b9b      	subs	r3, r3, r6
 800ba26:	50a3      	str	r3, [r4, r2]
 800ba28:	e7ab      	b.n	800b982 <_malloc_r+0x22>
 800ba2a:	42a3      	cmp	r3, r4
 800ba2c:	6862      	ldr	r2, [r4, #4]
 800ba2e:	d1dd      	bne.n	800b9ec <_malloc_r+0x8c>
 800ba30:	f8c8 2000 	str.w	r2, [r8]
 800ba34:	e7ec      	b.n	800ba10 <_malloc_r+0xb0>
 800ba36:	4623      	mov	r3, r4
 800ba38:	6864      	ldr	r4, [r4, #4]
 800ba3a:	e7ac      	b.n	800b996 <_malloc_r+0x36>
 800ba3c:	4634      	mov	r4, r6
 800ba3e:	6876      	ldr	r6, [r6, #4]
 800ba40:	e7b4      	b.n	800b9ac <_malloc_r+0x4c>
 800ba42:	4613      	mov	r3, r2
 800ba44:	e7cc      	b.n	800b9e0 <_malloc_r+0x80>
 800ba46:	230c      	movs	r3, #12
 800ba48:	603b      	str	r3, [r7, #0]
 800ba4a:	4638      	mov	r0, r7
 800ba4c:	f000 f80e 	bl	800ba6c <__malloc_unlock>
 800ba50:	e797      	b.n	800b982 <_malloc_r+0x22>
 800ba52:	6025      	str	r5, [r4, #0]
 800ba54:	e7dc      	b.n	800ba10 <_malloc_r+0xb0>
 800ba56:	605b      	str	r3, [r3, #4]
 800ba58:	deff      	udf	#255	; 0xff
 800ba5a:	bf00      	nop
 800ba5c:	20005254 	.word	0x20005254

0800ba60 <__malloc_lock>:
 800ba60:	4801      	ldr	r0, [pc, #4]	; (800ba68 <__malloc_lock+0x8>)
 800ba62:	f000 b84b 	b.w	800bafc <__retarget_lock_acquire_recursive>
 800ba66:	bf00      	nop
 800ba68:	20005398 	.word	0x20005398

0800ba6c <__malloc_unlock>:
 800ba6c:	4801      	ldr	r0, [pc, #4]	; (800ba74 <__malloc_unlock+0x8>)
 800ba6e:	f000 b846 	b.w	800bafe <__retarget_lock_release_recursive>
 800ba72:	bf00      	nop
 800ba74:	20005398 	.word	0x20005398

0800ba78 <memset>:
 800ba78:	4402      	add	r2, r0
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	d100      	bne.n	800ba82 <memset+0xa>
 800ba80:	4770      	bx	lr
 800ba82:	f803 1b01 	strb.w	r1, [r3], #1
 800ba86:	e7f9      	b.n	800ba7c <memset+0x4>

0800ba88 <_sbrk_r>:
 800ba88:	b538      	push	{r3, r4, r5, lr}
 800ba8a:	4d06      	ldr	r5, [pc, #24]	; (800baa4 <_sbrk_r+0x1c>)
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	4604      	mov	r4, r0
 800ba90:	4608      	mov	r0, r1
 800ba92:	602b      	str	r3, [r5, #0]
 800ba94:	f7f5 f996 	bl	8000dc4 <_sbrk>
 800ba98:	1c43      	adds	r3, r0, #1
 800ba9a:	d102      	bne.n	800baa2 <_sbrk_r+0x1a>
 800ba9c:	682b      	ldr	r3, [r5, #0]
 800ba9e:	b103      	cbz	r3, 800baa2 <_sbrk_r+0x1a>
 800baa0:	6023      	str	r3, [r4, #0]
 800baa2:	bd38      	pop	{r3, r4, r5, pc}
 800baa4:	20005394 	.word	0x20005394

0800baa8 <__errno>:
 800baa8:	4b01      	ldr	r3, [pc, #4]	; (800bab0 <__errno+0x8>)
 800baaa:	6818      	ldr	r0, [r3, #0]
 800baac:	4770      	bx	lr
 800baae:	bf00      	nop
 800bab0:	20000080 	.word	0x20000080

0800bab4 <__libc_init_array>:
 800bab4:	b570      	push	{r4, r5, r6, lr}
 800bab6:	4d0d      	ldr	r5, [pc, #52]	; (800baec <__libc_init_array+0x38>)
 800bab8:	4c0d      	ldr	r4, [pc, #52]	; (800baf0 <__libc_init_array+0x3c>)
 800baba:	1b64      	subs	r4, r4, r5
 800babc:	10a4      	asrs	r4, r4, #2
 800babe:	2600      	movs	r6, #0
 800bac0:	42a6      	cmp	r6, r4
 800bac2:	d109      	bne.n	800bad8 <__libc_init_array+0x24>
 800bac4:	4d0b      	ldr	r5, [pc, #44]	; (800baf4 <__libc_init_array+0x40>)
 800bac6:	4c0c      	ldr	r4, [pc, #48]	; (800baf8 <__libc_init_array+0x44>)
 800bac8:	f000 f874 	bl	800bbb4 <_init>
 800bacc:	1b64      	subs	r4, r4, r5
 800bace:	10a4      	asrs	r4, r4, #2
 800bad0:	2600      	movs	r6, #0
 800bad2:	42a6      	cmp	r6, r4
 800bad4:	d105      	bne.n	800bae2 <__libc_init_array+0x2e>
 800bad6:	bd70      	pop	{r4, r5, r6, pc}
 800bad8:	f855 3b04 	ldr.w	r3, [r5], #4
 800badc:	4798      	blx	r3
 800bade:	3601      	adds	r6, #1
 800bae0:	e7ee      	b.n	800bac0 <__libc_init_array+0xc>
 800bae2:	f855 3b04 	ldr.w	r3, [r5], #4
 800bae6:	4798      	blx	r3
 800bae8:	3601      	adds	r6, #1
 800baea:	e7f2      	b.n	800bad2 <__libc_init_array+0x1e>
 800baec:	0800bc64 	.word	0x0800bc64
 800baf0:	0800bc64 	.word	0x0800bc64
 800baf4:	0800bc64 	.word	0x0800bc64
 800baf8:	0800bc68 	.word	0x0800bc68

0800bafc <__retarget_lock_acquire_recursive>:
 800bafc:	4770      	bx	lr

0800bafe <__retarget_lock_release_recursive>:
 800bafe:	4770      	bx	lr

0800bb00 <memcpy>:
 800bb00:	440a      	add	r2, r1
 800bb02:	4291      	cmp	r1, r2
 800bb04:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb08:	d100      	bne.n	800bb0c <memcpy+0xc>
 800bb0a:	4770      	bx	lr
 800bb0c:	b510      	push	{r4, lr}
 800bb0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb12:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb16:	4291      	cmp	r1, r2
 800bb18:	d1f9      	bne.n	800bb0e <memcpy+0xe>
 800bb1a:	bd10      	pop	{r4, pc}

0800bb1c <_free_r>:
 800bb1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bb1e:	2900      	cmp	r1, #0
 800bb20:	d044      	beq.n	800bbac <_free_r+0x90>
 800bb22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb26:	9001      	str	r0, [sp, #4]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	f1a1 0404 	sub.w	r4, r1, #4
 800bb2e:	bfb8      	it	lt
 800bb30:	18e4      	addlt	r4, r4, r3
 800bb32:	f7ff ff95 	bl	800ba60 <__malloc_lock>
 800bb36:	4a1e      	ldr	r2, [pc, #120]	; (800bbb0 <_free_r+0x94>)
 800bb38:	9801      	ldr	r0, [sp, #4]
 800bb3a:	6813      	ldr	r3, [r2, #0]
 800bb3c:	b933      	cbnz	r3, 800bb4c <_free_r+0x30>
 800bb3e:	6063      	str	r3, [r4, #4]
 800bb40:	6014      	str	r4, [r2, #0]
 800bb42:	b003      	add	sp, #12
 800bb44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb48:	f7ff bf90 	b.w	800ba6c <__malloc_unlock>
 800bb4c:	42a3      	cmp	r3, r4
 800bb4e:	d908      	bls.n	800bb62 <_free_r+0x46>
 800bb50:	6825      	ldr	r5, [r4, #0]
 800bb52:	1961      	adds	r1, r4, r5
 800bb54:	428b      	cmp	r3, r1
 800bb56:	bf01      	itttt	eq
 800bb58:	6819      	ldreq	r1, [r3, #0]
 800bb5a:	685b      	ldreq	r3, [r3, #4]
 800bb5c:	1949      	addeq	r1, r1, r5
 800bb5e:	6021      	streq	r1, [r4, #0]
 800bb60:	e7ed      	b.n	800bb3e <_free_r+0x22>
 800bb62:	461a      	mov	r2, r3
 800bb64:	685b      	ldr	r3, [r3, #4]
 800bb66:	b10b      	cbz	r3, 800bb6c <_free_r+0x50>
 800bb68:	42a3      	cmp	r3, r4
 800bb6a:	d9fa      	bls.n	800bb62 <_free_r+0x46>
 800bb6c:	6811      	ldr	r1, [r2, #0]
 800bb6e:	1855      	adds	r5, r2, r1
 800bb70:	42a5      	cmp	r5, r4
 800bb72:	d10b      	bne.n	800bb8c <_free_r+0x70>
 800bb74:	6824      	ldr	r4, [r4, #0]
 800bb76:	4421      	add	r1, r4
 800bb78:	1854      	adds	r4, r2, r1
 800bb7a:	42a3      	cmp	r3, r4
 800bb7c:	6011      	str	r1, [r2, #0]
 800bb7e:	d1e0      	bne.n	800bb42 <_free_r+0x26>
 800bb80:	681c      	ldr	r4, [r3, #0]
 800bb82:	685b      	ldr	r3, [r3, #4]
 800bb84:	6053      	str	r3, [r2, #4]
 800bb86:	440c      	add	r4, r1
 800bb88:	6014      	str	r4, [r2, #0]
 800bb8a:	e7da      	b.n	800bb42 <_free_r+0x26>
 800bb8c:	d902      	bls.n	800bb94 <_free_r+0x78>
 800bb8e:	230c      	movs	r3, #12
 800bb90:	6003      	str	r3, [r0, #0]
 800bb92:	e7d6      	b.n	800bb42 <_free_r+0x26>
 800bb94:	6825      	ldr	r5, [r4, #0]
 800bb96:	1961      	adds	r1, r4, r5
 800bb98:	428b      	cmp	r3, r1
 800bb9a:	bf04      	itt	eq
 800bb9c:	6819      	ldreq	r1, [r3, #0]
 800bb9e:	685b      	ldreq	r3, [r3, #4]
 800bba0:	6063      	str	r3, [r4, #4]
 800bba2:	bf04      	itt	eq
 800bba4:	1949      	addeq	r1, r1, r5
 800bba6:	6021      	streq	r1, [r4, #0]
 800bba8:	6054      	str	r4, [r2, #4]
 800bbaa:	e7ca      	b.n	800bb42 <_free_r+0x26>
 800bbac:	b003      	add	sp, #12
 800bbae:	bd30      	pop	{r4, r5, pc}
 800bbb0:	20005254 	.word	0x20005254

0800bbb4 <_init>:
 800bbb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbb6:	bf00      	nop
 800bbb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbba:	bc08      	pop	{r3}
 800bbbc:	469e      	mov	lr, r3
 800bbbe:	4770      	bx	lr

0800bbc0 <_fini>:
 800bbc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbc2:	bf00      	nop
 800bbc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbc6:	bc08      	pop	{r3}
 800bbc8:	469e      	mov	lr, r3
 800bbca:	4770      	bx	lr
