
thi-board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d80c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000021a4  0800d99c  0800d99c  0001d99c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fb40  0800fb40  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800fb40  0800fb40  0001fb40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fb48  0800fb48  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fb48  0800fb48  0001fb48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fb4c  0800fb4c  0001fb4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800fb50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          0000544c  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200054cc  200054cc  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00026e21  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005a4c  00000000  00000000  00046f14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001fa0  00000000  00000000  0004c960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001863  00000000  00000000  0004e900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00007d32  00000000  00000000  00050163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00027e06  00000000  00000000  00057e95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000df569  00000000  00000000  0007fc9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008b38  00000000  00000000  0015f204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00167d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d984 	.word	0x0800d984

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	0800d984 	.word	0x0800d984

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000590:	f001 faf2 	bl	8001b78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000594:	f000 f854 	bl	8000640 <SystemClock_Config>
   */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000598:	f000 fa06 	bl	80009a8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800059c:	f000 f8ba 	bl	8000714 <MX_I2C1_Init>
  MX_I2S3_Init();
 80005a0:	f000 f8e6 	bl	8000770 <MX_I2S3_Init>
  MX_SPI1_Init();
 80005a4:	f000 f914 	bl	80007d0 <MX_SPI1_Init>
  MX_TIM4_Init();
 80005a8:	f000 f948 	bl	800083c <MX_TIM4_Init>
  MX_TIM7_Init();
 80005ac:	f000 f9be 	bl	800092c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  mcpr_LCD_Init();
 80005b0:	f001 f860 	bl	8001674 <mcpr_LCD_Init>

  HAL_TIM_Base_Start(&htim7);
 80005b4:	4815      	ldr	r0, [pc, #84]	; (800060c <main+0x80>)
 80005b6:	f004 fec5 	bl	8005344 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80005ba:	2104      	movs	r1, #4
 80005bc:	4814      	ldr	r0, [pc, #80]	; (8000610 <main+0x84>)
 80005be:	f004 fff3 	bl	80055a8 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005c2:	f009 f985 	bl	80098d0 <osKernelInitialize>

  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of logQueue */
  logQueueHandle = osMessageQueueNew (16, sizeof(ThreadInfo), &logQueue_attributes);
 80005c6:	4a13      	ldr	r2, [pc, #76]	; (8000614 <main+0x88>)
 80005c8:	2129      	movs	r1, #41	; 0x29
 80005ca:	2010      	movs	r0, #16
 80005cc:	f009 fa9d 	bl	8009b0a <osMessageQueueNew>
 80005d0:	4603      	mov	r3, r0
 80005d2:	4a11      	ldr	r2, [pc, #68]	; (8000618 <main+0x8c>)
 80005d4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of IOControl */
  IOControlHandle = osThreadNew(IOControlTask, NULL, &IOControl_attributes);
 80005d6:	4a11      	ldr	r2, [pc, #68]	; (800061c <main+0x90>)
 80005d8:	2100      	movs	r1, #0
 80005da:	4811      	ldr	r0, [pc, #68]	; (8000620 <main+0x94>)
 80005dc:	f009 f9c2 	bl	8009964 <osThreadNew>
 80005e0:	4603      	mov	r3, r0
 80005e2:	4a10      	ldr	r2, [pc, #64]	; (8000624 <main+0x98>)
 80005e4:	6013      	str	r3, [r2, #0]

  /* creation of displayTask */
  displayTaskHandle = osThreadNew(StartDisplayTask, NULL, &displayTask_attributes);
 80005e6:	4a10      	ldr	r2, [pc, #64]	; (8000628 <main+0x9c>)
 80005e8:	2100      	movs	r1, #0
 80005ea:	4810      	ldr	r0, [pc, #64]	; (800062c <main+0xa0>)
 80005ec:	f009 f9ba 	bl	8009964 <osThreadNew>
 80005f0:	4603      	mov	r3, r0
 80005f2:	4a0f      	ldr	r2, [pc, #60]	; (8000630 <main+0xa4>)
 80005f4:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 80005f6:	4a0f      	ldr	r2, [pc, #60]	; (8000634 <main+0xa8>)
 80005f8:	2100      	movs	r1, #0
 80005fa:	480f      	ldr	r0, [pc, #60]	; (8000638 <main+0xac>)
 80005fc:	f009 f9b2 	bl	8009964 <osThreadNew>
 8000600:	4603      	mov	r3, r0
 8000602:	4a0e      	ldr	r2, [pc, #56]	; (800063c <main+0xb0>)
 8000604:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000606:	f009 f987 	bl	8009918 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800060a:	e7fe      	b.n	800060a <main+0x7e>
 800060c:	200001d8 	.word	0x200001d8
 8000610:	20000190 	.word	0x20000190
 8000614:	0800dadc 	.word	0x0800dadc
 8000618:	2000022c 	.word	0x2000022c
 800061c:	0800da70 	.word	0x0800da70
 8000620:	08000ba5 	.word	0x08000ba5
 8000624:	20000220 	.word	0x20000220
 8000628:	0800da94 	.word	0x0800da94
 800062c:	08000d09 	.word	0x08000d09
 8000630:	20000224 	.word	0x20000224
 8000634:	0800dab8 	.word	0x0800dab8
 8000638:	08000e0d 	.word	0x08000e0d
 800063c:	20000228 	.word	0x20000228

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b094      	sub	sp, #80	; 0x50
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0320 	add.w	r3, r7, #32
 800064a:	2230      	movs	r2, #48	; 0x30
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f00c fd4e 	bl	800d0f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000664:	2300      	movs	r3, #0
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	4b28      	ldr	r3, [pc, #160]	; (800070c <SystemClock_Config+0xcc>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066c:	4a27      	ldr	r2, [pc, #156]	; (800070c <SystemClock_Config+0xcc>)
 800066e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000672:	6413      	str	r3, [r2, #64]	; 0x40
 8000674:	4b25      	ldr	r3, [pc, #148]	; (800070c <SystemClock_Config+0xcc>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000680:	2300      	movs	r3, #0
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	4b22      	ldr	r3, [pc, #136]	; (8000710 <SystemClock_Config+0xd0>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a21      	ldr	r2, [pc, #132]	; (8000710 <SystemClock_Config+0xd0>)
 800068a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	4b1f      	ldr	r3, [pc, #124]	; (8000710 <SystemClock_Config+0xd0>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800069c:	2301      	movs	r3, #1
 800069e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a6:	2302      	movs	r3, #2
 80006a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006b0:	2308      	movs	r3, #8
 80006b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006b4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ba:	2302      	movs	r3, #2
 80006bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006be:	2307      	movs	r3, #7
 80006c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c2:	f107 0320 	add.w	r3, r7, #32
 80006c6:	4618      	mov	r0, r3
 80006c8:	f003 ff5a 	bl	8004580 <HAL_RCC_OscConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006d2:	f000 fbef 	bl	8000eb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d6:	230f      	movs	r3, #15
 80006d8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006da:	2302      	movs	r3, #2
 80006dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006ee:	f107 030c 	add.w	r3, r7, #12
 80006f2:	2105      	movs	r1, #5
 80006f4:	4618      	mov	r0, r3
 80006f6:	f004 f9bb 	bl	8004a70 <HAL_RCC_ClockConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000700:	f000 fbd8 	bl	8000eb4 <Error_Handler>
  }
}
 8000704:	bf00      	nop
 8000706:	3750      	adds	r7, #80	; 0x50
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40023800 	.word	0x40023800
 8000710:	40007000 	.word	0x40007000

08000714 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <MX_I2C1_Init+0x50>)
 800071a:	4a13      	ldr	r2, [pc, #76]	; (8000768 <MX_I2C1_Init+0x54>)
 800071c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_I2C1_Init+0x50>)
 8000720:	4a12      	ldr	r2, [pc, #72]	; (800076c <MX_I2C1_Init+0x58>)
 8000722:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000724:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <MX_I2C1_Init+0x50>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <MX_I2C1_Init+0x50>)
 800072c:	2200      	movs	r2, #0
 800072e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000730:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <MX_I2C1_Init+0x50>)
 8000732:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000736:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000738:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <MX_I2C1_Init+0x50>)
 800073a:	2200      	movs	r2, #0
 800073c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800073e:	4b09      	ldr	r3, [pc, #36]	; (8000764 <MX_I2C1_Init+0x50>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000744:	4b07      	ldr	r3, [pc, #28]	; (8000764 <MX_I2C1_Init+0x50>)
 8000746:	2200      	movs	r2, #0
 8000748:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <MX_I2C1_Init+0x50>)
 800074c:	2200      	movs	r2, #0
 800074e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000750:	4804      	ldr	r0, [pc, #16]	; (8000764 <MX_I2C1_Init+0x50>)
 8000752:	f003 f931 	bl	80039b8 <HAL_I2C_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800075c:	f000 fbaa 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	2000009c 	.word	0x2000009c
 8000768:	40005400 	.word	0x40005400
 800076c:	000186a0 	.word	0x000186a0

08000770 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000774:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <MX_I2S3_Init+0x54>)
 8000776:	4a14      	ldr	r2, [pc, #80]	; (80007c8 <MX_I2S3_Init+0x58>)
 8000778:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800077a:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <MX_I2S3_Init+0x54>)
 800077c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000780:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <MX_I2S3_Init+0x54>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000788:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_I2S3_Init+0x54>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800078e:	4b0d      	ldr	r3, [pc, #52]	; (80007c4 <MX_I2S3_Init+0x54>)
 8000790:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000794:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000796:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <MX_I2S3_Init+0x54>)
 8000798:	4a0c      	ldr	r2, [pc, #48]	; (80007cc <MX_I2S3_Init+0x5c>)
 800079a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MX_I2S3_Init+0x54>)
 800079e:	2200      	movs	r2, #0
 80007a0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <MX_I2S3_Init+0x54>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_I2S3_Init+0x54>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_I2S3_Init+0x54>)
 80007b0:	f003 fa46 	bl	8003c40 <HAL_I2S_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007ba:	f000 fb7b 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200000f0 	.word	0x200000f0
 80007c8:	40003c00 	.word	0x40003c00
 80007cc:	00017700 	.word	0x00017700

080007d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007d4:	4b17      	ldr	r3, [pc, #92]	; (8000834 <MX_SPI1_Init+0x64>)
 80007d6:	4a18      	ldr	r2, [pc, #96]	; (8000838 <MX_SPI1_Init+0x68>)
 80007d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007da:	4b16      	ldr	r3, [pc, #88]	; (8000834 <MX_SPI1_Init+0x64>)
 80007dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007e2:	4b14      	ldr	r3, [pc, #80]	; (8000834 <MX_SPI1_Init+0x64>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007e8:	4b12      	ldr	r3, [pc, #72]	; (8000834 <MX_SPI1_Init+0x64>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ee:	4b11      	ldr	r3, [pc, #68]	; (8000834 <MX_SPI1_Init+0x64>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007f4:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <MX_SPI1_Init+0x64>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <MX_SPI1_Init+0x64>)
 80007fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000800:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000802:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <MX_SPI1_Init+0x64>)
 8000804:	2200      	movs	r2, #0
 8000806:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000808:	4b0a      	ldr	r3, [pc, #40]	; (8000834 <MX_SPI1_Init+0x64>)
 800080a:	2200      	movs	r2, #0
 800080c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800080e:	4b09      	ldr	r3, [pc, #36]	; (8000834 <MX_SPI1_Init+0x64>)
 8000810:	2200      	movs	r2, #0
 8000812:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000814:	4b07      	ldr	r3, [pc, #28]	; (8000834 <MX_SPI1_Init+0x64>)
 8000816:	2200      	movs	r2, #0
 8000818:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800081a:	4b06      	ldr	r3, [pc, #24]	; (8000834 <MX_SPI1_Init+0x64>)
 800081c:	220a      	movs	r2, #10
 800081e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000820:	4804      	ldr	r0, [pc, #16]	; (8000834 <MX_SPI1_Init+0x64>)
 8000822:	f004 fcb7 	bl	8005194 <HAL_SPI_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800082c:	f000 fb42 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000830:	bf00      	nop
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000138 	.word	0x20000138
 8000838:	40013000 	.word	0x40013000

0800083c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08e      	sub	sp, #56	; 0x38
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000842:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000850:	f107 0320 	add.w	r3, r7, #32
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]
 8000868:	615a      	str	r2, [r3, #20]
 800086a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800086c:	4b2d      	ldr	r3, [pc, #180]	; (8000924 <MX_TIM4_Init+0xe8>)
 800086e:	4a2e      	ldr	r2, [pc, #184]	; (8000928 <MX_TIM4_Init+0xec>)
 8000870:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 419;
 8000872:	4b2c      	ldr	r3, [pc, #176]	; (8000924 <MX_TIM4_Init+0xe8>)
 8000874:	f240 12a3 	movw	r2, #419	; 0x1a3
 8000878:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800087a:	4b2a      	ldr	r3, [pc, #168]	; (8000924 <MX_TIM4_Init+0xe8>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000880:	4b28      	ldr	r3, [pc, #160]	; (8000924 <MX_TIM4_Init+0xe8>)
 8000882:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000886:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000888:	4b26      	ldr	r3, [pc, #152]	; (8000924 <MX_TIM4_Init+0xe8>)
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800088e:	4b25      	ldr	r3, [pc, #148]	; (8000924 <MX_TIM4_Init+0xe8>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000894:	4823      	ldr	r0, [pc, #140]	; (8000924 <MX_TIM4_Init+0xe8>)
 8000896:	f004 fd06 	bl	80052a6 <HAL_TIM_Base_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80008a0:	f000 fb08 	bl	8000eb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80008aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008ae:	4619      	mov	r1, r3
 80008b0:	481c      	ldr	r0, [pc, #112]	; (8000924 <MX_TIM4_Init+0xe8>)
 80008b2:	f005 f90b 	bl	8005acc <HAL_TIM_ConfigClockSource>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80008bc:	f000 fafa 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80008c0:	4818      	ldr	r0, [pc, #96]	; (8000924 <MX_TIM4_Init+0xe8>)
 80008c2:	f004 fe17 	bl	80054f4 <HAL_TIM_PWM_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80008cc:	f000 faf2 	bl	8000eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d0:	2300      	movs	r3, #0
 80008d2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d4:	2300      	movs	r3, #0
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008d8:	f107 0320 	add.w	r3, r7, #32
 80008dc:	4619      	mov	r1, r3
 80008de:	4811      	ldr	r0, [pc, #68]	; (8000924 <MX_TIM4_Init+0xe8>)
 80008e0:	f005 fcf4 	bl	80062cc <HAL_TIMEx_MasterConfigSynchronization>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80008ea:	f000 fae3 	bl	8000eb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008ee:	2360      	movs	r3, #96	; 0x60
 80008f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 999;
 80008f2:	f240 33e7 	movw	r3, #999	; 0x3e7
 80008f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008f8:	2300      	movs	r3, #0
 80008fa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008fc:	2300      	movs	r3, #0
 80008fe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000900:	1d3b      	adds	r3, r7, #4
 8000902:	2204      	movs	r2, #4
 8000904:	4619      	mov	r1, r3
 8000906:	4807      	ldr	r0, [pc, #28]	; (8000924 <MX_TIM4_Init+0xe8>)
 8000908:	f005 f81e 	bl	8005948 <HAL_TIM_PWM_ConfigChannel>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000912:	f000 facf 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000916:	4803      	ldr	r0, [pc, #12]	; (8000924 <MX_TIM4_Init+0xe8>)
 8000918:	f000 fc4c 	bl	80011b4 <HAL_TIM_MspPostInit>

}
 800091c:	bf00      	nop
 800091e:	3738      	adds	r7, #56	; 0x38
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000190 	.word	0x20000190
 8000928:	40000800 	.word	0x40000800

0800092c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000932:	463b      	mov	r3, r7
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800093a:	4b19      	ldr	r3, [pc, #100]	; (80009a0 <MX_TIM7_Init+0x74>)
 800093c:	4a19      	ldr	r2, [pc, #100]	; (80009a4 <MX_TIM7_Init+0x78>)
 800093e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 8000940:	4b17      	ldr	r3, [pc, #92]	; (80009a0 <MX_TIM7_Init+0x74>)
 8000942:	2253      	movs	r2, #83	; 0x53
 8000944:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000946:	4b16      	ldr	r3, [pc, #88]	; (80009a0 <MX_TIM7_Init+0x74>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 800094c:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <MX_TIM7_Init+0x74>)
 800094e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000952:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000954:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <MX_TIM7_Init+0x74>)
 8000956:	2200      	movs	r2, #0
 8000958:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800095a:	4811      	ldr	r0, [pc, #68]	; (80009a0 <MX_TIM7_Init+0x74>)
 800095c:	f004 fca3 	bl	80052a6 <HAL_TIM_Base_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000966:	f000 faa5 	bl	8000eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800096a:	2320      	movs	r3, #32
 800096c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800096e:	2300      	movs	r3, #0
 8000970:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000972:	463b      	mov	r3, r7
 8000974:	4619      	mov	r1, r3
 8000976:	480a      	ldr	r0, [pc, #40]	; (80009a0 <MX_TIM7_Init+0x74>)
 8000978:	f005 fca8 	bl	80062cc <HAL_TIMEx_MasterConfigSynchronization>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000982:	f000 fa97 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* Set UIE Flag - trigger interrupt on ARR overflow */
  __HAL_TIM_ENABLE_IT(&htim7, TIM_IT_UPDATE);
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <MX_TIM7_Init+0x74>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	68da      	ldr	r2, [r3, #12]
 800098c:	4b04      	ldr	r3, [pc, #16]	; (80009a0 <MX_TIM7_Init+0x74>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f042 0201 	orr.w	r2, r2, #1
 8000994:	60da      	str	r2, [r3, #12]
  /* USER CODE END TIM7_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	200001d8 	.word	0x200001d8
 80009a4:	40001400 	.word	0x40001400

080009a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08c      	sub	sp, #48	; 0x30
 80009ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]
 80009bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	61bb      	str	r3, [r7, #24]
 80009c2:	4b72      	ldr	r3, [pc, #456]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a71      	ldr	r2, [pc, #452]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 80009c8:	f043 0310 	orr.w	r3, r3, #16
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b6f      	ldr	r3, [pc, #444]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0310 	and.w	r3, r3, #16
 80009d6:	61bb      	str	r3, [r7, #24]
 80009d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	617b      	str	r3, [r7, #20]
 80009de:	4b6b      	ldr	r3, [pc, #428]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a6a      	ldr	r2, [pc, #424]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 80009e4:	f043 0304 	orr.w	r3, r3, #4
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b68      	ldr	r3, [pc, #416]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0304 	and.w	r3, r3, #4
 80009f2:	617b      	str	r3, [r7, #20]
 80009f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	613b      	str	r3, [r7, #16]
 80009fa:	4b64      	ldr	r3, [pc, #400]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a63      	ldr	r2, [pc, #396]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 8000a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b61      	ldr	r3, [pc, #388]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	4b5d      	ldr	r3, [pc, #372]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a5c      	ldr	r2, [pc, #368]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b5a      	ldr	r3, [pc, #360]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	4b56      	ldr	r3, [pc, #344]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a55      	ldr	r2, [pc, #340]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 8000a38:	f043 0302 	orr.w	r3, r3, #2
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b53      	ldr	r3, [pc, #332]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0302 	and.w	r3, r3, #2
 8000a46:	60bb      	str	r3, [r7, #8]
 8000a48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	4b4f      	ldr	r3, [pc, #316]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a4e      	ldr	r2, [pc, #312]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 8000a54:	f043 0308 	orr.w	r3, r3, #8
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b4c      	ldr	r3, [pc, #304]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0308 	and.w	r3, r3, #8
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2108      	movs	r1, #8
 8000a6a:	4849      	ldr	r0, [pc, #292]	; (8000b90 <MX_GPIO_Init+0x1e8>)
 8000a6c:	f001 fb80 	bl	8002170 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a70:	2201      	movs	r2, #1
 8000a72:	2101      	movs	r1, #1
 8000a74:	4847      	ldr	r0, [pc, #284]	; (8000b94 <MX_GPIO_Init+0x1ec>)
 8000a76:	f001 fb7b 	bl	8002170 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD5_Pin|LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f24d 0110 	movw	r1, #53264	; 0xd010
 8000a80:	4845      	ldr	r0, [pc, #276]	; (8000b98 <MX_GPIO_Init+0x1f0>)
 8000a82:	f001 fb75 	bl	8002170 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a86:	2308      	movs	r3, #8
 8000a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	483c      	ldr	r0, [pc, #240]	; (8000b90 <MX_GPIO_Init+0x1e8>)
 8000a9e:	f001 f9b3 	bl	8001e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ab2:	f107 031c 	add.w	r3, r7, #28
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4836      	ldr	r0, [pc, #216]	; (8000b94 <MX_GPIO_Init+0x1ec>)
 8000aba:	f001 f9a5 	bl	8001e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000abe:	2308      	movs	r3, #8
 8000ac0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aca:	2300      	movs	r3, #0
 8000acc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ace:	2305      	movs	r3, #5
 8000ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	f107 031c 	add.w	r3, r7, #28
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	482e      	ldr	r0, [pc, #184]	; (8000b94 <MX_GPIO_Init+0x1ec>)
 8000ada:	f001 f995 	bl	8001e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ae2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000ae6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aec:	f107 031c 	add.w	r3, r7, #28
 8000af0:	4619      	mov	r1, r3
 8000af2:	482a      	ldr	r0, [pc, #168]	; (8000b9c <MX_GPIO_Init+0x1f4>)
 8000af4:	f001 f988 	bl	8001e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000af8:	2304      	movs	r3, #4
 8000afa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000afc:	2300      	movs	r3, #0
 8000afe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000b04:	f107 031c 	add.w	r3, r7, #28
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4825      	ldr	r0, [pc, #148]	; (8000ba0 <MX_GPIO_Init+0x1f8>)
 8000b0c:	f001 f97c 	bl	8001e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000b10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b16:	2302      	movs	r3, #2
 8000b18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b22:	2305      	movs	r3, #5
 8000b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000b26:	f107 031c 	add.w	r3, r7, #28
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	481c      	ldr	r0, [pc, #112]	; (8000ba0 <MX_GPIO_Init+0x1f8>)
 8000b2e:	f001 f96b 	bl	8001e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD5_Pin LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD5_Pin|LD6_Pin|Audio_RST_Pin;
 8000b32:	f24d 0310 	movw	r3, #53264	; 0xd010
 8000b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b44:	f107 031c 	add.w	r3, r7, #28
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4813      	ldr	r0, [pc, #76]	; (8000b98 <MX_GPIO_Init+0x1f0>)
 8000b4c:	f001 f95c 	bl	8001e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b50:	2320      	movs	r3, #32
 8000b52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b54:	2300      	movs	r3, #0
 8000b56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b5c:	f107 031c 	add.w	r3, r7, #28
 8000b60:	4619      	mov	r1, r3
 8000b62:	480d      	ldr	r0, [pc, #52]	; (8000b98 <MX_GPIO_Init+0x1f0>)
 8000b64:	f001 f950 	bl	8001e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b6c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b76:	f107 031c 	add.w	r3, r7, #28
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4804      	ldr	r0, [pc, #16]	; (8000b90 <MX_GPIO_Init+0x1e8>)
 8000b7e:	f001 f943 	bl	8001e08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b82:	bf00      	nop
 8000b84:	3730      	adds	r7, #48	; 0x30
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40021000 	.word	0x40021000
 8000b94:	40020800 	.word	0x40020800
 8000b98:	40020c00 	.word	0x40020c00
 8000b9c:	40020000 	.word	0x40020000
 8000ba0:	40020400 	.word	0x40020400

08000ba4 <IOControlTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_IOControlTask */
void IOControlTask(void *argument)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b090      	sub	sp, #64	; 0x40
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000bac:	f00b feae 	bl	800c90c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  uint8_t cnt = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t newDutyCycle = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	63bb      	str	r3, [r7, #56]	; 0x38
  ThreadInfo tInfo;

  /* RFC 1925 2.1: "It Has To Work" */
  strcpy(tInfo.threadName, osThreadGetName(osThreadGetId()));
 8000bba:	f008 ff80 	bl	8009abe <osThreadGetId>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f008 ff61 	bl	8009a88 <osThreadGetName>
 8000bc6:	4602      	mov	r2, r0
 8000bc8:	f107 030c 	add.w	r3, r7, #12
 8000bcc:	3314      	adds	r3, #20
 8000bce:	4611      	mov	r1, r2
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f00c fb3b 	bl	800d24c <strcpy>

  /* Infinite loop */
  for (;;)
  {

    if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) != GPIO_PIN_RESET && buttonReleased)
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	4842      	ldr	r0, [pc, #264]	; (8000ce4 <IOControlTask+0x140>)
 8000bda:	f001 fab1 	bl	8002140 <HAL_GPIO_ReadPin>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d06b      	beq.n	8000cbc <IOControlTask+0x118>
 8000be4:	4b40      	ldr	r3, [pc, #256]	; (8000ce8 <IOControlTask+0x144>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d066      	beq.n	8000cbc <IOControlTask+0x118>
    {
      /* Lock */
  	  buttonReleased = false;
 8000bee:	4b3e      	ldr	r3, [pc, #248]	; (8000ce8 <IOControlTask+0x144>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	701a      	strb	r2, [r3, #0]

  	  /* Clear message buffer */
  	  memset((void*)tInfo.msg_buf, 0, MAX_STR_LEN);
 8000bf4:	f107 030c 	add.w	r3, r7, #12
 8000bf8:	2214      	movs	r2, #20
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f00c fa77 	bl	800d0f0 <memset>

  	  /* continuous count for changing brightness */
      cnt = (cnt + 1) % 4;
 8000c02:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000c06:	3301      	adds	r3, #1
 8000c08:	425a      	negs	r2, r3
 8000c0a:	f003 0303 	and.w	r3, r3, #3
 8000c0e:	f002 0203 	and.w	r2, r2, #3
 8000c12:	bf58      	it	pl
 8000c14:	4253      	negpl	r3, r2
 8000c16:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  	  switch (cnt)
 8000c1a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000c1e:	2b03      	cmp	r3, #3
 8000c20:	d835      	bhi.n	8000c8e <IOControlTask+0xea>
 8000c22:	a201      	add	r2, pc, #4	; (adr r2, 8000c28 <IOControlTask+0x84>)
 8000c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c28:	08000c39 	.word	0x08000c39
 8000c2c:	08000c4f 	.word	0x08000c4f
 8000c30:	08000c65 	.word	0x08000c65
 8000c34:	08000c7b 	.word	0x08000c7b
  	  {
  		case 0:
  			newDutyCycle = 1000;
 8000c38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c3c:	63bb      	str	r3, [r7, #56]	; 0x38
  			strncpy(tInfo.msg_buf, "Brightness: 100%", MAX_STR_LEN);
 8000c3e:	f107 030c 	add.w	r3, r7, #12
 8000c42:	2214      	movs	r2, #20
 8000c44:	4929      	ldr	r1, [pc, #164]	; (8000cec <IOControlTask+0x148>)
 8000c46:	4618      	mov	r0, r3
 8000c48:	f00c fa5a 	bl	800d100 <strncpy>
  			break;
 8000c4c:	e029      	b.n	8000ca2 <IOControlTask+0xfe>

  		case 1:
  			newDutyCycle = 750;
 8000c4e:	f240 23ee 	movw	r3, #750	; 0x2ee
 8000c52:	63bb      	str	r3, [r7, #56]	; 0x38
  			strncpy(tInfo.msg_buf, "Brightness: 75%", MAX_STR_LEN);
 8000c54:	f107 030c 	add.w	r3, r7, #12
 8000c58:	2214      	movs	r2, #20
 8000c5a:	4925      	ldr	r1, [pc, #148]	; (8000cf0 <IOControlTask+0x14c>)
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f00c fa4f 	bl	800d100 <strncpy>
  			break;
 8000c62:	e01e      	b.n	8000ca2 <IOControlTask+0xfe>

  		case 2:
  			newDutyCycle = 500;
 8000c64:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c68:	63bb      	str	r3, [r7, #56]	; 0x38
  			strncpy(tInfo.msg_buf, "Brightness: 50%", MAX_STR_LEN);
 8000c6a:	f107 030c 	add.w	r3, r7, #12
 8000c6e:	2214      	movs	r2, #20
 8000c70:	4920      	ldr	r1, [pc, #128]	; (8000cf4 <IOControlTask+0x150>)
 8000c72:	4618      	mov	r0, r3
 8000c74:	f00c fa44 	bl	800d100 <strncpy>
  			break;
 8000c78:	e013      	b.n	8000ca2 <IOControlTask+0xfe>

  		case 3:
  			newDutyCycle = 250;
 8000c7a:	23fa      	movs	r3, #250	; 0xfa
 8000c7c:	63bb      	str	r3, [r7, #56]	; 0x38
  			strncpy(tInfo.msg_buf, "Brightness: 25%", MAX_STR_LEN);
 8000c7e:	f107 030c 	add.w	r3, r7, #12
 8000c82:	2214      	movs	r2, #20
 8000c84:	491c      	ldr	r1, [pc, #112]	; (8000cf8 <IOControlTask+0x154>)
 8000c86:	4618      	mov	r0, r3
 8000c88:	f00c fa3a 	bl	800d100 <strncpy>
  			break;
 8000c8c:	e009      	b.n	8000ca2 <IOControlTask+0xfe>

  	    default:
  			newDutyCycle = 0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	63bb      	str	r3, [r7, #56]	; 0x38
  			strncpy(tInfo.msg_buf, "Brightness: 0%", MAX_STR_LEN);
 8000c92:	f107 030c 	add.w	r3, r7, #12
 8000c96:	2214      	movs	r2, #20
 8000c98:	4918      	ldr	r1, [pc, #96]	; (8000cfc <IOControlTask+0x158>)
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f00c fa30 	bl	800d100 <strncpy>
  			break;
 8000ca0:	bf00      	nop
  	    }

  	    /* Set CCR2 Value */
  	    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, newDutyCycle);
 8000ca2:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <IOControlTask+0x15c>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000ca8:	639a      	str	r2, [r3, #56]	; 0x38

  	    /* Add message to Queue */
  	    osMessageQueuePut(logQueueHandle, (void*)&tInfo, 0, 100);
 8000caa:	4b16      	ldr	r3, [pc, #88]	; (8000d04 <IOControlTask+0x160>)
 8000cac:	6818      	ldr	r0, [r3, #0]
 8000cae:	f107 010c 	add.w	r1, r7, #12
 8000cb2:	2364      	movs	r3, #100	; 0x64
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f008 ff9b 	bl	8009bf0 <osMessageQueuePut>
 8000cba:	e00e      	b.n	8000cda <IOControlTask+0x136>

      }
  	  else if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	4809      	ldr	r0, [pc, #36]	; (8000ce4 <IOControlTask+0x140>)
 8000cc0:	f001 fa3e 	bl	8002140 <HAL_GPIO_ReadPin>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d107      	bne.n	8000cda <IOControlTask+0x136>
  	  {
  		if (!buttonReleased)
 8000cca:	4b07      	ldr	r3, [pc, #28]	; (8000ce8 <IOControlTask+0x144>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d102      	bne.n	8000cda <IOControlTask+0x136>
  			buttonReleased = true;
 8000cd4:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <IOControlTask+0x144>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	701a      	strb	r2, [r3, #0]
  	  }
  	osDelay(pdMS_TO_TICKS(1));
 8000cda:	2001      	movs	r0, #1
 8000cdc:	f008 fefa 	bl	8009ad4 <osDelay>
    if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) != GPIO_PIN_RESET && buttonReleased)
 8000ce0:	e779      	b.n	8000bd6 <IOControlTask+0x32>
 8000ce2:	bf00      	nop
 8000ce4:	40020000 	.word	0x40020000
 8000ce8:	20000234 	.word	0x20000234
 8000cec:	0800d9cc 	.word	0x0800d9cc
 8000cf0:	0800d9e0 	.word	0x0800d9e0
 8000cf4:	0800d9f0 	.word	0x0800d9f0
 8000cf8:	0800da00 	.word	0x0800da00
 8000cfc:	0800da10 	.word	0x0800da10
 8000d00:	20000190 	.word	0x20000190
 8000d04:	2000022c 	.word	0x2000022c

08000d08 <StartDisplayTask>:
* @param argument: Not use
* @retval None
*/
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void *argument)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b090      	sub	sp, #64	; 0x40
 8000d0c:	af02      	add	r7, sp, #8
 8000d0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayTask */
  ThreadInfo tInfo;
  osStatus_t status;

  mcpr_LCD_ClearDisplay(LCD_BLACK);
 8000d10:	2000      	movs	r0, #0
 8000d12:	f000 fd45 	bl	80017a0 <mcpr_LCD_ClearDisplay>

  mcpr_LCD_WriteString(10, 20, LCD_WHITE, LCD_BLACK, "Task 1: ");
 8000d16:	4b38      	ldr	r3, [pc, #224]	; (8000df8 <StartDisplayTask+0xf0>)
 8000d18:	9300      	str	r3, [sp, #0]
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d20:	2114      	movs	r1, #20
 8000d22:	200a      	movs	r0, #10
 8000d24:	f000 fdde 	bl	80018e4 <mcpr_LCD_WriteString>
  mcpr_LCD_WriteString(10, 100, LCD_WHITE, LCD_BLACK, "Task 2: ");
 8000d28:	4b34      	ldr	r3, [pc, #208]	; (8000dfc <StartDisplayTask+0xf4>)
 8000d2a:	9300      	str	r3, [sp, #0]
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d32:	2164      	movs	r1, #100	; 0x64
 8000d34:	200a      	movs	r0, #10
 8000d36:	f000 fdd5 	bl	80018e4 <mcpr_LCD_WriteString>

  /* Infinite loop */
  for(;;)
  {
	  if (osMessageQueueGetCount(logQueueHandle) > 0)
 8000d3a:	4b31      	ldr	r3, [pc, #196]	; (8000e00 <StartDisplayTask+0xf8>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f009 f814 	bl	8009d6c <osMessageQueueGetCount>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d051      	beq.n	8000dee <StartDisplayTask+0xe6>
	  {
		  status = osMessageQueueGet(logQueueHandle, (void*)&tInfo, 0, 100);
 8000d4a:	4b2d      	ldr	r3, [pc, #180]	; (8000e00 <StartDisplayTask+0xf8>)
 8000d4c:	6818      	ldr	r0, [r3, #0]
 8000d4e:	f107 0108 	add.w	r1, r7, #8
 8000d52:	2364      	movs	r3, #100	; 0x64
 8000d54:	2200      	movs	r2, #0
 8000d56:	f008 ffab 	bl	8009cb0 <osMessageQueueGet>
 8000d5a:	6378      	str	r0, [r7, #52]	; 0x34

		  /* Message was received successfully and stored in log */
		  if (status == osOK)
 8000d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d145      	bne.n	8000dee <StartDisplayTask+0xe6>
		  {
			  /* A message was received from IOControl Thread */
			  if (strcmp(tInfo.threadName, displayTask_attributes.name) == 0)
 8000d62:	4a28      	ldr	r2, [pc, #160]	; (8000e04 <StartDisplayTask+0xfc>)
 8000d64:	f107 0308 	add.w	r3, r7, #8
 8000d68:	3314      	adds	r3, #20
 8000d6a:	4611      	mov	r1, r2
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fa2f 	bl	80001d0 <strcmp>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d117      	bne.n	8000da8 <StartDisplayTask+0xa0>
			  {
				  /* Task1 will be printed on y: 100 to 120*/
				  mcpr_LCD_ClearLine(100, 120, LCD_BLACK);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2178      	movs	r1, #120	; 0x78
 8000d7c:	2064      	movs	r0, #100	; 0x64
 8000d7e:	f000 fd2b 	bl	80017d8 <mcpr_LCD_ClearLine>
				  mcpr_LCD_WriteString(10, 20, LCD_WHITE, LCD_BLACK, "Task 1: ");
 8000d82:	4b1d      	ldr	r3, [pc, #116]	; (8000df8 <StartDisplayTask+0xf0>)
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	2300      	movs	r3, #0
 8000d88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d8c:	2114      	movs	r1, #20
 8000d8e:	200a      	movs	r0, #10
 8000d90:	f000 fda8 	bl	80018e4 <mcpr_LCD_WriteString>
				  mcpr_LCD_WriteString(100, 20, LCD_WHITE, LCD_BLACK, tInfo.msg_buf);
 8000d94:	f107 0308 	add.w	r3, r7, #8
 8000d98:	9300      	str	r3, [sp, #0]
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000da0:	2114      	movs	r1, #20
 8000da2:	2064      	movs	r0, #100	; 0x64
 8000da4:	f000 fd9e 	bl	80018e4 <mcpr_LCD_WriteString>
			  }
			  /*else*/ if (strcmp(tInfo.threadName, myTask03_attributes.name) == 0)
 8000da8:	4a17      	ldr	r2, [pc, #92]	; (8000e08 <StartDisplayTask+0x100>)
 8000daa:	f107 0308 	add.w	r3, r7, #8
 8000dae:	3314      	adds	r3, #20
 8000db0:	4611      	mov	r1, r2
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff fa0c 	bl	80001d0 <strcmp>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d117      	bne.n	8000dee <StartDisplayTask+0xe6>
			  {
				  /* Task1 will be printed on y: 140 to 160*/
				  mcpr_LCD_ClearLine(100, 160, LCD_BLACK);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	21a0      	movs	r1, #160	; 0xa0
 8000dc2:	2064      	movs	r0, #100	; 0x64
 8000dc4:	f000 fd08 	bl	80017d8 <mcpr_LCD_ClearLine>
				  mcpr_LCD_WriteString(10, 100, LCD_WHITE, LCD_BLACK, "Task 2: ");
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <StartDisplayTask+0xf4>)
 8000dca:	9300      	str	r3, [sp, #0]
 8000dcc:	2300      	movs	r3, #0
 8000dce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dd2:	2164      	movs	r1, #100	; 0x64
 8000dd4:	200a      	movs	r0, #10
 8000dd6:	f000 fd85 	bl	80018e4 <mcpr_LCD_WriteString>
				  mcpr_LCD_WriteString(100, 100, LCD_WHITE, LCD_BLACK, tInfo.msg_buf);
 8000dda:	f107 0308 	add.w	r3, r7, #8
 8000dde:	9300      	str	r3, [sp, #0]
 8000de0:	2300      	movs	r3, #0
 8000de2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000de6:	2164      	movs	r1, #100	; 0x64
 8000de8:	2064      	movs	r0, #100	; 0x64
 8000dea:	f000 fd7b 	bl	80018e4 <mcpr_LCD_WriteString>
		  {
			  /* Error Handling */
		  }
	  }
	  /* 25 Hz Refresh Rate - FreeRTOS clock rate: 1000Hz */
	  osDelay(pdMS_TO_TICKS(40));
 8000dee:	2028      	movs	r0, #40	; 0x28
 8000df0:	f008 fe70 	bl	8009ad4 <osDelay>
	  if (osMessageQueueGetCount(logQueueHandle) > 0)
 8000df4:	e7a1      	b.n	8000d3a <StartDisplayTask+0x32>
 8000df6:	bf00      	nop
 8000df8:	0800da20 	.word	0x0800da20
 8000dfc:	0800da2c 	.word	0x0800da2c
 8000e00:	2000022c 	.word	0x2000022c
 8000e04:	0800d9a8 	.word	0x0800d9a8
 8000e08:	0800d9b4 	.word	0x0800d9b4

08000e0c <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08e      	sub	sp, #56	; 0x38
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  ThreadInfo tInfo;

  /* RFC 1925 2.1: "It Has To Work" */
  strcpy(tInfo.threadName, osThreadGetName(osThreadGetId()));
 8000e14:	f008 fe53 	bl	8009abe <osThreadGetId>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f008 fe34 	bl	8009a88 <osThreadGetName>
 8000e20:	4602      	mov	r2, r0
 8000e22:	f107 030c 	add.w	r3, r7, #12
 8000e26:	3314      	adds	r3, #20
 8000e28:	4611      	mov	r1, r2
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f00c fa0e 	bl	800d24c <strcpy>

  /* Infinite loop */
  for(;;)
  {
	  /* Clear message buffer */
	  memset((void*)tInfo.msg_buf, 0, MAX_STR_LEN);
 8000e30:	f107 030c 	add.w	r3, r7, #12
 8000e34:	2214      	movs	r2, #20
 8000e36:	2100      	movs	r1, #0
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f00c f959 	bl	800d0f0 <memset>

	  /* Write message into buffer */
	  snprintf(tInfo.msg_buf, MAX_STR_LEN, "ms_counter: %ld", ms_counter);
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <StartTask03+0x5c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f107 000c 	add.w	r0, r7, #12
 8000e46:	4a09      	ldr	r2, [pc, #36]	; (8000e6c <StartTask03+0x60>)
 8000e48:	2114      	movs	r1, #20
 8000e4a:	f00c f91d 	bl	800d088 <sniprintf>

	  /* Add message to Queue */
	  if (osMessageQueuePut(logQueueHandle, (void*)&tInfo, 0, 100) != osOK)
 8000e4e:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <StartTask03+0x64>)
 8000e50:	6818      	ldr	r0, [r3, #0]
 8000e52:	f107 010c 	add.w	r1, r7, #12
 8000e56:	2364      	movs	r3, #100	; 0x64
 8000e58:	2200      	movs	r2, #0
 8000e5a:	f008 fec9 	bl	8009bf0 <osMessageQueuePut>
	  {
		  /* Error Handling */
	  }

	  /* let this task run every 1000ms */
	  osDelay(pdMS_TO_TICKS(1000));
 8000e5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e62:	f008 fe37 	bl	8009ad4 <osDelay>
	  memset((void*)tInfo.msg_buf, 0, MAX_STR_LEN);
 8000e66:	e7e3      	b.n	8000e30 <StartTask03+0x24>
 8000e68:	20000230 	.word	0x20000230
 8000e6c:	0800da38 	.word	0x0800da38
 8000e70:	2000022c 	.word	0x2000022c

08000e74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM8) {
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a09      	ldr	r2, [pc, #36]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d101      	bne.n	8000e8a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e86:	f000 fe99 	bl	8001bbc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM7) {
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a07      	ldr	r2, [pc, #28]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d104      	bne.n	8000e9e <HAL_TIM_PeriodElapsedCallback+0x2a>
	  ms_counter += 1;
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	4a05      	ldr	r2, [pc, #20]	; (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000e9c:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END Callback 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40010400 	.word	0x40010400
 8000eac:	40001400 	.word	0x40001400
 8000eb0:	20000230 	.word	0x20000230

08000eb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb8:	b672      	cpsid	i
}
 8000eba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <Error_Handler+0x8>
	...

08000ec0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	607b      	str	r3, [r7, #4]
 8000eca:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <HAL_MspInit+0x54>)
 8000ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ece:	4a11      	ldr	r2, [pc, #68]	; (8000f14 <HAL_MspInit+0x54>)
 8000ed0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ed4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ed6:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <HAL_MspInit+0x54>)
 8000ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	603b      	str	r3, [r7, #0]
 8000ee6:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <HAL_MspInit+0x54>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	4a0a      	ldr	r2, [pc, #40]	; (8000f14 <HAL_MspInit+0x54>)
 8000eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef2:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <HAL_MspInit+0x54>)
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efa:	603b      	str	r3, [r7, #0]
 8000efc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000efe:	2200      	movs	r2, #0
 8000f00:	210f      	movs	r1, #15
 8000f02:	f06f 0001 	mvn.w	r0, #1
 8000f06:	f000 ff55 	bl	8001db4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40023800 	.word	0x40023800

08000f18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08a      	sub	sp, #40	; 0x28
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a19      	ldr	r2, [pc, #100]	; (8000f9c <HAL_I2C_MspInit+0x84>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d12c      	bne.n	8000f94 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	613b      	str	r3, [r7, #16]
 8000f3e:	4b18      	ldr	r3, [pc, #96]	; (8000fa0 <HAL_I2C_MspInit+0x88>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a17      	ldr	r2, [pc, #92]	; (8000fa0 <HAL_I2C_MspInit+0x88>)
 8000f44:	f043 0302 	orr.w	r3, r3, #2
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <HAL_I2C_MspInit+0x88>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0302 	and.w	r3, r3, #2
 8000f52:	613b      	str	r3, [r7, #16]
 8000f54:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000f56:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000f5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f5c:	2312      	movs	r3, #18
 8000f5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f60:	2301      	movs	r3, #1
 8000f62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f64:	2300      	movs	r3, #0
 8000f66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f68:	2304      	movs	r3, #4
 8000f6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	4619      	mov	r1, r3
 8000f72:	480c      	ldr	r0, [pc, #48]	; (8000fa4 <HAL_I2C_MspInit+0x8c>)
 8000f74:	f000 ff48 	bl	8001e08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <HAL_I2C_MspInit+0x88>)
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f80:	4a07      	ldr	r2, [pc, #28]	; (8000fa0 <HAL_I2C_MspInit+0x88>)
 8000f82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f86:	6413      	str	r3, [r2, #64]	; 0x40
 8000f88:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <HAL_I2C_MspInit+0x88>)
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f94:	bf00      	nop
 8000f96:	3728      	adds	r7, #40	; 0x28
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40005400 	.word	0x40005400
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40020400 	.word	0x40020400

08000fa8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08e      	sub	sp, #56	; 0x38
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a31      	ldr	r2, [pc, #196]	; (8001098 <HAL_I2S_MspInit+0xf0>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d15a      	bne.n	800108e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000fdc:	23c0      	movs	r3, #192	; 0xc0
 8000fde:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f003 ff93 	bl	8004f14 <HAL_RCCEx_PeriphCLKConfig>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000ff4:	f7ff ff5e 	bl	8000eb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	4b27      	ldr	r3, [pc, #156]	; (800109c <HAL_I2S_MspInit+0xf4>)
 8000ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001000:	4a26      	ldr	r2, [pc, #152]	; (800109c <HAL_I2S_MspInit+0xf4>)
 8001002:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001006:	6413      	str	r3, [r2, #64]	; 0x40
 8001008:	4b24      	ldr	r3, [pc, #144]	; (800109c <HAL_I2S_MspInit+0xf4>)
 800100a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	4b20      	ldr	r3, [pc, #128]	; (800109c <HAL_I2S_MspInit+0xf4>)
 800101a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101c:	4a1f      	ldr	r2, [pc, #124]	; (800109c <HAL_I2S_MspInit+0xf4>)
 800101e:	f043 0301 	orr.w	r3, r3, #1
 8001022:	6313      	str	r3, [r2, #48]	; 0x30
 8001024:	4b1d      	ldr	r3, [pc, #116]	; (800109c <HAL_I2S_MspInit+0xf4>)
 8001026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001028:	f003 0301 	and.w	r3, r3, #1
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001030:	2300      	movs	r3, #0
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	4b19      	ldr	r3, [pc, #100]	; (800109c <HAL_I2S_MspInit+0xf4>)
 8001036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001038:	4a18      	ldr	r2, [pc, #96]	; (800109c <HAL_I2S_MspInit+0xf4>)
 800103a:	f043 0304 	orr.w	r3, r3, #4
 800103e:	6313      	str	r3, [r2, #48]	; 0x30
 8001040:	4b16      	ldr	r3, [pc, #88]	; (800109c <HAL_I2S_MspInit+0xf4>)
 8001042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001044:	f003 0304 	and.w	r3, r3, #4
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800104c:	2310      	movs	r3, #16
 800104e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001050:	2302      	movs	r3, #2
 8001052:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001058:	2300      	movs	r3, #0
 800105a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800105c:	2306      	movs	r3, #6
 800105e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001060:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001064:	4619      	mov	r1, r3
 8001066:	480e      	ldr	r0, [pc, #56]	; (80010a0 <HAL_I2S_MspInit+0xf8>)
 8001068:	f000 fece 	bl	8001e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800106c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001070:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001072:	2302      	movs	r3, #2
 8001074:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107a:	2300      	movs	r3, #0
 800107c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800107e:	2306      	movs	r3, #6
 8001080:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001082:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001086:	4619      	mov	r1, r3
 8001088:	4806      	ldr	r0, [pc, #24]	; (80010a4 <HAL_I2S_MspInit+0xfc>)
 800108a:	f000 febd 	bl	8001e08 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800108e:	bf00      	nop
 8001090:	3738      	adds	r7, #56	; 0x38
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40003c00 	.word	0x40003c00
 800109c:	40023800 	.word	0x40023800
 80010a0:	40020000 	.word	0x40020000
 80010a4:	40020800 	.word	0x40020800

080010a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08a      	sub	sp, #40	; 0x28
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a19      	ldr	r2, [pc, #100]	; (800112c <HAL_SPI_MspInit+0x84>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d12b      	bne.n	8001122 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
 80010ce:	4b18      	ldr	r3, [pc, #96]	; (8001130 <HAL_SPI_MspInit+0x88>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	4a17      	ldr	r2, [pc, #92]	; (8001130 <HAL_SPI_MspInit+0x88>)
 80010d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010d8:	6453      	str	r3, [r2, #68]	; 0x44
 80010da:	4b15      	ldr	r3, [pc, #84]	; (8001130 <HAL_SPI_MspInit+0x88>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	4b11      	ldr	r3, [pc, #68]	; (8001130 <HAL_SPI_MspInit+0x88>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a10      	ldr	r2, [pc, #64]	; (8001130 <HAL_SPI_MspInit+0x88>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <HAL_SPI_MspInit+0x88>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001102:	23e0      	movs	r3, #224	; 0xe0
 8001104:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001106:	2302      	movs	r3, #2
 8001108:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110e:	2300      	movs	r3, #0
 8001110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001112:	2305      	movs	r3, #5
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	4805      	ldr	r0, [pc, #20]	; (8001134 <HAL_SPI_MspInit+0x8c>)
 800111e:	f000 fe73 	bl	8001e08 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001122:	bf00      	nop
 8001124:	3728      	adds	r7, #40	; 0x28
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40013000 	.word	0x40013000
 8001130:	40023800 	.word	0x40023800
 8001134:	40020000 	.word	0x40020000

08001138 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a18      	ldr	r2, [pc, #96]	; (80011a8 <HAL_TIM_Base_MspInit+0x70>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d10e      	bne.n	8001168 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	4b17      	ldr	r3, [pc, #92]	; (80011ac <HAL_TIM_Base_MspInit+0x74>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	4a16      	ldr	r2, [pc, #88]	; (80011ac <HAL_TIM_Base_MspInit+0x74>)
 8001154:	f043 0304 	orr.w	r3, r3, #4
 8001158:	6413      	str	r3, [r2, #64]	; 0x40
 800115a:	4b14      	ldr	r3, [pc, #80]	; (80011ac <HAL_TIM_Base_MspInit+0x74>)
 800115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115e:	f003 0304 	and.w	r3, r3, #4
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001166:	e01a      	b.n	800119e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM7)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a10      	ldr	r2, [pc, #64]	; (80011b0 <HAL_TIM_Base_MspInit+0x78>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d115      	bne.n	800119e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	4b0d      	ldr	r3, [pc, #52]	; (80011ac <HAL_TIM_Base_MspInit+0x74>)
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	4a0c      	ldr	r2, [pc, #48]	; (80011ac <HAL_TIM_Base_MspInit+0x74>)
 800117c:	f043 0320 	orr.w	r3, r3, #32
 8001180:	6413      	str	r3, [r2, #64]	; 0x40
 8001182:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <HAL_TIM_Base_MspInit+0x74>)
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	f003 0320 	and.w	r3, r3, #32
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800118e:	2200      	movs	r2, #0
 8001190:	2105      	movs	r1, #5
 8001192:	2037      	movs	r0, #55	; 0x37
 8001194:	f000 fe0e 	bl	8001db4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001198:	2037      	movs	r0, #55	; 0x37
 800119a:	f000 fe27 	bl	8001dec <HAL_NVIC_EnableIRQ>
}
 800119e:	bf00      	nop
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40000800 	.word	0x40000800
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40001400 	.word	0x40001400

080011b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b088      	sub	sp, #32
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 030c 	add.w	r3, r7, #12
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a12      	ldr	r2, [pc, #72]	; (800121c <HAL_TIM_MspPostInit+0x68>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d11e      	bne.n	8001214 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	4b11      	ldr	r3, [pc, #68]	; (8001220 <HAL_TIM_MspPostInit+0x6c>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a10      	ldr	r2, [pc, #64]	; (8001220 <HAL_TIM_MspPostInit+0x6c>)
 80011e0:	f043 0308 	orr.w	r3, r3, #8
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <HAL_TIM_MspPostInit+0x6c>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f003 0308 	and.w	r3, r3, #8
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f8:	2302      	movs	r3, #2
 80011fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001200:	2300      	movs	r3, #0
 8001202:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001204:	2302      	movs	r3, #2
 8001206:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001208:	f107 030c 	add.w	r3, r7, #12
 800120c:	4619      	mov	r1, r3
 800120e:	4805      	ldr	r0, [pc, #20]	; (8001224 <HAL_TIM_MspPostInit+0x70>)
 8001210:	f000 fdfa 	bl	8001e08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001214:	bf00      	nop
 8001216:	3720      	adds	r7, #32
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40000800 	.word	0x40000800
 8001220:	40023800 	.word	0x40023800
 8001224:	40020c00 	.word	0x40020c00

08001228 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08c      	sub	sp, #48	; 0x30
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001230:	2300      	movs	r3, #0
 8001232:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001234:	2300      	movs	r3, #0
 8001236:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM8 clock */
  __HAL_RCC_TIM8_CLK_ENABLE();
 8001238:	2300      	movs	r3, #0
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	4b2f      	ldr	r3, [pc, #188]	; (80012fc <HAL_InitTick+0xd4>)
 800123e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001240:	4a2e      	ldr	r2, [pc, #184]	; (80012fc <HAL_InitTick+0xd4>)
 8001242:	f043 0302 	orr.w	r3, r3, #2
 8001246:	6453      	str	r3, [r2, #68]	; 0x44
 8001248:	4b2c      	ldr	r3, [pc, #176]	; (80012fc <HAL_InitTick+0xd4>)
 800124a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124c:	f003 0302 	and.w	r3, r3, #2
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001254:	f107 020c 	add.w	r2, r7, #12
 8001258:	f107 0310 	add.w	r3, r7, #16
 800125c:	4611      	mov	r1, r2
 800125e:	4618      	mov	r0, r3
 8001260:	f003 fe26 	bl	8004eb0 <HAL_RCC_GetClockConfig>

  /* Compute TIM8 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001264:	f003 fe10 	bl	8004e88 <HAL_RCC_GetPCLK2Freq>
 8001268:	4603      	mov	r3, r0
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM8 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800126e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001270:	4a23      	ldr	r2, [pc, #140]	; (8001300 <HAL_InitTick+0xd8>)
 8001272:	fba2 2303 	umull	r2, r3, r2, r3
 8001276:	0c9b      	lsrs	r3, r3, #18
 8001278:	3b01      	subs	r3, #1
 800127a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM8 */
  htim8.Instance = TIM8;
 800127c:	4b21      	ldr	r3, [pc, #132]	; (8001304 <HAL_InitTick+0xdc>)
 800127e:	4a22      	ldr	r2, [pc, #136]	; (8001308 <HAL_InitTick+0xe0>)
 8001280:	601a      	str	r2, [r3, #0]
  + Period = [(TIM8CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim8.Init.Period = (1000000U / 1000U) - 1U;
 8001282:	4b20      	ldr	r3, [pc, #128]	; (8001304 <HAL_InitTick+0xdc>)
 8001284:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001288:	60da      	str	r2, [r3, #12]
  htim8.Init.Prescaler = uwPrescalerValue;
 800128a:	4a1e      	ldr	r2, [pc, #120]	; (8001304 <HAL_InitTick+0xdc>)
 800128c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128e:	6053      	str	r3, [r2, #4]
  htim8.Init.ClockDivision = 0;
 8001290:	4b1c      	ldr	r3, [pc, #112]	; (8001304 <HAL_InitTick+0xdc>)
 8001292:	2200      	movs	r2, #0
 8001294:	611a      	str	r2, [r3, #16]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001296:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <HAL_InitTick+0xdc>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129c:	4b19      	ldr	r3, [pc, #100]	; (8001304 <HAL_InitTick+0xdc>)
 800129e:	2200      	movs	r2, #0
 80012a0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim8);
 80012a2:	4818      	ldr	r0, [pc, #96]	; (8001304 <HAL_InitTick+0xdc>)
 80012a4:	f003 ffff 	bl	80052a6 <HAL_TIM_Base_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80012ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d11b      	bne.n	80012ee <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim8);
 80012b6:	4813      	ldr	r0, [pc, #76]	; (8001304 <HAL_InitTick+0xdc>)
 80012b8:	f004 f8ac 	bl	8005414 <HAL_TIM_Base_Start_IT>
 80012bc:	4603      	mov	r3, r0
 80012be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80012c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d111      	bne.n	80012ee <HAL_InitTick+0xc6>
    {
    /* Enable the TIM8 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80012ca:	202c      	movs	r0, #44	; 0x2c
 80012cc:	f000 fd8e 	bl	8001dec <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2b0f      	cmp	r3, #15
 80012d4:	d808      	bhi.n	80012e8 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority, 0U);
 80012d6:	2200      	movs	r2, #0
 80012d8:	6879      	ldr	r1, [r7, #4]
 80012da:	202c      	movs	r0, #44	; 0x2c
 80012dc:	f000 fd6a 	bl	8001db4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012e0:	4a0a      	ldr	r2, [pc, #40]	; (800130c <HAL_InitTick+0xe4>)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6013      	str	r3, [r2, #0]
 80012e6:	e002      	b.n	80012ee <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80012ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3730      	adds	r7, #48	; 0x30
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40023800 	.word	0x40023800
 8001300:	431bde83 	.word	0x431bde83
 8001304:	20000238 	.word	0x20000238
 8001308:	40010400 	.word	0x40010400
 800130c:	20000004 	.word	0x20000004

08001310 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001314:	e7fe      	b.n	8001314 <NMI_Handler+0x4>

08001316 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800131a:	e7fe      	b.n	800131a <HardFault_Handler+0x4>

0800131c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001320:	e7fe      	b.n	8001320 <MemManage_Handler+0x4>

08001322 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001326:	e7fe      	b.n	8001326 <BusFault_Handler+0x4>

08001328 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800132c:	e7fe      	b.n	800132c <UsageFault_Handler+0x4>

0800132e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001340:	4802      	ldr	r0, [pc, #8]	; (800134c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001342:	f004 f9f9 	bl	8005738 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000238 	.word	0x20000238

08001350 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001354:	4802      	ldr	r0, [pc, #8]	; (8001360 <TIM7_IRQHandler+0x10>)
 8001356:	f004 f9ef 	bl	8005738 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	200001d8 	.word	0x200001d8

08001364 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001368:	4802      	ldr	r0, [pc, #8]	; (8001374 <OTG_FS_IRQHandler+0x10>)
 800136a:	f001 f985 	bl	8002678 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20005080 	.word	0x20005080

08001378 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001380:	4a14      	ldr	r2, [pc, #80]	; (80013d4 <_sbrk+0x5c>)
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <_sbrk+0x60>)
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800138c:	4b13      	ldr	r3, [pc, #76]	; (80013dc <_sbrk+0x64>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d102      	bne.n	800139a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001394:	4b11      	ldr	r3, [pc, #68]	; (80013dc <_sbrk+0x64>)
 8001396:	4a12      	ldr	r2, [pc, #72]	; (80013e0 <_sbrk+0x68>)
 8001398:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800139a:	4b10      	ldr	r3, [pc, #64]	; (80013dc <_sbrk+0x64>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4413      	add	r3, r2
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d207      	bcs.n	80013b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013a8:	f00b ff24 	bl	800d1f4 <__errno>
 80013ac:	4603      	mov	r3, r0
 80013ae:	220c      	movs	r2, #12
 80013b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013b2:	f04f 33ff 	mov.w	r3, #4294967295
 80013b6:	e009      	b.n	80013cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <_sbrk+0x64>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013be:	4b07      	ldr	r3, [pc, #28]	; (80013dc <_sbrk+0x64>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4413      	add	r3, r2
 80013c6:	4a05      	ldr	r2, [pc, #20]	; (80013dc <_sbrk+0x64>)
 80013c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ca:	68fb      	ldr	r3, [r7, #12]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3718      	adds	r7, #24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20020000 	.word	0x20020000
 80013d8:	00000400 	.word	0x00000400
 80013dc:	20000280 	.word	0x20000280
 80013e0:	200054d0 	.word	0x200054d0

080013e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <SystemInit+0x20>)
 80013ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ee:	4a05      	ldr	r2, [pc, #20]	; (8001404 <SystemInit+0x20>)
 80013f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001408:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001440 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800140c:	480d      	ldr	r0, [pc, #52]	; (8001444 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800140e:	490e      	ldr	r1, [pc, #56]	; (8001448 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001410:	4a0e      	ldr	r2, [pc, #56]	; (800144c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001412:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001414:	e002      	b.n	800141c <LoopCopyDataInit>

08001416 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001416:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001418:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800141a:	3304      	adds	r3, #4

0800141c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800141c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800141e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001420:	d3f9      	bcc.n	8001416 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001422:	4a0b      	ldr	r2, [pc, #44]	; (8001450 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001424:	4c0b      	ldr	r4, [pc, #44]	; (8001454 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001426:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001428:	e001      	b.n	800142e <LoopFillZerobss>

0800142a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800142a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800142c:	3204      	adds	r2, #4

0800142e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800142e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001430:	d3fb      	bcc.n	800142a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001432:	f7ff ffd7 	bl	80013e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001436:	f00b fee3 	bl	800d200 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800143a:	f7ff f8a7 	bl	800058c <main>
  bx  lr    
 800143e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001440:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001444:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001448:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 800144c:	0800fb50 	.word	0x0800fb50
  ldr r2, =_sbss
 8001450:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001454:	200054cc 	.word	0x200054cc

08001458 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001458:	e7fe      	b.n	8001458 <ADC_IRQHandler>
	...

0800145c <mcpr_LCD_InitPorts>:
#include "fonts.h"
#include "display.h"
#include <stdio.h>

void mcpr_LCD_InitPorts(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
	// GPIOB Takt aktivieren | wird anscheinend nicht benoetigt
	// RCC->AHB1ENR |= 1<<1;
	
	// GPIOD und GPIOE Takt aktivieren, falls zuvor nicht geschehen
	RCC->AHB1ENR |= 1<<3;
 8001460:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <mcpr_LCD_InitPorts+0x58>)
 8001462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001464:	4a13      	ldr	r2, [pc, #76]	; (80014b4 <mcpr_LCD_InitPorts+0x58>)
 8001466:	f043 0308 	orr.w	r3, r3, #8
 800146a:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= 1<<4;
 800146c:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <mcpr_LCD_InitPorts+0x58>)
 800146e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001470:	4a10      	ldr	r2, [pc, #64]	; (80014b4 <mcpr_LCD_InitPorts+0x58>)
 8001472:	f043 0310 	orr.w	r3, r3, #16
 8001476:	6313      	str	r3, [r2, #48]	; 0x30
	
	// benoetigte Datenleitungen und Steuerleitung zuruecksetzen falls zuvor noch nicht geschehen
	// 0b0000 0011 0000 0000 0011 0000 0011 0000
	GPIOD->MODER &= 0x0F003030;
 8001478:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <mcpr_LCD_InitPorts+0x5c>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	490e      	ldr	r1, [pc, #56]	; (80014b8 <mcpr_LCD_InitPorts+0x5c>)
 800147e:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <mcpr_LCD_InitPorts+0x60>)
 8001480:	4013      	ands	r3, r2
 8001482:	600b      	str	r3, [r1, #0]
	
	// Datenleitungen und Steuerleitungen neusetzen
	// 0b0101 0000 0101 0101 0100 0101 0100 0101
	GPIOD->MODER |= 0x50554545;
 8001484:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <mcpr_LCD_InitPorts+0x5c>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	490b      	ldr	r1, [pc, #44]	; (80014b8 <mcpr_LCD_InitPorts+0x5c>)
 800148a:	4b0d      	ldr	r3, [pc, #52]	; (80014c0 <mcpr_LCD_InitPorts+0x64>)
 800148c:	4313      	orrs	r3, r2
 800148e:	600b      	str	r3, [r1, #0]
	
	// GPIOE Daten u. Steuerleitung zuruecksetzen
	// 0b0000 0000 0000 0000 0011 1111 0011 1111
	GPIOE->MODER &= 0x00003F3F;
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <mcpr_LCD_InitPorts+0x68>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	490b      	ldr	r1, [pc, #44]	; (80014c4 <mcpr_LCD_InitPorts+0x68>)
 8001496:	f643 733f 	movw	r3, #16191	; 0x3f3f
 800149a:	4013      	ands	r3, r2
 800149c:	600b      	str	r3, [r1, #0]
	
	// GPIOE Daten u Steuerleitungen neusetzen
	// 0b0101 0101 0101 0101 0100 0000 0100 0000
	GPIOE->MODER |= 0x55554040;
 800149e:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <mcpr_LCD_InitPorts+0x68>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	4908      	ldr	r1, [pc, #32]	; (80014c4 <mcpr_LCD_InitPorts+0x68>)
 80014a4:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <mcpr_LCD_InitPorts+0x6c>)
 80014a6:	4313      	orrs	r3, r2
 80014a8:	600b      	str	r3, [r1, #0]
	
	// GPIOB Steuerleitungen zuruecksetzen
	//
	// GPIOB->MODER &=;
	// GPIOB->MODER |=;
}
 80014aa:	bf00      	nop
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40020c00 	.word	0x40020c00
 80014bc:	0f003030 	.word	0x0f003030
 80014c0:	50554545 	.word	0x50554545
 80014c4:	40021000 	.word	0x40021000
 80014c8:	55554040 	.word	0x55554040

080014cc <mcpr_LCD_Output16BitWord>:
{
	mcpr_LCD_Output16BitWord(data);
}

void mcpr_LCD_Output16BitWord(uint16_t data)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	80fb      	strh	r3, [r7, #6]
  // Die Bits 0 und 1 von data muessen auf Port D, Bits 14 und 15 ausgegeben werden
	// Die Bits 2 und 3 von data muessen auf Port D, Bit 0 und Bit 1 ausgegeben werden 0000 1100
	// Die Bits 13 bis 15 muessen auf Port D, Bit 8 bis 10 ausgegeben werden 1110
	// Bitmaske ergibt sich aus den zusetzenden bits auf dem port
	GPIOD->ODR &= ~(0xC703u);
 80014d6:	4b19      	ldr	r3, [pc, #100]	; (800153c <mcpr_LCD_Output16BitWord+0x70>)
 80014d8:	695b      	ldr	r3, [r3, #20]
 80014da:	4a18      	ldr	r2, [pc, #96]	; (800153c <mcpr_LCD_Output16BitWord+0x70>)
 80014dc:	f423 4347 	bic.w	r3, r3, #50944	; 0xc700
 80014e0:	f023 0303 	bic.w	r3, r3, #3
 80014e4:	6153      	str	r3, [r2, #20]
	GPIOD->ODR |= (((data & 0x3u)<<14) | ((data & 0x0Cu) >> 2) | ((data & 0xE000u) >> 5));
 80014e6:	4b15      	ldr	r3, [pc, #84]	; (800153c <mcpr_LCD_Output16BitWord+0x70>)
 80014e8:	695a      	ldr	r2, [r3, #20]
 80014ea:	88fb      	ldrh	r3, [r7, #6]
 80014ec:	039b      	lsls	r3, r3, #14
 80014ee:	b299      	uxth	r1, r3
 80014f0:	88fb      	ldrh	r3, [r7, #6]
 80014f2:	089b      	lsrs	r3, r3, #2
 80014f4:	f003 0303 	and.w	r3, r3, #3
 80014f8:	4319      	orrs	r1, r3
 80014fa:	88fb      	ldrh	r3, [r7, #6]
 80014fc:	095b      	lsrs	r3, r3, #5
 80014fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001502:	430b      	orrs	r3, r1
 8001504:	490d      	ldr	r1, [pc, #52]	; (800153c <mcpr_LCD_Output16BitWord+0x70>)
 8001506:	4313      	orrs	r3, r2
 8001508:	614b      	str	r3, [r1, #20]
	
	// Die Bits 4 bis 12 muessen auf Port E, Bit 7 bis 15 ausgegeben werden
	// Bitmaske ergibt sich aus den zusetzenden bits auf dem port
	GPIOE->ODR &= ~(0xFF80u);
 800150a:	4b0d      	ldr	r3, [pc, #52]	; (8001540 <mcpr_LCD_Output16BitWord+0x74>)
 800150c:	695b      	ldr	r3, [r3, #20]
 800150e:	4a0c      	ldr	r2, [pc, #48]	; (8001540 <mcpr_LCD_Output16BitWord+0x74>)
 8001510:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001514:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001518:	6153      	str	r3, [r2, #20]
	GPIOE->ODR |= (data & 0x1FF0u) << 3;	
 800151a:	4b09      	ldr	r3, [pc, #36]	; (8001540 <mcpr_LCD_Output16BitWord+0x74>)
 800151c:	695a      	ldr	r2, [r3, #20]
 800151e:	88fb      	ldrh	r3, [r7, #6]
 8001520:	00d9      	lsls	r1, r3, #3
 8001522:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001526:	400b      	ands	r3, r1
 8001528:	4905      	ldr	r1, [pc, #20]	; (8001540 <mcpr_LCD_Output16BitWord+0x74>)
 800152a:	4313      	orrs	r3, r2
 800152c:	614b      	str	r3, [r1, #20]
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	40020c00 	.word	0x40020c00
 8001540:	40021000 	.word	0x40021000

08001544 <mcpr_LCD_WriteData>:

void mcpr_LCD_WriteData(uint16_t data) // wie das mit den delays is, keine Ahnung
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	80fb      	strh	r3, [r7, #6]
	// Aktivieren des Displays CS -> CHIP SELECT
	// Mit PD7 = Low waehlt der Mikrocontroller externe Bausteine an (hier IC3 o. Display).
	// Bei PD7 = High kann an den externen Bausteinen nichts geaendert werden.
	// PD11 = High wird von den externen Bausteinen der IC3 fuer die LEDs ausgewaehlt,
	// PD11 = Low waehlt das Display aus.
	GPIOD->ODR &= ~(1u<<7);
 800154e:	4b1c      	ldr	r3, [pc, #112]	; (80015c0 <mcpr_LCD_WriteData+0x7c>)
 8001550:	695b      	ldr	r3, [r3, #20]
 8001552:	4a1b      	ldr	r2, [pc, #108]	; (80015c0 <mcpr_LCD_WriteData+0x7c>)
 8001554:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001558:	6153      	str	r3, [r2, #20]
	GPIOD->ODR &= ~(1u<<11);
 800155a:	4b19      	ldr	r3, [pc, #100]	; (80015c0 <mcpr_LCD_WriteData+0x7c>)
 800155c:	695b      	ldr	r3, [r3, #20]
 800155e:	4a18      	ldr	r2, [pc, #96]	; (80015c0 <mcpr_LCD_WriteData+0x7c>)
 8001560:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001564:	6153      	str	r3, [r2, #20]
	
	// PD5 auf HIGH setzen
	GPIOD->ODR |= 1<<5;
 8001566:	4b16      	ldr	r3, [pc, #88]	; (80015c0 <mcpr_LCD_WriteData+0x7c>)
 8001568:	695b      	ldr	r3, [r3, #20]
 800156a:	4a15      	ldr	r2, [pc, #84]	; (80015c0 <mcpr_LCD_WriteData+0x7c>)
 800156c:	f043 0320 	orr.w	r3, r3, #32
 8001570:	6153      	str	r3, [r2, #20]
	
	// RD muss waehrend des Zugriffs immer 1 sein, setze PD4 auf 1
	GPIOD->ODR |= 1<<4;
 8001572:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <mcpr_LCD_WriteData+0x7c>)
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	4a12      	ldr	r2, [pc, #72]	; (80015c0 <mcpr_LCD_WriteData+0x7c>)
 8001578:	f043 0310 	orr.w	r3, r3, #16
 800157c:	6153      	str	r3, [r2, #20]
	
	// Wir schreiben Daten also PE3 (DC) auf 1 setzen;
	GPIOE->ODR |= 1<<3;
 800157e:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <mcpr_LCD_WriteData+0x80>)
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	4a10      	ldr	r2, [pc, #64]	; (80015c4 <mcpr_LCD_WriteData+0x80>)
 8001584:	f043 0308 	orr.w	r3, r3, #8
 8001588:	6153      	str	r3, [r2, #20]
	
	// LOW PD5
	GPIOD->ODR ^= 1<<5;
 800158a:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <mcpr_LCD_WriteData+0x7c>)
 800158c:	695b      	ldr	r3, [r3, #20]
 800158e:	4a0c      	ldr	r2, [pc, #48]	; (80015c0 <mcpr_LCD_WriteData+0x7c>)
 8001590:	f083 0320 	eor.w	r3, r3, #32
 8001594:	6153      	str	r3, [r2, #20]
	
	// Daten ans Display schreiben
	mcpr_LCD_Output16BitWord(data);
 8001596:	88fb      	ldrh	r3, [r7, #6]
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff ff97 	bl	80014cc <mcpr_LCD_Output16BitWord>
	
	// PD5 wieder HIGH setzen, da bei steigender Flanke die Daten am Grafikcontroller uebernommen werden
	GPIOD->ODR ^= 1<<5;
 800159e:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <mcpr_LCD_WriteData+0x7c>)
 80015a0:	695b      	ldr	r3, [r3, #20]
 80015a2:	4a07      	ldr	r2, [pc, #28]	; (80015c0 <mcpr_LCD_WriteData+0x7c>)
 80015a4:	f083 0320 	eor.w	r3, r3, #32
 80015a8:	6153      	str	r3, [r2, #20]
	
	// Ziehe PD7 wieder auf HIGH
	GPIOD->ODR |= 1<<7;	
 80015aa:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <mcpr_LCD_WriteData+0x7c>)
 80015ac:	695b      	ldr	r3, [r3, #20]
 80015ae:	4a04      	ldr	r2, [pc, #16]	; (80015c0 <mcpr_LCD_WriteData+0x7c>)
 80015b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015b4:	6153      	str	r3, [r2, #20]
	// PD5 wieder auf LOW ziehen? Die Low-aktiven Steuerleitungen /RD, /WR und /CS muessen vor dem Reset deaktiviert werden (d.h. auf 1 gesetzt werden).
	// GPIOD->ODR &= ~(1u<<5);
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40020c00 	.word	0x40020c00
 80015c4:	40021000 	.word	0x40021000

080015c8 <mcpr_LCD_WriteCommand>:

void mcpr_LCD_WriteCommand(uint16_t data) // wie das mit den delays is, keine Ahnung
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	80fb      	strh	r3, [r7, #6]
	// Aktivieren des Displays CS -> CHIP SELECT
	// Mit PD7 = Low waehlt der Mikrocontroller externe Bausteine an (hier IC3 o. Display).
	// Bei PD7 = High kann an den externen Bausteinen nichts geaendert werden.
	// PD11 = High wird von den externen Bausteinen der IC3 fuer die LEDs ausgewaehlt,
	// PD11 = Low waehlt das Display aus.
	GPIOD->ODR &= ~(1u<<7);
 80015d2:	4b1c      	ldr	r3, [pc, #112]	; (8001644 <mcpr_LCD_WriteCommand+0x7c>)
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	4a1b      	ldr	r2, [pc, #108]	; (8001644 <mcpr_LCD_WriteCommand+0x7c>)
 80015d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80015dc:	6153      	str	r3, [r2, #20]
	GPIOD->ODR &= ~(1u<<11);
 80015de:	4b19      	ldr	r3, [pc, #100]	; (8001644 <mcpr_LCD_WriteCommand+0x7c>)
 80015e0:	695b      	ldr	r3, [r3, #20]
 80015e2:	4a18      	ldr	r2, [pc, #96]	; (8001644 <mcpr_LCD_WriteCommand+0x7c>)
 80015e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80015e8:	6153      	str	r3, [r2, #20]
	
	// PD5 auf HIGH setzen
	GPIOD->ODR |= 1<<5;
 80015ea:	4b16      	ldr	r3, [pc, #88]	; (8001644 <mcpr_LCD_WriteCommand+0x7c>)
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	4a15      	ldr	r2, [pc, #84]	; (8001644 <mcpr_LCD_WriteCommand+0x7c>)
 80015f0:	f043 0320 	orr.w	r3, r3, #32
 80015f4:	6153      	str	r3, [r2, #20]
	
	// RD muss waehrend des Zugriffs immer 1 sein, setze PD4 auf 1
	GPIOD->ODR |= 1<<4;
 80015f6:	4b13      	ldr	r3, [pc, #76]	; (8001644 <mcpr_LCD_WriteCommand+0x7c>)
 80015f8:	695b      	ldr	r3, [r3, #20]
 80015fa:	4a12      	ldr	r2, [pc, #72]	; (8001644 <mcpr_LCD_WriteCommand+0x7c>)
 80015fc:	f043 0310 	orr.w	r3, r3, #16
 8001600:	6153      	str	r3, [r2, #20]
	
	// Wir schreiben Kommandos also PE3 (DC) auf 0 setzen;
	GPIOE->ODR &= ~(1u<<3);
 8001602:	4b11      	ldr	r3, [pc, #68]	; (8001648 <mcpr_LCD_WriteCommand+0x80>)
 8001604:	695b      	ldr	r3, [r3, #20]
 8001606:	4a10      	ldr	r2, [pc, #64]	; (8001648 <mcpr_LCD_WriteCommand+0x80>)
 8001608:	f023 0308 	bic.w	r3, r3, #8
 800160c:	6153      	str	r3, [r2, #20]
	
	// LOW PD5
	GPIOD->ODR ^= 1<<5;
 800160e:	4b0d      	ldr	r3, [pc, #52]	; (8001644 <mcpr_LCD_WriteCommand+0x7c>)
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	4a0c      	ldr	r2, [pc, #48]	; (8001644 <mcpr_LCD_WriteCommand+0x7c>)
 8001614:	f083 0320 	eor.w	r3, r3, #32
 8001618:	6153      	str	r3, [r2, #20]
	
	// Daten ans Display schreiben
	mcpr_LCD_Output16BitWord(data);
 800161a:	88fb      	ldrh	r3, [r7, #6]
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff ff55 	bl	80014cc <mcpr_LCD_Output16BitWord>
	
	// PD5 wieder HIGH setzen, da bei steigender Flanke die Daten am Grafikcontroller uebernommen werden
	GPIOD->ODR ^= 1<<5;
 8001622:	4b08      	ldr	r3, [pc, #32]	; (8001644 <mcpr_LCD_WriteCommand+0x7c>)
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	4a07      	ldr	r2, [pc, #28]	; (8001644 <mcpr_LCD_WriteCommand+0x7c>)
 8001628:	f083 0320 	eor.w	r3, r3, #32
 800162c:	6153      	str	r3, [r2, #20]
	
	// Ziehe PD7 wieder auf HIGH
	GPIOD->ODR |= 1<<7;	
 800162e:	4b05      	ldr	r3, [pc, #20]	; (8001644 <mcpr_LCD_WriteCommand+0x7c>)
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	4a04      	ldr	r2, [pc, #16]	; (8001644 <mcpr_LCD_WriteCommand+0x7c>)
 8001634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001638:	6153      	str	r3, [r2, #20]
	// PD5 wieder auf LOW ziehen? Die Low-aktiven Steuerleitungen /RD, /WR und /CS muessen vor dem Reset deaktiviert werden (d.h. auf 1 gesetzt werden).
	// GPIOD->ODR &= ~(1u<<5);	
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40020c00 	.word	0x40020c00
 8001648:	40021000 	.word	0x40021000

0800164c <mcpr_LCD_WriteReg>:

void mcpr_LCD_WriteReg(uint16_t cmd, uint16_t data)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	460a      	mov	r2, r1
 8001656:	80fb      	strh	r3, [r7, #6]
 8001658:	4613      	mov	r3, r2
 800165a:	80bb      	strh	r3, [r7, #4]
	mcpr_LCD_WriteCommand(cmd);
 800165c:	88fb      	ldrh	r3, [r7, #6]
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff ffb2 	bl	80015c8 <mcpr_LCD_WriteCommand>
	mcpr_LCD_WriteData(data);	
 8001664:	88bb      	ldrh	r3, [r7, #4]
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff ff6c 	bl	8001544 <mcpr_LCD_WriteData>
}
 800166c:	bf00      	nop
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <mcpr_LCD_Init>:

void mcpr_LCD_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
	// helper function
	mcpr_LCD_InitPorts();
 8001678:	f7ff fef0 	bl	800145c <mcpr_LCD_InitPorts>

	// Low Impuls auf die Reset Leitung
	GPIOD->ODR &= ~(1u<<3);
 800167c:	4b35      	ldr	r3, [pc, #212]	; (8001754 <mcpr_LCD_Init+0xe0>)
 800167e:	695b      	ldr	r3, [r3, #20]
 8001680:	4a34      	ldr	r2, [pc, #208]	; (8001754 <mcpr_LCD_Init+0xe0>)
 8001682:	f023 0308 	bic.w	r3, r3, #8
 8001686:	6153      	str	r3, [r2, #20]
	// min 15 us sekunden warten 
	u_delay(30);
 8001688:	201e      	movs	r0, #30
 800168a:	f000 f9ed 	bl	8001a68 <u_delay>
	// anschliessend high setzen
	GPIOD->ODR |= 1<<3;
 800168e:	4b31      	ldr	r3, [pc, #196]	; (8001754 <mcpr_LCD_Init+0xe0>)
 8001690:	695b      	ldr	r3, [r3, #20]
 8001692:	4a30      	ldr	r2, [pc, #192]	; (8001754 <mcpr_LCD_Init+0xe0>)
 8001694:	f043 0308 	orr.w	r3, r3, #8
 8001698:	6153      	str	r3, [r2, #20]

	// Initialisierung
	mcpr_LCD_WriteReg(0x0010, 0x0001); /* Enter sleep mode */
 800169a:	2101      	movs	r1, #1
 800169c:	2010      	movs	r0, #16
 800169e:	f7ff ffd5 	bl	800164c <mcpr_LCD_WriteReg>
	mcpr_LCD_WriteReg(0x001E, 0x00B2); /* Set initial power parameters. */
 80016a2:	21b2      	movs	r1, #178	; 0xb2
 80016a4:	201e      	movs	r0, #30
 80016a6:	f7ff ffd1 	bl	800164c <mcpr_LCD_WriteReg>
	mcpr_LCD_WriteReg(0x0028, 0x0006); /* Set initial power parameters. */
 80016aa:	2106      	movs	r1, #6
 80016ac:	2028      	movs	r0, #40	; 0x28
 80016ae:	f7ff ffcd 	bl	800164c <mcpr_LCD_WriteReg>
	mcpr_LCD_WriteReg(0x0000, 0x0001); /* Start the oscillator.*/
 80016b2:	2101      	movs	r1, #1
 80016b4:	2000      	movs	r0, #0
 80016b6:	f7ff ffc9 	bl	800164c <mcpr_LCD_WriteReg>
	mcpr_LCD_WriteReg(0x0001, 0x72EF); /* Set pixel format and basic display orientation */
 80016ba:	f247 21ef 	movw	r1, #29423	; 0x72ef
 80016be:	2001      	movs	r0, #1
 80016c0:	f7ff ffc4 	bl	800164c <mcpr_LCD_WriteReg>
	mcpr_LCD_WriteReg(0x0002, 0x0600);
 80016c4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80016c8:	2002      	movs	r0, #2
 80016ca:	f7ff ffbf 	bl	800164c <mcpr_LCD_WriteReg>
	mcpr_LCD_WriteReg(0x0010, 0x0000); /* Exit sleep mode.*/ 
 80016ce:	2100      	movs	r1, #0
 80016d0:	2010      	movs	r0, #16
 80016d2:	f7ff ffbb 	bl	800164c <mcpr_LCD_WriteReg>
	// 30ms warten weniger geht meist auch
	m_delay(30);
 80016d6:	201e      	movs	r0, #30
 80016d8:	f000 fa0c 	bl	8001af4 <m_delay>
	mcpr_LCD_WriteReg(0x0011, 0x6870); /* Configure pixel color format and MCU interface parameters.*/
 80016dc:	f646 0170 	movw	r1, #26736	; 0x6870
 80016e0:	2011      	movs	r0, #17
 80016e2:	f7ff ffb3 	bl	800164c <mcpr_LCD_WriteReg>
	mcpr_LCD_WriteReg(0x0012, 0x0999); /* Set analog parameters */
 80016e6:	f640 1199 	movw	r1, #2457	; 0x999
 80016ea:	2012      	movs	r0, #18
 80016ec:	f7ff ffae 	bl	800164c <mcpr_LCD_WriteReg>
	mcpr_LCD_WriteReg(0x0026, 0x3800);
 80016f0:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 80016f4:	2026      	movs	r0, #38	; 0x26
 80016f6:	f7ff ffa9 	bl	800164c <mcpr_LCD_WriteReg>
	mcpr_LCD_WriteReg(0x0007, 0x0033); /* Enable the display */
 80016fa:	2133      	movs	r1, #51	; 0x33
 80016fc:	2007      	movs	r0, #7
 80016fe:	f7ff ffa5 	bl	800164c <mcpr_LCD_WriteReg>
	mcpr_LCD_WriteReg(0x000C, 0x0005); /* Set VCIX2 voltage to 6.1V.*/
 8001702:	2105      	movs	r1, #5
 8001704:	200c      	movs	r0, #12
 8001706:	f7ff ffa1 	bl	800164c <mcpr_LCD_WriteReg>
	mcpr_LCD_WriteReg(0x000D, 0x000A); /* Configure Vlcd63 and VCOMl */
 800170a:	210a      	movs	r1, #10
 800170c:	200d      	movs	r0, #13
 800170e:	f7ff ff9d 	bl	800164c <mcpr_LCD_WriteReg>
	mcpr_LCD_WriteReg(0x000E, 0x2E00);
 8001712:	f44f 5138 	mov.w	r1, #11776	; 0x2e00
 8001716:	200e      	movs	r0, #14
 8001718:	f7ff ff98 	bl	800164c <mcpr_LCD_WriteReg>
	mcpr_LCD_WriteReg(0x0044, (240-1) << 8); /* Set the display size and ensure that the GRAM window	is set to allow access to the full display buffer.*/
 800171c:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 8001720:	2044      	movs	r0, #68	; 0x44
 8001722:	f7ff ff93 	bl	800164c <mcpr_LCD_WriteReg>
	mcpr_LCD_WriteReg(0x0045, 0x0000);
 8001726:	2100      	movs	r1, #0
 8001728:	2045      	movs	r0, #69	; 0x45
 800172a:	f7ff ff8f 	bl	800164c <mcpr_LCD_WriteReg>
	mcpr_LCD_WriteReg(0x0046, 320-1);
 800172e:	f240 113f 	movw	r1, #319	; 0x13f
 8001732:	2046      	movs	r0, #70	; 0x46
 8001734:	f7ff ff8a 	bl	800164c <mcpr_LCD_WriteReg>
	mcpr_LCD_WriteReg(0x004E, 0x0000); /*Set cursor to 0,0 */
 8001738:	2100      	movs	r1, #0
 800173a:	204e      	movs	r0, #78	; 0x4e
 800173c:	f7ff ff86 	bl	800164c <mcpr_LCD_WriteReg>
	mcpr_LCD_WriteReg(0x004F, 0x0000);
 8001740:	2100      	movs	r1, #0
 8001742:	204f      	movs	r0, #79	; 0x4f
 8001744:	f7ff ff82 	bl	800164c <mcpr_LCD_WriteReg>
	mcpr_LCD_ClearDisplay(LCD_BACKGROUND); // Clear Display
 8001748:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800174c:	f000 f828 	bl	80017a0 <mcpr_LCD_ClearDisplay>
}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40020c00 	.word	0x40020c00

08001758 <mcpr_LCD_SetCursor>:

// uint16_t, da die Koordinaten Register, garnicht groesser sind?
void mcpr_LCD_SetCursor(const uint16_t x, const uint16_t y)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	460a      	mov	r2, r1
 8001762:	80fb      	strh	r3, [r7, #6]
 8001764:	4613      	mov	r3, r2
 8001766:	80bb      	strh	r3, [r7, #4]
	// SSD2119_X_RAM_ADDR_REG 0x4E
	// SSD2119_Y_RAM_ADDR_REG 0x4F
	mcpr_LCD_WriteReg(0x004E, x); // Set GDDRAM X 
 8001768:	88fb      	ldrh	r3, [r7, #6]
 800176a:	4619      	mov	r1, r3
 800176c:	204e      	movs	r0, #78	; 0x4e
 800176e:	f7ff ff6d 	bl	800164c <mcpr_LCD_WriteReg>
	mcpr_LCD_WriteReg(0x004F, y); // Set GDDRAM Y
 8001772:	88bb      	ldrh	r3, [r7, #4]
 8001774:	4619      	mov	r1, r3
 8001776:	204f      	movs	r0, #79	; 0x4f
 8001778:	f7ff ff68 	bl	800164c <mcpr_LCD_WriteReg>
}
 800177c:	bf00      	nop
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <mcpr_LCD_DrawPixel>:

void mcpr_LCD_DrawPixel(uint16_t color)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	80fb      	strh	r3, [r7, #6]
	// Write Data to GRAM (R22h)
	mcpr_LCD_WriteReg(0x0022, color);
 800178e:	88fb      	ldrh	r3, [r7, #6]
 8001790:	4619      	mov	r1, r3
 8001792:	2022      	movs	r0, #34	; 0x22
 8001794:	f7ff ff5a 	bl	800164c <mcpr_LCD_WriteReg>
}
 8001798:	bf00      	nop
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <mcpr_LCD_ClearDisplay>:

void mcpr_LCD_ClearDisplay(uint16_t color)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	80fb      	strh	r3, [r7, #6]
	// die x-Koordinate des Cursors zw. 0 und 319 liegen und die y-Koordinate zw. 0 und 239
	// Die Position des Cursors inkrementiert sich automatisch. Wuerden also noch weitere Datenzugriffe erfolgen, ergaebe sich eine horizontale Linie.	
	mcpr_LCD_SetCursor(0x0, 0x0);
 80017aa:	2100      	movs	r1, #0
 80017ac:	2000      	movs	r0, #0
 80017ae:	f7ff ffd3 	bl	8001758 <mcpr_LCD_SetCursor>
	
	// Optimierung: kein erneutes Aufrufen der DrawPixel Fkt. 
	// stattdessen wiederholtes ausloesen einer Write Flanke, da Color
	// Information sich nicht veraendern und Cursor automatisch inkrementiert wird
	for (uint32_t i = 0; i < DISPLAY_WIDTH*DISPLAY_HEIGHT; i++)
 80017b2:	2300      	movs	r3, #0
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	e006      	b.n	80017c6 <mcpr_LCD_ClearDisplay+0x26>
	{
		mcpr_LCD_DrawPixel(color);
 80017b8:	88fb      	ldrh	r3, [r7, #6]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff ffe2 	bl	8001784 <mcpr_LCD_DrawPixel>
	for (uint32_t i = 0; i < DISPLAY_WIDTH*DISPLAY_HEIGHT; i++)
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	3301      	adds	r3, #1
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 80017cc:	d3f4      	bcc.n	80017b8 <mcpr_LCD_ClearDisplay+0x18>
	}
}
 80017ce:	bf00      	nop
 80017d0:	bf00      	nop
 80017d2:	3710      	adds	r7, #16
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <mcpr_LCD_ClearLine>:

void mcpr_LCD_ClearLine(uint16_t y_begin, uint16_t y_end, uint16_t color)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	80fb      	strh	r3, [r7, #6]
 80017e2:	460b      	mov	r3, r1
 80017e4:	80bb      	strh	r3, [r7, #4]
 80017e6:	4613      	mov	r3, r2
 80017e8:	807b      	strh	r3, [r7, #2]
	mcpr_LCD_SetCursor(0x0, y_begin);
 80017ea:	88fb      	ldrh	r3, [r7, #6]
 80017ec:	4619      	mov	r1, r3
 80017ee:	2000      	movs	r0, #0
 80017f0:	f7ff ffb2 	bl	8001758 <mcpr_LCD_SetCursor>
	
	mcpr_LCD_DrawPixel(color);
 80017f4:	887b      	ldrh	r3, [r7, #2]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff ffc4 	bl	8001784 <mcpr_LCD_DrawPixel>

	for (uint32_t i = 0; i < DISPLAY_WIDTH*(y_end-y_begin); i++)
 80017fc:	2300      	movs	r3, #0
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	e005      	b.n	800180e <mcpr_LCD_ClearLine+0x36>
	{
		mcpr_LCD_WriteCommand(0x0022);
 8001802:	2022      	movs	r0, #34	; 0x22
 8001804:	f7ff fee0 	bl	80015c8 <mcpr_LCD_WriteCommand>
	for (uint32_t i = 0; i < DISPLAY_WIDTH*(y_end-y_begin); i++)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	3301      	adds	r3, #1
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	88ba      	ldrh	r2, [r7, #4]
 8001810:	88fb      	ldrh	r3, [r7, #6]
 8001812:	1ad2      	subs	r2, r2, r3
 8001814:	4613      	mov	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	019b      	lsls	r3, r3, #6
 800181c:	461a      	mov	r2, r3
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	4293      	cmp	r3, r2
 8001822:	d3ee      	bcc.n	8001802 <mcpr_LCD_ClearLine+0x2a>
	}
}
 8001824:	bf00      	nop
 8001826:	bf00      	nop
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
	...

08001830 <mcpr_LCD_WriteLetter>:

void mcpr_LCD_WriteLetter(uint16_t x, uint16_t y, uint16_t colorfg, uint16_t colorbg, uint8_t c)
{
 8001830:	b590      	push	{r4, r7, lr}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	4604      	mov	r4, r0
 8001838:	4608      	mov	r0, r1
 800183a:	4611      	mov	r1, r2
 800183c:	461a      	mov	r2, r3
 800183e:	4623      	mov	r3, r4
 8001840:	80fb      	strh	r3, [r7, #6]
 8001842:	4603      	mov	r3, r0
 8001844:	80bb      	strh	r3, [r7, #4]
 8001846:	460b      	mov	r3, r1
 8001848:	807b      	strh	r3, [r7, #2]
 800184a:	4613      	mov	r3, r2
 800184c:	803b      	strh	r3, [r7, #0]
	int pix_byte = 0;
 800184e:	2300      	movs	r3, #0
 8001850:	60bb      	str	r3, [r7, #8]

	// setze initial den Cursor auf x y
	mcpr_LCD_SetCursor(x, y);
 8001852:	88ba      	ldrh	r2, [r7, #4]
 8001854:	88fb      	ldrh	r3, [r7, #6]
 8001856:	4611      	mov	r1, r2
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff ff7d 	bl	8001758 <mcpr_LCD_SetCursor>

	for (uint8_t i = 0; i < 31; i++)
 800185e:	2300      	movs	r3, #0
 8001860:	73fb      	strb	r3, [r7, #15]
 8001862:	e034      	b.n	80018ce <mcpr_LCD_WriteLetter+0x9e>
	{
		pix_byte = console_font_12x16[(32*(int)c)+i];
 8001864:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001868:	015a      	lsls	r2, r3, #5
 800186a:	7bfb      	ldrb	r3, [r7, #15]
 800186c:	4413      	add	r3, r2
 800186e:	4a1c      	ldr	r2, [pc, #112]	; (80018e0 <mcpr_LCD_WriteLetter+0xb0>)
 8001870:	5cd3      	ldrb	r3, [r2, r3]
 8001872:	60bb      	str	r3, [r7, #8]
		for (uint8_t k = 8; k > 0; k--)
 8001874:	2308      	movs	r3, #8
 8001876:	73bb      	strb	r3, [r7, #14]
 8001878:	e014      	b.n	80018a4 <mcpr_LCD_WriteLetter+0x74>
		{
			// Schreibe ein pixel mit der farbe fg wenn 1 und ein pixel mir farbe bg wenn 0
			// alternativ kann das umgeschrieben werden um nicht extra ein pixel zu schreiben wenn 0
			(pix_byte & (1<<(k-1))) ? mcpr_LCD_DrawPixel(colorfg) : mcpr_LCD_DrawPixel(colorbg);
 800187a:	7bbb      	ldrb	r3, [r7, #14]
 800187c:	3b01      	subs	r3, #1
 800187e:	68ba      	ldr	r2, [r7, #8]
 8001880:	fa42 f303 	asr.w	r3, r2, r3
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	2b00      	cmp	r3, #0
 800188a:	d004      	beq.n	8001896 <mcpr_LCD_WriteLetter+0x66>
 800188c:	887b      	ldrh	r3, [r7, #2]
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff ff78 	bl	8001784 <mcpr_LCD_DrawPixel>
 8001894:	e003      	b.n	800189e <mcpr_LCD_WriteLetter+0x6e>
 8001896:	883b      	ldrh	r3, [r7, #0]
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff ff73 	bl	8001784 <mcpr_LCD_DrawPixel>
		for (uint8_t k = 8; k > 0; k--)
 800189e:	7bbb      	ldrb	r3, [r7, #14]
 80018a0:	3b01      	subs	r3, #1
 80018a2:	73bb      	strb	r3, [r7, #14]
 80018a4:	7bbb      	ldrb	r3, [r7, #14]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1e7      	bne.n	800187a <mcpr_LCD_WriteLetter+0x4a>
		}

		// setze Cursor auf anfangs position x und inkrementiere y um 1 um in die naechste zeile zu springen
		if (i%2 != 0)
 80018aa:	7bfb      	ldrb	r3, [r7, #15]
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d008      	beq.n	80018c8 <mcpr_LCD_WriteLetter+0x98>
			mcpr_LCD_SetCursor(x, y+=1);
 80018b6:	88bb      	ldrh	r3, [r7, #4]
 80018b8:	3301      	adds	r3, #1
 80018ba:	80bb      	strh	r3, [r7, #4]
 80018bc:	88ba      	ldrh	r2, [r7, #4]
 80018be:	88fb      	ldrh	r3, [r7, #6]
 80018c0:	4611      	mov	r1, r2
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff ff48 	bl	8001758 <mcpr_LCD_SetCursor>
	for (uint8_t i = 0; i < 31; i++)
 80018c8:	7bfb      	ldrb	r3, [r7, #15]
 80018ca:	3301      	adds	r3, #1
 80018cc:	73fb      	strb	r3, [r7, #15]
 80018ce:	7bfb      	ldrb	r3, [r7, #15]
 80018d0:	2b1e      	cmp	r3, #30
 80018d2:	d9c7      	bls.n	8001864 <mcpr_LCD_WriteLetter+0x34>
	}
}
 80018d4:	bf00      	nop
 80018d6:	bf00      	nop
 80018d8:	3714      	adds	r7, #20
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd90      	pop	{r4, r7, pc}
 80018de:	bf00      	nop
 80018e0:	0800db0c 	.word	0x0800db0c

080018e4 <mcpr_LCD_WriteString>:

void mcpr_LCD_WriteString(uint16_t x, uint16_t y, uint16_t colorfg, uint16_t colorbg, char str[MAX_STR_LEN])
{
 80018e4:	b590      	push	{r4, r7, lr}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af02      	add	r7, sp, #8
 80018ea:	4604      	mov	r4, r0
 80018ec:	4608      	mov	r0, r1
 80018ee:	4611      	mov	r1, r2
 80018f0:	461a      	mov	r2, r3
 80018f2:	4623      	mov	r3, r4
 80018f4:	80fb      	strh	r3, [r7, #6]
 80018f6:	4603      	mov	r3, r0
 80018f8:	80bb      	strh	r3, [r7, #4]
 80018fa:	460b      	mov	r3, r1
 80018fc:	807b      	strh	r3, [r7, #2]
 80018fe:	4613      	mov	r3, r2
 8001900:	803b      	strh	r3, [r7, #0]
	while (*str != '\0')
 8001902:	e00f      	b.n	8001924 <mcpr_LCD_WriteString+0x40>
	{
		mcpr_LCD_WriteLetter(x, y, colorfg, colorbg, *str);
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	883c      	ldrh	r4, [r7, #0]
 800190a:	887a      	ldrh	r2, [r7, #2]
 800190c:	88b9      	ldrh	r1, [r7, #4]
 800190e:	88f8      	ldrh	r0, [r7, #6]
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	4623      	mov	r3, r4
 8001914:	f7ff ff8c 	bl	8001830 <mcpr_LCD_WriteLetter>
		// naechster Buchstabe
		str+=1;
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	3301      	adds	r3, #1
 800191c:	61bb      	str	r3, [r7, #24]
		// springe ein Zeichen nach rechts
		x+=12;
 800191e:	88fb      	ldrh	r3, [r7, #6]
 8001920:	330c      	adds	r3, #12
 8001922:	80fb      	strh	r3, [r7, #6]
	while (*str != '\0')
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1eb      	bne.n	8001904 <mcpr_LCD_WriteString+0x20>
	}
}
 800192c:	bf00      	nop
 800192e:	bf00      	nop
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	bd90      	pop	{r4, r7, pc}
	...

08001938 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001946:	2b00      	cmp	r3, #0
 8001948:	db0b      	blt.n	8001962 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	f003 021f 	and.w	r2, r3, #31
 8001950:	4907      	ldr	r1, [pc, #28]	; (8001970 <__NVIC_EnableIRQ+0x38>)
 8001952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001956:	095b      	lsrs	r3, r3, #5
 8001958:	2001      	movs	r0, #1
 800195a:	fa00 f202 	lsl.w	r2, r0, r2
 800195e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	e000e100 	.word	0xe000e100

08001974 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	2b00      	cmp	r3, #0
 8001984:	db12      	blt.n	80019ac <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	f003 021f 	and.w	r2, r3, #31
 800198c:	490a      	ldr	r1, [pc, #40]	; (80019b8 <__NVIC_DisableIRQ+0x44>)
 800198e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001992:	095b      	lsrs	r3, r3, #5
 8001994:	2001      	movs	r0, #1
 8001996:	fa00 f202 	lsl.w	r2, r0, r2
 800199a:	3320      	adds	r3, #32
 800199c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80019a0:	f3bf 8f4f 	dsb	sy
}
 80019a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019a6:	f3bf 8f6f 	isb	sy
}
 80019aa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	e000e100 	.word	0xe000e100

080019bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	6039      	str	r1, [r7, #0]
 80019c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	db0a      	blt.n	80019e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	b2da      	uxtb	r2, r3
 80019d4:	490c      	ldr	r1, [pc, #48]	; (8001a08 <__NVIC_SetPriority+0x4c>)
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	0112      	lsls	r2, r2, #4
 80019dc:	b2d2      	uxtb	r2, r2
 80019de:	440b      	add	r3, r1
 80019e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019e4:	e00a      	b.n	80019fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	4908      	ldr	r1, [pc, #32]	; (8001a0c <__NVIC_SetPriority+0x50>)
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	3b04      	subs	r3, #4
 80019f4:	0112      	lsls	r2, r2, #4
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	440b      	add	r3, r1
 80019fa:	761a      	strb	r2, [r3, #24]
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	e000e100 	.word	0xe000e100
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <TIM6_DAC_IRQHandler>:
#include "mcpr_timer.h"
#include <stdbool.h>

// IRQ Handler fuer TIM6, welche fuer die delay funktionen genutzt wird
void TIM6_DAC_IRQHandler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
	if (TIM6->SR & TIM_SR_UIF)
 8001a14:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <TIM6_DAC_IRQHandler+0x50>)
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d00c      	beq.n	8001a3a <TIM6_DAC_IRQHandler+0x2a>
	{
		// Resetten des Status Registers ansonsten wird die Service Routine sofort neu ausgeloest
		// gilt fuer alle Interrupts
		TIM6->SR &= ~TIM_SR_UIF;
 8001a20:	4b0f      	ldr	r3, [pc, #60]	; (8001a60 <TIM6_DAC_IRQHandler+0x50>)
 8001a22:	691b      	ldr	r3, [r3, #16]
 8001a24:	4a0e      	ldr	r2, [pc, #56]	; (8001a60 <TIM6_DAC_IRQHandler+0x50>)
 8001a26:	f023 0301 	bic.w	r3, r3, #1
 8001a2a:	6113      	str	r3, [r2, #16]
		resetCnt++;
 8001a2c:	4b0d      	ldr	r3, [pc, #52]	; (8001a64 <TIM6_DAC_IRQHandler+0x54>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	3301      	adds	r3, #1
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <TIM6_DAC_IRQHandler+0x54>)
 8001a38:	701a      	strb	r2, [r3, #0]
	}
	if (resetCnt == 2)
 8001a3a:	4b0a      	ldr	r3, [pc, #40]	; (8001a64 <TIM6_DAC_IRQHandler+0x54>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d108      	bne.n	8001a56 <TIM6_DAC_IRQHandler+0x46>
	{
		resetCnt = 0;
 8001a44:	4b07      	ldr	r3, [pc, #28]	; (8001a64 <TIM6_DAC_IRQHandler+0x54>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	701a      	strb	r2, [r3, #0]
		//Beende den Timer
		TIM6->CR1 &= ~TIM_CR1_CEN;
 8001a4a:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <TIM6_DAC_IRQHandler+0x50>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a04      	ldr	r2, [pc, #16]	; (8001a60 <TIM6_DAC_IRQHandler+0x50>)
 8001a50:	f023 0301 	bic.w	r3, r3, #1
 8001a54:	6013      	str	r3, [r2, #0]
	}
}
 8001a56:	bf00      	nop
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	40001000 	.word	0x40001000
 8001a64:	20000284 	.word	0x20000284

08001a68 <u_delay>:

// Delay funktionen basierend auf dem TIM6 Interrupt
void u_delay(uint16_t us)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	80fb      	strh	r3, [r7, #6]
	// Setup Timer 6
	// aktivieren der TIM6 Clock auf bit 4
	RCC->APB1ENR |= (1<<4);
 8001a72:	4b1d      	ldr	r3, [pc, #116]	; (8001ae8 <u_delay+0x80>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	4a1c      	ldr	r2, [pc, #112]	; (8001ae8 <u_delay+0x80>)
 8001a78:	f043 0310 	orr.w	r3, r3, #16
 8001a7c:	6413      	str	r3, [r2, #64]	; 0x40
	
	// fuer mikro-sekunden genauigkeit benoetigen wir einen Timertakt von 1MHz
	TIM6->PSC = 83;
 8001a7e:	4b1b      	ldr	r3, [pc, #108]	; (8001aec <u_delay+0x84>)
 8001a80:	2253      	movs	r2, #83	; 0x53
 8001a82:	629a      	str	r2, [r3, #40]	; 0x28
	TIM6->ARR = us-1;
 8001a84:	88fb      	ldrh	r3, [r7, #6]
 8001a86:	1e5a      	subs	r2, r3, #1
 8001a88:	4b18      	ldr	r3, [pc, #96]	; (8001aec <u_delay+0x84>)
 8001a8a:	62da      	str	r2, [r3, #44]	; 0x2c
	// Enable Interrupts
	TIM6->DIER |= TIM_DIER_UIE;
 8001a8c:	4b17      	ldr	r3, [pc, #92]	; (8001aec <u_delay+0x84>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	4a16      	ldr	r2, [pc, #88]	; (8001aec <u_delay+0x84>)
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	60d3      	str	r3, [r2, #12]
	NVIC_SetPriority(TIM6_DAC_IRQn, 8);
 8001a98:	2108      	movs	r1, #8
 8001a9a:	2036      	movs	r0, #54	; 0x36
 8001a9c:	f7ff ff8e 	bl	80019bc <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001aa0:	2036      	movs	r0, #54	; 0x36
 8001aa2:	f7ff ff49 	bl	8001938 <__NVIC_EnableIRQ>
	TIM6->CNT = 0;
 8001aa6:	4b11      	ldr	r3, [pc, #68]	; (8001aec <u_delay+0x84>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	625a      	str	r2, [r3, #36]	; 0x24
	// setze resetCnt auf 1 da wir nicht das problem wie beim ms timer haben (es ist nicht schoen aber es funktioniert)
	resetCnt = 1;
 8001aac:	4b10      	ldr	r3, [pc, #64]	; (8001af0 <u_delay+0x88>)
 8001aae:	2201      	movs	r2, #1
 8001ab0:	701a      	strb	r2, [r3, #0]
	TIM6->CR1 |= TIM_CR1_CEN;
 8001ab2:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <u_delay+0x84>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a0d      	ldr	r2, [pc, #52]	; (8001aec <u_delay+0x84>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	6013      	str	r3, [r2, #0]
	
	while(TIM6->CR1 & TIM_CR1_CEN);
 8001abe:	bf00      	nop
 8001ac0:	4b0a      	ldr	r3, [pc, #40]	; (8001aec <u_delay+0x84>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d1f9      	bne.n	8001ac0 <u_delay+0x58>
	RCC->APB1ENR &= ~(1u<<4);
 8001acc:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <u_delay+0x80>)
 8001ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad0:	4a05      	ldr	r2, [pc, #20]	; (8001ae8 <u_delay+0x80>)
 8001ad2:	f023 0310 	bic.w	r3, r3, #16
 8001ad6:	6413      	str	r3, [r2, #64]	; 0x40
	NVIC_DisableIRQ(TIM6_DAC_IRQn);
 8001ad8:	2036      	movs	r0, #54	; 0x36
 8001ada:	f7ff ff4b 	bl	8001974 <__NVIC_DisableIRQ>
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	40001000 	.word	0x40001000
 8001af0:	20000284 	.word	0x20000284

08001af4 <m_delay>:

void m_delay(uint16_t ms)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	80fb      	strh	r3, [r7, #6]
	// Setup Timer 6
	// aktivieren der TIM6 Clock auf bit 4
	RCC->APB1ENR |= (1<<4);
 8001afe:	4b1c      	ldr	r3, [pc, #112]	; (8001b70 <m_delay+0x7c>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	4a1b      	ldr	r2, [pc, #108]	; (8001b70 <m_delay+0x7c>)
 8001b04:	f043 0310 	orr.w	r3, r3, #16
 8001b08:	6413      	str	r3, [r2, #64]	; 0x40
	
	// 84000 / 2, da allerdings 16bit register passt muss getrixt werden
	// Basistakt des Timers = 84Mhz
	// Fuer millisekunden genauigkeit benoetigen wir einen Timertakt von 1kHz
	TIM6->PSC = 42000-1;
 8001b0a:	4b1a      	ldr	r3, [pc, #104]	; (8001b74 <m_delay+0x80>)
 8001b0c:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001b10:	629a      	str	r2, [r3, #40]	; 0x28
	TIM6->ARR = (ms-1);
 8001b12:	88fb      	ldrh	r3, [r7, #6]
 8001b14:	1e5a      	subs	r2, r3, #1
 8001b16:	4b17      	ldr	r3, [pc, #92]	; (8001b74 <m_delay+0x80>)
 8001b18:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM6->DIER |= TIM_DIER_UIE;
 8001b1a:	4b16      	ldr	r3, [pc, #88]	; (8001b74 <m_delay+0x80>)
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	4a15      	ldr	r2, [pc, #84]	; (8001b74 <m_delay+0x80>)
 8001b20:	f043 0301 	orr.w	r3, r3, #1
 8001b24:	60d3      	str	r3, [r2, #12]
	NVIC_SetPriority(TIM6_DAC_IRQn, 8);
 8001b26:	2108      	movs	r1, #8
 8001b28:	2036      	movs	r0, #54	; 0x36
 8001b2a:	f7ff ff47 	bl	80019bc <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b2e:	2036      	movs	r0, #54	; 0x36
 8001b30:	f7ff ff02 	bl	8001938 <__NVIC_EnableIRQ>
	TIM6->CNT = 0;
 8001b34:	4b0f      	ldr	r3, [pc, #60]	; (8001b74 <m_delay+0x80>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	625a      	str	r2, [r3, #36]	; 0x24
	TIM6->CR1 |= TIM_CR1_CEN;
 8001b3a:	4b0e      	ldr	r3, [pc, #56]	; (8001b74 <m_delay+0x80>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a0d      	ldr	r2, [pc, #52]	; (8001b74 <m_delay+0x80>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	6013      	str	r3, [r2, #0]
	
	while(TIM6->CR1 & TIM_CR1_CEN);
 8001b46:	bf00      	nop
 8001b48:	4b0a      	ldr	r3, [pc, #40]	; (8001b74 <m_delay+0x80>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1f9      	bne.n	8001b48 <m_delay+0x54>
	RCC->APB1ENR &= ~(1u<<4);
 8001b54:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <m_delay+0x7c>)
 8001b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b58:	4a05      	ldr	r2, [pc, #20]	; (8001b70 <m_delay+0x7c>)
 8001b5a:	f023 0310 	bic.w	r3, r3, #16
 8001b5e:	6413      	str	r3, [r2, #64]	; 0x40
	NVIC_DisableIRQ(TIM6_DAC_IRQn);
 8001b60:	2036      	movs	r0, #54	; 0x36
 8001b62:	f7ff ff07 	bl	8001974 <__NVIC_DisableIRQ>
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40001000 	.word	0x40001000

08001b78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b7c:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <HAL_Init+0x40>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a0d      	ldr	r2, [pc, #52]	; (8001bb8 <HAL_Init+0x40>)
 8001b82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b88:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <HAL_Init+0x40>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a0a      	ldr	r2, [pc, #40]	; (8001bb8 <HAL_Init+0x40>)
 8001b8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b94:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <HAL_Init+0x40>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a07      	ldr	r2, [pc, #28]	; (8001bb8 <HAL_Init+0x40>)
 8001b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ba0:	2003      	movs	r0, #3
 8001ba2:	f000 f8fc 	bl	8001d9e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ba6:	200f      	movs	r0, #15
 8001ba8:	f7ff fb3e 	bl	8001228 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bac:	f7ff f988 	bl	8000ec0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40023c00 	.word	0x40023c00

08001bbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bc0:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <HAL_IncTick+0x20>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <HAL_IncTick+0x24>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4413      	add	r3, r2
 8001bcc:	4a04      	ldr	r2, [pc, #16]	; (8001be0 <HAL_IncTick+0x24>)
 8001bce:	6013      	str	r3, [r2, #0]
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	20000008 	.word	0x20000008
 8001be0:	20000288 	.word	0x20000288

08001be4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  return uwTick;
 8001be8:	4b03      	ldr	r3, [pc, #12]	; (8001bf8 <HAL_GetTick+0x14>)
 8001bea:	681b      	ldr	r3, [r3, #0]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	20000288 	.word	0x20000288

08001bfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c04:	f7ff ffee 	bl	8001be4 <HAL_GetTick>
 8001c08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c14:	d005      	beq.n	8001c22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c16:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <HAL_Delay+0x44>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	4413      	add	r3, r2
 8001c20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c22:	bf00      	nop
 8001c24:	f7ff ffde 	bl	8001be4 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d8f7      	bhi.n	8001c24 <HAL_Delay+0x28>
  {
  }
}
 8001c34:	bf00      	nop
 8001c36:	bf00      	nop
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000008 	.word	0x20000008

08001c44 <__NVIC_SetPriorityGrouping>:
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c54:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <__NVIC_SetPriorityGrouping+0x44>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c5a:	68ba      	ldr	r2, [r7, #8]
 8001c5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c60:	4013      	ands	r3, r2
 8001c62:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c76:	4a04      	ldr	r2, [pc, #16]	; (8001c88 <__NVIC_SetPriorityGrouping+0x44>)
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	60d3      	str	r3, [r2, #12]
}
 8001c7c:	bf00      	nop
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	e000ed00 	.word	0xe000ed00

08001c8c <__NVIC_GetPriorityGrouping>:
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c90:	4b04      	ldr	r3, [pc, #16]	; (8001ca4 <__NVIC_GetPriorityGrouping+0x18>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	0a1b      	lsrs	r3, r3, #8
 8001c96:	f003 0307 	and.w	r3, r3, #7
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <__NVIC_EnableIRQ>:
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	db0b      	blt.n	8001cd2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	f003 021f 	and.w	r2, r3, #31
 8001cc0:	4907      	ldr	r1, [pc, #28]	; (8001ce0 <__NVIC_EnableIRQ+0x38>)
 8001cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc6:	095b      	lsrs	r3, r3, #5
 8001cc8:	2001      	movs	r0, #1
 8001cca:	fa00 f202 	lsl.w	r2, r0, r2
 8001cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	e000e100 	.word	0xe000e100

08001ce4 <__NVIC_SetPriority>:
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	6039      	str	r1, [r7, #0]
 8001cee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	db0a      	blt.n	8001d0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	490c      	ldr	r1, [pc, #48]	; (8001d30 <__NVIC_SetPriority+0x4c>)
 8001cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d02:	0112      	lsls	r2, r2, #4
 8001d04:	b2d2      	uxtb	r2, r2
 8001d06:	440b      	add	r3, r1
 8001d08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001d0c:	e00a      	b.n	8001d24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	4908      	ldr	r1, [pc, #32]	; (8001d34 <__NVIC_SetPriority+0x50>)
 8001d14:	79fb      	ldrb	r3, [r7, #7]
 8001d16:	f003 030f 	and.w	r3, r3, #15
 8001d1a:	3b04      	subs	r3, #4
 8001d1c:	0112      	lsls	r2, r2, #4
 8001d1e:	b2d2      	uxtb	r2, r2
 8001d20:	440b      	add	r3, r1
 8001d22:	761a      	strb	r2, [r3, #24]
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	e000e100 	.word	0xe000e100
 8001d34:	e000ed00 	.word	0xe000ed00

08001d38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b089      	sub	sp, #36	; 0x24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	f1c3 0307 	rsb	r3, r3, #7
 8001d52:	2b04      	cmp	r3, #4
 8001d54:	bf28      	it	cs
 8001d56:	2304      	movcs	r3, #4
 8001d58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	3304      	adds	r3, #4
 8001d5e:	2b06      	cmp	r3, #6
 8001d60:	d902      	bls.n	8001d68 <NVIC_EncodePriority+0x30>
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	3b03      	subs	r3, #3
 8001d66:	e000      	b.n	8001d6a <NVIC_EncodePriority+0x32>
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	43da      	mvns	r2, r3
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	401a      	ands	r2, r3
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d80:	f04f 31ff 	mov.w	r1, #4294967295
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8a:	43d9      	mvns	r1, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d90:	4313      	orrs	r3, r2
         );
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3724      	adds	r7, #36	; 0x24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b082      	sub	sp, #8
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7ff ff4c 	bl	8001c44 <__NVIC_SetPriorityGrouping>
}
 8001dac:	bf00      	nop
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
 8001dc0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dc6:	f7ff ff61 	bl	8001c8c <__NVIC_GetPriorityGrouping>
 8001dca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	68b9      	ldr	r1, [r7, #8]
 8001dd0:	6978      	ldr	r0, [r7, #20]
 8001dd2:	f7ff ffb1 	bl	8001d38 <NVIC_EncodePriority>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ddc:	4611      	mov	r1, r2
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff ff80 	bl	8001ce4 <__NVIC_SetPriority>
}
 8001de4:	bf00      	nop
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff ff54 	bl	8001ca8 <__NVIC_EnableIRQ>
}
 8001e00:	bf00      	nop
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b089      	sub	sp, #36	; 0x24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e12:	2300      	movs	r3, #0
 8001e14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e16:	2300      	movs	r3, #0
 8001e18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61fb      	str	r3, [r7, #28]
 8001e22:	e16b      	b.n	80020fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e24:	2201      	movs	r2, #1
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	4013      	ands	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	f040 815a 	bne.w	80020f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d005      	beq.n	8001e5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d130      	bne.n	8001ebc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	2203      	movs	r2, #3
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	68da      	ldr	r2, [r3, #12]
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e90:	2201      	movs	r2, #1
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	091b      	lsrs	r3, r3, #4
 8001ea6:	f003 0201 	and.w	r2, r3, #1
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f003 0303 	and.w	r3, r3, #3
 8001ec4:	2b03      	cmp	r3, #3
 8001ec6:	d017      	beq.n	8001ef8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	2203      	movs	r2, #3
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4013      	ands	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f003 0303 	and.w	r3, r3, #3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d123      	bne.n	8001f4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	08da      	lsrs	r2, r3, #3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3208      	adds	r2, #8
 8001f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	f003 0307 	and.w	r3, r3, #7
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	220f      	movs	r2, #15
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4013      	ands	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	691a      	ldr	r2, [r3, #16]
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	08da      	lsrs	r2, r3, #3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	3208      	adds	r2, #8
 8001f46:	69b9      	ldr	r1, [r7, #24]
 8001f48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	2203      	movs	r2, #3
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4013      	ands	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f003 0203 	and.w	r2, r3, #3
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f000 80b4 	beq.w	80020f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	4b60      	ldr	r3, [pc, #384]	; (8002114 <HAL_GPIO_Init+0x30c>)
 8001f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f96:	4a5f      	ldr	r2, [pc, #380]	; (8002114 <HAL_GPIO_Init+0x30c>)
 8001f98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f9e:	4b5d      	ldr	r3, [pc, #372]	; (8002114 <HAL_GPIO_Init+0x30c>)
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001faa:	4a5b      	ldr	r2, [pc, #364]	; (8002118 <HAL_GPIO_Init+0x310>)
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	089b      	lsrs	r3, r3, #2
 8001fb0:	3302      	adds	r3, #2
 8001fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	f003 0303 	and.w	r3, r3, #3
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	220f      	movs	r2, #15
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a52      	ldr	r2, [pc, #328]	; (800211c <HAL_GPIO_Init+0x314>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d02b      	beq.n	800202e <HAL_GPIO_Init+0x226>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a51      	ldr	r2, [pc, #324]	; (8002120 <HAL_GPIO_Init+0x318>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d025      	beq.n	800202a <HAL_GPIO_Init+0x222>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a50      	ldr	r2, [pc, #320]	; (8002124 <HAL_GPIO_Init+0x31c>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d01f      	beq.n	8002026 <HAL_GPIO_Init+0x21e>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a4f      	ldr	r2, [pc, #316]	; (8002128 <HAL_GPIO_Init+0x320>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d019      	beq.n	8002022 <HAL_GPIO_Init+0x21a>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a4e      	ldr	r2, [pc, #312]	; (800212c <HAL_GPIO_Init+0x324>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d013      	beq.n	800201e <HAL_GPIO_Init+0x216>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a4d      	ldr	r2, [pc, #308]	; (8002130 <HAL_GPIO_Init+0x328>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d00d      	beq.n	800201a <HAL_GPIO_Init+0x212>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a4c      	ldr	r2, [pc, #304]	; (8002134 <HAL_GPIO_Init+0x32c>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d007      	beq.n	8002016 <HAL_GPIO_Init+0x20e>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a4b      	ldr	r2, [pc, #300]	; (8002138 <HAL_GPIO_Init+0x330>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d101      	bne.n	8002012 <HAL_GPIO_Init+0x20a>
 800200e:	2307      	movs	r3, #7
 8002010:	e00e      	b.n	8002030 <HAL_GPIO_Init+0x228>
 8002012:	2308      	movs	r3, #8
 8002014:	e00c      	b.n	8002030 <HAL_GPIO_Init+0x228>
 8002016:	2306      	movs	r3, #6
 8002018:	e00a      	b.n	8002030 <HAL_GPIO_Init+0x228>
 800201a:	2305      	movs	r3, #5
 800201c:	e008      	b.n	8002030 <HAL_GPIO_Init+0x228>
 800201e:	2304      	movs	r3, #4
 8002020:	e006      	b.n	8002030 <HAL_GPIO_Init+0x228>
 8002022:	2303      	movs	r3, #3
 8002024:	e004      	b.n	8002030 <HAL_GPIO_Init+0x228>
 8002026:	2302      	movs	r3, #2
 8002028:	e002      	b.n	8002030 <HAL_GPIO_Init+0x228>
 800202a:	2301      	movs	r3, #1
 800202c:	e000      	b.n	8002030 <HAL_GPIO_Init+0x228>
 800202e:	2300      	movs	r3, #0
 8002030:	69fa      	ldr	r2, [r7, #28]
 8002032:	f002 0203 	and.w	r2, r2, #3
 8002036:	0092      	lsls	r2, r2, #2
 8002038:	4093      	lsls	r3, r2
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4313      	orrs	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002040:	4935      	ldr	r1, [pc, #212]	; (8002118 <HAL_GPIO_Init+0x310>)
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	089b      	lsrs	r3, r3, #2
 8002046:	3302      	adds	r3, #2
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800204e:	4b3b      	ldr	r3, [pc, #236]	; (800213c <HAL_GPIO_Init+0x334>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	43db      	mvns	r3, r3
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	4013      	ands	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	4313      	orrs	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002072:	4a32      	ldr	r2, [pc, #200]	; (800213c <HAL_GPIO_Init+0x334>)
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002078:	4b30      	ldr	r3, [pc, #192]	; (800213c <HAL_GPIO_Init+0x334>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	43db      	mvns	r3, r3
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4013      	ands	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	4313      	orrs	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800209c:	4a27      	ldr	r2, [pc, #156]	; (800213c <HAL_GPIO_Init+0x334>)
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020a2:	4b26      	ldr	r3, [pc, #152]	; (800213c <HAL_GPIO_Init+0x334>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	43db      	mvns	r3, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4013      	ands	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020c6:	4a1d      	ldr	r2, [pc, #116]	; (800213c <HAL_GPIO_Init+0x334>)
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020cc:	4b1b      	ldr	r3, [pc, #108]	; (800213c <HAL_GPIO_Init+0x334>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	43db      	mvns	r3, r3
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4013      	ands	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020f0:	4a12      	ldr	r2, [pc, #72]	; (800213c <HAL_GPIO_Init+0x334>)
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	3301      	adds	r3, #1
 80020fa:	61fb      	str	r3, [r7, #28]
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	2b0f      	cmp	r3, #15
 8002100:	f67f ae90 	bls.w	8001e24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002104:	bf00      	nop
 8002106:	bf00      	nop
 8002108:	3724      	adds	r7, #36	; 0x24
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	40023800 	.word	0x40023800
 8002118:	40013800 	.word	0x40013800
 800211c:	40020000 	.word	0x40020000
 8002120:	40020400 	.word	0x40020400
 8002124:	40020800 	.word	0x40020800
 8002128:	40020c00 	.word	0x40020c00
 800212c:	40021000 	.word	0x40021000
 8002130:	40021400 	.word	0x40021400
 8002134:	40021800 	.word	0x40021800
 8002138:	40021c00 	.word	0x40021c00
 800213c:	40013c00 	.word	0x40013c00

08002140 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	460b      	mov	r3, r1
 800214a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	691a      	ldr	r2, [r3, #16]
 8002150:	887b      	ldrh	r3, [r7, #2]
 8002152:	4013      	ands	r3, r2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d002      	beq.n	800215e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002158:	2301      	movs	r3, #1
 800215a:	73fb      	strb	r3, [r7, #15]
 800215c:	e001      	b.n	8002162 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800215e:	2300      	movs	r3, #0
 8002160:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002162:	7bfb      	ldrb	r3, [r7, #15]
}
 8002164:	4618      	mov	r0, r3
 8002166:	3714      	adds	r7, #20
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	460b      	mov	r3, r1
 800217a:	807b      	strh	r3, [r7, #2]
 800217c:	4613      	mov	r3, r2
 800217e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002180:	787b      	ldrb	r3, [r7, #1]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d003      	beq.n	800218e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002186:	887a      	ldrh	r2, [r7, #2]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800218c:	e003      	b.n	8002196 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800218e:	887b      	ldrh	r3, [r7, #2]
 8002190:	041a      	lsls	r2, r3, #16
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	619a      	str	r2, [r3, #24]
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80021a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021a4:	b08f      	sub	sp, #60	; 0x3c
 80021a6:	af0a      	add	r7, sp, #40	; 0x28
 80021a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d101      	bne.n	80021b4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e054      	b.n	800225e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d106      	bne.n	80021d4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f00a fbf0 	bl	800c9b4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2203      	movs	r2, #3
 80021d8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d102      	bne.n	80021ee <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f004 f96c 	bl	80064d0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	603b      	str	r3, [r7, #0]
 80021fe:	687e      	ldr	r6, [r7, #4]
 8002200:	466d      	mov	r5, sp
 8002202:	f106 0410 	add.w	r4, r6, #16
 8002206:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002208:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800220a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800220c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800220e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002212:	e885 0003 	stmia.w	r5, {r0, r1}
 8002216:	1d33      	adds	r3, r6, #4
 8002218:	cb0e      	ldmia	r3, {r1, r2, r3}
 800221a:	6838      	ldr	r0, [r7, #0]
 800221c:	f004 f8e6 	bl	80063ec <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2101      	movs	r1, #1
 8002226:	4618      	mov	r0, r3
 8002228:	f004 f963 	bl	80064f2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	603b      	str	r3, [r7, #0]
 8002232:	687e      	ldr	r6, [r7, #4]
 8002234:	466d      	mov	r5, sp
 8002236:	f106 0410 	add.w	r4, r6, #16
 800223a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800223c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800223e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002240:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002242:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002246:	e885 0003 	stmia.w	r5, {r0, r1}
 800224a:	1d33      	adds	r3, r6, #4
 800224c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800224e:	6838      	ldr	r0, [r7, #0]
 8002250:	f004 faec 	bl	800682c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3714      	adds	r7, #20
 8002262:	46bd      	mov	sp, r7
 8002264:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002266 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002266:	b590      	push	{r4, r7, lr}
 8002268:	b089      	sub	sp, #36	; 0x24
 800226a:	af04      	add	r7, sp, #16
 800226c:	6078      	str	r0, [r7, #4]
 800226e:	4608      	mov	r0, r1
 8002270:	4611      	mov	r1, r2
 8002272:	461a      	mov	r2, r3
 8002274:	4603      	mov	r3, r0
 8002276:	70fb      	strb	r3, [r7, #3]
 8002278:	460b      	mov	r3, r1
 800227a:	70bb      	strb	r3, [r7, #2]
 800227c:	4613      	mov	r3, r2
 800227e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002286:	2b01      	cmp	r3, #1
 8002288:	d101      	bne.n	800228e <HAL_HCD_HC_Init+0x28>
 800228a:	2302      	movs	r3, #2
 800228c:	e076      	b.n	800237c <HAL_HCD_HC_Init+0x116>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2201      	movs	r2, #1
 8002292:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002296:	78fb      	ldrb	r3, [r7, #3]
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	212c      	movs	r1, #44	; 0x2c
 800229c:	fb01 f303 	mul.w	r3, r1, r3
 80022a0:	4413      	add	r3, r2
 80022a2:	333d      	adds	r3, #61	; 0x3d
 80022a4:	2200      	movs	r2, #0
 80022a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80022a8:	78fb      	ldrb	r3, [r7, #3]
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	212c      	movs	r1, #44	; 0x2c
 80022ae:	fb01 f303 	mul.w	r3, r1, r3
 80022b2:	4413      	add	r3, r2
 80022b4:	3338      	adds	r3, #56	; 0x38
 80022b6:	787a      	ldrb	r2, [r7, #1]
 80022b8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80022ba:	78fb      	ldrb	r3, [r7, #3]
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	212c      	movs	r1, #44	; 0x2c
 80022c0:	fb01 f303 	mul.w	r3, r1, r3
 80022c4:	4413      	add	r3, r2
 80022c6:	3340      	adds	r3, #64	; 0x40
 80022c8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80022ca:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80022cc:	78fb      	ldrb	r3, [r7, #3]
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	212c      	movs	r1, #44	; 0x2c
 80022d2:	fb01 f303 	mul.w	r3, r1, r3
 80022d6:	4413      	add	r3, r2
 80022d8:	3339      	adds	r3, #57	; 0x39
 80022da:	78fa      	ldrb	r2, [r7, #3]
 80022dc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80022de:	78fb      	ldrb	r3, [r7, #3]
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	212c      	movs	r1, #44	; 0x2c
 80022e4:	fb01 f303 	mul.w	r3, r1, r3
 80022e8:	4413      	add	r3, r2
 80022ea:	333f      	adds	r3, #63	; 0x3f
 80022ec:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80022f0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80022f2:	78fb      	ldrb	r3, [r7, #3]
 80022f4:	78ba      	ldrb	r2, [r7, #2]
 80022f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80022fa:	b2d0      	uxtb	r0, r2
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	212c      	movs	r1, #44	; 0x2c
 8002300:	fb01 f303 	mul.w	r3, r1, r3
 8002304:	4413      	add	r3, r2
 8002306:	333a      	adds	r3, #58	; 0x3a
 8002308:	4602      	mov	r2, r0
 800230a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800230c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002310:	2b00      	cmp	r3, #0
 8002312:	da09      	bge.n	8002328 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002314:	78fb      	ldrb	r3, [r7, #3]
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	212c      	movs	r1, #44	; 0x2c
 800231a:	fb01 f303 	mul.w	r3, r1, r3
 800231e:	4413      	add	r3, r2
 8002320:	333b      	adds	r3, #59	; 0x3b
 8002322:	2201      	movs	r2, #1
 8002324:	701a      	strb	r2, [r3, #0]
 8002326:	e008      	b.n	800233a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002328:	78fb      	ldrb	r3, [r7, #3]
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	212c      	movs	r1, #44	; 0x2c
 800232e:	fb01 f303 	mul.w	r3, r1, r3
 8002332:	4413      	add	r3, r2
 8002334:	333b      	adds	r3, #59	; 0x3b
 8002336:	2200      	movs	r2, #0
 8002338:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800233a:	78fb      	ldrb	r3, [r7, #3]
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	212c      	movs	r1, #44	; 0x2c
 8002340:	fb01 f303 	mul.w	r3, r1, r3
 8002344:	4413      	add	r3, r2
 8002346:	333c      	adds	r3, #60	; 0x3c
 8002348:	f897 2020 	ldrb.w	r2, [r7, #32]
 800234c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6818      	ldr	r0, [r3, #0]
 8002352:	787c      	ldrb	r4, [r7, #1]
 8002354:	78ba      	ldrb	r2, [r7, #2]
 8002356:	78f9      	ldrb	r1, [r7, #3]
 8002358:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800235a:	9302      	str	r3, [sp, #8]
 800235c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002360:	9301      	str	r3, [sp, #4]
 8002362:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	4623      	mov	r3, r4
 800236a:	f004 fbe5 	bl	8006b38 <USB_HC_Init>
 800236e:	4603      	mov	r3, r0
 8002370:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800237a:	7bfb      	ldrb	r3, [r7, #15]
}
 800237c:	4618      	mov	r0, r3
 800237e:	3714      	adds	r7, #20
 8002380:	46bd      	mov	sp, r7
 8002382:	bd90      	pop	{r4, r7, pc}

08002384 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	460b      	mov	r3, r1
 800238e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002390:	2300      	movs	r3, #0
 8002392:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800239a:	2b01      	cmp	r3, #1
 800239c:	d101      	bne.n	80023a2 <HAL_HCD_HC_Halt+0x1e>
 800239e:	2302      	movs	r3, #2
 80023a0:	e00f      	b.n	80023c2 <HAL_HCD_HC_Halt+0x3e>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	78fa      	ldrb	r2, [r7, #3]
 80023b0:	4611      	mov	r1, r2
 80023b2:	4618      	mov	r0, r3
 80023b4:	f004 fe35 	bl	8007022 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80023c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
	...

080023cc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	4608      	mov	r0, r1
 80023d6:	4611      	mov	r1, r2
 80023d8:	461a      	mov	r2, r3
 80023da:	4603      	mov	r3, r0
 80023dc:	70fb      	strb	r3, [r7, #3]
 80023de:	460b      	mov	r3, r1
 80023e0:	70bb      	strb	r3, [r7, #2]
 80023e2:	4613      	mov	r3, r2
 80023e4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80023e6:	78fb      	ldrb	r3, [r7, #3]
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	212c      	movs	r1, #44	; 0x2c
 80023ec:	fb01 f303 	mul.w	r3, r1, r3
 80023f0:	4413      	add	r3, r2
 80023f2:	333b      	adds	r3, #59	; 0x3b
 80023f4:	78ba      	ldrb	r2, [r7, #2]
 80023f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80023f8:	78fb      	ldrb	r3, [r7, #3]
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	212c      	movs	r1, #44	; 0x2c
 80023fe:	fb01 f303 	mul.w	r3, r1, r3
 8002402:	4413      	add	r3, r2
 8002404:	333f      	adds	r3, #63	; 0x3f
 8002406:	787a      	ldrb	r2, [r7, #1]
 8002408:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800240a:	7c3b      	ldrb	r3, [r7, #16]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d112      	bne.n	8002436 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002410:	78fb      	ldrb	r3, [r7, #3]
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	212c      	movs	r1, #44	; 0x2c
 8002416:	fb01 f303 	mul.w	r3, r1, r3
 800241a:	4413      	add	r3, r2
 800241c:	3342      	adds	r3, #66	; 0x42
 800241e:	2203      	movs	r2, #3
 8002420:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002422:	78fb      	ldrb	r3, [r7, #3]
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	212c      	movs	r1, #44	; 0x2c
 8002428:	fb01 f303 	mul.w	r3, r1, r3
 800242c:	4413      	add	r3, r2
 800242e:	333d      	adds	r3, #61	; 0x3d
 8002430:	7f3a      	ldrb	r2, [r7, #28]
 8002432:	701a      	strb	r2, [r3, #0]
 8002434:	e008      	b.n	8002448 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002436:	78fb      	ldrb	r3, [r7, #3]
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	212c      	movs	r1, #44	; 0x2c
 800243c:	fb01 f303 	mul.w	r3, r1, r3
 8002440:	4413      	add	r3, r2
 8002442:	3342      	adds	r3, #66	; 0x42
 8002444:	2202      	movs	r2, #2
 8002446:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002448:	787b      	ldrb	r3, [r7, #1]
 800244a:	2b03      	cmp	r3, #3
 800244c:	f200 80c6 	bhi.w	80025dc <HAL_HCD_HC_SubmitRequest+0x210>
 8002450:	a201      	add	r2, pc, #4	; (adr r2, 8002458 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002456:	bf00      	nop
 8002458:	08002469 	.word	0x08002469
 800245c:	080025c9 	.word	0x080025c9
 8002460:	080024cd 	.word	0x080024cd
 8002464:	0800254b 	.word	0x0800254b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002468:	7c3b      	ldrb	r3, [r7, #16]
 800246a:	2b01      	cmp	r3, #1
 800246c:	f040 80b8 	bne.w	80025e0 <HAL_HCD_HC_SubmitRequest+0x214>
 8002470:	78bb      	ldrb	r3, [r7, #2]
 8002472:	2b00      	cmp	r3, #0
 8002474:	f040 80b4 	bne.w	80025e0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002478:	8b3b      	ldrh	r3, [r7, #24]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d108      	bne.n	8002490 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800247e:	78fb      	ldrb	r3, [r7, #3]
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	212c      	movs	r1, #44	; 0x2c
 8002484:	fb01 f303 	mul.w	r3, r1, r3
 8002488:	4413      	add	r3, r2
 800248a:	3355      	adds	r3, #85	; 0x55
 800248c:	2201      	movs	r2, #1
 800248e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002490:	78fb      	ldrb	r3, [r7, #3]
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	212c      	movs	r1, #44	; 0x2c
 8002496:	fb01 f303 	mul.w	r3, r1, r3
 800249a:	4413      	add	r3, r2
 800249c:	3355      	adds	r3, #85	; 0x55
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d109      	bne.n	80024b8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024a4:	78fb      	ldrb	r3, [r7, #3]
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	212c      	movs	r1, #44	; 0x2c
 80024aa:	fb01 f303 	mul.w	r3, r1, r3
 80024ae:	4413      	add	r3, r2
 80024b0:	3342      	adds	r3, #66	; 0x42
 80024b2:	2200      	movs	r2, #0
 80024b4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80024b6:	e093      	b.n	80025e0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024b8:	78fb      	ldrb	r3, [r7, #3]
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	212c      	movs	r1, #44	; 0x2c
 80024be:	fb01 f303 	mul.w	r3, r1, r3
 80024c2:	4413      	add	r3, r2
 80024c4:	3342      	adds	r3, #66	; 0x42
 80024c6:	2202      	movs	r2, #2
 80024c8:	701a      	strb	r2, [r3, #0]
      break;
 80024ca:	e089      	b.n	80025e0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80024cc:	78bb      	ldrb	r3, [r7, #2]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d11d      	bne.n	800250e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80024d2:	78fb      	ldrb	r3, [r7, #3]
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	212c      	movs	r1, #44	; 0x2c
 80024d8:	fb01 f303 	mul.w	r3, r1, r3
 80024dc:	4413      	add	r3, r2
 80024de:	3355      	adds	r3, #85	; 0x55
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d109      	bne.n	80024fa <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024e6:	78fb      	ldrb	r3, [r7, #3]
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	212c      	movs	r1, #44	; 0x2c
 80024ec:	fb01 f303 	mul.w	r3, r1, r3
 80024f0:	4413      	add	r3, r2
 80024f2:	3342      	adds	r3, #66	; 0x42
 80024f4:	2200      	movs	r2, #0
 80024f6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80024f8:	e073      	b.n	80025e2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024fa:	78fb      	ldrb	r3, [r7, #3]
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	212c      	movs	r1, #44	; 0x2c
 8002500:	fb01 f303 	mul.w	r3, r1, r3
 8002504:	4413      	add	r3, r2
 8002506:	3342      	adds	r3, #66	; 0x42
 8002508:	2202      	movs	r2, #2
 800250a:	701a      	strb	r2, [r3, #0]
      break;
 800250c:	e069      	b.n	80025e2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800250e:	78fb      	ldrb	r3, [r7, #3]
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	212c      	movs	r1, #44	; 0x2c
 8002514:	fb01 f303 	mul.w	r3, r1, r3
 8002518:	4413      	add	r3, r2
 800251a:	3354      	adds	r3, #84	; 0x54
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d109      	bne.n	8002536 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002522:	78fb      	ldrb	r3, [r7, #3]
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	212c      	movs	r1, #44	; 0x2c
 8002528:	fb01 f303 	mul.w	r3, r1, r3
 800252c:	4413      	add	r3, r2
 800252e:	3342      	adds	r3, #66	; 0x42
 8002530:	2200      	movs	r2, #0
 8002532:	701a      	strb	r2, [r3, #0]
      break;
 8002534:	e055      	b.n	80025e2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002536:	78fb      	ldrb	r3, [r7, #3]
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	212c      	movs	r1, #44	; 0x2c
 800253c:	fb01 f303 	mul.w	r3, r1, r3
 8002540:	4413      	add	r3, r2
 8002542:	3342      	adds	r3, #66	; 0x42
 8002544:	2202      	movs	r2, #2
 8002546:	701a      	strb	r2, [r3, #0]
      break;
 8002548:	e04b      	b.n	80025e2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800254a:	78bb      	ldrb	r3, [r7, #2]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d11d      	bne.n	800258c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002550:	78fb      	ldrb	r3, [r7, #3]
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	212c      	movs	r1, #44	; 0x2c
 8002556:	fb01 f303 	mul.w	r3, r1, r3
 800255a:	4413      	add	r3, r2
 800255c:	3355      	adds	r3, #85	; 0x55
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d109      	bne.n	8002578 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002564:	78fb      	ldrb	r3, [r7, #3]
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	212c      	movs	r1, #44	; 0x2c
 800256a:	fb01 f303 	mul.w	r3, r1, r3
 800256e:	4413      	add	r3, r2
 8002570:	3342      	adds	r3, #66	; 0x42
 8002572:	2200      	movs	r2, #0
 8002574:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002576:	e034      	b.n	80025e2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002578:	78fb      	ldrb	r3, [r7, #3]
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	212c      	movs	r1, #44	; 0x2c
 800257e:	fb01 f303 	mul.w	r3, r1, r3
 8002582:	4413      	add	r3, r2
 8002584:	3342      	adds	r3, #66	; 0x42
 8002586:	2202      	movs	r2, #2
 8002588:	701a      	strb	r2, [r3, #0]
      break;
 800258a:	e02a      	b.n	80025e2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800258c:	78fb      	ldrb	r3, [r7, #3]
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	212c      	movs	r1, #44	; 0x2c
 8002592:	fb01 f303 	mul.w	r3, r1, r3
 8002596:	4413      	add	r3, r2
 8002598:	3354      	adds	r3, #84	; 0x54
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d109      	bne.n	80025b4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025a0:	78fb      	ldrb	r3, [r7, #3]
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	212c      	movs	r1, #44	; 0x2c
 80025a6:	fb01 f303 	mul.w	r3, r1, r3
 80025aa:	4413      	add	r3, r2
 80025ac:	3342      	adds	r3, #66	; 0x42
 80025ae:	2200      	movs	r2, #0
 80025b0:	701a      	strb	r2, [r3, #0]
      break;
 80025b2:	e016      	b.n	80025e2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025b4:	78fb      	ldrb	r3, [r7, #3]
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	212c      	movs	r1, #44	; 0x2c
 80025ba:	fb01 f303 	mul.w	r3, r1, r3
 80025be:	4413      	add	r3, r2
 80025c0:	3342      	adds	r3, #66	; 0x42
 80025c2:	2202      	movs	r2, #2
 80025c4:	701a      	strb	r2, [r3, #0]
      break;
 80025c6:	e00c      	b.n	80025e2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025c8:	78fb      	ldrb	r3, [r7, #3]
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	212c      	movs	r1, #44	; 0x2c
 80025ce:	fb01 f303 	mul.w	r3, r1, r3
 80025d2:	4413      	add	r3, r2
 80025d4:	3342      	adds	r3, #66	; 0x42
 80025d6:	2200      	movs	r2, #0
 80025d8:	701a      	strb	r2, [r3, #0]
      break;
 80025da:	e002      	b.n	80025e2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80025dc:	bf00      	nop
 80025de:	e000      	b.n	80025e2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80025e0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80025e2:	78fb      	ldrb	r3, [r7, #3]
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	212c      	movs	r1, #44	; 0x2c
 80025e8:	fb01 f303 	mul.w	r3, r1, r3
 80025ec:	4413      	add	r3, r2
 80025ee:	3344      	adds	r3, #68	; 0x44
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80025f4:	78fb      	ldrb	r3, [r7, #3]
 80025f6:	8b3a      	ldrh	r2, [r7, #24]
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	202c      	movs	r0, #44	; 0x2c
 80025fc:	fb00 f303 	mul.w	r3, r0, r3
 8002600:	440b      	add	r3, r1
 8002602:	334c      	adds	r3, #76	; 0x4c
 8002604:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002606:	78fb      	ldrb	r3, [r7, #3]
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	212c      	movs	r1, #44	; 0x2c
 800260c:	fb01 f303 	mul.w	r3, r1, r3
 8002610:	4413      	add	r3, r2
 8002612:	3360      	adds	r3, #96	; 0x60
 8002614:	2200      	movs	r2, #0
 8002616:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002618:	78fb      	ldrb	r3, [r7, #3]
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	212c      	movs	r1, #44	; 0x2c
 800261e:	fb01 f303 	mul.w	r3, r1, r3
 8002622:	4413      	add	r3, r2
 8002624:	3350      	adds	r3, #80	; 0x50
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800262a:	78fb      	ldrb	r3, [r7, #3]
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	212c      	movs	r1, #44	; 0x2c
 8002630:	fb01 f303 	mul.w	r3, r1, r3
 8002634:	4413      	add	r3, r2
 8002636:	3339      	adds	r3, #57	; 0x39
 8002638:	78fa      	ldrb	r2, [r7, #3]
 800263a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800263c:	78fb      	ldrb	r3, [r7, #3]
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	212c      	movs	r1, #44	; 0x2c
 8002642:	fb01 f303 	mul.w	r3, r1, r3
 8002646:	4413      	add	r3, r2
 8002648:	3361      	adds	r3, #97	; 0x61
 800264a:	2200      	movs	r2, #0
 800264c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6818      	ldr	r0, [r3, #0]
 8002652:	78fb      	ldrb	r3, [r7, #3]
 8002654:	222c      	movs	r2, #44	; 0x2c
 8002656:	fb02 f303 	mul.w	r3, r2, r3
 800265a:	3338      	adds	r3, #56	; 0x38
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	18d1      	adds	r1, r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	b2db      	uxtb	r3, r3
 8002666:	461a      	mov	r2, r3
 8002668:	f004 fb88 	bl	8006d7c <USB_HC_StartXfer>
 800266c:	4603      	mov	r3, r0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop

08002678 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f004 f889 	bl	80067a6 <USB_GetMode>
 8002694:	4603      	mov	r3, r0
 8002696:	2b01      	cmp	r3, #1
 8002698:	f040 80f6 	bne.w	8002888 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f004 f86d 	bl	8006780 <USB_ReadInterrupts>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 80ec 	beq.w	8002886 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f004 f864 	bl	8006780 <USB_ReadInterrupts>
 80026b8:	4603      	mov	r3, r0
 80026ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026c2:	d104      	bne.n	80026ce <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80026cc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f004 f854 	bl	8006780 <USB_ReadInterrupts>
 80026d8:	4603      	mov	r3, r0
 80026da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026e2:	d104      	bne.n	80026ee <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80026ec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f004 f844 	bl	8006780 <USB_ReadInterrupts>
 80026f8:	4603      	mov	r3, r0
 80026fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002702:	d104      	bne.n	800270e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800270c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f004 f834 	bl	8006780 <USB_ReadInterrupts>
 8002718:	4603      	mov	r3, r0
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b02      	cmp	r3, #2
 8002720:	d103      	bne.n	800272a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2202      	movs	r2, #2
 8002728:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f004 f826 	bl	8006780 <USB_ReadInterrupts>
 8002734:	4603      	mov	r3, r0
 8002736:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800273a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800273e:	d11c      	bne.n	800277a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002748:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10f      	bne.n	800277a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800275a:	2110      	movs	r1, #16
 800275c:	6938      	ldr	r0, [r7, #16]
 800275e:	f003 ff15 	bl	800658c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002762:	6938      	ldr	r0, [r7, #16]
 8002764:	f003 ff46 	bl	80065f4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2101      	movs	r1, #1
 800276e:	4618      	mov	r0, r3
 8002770:	f004 f91c 	bl	80069ac <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f00a f99b 	bl	800cab0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f003 fffe 	bl	8006780 <USB_ReadInterrupts>
 8002784:	4603      	mov	r3, r0
 8002786:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800278a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800278e:	d102      	bne.n	8002796 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f001 f89e 	bl	80038d2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f003 fff0 	bl	8006780 <USB_ReadInterrupts>
 80027a0:	4603      	mov	r3, r0
 80027a2:	f003 0308 	and.w	r3, r3, #8
 80027a6:	2b08      	cmp	r3, #8
 80027a8:	d106      	bne.n	80027b8 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f00a f964 	bl	800ca78 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2208      	movs	r2, #8
 80027b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4618      	mov	r0, r3
 80027be:	f003 ffdf 	bl	8006780 <USB_ReadInterrupts>
 80027c2:	4603      	mov	r3, r0
 80027c4:	f003 0310 	and.w	r3, r3, #16
 80027c8:	2b10      	cmp	r3, #16
 80027ca:	d101      	bne.n	80027d0 <HAL_HCD_IRQHandler+0x158>
 80027cc:	2301      	movs	r3, #1
 80027ce:	e000      	b.n	80027d2 <HAL_HCD_IRQHandler+0x15a>
 80027d0:	2300      	movs	r3, #0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d012      	beq.n	80027fc <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	699a      	ldr	r2, [r3, #24]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 0210 	bic.w	r2, r2, #16
 80027e4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 ffa1 	bl	800372e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	699a      	ldr	r2, [r3, #24]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f042 0210 	orr.w	r2, r2, #16
 80027fa:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4618      	mov	r0, r3
 8002802:	f003 ffbd 	bl	8006780 <USB_ReadInterrupts>
 8002806:	4603      	mov	r3, r0
 8002808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002810:	d13a      	bne.n	8002888 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f004 fbf2 	bl	8007000 <USB_HC_ReadInterrupt>
 800281c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800281e:	2300      	movs	r3, #0
 8002820:	617b      	str	r3, [r7, #20]
 8002822:	e025      	b.n	8002870 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	f003 030f 	and.w	r3, r3, #15
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	fa22 f303 	lsr.w	r3, r2, r3
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	2b00      	cmp	r3, #0
 8002836:	d018      	beq.n	800286a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	015a      	lsls	r2, r3, #5
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4413      	add	r3, r2
 8002840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800284a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800284e:	d106      	bne.n	800285e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	b2db      	uxtb	r3, r3
 8002854:	4619      	mov	r1, r3
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f8ab 	bl	80029b2 <HCD_HC_IN_IRQHandler>
 800285c:	e005      	b.n	800286a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	b2db      	uxtb	r3, r3
 8002862:	4619      	mov	r1, r3
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 fbf9 	bl	800305c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	3301      	adds	r3, #1
 800286e:	617b      	str	r3, [r7, #20]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	697a      	ldr	r2, [r7, #20]
 8002876:	429a      	cmp	r2, r3
 8002878:	d3d4      	bcc.n	8002824 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002882:	615a      	str	r2, [r3, #20]
 8002884:	e000      	b.n	8002888 <HAL_HCD_IRQHandler+0x210>
      return;
 8002886:	bf00      	nop
    }
  }
}
 8002888:	3718      	adds	r7, #24
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b082      	sub	sp, #8
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800289c:	2b01      	cmp	r3, #1
 800289e:	d101      	bne.n	80028a4 <HAL_HCD_Start+0x16>
 80028a0:	2302      	movs	r3, #2
 80028a2:	e013      	b.n	80028cc <HAL_HCD_Start+0x3e>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2101      	movs	r1, #1
 80028b2:	4618      	mov	r0, r3
 80028b4:	f004 f8de 	bl	8006a74 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4618      	mov	r0, r3
 80028be:	f003 fdf6 	bl	80064ae <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d101      	bne.n	80028ea <HAL_HCD_Stop+0x16>
 80028e6:	2302      	movs	r3, #2
 80028e8:	e00d      	b.n	8002906 <HAL_HCD_Stop+0x32>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f004 fccc 	bl	8007294 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b082      	sub	sp, #8
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f004 f880 	bl	8006a20 <USB_ResetPort>
 8002920:	4603      	mov	r3, r0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800292a:	b480      	push	{r7}
 800292c:	b083      	sub	sp, #12
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
 8002932:	460b      	mov	r3, r1
 8002934:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002936:	78fb      	ldrb	r3, [r7, #3]
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	212c      	movs	r1, #44	; 0x2c
 800293c:	fb01 f303 	mul.w	r3, r1, r3
 8002940:	4413      	add	r3, r2
 8002942:	3360      	adds	r3, #96	; 0x60
 8002944:	781b      	ldrb	r3, [r3, #0]
}
 8002946:	4618      	mov	r0, r3
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
 800295a:	460b      	mov	r3, r1
 800295c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800295e:	78fb      	ldrb	r3, [r7, #3]
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	212c      	movs	r1, #44	; 0x2c
 8002964:	fb01 f303 	mul.w	r3, r1, r3
 8002968:	4413      	add	r3, r2
 800296a:	3350      	adds	r3, #80	; 0x50
 800296c:	681b      	ldr	r3, [r3, #0]
}
 800296e:	4618      	mov	r0, r3
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b082      	sub	sp, #8
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	f004 f8c4 	bl	8006b14 <USB_GetCurrentFrame>
 800298c:	4603      	mov	r3, r0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b082      	sub	sp, #8
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f004 f89f 	bl	8006ae6 <USB_GetHostSpeed>
 80029a8:	4603      	mov	r3, r0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b086      	sub	sp, #24
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
 80029ba:	460b      	mov	r3, r1
 80029bc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80029c8:	78fb      	ldrb	r3, [r7, #3]
 80029ca:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	015a      	lsls	r2, r3, #5
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	4413      	add	r3, r2
 80029d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f003 0304 	and.w	r3, r3, #4
 80029de:	2b04      	cmp	r3, #4
 80029e0:	d11a      	bne.n	8002a18 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	015a      	lsls	r2, r3, #5
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	4413      	add	r3, r2
 80029ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ee:	461a      	mov	r2, r3
 80029f0:	2304      	movs	r3, #4
 80029f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	212c      	movs	r1, #44	; 0x2c
 80029fa:	fb01 f303 	mul.w	r3, r1, r3
 80029fe:	4413      	add	r3, r2
 8002a00:	3361      	adds	r3, #97	; 0x61
 8002a02:	2206      	movs	r2, #6
 8002a04:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	b2d2      	uxtb	r2, r2
 8002a0e:	4611      	mov	r1, r2
 8002a10:	4618      	mov	r0, r3
 8002a12:	f004 fb06 	bl	8007022 <USB_HC_Halt>
 8002a16:	e0af      	b.n	8002b78 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	015a      	lsls	r2, r3, #5
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	4413      	add	r3, r2
 8002a20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a2e:	d11b      	bne.n	8002a68 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	015a      	lsls	r2, r3, #5
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	4413      	add	r3, r2
 8002a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a42:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	212c      	movs	r1, #44	; 0x2c
 8002a4a:	fb01 f303 	mul.w	r3, r1, r3
 8002a4e:	4413      	add	r3, r2
 8002a50:	3361      	adds	r3, #97	; 0x61
 8002a52:	2207      	movs	r2, #7
 8002a54:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	b2d2      	uxtb	r2, r2
 8002a5e:	4611      	mov	r1, r2
 8002a60:	4618      	mov	r0, r3
 8002a62:	f004 fade 	bl	8007022 <USB_HC_Halt>
 8002a66:	e087      	b.n	8002b78 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	015a      	lsls	r2, r3, #5
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	4413      	add	r3, r2
 8002a70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 0320 	and.w	r3, r3, #32
 8002a7a:	2b20      	cmp	r3, #32
 8002a7c:	d109      	bne.n	8002a92 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	015a      	lsls	r2, r3, #5
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	4413      	add	r3, r2
 8002a86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	2320      	movs	r3, #32
 8002a8e:	6093      	str	r3, [r2, #8]
 8002a90:	e072      	b.n	8002b78 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	015a      	lsls	r2, r3, #5
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	4413      	add	r3, r2
 8002a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f003 0308 	and.w	r3, r3, #8
 8002aa4:	2b08      	cmp	r3, #8
 8002aa6:	d11a      	bne.n	8002ade <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	015a      	lsls	r2, r3, #5
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	4413      	add	r3, r2
 8002ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	2308      	movs	r3, #8
 8002ab8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	212c      	movs	r1, #44	; 0x2c
 8002ac0:	fb01 f303 	mul.w	r3, r1, r3
 8002ac4:	4413      	add	r3, r2
 8002ac6:	3361      	adds	r3, #97	; 0x61
 8002ac8:	2205      	movs	r2, #5
 8002aca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	4611      	mov	r1, r2
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f004 faa3 	bl	8007022 <USB_HC_Halt>
 8002adc:	e04c      	b.n	8002b78 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	015a      	lsls	r2, r3, #5
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002af4:	d11b      	bne.n	8002b2e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	015a      	lsls	r2, r3, #5
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	4413      	add	r3, r2
 8002afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b02:	461a      	mov	r2, r3
 8002b04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b08:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	212c      	movs	r1, #44	; 0x2c
 8002b10:	fb01 f303 	mul.w	r3, r1, r3
 8002b14:	4413      	add	r3, r2
 8002b16:	3361      	adds	r3, #97	; 0x61
 8002b18:	2208      	movs	r2, #8
 8002b1a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	4611      	mov	r1, r2
 8002b26:	4618      	mov	r0, r3
 8002b28:	f004 fa7b 	bl	8007022 <USB_HC_Halt>
 8002b2c:	e024      	b.n	8002b78 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	015a      	lsls	r2, r3, #5
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	4413      	add	r3, r2
 8002b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b40:	2b80      	cmp	r3, #128	; 0x80
 8002b42:	d119      	bne.n	8002b78 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	015a      	lsls	r2, r3, #5
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b50:	461a      	mov	r2, r3
 8002b52:	2380      	movs	r3, #128	; 0x80
 8002b54:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	212c      	movs	r1, #44	; 0x2c
 8002b5c:	fb01 f303 	mul.w	r3, r1, r3
 8002b60:	4413      	add	r3, r2
 8002b62:	3361      	adds	r3, #97	; 0x61
 8002b64:	2206      	movs	r2, #6
 8002b66:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	b2d2      	uxtb	r2, r2
 8002b70:	4611      	mov	r1, r2
 8002b72:	4618      	mov	r0, r3
 8002b74:	f004 fa55 	bl	8007022 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	015a      	lsls	r2, r3, #5
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	4413      	add	r3, r2
 8002b80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b8e:	d112      	bne.n	8002bb6 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	b2d2      	uxtb	r2, r2
 8002b98:	4611      	mov	r1, r2
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f004 fa41 	bl	8007022 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	015a      	lsls	r2, r3, #5
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bac:	461a      	mov	r2, r3
 8002bae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bb2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002bb4:	e24e      	b.n	8003054 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	015a      	lsls	r2, r3, #5
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	f040 80df 	bne.w	8002d8c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d019      	beq.n	8002c0a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	212c      	movs	r1, #44	; 0x2c
 8002bdc:	fb01 f303 	mul.w	r3, r1, r3
 8002be0:	4413      	add	r3, r2
 8002be2:	3348      	adds	r3, #72	; 0x48
 8002be4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	0159      	lsls	r1, r3, #5
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	440b      	add	r3, r1
 8002bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002bf8:	1ad2      	subs	r2, r2, r3
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	202c      	movs	r0, #44	; 0x2c
 8002c00:	fb00 f303 	mul.w	r3, r0, r3
 8002c04:	440b      	add	r3, r1
 8002c06:	3350      	adds	r3, #80	; 0x50
 8002c08:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	212c      	movs	r1, #44	; 0x2c
 8002c10:	fb01 f303 	mul.w	r3, r1, r3
 8002c14:	4413      	add	r3, r2
 8002c16:	3361      	adds	r3, #97	; 0x61
 8002c18:	2201      	movs	r2, #1
 8002c1a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	212c      	movs	r1, #44	; 0x2c
 8002c22:	fb01 f303 	mul.w	r3, r1, r3
 8002c26:	4413      	add	r3, r2
 8002c28:	335c      	adds	r3, #92	; 0x5c
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	015a      	lsls	r2, r3, #5
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	4413      	add	r3, r2
 8002c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	212c      	movs	r1, #44	; 0x2c
 8002c46:	fb01 f303 	mul.w	r3, r1, r3
 8002c4a:	4413      	add	r3, r2
 8002c4c:	333f      	adds	r3, #63	; 0x3f
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d009      	beq.n	8002c68 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	212c      	movs	r1, #44	; 0x2c
 8002c5a:	fb01 f303 	mul.w	r3, r1, r3
 8002c5e:	4413      	add	r3, r2
 8002c60:	333f      	adds	r3, #63	; 0x3f
 8002c62:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d111      	bne.n	8002c8c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	b2d2      	uxtb	r2, r2
 8002c70:	4611      	mov	r1, r2
 8002c72:	4618      	mov	r0, r3
 8002c74:	f004 f9d5 	bl	8007022 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	015a      	lsls	r2, r3, #5
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	4413      	add	r3, r2
 8002c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c84:	461a      	mov	r2, r3
 8002c86:	2310      	movs	r3, #16
 8002c88:	6093      	str	r3, [r2, #8]
 8002c8a:	e03a      	b.n	8002d02 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	212c      	movs	r1, #44	; 0x2c
 8002c92:	fb01 f303 	mul.w	r3, r1, r3
 8002c96:	4413      	add	r3, r2
 8002c98:	333f      	adds	r3, #63	; 0x3f
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2b03      	cmp	r3, #3
 8002c9e:	d009      	beq.n	8002cb4 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	212c      	movs	r1, #44	; 0x2c
 8002ca6:	fb01 f303 	mul.w	r3, r1, r3
 8002caa:	4413      	add	r3, r2
 8002cac:	333f      	adds	r3, #63	; 0x3f
 8002cae:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d126      	bne.n	8002d02 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	015a      	lsls	r2, r3, #5
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	4413      	add	r3, r2
 8002cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	0151      	lsls	r1, r2, #5
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	440a      	add	r2, r1
 8002cca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002cd2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	212c      	movs	r1, #44	; 0x2c
 8002cda:	fb01 f303 	mul.w	r3, r1, r3
 8002cde:	4413      	add	r3, r2
 8002ce0:	3360      	adds	r3, #96	; 0x60
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	b2d9      	uxtb	r1, r3
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	202c      	movs	r0, #44	; 0x2c
 8002cf0:	fb00 f303 	mul.w	r3, r0, r3
 8002cf4:	4413      	add	r3, r2
 8002cf6:	3360      	adds	r3, #96	; 0x60
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f009 fee5 	bl	800cacc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d12b      	bne.n	8002d62 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	212c      	movs	r1, #44	; 0x2c
 8002d10:	fb01 f303 	mul.w	r3, r1, r3
 8002d14:	4413      	add	r3, r2
 8002d16:	3348      	adds	r3, #72	; 0x48
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	202c      	movs	r0, #44	; 0x2c
 8002d20:	fb00 f202 	mul.w	r2, r0, r2
 8002d24:	440a      	add	r2, r1
 8002d26:	3240      	adds	r2, #64	; 0x40
 8002d28:	8812      	ldrh	r2, [r2, #0]
 8002d2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f000 818e 	beq.w	8003054 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	212c      	movs	r1, #44	; 0x2c
 8002d3e:	fb01 f303 	mul.w	r3, r1, r3
 8002d42:	4413      	add	r3, r2
 8002d44:	3354      	adds	r3, #84	; 0x54
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	f083 0301 	eor.w	r3, r3, #1
 8002d4c:	b2d8      	uxtb	r0, r3
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	212c      	movs	r1, #44	; 0x2c
 8002d54:	fb01 f303 	mul.w	r3, r1, r3
 8002d58:	4413      	add	r3, r2
 8002d5a:	3354      	adds	r3, #84	; 0x54
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	701a      	strb	r2, [r3, #0]
}
 8002d60:	e178      	b.n	8003054 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	212c      	movs	r1, #44	; 0x2c
 8002d68:	fb01 f303 	mul.w	r3, r1, r3
 8002d6c:	4413      	add	r3, r2
 8002d6e:	3354      	adds	r3, #84	; 0x54
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	f083 0301 	eor.w	r3, r3, #1
 8002d76:	b2d8      	uxtb	r0, r3
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	212c      	movs	r1, #44	; 0x2c
 8002d7e:	fb01 f303 	mul.w	r3, r1, r3
 8002d82:	4413      	add	r3, r2
 8002d84:	3354      	adds	r3, #84	; 0x54
 8002d86:	4602      	mov	r2, r0
 8002d88:	701a      	strb	r2, [r3, #0]
}
 8002d8a:	e163      	b.n	8003054 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	015a      	lsls	r2, r3, #5
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	4413      	add	r3, r2
 8002d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	f040 80f6 	bne.w	8002f90 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	212c      	movs	r1, #44	; 0x2c
 8002daa:	fb01 f303 	mul.w	r3, r1, r3
 8002dae:	4413      	add	r3, r2
 8002db0:	3361      	adds	r3, #97	; 0x61
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d109      	bne.n	8002dcc <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	212c      	movs	r1, #44	; 0x2c
 8002dbe:	fb01 f303 	mul.w	r3, r1, r3
 8002dc2:	4413      	add	r3, r2
 8002dc4:	3360      	adds	r3, #96	; 0x60
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	701a      	strb	r2, [r3, #0]
 8002dca:	e0c9      	b.n	8002f60 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	212c      	movs	r1, #44	; 0x2c
 8002dd2:	fb01 f303 	mul.w	r3, r1, r3
 8002dd6:	4413      	add	r3, r2
 8002dd8:	3361      	adds	r3, #97	; 0x61
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	2b05      	cmp	r3, #5
 8002dde:	d109      	bne.n	8002df4 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	212c      	movs	r1, #44	; 0x2c
 8002de6:	fb01 f303 	mul.w	r3, r1, r3
 8002dea:	4413      	add	r3, r2
 8002dec:	3360      	adds	r3, #96	; 0x60
 8002dee:	2205      	movs	r2, #5
 8002df0:	701a      	strb	r2, [r3, #0]
 8002df2:	e0b5      	b.n	8002f60 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	212c      	movs	r1, #44	; 0x2c
 8002dfa:	fb01 f303 	mul.w	r3, r1, r3
 8002dfe:	4413      	add	r3, r2
 8002e00:	3361      	adds	r3, #97	; 0x61
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b06      	cmp	r3, #6
 8002e06:	d009      	beq.n	8002e1c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	212c      	movs	r1, #44	; 0x2c
 8002e0e:	fb01 f303 	mul.w	r3, r1, r3
 8002e12:	4413      	add	r3, r2
 8002e14:	3361      	adds	r3, #97	; 0x61
 8002e16:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e18:	2b08      	cmp	r3, #8
 8002e1a:	d150      	bne.n	8002ebe <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	212c      	movs	r1, #44	; 0x2c
 8002e22:	fb01 f303 	mul.w	r3, r1, r3
 8002e26:	4413      	add	r3, r2
 8002e28:	335c      	adds	r3, #92	; 0x5c
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	1c5a      	adds	r2, r3, #1
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	202c      	movs	r0, #44	; 0x2c
 8002e34:	fb00 f303 	mul.w	r3, r0, r3
 8002e38:	440b      	add	r3, r1
 8002e3a:	335c      	adds	r3, #92	; 0x5c
 8002e3c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	212c      	movs	r1, #44	; 0x2c
 8002e44:	fb01 f303 	mul.w	r3, r1, r3
 8002e48:	4413      	add	r3, r2
 8002e4a:	335c      	adds	r3, #92	; 0x5c
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d912      	bls.n	8002e78 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	212c      	movs	r1, #44	; 0x2c
 8002e58:	fb01 f303 	mul.w	r3, r1, r3
 8002e5c:	4413      	add	r3, r2
 8002e5e:	335c      	adds	r3, #92	; 0x5c
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	212c      	movs	r1, #44	; 0x2c
 8002e6a:	fb01 f303 	mul.w	r3, r1, r3
 8002e6e:	4413      	add	r3, r2
 8002e70:	3360      	adds	r3, #96	; 0x60
 8002e72:	2204      	movs	r2, #4
 8002e74:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e76:	e073      	b.n	8002f60 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	212c      	movs	r1, #44	; 0x2c
 8002e7e:	fb01 f303 	mul.w	r3, r1, r3
 8002e82:	4413      	add	r3, r2
 8002e84:	3360      	adds	r3, #96	; 0x60
 8002e86:	2202      	movs	r2, #2
 8002e88:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	015a      	lsls	r2, r3, #5
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	4413      	add	r3, r2
 8002e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ea0:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ea8:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	015a      	lsls	r2, r3, #5
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ebc:	e050      	b.n	8002f60 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	212c      	movs	r1, #44	; 0x2c
 8002ec4:	fb01 f303 	mul.w	r3, r1, r3
 8002ec8:	4413      	add	r3, r2
 8002eca:	3361      	adds	r3, #97	; 0x61
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	2b03      	cmp	r3, #3
 8002ed0:	d122      	bne.n	8002f18 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	212c      	movs	r1, #44	; 0x2c
 8002ed8:	fb01 f303 	mul.w	r3, r1, r3
 8002edc:	4413      	add	r3, r2
 8002ede:	3360      	adds	r3, #96	; 0x60
 8002ee0:	2202      	movs	r2, #2
 8002ee2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	015a      	lsls	r2, r3, #5
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	4413      	add	r3, r2
 8002eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002efa:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f02:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	015a      	lsls	r2, r3, #5
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f10:	461a      	mov	r2, r3
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	6013      	str	r3, [r2, #0]
 8002f16:	e023      	b.n	8002f60 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	212c      	movs	r1, #44	; 0x2c
 8002f1e:	fb01 f303 	mul.w	r3, r1, r3
 8002f22:	4413      	add	r3, r2
 8002f24:	3361      	adds	r3, #97	; 0x61
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	2b07      	cmp	r3, #7
 8002f2a:	d119      	bne.n	8002f60 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	212c      	movs	r1, #44	; 0x2c
 8002f32:	fb01 f303 	mul.w	r3, r1, r3
 8002f36:	4413      	add	r3, r2
 8002f38:	335c      	adds	r3, #92	; 0x5c
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	1c5a      	adds	r2, r3, #1
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	202c      	movs	r0, #44	; 0x2c
 8002f44:	fb00 f303 	mul.w	r3, r0, r3
 8002f48:	440b      	add	r3, r1
 8002f4a:	335c      	adds	r3, #92	; 0x5c
 8002f4c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	212c      	movs	r1, #44	; 0x2c
 8002f54:	fb01 f303 	mul.w	r3, r1, r3
 8002f58:	4413      	add	r3, r2
 8002f5a:	3360      	adds	r3, #96	; 0x60
 8002f5c:	2204      	movs	r2, #4
 8002f5e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	015a      	lsls	r2, r3, #5
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	4413      	add	r3, r2
 8002f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	2302      	movs	r3, #2
 8002f70:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	b2d9      	uxtb	r1, r3
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	202c      	movs	r0, #44	; 0x2c
 8002f7c:	fb00 f303 	mul.w	r3, r0, r3
 8002f80:	4413      	add	r3, r2
 8002f82:	3360      	adds	r3, #96	; 0x60
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	461a      	mov	r2, r3
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f009 fd9f 	bl	800cacc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002f8e:	e061      	b.n	8003054 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	015a      	lsls	r2, r3, #5
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	4413      	add	r3, r2
 8002f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f003 0310 	and.w	r3, r3, #16
 8002fa2:	2b10      	cmp	r3, #16
 8002fa4:	d156      	bne.n	8003054 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	212c      	movs	r1, #44	; 0x2c
 8002fac:	fb01 f303 	mul.w	r3, r1, r3
 8002fb0:	4413      	add	r3, r2
 8002fb2:	333f      	adds	r3, #63	; 0x3f
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	2b03      	cmp	r3, #3
 8002fb8:	d111      	bne.n	8002fde <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	212c      	movs	r1, #44	; 0x2c
 8002fc0:	fb01 f303 	mul.w	r3, r1, r3
 8002fc4:	4413      	add	r3, r2
 8002fc6:	335c      	adds	r3, #92	; 0x5c
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	b2d2      	uxtb	r2, r2
 8002fd4:	4611      	mov	r1, r2
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f004 f823 	bl	8007022 <USB_HC_Halt>
 8002fdc:	e031      	b.n	8003042 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	212c      	movs	r1, #44	; 0x2c
 8002fe4:	fb01 f303 	mul.w	r3, r1, r3
 8002fe8:	4413      	add	r3, r2
 8002fea:	333f      	adds	r3, #63	; 0x3f
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d009      	beq.n	8003006 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	212c      	movs	r1, #44	; 0x2c
 8002ff8:	fb01 f303 	mul.w	r3, r1, r3
 8002ffc:	4413      	add	r3, r2
 8002ffe:	333f      	adds	r3, #63	; 0x3f
 8003000:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003002:	2b02      	cmp	r3, #2
 8003004:	d11d      	bne.n	8003042 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	212c      	movs	r1, #44	; 0x2c
 800300c:	fb01 f303 	mul.w	r3, r1, r3
 8003010:	4413      	add	r3, r2
 8003012:	335c      	adds	r3, #92	; 0x5c
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d110      	bne.n	8003042 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	212c      	movs	r1, #44	; 0x2c
 8003026:	fb01 f303 	mul.w	r3, r1, r3
 800302a:	4413      	add	r3, r2
 800302c:	3361      	adds	r3, #97	; 0x61
 800302e:	2203      	movs	r2, #3
 8003030:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	b2d2      	uxtb	r2, r2
 800303a:	4611      	mov	r1, r2
 800303c:	4618      	mov	r0, r3
 800303e:	f003 fff0 	bl	8007022 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	015a      	lsls	r2, r3, #5
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	4413      	add	r3, r2
 800304a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800304e:	461a      	mov	r2, r3
 8003050:	2310      	movs	r3, #16
 8003052:	6093      	str	r3, [r2, #8]
}
 8003054:	bf00      	nop
 8003056:	3718      	adds	r7, #24
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b088      	sub	sp, #32
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	460b      	mov	r3, r1
 8003066:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003072:	78fb      	ldrb	r3, [r7, #3]
 8003074:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	015a      	lsls	r2, r3, #5
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	4413      	add	r3, r2
 800307e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f003 0304 	and.w	r3, r3, #4
 8003088:	2b04      	cmp	r3, #4
 800308a:	d11a      	bne.n	80030c2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	015a      	lsls	r2, r3, #5
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	4413      	add	r3, r2
 8003094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003098:	461a      	mov	r2, r3
 800309a:	2304      	movs	r3, #4
 800309c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	212c      	movs	r1, #44	; 0x2c
 80030a4:	fb01 f303 	mul.w	r3, r1, r3
 80030a8:	4413      	add	r3, r2
 80030aa:	3361      	adds	r3, #97	; 0x61
 80030ac:	2206      	movs	r2, #6
 80030ae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	697a      	ldr	r2, [r7, #20]
 80030b6:	b2d2      	uxtb	r2, r2
 80030b8:	4611      	mov	r1, r2
 80030ba:	4618      	mov	r0, r3
 80030bc:	f003 ffb1 	bl	8007022 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80030c0:	e331      	b.n	8003726 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	015a      	lsls	r2, r3, #5
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	4413      	add	r3, r2
 80030ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f003 0320 	and.w	r3, r3, #32
 80030d4:	2b20      	cmp	r3, #32
 80030d6:	d12e      	bne.n	8003136 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	015a      	lsls	r2, r3, #5
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	4413      	add	r3, r2
 80030e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e4:	461a      	mov	r2, r3
 80030e6:	2320      	movs	r3, #32
 80030e8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	212c      	movs	r1, #44	; 0x2c
 80030f0:	fb01 f303 	mul.w	r3, r1, r3
 80030f4:	4413      	add	r3, r2
 80030f6:	333d      	adds	r3, #61	; 0x3d
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	f040 8313 	bne.w	8003726 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	212c      	movs	r1, #44	; 0x2c
 8003106:	fb01 f303 	mul.w	r3, r1, r3
 800310a:	4413      	add	r3, r2
 800310c:	333d      	adds	r3, #61	; 0x3d
 800310e:	2200      	movs	r2, #0
 8003110:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	212c      	movs	r1, #44	; 0x2c
 8003118:	fb01 f303 	mul.w	r3, r1, r3
 800311c:	4413      	add	r3, r2
 800311e:	3360      	adds	r3, #96	; 0x60
 8003120:	2202      	movs	r2, #2
 8003122:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	b2d2      	uxtb	r2, r2
 800312c:	4611      	mov	r1, r2
 800312e:	4618      	mov	r0, r3
 8003130:	f003 ff77 	bl	8007022 <USB_HC_Halt>
}
 8003134:	e2f7      	b.n	8003726 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	015a      	lsls	r2, r3, #5
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	4413      	add	r3, r2
 800313e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003148:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800314c:	d112      	bne.n	8003174 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	015a      	lsls	r2, r3, #5
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	4413      	add	r3, r2
 8003156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800315a:	461a      	mov	r2, r3
 800315c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003160:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	b2d2      	uxtb	r2, r2
 800316a:	4611      	mov	r1, r2
 800316c:	4618      	mov	r0, r3
 800316e:	f003 ff58 	bl	8007022 <USB_HC_Halt>
}
 8003172:	e2d8      	b.n	8003726 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	015a      	lsls	r2, r3, #5
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	4413      	add	r3, r2
 800317c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	2b01      	cmp	r3, #1
 8003188:	d140      	bne.n	800320c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	212c      	movs	r1, #44	; 0x2c
 8003190:	fb01 f303 	mul.w	r3, r1, r3
 8003194:	4413      	add	r3, r2
 8003196:	335c      	adds	r3, #92	; 0x5c
 8003198:	2200      	movs	r2, #0
 800319a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	015a      	lsls	r2, r3, #5
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	4413      	add	r3, r2
 80031a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ae:	2b40      	cmp	r3, #64	; 0x40
 80031b0:	d111      	bne.n	80031d6 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	212c      	movs	r1, #44	; 0x2c
 80031b8:	fb01 f303 	mul.w	r3, r1, r3
 80031bc:	4413      	add	r3, r2
 80031be:	333d      	adds	r3, #61	; 0x3d
 80031c0:	2201      	movs	r2, #1
 80031c2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	015a      	lsls	r2, r3, #5
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	4413      	add	r3, r2
 80031cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031d0:	461a      	mov	r2, r3
 80031d2:	2340      	movs	r3, #64	; 0x40
 80031d4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	015a      	lsls	r2, r3, #5
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	4413      	add	r3, r2
 80031de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e2:	461a      	mov	r2, r3
 80031e4:	2301      	movs	r3, #1
 80031e6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	212c      	movs	r1, #44	; 0x2c
 80031ee:	fb01 f303 	mul.w	r3, r1, r3
 80031f2:	4413      	add	r3, r2
 80031f4:	3361      	adds	r3, #97	; 0x61
 80031f6:	2201      	movs	r2, #1
 80031f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	b2d2      	uxtb	r2, r2
 8003202:	4611      	mov	r1, r2
 8003204:	4618      	mov	r0, r3
 8003206:	f003 ff0c 	bl	8007022 <USB_HC_Halt>
}
 800320a:	e28c      	b.n	8003726 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	015a      	lsls	r2, r3, #5
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	4413      	add	r3, r2
 8003214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800321e:	2b40      	cmp	r3, #64	; 0x40
 8003220:	d12c      	bne.n	800327c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	212c      	movs	r1, #44	; 0x2c
 8003228:	fb01 f303 	mul.w	r3, r1, r3
 800322c:	4413      	add	r3, r2
 800322e:	3361      	adds	r3, #97	; 0x61
 8003230:	2204      	movs	r2, #4
 8003232:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	212c      	movs	r1, #44	; 0x2c
 800323a:	fb01 f303 	mul.w	r3, r1, r3
 800323e:	4413      	add	r3, r2
 8003240:	333d      	adds	r3, #61	; 0x3d
 8003242:	2201      	movs	r2, #1
 8003244:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	212c      	movs	r1, #44	; 0x2c
 800324c:	fb01 f303 	mul.w	r3, r1, r3
 8003250:	4413      	add	r3, r2
 8003252:	335c      	adds	r3, #92	; 0x5c
 8003254:	2200      	movs	r2, #0
 8003256:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	b2d2      	uxtb	r2, r2
 8003260:	4611      	mov	r1, r2
 8003262:	4618      	mov	r0, r3
 8003264:	f003 fedd 	bl	8007022 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	015a      	lsls	r2, r3, #5
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	4413      	add	r3, r2
 8003270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003274:	461a      	mov	r2, r3
 8003276:	2340      	movs	r3, #64	; 0x40
 8003278:	6093      	str	r3, [r2, #8]
}
 800327a:	e254      	b.n	8003726 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	015a      	lsls	r2, r3, #5
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	4413      	add	r3, r2
 8003284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 0308 	and.w	r3, r3, #8
 800328e:	2b08      	cmp	r3, #8
 8003290:	d11a      	bne.n	80032c8 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	015a      	lsls	r2, r3, #5
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	4413      	add	r3, r2
 800329a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800329e:	461a      	mov	r2, r3
 80032a0:	2308      	movs	r3, #8
 80032a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	212c      	movs	r1, #44	; 0x2c
 80032aa:	fb01 f303 	mul.w	r3, r1, r3
 80032ae:	4413      	add	r3, r2
 80032b0:	3361      	adds	r3, #97	; 0x61
 80032b2:	2205      	movs	r2, #5
 80032b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	b2d2      	uxtb	r2, r2
 80032be:	4611      	mov	r1, r2
 80032c0:	4618      	mov	r0, r3
 80032c2:	f003 feae 	bl	8007022 <USB_HC_Halt>
}
 80032c6:	e22e      	b.n	8003726 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	015a      	lsls	r2, r3, #5
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	4413      	add	r3, r2
 80032d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f003 0310 	and.w	r3, r3, #16
 80032da:	2b10      	cmp	r3, #16
 80032dc:	d140      	bne.n	8003360 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	212c      	movs	r1, #44	; 0x2c
 80032e4:	fb01 f303 	mul.w	r3, r1, r3
 80032e8:	4413      	add	r3, r2
 80032ea:	335c      	adds	r3, #92	; 0x5c
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	212c      	movs	r1, #44	; 0x2c
 80032f6:	fb01 f303 	mul.w	r3, r1, r3
 80032fa:	4413      	add	r3, r2
 80032fc:	3361      	adds	r3, #97	; 0x61
 80032fe:	2203      	movs	r2, #3
 8003300:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	212c      	movs	r1, #44	; 0x2c
 8003308:	fb01 f303 	mul.w	r3, r1, r3
 800330c:	4413      	add	r3, r2
 800330e:	333d      	adds	r3, #61	; 0x3d
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d112      	bne.n	800333c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	212c      	movs	r1, #44	; 0x2c
 800331c:	fb01 f303 	mul.w	r3, r1, r3
 8003320:	4413      	add	r3, r2
 8003322:	333c      	adds	r3, #60	; 0x3c
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d108      	bne.n	800333c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	212c      	movs	r1, #44	; 0x2c
 8003330:	fb01 f303 	mul.w	r3, r1, r3
 8003334:	4413      	add	r3, r2
 8003336:	333d      	adds	r3, #61	; 0x3d
 8003338:	2201      	movs	r2, #1
 800333a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	b2d2      	uxtb	r2, r2
 8003344:	4611      	mov	r1, r2
 8003346:	4618      	mov	r0, r3
 8003348:	f003 fe6b 	bl	8007022 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	015a      	lsls	r2, r3, #5
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	4413      	add	r3, r2
 8003354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003358:	461a      	mov	r2, r3
 800335a:	2310      	movs	r3, #16
 800335c:	6093      	str	r3, [r2, #8]
}
 800335e:	e1e2      	b.n	8003726 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	015a      	lsls	r2, r3, #5
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	4413      	add	r3, r2
 8003368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003372:	2b80      	cmp	r3, #128	; 0x80
 8003374:	d164      	bne.n	8003440 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d111      	bne.n	80033a2 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	212c      	movs	r1, #44	; 0x2c
 8003384:	fb01 f303 	mul.w	r3, r1, r3
 8003388:	4413      	add	r3, r2
 800338a:	3361      	adds	r3, #97	; 0x61
 800338c:	2206      	movs	r2, #6
 800338e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	697a      	ldr	r2, [r7, #20]
 8003396:	b2d2      	uxtb	r2, r2
 8003398:	4611      	mov	r1, r2
 800339a:	4618      	mov	r0, r3
 800339c:	f003 fe41 	bl	8007022 <USB_HC_Halt>
 80033a0:	e044      	b.n	800342c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	212c      	movs	r1, #44	; 0x2c
 80033a8:	fb01 f303 	mul.w	r3, r1, r3
 80033ac:	4413      	add	r3, r2
 80033ae:	335c      	adds	r3, #92	; 0x5c
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	1c5a      	adds	r2, r3, #1
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	202c      	movs	r0, #44	; 0x2c
 80033ba:	fb00 f303 	mul.w	r3, r0, r3
 80033be:	440b      	add	r3, r1
 80033c0:	335c      	adds	r3, #92	; 0x5c
 80033c2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	212c      	movs	r1, #44	; 0x2c
 80033ca:	fb01 f303 	mul.w	r3, r1, r3
 80033ce:	4413      	add	r3, r2
 80033d0:	335c      	adds	r3, #92	; 0x5c
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d920      	bls.n	800341a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	212c      	movs	r1, #44	; 0x2c
 80033de:	fb01 f303 	mul.w	r3, r1, r3
 80033e2:	4413      	add	r3, r2
 80033e4:	335c      	adds	r3, #92	; 0x5c
 80033e6:	2200      	movs	r2, #0
 80033e8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	212c      	movs	r1, #44	; 0x2c
 80033f0:	fb01 f303 	mul.w	r3, r1, r3
 80033f4:	4413      	add	r3, r2
 80033f6:	3360      	adds	r3, #96	; 0x60
 80033f8:	2204      	movs	r2, #4
 80033fa:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	b2d9      	uxtb	r1, r3
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	202c      	movs	r0, #44	; 0x2c
 8003406:	fb00 f303 	mul.w	r3, r0, r3
 800340a:	4413      	add	r3, r2
 800340c:	3360      	adds	r3, #96	; 0x60
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	461a      	mov	r2, r3
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f009 fb5a 	bl	800cacc <HAL_HCD_HC_NotifyURBChange_Callback>
 8003418:	e008      	b.n	800342c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	212c      	movs	r1, #44	; 0x2c
 8003420:	fb01 f303 	mul.w	r3, r1, r3
 8003424:	4413      	add	r3, r2
 8003426:	3360      	adds	r3, #96	; 0x60
 8003428:	2202      	movs	r2, #2
 800342a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	015a      	lsls	r2, r3, #5
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	4413      	add	r3, r2
 8003434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003438:	461a      	mov	r2, r3
 800343a:	2380      	movs	r3, #128	; 0x80
 800343c:	6093      	str	r3, [r2, #8]
}
 800343e:	e172      	b.n	8003726 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	015a      	lsls	r2, r3, #5
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	4413      	add	r3, r2
 8003448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003452:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003456:	d11b      	bne.n	8003490 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	212c      	movs	r1, #44	; 0x2c
 800345e:	fb01 f303 	mul.w	r3, r1, r3
 8003462:	4413      	add	r3, r2
 8003464:	3361      	adds	r3, #97	; 0x61
 8003466:	2208      	movs	r2, #8
 8003468:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	b2d2      	uxtb	r2, r2
 8003472:	4611      	mov	r1, r2
 8003474:	4618      	mov	r0, r3
 8003476:	f003 fdd4 	bl	8007022 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	015a      	lsls	r2, r3, #5
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	4413      	add	r3, r2
 8003482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003486:	461a      	mov	r2, r3
 8003488:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800348c:	6093      	str	r3, [r2, #8]
}
 800348e:	e14a      	b.n	8003726 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	015a      	lsls	r2, r3, #5
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	4413      	add	r3, r2
 8003498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	f040 813f 	bne.w	8003726 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	212c      	movs	r1, #44	; 0x2c
 80034ae:	fb01 f303 	mul.w	r3, r1, r3
 80034b2:	4413      	add	r3, r2
 80034b4:	3361      	adds	r3, #97	; 0x61
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d17d      	bne.n	80035b8 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	212c      	movs	r1, #44	; 0x2c
 80034c2:	fb01 f303 	mul.w	r3, r1, r3
 80034c6:	4413      	add	r3, r2
 80034c8:	3360      	adds	r3, #96	; 0x60
 80034ca:	2201      	movs	r2, #1
 80034cc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	212c      	movs	r1, #44	; 0x2c
 80034d4:	fb01 f303 	mul.w	r3, r1, r3
 80034d8:	4413      	add	r3, r2
 80034da:	333f      	adds	r3, #63	; 0x3f
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d00a      	beq.n	80034f8 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	212c      	movs	r1, #44	; 0x2c
 80034e8:	fb01 f303 	mul.w	r3, r1, r3
 80034ec:	4413      	add	r3, r2
 80034ee:	333f      	adds	r3, #63	; 0x3f
 80034f0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80034f2:	2b03      	cmp	r3, #3
 80034f4:	f040 8100 	bne.w	80036f8 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d113      	bne.n	8003528 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	212c      	movs	r1, #44	; 0x2c
 8003506:	fb01 f303 	mul.w	r3, r1, r3
 800350a:	4413      	add	r3, r2
 800350c:	3355      	adds	r3, #85	; 0x55
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	f083 0301 	eor.w	r3, r3, #1
 8003514:	b2d8      	uxtb	r0, r3
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	212c      	movs	r1, #44	; 0x2c
 800351c:	fb01 f303 	mul.w	r3, r1, r3
 8003520:	4413      	add	r3, r2
 8003522:	3355      	adds	r3, #85	; 0x55
 8003524:	4602      	mov	r2, r0
 8003526:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	2b01      	cmp	r3, #1
 800352e:	f040 80e3 	bne.w	80036f8 <HCD_HC_OUT_IRQHandler+0x69c>
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	212c      	movs	r1, #44	; 0x2c
 8003538:	fb01 f303 	mul.w	r3, r1, r3
 800353c:	4413      	add	r3, r2
 800353e:	334c      	adds	r3, #76	; 0x4c
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	f000 80d8 	beq.w	80036f8 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	212c      	movs	r1, #44	; 0x2c
 800354e:	fb01 f303 	mul.w	r3, r1, r3
 8003552:	4413      	add	r3, r2
 8003554:	334c      	adds	r3, #76	; 0x4c
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	6879      	ldr	r1, [r7, #4]
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	202c      	movs	r0, #44	; 0x2c
 800355e:	fb00 f202 	mul.w	r2, r0, r2
 8003562:	440a      	add	r2, r1
 8003564:	3240      	adds	r2, #64	; 0x40
 8003566:	8812      	ldrh	r2, [r2, #0]
 8003568:	4413      	add	r3, r2
 800356a:	3b01      	subs	r3, #1
 800356c:	6879      	ldr	r1, [r7, #4]
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	202c      	movs	r0, #44	; 0x2c
 8003572:	fb00 f202 	mul.w	r2, r0, r2
 8003576:	440a      	add	r2, r1
 8003578:	3240      	adds	r2, #64	; 0x40
 800357a:	8812      	ldrh	r2, [r2, #0]
 800357c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003580:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 80b5 	beq.w	80036f8 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	212c      	movs	r1, #44	; 0x2c
 8003594:	fb01 f303 	mul.w	r3, r1, r3
 8003598:	4413      	add	r3, r2
 800359a:	3355      	adds	r3, #85	; 0x55
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	f083 0301 	eor.w	r3, r3, #1
 80035a2:	b2d8      	uxtb	r0, r3
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	212c      	movs	r1, #44	; 0x2c
 80035aa:	fb01 f303 	mul.w	r3, r1, r3
 80035ae:	4413      	add	r3, r2
 80035b0:	3355      	adds	r3, #85	; 0x55
 80035b2:	4602      	mov	r2, r0
 80035b4:	701a      	strb	r2, [r3, #0]
 80035b6:	e09f      	b.n	80036f8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	212c      	movs	r1, #44	; 0x2c
 80035be:	fb01 f303 	mul.w	r3, r1, r3
 80035c2:	4413      	add	r3, r2
 80035c4:	3361      	adds	r3, #97	; 0x61
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	2b03      	cmp	r3, #3
 80035ca:	d109      	bne.n	80035e0 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	212c      	movs	r1, #44	; 0x2c
 80035d2:	fb01 f303 	mul.w	r3, r1, r3
 80035d6:	4413      	add	r3, r2
 80035d8:	3360      	adds	r3, #96	; 0x60
 80035da:	2202      	movs	r2, #2
 80035dc:	701a      	strb	r2, [r3, #0]
 80035de:	e08b      	b.n	80036f8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	212c      	movs	r1, #44	; 0x2c
 80035e6:	fb01 f303 	mul.w	r3, r1, r3
 80035ea:	4413      	add	r3, r2
 80035ec:	3361      	adds	r3, #97	; 0x61
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	2b04      	cmp	r3, #4
 80035f2:	d109      	bne.n	8003608 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	212c      	movs	r1, #44	; 0x2c
 80035fa:	fb01 f303 	mul.w	r3, r1, r3
 80035fe:	4413      	add	r3, r2
 8003600:	3360      	adds	r3, #96	; 0x60
 8003602:	2202      	movs	r2, #2
 8003604:	701a      	strb	r2, [r3, #0]
 8003606:	e077      	b.n	80036f8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	212c      	movs	r1, #44	; 0x2c
 800360e:	fb01 f303 	mul.w	r3, r1, r3
 8003612:	4413      	add	r3, r2
 8003614:	3361      	adds	r3, #97	; 0x61
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	2b05      	cmp	r3, #5
 800361a:	d109      	bne.n	8003630 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	212c      	movs	r1, #44	; 0x2c
 8003622:	fb01 f303 	mul.w	r3, r1, r3
 8003626:	4413      	add	r3, r2
 8003628:	3360      	adds	r3, #96	; 0x60
 800362a:	2205      	movs	r2, #5
 800362c:	701a      	strb	r2, [r3, #0]
 800362e:	e063      	b.n	80036f8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	212c      	movs	r1, #44	; 0x2c
 8003636:	fb01 f303 	mul.w	r3, r1, r3
 800363a:	4413      	add	r3, r2
 800363c:	3361      	adds	r3, #97	; 0x61
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	2b06      	cmp	r3, #6
 8003642:	d009      	beq.n	8003658 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	212c      	movs	r1, #44	; 0x2c
 800364a:	fb01 f303 	mul.w	r3, r1, r3
 800364e:	4413      	add	r3, r2
 8003650:	3361      	adds	r3, #97	; 0x61
 8003652:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003654:	2b08      	cmp	r3, #8
 8003656:	d14f      	bne.n	80036f8 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	212c      	movs	r1, #44	; 0x2c
 800365e:	fb01 f303 	mul.w	r3, r1, r3
 8003662:	4413      	add	r3, r2
 8003664:	335c      	adds	r3, #92	; 0x5c
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	1c5a      	adds	r2, r3, #1
 800366a:	6879      	ldr	r1, [r7, #4]
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	202c      	movs	r0, #44	; 0x2c
 8003670:	fb00 f303 	mul.w	r3, r0, r3
 8003674:	440b      	add	r3, r1
 8003676:	335c      	adds	r3, #92	; 0x5c
 8003678:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	212c      	movs	r1, #44	; 0x2c
 8003680:	fb01 f303 	mul.w	r3, r1, r3
 8003684:	4413      	add	r3, r2
 8003686:	335c      	adds	r3, #92	; 0x5c
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2b02      	cmp	r3, #2
 800368c:	d912      	bls.n	80036b4 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	212c      	movs	r1, #44	; 0x2c
 8003694:	fb01 f303 	mul.w	r3, r1, r3
 8003698:	4413      	add	r3, r2
 800369a:	335c      	adds	r3, #92	; 0x5c
 800369c:	2200      	movs	r2, #0
 800369e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	212c      	movs	r1, #44	; 0x2c
 80036a6:	fb01 f303 	mul.w	r3, r1, r3
 80036aa:	4413      	add	r3, r2
 80036ac:	3360      	adds	r3, #96	; 0x60
 80036ae:	2204      	movs	r2, #4
 80036b0:	701a      	strb	r2, [r3, #0]
 80036b2:	e021      	b.n	80036f8 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	212c      	movs	r1, #44	; 0x2c
 80036ba:	fb01 f303 	mul.w	r3, r1, r3
 80036be:	4413      	add	r3, r2
 80036c0:	3360      	adds	r3, #96	; 0x60
 80036c2:	2202      	movs	r2, #2
 80036c4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	015a      	lsls	r2, r3, #5
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	4413      	add	r3, r2
 80036ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80036dc:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80036e4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	015a      	lsls	r2, r3, #5
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	4413      	add	r3, r2
 80036ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036f2:	461a      	mov	r2, r3
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	015a      	lsls	r2, r3, #5
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	4413      	add	r3, r2
 8003700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003704:	461a      	mov	r2, r3
 8003706:	2302      	movs	r3, #2
 8003708:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	b2d9      	uxtb	r1, r3
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	202c      	movs	r0, #44	; 0x2c
 8003714:	fb00 f303 	mul.w	r3, r0, r3
 8003718:	4413      	add	r3, r2
 800371a:	3360      	adds	r3, #96	; 0x60
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	461a      	mov	r2, r3
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f009 f9d3 	bl	800cacc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003726:	bf00      	nop
 8003728:	3720      	adds	r7, #32
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b08a      	sub	sp, #40	; 0x28
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	f003 030f 	and.w	r3, r3, #15
 800374e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	0c5b      	lsrs	r3, r3, #17
 8003754:	f003 030f 	and.w	r3, r3, #15
 8003758:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	091b      	lsrs	r3, r3, #4
 800375e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003762:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	2b02      	cmp	r3, #2
 8003768:	d004      	beq.n	8003774 <HCD_RXQLVL_IRQHandler+0x46>
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	2b05      	cmp	r3, #5
 800376e:	f000 80a9 	beq.w	80038c4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003772:	e0aa      	b.n	80038ca <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	2b00      	cmp	r3, #0
 8003778:	f000 80a6 	beq.w	80038c8 <HCD_RXQLVL_IRQHandler+0x19a>
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	212c      	movs	r1, #44	; 0x2c
 8003782:	fb01 f303 	mul.w	r3, r1, r3
 8003786:	4413      	add	r3, r2
 8003788:	3344      	adds	r3, #68	; 0x44
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	f000 809b 	beq.w	80038c8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	212c      	movs	r1, #44	; 0x2c
 8003798:	fb01 f303 	mul.w	r3, r1, r3
 800379c:	4413      	add	r3, r2
 800379e:	3350      	adds	r3, #80	; 0x50
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	441a      	add	r2, r3
 80037a6:	6879      	ldr	r1, [r7, #4]
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	202c      	movs	r0, #44	; 0x2c
 80037ac:	fb00 f303 	mul.w	r3, r0, r3
 80037b0:	440b      	add	r3, r1
 80037b2:	334c      	adds	r3, #76	; 0x4c
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d87a      	bhi.n	80038b0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6818      	ldr	r0, [r3, #0]
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	212c      	movs	r1, #44	; 0x2c
 80037c4:	fb01 f303 	mul.w	r3, r1, r3
 80037c8:	4413      	add	r3, r2
 80037ca:	3344      	adds	r3, #68	; 0x44
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	693a      	ldr	r2, [r7, #16]
 80037d0:	b292      	uxth	r2, r2
 80037d2:	4619      	mov	r1, r3
 80037d4:	f002 ff7c 	bl	80066d0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	212c      	movs	r1, #44	; 0x2c
 80037de:	fb01 f303 	mul.w	r3, r1, r3
 80037e2:	4413      	add	r3, r2
 80037e4:	3344      	adds	r3, #68	; 0x44
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	441a      	add	r2, r3
 80037ec:	6879      	ldr	r1, [r7, #4]
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	202c      	movs	r0, #44	; 0x2c
 80037f2:	fb00 f303 	mul.w	r3, r0, r3
 80037f6:	440b      	add	r3, r1
 80037f8:	3344      	adds	r3, #68	; 0x44
 80037fa:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	212c      	movs	r1, #44	; 0x2c
 8003802:	fb01 f303 	mul.w	r3, r1, r3
 8003806:	4413      	add	r3, r2
 8003808:	3350      	adds	r3, #80	; 0x50
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	441a      	add	r2, r3
 8003810:	6879      	ldr	r1, [r7, #4]
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	202c      	movs	r0, #44	; 0x2c
 8003816:	fb00 f303 	mul.w	r3, r0, r3
 800381a:	440b      	add	r3, r1
 800381c:	3350      	adds	r3, #80	; 0x50
 800381e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	015a      	lsls	r2, r3, #5
 8003824:	6a3b      	ldr	r3, [r7, #32]
 8003826:	4413      	add	r3, r2
 8003828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	0cdb      	lsrs	r3, r3, #19
 8003830:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003834:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	212c      	movs	r1, #44	; 0x2c
 800383c:	fb01 f303 	mul.w	r3, r1, r3
 8003840:	4413      	add	r3, r2
 8003842:	3340      	adds	r3, #64	; 0x40
 8003844:	881b      	ldrh	r3, [r3, #0]
 8003846:	461a      	mov	r2, r3
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	4293      	cmp	r3, r2
 800384c:	d13c      	bne.n	80038c8 <HCD_RXQLVL_IRQHandler+0x19a>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d039      	beq.n	80038c8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	015a      	lsls	r2, r3, #5
 8003858:	6a3b      	ldr	r3, [r7, #32]
 800385a:	4413      	add	r3, r2
 800385c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800386a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003872:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	015a      	lsls	r2, r3, #5
 8003878:	6a3b      	ldr	r3, [r7, #32]
 800387a:	4413      	add	r3, r2
 800387c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003880:	461a      	mov	r2, r3
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	212c      	movs	r1, #44	; 0x2c
 800388c:	fb01 f303 	mul.w	r3, r1, r3
 8003890:	4413      	add	r3, r2
 8003892:	3354      	adds	r3, #84	; 0x54
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	f083 0301 	eor.w	r3, r3, #1
 800389a:	b2d8      	uxtb	r0, r3
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	212c      	movs	r1, #44	; 0x2c
 80038a2:	fb01 f303 	mul.w	r3, r1, r3
 80038a6:	4413      	add	r3, r2
 80038a8:	3354      	adds	r3, #84	; 0x54
 80038aa:	4602      	mov	r2, r0
 80038ac:	701a      	strb	r2, [r3, #0]
      break;
 80038ae:	e00b      	b.n	80038c8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	212c      	movs	r1, #44	; 0x2c
 80038b6:	fb01 f303 	mul.w	r3, r1, r3
 80038ba:	4413      	add	r3, r2
 80038bc:	3360      	adds	r3, #96	; 0x60
 80038be:	2204      	movs	r2, #4
 80038c0:	701a      	strb	r2, [r3, #0]
      break;
 80038c2:	e001      	b.n	80038c8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80038c4:	bf00      	nop
 80038c6:	e000      	b.n	80038ca <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80038c8:	bf00      	nop
  }
}
 80038ca:	bf00      	nop
 80038cc:	3728      	adds	r7, #40	; 0x28
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b086      	sub	sp, #24
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80038fe:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b02      	cmp	r3, #2
 8003908:	d10b      	bne.n	8003922 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	2b01      	cmp	r3, #1
 8003912:	d102      	bne.n	800391a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f009 f8bd 	bl	800ca94 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	f043 0302 	orr.w	r3, r3, #2
 8003920:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f003 0308 	and.w	r3, r3, #8
 8003928:	2b08      	cmp	r3, #8
 800392a:	d132      	bne.n	8003992 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	f043 0308 	orr.w	r3, r3, #8
 8003932:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f003 0304 	and.w	r3, r3, #4
 800393a:	2b04      	cmp	r3, #4
 800393c:	d126      	bne.n	800398c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	2b02      	cmp	r3, #2
 8003944:	d113      	bne.n	800396e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800394c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003950:	d106      	bne.n	8003960 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2102      	movs	r1, #2
 8003958:	4618      	mov	r0, r3
 800395a:	f003 f827 	bl	80069ac <USB_InitFSLSPClkSel>
 800395e:	e011      	b.n	8003984 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2101      	movs	r1, #1
 8003966:	4618      	mov	r0, r3
 8003968:	f003 f820 	bl	80069ac <USB_InitFSLSPClkSel>
 800396c:	e00a      	b.n	8003984 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d106      	bne.n	8003984 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800397c:	461a      	mov	r2, r3
 800397e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003982:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f009 f8b3 	bl	800caf0 <HAL_HCD_PortEnabled_Callback>
 800398a:	e002      	b.n	8003992 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f009 f8bd 	bl	800cb0c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f003 0320 	and.w	r3, r3, #32
 8003998:	2b20      	cmp	r3, #32
 800399a:	d103      	bne.n	80039a4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	f043 0320 	orr.w	r3, r3, #32
 80039a2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80039aa:	461a      	mov	r2, r3
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	6013      	str	r3, [r2, #0]
}
 80039b0:	bf00      	nop
 80039b2:	3718      	adds	r7, #24
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e12b      	b.n	8003c22 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d106      	bne.n	80039e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7fd fa9a 	bl	8000f18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2224      	movs	r2, #36	; 0x24
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0201 	bic.w	r2, r2, #1
 80039fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a1c:	f001 fa20 	bl	8004e60 <HAL_RCC_GetPCLK1Freq>
 8003a20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	4a81      	ldr	r2, [pc, #516]	; (8003c2c <HAL_I2C_Init+0x274>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d807      	bhi.n	8003a3c <HAL_I2C_Init+0x84>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4a80      	ldr	r2, [pc, #512]	; (8003c30 <HAL_I2C_Init+0x278>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	bf94      	ite	ls
 8003a34:	2301      	movls	r3, #1
 8003a36:	2300      	movhi	r3, #0
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	e006      	b.n	8003a4a <HAL_I2C_Init+0x92>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	4a7d      	ldr	r2, [pc, #500]	; (8003c34 <HAL_I2C_Init+0x27c>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	bf94      	ite	ls
 8003a44:	2301      	movls	r3, #1
 8003a46:	2300      	movhi	r3, #0
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e0e7      	b.n	8003c22 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	4a78      	ldr	r2, [pc, #480]	; (8003c38 <HAL_I2C_Init+0x280>)
 8003a56:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5a:	0c9b      	lsrs	r3, r3, #18
 8003a5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	4a6a      	ldr	r2, [pc, #424]	; (8003c2c <HAL_I2C_Init+0x274>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d802      	bhi.n	8003a8c <HAL_I2C_Init+0xd4>
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	3301      	adds	r3, #1
 8003a8a:	e009      	b.n	8003aa0 <HAL_I2C_Init+0xe8>
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a92:	fb02 f303 	mul.w	r3, r2, r3
 8003a96:	4a69      	ldr	r2, [pc, #420]	; (8003c3c <HAL_I2C_Init+0x284>)
 8003a98:	fba2 2303 	umull	r2, r3, r2, r3
 8003a9c:	099b      	lsrs	r3, r3, #6
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	6812      	ldr	r2, [r2, #0]
 8003aa4:	430b      	orrs	r3, r1
 8003aa6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ab2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	495c      	ldr	r1, [pc, #368]	; (8003c2c <HAL_I2C_Init+0x274>)
 8003abc:	428b      	cmp	r3, r1
 8003abe:	d819      	bhi.n	8003af4 <HAL_I2C_Init+0x13c>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	1e59      	subs	r1, r3, #1
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ace:	1c59      	adds	r1, r3, #1
 8003ad0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ad4:	400b      	ands	r3, r1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00a      	beq.n	8003af0 <HAL_I2C_Init+0x138>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	1e59      	subs	r1, r3, #1
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ae8:	3301      	adds	r3, #1
 8003aea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aee:	e051      	b.n	8003b94 <HAL_I2C_Init+0x1dc>
 8003af0:	2304      	movs	r3, #4
 8003af2:	e04f      	b.n	8003b94 <HAL_I2C_Init+0x1dc>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d111      	bne.n	8003b20 <HAL_I2C_Init+0x168>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	1e58      	subs	r0, r3, #1
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6859      	ldr	r1, [r3, #4]
 8003b04:	460b      	mov	r3, r1
 8003b06:	005b      	lsls	r3, r3, #1
 8003b08:	440b      	add	r3, r1
 8003b0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b0e:	3301      	adds	r3, #1
 8003b10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	bf0c      	ite	eq
 8003b18:	2301      	moveq	r3, #1
 8003b1a:	2300      	movne	r3, #0
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	e012      	b.n	8003b46 <HAL_I2C_Init+0x18e>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	1e58      	subs	r0, r3, #1
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6859      	ldr	r1, [r3, #4]
 8003b28:	460b      	mov	r3, r1
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	440b      	add	r3, r1
 8003b2e:	0099      	lsls	r1, r3, #2
 8003b30:	440b      	add	r3, r1
 8003b32:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b36:	3301      	adds	r3, #1
 8003b38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	bf0c      	ite	eq
 8003b40:	2301      	moveq	r3, #1
 8003b42:	2300      	movne	r3, #0
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <HAL_I2C_Init+0x196>
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e022      	b.n	8003b94 <HAL_I2C_Init+0x1dc>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10e      	bne.n	8003b74 <HAL_I2C_Init+0x1bc>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	1e58      	subs	r0, r3, #1
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6859      	ldr	r1, [r3, #4]
 8003b5e:	460b      	mov	r3, r1
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	440b      	add	r3, r1
 8003b64:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b68:	3301      	adds	r3, #1
 8003b6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b72:	e00f      	b.n	8003b94 <HAL_I2C_Init+0x1dc>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	1e58      	subs	r0, r3, #1
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6859      	ldr	r1, [r3, #4]
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	440b      	add	r3, r1
 8003b82:	0099      	lsls	r1, r3, #2
 8003b84:	440b      	add	r3, r1
 8003b86:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b94:	6879      	ldr	r1, [r7, #4]
 8003b96:	6809      	ldr	r1, [r1, #0]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	69da      	ldr	r2, [r3, #28]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003bc2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	6911      	ldr	r1, [r2, #16]
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	68d2      	ldr	r2, [r2, #12]
 8003bce:	4311      	orrs	r1, r2
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	6812      	ldr	r2, [r2, #0]
 8003bd4:	430b      	orrs	r3, r1
 8003bd6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	695a      	ldr	r2, [r3, #20]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	431a      	orrs	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f042 0201 	orr.w	r2, r2, #1
 8003c02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2220      	movs	r2, #32
 8003c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	000186a0 	.word	0x000186a0
 8003c30:	001e847f 	.word	0x001e847f
 8003c34:	003d08ff 	.word	0x003d08ff
 8003c38:	431bde83 	.word	0x431bde83
 8003c3c:	10624dd3 	.word	0x10624dd3

08003c40 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b088      	sub	sp, #32
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e128      	b.n	8003ea4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d109      	bne.n	8003c72 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a90      	ldr	r2, [pc, #576]	; (8003eac <HAL_I2S_Init+0x26c>)
 8003c6a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f7fd f99b 	bl	8000fa8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2202      	movs	r2, #2
 8003c76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	69db      	ldr	r3, [r3, #28]
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6812      	ldr	r2, [r2, #0]
 8003c84:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003c88:	f023 030f 	bic.w	r3, r3, #15
 8003c8c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2202      	movs	r2, #2
 8003c94:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d060      	beq.n	8003d60 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d102      	bne.n	8003cac <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003ca6:	2310      	movs	r3, #16
 8003ca8:	617b      	str	r3, [r7, #20]
 8003caa:	e001      	b.n	8003cb0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003cac:	2320      	movs	r3, #32
 8003cae:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	2b20      	cmp	r3, #32
 8003cb6:	d802      	bhi.n	8003cbe <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003cbe:	2001      	movs	r0, #1
 8003cc0:	f001 fa0a 	bl	80050d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003cc4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cce:	d125      	bne.n	8003d1c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d010      	beq.n	8003cfa <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	4413      	add	r3, r2
 8003ce8:	005b      	lsls	r3, r3, #1
 8003cea:	461a      	mov	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf4:	3305      	adds	r3, #5
 8003cf6:	613b      	str	r3, [r7, #16]
 8003cf8:	e01f      	b.n	8003d3a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	00db      	lsls	r3, r3, #3
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d04:	4613      	mov	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4413      	add	r3, r2
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d16:	3305      	adds	r3, #5
 8003d18:	613b      	str	r3, [r7, #16]
 8003d1a:	e00e      	b.n	8003d3a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d24:	4613      	mov	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4413      	add	r3, r2
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d36:	3305      	adds	r3, #5
 8003d38:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	4a5c      	ldr	r2, [pc, #368]	; (8003eb0 <HAL_I2S_Init+0x270>)
 8003d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d42:	08db      	lsrs	r3, r3, #3
 8003d44:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	f003 0301 	and.w	r3, r3, #1
 8003d4c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	085b      	lsrs	r3, r3, #1
 8003d56:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	021b      	lsls	r3, r3, #8
 8003d5c:	61bb      	str	r3, [r7, #24]
 8003d5e:	e003      	b.n	8003d68 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003d60:	2302      	movs	r3, #2
 8003d62:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003d64:	2300      	movs	r3, #0
 8003d66:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d902      	bls.n	8003d74 <HAL_I2S_Init+0x134>
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	2bff      	cmp	r3, #255	; 0xff
 8003d72:	d907      	bls.n	8003d84 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d78:	f043 0210 	orr.w	r2, r3, #16
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e08f      	b.n	8003ea4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	691a      	ldr	r2, [r3, #16]
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	ea42 0103 	orr.w	r1, r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	69fa      	ldr	r2, [r7, #28]
 8003d94:	430a      	orrs	r2, r1
 8003d96:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003da2:	f023 030f 	bic.w	r3, r3, #15
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	6851      	ldr	r1, [r2, #4]
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	6892      	ldr	r2, [r2, #8]
 8003dae:	4311      	orrs	r1, r2
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	68d2      	ldr	r2, [r2, #12]
 8003db4:	4311      	orrs	r1, r2
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	6992      	ldr	r2, [r2, #24]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	431a      	orrs	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dc6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d161      	bne.n	8003e94 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a38      	ldr	r2, [pc, #224]	; (8003eb4 <HAL_I2S_Init+0x274>)
 8003dd4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a37      	ldr	r2, [pc, #220]	; (8003eb8 <HAL_I2S_Init+0x278>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d101      	bne.n	8003de4 <HAL_I2S_Init+0x1a4>
 8003de0:	4b36      	ldr	r3, [pc, #216]	; (8003ebc <HAL_I2S_Init+0x27c>)
 8003de2:	e001      	b.n	8003de8 <HAL_I2S_Init+0x1a8>
 8003de4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	6812      	ldr	r2, [r2, #0]
 8003dee:	4932      	ldr	r1, [pc, #200]	; (8003eb8 <HAL_I2S_Init+0x278>)
 8003df0:	428a      	cmp	r2, r1
 8003df2:	d101      	bne.n	8003df8 <HAL_I2S_Init+0x1b8>
 8003df4:	4a31      	ldr	r2, [pc, #196]	; (8003ebc <HAL_I2S_Init+0x27c>)
 8003df6:	e001      	b.n	8003dfc <HAL_I2S_Init+0x1bc>
 8003df8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003dfc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003e00:	f023 030f 	bic.w	r3, r3, #15
 8003e04:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a2b      	ldr	r2, [pc, #172]	; (8003eb8 <HAL_I2S_Init+0x278>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d101      	bne.n	8003e14 <HAL_I2S_Init+0x1d4>
 8003e10:	4b2a      	ldr	r3, [pc, #168]	; (8003ebc <HAL_I2S_Init+0x27c>)
 8003e12:	e001      	b.n	8003e18 <HAL_I2S_Init+0x1d8>
 8003e14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e18:	2202      	movs	r2, #2
 8003e1a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a25      	ldr	r2, [pc, #148]	; (8003eb8 <HAL_I2S_Init+0x278>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d101      	bne.n	8003e2a <HAL_I2S_Init+0x1ea>
 8003e26:	4b25      	ldr	r3, [pc, #148]	; (8003ebc <HAL_I2S_Init+0x27c>)
 8003e28:	e001      	b.n	8003e2e <HAL_I2S_Init+0x1ee>
 8003e2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e2e:	69db      	ldr	r3, [r3, #28]
 8003e30:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e3a:	d003      	beq.n	8003e44 <HAL_I2S_Init+0x204>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d103      	bne.n	8003e4c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003e44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e48:	613b      	str	r3, [r7, #16]
 8003e4a:	e001      	b.n	8003e50 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003e64:	4313      	orrs	r3, r2
 8003e66:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	897b      	ldrh	r3, [r7, #10]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003e7c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a0d      	ldr	r2, [pc, #52]	; (8003eb8 <HAL_I2S_Init+0x278>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d101      	bne.n	8003e8c <HAL_I2S_Init+0x24c>
 8003e88:	4b0c      	ldr	r3, [pc, #48]	; (8003ebc <HAL_I2S_Init+0x27c>)
 8003e8a:	e001      	b.n	8003e90 <HAL_I2S_Init+0x250>
 8003e8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e90:	897a      	ldrh	r2, [r7, #10]
 8003e92:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3720      	adds	r7, #32
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	08003fb7 	.word	0x08003fb7
 8003eb0:	cccccccd 	.word	0xcccccccd
 8003eb4:	080040cd 	.word	0x080040cd
 8003eb8:	40003800 	.word	0x40003800
 8003ebc:	40003400 	.word	0x40003400

08003ec0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f08:	881a      	ldrh	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	1c9a      	adds	r2, r3, #2
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	3b01      	subs	r3, #1
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10e      	bne.n	8003f50 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f40:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f7ff ffb8 	bl	8003ec0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003f50:	bf00      	nop
 8003f52:	3708      	adds	r7, #8
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68da      	ldr	r2, [r3, #12]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6a:	b292      	uxth	r2, r2
 8003f6c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f72:	1c9a      	adds	r2, r3, #2
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d10e      	bne.n	8003fae <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	685a      	ldr	r2, [r3, #4]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f9e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f7ff ff93 	bl	8003ed4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003fae:	bf00      	nop
 8003fb0:	3708      	adds	r7, #8
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b086      	sub	sp, #24
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b04      	cmp	r3, #4
 8003fd0:	d13a      	bne.n	8004048 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	f003 0301 	and.w	r3, r3, #1
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d109      	bne.n	8003ff0 <I2S_IRQHandler+0x3a>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe6:	2b40      	cmp	r3, #64	; 0x40
 8003fe8:	d102      	bne.n	8003ff0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7ff ffb4 	bl	8003f58 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff6:	2b40      	cmp	r3, #64	; 0x40
 8003ff8:	d126      	bne.n	8004048 <I2S_IRQHandler+0x92>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f003 0320 	and.w	r3, r3, #32
 8004004:	2b20      	cmp	r3, #32
 8004006:	d11f      	bne.n	8004048 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	685a      	ldr	r2, [r3, #4]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004016:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004018:	2300      	movs	r3, #0
 800401a:	613b      	str	r3, [r7, #16]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	613b      	str	r3, [r7, #16]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	613b      	str	r3, [r7, #16]
 800402c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403a:	f043 0202 	orr.w	r2, r3, #2
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7ff ff50 	bl	8003ee8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2b03      	cmp	r3, #3
 8004052:	d136      	bne.n	80040c2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b02      	cmp	r3, #2
 800405c:	d109      	bne.n	8004072 <I2S_IRQHandler+0xbc>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004068:	2b80      	cmp	r3, #128	; 0x80
 800406a:	d102      	bne.n	8004072 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f7ff ff45 	bl	8003efc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f003 0308 	and.w	r3, r3, #8
 8004078:	2b08      	cmp	r3, #8
 800407a:	d122      	bne.n	80040c2 <I2S_IRQHandler+0x10c>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f003 0320 	and.w	r3, r3, #32
 8004086:	2b20      	cmp	r3, #32
 8004088:	d11b      	bne.n	80040c2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	685a      	ldr	r2, [r3, #4]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004098:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800409a:	2300      	movs	r3, #0
 800409c:	60fb      	str	r3, [r7, #12]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	60fb      	str	r3, [r7, #12]
 80040a6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b4:	f043 0204 	orr.w	r2, r3, #4
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f7ff ff13 	bl	8003ee8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040c2:	bf00      	nop
 80040c4:	3718      	adds	r7, #24
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
	...

080040cc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b088      	sub	sp, #32
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a92      	ldr	r2, [pc, #584]	; (800432c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d101      	bne.n	80040ea <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80040e6:	4b92      	ldr	r3, [pc, #584]	; (8004330 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040e8:	e001      	b.n	80040ee <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80040ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a8b      	ldr	r2, [pc, #556]	; (800432c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d101      	bne.n	8004108 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004104:	4b8a      	ldr	r3, [pc, #552]	; (8004330 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004106:	e001      	b.n	800410c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004108:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004118:	d004      	beq.n	8004124 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	f040 8099 	bne.w	8004256 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b02      	cmp	r3, #2
 800412c:	d107      	bne.n	800413e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004134:	2b00      	cmp	r3, #0
 8004136:	d002      	beq.n	800413e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 f925 	bl	8004388 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b01      	cmp	r3, #1
 8004146:	d107      	bne.n	8004158 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800414e:	2b00      	cmp	r3, #0
 8004150:	d002      	beq.n	8004158 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 f9c8 	bl	80044e8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800415e:	2b40      	cmp	r3, #64	; 0x40
 8004160:	d13a      	bne.n	80041d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	f003 0320 	and.w	r3, r3, #32
 8004168:	2b00      	cmp	r3, #0
 800416a:	d035      	beq.n	80041d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a6e      	ldr	r2, [pc, #440]	; (800432c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d101      	bne.n	800417a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004176:	4b6e      	ldr	r3, [pc, #440]	; (8004330 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004178:	e001      	b.n	800417e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800417a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4969      	ldr	r1, [pc, #420]	; (800432c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004186:	428b      	cmp	r3, r1
 8004188:	d101      	bne.n	800418e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800418a:	4b69      	ldr	r3, [pc, #420]	; (8004330 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800418c:	e001      	b.n	8004192 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800418e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004192:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004196:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	685a      	ldr	r2, [r3, #4]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80041a6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80041a8:	2300      	movs	r3, #0
 80041aa:	60fb      	str	r3, [r7, #12]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	60fb      	str	r3, [r7, #12]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	60fb      	str	r3, [r7, #12]
 80041bc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ca:	f043 0202 	orr.w	r2, r3, #2
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f7ff fe88 	bl	8003ee8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	f003 0308 	and.w	r3, r3, #8
 80041de:	2b08      	cmp	r3, #8
 80041e0:	f040 80c3 	bne.w	800436a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	f003 0320 	and.w	r3, r3, #32
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f000 80bd 	beq.w	800436a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	685a      	ldr	r2, [r3, #4]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80041fe:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a49      	ldr	r2, [pc, #292]	; (800432c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d101      	bne.n	800420e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800420a:	4b49      	ldr	r3, [pc, #292]	; (8004330 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800420c:	e001      	b.n	8004212 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800420e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004212:	685a      	ldr	r2, [r3, #4]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4944      	ldr	r1, [pc, #272]	; (800432c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800421a:	428b      	cmp	r3, r1
 800421c:	d101      	bne.n	8004222 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800421e:	4b44      	ldr	r3, [pc, #272]	; (8004330 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004220:	e001      	b.n	8004226 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004222:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004226:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800422a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800422c:	2300      	movs	r3, #0
 800422e:	60bb      	str	r3, [r7, #8]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	60bb      	str	r3, [r7, #8]
 8004238:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2201      	movs	r2, #1
 800423e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004246:	f043 0204 	orr.w	r2, r3, #4
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7ff fe4a 	bl	8003ee8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004254:	e089      	b.n	800436a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b02      	cmp	r3, #2
 800425e:	d107      	bne.n	8004270 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004266:	2b00      	cmp	r3, #0
 8004268:	d002      	beq.n	8004270 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f8be 	bl	80043ec <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b01      	cmp	r3, #1
 8004278:	d107      	bne.n	800428a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004280:	2b00      	cmp	r3, #0
 8004282:	d002      	beq.n	800428a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 f8fd 	bl	8004484 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004290:	2b40      	cmp	r3, #64	; 0x40
 8004292:	d12f      	bne.n	80042f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	f003 0320 	and.w	r3, r3, #32
 800429a:	2b00      	cmp	r3, #0
 800429c:	d02a      	beq.n	80042f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	685a      	ldr	r2, [r3, #4]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80042ac:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a1e      	ldr	r2, [pc, #120]	; (800432c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d101      	bne.n	80042bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80042b8:	4b1d      	ldr	r3, [pc, #116]	; (8004330 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042ba:	e001      	b.n	80042c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80042bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042c0:	685a      	ldr	r2, [r3, #4]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4919      	ldr	r1, [pc, #100]	; (800432c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042c8:	428b      	cmp	r3, r1
 80042ca:	d101      	bne.n	80042d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80042cc:	4b18      	ldr	r3, [pc, #96]	; (8004330 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042ce:	e001      	b.n	80042d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80042d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80042d8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e6:	f043 0202 	orr.w	r2, r3, #2
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7ff fdfa 	bl	8003ee8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	f003 0308 	and.w	r3, r3, #8
 80042fa:	2b08      	cmp	r3, #8
 80042fc:	d136      	bne.n	800436c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	f003 0320 	and.w	r3, r3, #32
 8004304:	2b00      	cmp	r3, #0
 8004306:	d031      	beq.n	800436c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a07      	ldr	r2, [pc, #28]	; (800432c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d101      	bne.n	8004316 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004312:	4b07      	ldr	r3, [pc, #28]	; (8004330 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004314:	e001      	b.n	800431a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004316:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800431a:	685a      	ldr	r2, [r3, #4]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4902      	ldr	r1, [pc, #8]	; (800432c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004322:	428b      	cmp	r3, r1
 8004324:	d106      	bne.n	8004334 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004326:	4b02      	ldr	r3, [pc, #8]	; (8004330 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004328:	e006      	b.n	8004338 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800432a:	bf00      	nop
 800432c:	40003800 	.word	0x40003800
 8004330:	40003400 	.word	0x40003400
 8004334:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004338:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800433c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	685a      	ldr	r2, [r3, #4]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800434c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800435a:	f043 0204 	orr.w	r2, r3, #4
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f7ff fdc0 	bl	8003ee8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004368:	e000      	b.n	800436c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800436a:	bf00      	nop
}
 800436c:	bf00      	nop
 800436e:	3720      	adds	r7, #32
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004394:	1c99      	adds	r1, r3, #2
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	6251      	str	r1, [r2, #36]	; 0x24
 800439a:	881a      	ldrh	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	3b01      	subs	r3, #1
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d113      	bne.n	80043e2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	685a      	ldr	r2, [r3, #4]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80043c8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d106      	bne.n	80043e2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f7ff ffc9 	bl	8004374 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80043e2:	bf00      	nop
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
	...

080043ec <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f8:	1c99      	adds	r1, r3, #2
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	6251      	str	r1, [r2, #36]	; 0x24
 80043fe:	8819      	ldrh	r1, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a1d      	ldr	r2, [pc, #116]	; (800447c <I2SEx_TxISR_I2SExt+0x90>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d101      	bne.n	800440e <I2SEx_TxISR_I2SExt+0x22>
 800440a:	4b1d      	ldr	r3, [pc, #116]	; (8004480 <I2SEx_TxISR_I2SExt+0x94>)
 800440c:	e001      	b.n	8004412 <I2SEx_TxISR_I2SExt+0x26>
 800440e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004412:	460a      	mov	r2, r1
 8004414:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800441a:	b29b      	uxth	r3, r3
 800441c:	3b01      	subs	r3, #1
 800441e:	b29a      	uxth	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004428:	b29b      	uxth	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d121      	bne.n	8004472 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a12      	ldr	r2, [pc, #72]	; (800447c <I2SEx_TxISR_I2SExt+0x90>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d101      	bne.n	800443c <I2SEx_TxISR_I2SExt+0x50>
 8004438:	4b11      	ldr	r3, [pc, #68]	; (8004480 <I2SEx_TxISR_I2SExt+0x94>)
 800443a:	e001      	b.n	8004440 <I2SEx_TxISR_I2SExt+0x54>
 800443c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004440:	685a      	ldr	r2, [r3, #4]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	490d      	ldr	r1, [pc, #52]	; (800447c <I2SEx_TxISR_I2SExt+0x90>)
 8004448:	428b      	cmp	r3, r1
 800444a:	d101      	bne.n	8004450 <I2SEx_TxISR_I2SExt+0x64>
 800444c:	4b0c      	ldr	r3, [pc, #48]	; (8004480 <I2SEx_TxISR_I2SExt+0x94>)
 800444e:	e001      	b.n	8004454 <I2SEx_TxISR_I2SExt+0x68>
 8004450:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004454:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004458:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800445e:	b29b      	uxth	r3, r3
 8004460:	2b00      	cmp	r3, #0
 8004462:	d106      	bne.n	8004472 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f7ff ff81 	bl	8004374 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004472:	bf00      	nop
 8004474:	3708      	adds	r7, #8
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	40003800 	.word	0x40003800
 8004480:	40003400 	.word	0x40003400

08004484 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68d8      	ldr	r0, [r3, #12]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004496:	1c99      	adds	r1, r3, #2
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800449c:	b282      	uxth	r2, r0
 800449e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	3b01      	subs	r3, #1
 80044a8:	b29a      	uxth	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d113      	bne.n	80044e0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	685a      	ldr	r2, [r3, #4]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80044c6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d106      	bne.n	80044e0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2201      	movs	r2, #1
 80044d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f7ff ff4a 	bl	8004374 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80044e0:	bf00      	nop
 80044e2:	3708      	adds	r7, #8
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a20      	ldr	r2, [pc, #128]	; (8004578 <I2SEx_RxISR_I2SExt+0x90>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d101      	bne.n	80044fe <I2SEx_RxISR_I2SExt+0x16>
 80044fa:	4b20      	ldr	r3, [pc, #128]	; (800457c <I2SEx_RxISR_I2SExt+0x94>)
 80044fc:	e001      	b.n	8004502 <I2SEx_RxISR_I2SExt+0x1a>
 80044fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004502:	68d8      	ldr	r0, [r3, #12]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004508:	1c99      	adds	r1, r3, #2
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800450e:	b282      	uxth	r2, r0
 8004510:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004516:	b29b      	uxth	r3, r3
 8004518:	3b01      	subs	r3, #1
 800451a:	b29a      	uxth	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004524:	b29b      	uxth	r3, r3
 8004526:	2b00      	cmp	r3, #0
 8004528:	d121      	bne.n	800456e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a12      	ldr	r2, [pc, #72]	; (8004578 <I2SEx_RxISR_I2SExt+0x90>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d101      	bne.n	8004538 <I2SEx_RxISR_I2SExt+0x50>
 8004534:	4b11      	ldr	r3, [pc, #68]	; (800457c <I2SEx_RxISR_I2SExt+0x94>)
 8004536:	e001      	b.n	800453c <I2SEx_RxISR_I2SExt+0x54>
 8004538:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800453c:	685a      	ldr	r2, [r3, #4]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	490d      	ldr	r1, [pc, #52]	; (8004578 <I2SEx_RxISR_I2SExt+0x90>)
 8004544:	428b      	cmp	r3, r1
 8004546:	d101      	bne.n	800454c <I2SEx_RxISR_I2SExt+0x64>
 8004548:	4b0c      	ldr	r3, [pc, #48]	; (800457c <I2SEx_RxISR_I2SExt+0x94>)
 800454a:	e001      	b.n	8004550 <I2SEx_RxISR_I2SExt+0x68>
 800454c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004550:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004554:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800455a:	b29b      	uxth	r3, r3
 800455c:	2b00      	cmp	r3, #0
 800455e:	d106      	bne.n	800456e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f7ff ff03 	bl	8004374 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800456e:	bf00      	nop
 8004570:	3708      	adds	r7, #8
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	40003800 	.word	0x40003800
 800457c:	40003400 	.word	0x40003400

08004580 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b086      	sub	sp, #24
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e267      	b.n	8004a62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b00      	cmp	r3, #0
 800459c:	d075      	beq.n	800468a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800459e:	4b88      	ldr	r3, [pc, #544]	; (80047c0 <HAL_RCC_OscConfig+0x240>)
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f003 030c 	and.w	r3, r3, #12
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	d00c      	beq.n	80045c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045aa:	4b85      	ldr	r3, [pc, #532]	; (80047c0 <HAL_RCC_OscConfig+0x240>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045b2:	2b08      	cmp	r3, #8
 80045b4:	d112      	bne.n	80045dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045b6:	4b82      	ldr	r3, [pc, #520]	; (80047c0 <HAL_RCC_OscConfig+0x240>)
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045c2:	d10b      	bne.n	80045dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045c4:	4b7e      	ldr	r3, [pc, #504]	; (80047c0 <HAL_RCC_OscConfig+0x240>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d05b      	beq.n	8004688 <HAL_RCC_OscConfig+0x108>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d157      	bne.n	8004688 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e242      	b.n	8004a62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045e4:	d106      	bne.n	80045f4 <HAL_RCC_OscConfig+0x74>
 80045e6:	4b76      	ldr	r3, [pc, #472]	; (80047c0 <HAL_RCC_OscConfig+0x240>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a75      	ldr	r2, [pc, #468]	; (80047c0 <HAL_RCC_OscConfig+0x240>)
 80045ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045f0:	6013      	str	r3, [r2, #0]
 80045f2:	e01d      	b.n	8004630 <HAL_RCC_OscConfig+0xb0>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045fc:	d10c      	bne.n	8004618 <HAL_RCC_OscConfig+0x98>
 80045fe:	4b70      	ldr	r3, [pc, #448]	; (80047c0 <HAL_RCC_OscConfig+0x240>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a6f      	ldr	r2, [pc, #444]	; (80047c0 <HAL_RCC_OscConfig+0x240>)
 8004604:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004608:	6013      	str	r3, [r2, #0]
 800460a:	4b6d      	ldr	r3, [pc, #436]	; (80047c0 <HAL_RCC_OscConfig+0x240>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a6c      	ldr	r2, [pc, #432]	; (80047c0 <HAL_RCC_OscConfig+0x240>)
 8004610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004614:	6013      	str	r3, [r2, #0]
 8004616:	e00b      	b.n	8004630 <HAL_RCC_OscConfig+0xb0>
 8004618:	4b69      	ldr	r3, [pc, #420]	; (80047c0 <HAL_RCC_OscConfig+0x240>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a68      	ldr	r2, [pc, #416]	; (80047c0 <HAL_RCC_OscConfig+0x240>)
 800461e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004622:	6013      	str	r3, [r2, #0]
 8004624:	4b66      	ldr	r3, [pc, #408]	; (80047c0 <HAL_RCC_OscConfig+0x240>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a65      	ldr	r2, [pc, #404]	; (80047c0 <HAL_RCC_OscConfig+0x240>)
 800462a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800462e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d013      	beq.n	8004660 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004638:	f7fd fad4 	bl	8001be4 <HAL_GetTick>
 800463c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800463e:	e008      	b.n	8004652 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004640:	f7fd fad0 	bl	8001be4 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b64      	cmp	r3, #100	; 0x64
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e207      	b.n	8004a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004652:	4b5b      	ldr	r3, [pc, #364]	; (80047c0 <HAL_RCC_OscConfig+0x240>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d0f0      	beq.n	8004640 <HAL_RCC_OscConfig+0xc0>
 800465e:	e014      	b.n	800468a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004660:	f7fd fac0 	bl	8001be4 <HAL_GetTick>
 8004664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004666:	e008      	b.n	800467a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004668:	f7fd fabc 	bl	8001be4 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	2b64      	cmp	r3, #100	; 0x64
 8004674:	d901      	bls.n	800467a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e1f3      	b.n	8004a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800467a:	4b51      	ldr	r3, [pc, #324]	; (80047c0 <HAL_RCC_OscConfig+0x240>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1f0      	bne.n	8004668 <HAL_RCC_OscConfig+0xe8>
 8004686:	e000      	b.n	800468a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004688:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d063      	beq.n	800475e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004696:	4b4a      	ldr	r3, [pc, #296]	; (80047c0 <HAL_RCC_OscConfig+0x240>)
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f003 030c 	and.w	r3, r3, #12
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00b      	beq.n	80046ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046a2:	4b47      	ldr	r3, [pc, #284]	; (80047c0 <HAL_RCC_OscConfig+0x240>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046aa:	2b08      	cmp	r3, #8
 80046ac:	d11c      	bne.n	80046e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046ae:	4b44      	ldr	r3, [pc, #272]	; (80047c0 <HAL_RCC_OscConfig+0x240>)
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d116      	bne.n	80046e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046ba:	4b41      	ldr	r3, [pc, #260]	; (80047c0 <HAL_RCC_OscConfig+0x240>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d005      	beq.n	80046d2 <HAL_RCC_OscConfig+0x152>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d001      	beq.n	80046d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e1c7      	b.n	8004a62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046d2:	4b3b      	ldr	r3, [pc, #236]	; (80047c0 <HAL_RCC_OscConfig+0x240>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	00db      	lsls	r3, r3, #3
 80046e0:	4937      	ldr	r1, [pc, #220]	; (80047c0 <HAL_RCC_OscConfig+0x240>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046e6:	e03a      	b.n	800475e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d020      	beq.n	8004732 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046f0:	4b34      	ldr	r3, [pc, #208]	; (80047c4 <HAL_RCC_OscConfig+0x244>)
 80046f2:	2201      	movs	r2, #1
 80046f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f6:	f7fd fa75 	bl	8001be4 <HAL_GetTick>
 80046fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046fc:	e008      	b.n	8004710 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046fe:	f7fd fa71 	bl	8001be4 <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	2b02      	cmp	r3, #2
 800470a:	d901      	bls.n	8004710 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e1a8      	b.n	8004a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004710:	4b2b      	ldr	r3, [pc, #172]	; (80047c0 <HAL_RCC_OscConfig+0x240>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b00      	cmp	r3, #0
 800471a:	d0f0      	beq.n	80046fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800471c:	4b28      	ldr	r3, [pc, #160]	; (80047c0 <HAL_RCC_OscConfig+0x240>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	00db      	lsls	r3, r3, #3
 800472a:	4925      	ldr	r1, [pc, #148]	; (80047c0 <HAL_RCC_OscConfig+0x240>)
 800472c:	4313      	orrs	r3, r2
 800472e:	600b      	str	r3, [r1, #0]
 8004730:	e015      	b.n	800475e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004732:	4b24      	ldr	r3, [pc, #144]	; (80047c4 <HAL_RCC_OscConfig+0x244>)
 8004734:	2200      	movs	r2, #0
 8004736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004738:	f7fd fa54 	bl	8001be4 <HAL_GetTick>
 800473c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800473e:	e008      	b.n	8004752 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004740:	f7fd fa50 	bl	8001be4 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b02      	cmp	r3, #2
 800474c:	d901      	bls.n	8004752 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e187      	b.n	8004a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004752:	4b1b      	ldr	r3, [pc, #108]	; (80047c0 <HAL_RCC_OscConfig+0x240>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1f0      	bne.n	8004740 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0308 	and.w	r3, r3, #8
 8004766:	2b00      	cmp	r3, #0
 8004768:	d036      	beq.n	80047d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d016      	beq.n	80047a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004772:	4b15      	ldr	r3, [pc, #84]	; (80047c8 <HAL_RCC_OscConfig+0x248>)
 8004774:	2201      	movs	r2, #1
 8004776:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004778:	f7fd fa34 	bl	8001be4 <HAL_GetTick>
 800477c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800477e:	e008      	b.n	8004792 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004780:	f7fd fa30 	bl	8001be4 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b02      	cmp	r3, #2
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e167      	b.n	8004a62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004792:	4b0b      	ldr	r3, [pc, #44]	; (80047c0 <HAL_RCC_OscConfig+0x240>)
 8004794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d0f0      	beq.n	8004780 <HAL_RCC_OscConfig+0x200>
 800479e:	e01b      	b.n	80047d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047a0:	4b09      	ldr	r3, [pc, #36]	; (80047c8 <HAL_RCC_OscConfig+0x248>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047a6:	f7fd fa1d 	bl	8001be4 <HAL_GetTick>
 80047aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047ac:	e00e      	b.n	80047cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047ae:	f7fd fa19 	bl	8001be4 <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d907      	bls.n	80047cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e150      	b.n	8004a62 <HAL_RCC_OscConfig+0x4e2>
 80047c0:	40023800 	.word	0x40023800
 80047c4:	42470000 	.word	0x42470000
 80047c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047cc:	4b88      	ldr	r3, [pc, #544]	; (80049f0 <HAL_RCC_OscConfig+0x470>)
 80047ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047d0:	f003 0302 	and.w	r3, r3, #2
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1ea      	bne.n	80047ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0304 	and.w	r3, r3, #4
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f000 8097 	beq.w	8004914 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047e6:	2300      	movs	r3, #0
 80047e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047ea:	4b81      	ldr	r3, [pc, #516]	; (80049f0 <HAL_RCC_OscConfig+0x470>)
 80047ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d10f      	bne.n	8004816 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047f6:	2300      	movs	r3, #0
 80047f8:	60bb      	str	r3, [r7, #8]
 80047fa:	4b7d      	ldr	r3, [pc, #500]	; (80049f0 <HAL_RCC_OscConfig+0x470>)
 80047fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fe:	4a7c      	ldr	r2, [pc, #496]	; (80049f0 <HAL_RCC_OscConfig+0x470>)
 8004800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004804:	6413      	str	r3, [r2, #64]	; 0x40
 8004806:	4b7a      	ldr	r3, [pc, #488]	; (80049f0 <HAL_RCC_OscConfig+0x470>)
 8004808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800480e:	60bb      	str	r3, [r7, #8]
 8004810:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004812:	2301      	movs	r3, #1
 8004814:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004816:	4b77      	ldr	r3, [pc, #476]	; (80049f4 <HAL_RCC_OscConfig+0x474>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800481e:	2b00      	cmp	r3, #0
 8004820:	d118      	bne.n	8004854 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004822:	4b74      	ldr	r3, [pc, #464]	; (80049f4 <HAL_RCC_OscConfig+0x474>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a73      	ldr	r2, [pc, #460]	; (80049f4 <HAL_RCC_OscConfig+0x474>)
 8004828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800482c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800482e:	f7fd f9d9 	bl	8001be4 <HAL_GetTick>
 8004832:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004834:	e008      	b.n	8004848 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004836:	f7fd f9d5 	bl	8001be4 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	2b02      	cmp	r3, #2
 8004842:	d901      	bls.n	8004848 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e10c      	b.n	8004a62 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004848:	4b6a      	ldr	r3, [pc, #424]	; (80049f4 <HAL_RCC_OscConfig+0x474>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004850:	2b00      	cmp	r3, #0
 8004852:	d0f0      	beq.n	8004836 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d106      	bne.n	800486a <HAL_RCC_OscConfig+0x2ea>
 800485c:	4b64      	ldr	r3, [pc, #400]	; (80049f0 <HAL_RCC_OscConfig+0x470>)
 800485e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004860:	4a63      	ldr	r2, [pc, #396]	; (80049f0 <HAL_RCC_OscConfig+0x470>)
 8004862:	f043 0301 	orr.w	r3, r3, #1
 8004866:	6713      	str	r3, [r2, #112]	; 0x70
 8004868:	e01c      	b.n	80048a4 <HAL_RCC_OscConfig+0x324>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	2b05      	cmp	r3, #5
 8004870:	d10c      	bne.n	800488c <HAL_RCC_OscConfig+0x30c>
 8004872:	4b5f      	ldr	r3, [pc, #380]	; (80049f0 <HAL_RCC_OscConfig+0x470>)
 8004874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004876:	4a5e      	ldr	r2, [pc, #376]	; (80049f0 <HAL_RCC_OscConfig+0x470>)
 8004878:	f043 0304 	orr.w	r3, r3, #4
 800487c:	6713      	str	r3, [r2, #112]	; 0x70
 800487e:	4b5c      	ldr	r3, [pc, #368]	; (80049f0 <HAL_RCC_OscConfig+0x470>)
 8004880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004882:	4a5b      	ldr	r2, [pc, #364]	; (80049f0 <HAL_RCC_OscConfig+0x470>)
 8004884:	f043 0301 	orr.w	r3, r3, #1
 8004888:	6713      	str	r3, [r2, #112]	; 0x70
 800488a:	e00b      	b.n	80048a4 <HAL_RCC_OscConfig+0x324>
 800488c:	4b58      	ldr	r3, [pc, #352]	; (80049f0 <HAL_RCC_OscConfig+0x470>)
 800488e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004890:	4a57      	ldr	r2, [pc, #348]	; (80049f0 <HAL_RCC_OscConfig+0x470>)
 8004892:	f023 0301 	bic.w	r3, r3, #1
 8004896:	6713      	str	r3, [r2, #112]	; 0x70
 8004898:	4b55      	ldr	r3, [pc, #340]	; (80049f0 <HAL_RCC_OscConfig+0x470>)
 800489a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800489c:	4a54      	ldr	r2, [pc, #336]	; (80049f0 <HAL_RCC_OscConfig+0x470>)
 800489e:	f023 0304 	bic.w	r3, r3, #4
 80048a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d015      	beq.n	80048d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ac:	f7fd f99a 	bl	8001be4 <HAL_GetTick>
 80048b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048b2:	e00a      	b.n	80048ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048b4:	f7fd f996 	bl	8001be4 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e0cb      	b.n	8004a62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ca:	4b49      	ldr	r3, [pc, #292]	; (80049f0 <HAL_RCC_OscConfig+0x470>)
 80048cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d0ee      	beq.n	80048b4 <HAL_RCC_OscConfig+0x334>
 80048d6:	e014      	b.n	8004902 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048d8:	f7fd f984 	bl	8001be4 <HAL_GetTick>
 80048dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048de:	e00a      	b.n	80048f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048e0:	f7fd f980 	bl	8001be4 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d901      	bls.n	80048f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e0b5      	b.n	8004a62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048f6:	4b3e      	ldr	r3, [pc, #248]	; (80049f0 <HAL_RCC_OscConfig+0x470>)
 80048f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1ee      	bne.n	80048e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004902:	7dfb      	ldrb	r3, [r7, #23]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d105      	bne.n	8004914 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004908:	4b39      	ldr	r3, [pc, #228]	; (80049f0 <HAL_RCC_OscConfig+0x470>)
 800490a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490c:	4a38      	ldr	r2, [pc, #224]	; (80049f0 <HAL_RCC_OscConfig+0x470>)
 800490e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004912:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	2b00      	cmp	r3, #0
 800491a:	f000 80a1 	beq.w	8004a60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800491e:	4b34      	ldr	r3, [pc, #208]	; (80049f0 <HAL_RCC_OscConfig+0x470>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f003 030c 	and.w	r3, r3, #12
 8004926:	2b08      	cmp	r3, #8
 8004928:	d05c      	beq.n	80049e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	2b02      	cmp	r3, #2
 8004930:	d141      	bne.n	80049b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004932:	4b31      	ldr	r3, [pc, #196]	; (80049f8 <HAL_RCC_OscConfig+0x478>)
 8004934:	2200      	movs	r2, #0
 8004936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004938:	f7fd f954 	bl	8001be4 <HAL_GetTick>
 800493c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800493e:	e008      	b.n	8004952 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004940:	f7fd f950 	bl	8001be4 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b02      	cmp	r3, #2
 800494c:	d901      	bls.n	8004952 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e087      	b.n	8004a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004952:	4b27      	ldr	r3, [pc, #156]	; (80049f0 <HAL_RCC_OscConfig+0x470>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1f0      	bne.n	8004940 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	69da      	ldr	r2, [r3, #28]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	431a      	orrs	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496c:	019b      	lsls	r3, r3, #6
 800496e:	431a      	orrs	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004974:	085b      	lsrs	r3, r3, #1
 8004976:	3b01      	subs	r3, #1
 8004978:	041b      	lsls	r3, r3, #16
 800497a:	431a      	orrs	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004980:	061b      	lsls	r3, r3, #24
 8004982:	491b      	ldr	r1, [pc, #108]	; (80049f0 <HAL_RCC_OscConfig+0x470>)
 8004984:	4313      	orrs	r3, r2
 8004986:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004988:	4b1b      	ldr	r3, [pc, #108]	; (80049f8 <HAL_RCC_OscConfig+0x478>)
 800498a:	2201      	movs	r2, #1
 800498c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800498e:	f7fd f929 	bl	8001be4 <HAL_GetTick>
 8004992:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004994:	e008      	b.n	80049a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004996:	f7fd f925 	bl	8001be4 <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d901      	bls.n	80049a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e05c      	b.n	8004a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049a8:	4b11      	ldr	r3, [pc, #68]	; (80049f0 <HAL_RCC_OscConfig+0x470>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d0f0      	beq.n	8004996 <HAL_RCC_OscConfig+0x416>
 80049b4:	e054      	b.n	8004a60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049b6:	4b10      	ldr	r3, [pc, #64]	; (80049f8 <HAL_RCC_OscConfig+0x478>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049bc:	f7fd f912 	bl	8001be4 <HAL_GetTick>
 80049c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049c2:	e008      	b.n	80049d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049c4:	f7fd f90e 	bl	8001be4 <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d901      	bls.n	80049d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e045      	b.n	8004a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049d6:	4b06      	ldr	r3, [pc, #24]	; (80049f0 <HAL_RCC_OscConfig+0x470>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d1f0      	bne.n	80049c4 <HAL_RCC_OscConfig+0x444>
 80049e2:	e03d      	b.n	8004a60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d107      	bne.n	80049fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e038      	b.n	8004a62 <HAL_RCC_OscConfig+0x4e2>
 80049f0:	40023800 	.word	0x40023800
 80049f4:	40007000 	.word	0x40007000
 80049f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049fc:	4b1b      	ldr	r3, [pc, #108]	; (8004a6c <HAL_RCC_OscConfig+0x4ec>)
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d028      	beq.n	8004a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d121      	bne.n	8004a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d11a      	bne.n	8004a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d111      	bne.n	8004a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a42:	085b      	lsrs	r3, r3, #1
 8004a44:	3b01      	subs	r3, #1
 8004a46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d107      	bne.n	8004a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d001      	beq.n	8004a60 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e000      	b.n	8004a62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3718      	adds	r7, #24
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	40023800 	.word	0x40023800

08004a70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d101      	bne.n	8004a84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e0cc      	b.n	8004c1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a84:	4b68      	ldr	r3, [pc, #416]	; (8004c28 <HAL_RCC_ClockConfig+0x1b8>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0307 	and.w	r3, r3, #7
 8004a8c:	683a      	ldr	r2, [r7, #0]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d90c      	bls.n	8004aac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a92:	4b65      	ldr	r3, [pc, #404]	; (8004c28 <HAL_RCC_ClockConfig+0x1b8>)
 8004a94:	683a      	ldr	r2, [r7, #0]
 8004a96:	b2d2      	uxtb	r2, r2
 8004a98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a9a:	4b63      	ldr	r3, [pc, #396]	; (8004c28 <HAL_RCC_ClockConfig+0x1b8>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0307 	and.w	r3, r3, #7
 8004aa2:	683a      	ldr	r2, [r7, #0]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d001      	beq.n	8004aac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e0b8      	b.n	8004c1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0302 	and.w	r3, r3, #2
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d020      	beq.n	8004afa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0304 	and.w	r3, r3, #4
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d005      	beq.n	8004ad0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ac4:	4b59      	ldr	r3, [pc, #356]	; (8004c2c <HAL_RCC_ClockConfig+0x1bc>)
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	4a58      	ldr	r2, [pc, #352]	; (8004c2c <HAL_RCC_ClockConfig+0x1bc>)
 8004aca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ace:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0308 	and.w	r3, r3, #8
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d005      	beq.n	8004ae8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004adc:	4b53      	ldr	r3, [pc, #332]	; (8004c2c <HAL_RCC_ClockConfig+0x1bc>)
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	4a52      	ldr	r2, [pc, #328]	; (8004c2c <HAL_RCC_ClockConfig+0x1bc>)
 8004ae2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ae6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ae8:	4b50      	ldr	r3, [pc, #320]	; (8004c2c <HAL_RCC_ClockConfig+0x1bc>)
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	494d      	ldr	r1, [pc, #308]	; (8004c2c <HAL_RCC_ClockConfig+0x1bc>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0301 	and.w	r3, r3, #1
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d044      	beq.n	8004b90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d107      	bne.n	8004b1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b0e:	4b47      	ldr	r3, [pc, #284]	; (8004c2c <HAL_RCC_ClockConfig+0x1bc>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d119      	bne.n	8004b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e07f      	b.n	8004c1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d003      	beq.n	8004b2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b2a:	2b03      	cmp	r3, #3
 8004b2c:	d107      	bne.n	8004b3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b2e:	4b3f      	ldr	r3, [pc, #252]	; (8004c2c <HAL_RCC_ClockConfig+0x1bc>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d109      	bne.n	8004b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e06f      	b.n	8004c1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b3e:	4b3b      	ldr	r3, [pc, #236]	; (8004c2c <HAL_RCC_ClockConfig+0x1bc>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e067      	b.n	8004c1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b4e:	4b37      	ldr	r3, [pc, #220]	; (8004c2c <HAL_RCC_ClockConfig+0x1bc>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f023 0203 	bic.w	r2, r3, #3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	4934      	ldr	r1, [pc, #208]	; (8004c2c <HAL_RCC_ClockConfig+0x1bc>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b60:	f7fd f840 	bl	8001be4 <HAL_GetTick>
 8004b64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b66:	e00a      	b.n	8004b7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b68:	f7fd f83c 	bl	8001be4 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e04f      	b.n	8004c1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b7e:	4b2b      	ldr	r3, [pc, #172]	; (8004c2c <HAL_RCC_ClockConfig+0x1bc>)
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f003 020c 	and.w	r2, r3, #12
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d1eb      	bne.n	8004b68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b90:	4b25      	ldr	r3, [pc, #148]	; (8004c28 <HAL_RCC_ClockConfig+0x1b8>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0307 	and.w	r3, r3, #7
 8004b98:	683a      	ldr	r2, [r7, #0]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d20c      	bcs.n	8004bb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b9e:	4b22      	ldr	r3, [pc, #136]	; (8004c28 <HAL_RCC_ClockConfig+0x1b8>)
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	b2d2      	uxtb	r2, r2
 8004ba4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ba6:	4b20      	ldr	r3, [pc, #128]	; (8004c28 <HAL_RCC_ClockConfig+0x1b8>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0307 	and.w	r3, r3, #7
 8004bae:	683a      	ldr	r2, [r7, #0]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d001      	beq.n	8004bb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e032      	b.n	8004c1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0304 	and.w	r3, r3, #4
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d008      	beq.n	8004bd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bc4:	4b19      	ldr	r3, [pc, #100]	; (8004c2c <HAL_RCC_ClockConfig+0x1bc>)
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	4916      	ldr	r1, [pc, #88]	; (8004c2c <HAL_RCC_ClockConfig+0x1bc>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0308 	and.w	r3, r3, #8
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d009      	beq.n	8004bf6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004be2:	4b12      	ldr	r3, [pc, #72]	; (8004c2c <HAL_RCC_ClockConfig+0x1bc>)
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	00db      	lsls	r3, r3, #3
 8004bf0:	490e      	ldr	r1, [pc, #56]	; (8004c2c <HAL_RCC_ClockConfig+0x1bc>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004bf6:	f000 f821 	bl	8004c3c <HAL_RCC_GetSysClockFreq>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	4b0b      	ldr	r3, [pc, #44]	; (8004c2c <HAL_RCC_ClockConfig+0x1bc>)
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	091b      	lsrs	r3, r3, #4
 8004c02:	f003 030f 	and.w	r3, r3, #15
 8004c06:	490a      	ldr	r1, [pc, #40]	; (8004c30 <HAL_RCC_ClockConfig+0x1c0>)
 8004c08:	5ccb      	ldrb	r3, [r1, r3]
 8004c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c0e:	4a09      	ldr	r2, [pc, #36]	; (8004c34 <HAL_RCC_ClockConfig+0x1c4>)
 8004c10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c12:	4b09      	ldr	r3, [pc, #36]	; (8004c38 <HAL_RCC_ClockConfig+0x1c8>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7fc fb06 	bl	8001228 <HAL_InitTick>

  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3710      	adds	r7, #16
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	40023c00 	.word	0x40023c00
 8004c2c:	40023800 	.word	0x40023800
 8004c30:	0800daf4 	.word	0x0800daf4
 8004c34:	20000000 	.word	0x20000000
 8004c38:	20000004 	.word	0x20000004

08004c3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c40:	b094      	sub	sp, #80	; 0x50
 8004c42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c44:	2300      	movs	r3, #0
 8004c46:	647b      	str	r3, [r7, #68]	; 0x44
 8004c48:	2300      	movs	r3, #0
 8004c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004c50:	2300      	movs	r3, #0
 8004c52:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c54:	4b79      	ldr	r3, [pc, #484]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f003 030c 	and.w	r3, r3, #12
 8004c5c:	2b08      	cmp	r3, #8
 8004c5e:	d00d      	beq.n	8004c7c <HAL_RCC_GetSysClockFreq+0x40>
 8004c60:	2b08      	cmp	r3, #8
 8004c62:	f200 80e1 	bhi.w	8004e28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d002      	beq.n	8004c70 <HAL_RCC_GetSysClockFreq+0x34>
 8004c6a:	2b04      	cmp	r3, #4
 8004c6c:	d003      	beq.n	8004c76 <HAL_RCC_GetSysClockFreq+0x3a>
 8004c6e:	e0db      	b.n	8004e28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c70:	4b73      	ldr	r3, [pc, #460]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c72:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004c74:	e0db      	b.n	8004e2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c76:	4b73      	ldr	r3, [pc, #460]	; (8004e44 <HAL_RCC_GetSysClockFreq+0x208>)
 8004c78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c7a:	e0d8      	b.n	8004e2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c7c:	4b6f      	ldr	r3, [pc, #444]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c84:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c86:	4b6d      	ldr	r3, [pc, #436]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d063      	beq.n	8004d5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c92:	4b6a      	ldr	r3, [pc, #424]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	099b      	lsrs	r3, r3, #6
 8004c98:	2200      	movs	r2, #0
 8004c9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c9c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ca4:	633b      	str	r3, [r7, #48]	; 0x30
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	637b      	str	r3, [r7, #52]	; 0x34
 8004caa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004cae:	4622      	mov	r2, r4
 8004cb0:	462b      	mov	r3, r5
 8004cb2:	f04f 0000 	mov.w	r0, #0
 8004cb6:	f04f 0100 	mov.w	r1, #0
 8004cba:	0159      	lsls	r1, r3, #5
 8004cbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cc0:	0150      	lsls	r0, r2, #5
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	4621      	mov	r1, r4
 8004cc8:	1a51      	subs	r1, r2, r1
 8004cca:	6139      	str	r1, [r7, #16]
 8004ccc:	4629      	mov	r1, r5
 8004cce:	eb63 0301 	sbc.w	r3, r3, r1
 8004cd2:	617b      	str	r3, [r7, #20]
 8004cd4:	f04f 0200 	mov.w	r2, #0
 8004cd8:	f04f 0300 	mov.w	r3, #0
 8004cdc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ce0:	4659      	mov	r1, fp
 8004ce2:	018b      	lsls	r3, r1, #6
 8004ce4:	4651      	mov	r1, sl
 8004ce6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004cea:	4651      	mov	r1, sl
 8004cec:	018a      	lsls	r2, r1, #6
 8004cee:	4651      	mov	r1, sl
 8004cf0:	ebb2 0801 	subs.w	r8, r2, r1
 8004cf4:	4659      	mov	r1, fp
 8004cf6:	eb63 0901 	sbc.w	r9, r3, r1
 8004cfa:	f04f 0200 	mov.w	r2, #0
 8004cfe:	f04f 0300 	mov.w	r3, #0
 8004d02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d0e:	4690      	mov	r8, r2
 8004d10:	4699      	mov	r9, r3
 8004d12:	4623      	mov	r3, r4
 8004d14:	eb18 0303 	adds.w	r3, r8, r3
 8004d18:	60bb      	str	r3, [r7, #8]
 8004d1a:	462b      	mov	r3, r5
 8004d1c:	eb49 0303 	adc.w	r3, r9, r3
 8004d20:	60fb      	str	r3, [r7, #12]
 8004d22:	f04f 0200 	mov.w	r2, #0
 8004d26:	f04f 0300 	mov.w	r3, #0
 8004d2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d2e:	4629      	mov	r1, r5
 8004d30:	024b      	lsls	r3, r1, #9
 8004d32:	4621      	mov	r1, r4
 8004d34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d38:	4621      	mov	r1, r4
 8004d3a:	024a      	lsls	r2, r1, #9
 8004d3c:	4610      	mov	r0, r2
 8004d3e:	4619      	mov	r1, r3
 8004d40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d42:	2200      	movs	r2, #0
 8004d44:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d4c:	f7fb faa0 	bl	8000290 <__aeabi_uldivmod>
 8004d50:	4602      	mov	r2, r0
 8004d52:	460b      	mov	r3, r1
 8004d54:	4613      	mov	r3, r2
 8004d56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d58:	e058      	b.n	8004e0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d5a:	4b38      	ldr	r3, [pc, #224]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	099b      	lsrs	r3, r3, #6
 8004d60:	2200      	movs	r2, #0
 8004d62:	4618      	mov	r0, r3
 8004d64:	4611      	mov	r1, r2
 8004d66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d6a:	623b      	str	r3, [r7, #32]
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	627b      	str	r3, [r7, #36]	; 0x24
 8004d70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d74:	4642      	mov	r2, r8
 8004d76:	464b      	mov	r3, r9
 8004d78:	f04f 0000 	mov.w	r0, #0
 8004d7c:	f04f 0100 	mov.w	r1, #0
 8004d80:	0159      	lsls	r1, r3, #5
 8004d82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d86:	0150      	lsls	r0, r2, #5
 8004d88:	4602      	mov	r2, r0
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	4641      	mov	r1, r8
 8004d8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d92:	4649      	mov	r1, r9
 8004d94:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d98:	f04f 0200 	mov.w	r2, #0
 8004d9c:	f04f 0300 	mov.w	r3, #0
 8004da0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004da4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004da8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004dac:	ebb2 040a 	subs.w	r4, r2, sl
 8004db0:	eb63 050b 	sbc.w	r5, r3, fp
 8004db4:	f04f 0200 	mov.w	r2, #0
 8004db8:	f04f 0300 	mov.w	r3, #0
 8004dbc:	00eb      	lsls	r3, r5, #3
 8004dbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dc2:	00e2      	lsls	r2, r4, #3
 8004dc4:	4614      	mov	r4, r2
 8004dc6:	461d      	mov	r5, r3
 8004dc8:	4643      	mov	r3, r8
 8004dca:	18e3      	adds	r3, r4, r3
 8004dcc:	603b      	str	r3, [r7, #0]
 8004dce:	464b      	mov	r3, r9
 8004dd0:	eb45 0303 	adc.w	r3, r5, r3
 8004dd4:	607b      	str	r3, [r7, #4]
 8004dd6:	f04f 0200 	mov.w	r2, #0
 8004dda:	f04f 0300 	mov.w	r3, #0
 8004dde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004de2:	4629      	mov	r1, r5
 8004de4:	028b      	lsls	r3, r1, #10
 8004de6:	4621      	mov	r1, r4
 8004de8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004dec:	4621      	mov	r1, r4
 8004dee:	028a      	lsls	r2, r1, #10
 8004df0:	4610      	mov	r0, r2
 8004df2:	4619      	mov	r1, r3
 8004df4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004df6:	2200      	movs	r2, #0
 8004df8:	61bb      	str	r3, [r7, #24]
 8004dfa:	61fa      	str	r2, [r7, #28]
 8004dfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e00:	f7fb fa46 	bl	8000290 <__aeabi_uldivmod>
 8004e04:	4602      	mov	r2, r0
 8004e06:	460b      	mov	r3, r1
 8004e08:	4613      	mov	r3, r2
 8004e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e0c:	4b0b      	ldr	r3, [pc, #44]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	0c1b      	lsrs	r3, r3, #16
 8004e12:	f003 0303 	and.w	r3, r3, #3
 8004e16:	3301      	adds	r3, #1
 8004e18:	005b      	lsls	r3, r3, #1
 8004e1a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004e1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e26:	e002      	b.n	8004e2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e28:	4b05      	ldr	r3, [pc, #20]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e2a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3750      	adds	r7, #80	; 0x50
 8004e34:	46bd      	mov	sp, r7
 8004e36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e3a:	bf00      	nop
 8004e3c:	40023800 	.word	0x40023800
 8004e40:	00f42400 	.word	0x00f42400
 8004e44:	007a1200 	.word	0x007a1200

08004e48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e4c:	4b03      	ldr	r3, [pc, #12]	; (8004e5c <HAL_RCC_GetHCLKFreq+0x14>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	20000000 	.word	0x20000000

08004e60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e64:	f7ff fff0 	bl	8004e48 <HAL_RCC_GetHCLKFreq>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	4b05      	ldr	r3, [pc, #20]	; (8004e80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	0a9b      	lsrs	r3, r3, #10
 8004e70:	f003 0307 	and.w	r3, r3, #7
 8004e74:	4903      	ldr	r1, [pc, #12]	; (8004e84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e76:	5ccb      	ldrb	r3, [r1, r3]
 8004e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	40023800 	.word	0x40023800
 8004e84:	0800db04 	.word	0x0800db04

08004e88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e8c:	f7ff ffdc 	bl	8004e48 <HAL_RCC_GetHCLKFreq>
 8004e90:	4602      	mov	r2, r0
 8004e92:	4b05      	ldr	r3, [pc, #20]	; (8004ea8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	0b5b      	lsrs	r3, r3, #13
 8004e98:	f003 0307 	and.w	r3, r3, #7
 8004e9c:	4903      	ldr	r1, [pc, #12]	; (8004eac <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e9e:	5ccb      	ldrb	r3, [r1, r3]
 8004ea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	40023800 	.word	0x40023800
 8004eac:	0800db04 	.word	0x0800db04

08004eb0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	220f      	movs	r2, #15
 8004ebe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004ec0:	4b12      	ldr	r3, [pc, #72]	; (8004f0c <HAL_RCC_GetClockConfig+0x5c>)
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	f003 0203 	and.w	r2, r3, #3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004ecc:	4b0f      	ldr	r3, [pc, #60]	; (8004f0c <HAL_RCC_GetClockConfig+0x5c>)
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004ed8:	4b0c      	ldr	r3, [pc, #48]	; (8004f0c <HAL_RCC_GetClockConfig+0x5c>)
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004ee4:	4b09      	ldr	r3, [pc, #36]	; (8004f0c <HAL_RCC_GetClockConfig+0x5c>)
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	08db      	lsrs	r3, r3, #3
 8004eea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004ef2:	4b07      	ldr	r3, [pc, #28]	; (8004f10 <HAL_RCC_GetClockConfig+0x60>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0207 	and.w	r2, r3, #7
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	601a      	str	r2, [r3, #0]
}
 8004efe:	bf00      	nop
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	40023800 	.word	0x40023800
 8004f10:	40023c00 	.word	0x40023c00

08004f14 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b086      	sub	sp, #24
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004f20:	2300      	movs	r3, #0
 8004f22:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0301 	and.w	r3, r3, #1
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d105      	bne.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d035      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f3c:	4b62      	ldr	r3, [pc, #392]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004f3e:	2200      	movs	r2, #0
 8004f40:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f42:	f7fc fe4f 	bl	8001be4 <HAL_GetTick>
 8004f46:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f48:	e008      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f4a:	f7fc fe4b 	bl	8001be4 <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d901      	bls.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e0b0      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f5c:	4b5b      	ldr	r3, [pc, #364]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1f0      	bne.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	019a      	lsls	r2, r3, #6
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	071b      	lsls	r3, r3, #28
 8004f74:	4955      	ldr	r1, [pc, #340]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f7c:	4b52      	ldr	r3, [pc, #328]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004f7e:	2201      	movs	r2, #1
 8004f80:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f82:	f7fc fe2f 	bl	8001be4 <HAL_GetTick>
 8004f86:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f88:	e008      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f8a:	f7fc fe2b 	bl	8001be4 <HAL_GetTick>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d901      	bls.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e090      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f9c:	4b4b      	ldr	r3, [pc, #300]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d0f0      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f000 8083 	beq.w	80050bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	60fb      	str	r3, [r7, #12]
 8004fba:	4b44      	ldr	r3, [pc, #272]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbe:	4a43      	ldr	r2, [pc, #268]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8004fc6:	4b41      	ldr	r3, [pc, #260]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fce:	60fb      	str	r3, [r7, #12]
 8004fd0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004fd2:	4b3f      	ldr	r3, [pc, #252]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a3e      	ldr	r2, [pc, #248]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004fd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fdc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004fde:	f7fc fe01 	bl	8001be4 <HAL_GetTick>
 8004fe2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004fe4:	e008      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004fe6:	f7fc fdfd 	bl	8001be4 <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d901      	bls.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e062      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ff8:	4b35      	ldr	r3, [pc, #212]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005000:	2b00      	cmp	r3, #0
 8005002:	d0f0      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005004:	4b31      	ldr	r3, [pc, #196]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005008:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800500c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d02f      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800501c:	693a      	ldr	r2, [r7, #16]
 800501e:	429a      	cmp	r2, r3
 8005020:	d028      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005022:	4b2a      	ldr	r3, [pc, #168]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005026:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800502a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800502c:	4b29      	ldr	r3, [pc, #164]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800502e:	2201      	movs	r2, #1
 8005030:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005032:	4b28      	ldr	r3, [pc, #160]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005034:	2200      	movs	r2, #0
 8005036:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005038:	4a24      	ldr	r2, [pc, #144]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800503e:	4b23      	ldr	r3, [pc, #140]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005042:	f003 0301 	and.w	r3, r3, #1
 8005046:	2b01      	cmp	r3, #1
 8005048:	d114      	bne.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800504a:	f7fc fdcb 	bl	8001be4 <HAL_GetTick>
 800504e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005050:	e00a      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005052:	f7fc fdc7 	bl	8001be4 <HAL_GetTick>
 8005056:	4602      	mov	r2, r0
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005060:	4293      	cmp	r3, r2
 8005062:	d901      	bls.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005064:	2303      	movs	r3, #3
 8005066:	e02a      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005068:	4b18      	ldr	r3, [pc, #96]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800506a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800506c:	f003 0302 	and.w	r3, r3, #2
 8005070:	2b00      	cmp	r3, #0
 8005072:	d0ee      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800507c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005080:	d10d      	bne.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005082:	4b12      	ldr	r3, [pc, #72]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005092:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005096:	490d      	ldr	r1, [pc, #52]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005098:	4313      	orrs	r3, r2
 800509a:	608b      	str	r3, [r1, #8]
 800509c:	e005      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x196>
 800509e:	4b0b      	ldr	r3, [pc, #44]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	4a0a      	ldr	r2, [pc, #40]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050a4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80050a8:	6093      	str	r3, [r2, #8]
 80050aa:	4b08      	ldr	r3, [pc, #32]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050b6:	4905      	ldr	r1, [pc, #20]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050b8:	4313      	orrs	r3, r2
 80050ba:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3718      	adds	r7, #24
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	42470068 	.word	0x42470068
 80050cc:	40023800 	.word	0x40023800
 80050d0:	40007000 	.word	0x40007000
 80050d4:	42470e40 	.word	0x42470e40

080050d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80050d8:	b480      	push	{r7}
 80050da:	b087      	sub	sp, #28
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80050e0:	2300      	movs	r3, #0
 80050e2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80050e4:	2300      	movs	r3, #0
 80050e6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80050e8:	2300      	movs	r3, #0
 80050ea:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80050ec:	2300      	movs	r3, #0
 80050ee:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d13e      	bne.n	8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80050f6:	4b23      	ldr	r3, [pc, #140]	; (8005184 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050fe:	60fb      	str	r3, [r7, #12]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d005      	beq.n	8005112 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2b01      	cmp	r3, #1
 800510a:	d12f      	bne.n	800516c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800510c:	4b1e      	ldr	r3, [pc, #120]	; (8005188 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800510e:	617b      	str	r3, [r7, #20]
          break;
 8005110:	e02f      	b.n	8005172 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005112:	4b1c      	ldr	r3, [pc, #112]	; (8005184 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800511a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800511e:	d108      	bne.n	8005132 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005120:	4b18      	ldr	r3, [pc, #96]	; (8005184 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005128:	4a18      	ldr	r2, [pc, #96]	; (800518c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800512a:	fbb2 f3f3 	udiv	r3, r2, r3
 800512e:	613b      	str	r3, [r7, #16]
 8005130:	e007      	b.n	8005142 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005132:	4b14      	ldr	r3, [pc, #80]	; (8005184 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800513a:	4a15      	ldr	r2, [pc, #84]	; (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800513c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005140:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005142:	4b10      	ldr	r3, [pc, #64]	; (8005184 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005144:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005148:	099b      	lsrs	r3, r3, #6
 800514a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	fb02 f303 	mul.w	r3, r2, r3
 8005154:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005156:	4b0b      	ldr	r3, [pc, #44]	; (8005184 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005158:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800515c:	0f1b      	lsrs	r3, r3, #28
 800515e:	f003 0307 	and.w	r3, r3, #7
 8005162:	68ba      	ldr	r2, [r7, #8]
 8005164:	fbb2 f3f3 	udiv	r3, r2, r3
 8005168:	617b      	str	r3, [r7, #20]
          break;
 800516a:	e002      	b.n	8005172 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800516c:	2300      	movs	r3, #0
 800516e:	617b      	str	r3, [r7, #20]
          break;
 8005170:	bf00      	nop
        }
      }
      break;
 8005172:	bf00      	nop
    }
  }
  return frequency;
 8005174:	697b      	ldr	r3, [r7, #20]
}
 8005176:	4618      	mov	r0, r3
 8005178:	371c      	adds	r7, #28
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	40023800 	.word	0x40023800
 8005188:	00bb8000 	.word	0x00bb8000
 800518c:	007a1200 	.word	0x007a1200
 8005190:	00f42400 	.word	0x00f42400

08005194 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d101      	bne.n	80051a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e07b      	b.n	800529e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d108      	bne.n	80051c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051b6:	d009      	beq.n	80051cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	61da      	str	r2, [r3, #28]
 80051be:	e005      	b.n	80051cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d106      	bne.n	80051ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f7fb ff5e 	bl	80010a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2202      	movs	r2, #2
 80051f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005202:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005214:	431a      	orrs	r2, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800521e:	431a      	orrs	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	f003 0302 	and.w	r3, r3, #2
 8005228:	431a      	orrs	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	f003 0301 	and.w	r3, r3, #1
 8005232:	431a      	orrs	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800523c:	431a      	orrs	r2, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	69db      	ldr	r3, [r3, #28]
 8005242:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005246:	431a      	orrs	r2, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a1b      	ldr	r3, [r3, #32]
 800524c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005250:	ea42 0103 	orr.w	r1, r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005258:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	430a      	orrs	r2, r1
 8005262:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	699b      	ldr	r3, [r3, #24]
 8005268:	0c1b      	lsrs	r3, r3, #16
 800526a:	f003 0104 	and.w	r1, r3, #4
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005272:	f003 0210 	and.w	r2, r3, #16
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	430a      	orrs	r2, r1
 800527c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	69da      	ldr	r2, [r3, #28]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800528c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3708      	adds	r7, #8
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b082      	sub	sp, #8
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d101      	bne.n	80052b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e041      	b.n	800533c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d106      	bne.n	80052d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f7fb ff33 	bl	8001138 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2202      	movs	r2, #2
 80052d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	3304      	adds	r3, #4
 80052e2:	4619      	mov	r1, r3
 80052e4:	4610      	mov	r0, r2
 80052e6:	f000 fce1 	bl	8005cac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2201      	movs	r2, #1
 8005326:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2201      	movs	r2, #1
 8005336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3708      	adds	r7, #8
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005352:	b2db      	uxtb	r3, r3
 8005354:	2b01      	cmp	r3, #1
 8005356:	d001      	beq.n	800535c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e046      	b.n	80053ea <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2202      	movs	r2, #2
 8005360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a23      	ldr	r2, [pc, #140]	; (80053f8 <HAL_TIM_Base_Start+0xb4>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d022      	beq.n	80053b4 <HAL_TIM_Base_Start+0x70>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005376:	d01d      	beq.n	80053b4 <HAL_TIM_Base_Start+0x70>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a1f      	ldr	r2, [pc, #124]	; (80053fc <HAL_TIM_Base_Start+0xb8>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d018      	beq.n	80053b4 <HAL_TIM_Base_Start+0x70>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a1e      	ldr	r2, [pc, #120]	; (8005400 <HAL_TIM_Base_Start+0xbc>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d013      	beq.n	80053b4 <HAL_TIM_Base_Start+0x70>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a1c      	ldr	r2, [pc, #112]	; (8005404 <HAL_TIM_Base_Start+0xc0>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d00e      	beq.n	80053b4 <HAL_TIM_Base_Start+0x70>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a1b      	ldr	r2, [pc, #108]	; (8005408 <HAL_TIM_Base_Start+0xc4>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d009      	beq.n	80053b4 <HAL_TIM_Base_Start+0x70>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a19      	ldr	r2, [pc, #100]	; (800540c <HAL_TIM_Base_Start+0xc8>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d004      	beq.n	80053b4 <HAL_TIM_Base_Start+0x70>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a18      	ldr	r2, [pc, #96]	; (8005410 <HAL_TIM_Base_Start+0xcc>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d111      	bne.n	80053d8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f003 0307 	and.w	r3, r3, #7
 80053be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2b06      	cmp	r3, #6
 80053c4:	d010      	beq.n	80053e8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f042 0201 	orr.w	r2, r2, #1
 80053d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053d6:	e007      	b.n	80053e8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f042 0201 	orr.w	r2, r2, #1
 80053e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3714      	adds	r7, #20
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	40010000 	.word	0x40010000
 80053fc:	40000400 	.word	0x40000400
 8005400:	40000800 	.word	0x40000800
 8005404:	40000c00 	.word	0x40000c00
 8005408:	40010400 	.word	0x40010400
 800540c:	40014000 	.word	0x40014000
 8005410:	40001800 	.word	0x40001800

08005414 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005422:	b2db      	uxtb	r3, r3
 8005424:	2b01      	cmp	r3, #1
 8005426:	d001      	beq.n	800542c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e04e      	b.n	80054ca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2202      	movs	r2, #2
 8005430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68da      	ldr	r2, [r3, #12]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f042 0201 	orr.w	r2, r2, #1
 8005442:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a23      	ldr	r2, [pc, #140]	; (80054d8 <HAL_TIM_Base_Start_IT+0xc4>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d022      	beq.n	8005494 <HAL_TIM_Base_Start_IT+0x80>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005456:	d01d      	beq.n	8005494 <HAL_TIM_Base_Start_IT+0x80>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a1f      	ldr	r2, [pc, #124]	; (80054dc <HAL_TIM_Base_Start_IT+0xc8>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d018      	beq.n	8005494 <HAL_TIM_Base_Start_IT+0x80>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a1e      	ldr	r2, [pc, #120]	; (80054e0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d013      	beq.n	8005494 <HAL_TIM_Base_Start_IT+0x80>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a1c      	ldr	r2, [pc, #112]	; (80054e4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d00e      	beq.n	8005494 <HAL_TIM_Base_Start_IT+0x80>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a1b      	ldr	r2, [pc, #108]	; (80054e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d009      	beq.n	8005494 <HAL_TIM_Base_Start_IT+0x80>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a19      	ldr	r2, [pc, #100]	; (80054ec <HAL_TIM_Base_Start_IT+0xd8>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d004      	beq.n	8005494 <HAL_TIM_Base_Start_IT+0x80>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a18      	ldr	r2, [pc, #96]	; (80054f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d111      	bne.n	80054b8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f003 0307 	and.w	r3, r3, #7
 800549e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2b06      	cmp	r3, #6
 80054a4:	d010      	beq.n	80054c8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f042 0201 	orr.w	r2, r2, #1
 80054b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054b6:	e007      	b.n	80054c8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f042 0201 	orr.w	r2, r2, #1
 80054c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3714      	adds	r7, #20
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	40010000 	.word	0x40010000
 80054dc:	40000400 	.word	0x40000400
 80054e0:	40000800 	.word	0x40000800
 80054e4:	40000c00 	.word	0x40000c00
 80054e8:	40010400 	.word	0x40010400
 80054ec:	40014000 	.word	0x40014000
 80054f0:	40001800 	.word	0x40001800

080054f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d101      	bne.n	8005506 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e041      	b.n	800558a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d106      	bne.n	8005520 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 f839 	bl	8005592 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2202      	movs	r2, #2
 8005524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	3304      	adds	r3, #4
 8005530:	4619      	mov	r1, r3
 8005532:	4610      	mov	r0, r2
 8005534:	f000 fbba 	bl	8005cac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3708      	adds	r7, #8
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}

08005592 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005592:	b480      	push	{r7}
 8005594:	b083      	sub	sp, #12
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800559a:	bf00      	nop
 800559c:	370c      	adds	r7, #12
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
	...

080055a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d109      	bne.n	80055cc <HAL_TIM_PWM_Start+0x24>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	bf14      	ite	ne
 80055c4:	2301      	movne	r3, #1
 80055c6:	2300      	moveq	r3, #0
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	e022      	b.n	8005612 <HAL_TIM_PWM_Start+0x6a>
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	2b04      	cmp	r3, #4
 80055d0:	d109      	bne.n	80055e6 <HAL_TIM_PWM_Start+0x3e>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b01      	cmp	r3, #1
 80055dc:	bf14      	ite	ne
 80055de:	2301      	movne	r3, #1
 80055e0:	2300      	moveq	r3, #0
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	e015      	b.n	8005612 <HAL_TIM_PWM_Start+0x6a>
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	2b08      	cmp	r3, #8
 80055ea:	d109      	bne.n	8005600 <HAL_TIM_PWM_Start+0x58>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	bf14      	ite	ne
 80055f8:	2301      	movne	r3, #1
 80055fa:	2300      	moveq	r3, #0
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	e008      	b.n	8005612 <HAL_TIM_PWM_Start+0x6a>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005606:	b2db      	uxtb	r3, r3
 8005608:	2b01      	cmp	r3, #1
 800560a:	bf14      	ite	ne
 800560c:	2301      	movne	r3, #1
 800560e:	2300      	moveq	r3, #0
 8005610:	b2db      	uxtb	r3, r3
 8005612:	2b00      	cmp	r3, #0
 8005614:	d001      	beq.n	800561a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e07c      	b.n	8005714 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d104      	bne.n	800562a <HAL_TIM_PWM_Start+0x82>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2202      	movs	r2, #2
 8005624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005628:	e013      	b.n	8005652 <HAL_TIM_PWM_Start+0xaa>
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	2b04      	cmp	r3, #4
 800562e:	d104      	bne.n	800563a <HAL_TIM_PWM_Start+0x92>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2202      	movs	r2, #2
 8005634:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005638:	e00b      	b.n	8005652 <HAL_TIM_PWM_Start+0xaa>
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	2b08      	cmp	r3, #8
 800563e:	d104      	bne.n	800564a <HAL_TIM_PWM_Start+0xa2>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2202      	movs	r2, #2
 8005644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005648:	e003      	b.n	8005652 <HAL_TIM_PWM_Start+0xaa>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2202      	movs	r2, #2
 800564e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2201      	movs	r2, #1
 8005658:	6839      	ldr	r1, [r7, #0]
 800565a:	4618      	mov	r0, r3
 800565c:	f000 fe10 	bl	8006280 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a2d      	ldr	r2, [pc, #180]	; (800571c <HAL_TIM_PWM_Start+0x174>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d004      	beq.n	8005674 <HAL_TIM_PWM_Start+0xcc>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a2c      	ldr	r2, [pc, #176]	; (8005720 <HAL_TIM_PWM_Start+0x178>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d101      	bne.n	8005678 <HAL_TIM_PWM_Start+0xd0>
 8005674:	2301      	movs	r3, #1
 8005676:	e000      	b.n	800567a <HAL_TIM_PWM_Start+0xd2>
 8005678:	2300      	movs	r3, #0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d007      	beq.n	800568e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800568c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a22      	ldr	r2, [pc, #136]	; (800571c <HAL_TIM_PWM_Start+0x174>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d022      	beq.n	80056de <HAL_TIM_PWM_Start+0x136>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056a0:	d01d      	beq.n	80056de <HAL_TIM_PWM_Start+0x136>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a1f      	ldr	r2, [pc, #124]	; (8005724 <HAL_TIM_PWM_Start+0x17c>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d018      	beq.n	80056de <HAL_TIM_PWM_Start+0x136>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a1d      	ldr	r2, [pc, #116]	; (8005728 <HAL_TIM_PWM_Start+0x180>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d013      	beq.n	80056de <HAL_TIM_PWM_Start+0x136>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a1c      	ldr	r2, [pc, #112]	; (800572c <HAL_TIM_PWM_Start+0x184>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d00e      	beq.n	80056de <HAL_TIM_PWM_Start+0x136>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a16      	ldr	r2, [pc, #88]	; (8005720 <HAL_TIM_PWM_Start+0x178>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d009      	beq.n	80056de <HAL_TIM_PWM_Start+0x136>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a18      	ldr	r2, [pc, #96]	; (8005730 <HAL_TIM_PWM_Start+0x188>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d004      	beq.n	80056de <HAL_TIM_PWM_Start+0x136>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a16      	ldr	r2, [pc, #88]	; (8005734 <HAL_TIM_PWM_Start+0x18c>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d111      	bne.n	8005702 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	f003 0307 	and.w	r3, r3, #7
 80056e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2b06      	cmp	r3, #6
 80056ee:	d010      	beq.n	8005712 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f042 0201 	orr.w	r2, r2, #1
 80056fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005700:	e007      	b.n	8005712 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f042 0201 	orr.w	r2, r2, #1
 8005710:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}
 800571c:	40010000 	.word	0x40010000
 8005720:	40010400 	.word	0x40010400
 8005724:	40000400 	.word	0x40000400
 8005728:	40000800 	.word	0x40000800
 800572c:	40000c00 	.word	0x40000c00
 8005730:	40014000 	.word	0x40014000
 8005734:	40001800 	.word	0x40001800

08005738 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	f003 0302 	and.w	r3, r3, #2
 800574a:	2b02      	cmp	r3, #2
 800574c:	d122      	bne.n	8005794 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	f003 0302 	and.w	r3, r3, #2
 8005758:	2b02      	cmp	r3, #2
 800575a:	d11b      	bne.n	8005794 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f06f 0202 	mvn.w	r2, #2
 8005764:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2201      	movs	r2, #1
 800576a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	f003 0303 	and.w	r3, r3, #3
 8005776:	2b00      	cmp	r3, #0
 8005778:	d003      	beq.n	8005782 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 fa77 	bl	8005c6e <HAL_TIM_IC_CaptureCallback>
 8005780:	e005      	b.n	800578e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 fa69 	bl	8005c5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 fa7a 	bl	8005c82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	f003 0304 	and.w	r3, r3, #4
 800579e:	2b04      	cmp	r3, #4
 80057a0:	d122      	bne.n	80057e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	f003 0304 	and.w	r3, r3, #4
 80057ac:	2b04      	cmp	r3, #4
 80057ae:	d11b      	bne.n	80057e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f06f 0204 	mvn.w	r2, #4
 80057b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2202      	movs	r2, #2
 80057be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d003      	beq.n	80057d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 fa4d 	bl	8005c6e <HAL_TIM_IC_CaptureCallback>
 80057d4:	e005      	b.n	80057e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 fa3f 	bl	8005c5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 fa50 	bl	8005c82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	f003 0308 	and.w	r3, r3, #8
 80057f2:	2b08      	cmp	r3, #8
 80057f4:	d122      	bne.n	800583c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	f003 0308 	and.w	r3, r3, #8
 8005800:	2b08      	cmp	r3, #8
 8005802:	d11b      	bne.n	800583c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f06f 0208 	mvn.w	r2, #8
 800580c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2204      	movs	r2, #4
 8005812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	69db      	ldr	r3, [r3, #28]
 800581a:	f003 0303 	and.w	r3, r3, #3
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 fa23 	bl	8005c6e <HAL_TIM_IC_CaptureCallback>
 8005828:	e005      	b.n	8005836 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 fa15 	bl	8005c5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 fa26 	bl	8005c82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	f003 0310 	and.w	r3, r3, #16
 8005846:	2b10      	cmp	r3, #16
 8005848:	d122      	bne.n	8005890 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	f003 0310 	and.w	r3, r3, #16
 8005854:	2b10      	cmp	r3, #16
 8005856:	d11b      	bne.n	8005890 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f06f 0210 	mvn.w	r2, #16
 8005860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2208      	movs	r2, #8
 8005866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	69db      	ldr	r3, [r3, #28]
 800586e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005872:	2b00      	cmp	r3, #0
 8005874:	d003      	beq.n	800587e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 f9f9 	bl	8005c6e <HAL_TIM_IC_CaptureCallback>
 800587c:	e005      	b.n	800588a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 f9eb 	bl	8005c5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 f9fc 	bl	8005c82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	f003 0301 	and.w	r3, r3, #1
 800589a:	2b01      	cmp	r3, #1
 800589c:	d10e      	bne.n	80058bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	f003 0301 	and.w	r3, r3, #1
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d107      	bne.n	80058bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f06f 0201 	mvn.w	r2, #1
 80058b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f7fb fadc 	bl	8000e74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058c6:	2b80      	cmp	r3, #128	; 0x80
 80058c8:	d10e      	bne.n	80058e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058d4:	2b80      	cmp	r3, #128	; 0x80
 80058d6:	d107      	bne.n	80058e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80058e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 fd78 	bl	80063d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f2:	2b40      	cmp	r3, #64	; 0x40
 80058f4:	d10e      	bne.n	8005914 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005900:	2b40      	cmp	r3, #64	; 0x40
 8005902:	d107      	bne.n	8005914 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800590c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 f9c1 	bl	8005c96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	f003 0320 	and.w	r3, r3, #32
 800591e:	2b20      	cmp	r3, #32
 8005920:	d10e      	bne.n	8005940 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	f003 0320 	and.w	r3, r3, #32
 800592c:	2b20      	cmp	r3, #32
 800592e:	d107      	bne.n	8005940 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f06f 0220 	mvn.w	r2, #32
 8005938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 fd42 	bl	80063c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005940:	bf00      	nop
 8005942:	3708      	adds	r7, #8
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b086      	sub	sp, #24
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005954:	2300      	movs	r3, #0
 8005956:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800595e:	2b01      	cmp	r3, #1
 8005960:	d101      	bne.n	8005966 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005962:	2302      	movs	r3, #2
 8005964:	e0ae      	b.n	8005ac4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2201      	movs	r2, #1
 800596a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2b0c      	cmp	r3, #12
 8005972:	f200 809f 	bhi.w	8005ab4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005976:	a201      	add	r2, pc, #4	; (adr r2, 800597c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800597c:	080059b1 	.word	0x080059b1
 8005980:	08005ab5 	.word	0x08005ab5
 8005984:	08005ab5 	.word	0x08005ab5
 8005988:	08005ab5 	.word	0x08005ab5
 800598c:	080059f1 	.word	0x080059f1
 8005990:	08005ab5 	.word	0x08005ab5
 8005994:	08005ab5 	.word	0x08005ab5
 8005998:	08005ab5 	.word	0x08005ab5
 800599c:	08005a33 	.word	0x08005a33
 80059a0:	08005ab5 	.word	0x08005ab5
 80059a4:	08005ab5 	.word	0x08005ab5
 80059a8:	08005ab5 	.word	0x08005ab5
 80059ac:	08005a73 	.word	0x08005a73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68b9      	ldr	r1, [r7, #8]
 80059b6:	4618      	mov	r0, r3
 80059b8:	f000 fa18 	bl	8005dec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	699a      	ldr	r2, [r3, #24]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f042 0208 	orr.w	r2, r2, #8
 80059ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	699a      	ldr	r2, [r3, #24]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f022 0204 	bic.w	r2, r2, #4
 80059da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6999      	ldr	r1, [r3, #24]
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	691a      	ldr	r2, [r3, #16]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	430a      	orrs	r2, r1
 80059ec:	619a      	str	r2, [r3, #24]
      break;
 80059ee:	e064      	b.n	8005aba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68b9      	ldr	r1, [r7, #8]
 80059f6:	4618      	mov	r0, r3
 80059f8:	f000 fa68 	bl	8005ecc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	699a      	ldr	r2, [r3, #24]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	699a      	ldr	r2, [r3, #24]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	6999      	ldr	r1, [r3, #24]
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	021a      	lsls	r2, r3, #8
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	430a      	orrs	r2, r1
 8005a2e:	619a      	str	r2, [r3, #24]
      break;
 8005a30:	e043      	b.n	8005aba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68b9      	ldr	r1, [r7, #8]
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f000 fabd 	bl	8005fb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	69da      	ldr	r2, [r3, #28]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f042 0208 	orr.w	r2, r2, #8
 8005a4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	69da      	ldr	r2, [r3, #28]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f022 0204 	bic.w	r2, r2, #4
 8005a5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	69d9      	ldr	r1, [r3, #28]
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	691a      	ldr	r2, [r3, #16]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	430a      	orrs	r2, r1
 8005a6e:	61da      	str	r2, [r3, #28]
      break;
 8005a70:	e023      	b.n	8005aba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68b9      	ldr	r1, [r7, #8]
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f000 fb11 	bl	80060a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	69da      	ldr	r2, [r3, #28]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	69da      	ldr	r2, [r3, #28]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	69d9      	ldr	r1, [r3, #28]
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	021a      	lsls	r2, r3, #8
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	61da      	str	r2, [r3, #28]
      break;
 8005ab2:	e002      	b.n	8005aba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	75fb      	strb	r3, [r7, #23]
      break;
 8005ab8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ac2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3718      	adds	r7, #24
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d101      	bne.n	8005ae8 <HAL_TIM_ConfigClockSource+0x1c>
 8005ae4:	2302      	movs	r3, #2
 8005ae6:	e0b4      	b.n	8005c52 <HAL_TIM_ConfigClockSource+0x186>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2202      	movs	r2, #2
 8005af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005b06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68ba      	ldr	r2, [r7, #8]
 8005b16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b20:	d03e      	beq.n	8005ba0 <HAL_TIM_ConfigClockSource+0xd4>
 8005b22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b26:	f200 8087 	bhi.w	8005c38 <HAL_TIM_ConfigClockSource+0x16c>
 8005b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b2e:	f000 8086 	beq.w	8005c3e <HAL_TIM_ConfigClockSource+0x172>
 8005b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b36:	d87f      	bhi.n	8005c38 <HAL_TIM_ConfigClockSource+0x16c>
 8005b38:	2b70      	cmp	r3, #112	; 0x70
 8005b3a:	d01a      	beq.n	8005b72 <HAL_TIM_ConfigClockSource+0xa6>
 8005b3c:	2b70      	cmp	r3, #112	; 0x70
 8005b3e:	d87b      	bhi.n	8005c38 <HAL_TIM_ConfigClockSource+0x16c>
 8005b40:	2b60      	cmp	r3, #96	; 0x60
 8005b42:	d050      	beq.n	8005be6 <HAL_TIM_ConfigClockSource+0x11a>
 8005b44:	2b60      	cmp	r3, #96	; 0x60
 8005b46:	d877      	bhi.n	8005c38 <HAL_TIM_ConfigClockSource+0x16c>
 8005b48:	2b50      	cmp	r3, #80	; 0x50
 8005b4a:	d03c      	beq.n	8005bc6 <HAL_TIM_ConfigClockSource+0xfa>
 8005b4c:	2b50      	cmp	r3, #80	; 0x50
 8005b4e:	d873      	bhi.n	8005c38 <HAL_TIM_ConfigClockSource+0x16c>
 8005b50:	2b40      	cmp	r3, #64	; 0x40
 8005b52:	d058      	beq.n	8005c06 <HAL_TIM_ConfigClockSource+0x13a>
 8005b54:	2b40      	cmp	r3, #64	; 0x40
 8005b56:	d86f      	bhi.n	8005c38 <HAL_TIM_ConfigClockSource+0x16c>
 8005b58:	2b30      	cmp	r3, #48	; 0x30
 8005b5a:	d064      	beq.n	8005c26 <HAL_TIM_ConfigClockSource+0x15a>
 8005b5c:	2b30      	cmp	r3, #48	; 0x30
 8005b5e:	d86b      	bhi.n	8005c38 <HAL_TIM_ConfigClockSource+0x16c>
 8005b60:	2b20      	cmp	r3, #32
 8005b62:	d060      	beq.n	8005c26 <HAL_TIM_ConfigClockSource+0x15a>
 8005b64:	2b20      	cmp	r3, #32
 8005b66:	d867      	bhi.n	8005c38 <HAL_TIM_ConfigClockSource+0x16c>
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d05c      	beq.n	8005c26 <HAL_TIM_ConfigClockSource+0x15a>
 8005b6c:	2b10      	cmp	r3, #16
 8005b6e:	d05a      	beq.n	8005c26 <HAL_TIM_ConfigClockSource+0x15a>
 8005b70:	e062      	b.n	8005c38 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6818      	ldr	r0, [r3, #0]
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	6899      	ldr	r1, [r3, #8]
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	685a      	ldr	r2, [r3, #4]
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	f000 fb5d 	bl	8006240 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68ba      	ldr	r2, [r7, #8]
 8005b9c:	609a      	str	r2, [r3, #8]
      break;
 8005b9e:	e04f      	b.n	8005c40 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6818      	ldr	r0, [r3, #0]
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	6899      	ldr	r1, [r3, #8]
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	685a      	ldr	r2, [r3, #4]
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	f000 fb46 	bl	8006240 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	689a      	ldr	r2, [r3, #8]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bc2:	609a      	str	r2, [r3, #8]
      break;
 8005bc4:	e03c      	b.n	8005c40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6818      	ldr	r0, [r3, #0]
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	6859      	ldr	r1, [r3, #4]
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	f000 faba 	bl	800614c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2150      	movs	r1, #80	; 0x50
 8005bde:	4618      	mov	r0, r3
 8005be0:	f000 fb13 	bl	800620a <TIM_ITRx_SetConfig>
      break;
 8005be4:	e02c      	b.n	8005c40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6818      	ldr	r0, [r3, #0]
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	6859      	ldr	r1, [r3, #4]
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	f000 fad9 	bl	80061aa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2160      	movs	r1, #96	; 0x60
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f000 fb03 	bl	800620a <TIM_ITRx_SetConfig>
      break;
 8005c04:	e01c      	b.n	8005c40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6818      	ldr	r0, [r3, #0]
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	6859      	ldr	r1, [r3, #4]
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	461a      	mov	r2, r3
 8005c14:	f000 fa9a 	bl	800614c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2140      	movs	r1, #64	; 0x40
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f000 faf3 	bl	800620a <TIM_ITRx_SetConfig>
      break;
 8005c24:	e00c      	b.n	8005c40 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4619      	mov	r1, r3
 8005c30:	4610      	mov	r0, r2
 8005c32:	f000 faea 	bl	800620a <TIM_ITRx_SetConfig>
      break;
 8005c36:	e003      	b.n	8005c40 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8005c3c:	e000      	b.n	8005c40 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005c3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}

08005c5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c5a:	b480      	push	{r7}
 8005c5c:	b083      	sub	sp, #12
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c62:	bf00      	nop
 8005c64:	370c      	adds	r7, #12
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr

08005c6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c6e:	b480      	push	{r7}
 8005c70:	b083      	sub	sp, #12
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c76:	bf00      	nop
 8005c78:	370c      	adds	r7, #12
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr

08005c82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c82:	b480      	push	{r7}
 8005c84:	b083      	sub	sp, #12
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c8a:	bf00      	nop
 8005c8c:	370c      	adds	r7, #12
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr

08005c96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c96:	b480      	push	{r7}
 8005c98:	b083      	sub	sp, #12
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c9e:	bf00      	nop
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
	...

08005cac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a40      	ldr	r2, [pc, #256]	; (8005dc0 <TIM_Base_SetConfig+0x114>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d013      	beq.n	8005cec <TIM_Base_SetConfig+0x40>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cca:	d00f      	beq.n	8005cec <TIM_Base_SetConfig+0x40>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a3d      	ldr	r2, [pc, #244]	; (8005dc4 <TIM_Base_SetConfig+0x118>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d00b      	beq.n	8005cec <TIM_Base_SetConfig+0x40>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a3c      	ldr	r2, [pc, #240]	; (8005dc8 <TIM_Base_SetConfig+0x11c>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d007      	beq.n	8005cec <TIM_Base_SetConfig+0x40>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a3b      	ldr	r2, [pc, #236]	; (8005dcc <TIM_Base_SetConfig+0x120>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d003      	beq.n	8005cec <TIM_Base_SetConfig+0x40>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a3a      	ldr	r2, [pc, #232]	; (8005dd0 <TIM_Base_SetConfig+0x124>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d108      	bne.n	8005cfe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a2f      	ldr	r2, [pc, #188]	; (8005dc0 <TIM_Base_SetConfig+0x114>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d02b      	beq.n	8005d5e <TIM_Base_SetConfig+0xb2>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d0c:	d027      	beq.n	8005d5e <TIM_Base_SetConfig+0xb2>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a2c      	ldr	r2, [pc, #176]	; (8005dc4 <TIM_Base_SetConfig+0x118>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d023      	beq.n	8005d5e <TIM_Base_SetConfig+0xb2>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a2b      	ldr	r2, [pc, #172]	; (8005dc8 <TIM_Base_SetConfig+0x11c>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d01f      	beq.n	8005d5e <TIM_Base_SetConfig+0xb2>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a2a      	ldr	r2, [pc, #168]	; (8005dcc <TIM_Base_SetConfig+0x120>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d01b      	beq.n	8005d5e <TIM_Base_SetConfig+0xb2>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a29      	ldr	r2, [pc, #164]	; (8005dd0 <TIM_Base_SetConfig+0x124>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d017      	beq.n	8005d5e <TIM_Base_SetConfig+0xb2>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a28      	ldr	r2, [pc, #160]	; (8005dd4 <TIM_Base_SetConfig+0x128>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d013      	beq.n	8005d5e <TIM_Base_SetConfig+0xb2>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a27      	ldr	r2, [pc, #156]	; (8005dd8 <TIM_Base_SetConfig+0x12c>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d00f      	beq.n	8005d5e <TIM_Base_SetConfig+0xb2>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a26      	ldr	r2, [pc, #152]	; (8005ddc <TIM_Base_SetConfig+0x130>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d00b      	beq.n	8005d5e <TIM_Base_SetConfig+0xb2>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a25      	ldr	r2, [pc, #148]	; (8005de0 <TIM_Base_SetConfig+0x134>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d007      	beq.n	8005d5e <TIM_Base_SetConfig+0xb2>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a24      	ldr	r2, [pc, #144]	; (8005de4 <TIM_Base_SetConfig+0x138>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d003      	beq.n	8005d5e <TIM_Base_SetConfig+0xb2>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a23      	ldr	r2, [pc, #140]	; (8005de8 <TIM_Base_SetConfig+0x13c>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d108      	bne.n	8005d70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	695b      	ldr	r3, [r3, #20]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	689a      	ldr	r2, [r3, #8]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a0a      	ldr	r2, [pc, #40]	; (8005dc0 <TIM_Base_SetConfig+0x114>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d003      	beq.n	8005da4 <TIM_Base_SetConfig+0xf8>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a0c      	ldr	r2, [pc, #48]	; (8005dd0 <TIM_Base_SetConfig+0x124>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d103      	bne.n	8005dac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	691a      	ldr	r2, [r3, #16]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	615a      	str	r2, [r3, #20]
}
 8005db2:	bf00      	nop
 8005db4:	3714      	adds	r7, #20
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	40010000 	.word	0x40010000
 8005dc4:	40000400 	.word	0x40000400
 8005dc8:	40000800 	.word	0x40000800
 8005dcc:	40000c00 	.word	0x40000c00
 8005dd0:	40010400 	.word	0x40010400
 8005dd4:	40014000 	.word	0x40014000
 8005dd8:	40014400 	.word	0x40014400
 8005ddc:	40014800 	.word	0x40014800
 8005de0:	40001800 	.word	0x40001800
 8005de4:	40001c00 	.word	0x40001c00
 8005de8:	40002000 	.word	0x40002000

08005dec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b087      	sub	sp, #28
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	f023 0201 	bic.w	r2, r3, #1
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a1b      	ldr	r3, [r3, #32]
 8005e06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f023 0303 	bic.w	r3, r3, #3
 8005e22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	f023 0302 	bic.w	r3, r3, #2
 8005e34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a20      	ldr	r2, [pc, #128]	; (8005ec4 <TIM_OC1_SetConfig+0xd8>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d003      	beq.n	8005e50 <TIM_OC1_SetConfig+0x64>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a1f      	ldr	r2, [pc, #124]	; (8005ec8 <TIM_OC1_SetConfig+0xdc>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d10c      	bne.n	8005e6a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	f023 0308 	bic.w	r3, r3, #8
 8005e56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	f023 0304 	bic.w	r3, r3, #4
 8005e68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a15      	ldr	r2, [pc, #84]	; (8005ec4 <TIM_OC1_SetConfig+0xd8>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d003      	beq.n	8005e7a <TIM_OC1_SetConfig+0x8e>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a14      	ldr	r2, [pc, #80]	; (8005ec8 <TIM_OC1_SetConfig+0xdc>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d111      	bne.n	8005e9e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	695b      	ldr	r3, [r3, #20]
 8005e8e:	693a      	ldr	r2, [r7, #16]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	699b      	ldr	r3, [r3, #24]
 8005e98:	693a      	ldr	r2, [r7, #16]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	693a      	ldr	r2, [r7, #16]
 8005ea2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	685a      	ldr	r2, [r3, #4]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	621a      	str	r2, [r3, #32]
}
 8005eb8:	bf00      	nop
 8005eba:	371c      	adds	r7, #28
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr
 8005ec4:	40010000 	.word	0x40010000
 8005ec8:	40010400 	.word	0x40010400

08005ecc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b087      	sub	sp, #28
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a1b      	ldr	r3, [r3, #32]
 8005eda:	f023 0210 	bic.w	r2, r3, #16
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a1b      	ldr	r3, [r3, #32]
 8005ee6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	021b      	lsls	r3, r3, #8
 8005f0a:	68fa      	ldr	r2, [r7, #12]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	f023 0320 	bic.w	r3, r3, #32
 8005f16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	011b      	lsls	r3, r3, #4
 8005f1e:	697a      	ldr	r2, [r7, #20]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a22      	ldr	r2, [pc, #136]	; (8005fb0 <TIM_OC2_SetConfig+0xe4>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d003      	beq.n	8005f34 <TIM_OC2_SetConfig+0x68>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a21      	ldr	r2, [pc, #132]	; (8005fb4 <TIM_OC2_SetConfig+0xe8>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d10d      	bne.n	8005f50 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	011b      	lsls	r3, r3, #4
 8005f42:	697a      	ldr	r2, [r7, #20]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a17      	ldr	r2, [pc, #92]	; (8005fb0 <TIM_OC2_SetConfig+0xe4>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d003      	beq.n	8005f60 <TIM_OC2_SetConfig+0x94>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a16      	ldr	r2, [pc, #88]	; (8005fb4 <TIM_OC2_SetConfig+0xe8>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d113      	bne.n	8005f88 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	695b      	ldr	r3, [r3, #20]
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	693a      	ldr	r2, [r7, #16]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	699b      	ldr	r3, [r3, #24]
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	693a      	ldr	r2, [r7, #16]
 8005f8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	685a      	ldr	r2, [r3, #4]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	697a      	ldr	r2, [r7, #20]
 8005fa0:	621a      	str	r2, [r3, #32]
}
 8005fa2:	bf00      	nop
 8005fa4:	371c      	adds	r7, #28
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	40010000 	.word	0x40010000
 8005fb4:	40010400 	.word	0x40010400

08005fb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b087      	sub	sp, #28
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a1b      	ldr	r3, [r3, #32]
 8005fc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	69db      	ldr	r3, [r3, #28]
 8005fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f023 0303 	bic.w	r3, r3, #3
 8005fee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006000:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	021b      	lsls	r3, r3, #8
 8006008:	697a      	ldr	r2, [r7, #20]
 800600a:	4313      	orrs	r3, r2
 800600c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a21      	ldr	r2, [pc, #132]	; (8006098 <TIM_OC3_SetConfig+0xe0>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d003      	beq.n	800601e <TIM_OC3_SetConfig+0x66>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a20      	ldr	r2, [pc, #128]	; (800609c <TIM_OC3_SetConfig+0xe4>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d10d      	bne.n	800603a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006024:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	021b      	lsls	r3, r3, #8
 800602c:	697a      	ldr	r2, [r7, #20]
 800602e:	4313      	orrs	r3, r2
 8006030:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006038:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a16      	ldr	r2, [pc, #88]	; (8006098 <TIM_OC3_SetConfig+0xe0>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d003      	beq.n	800604a <TIM_OC3_SetConfig+0x92>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a15      	ldr	r2, [pc, #84]	; (800609c <TIM_OC3_SetConfig+0xe4>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d113      	bne.n	8006072 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006050:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006058:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	011b      	lsls	r3, r3, #4
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	4313      	orrs	r3, r2
 8006064:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	699b      	ldr	r3, [r3, #24]
 800606a:	011b      	lsls	r3, r3, #4
 800606c:	693a      	ldr	r2, [r7, #16]
 800606e:	4313      	orrs	r3, r2
 8006070:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	693a      	ldr	r2, [r7, #16]
 8006076:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	685a      	ldr	r2, [r3, #4]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	697a      	ldr	r2, [r7, #20]
 800608a:	621a      	str	r2, [r3, #32]
}
 800608c:	bf00      	nop
 800608e:	371c      	adds	r7, #28
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr
 8006098:	40010000 	.word	0x40010000
 800609c:	40010400 	.word	0x40010400

080060a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b087      	sub	sp, #28
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a1b      	ldr	r3, [r3, #32]
 80060ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a1b      	ldr	r3, [r3, #32]
 80060ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	69db      	ldr	r3, [r3, #28]
 80060c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	021b      	lsls	r3, r3, #8
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	031b      	lsls	r3, r3, #12
 80060f2:	693a      	ldr	r2, [r7, #16]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a12      	ldr	r2, [pc, #72]	; (8006144 <TIM_OC4_SetConfig+0xa4>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d003      	beq.n	8006108 <TIM_OC4_SetConfig+0x68>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4a11      	ldr	r2, [pc, #68]	; (8006148 <TIM_OC4_SetConfig+0xa8>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d109      	bne.n	800611c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800610e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	695b      	ldr	r3, [r3, #20]
 8006114:	019b      	lsls	r3, r3, #6
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	4313      	orrs	r3, r2
 800611a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	697a      	ldr	r2, [r7, #20]
 8006120:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	685a      	ldr	r2, [r3, #4]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	693a      	ldr	r2, [r7, #16]
 8006134:	621a      	str	r2, [r3, #32]
}
 8006136:	bf00      	nop
 8006138:	371c      	adds	r7, #28
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	40010000 	.word	0x40010000
 8006148:	40010400 	.word	0x40010400

0800614c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800614c:	b480      	push	{r7}
 800614e:	b087      	sub	sp, #28
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6a1b      	ldr	r3, [r3, #32]
 800615c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6a1b      	ldr	r3, [r3, #32]
 8006162:	f023 0201 	bic.w	r2, r3, #1
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006176:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	011b      	lsls	r3, r3, #4
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	4313      	orrs	r3, r2
 8006180:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	f023 030a 	bic.w	r3, r3, #10
 8006188:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	4313      	orrs	r3, r2
 8006190:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	621a      	str	r2, [r3, #32]
}
 800619e:	bf00      	nop
 80061a0:	371c      	adds	r7, #28
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr

080061aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061aa:	b480      	push	{r7}
 80061ac:	b087      	sub	sp, #28
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	60f8      	str	r0, [r7, #12]
 80061b2:	60b9      	str	r1, [r7, #8]
 80061b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6a1b      	ldr	r3, [r3, #32]
 80061ba:	f023 0210 	bic.w	r2, r3, #16
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6a1b      	ldr	r3, [r3, #32]
 80061cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	031b      	lsls	r3, r3, #12
 80061da:	697a      	ldr	r2, [r7, #20]
 80061dc:	4313      	orrs	r3, r2
 80061de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	011b      	lsls	r3, r3, #4
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	697a      	ldr	r2, [r7, #20]
 80061f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	693a      	ldr	r2, [r7, #16]
 80061fc:	621a      	str	r2, [r3, #32]
}
 80061fe:	bf00      	nop
 8006200:	371c      	adds	r7, #28
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr

0800620a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800620a:	b480      	push	{r7}
 800620c:	b085      	sub	sp, #20
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
 8006212:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006220:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006222:	683a      	ldr	r2, [r7, #0]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	4313      	orrs	r3, r2
 8006228:	f043 0307 	orr.w	r3, r3, #7
 800622c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	609a      	str	r2, [r3, #8]
}
 8006234:	bf00      	nop
 8006236:	3714      	adds	r7, #20
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006240:	b480      	push	{r7}
 8006242:	b087      	sub	sp, #28
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	607a      	str	r2, [r7, #4]
 800624c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800625a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	021a      	lsls	r2, r3, #8
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	431a      	orrs	r2, r3
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	4313      	orrs	r3, r2
 8006268:	697a      	ldr	r2, [r7, #20]
 800626a:	4313      	orrs	r3, r2
 800626c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	609a      	str	r2, [r3, #8]
}
 8006274:	bf00      	nop
 8006276:	371c      	adds	r7, #28
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006280:	b480      	push	{r7}
 8006282:	b087      	sub	sp, #28
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	f003 031f 	and.w	r3, r3, #31
 8006292:	2201      	movs	r2, #1
 8006294:	fa02 f303 	lsl.w	r3, r2, r3
 8006298:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6a1a      	ldr	r2, [r3, #32]
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	43db      	mvns	r3, r3
 80062a2:	401a      	ands	r2, r3
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6a1a      	ldr	r2, [r3, #32]
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	f003 031f 	and.w	r3, r3, #31
 80062b2:	6879      	ldr	r1, [r7, #4]
 80062b4:	fa01 f303 	lsl.w	r3, r1, r3
 80062b8:	431a      	orrs	r2, r3
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	621a      	str	r2, [r3, #32]
}
 80062be:	bf00      	nop
 80062c0:	371c      	adds	r7, #28
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr
	...

080062cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b085      	sub	sp, #20
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d101      	bne.n	80062e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062e0:	2302      	movs	r3, #2
 80062e2:	e05a      	b.n	800639a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2202      	movs	r2, #2
 80062f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800630a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	4313      	orrs	r3, r2
 8006314:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68fa      	ldr	r2, [r7, #12]
 800631c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a21      	ldr	r2, [pc, #132]	; (80063a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d022      	beq.n	800636e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006330:	d01d      	beq.n	800636e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a1d      	ldr	r2, [pc, #116]	; (80063ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d018      	beq.n	800636e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a1b      	ldr	r2, [pc, #108]	; (80063b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d013      	beq.n	800636e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a1a      	ldr	r2, [pc, #104]	; (80063b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d00e      	beq.n	800636e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a18      	ldr	r2, [pc, #96]	; (80063b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d009      	beq.n	800636e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a17      	ldr	r2, [pc, #92]	; (80063bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d004      	beq.n	800636e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a15      	ldr	r2, [pc, #84]	; (80063c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d10c      	bne.n	8006388 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006374:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	68ba      	ldr	r2, [r7, #8]
 800637c:	4313      	orrs	r3, r2
 800637e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68ba      	ldr	r2, [r7, #8]
 8006386:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006398:	2300      	movs	r3, #0
}
 800639a:	4618      	mov	r0, r3
 800639c:	3714      	adds	r7, #20
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	40010000 	.word	0x40010000
 80063ac:	40000400 	.word	0x40000400
 80063b0:	40000800 	.word	0x40000800
 80063b4:	40000c00 	.word	0x40000c00
 80063b8:	40010400 	.word	0x40010400
 80063bc:	40014000 	.word	0x40014000
 80063c0:	40001800 	.word	0x40001800

080063c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80063ec:	b084      	sub	sp, #16
 80063ee:	b580      	push	{r7, lr}
 80063f0:	b084      	sub	sp, #16
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
 80063f6:	f107 001c 	add.w	r0, r7, #28
 80063fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80063fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006400:	2b01      	cmp	r3, #1
 8006402:	d122      	bne.n	800644a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006408:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006418:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800642c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800642e:	2b01      	cmp	r3, #1
 8006430:	d105      	bne.n	800643e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 f9c0 	bl	80067c4 <USB_CoreReset>
 8006444:	4603      	mov	r3, r0
 8006446:	73fb      	strb	r3, [r7, #15]
 8006448:	e01a      	b.n	8006480 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 f9b4 	bl	80067c4 <USB_CoreReset>
 800645c:	4603      	mov	r3, r0
 800645e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006460:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006462:	2b00      	cmp	r3, #0
 8006464:	d106      	bne.n	8006474 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	639a      	str	r2, [r3, #56]	; 0x38
 8006472:	e005      	b.n	8006480 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006478:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006482:	2b01      	cmp	r3, #1
 8006484:	d10b      	bne.n	800649e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	f043 0206 	orr.w	r2, r3, #6
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f043 0220 	orr.w	r2, r3, #32
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800649e:	7bfb      	ldrb	r3, [r7, #15]
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3710      	adds	r7, #16
 80064a4:	46bd      	mov	sp, r7
 80064a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064aa:	b004      	add	sp, #16
 80064ac:	4770      	bx	lr

080064ae <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80064ae:	b480      	push	{r7}
 80064b0:	b083      	sub	sp, #12
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	f043 0201 	orr.w	r2, r3, #1
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80064c2:	2300      	movs	r3, #0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	370c      	adds	r7, #12
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr

080064d0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b083      	sub	sp, #12
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	f023 0201 	bic.w	r2, r3, #1
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	370c      	adds	r7, #12
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr

080064f2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b084      	sub	sp, #16
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
 80064fa:	460b      	mov	r3, r1
 80064fc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80064fe:	2300      	movs	r3, #0
 8006500:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800650e:	78fb      	ldrb	r3, [r7, #3]
 8006510:	2b01      	cmp	r3, #1
 8006512:	d115      	bne.n	8006540 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006520:	2001      	movs	r0, #1
 8006522:	f7fb fb6b 	bl	8001bfc <HAL_Delay>
      ms++;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	3301      	adds	r3, #1
 800652a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 f93a 	bl	80067a6 <USB_GetMode>
 8006532:	4603      	mov	r3, r0
 8006534:	2b01      	cmp	r3, #1
 8006536:	d01e      	beq.n	8006576 <USB_SetCurrentMode+0x84>
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2b31      	cmp	r3, #49	; 0x31
 800653c:	d9f0      	bls.n	8006520 <USB_SetCurrentMode+0x2e>
 800653e:	e01a      	b.n	8006576 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006540:	78fb      	ldrb	r3, [r7, #3]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d115      	bne.n	8006572 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006552:	2001      	movs	r0, #1
 8006554:	f7fb fb52 	bl	8001bfc <HAL_Delay>
      ms++;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	3301      	adds	r3, #1
 800655c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 f921 	bl	80067a6 <USB_GetMode>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d005      	beq.n	8006576 <USB_SetCurrentMode+0x84>
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2b31      	cmp	r3, #49	; 0x31
 800656e:	d9f0      	bls.n	8006552 <USB_SetCurrentMode+0x60>
 8006570:	e001      	b.n	8006576 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e005      	b.n	8006582 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2b32      	cmp	r3, #50	; 0x32
 800657a:	d101      	bne.n	8006580 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e000      	b.n	8006582 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
	...

0800658c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800658c:	b480      	push	{r7}
 800658e:	b085      	sub	sp, #20
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006596:	2300      	movs	r3, #0
 8006598:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	3301      	adds	r3, #1
 800659e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	4a13      	ldr	r2, [pc, #76]	; (80065f0 <USB_FlushTxFifo+0x64>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d901      	bls.n	80065ac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80065a8:	2303      	movs	r3, #3
 80065aa:	e01b      	b.n	80065e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	daf2      	bge.n	800659a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80065b4:	2300      	movs	r3, #0
 80065b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	019b      	lsls	r3, r3, #6
 80065bc:	f043 0220 	orr.w	r2, r3, #32
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	3301      	adds	r3, #1
 80065c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	4a08      	ldr	r2, [pc, #32]	; (80065f0 <USB_FlushTxFifo+0x64>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d901      	bls.n	80065d6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	e006      	b.n	80065e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	f003 0320 	and.w	r3, r3, #32
 80065de:	2b20      	cmp	r3, #32
 80065e0:	d0f0      	beq.n	80065c4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3714      	adds	r7, #20
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr
 80065f0:	00030d40 	.word	0x00030d40

080065f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b085      	sub	sp, #20
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065fc:	2300      	movs	r3, #0
 80065fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	3301      	adds	r3, #1
 8006604:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	4a11      	ldr	r2, [pc, #68]	; (8006650 <USB_FlushRxFifo+0x5c>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d901      	bls.n	8006612 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e018      	b.n	8006644 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	2b00      	cmp	r3, #0
 8006618:	daf2      	bge.n	8006600 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800661a:	2300      	movs	r3, #0
 800661c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2210      	movs	r2, #16
 8006622:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	3301      	adds	r3, #1
 8006628:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	4a08      	ldr	r2, [pc, #32]	; (8006650 <USB_FlushRxFifo+0x5c>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d901      	bls.n	8006636 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	e006      	b.n	8006644 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	f003 0310 	and.w	r3, r3, #16
 800663e:	2b10      	cmp	r3, #16
 8006640:	d0f0      	beq.n	8006624 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006642:	2300      	movs	r3, #0
}
 8006644:	4618      	mov	r0, r3
 8006646:	3714      	adds	r7, #20
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr
 8006650:	00030d40 	.word	0x00030d40

08006654 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006654:	b480      	push	{r7}
 8006656:	b089      	sub	sp, #36	; 0x24
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	4611      	mov	r1, r2
 8006660:	461a      	mov	r2, r3
 8006662:	460b      	mov	r3, r1
 8006664:	71fb      	strb	r3, [r7, #7]
 8006666:	4613      	mov	r3, r2
 8006668:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006672:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006676:	2b00      	cmp	r3, #0
 8006678:	d123      	bne.n	80066c2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800667a:	88bb      	ldrh	r3, [r7, #4]
 800667c:	3303      	adds	r3, #3
 800667e:	089b      	lsrs	r3, r3, #2
 8006680:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006682:	2300      	movs	r3, #0
 8006684:	61bb      	str	r3, [r7, #24]
 8006686:	e018      	b.n	80066ba <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006688:	79fb      	ldrb	r3, [r7, #7]
 800668a:	031a      	lsls	r2, r3, #12
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	4413      	add	r3, r2
 8006690:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006694:	461a      	mov	r2, r3
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	3301      	adds	r3, #1
 80066a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	3301      	adds	r3, #1
 80066a6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	3301      	adds	r3, #1
 80066ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	3301      	adds	r3, #1
 80066b2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80066b4:	69bb      	ldr	r3, [r7, #24]
 80066b6:	3301      	adds	r3, #1
 80066b8:	61bb      	str	r3, [r7, #24]
 80066ba:	69ba      	ldr	r2, [r7, #24]
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	429a      	cmp	r2, r3
 80066c0:	d3e2      	bcc.n	8006688 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3724      	adds	r7, #36	; 0x24
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b08b      	sub	sp, #44	; 0x2c
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	4613      	mov	r3, r2
 80066dc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80066e6:	88fb      	ldrh	r3, [r7, #6]
 80066e8:	089b      	lsrs	r3, r3, #2
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80066ee:	88fb      	ldrh	r3, [r7, #6]
 80066f0:	f003 0303 	and.w	r3, r3, #3
 80066f4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80066f6:	2300      	movs	r3, #0
 80066f8:	623b      	str	r3, [r7, #32]
 80066fa:	e014      	b.n	8006726 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006706:	601a      	str	r2, [r3, #0]
    pDest++;
 8006708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670a:	3301      	adds	r3, #1
 800670c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800670e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006710:	3301      	adds	r3, #1
 8006712:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006716:	3301      	adds	r3, #1
 8006718:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800671a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671c:	3301      	adds	r3, #1
 800671e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006720:	6a3b      	ldr	r3, [r7, #32]
 8006722:	3301      	adds	r3, #1
 8006724:	623b      	str	r3, [r7, #32]
 8006726:	6a3a      	ldr	r2, [r7, #32]
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	429a      	cmp	r2, r3
 800672c:	d3e6      	bcc.n	80066fc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800672e:	8bfb      	ldrh	r3, [r7, #30]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d01e      	beq.n	8006772 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006734:	2300      	movs	r3, #0
 8006736:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800673e:	461a      	mov	r2, r3
 8006740:	f107 0310 	add.w	r3, r7, #16
 8006744:	6812      	ldr	r2, [r2, #0]
 8006746:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006748:	693a      	ldr	r2, [r7, #16]
 800674a:	6a3b      	ldr	r3, [r7, #32]
 800674c:	b2db      	uxtb	r3, r3
 800674e:	00db      	lsls	r3, r3, #3
 8006750:	fa22 f303 	lsr.w	r3, r2, r3
 8006754:	b2da      	uxtb	r2, r3
 8006756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006758:	701a      	strb	r2, [r3, #0]
      i++;
 800675a:	6a3b      	ldr	r3, [r7, #32]
 800675c:	3301      	adds	r3, #1
 800675e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006762:	3301      	adds	r3, #1
 8006764:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006766:	8bfb      	ldrh	r3, [r7, #30]
 8006768:	3b01      	subs	r3, #1
 800676a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800676c:	8bfb      	ldrh	r3, [r7, #30]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d1ea      	bne.n	8006748 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006774:	4618      	mov	r0, r3
 8006776:	372c      	adds	r7, #44	; 0x2c
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006780:	b480      	push	{r7}
 8006782:	b085      	sub	sp, #20
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	695b      	ldr	r3, [r3, #20]
 800678c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	699b      	ldr	r3, [r3, #24]
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	4013      	ands	r3, r2
 8006796:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006798:	68fb      	ldr	r3, [r7, #12]
}
 800679a:	4618      	mov	r0, r3
 800679c:	3714      	adds	r7, #20
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr

080067a6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80067a6:	b480      	push	{r7}
 80067a8:	b083      	sub	sp, #12
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	695b      	ldr	r3, [r3, #20]
 80067b2:	f003 0301 	and.w	r3, r3, #1
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	370c      	adds	r7, #12
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr
	...

080067c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067cc:	2300      	movs	r3, #0
 80067ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	3301      	adds	r3, #1
 80067d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	4a13      	ldr	r2, [pc, #76]	; (8006828 <USB_CoreReset+0x64>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d901      	bls.n	80067e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	e01b      	b.n	800681a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	daf2      	bge.n	80067d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80067ea:	2300      	movs	r3, #0
 80067ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	f043 0201 	orr.w	r2, r3, #1
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	3301      	adds	r3, #1
 80067fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	4a09      	ldr	r2, [pc, #36]	; (8006828 <USB_CoreReset+0x64>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d901      	bls.n	800680c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006808:	2303      	movs	r3, #3
 800680a:	e006      	b.n	800681a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	f003 0301 	and.w	r3, r3, #1
 8006814:	2b01      	cmp	r3, #1
 8006816:	d0f0      	beq.n	80067fa <USB_CoreReset+0x36>

  return HAL_OK;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3714      	adds	r7, #20
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	00030d40 	.word	0x00030d40

0800682c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800682c:	b084      	sub	sp, #16
 800682e:	b580      	push	{r7, lr}
 8006830:	b086      	sub	sp, #24
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
 8006836:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800683a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800683e:	2300      	movs	r3, #0
 8006840:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800684c:	461a      	mov	r2, r3
 800684e:	2300      	movs	r3, #0
 8006850:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006856:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006862:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800686e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800687a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800687e:	2b00      	cmp	r3, #0
 8006880:	d018      	beq.n	80068b4 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006884:	2b01      	cmp	r3, #1
 8006886:	d10a      	bne.n	800689e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006896:	f043 0304 	orr.w	r3, r3, #4
 800689a:	6013      	str	r3, [r2, #0]
 800689c:	e014      	b.n	80068c8 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80068ac:	f023 0304 	bic.w	r3, r3, #4
 80068b0:	6013      	str	r3, [r2, #0]
 80068b2:	e009      	b.n	80068c8 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68fa      	ldr	r2, [r7, #12]
 80068be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80068c2:	f023 0304 	bic.w	r3, r3, #4
 80068c6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80068c8:	2110      	movs	r1, #16
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f7ff fe5e 	bl	800658c <USB_FlushTxFifo>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d001      	beq.n	80068da <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f7ff fe8a 	bl	80065f4 <USB_FlushRxFifo>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d001      	beq.n	80068ea <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80068ea:	2300      	movs	r3, #0
 80068ec:	613b      	str	r3, [r7, #16]
 80068ee:	e015      	b.n	800691c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	015a      	lsls	r2, r3, #5
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	4413      	add	r3, r2
 80068f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068fc:	461a      	mov	r2, r3
 80068fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006902:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	015a      	lsls	r2, r3, #5
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	4413      	add	r3, r2
 800690c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006910:	461a      	mov	r2, r3
 8006912:	2300      	movs	r3, #0
 8006914:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	3301      	adds	r3, #1
 800691a:	613b      	str	r3, [r7, #16]
 800691c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800691e:	693a      	ldr	r2, [r7, #16]
 8006920:	429a      	cmp	r2, r3
 8006922:	d3e5      	bcc.n	80068f0 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f04f 32ff 	mov.w	r2, #4294967295
 8006930:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00b      	beq.n	8006956 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006944:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a13      	ldr	r2, [pc, #76]	; (8006998 <USB_HostInit+0x16c>)
 800694a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4a13      	ldr	r2, [pc, #76]	; (800699c <USB_HostInit+0x170>)
 8006950:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006954:	e009      	b.n	800696a <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2280      	movs	r2, #128	; 0x80
 800695a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	4a10      	ldr	r2, [pc, #64]	; (80069a0 <USB_HostInit+0x174>)
 8006960:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a0f      	ldr	r2, [pc, #60]	; (80069a4 <USB_HostInit+0x178>)
 8006966:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800696a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800696c:	2b00      	cmp	r3, #0
 800696e:	d105      	bne.n	800697c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	699b      	ldr	r3, [r3, #24]
 8006974:	f043 0210 	orr.w	r2, r3, #16
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	699a      	ldr	r2, [r3, #24]
 8006980:	4b09      	ldr	r3, [pc, #36]	; (80069a8 <USB_HostInit+0x17c>)
 8006982:	4313      	orrs	r3, r2
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006988:	7dfb      	ldrb	r3, [r7, #23]
}
 800698a:	4618      	mov	r0, r3
 800698c:	3718      	adds	r7, #24
 800698e:	46bd      	mov	sp, r7
 8006990:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006994:	b004      	add	sp, #16
 8006996:	4770      	bx	lr
 8006998:	01000200 	.word	0x01000200
 800699c:	00e00300 	.word	0x00e00300
 80069a0:	00600080 	.word	0x00600080
 80069a4:	004000e0 	.word	0x004000e0
 80069a8:	a3200008 	.word	0xa3200008

080069ac <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b085      	sub	sp, #20
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	460b      	mov	r3, r1
 80069b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	68fa      	ldr	r2, [r7, #12]
 80069c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80069ca:	f023 0303 	bic.w	r3, r3, #3
 80069ce:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	78fb      	ldrb	r3, [r7, #3]
 80069da:	f003 0303 	and.w	r3, r3, #3
 80069de:	68f9      	ldr	r1, [r7, #12]
 80069e0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80069e4:	4313      	orrs	r3, r2
 80069e6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80069e8:	78fb      	ldrb	r3, [r7, #3]
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d107      	bne.n	80069fe <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069f4:	461a      	mov	r2, r3
 80069f6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80069fa:	6053      	str	r3, [r2, #4]
 80069fc:	e009      	b.n	8006a12 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80069fe:	78fb      	ldrb	r3, [r7, #3]
 8006a00:	2b02      	cmp	r3, #2
 8006a02:	d106      	bne.n	8006a12 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	f241 7370 	movw	r3, #6000	; 0x1770
 8006a10:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3714      	adds	r7, #20
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006a40:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	68fa      	ldr	r2, [r7, #12]
 8006a46:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a4e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006a50:	2064      	movs	r0, #100	; 0x64
 8006a52:	f7fb f8d3 	bl	8001bfc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006a5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a62:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006a64:	200a      	movs	r0, #10
 8006a66:	f7fb f8c9 	bl	8001bfc <HAL_Delay>

  return HAL_OK;
 8006a6a:	2300      	movs	r3, #0
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3710      	adds	r7, #16
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b085      	sub	sp, #20
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	460b      	mov	r3, r1
 8006a7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006a84:	2300      	movs	r3, #0
 8006a86:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006a98:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d109      	bne.n	8006ab8 <USB_DriveVbus+0x44>
 8006aa4:	78fb      	ldrb	r3, [r7, #3]
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d106      	bne.n	8006ab8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006ab2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006ab6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ac2:	d109      	bne.n	8006ad8 <USB_DriveVbus+0x64>
 8006ac4:	78fb      	ldrb	r3, [r7, #3]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d106      	bne.n	8006ad8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006ad2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ad6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3714      	adds	r7, #20
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr

08006ae6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006ae6:	b480      	push	{r7}
 8006ae8:	b085      	sub	sp, #20
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006af2:	2300      	movs	r3, #0
 8006af4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	0c5b      	lsrs	r3, r3, #17
 8006b04:	f003 0303 	and.w	r3, r3, #3
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3714      	adds	r7, #20
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b085      	sub	sp, #20
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	b29b      	uxth	r3, r3
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3714      	adds	r7, #20
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr
	...

08006b38 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b088      	sub	sp, #32
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	4608      	mov	r0, r1
 8006b42:	4611      	mov	r1, r2
 8006b44:	461a      	mov	r2, r3
 8006b46:	4603      	mov	r3, r0
 8006b48:	70fb      	strb	r3, [r7, #3]
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	70bb      	strb	r3, [r7, #2]
 8006b4e:	4613      	mov	r3, r2
 8006b50:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006b52:	2300      	movs	r3, #0
 8006b54:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006b5a:	78fb      	ldrb	r3, [r7, #3]
 8006b5c:	015a      	lsls	r2, r3, #5
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	4413      	add	r3, r2
 8006b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b66:	461a      	mov	r2, r3
 8006b68:	f04f 33ff 	mov.w	r3, #4294967295
 8006b6c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006b6e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006b72:	2b03      	cmp	r3, #3
 8006b74:	d87e      	bhi.n	8006c74 <USB_HC_Init+0x13c>
 8006b76:	a201      	add	r2, pc, #4	; (adr r2, 8006b7c <USB_HC_Init+0x44>)
 8006b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b7c:	08006b8d 	.word	0x08006b8d
 8006b80:	08006c37 	.word	0x08006c37
 8006b84:	08006b8d 	.word	0x08006b8d
 8006b88:	08006bf9 	.word	0x08006bf9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006b8c:	78fb      	ldrb	r3, [r7, #3]
 8006b8e:	015a      	lsls	r2, r3, #5
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	4413      	add	r3, r2
 8006b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b98:	461a      	mov	r2, r3
 8006b9a:	f240 439d 	movw	r3, #1181	; 0x49d
 8006b9e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006ba0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	da10      	bge.n	8006bca <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006ba8:	78fb      	ldrb	r3, [r7, #3]
 8006baa:	015a      	lsls	r2, r3, #5
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	4413      	add	r3, r2
 8006bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	78fa      	ldrb	r2, [r7, #3]
 8006bb8:	0151      	lsls	r1, r2, #5
 8006bba:	693a      	ldr	r2, [r7, #16]
 8006bbc:	440a      	add	r2, r1
 8006bbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bc6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006bc8:	e057      	b.n	8006c7a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d051      	beq.n	8006c7a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006bd6:	78fb      	ldrb	r3, [r7, #3]
 8006bd8:	015a      	lsls	r2, r3, #5
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	4413      	add	r3, r2
 8006bde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	78fa      	ldrb	r2, [r7, #3]
 8006be6:	0151      	lsls	r1, r2, #5
 8006be8:	693a      	ldr	r2, [r7, #16]
 8006bea:	440a      	add	r2, r1
 8006bec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bf0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006bf4:	60d3      	str	r3, [r2, #12]
      break;
 8006bf6:	e040      	b.n	8006c7a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006bf8:	78fb      	ldrb	r3, [r7, #3]
 8006bfa:	015a      	lsls	r2, r3, #5
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	4413      	add	r3, r2
 8006c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c04:	461a      	mov	r2, r3
 8006c06:	f240 639d 	movw	r3, #1693	; 0x69d
 8006c0a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006c0c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	da34      	bge.n	8006c7e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006c14:	78fb      	ldrb	r3, [r7, #3]
 8006c16:	015a      	lsls	r2, r3, #5
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	78fa      	ldrb	r2, [r7, #3]
 8006c24:	0151      	lsls	r1, r2, #5
 8006c26:	693a      	ldr	r2, [r7, #16]
 8006c28:	440a      	add	r2, r1
 8006c2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c32:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006c34:	e023      	b.n	8006c7e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006c36:	78fb      	ldrb	r3, [r7, #3]
 8006c38:	015a      	lsls	r2, r3, #5
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c42:	461a      	mov	r2, r3
 8006c44:	f240 2325 	movw	r3, #549	; 0x225
 8006c48:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006c4a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	da17      	bge.n	8006c82 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006c52:	78fb      	ldrb	r3, [r7, #3]
 8006c54:	015a      	lsls	r2, r3, #5
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	4413      	add	r3, r2
 8006c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	78fa      	ldrb	r2, [r7, #3]
 8006c62:	0151      	lsls	r1, r2, #5
 8006c64:	693a      	ldr	r2, [r7, #16]
 8006c66:	440a      	add	r2, r1
 8006c68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c6c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006c70:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006c72:	e006      	b.n	8006c82 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	77fb      	strb	r3, [r7, #31]
      break;
 8006c78:	e004      	b.n	8006c84 <USB_HC_Init+0x14c>
      break;
 8006c7a:	bf00      	nop
 8006c7c:	e002      	b.n	8006c84 <USB_HC_Init+0x14c>
      break;
 8006c7e:	bf00      	nop
 8006c80:	e000      	b.n	8006c84 <USB_HC_Init+0x14c>
      break;
 8006c82:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006c84:	78fb      	ldrb	r3, [r7, #3]
 8006c86:	015a      	lsls	r2, r3, #5
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	78fa      	ldrb	r2, [r7, #3]
 8006c94:	0151      	lsls	r1, r2, #5
 8006c96:	693a      	ldr	r2, [r7, #16]
 8006c98:	440a      	add	r2, r1
 8006c9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c9e:	f043 0302 	orr.w	r3, r3, #2
 8006ca2:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006caa:	699a      	ldr	r2, [r3, #24]
 8006cac:	78fb      	ldrb	r3, [r7, #3]
 8006cae:	f003 030f 	and.w	r3, r3, #15
 8006cb2:	2101      	movs	r1, #1
 8006cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8006cb8:	6939      	ldr	r1, [r7, #16]
 8006cba:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006cce:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	da03      	bge.n	8006cde <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006cd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cda:	61bb      	str	r3, [r7, #24]
 8006cdc:	e001      	b.n	8006ce2 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f7ff feff 	bl	8006ae6 <USB_GetHostSpeed>
 8006ce8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006cea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006cee:	2b02      	cmp	r3, #2
 8006cf0:	d106      	bne.n	8006d00 <USB_HC_Init+0x1c8>
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2b02      	cmp	r3, #2
 8006cf6:	d003      	beq.n	8006d00 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006cf8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006cfc:	617b      	str	r3, [r7, #20]
 8006cfe:	e001      	b.n	8006d04 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006d00:	2300      	movs	r3, #0
 8006d02:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d04:	787b      	ldrb	r3, [r7, #1]
 8006d06:	059b      	lsls	r3, r3, #22
 8006d08:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006d0c:	78bb      	ldrb	r3, [r7, #2]
 8006d0e:	02db      	lsls	r3, r3, #11
 8006d10:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d14:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006d16:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006d1a:	049b      	lsls	r3, r3, #18
 8006d1c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006d20:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006d22:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006d24:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006d28:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d2e:	78fb      	ldrb	r3, [r7, #3]
 8006d30:	0159      	lsls	r1, r3, #5
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	440b      	add	r3, r1
 8006d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d3a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d40:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006d42:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006d46:	2b03      	cmp	r3, #3
 8006d48:	d003      	beq.n	8006d52 <USB_HC_Init+0x21a>
 8006d4a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d10f      	bne.n	8006d72 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006d52:	78fb      	ldrb	r3, [r7, #3]
 8006d54:	015a      	lsls	r2, r3, #5
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	4413      	add	r3, r2
 8006d5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	78fa      	ldrb	r2, [r7, #3]
 8006d62:	0151      	lsls	r1, r2, #5
 8006d64:	693a      	ldr	r2, [r7, #16]
 8006d66:	440a      	add	r2, r1
 8006d68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d6c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d70:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006d72:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3720      	adds	r7, #32
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b08c      	sub	sp, #48	; 0x30
 8006d80:	af02      	add	r7, sp, #8
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	4613      	mov	r3, r2
 8006d88:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	785b      	ldrb	r3, [r3, #1]
 8006d92:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006d94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d98:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d02d      	beq.n	8006e02 <USB_HC_StartXfer+0x86>
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	791b      	ldrb	r3, [r3, #4]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d129      	bne.n	8006e02 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006dae:	79fb      	ldrb	r3, [r7, #7]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d117      	bne.n	8006de4 <USB_HC_StartXfer+0x68>
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	79db      	ldrb	r3, [r3, #7]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d003      	beq.n	8006dc4 <USB_HC_StartXfer+0x48>
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	79db      	ldrb	r3, [r3, #7]
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	d10f      	bne.n	8006de4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	015a      	lsls	r2, r3, #5
 8006dc8:	6a3b      	ldr	r3, [r7, #32]
 8006dca:	4413      	add	r3, r2
 8006dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	69fa      	ldr	r2, [r7, #28]
 8006dd4:	0151      	lsls	r1, r2, #5
 8006dd6:	6a3a      	ldr	r2, [r7, #32]
 8006dd8:	440a      	add	r2, r1
 8006dda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006de2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006de4:	79fb      	ldrb	r3, [r7, #7]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d10b      	bne.n	8006e02 <USB_HC_StartXfer+0x86>
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	795b      	ldrb	r3, [r3, #5]
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d107      	bne.n	8006e02 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	785b      	ldrb	r3, [r3, #1]
 8006df6:	4619      	mov	r1, r3
 8006df8:	68f8      	ldr	r0, [r7, #12]
 8006dfa:	f000 fa0f 	bl	800721c <USB_DoPing>
      return HAL_OK;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	e0f8      	b.n	8006ff4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	695b      	ldr	r3, [r3, #20]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d018      	beq.n	8006e3c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	695b      	ldr	r3, [r3, #20]
 8006e0e:	68ba      	ldr	r2, [r7, #8]
 8006e10:	8912      	ldrh	r2, [r2, #8]
 8006e12:	4413      	add	r3, r2
 8006e14:	3b01      	subs	r3, #1
 8006e16:	68ba      	ldr	r2, [r7, #8]
 8006e18:	8912      	ldrh	r2, [r2, #8]
 8006e1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e1e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006e20:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006e22:	8b7b      	ldrh	r3, [r7, #26]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d90b      	bls.n	8006e40 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006e28:	8b7b      	ldrh	r3, [r7, #26]
 8006e2a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006e2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e2e:	68ba      	ldr	r2, [r7, #8]
 8006e30:	8912      	ldrh	r2, [r2, #8]
 8006e32:	fb03 f202 	mul.w	r2, r3, r2
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	611a      	str	r2, [r3, #16]
 8006e3a:	e001      	b.n	8006e40 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	78db      	ldrb	r3, [r3, #3]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d007      	beq.n	8006e58 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006e48:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e4a:	68ba      	ldr	r2, [r7, #8]
 8006e4c:	8912      	ldrh	r2, [r2, #8]
 8006e4e:	fb03 f202 	mul.w	r2, r3, r2
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	611a      	str	r2, [r3, #16]
 8006e56:	e003      	b.n	8006e60 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	695a      	ldr	r2, [r3, #20]
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	691b      	ldr	r3, [r3, #16]
 8006e64:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006e68:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e6a:	04d9      	lsls	r1, r3, #19
 8006e6c:	4b63      	ldr	r3, [pc, #396]	; (8006ffc <USB_HC_StartXfer+0x280>)
 8006e6e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006e70:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	7a9b      	ldrb	r3, [r3, #10]
 8006e76:	075b      	lsls	r3, r3, #29
 8006e78:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006e7c:	69f9      	ldr	r1, [r7, #28]
 8006e7e:	0148      	lsls	r0, r1, #5
 8006e80:	6a39      	ldr	r1, [r7, #32]
 8006e82:	4401      	add	r1, r0
 8006e84:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006e88:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006e8a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006e8c:	79fb      	ldrb	r3, [r7, #7]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d009      	beq.n	8006ea6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	68d9      	ldr	r1, [r3, #12]
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	015a      	lsls	r2, r3, #5
 8006e9a:	6a3b      	ldr	r3, [r7, #32]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ea2:	460a      	mov	r2, r1
 8006ea4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006ea6:	6a3b      	ldr	r3, [r7, #32]
 8006ea8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	f003 0301 	and.w	r3, r3, #1
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	bf0c      	ite	eq
 8006eb6:	2301      	moveq	r3, #1
 8006eb8:	2300      	movne	r3, #0
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	015a      	lsls	r2, r3, #5
 8006ec2:	6a3b      	ldr	r3, [r7, #32]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	69fa      	ldr	r2, [r7, #28]
 8006ece:	0151      	lsls	r1, r2, #5
 8006ed0:	6a3a      	ldr	r2, [r7, #32]
 8006ed2:	440a      	add	r2, r1
 8006ed4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ed8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006edc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	015a      	lsls	r2, r3, #5
 8006ee2:	6a3b      	ldr	r3, [r7, #32]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	7e7b      	ldrb	r3, [r7, #25]
 8006eee:	075b      	lsls	r3, r3, #29
 8006ef0:	69f9      	ldr	r1, [r7, #28]
 8006ef2:	0148      	lsls	r0, r1, #5
 8006ef4:	6a39      	ldr	r1, [r7, #32]
 8006ef6:	4401      	add	r1, r0
 8006ef8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006efc:	4313      	orrs	r3, r2
 8006efe:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	015a      	lsls	r2, r3, #5
 8006f04:	6a3b      	ldr	r3, [r7, #32]
 8006f06:	4413      	add	r3, r2
 8006f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006f16:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	78db      	ldrb	r3, [r3, #3]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d004      	beq.n	8006f2a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f26:	613b      	str	r3, [r7, #16]
 8006f28:	e003      	b.n	8006f32 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f30:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f38:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	015a      	lsls	r2, r3, #5
 8006f3e:	6a3b      	ldr	r3, [r7, #32]
 8006f40:	4413      	add	r3, r2
 8006f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f46:	461a      	mov	r2, r3
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006f4c:	79fb      	ldrb	r3, [r7, #7]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d001      	beq.n	8006f56 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006f52:	2300      	movs	r3, #0
 8006f54:	e04e      	b.n	8006ff4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	78db      	ldrb	r3, [r3, #3]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d149      	bne.n	8006ff2 <USB_HC_StartXfer+0x276>
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	695b      	ldr	r3, [r3, #20]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d045      	beq.n	8006ff2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	79db      	ldrb	r3, [r3, #7]
 8006f6a:	2b03      	cmp	r3, #3
 8006f6c:	d830      	bhi.n	8006fd0 <USB_HC_StartXfer+0x254>
 8006f6e:	a201      	add	r2, pc, #4	; (adr r2, 8006f74 <USB_HC_StartXfer+0x1f8>)
 8006f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f74:	08006f85 	.word	0x08006f85
 8006f78:	08006fa9 	.word	0x08006fa9
 8006f7c:	08006f85 	.word	0x08006f85
 8006f80:	08006fa9 	.word	0x08006fa9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	695b      	ldr	r3, [r3, #20]
 8006f88:	3303      	adds	r3, #3
 8006f8a:	089b      	lsrs	r3, r3, #2
 8006f8c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006f8e:	8afa      	ldrh	r2, [r7, #22]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d91c      	bls.n	8006fd4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	699b      	ldr	r3, [r3, #24]
 8006f9e:	f043 0220 	orr.w	r2, r3, #32
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	619a      	str	r2, [r3, #24]
        }
        break;
 8006fa6:	e015      	b.n	8006fd4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	695b      	ldr	r3, [r3, #20]
 8006fac:	3303      	adds	r3, #3
 8006fae:	089b      	lsrs	r3, r3, #2
 8006fb0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006fb2:	8afa      	ldrh	r2, [r7, #22]
 8006fb4:	6a3b      	ldr	r3, [r7, #32]
 8006fb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fba:	691b      	ldr	r3, [r3, #16]
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d90a      	bls.n	8006fd8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	699b      	ldr	r3, [r3, #24]
 8006fc6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	619a      	str	r2, [r3, #24]
        }
        break;
 8006fce:	e003      	b.n	8006fd8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006fd0:	bf00      	nop
 8006fd2:	e002      	b.n	8006fda <USB_HC_StartXfer+0x25e>
        break;
 8006fd4:	bf00      	nop
 8006fd6:	e000      	b.n	8006fda <USB_HC_StartXfer+0x25e>
        break;
 8006fd8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	68d9      	ldr	r1, [r3, #12]
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	785a      	ldrb	r2, [r3, #1]
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	695b      	ldr	r3, [r3, #20]
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	2000      	movs	r0, #0
 8006fea:	9000      	str	r0, [sp, #0]
 8006fec:	68f8      	ldr	r0, [r7, #12]
 8006fee:	f7ff fb31 	bl	8006654 <USB_WritePacket>
  }

  return HAL_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3728      	adds	r7, #40	; 0x28
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	1ff80000 	.word	0x1ff80000

08007000 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007000:	b480      	push	{r7}
 8007002:	b085      	sub	sp, #20
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007012:	695b      	ldr	r3, [r3, #20]
 8007014:	b29b      	uxth	r3, r3
}
 8007016:	4618      	mov	r0, r3
 8007018:	3714      	adds	r7, #20
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr

08007022 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007022:	b480      	push	{r7}
 8007024:	b089      	sub	sp, #36	; 0x24
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
 800702a:	460b      	mov	r3, r1
 800702c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007032:	78fb      	ldrb	r3, [r7, #3]
 8007034:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007036:	2300      	movs	r3, #0
 8007038:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800703a:	69bb      	ldr	r3, [r7, #24]
 800703c:	015a      	lsls	r2, r3, #5
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	4413      	add	r3, r2
 8007042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	0c9b      	lsrs	r3, r3, #18
 800704a:	f003 0303 	and.w	r3, r3, #3
 800704e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	015a      	lsls	r2, r3, #5
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	4413      	add	r3, r2
 8007058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	0fdb      	lsrs	r3, r3, #31
 8007060:	f003 0301 	and.w	r3, r3, #1
 8007064:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	f003 0320 	and.w	r3, r3, #32
 800706e:	2b20      	cmp	r3, #32
 8007070:	d104      	bne.n	800707c <USB_HC_Halt+0x5a>
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d101      	bne.n	800707c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007078:	2300      	movs	r3, #0
 800707a:	e0c8      	b.n	800720e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d002      	beq.n	8007088 <USB_HC_Halt+0x66>
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	2b02      	cmp	r3, #2
 8007086:	d163      	bne.n	8007150 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	015a      	lsls	r2, r3, #5
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	4413      	add	r3, r2
 8007090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	69ba      	ldr	r2, [r7, #24]
 8007098:	0151      	lsls	r1, r2, #5
 800709a:	69fa      	ldr	r2, [r7, #28]
 800709c:	440a      	add	r2, r1
 800709e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070a6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	f003 0320 	and.w	r3, r3, #32
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f040 80ab 	bne.w	800720c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d133      	bne.n	800712a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	015a      	lsls	r2, r3, #5
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	4413      	add	r3, r2
 80070ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	69ba      	ldr	r2, [r7, #24]
 80070d2:	0151      	lsls	r1, r2, #5
 80070d4:	69fa      	ldr	r2, [r7, #28]
 80070d6:	440a      	add	r2, r1
 80070d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80070e0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	015a      	lsls	r2, r3, #5
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	4413      	add	r3, r2
 80070ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	69ba      	ldr	r2, [r7, #24]
 80070f2:	0151      	lsls	r1, r2, #5
 80070f4:	69fa      	ldr	r2, [r7, #28]
 80070f6:	440a      	add	r2, r1
 80070f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007100:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	3301      	adds	r3, #1
 8007106:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800710e:	d81d      	bhi.n	800714c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007110:	69bb      	ldr	r3, [r7, #24]
 8007112:	015a      	lsls	r2, r3, #5
 8007114:	69fb      	ldr	r3, [r7, #28]
 8007116:	4413      	add	r3, r2
 8007118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007122:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007126:	d0ec      	beq.n	8007102 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007128:	e070      	b.n	800720c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	015a      	lsls	r2, r3, #5
 800712e:	69fb      	ldr	r3, [r7, #28]
 8007130:	4413      	add	r3, r2
 8007132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	69ba      	ldr	r2, [r7, #24]
 800713a:	0151      	lsls	r1, r2, #5
 800713c:	69fa      	ldr	r2, [r7, #28]
 800713e:	440a      	add	r2, r1
 8007140:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007144:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007148:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800714a:	e05f      	b.n	800720c <USB_HC_Halt+0x1ea>
            break;
 800714c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800714e:	e05d      	b.n	800720c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	015a      	lsls	r2, r3, #5
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	4413      	add	r3, r2
 8007158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	69ba      	ldr	r2, [r7, #24]
 8007160:	0151      	lsls	r1, r2, #5
 8007162:	69fa      	ldr	r2, [r7, #28]
 8007164:	440a      	add	r2, r1
 8007166:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800716a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800716e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800717c:	2b00      	cmp	r3, #0
 800717e:	d133      	bne.n	80071e8 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	015a      	lsls	r2, r3, #5
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	4413      	add	r3, r2
 8007188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	69ba      	ldr	r2, [r7, #24]
 8007190:	0151      	lsls	r1, r2, #5
 8007192:	69fa      	ldr	r2, [r7, #28]
 8007194:	440a      	add	r2, r1
 8007196:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800719a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800719e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	015a      	lsls	r2, r3, #5
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	4413      	add	r3, r2
 80071a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	69ba      	ldr	r2, [r7, #24]
 80071b0:	0151      	lsls	r1, r2, #5
 80071b2:	69fa      	ldr	r2, [r7, #28]
 80071b4:	440a      	add	r2, r1
 80071b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80071be:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	3301      	adds	r3, #1
 80071c4:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80071cc:	d81d      	bhi.n	800720a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	015a      	lsls	r2, r3, #5
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	4413      	add	r3, r2
 80071d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071e4:	d0ec      	beq.n	80071c0 <USB_HC_Halt+0x19e>
 80071e6:	e011      	b.n	800720c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80071e8:	69bb      	ldr	r3, [r7, #24]
 80071ea:	015a      	lsls	r2, r3, #5
 80071ec:	69fb      	ldr	r3, [r7, #28]
 80071ee:	4413      	add	r3, r2
 80071f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	69ba      	ldr	r2, [r7, #24]
 80071f8:	0151      	lsls	r1, r2, #5
 80071fa:	69fa      	ldr	r2, [r7, #28]
 80071fc:	440a      	add	r2, r1
 80071fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007202:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007206:	6013      	str	r3, [r2, #0]
 8007208:	e000      	b.n	800720c <USB_HC_Halt+0x1ea>
          break;
 800720a:	bf00      	nop
    }
  }

  return HAL_OK;
 800720c:	2300      	movs	r3, #0
}
 800720e:	4618      	mov	r0, r3
 8007210:	3724      	adds	r7, #36	; 0x24
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr
	...

0800721c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800721c:	b480      	push	{r7}
 800721e:	b087      	sub	sp, #28
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	460b      	mov	r3, r1
 8007226:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800722c:	78fb      	ldrb	r3, [r7, #3]
 800722e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007230:	2301      	movs	r3, #1
 8007232:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	04da      	lsls	r2, r3, #19
 8007238:	4b15      	ldr	r3, [pc, #84]	; (8007290 <USB_DoPing+0x74>)
 800723a:	4013      	ands	r3, r2
 800723c:	693a      	ldr	r2, [r7, #16]
 800723e:	0151      	lsls	r1, r2, #5
 8007240:	697a      	ldr	r2, [r7, #20]
 8007242:	440a      	add	r2, r1
 8007244:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007248:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800724c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	015a      	lsls	r2, r3, #5
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	4413      	add	r3, r2
 8007256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007264:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800726c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	015a      	lsls	r2, r3, #5
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	4413      	add	r3, r2
 8007276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800727a:	461a      	mov	r2, r3
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	371c      	adds	r7, #28
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr
 800728e:	bf00      	nop
 8007290:	1ff80000 	.word	0x1ff80000

08007294 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b088      	sub	sp, #32
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800729c:	2300      	movs	r3, #0
 800729e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80072a4:	2300      	movs	r3, #0
 80072a6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f7ff f911 	bl	80064d0 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80072ae:	2110      	movs	r1, #16
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f7ff f96b 	bl	800658c <USB_FlushTxFifo>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d001      	beq.n	80072c0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f7ff f997 	bl	80065f4 <USB_FlushRxFifo>
 80072c6:	4603      	mov	r3, r0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d001      	beq.n	80072d0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80072cc:	2301      	movs	r3, #1
 80072ce:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80072d0:	2300      	movs	r3, #0
 80072d2:	61bb      	str	r3, [r7, #24]
 80072d4:	e01f      	b.n	8007316 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	015a      	lsls	r2, r3, #5
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	4413      	add	r3, r2
 80072de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80072ec:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80072f4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80072fc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	015a      	lsls	r2, r3, #5
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	4413      	add	r3, r2
 8007306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800730a:	461a      	mov	r2, r3
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	3301      	adds	r3, #1
 8007314:	61bb      	str	r3, [r7, #24]
 8007316:	69bb      	ldr	r3, [r7, #24]
 8007318:	2b0f      	cmp	r3, #15
 800731a:	d9dc      	bls.n	80072d6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800731c:	2300      	movs	r3, #0
 800731e:	61bb      	str	r3, [r7, #24]
 8007320:	e034      	b.n	800738c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	015a      	lsls	r2, r3, #5
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	4413      	add	r3, r2
 800732a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007338:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007340:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007348:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	015a      	lsls	r2, r3, #5
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	4413      	add	r3, r2
 8007352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007356:	461a      	mov	r2, r3
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	3301      	adds	r3, #1
 8007360:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007368:	d80c      	bhi.n	8007384 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800736a:	69bb      	ldr	r3, [r7, #24]
 800736c:	015a      	lsls	r2, r3, #5
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	4413      	add	r3, r2
 8007372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800737c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007380:	d0ec      	beq.n	800735c <USB_StopHost+0xc8>
 8007382:	e000      	b.n	8007386 <USB_StopHost+0xf2>
        break;
 8007384:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	3301      	adds	r3, #1
 800738a:	61bb      	str	r3, [r7, #24]
 800738c:	69bb      	ldr	r3, [r7, #24]
 800738e:	2b0f      	cmp	r3, #15
 8007390:	d9c7      	bls.n	8007322 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007398:	461a      	mov	r2, r3
 800739a:	f04f 33ff 	mov.w	r3, #4294967295
 800739e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f04f 32ff 	mov.w	r2, #4294967295
 80073a6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f7ff f880 	bl	80064ae <USB_EnableGlobalInt>

  return ret;
 80073ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3720      	adds	r7, #32
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80073b8:	b590      	push	{r4, r7, lr}
 80073ba:	b089      	sub	sp, #36	; 0x24
 80073bc:	af04      	add	r7, sp, #16
 80073be:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80073c0:	2301      	movs	r3, #1
 80073c2:	2202      	movs	r2, #2
 80073c4:	2102      	movs	r1, #2
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 fcb2 	bl	8007d30 <USBH_FindInterface>
 80073cc:	4603      	mov	r3, r0
 80073ce:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80073d0:	7bfb      	ldrb	r3, [r7, #15]
 80073d2:	2bff      	cmp	r3, #255	; 0xff
 80073d4:	d002      	beq.n	80073dc <USBH_CDC_InterfaceInit+0x24>
 80073d6:	7bfb      	ldrb	r3, [r7, #15]
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d901      	bls.n	80073e0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80073dc:	2302      	movs	r3, #2
 80073de:	e13d      	b.n	800765c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80073e0:	7bfb      	ldrb	r3, [r7, #15]
 80073e2:	4619      	mov	r1, r3
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 fc87 	bl	8007cf8 <USBH_SelectInterface>
 80073ea:	4603      	mov	r3, r0
 80073ec:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80073ee:	7bbb      	ldrb	r3, [r7, #14]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d001      	beq.n	80073f8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80073f4:	2302      	movs	r3, #2
 80073f6:	e131      	b.n	800765c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80073fe:	2050      	movs	r0, #80	; 0x50
 8007400:	f005 fd86 	bl	800cf10 <malloc>
 8007404:	4603      	mov	r3, r0
 8007406:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800740e:	69db      	ldr	r3, [r3, #28]
 8007410:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d101      	bne.n	800741c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007418:	2302      	movs	r3, #2
 800741a:	e11f      	b.n	800765c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800741c:	2250      	movs	r2, #80	; 0x50
 800741e:	2100      	movs	r1, #0
 8007420:	68b8      	ldr	r0, [r7, #8]
 8007422:	f005 fe65 	bl	800d0f0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007426:	7bfb      	ldrb	r3, [r7, #15]
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	211a      	movs	r1, #26
 800742c:	fb01 f303 	mul.w	r3, r1, r3
 8007430:	4413      	add	r3, r2
 8007432:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	b25b      	sxtb	r3, r3
 800743a:	2b00      	cmp	r3, #0
 800743c:	da15      	bge.n	800746a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800743e:	7bfb      	ldrb	r3, [r7, #15]
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	211a      	movs	r1, #26
 8007444:	fb01 f303 	mul.w	r3, r1, r3
 8007448:	4413      	add	r3, r2
 800744a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800744e:	781a      	ldrb	r2, [r3, #0]
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007454:	7bfb      	ldrb	r3, [r7, #15]
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	211a      	movs	r1, #26
 800745a:	fb01 f303 	mul.w	r3, r1, r3
 800745e:	4413      	add	r3, r2
 8007460:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007464:	881a      	ldrh	r2, [r3, #0]
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	785b      	ldrb	r3, [r3, #1]
 800746e:	4619      	mov	r1, r3
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f002 f986 	bl	8009782 <USBH_AllocPipe>
 8007476:	4603      	mov	r3, r0
 8007478:	461a      	mov	r2, r3
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	7819      	ldrb	r1, [r3, #0]
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	7858      	ldrb	r0, [r3, #1]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007492:	68ba      	ldr	r2, [r7, #8]
 8007494:	8952      	ldrh	r2, [r2, #10]
 8007496:	9202      	str	r2, [sp, #8]
 8007498:	2203      	movs	r2, #3
 800749a:	9201      	str	r2, [sp, #4]
 800749c:	9300      	str	r3, [sp, #0]
 800749e:	4623      	mov	r3, r4
 80074a0:	4602      	mov	r2, r0
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f002 f93e 	bl	8009724 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	2200      	movs	r2, #0
 80074ae:	4619      	mov	r1, r3
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f005 fca9 	bl	800ce08 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80074b6:	2300      	movs	r3, #0
 80074b8:	2200      	movs	r2, #0
 80074ba:	210a      	movs	r1, #10
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 fc37 	bl	8007d30 <USBH_FindInterface>
 80074c2:	4603      	mov	r3, r0
 80074c4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80074c6:	7bfb      	ldrb	r3, [r7, #15]
 80074c8:	2bff      	cmp	r3, #255	; 0xff
 80074ca:	d002      	beq.n	80074d2 <USBH_CDC_InterfaceInit+0x11a>
 80074cc:	7bfb      	ldrb	r3, [r7, #15]
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d901      	bls.n	80074d6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80074d2:	2302      	movs	r3, #2
 80074d4:	e0c2      	b.n	800765c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80074d6:	7bfb      	ldrb	r3, [r7, #15]
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	211a      	movs	r1, #26
 80074dc:	fb01 f303 	mul.w	r3, r1, r3
 80074e0:	4413      	add	r3, r2
 80074e2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	b25b      	sxtb	r3, r3
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	da16      	bge.n	800751c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80074ee:	7bfb      	ldrb	r3, [r7, #15]
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	211a      	movs	r1, #26
 80074f4:	fb01 f303 	mul.w	r3, r1, r3
 80074f8:	4413      	add	r3, r2
 80074fa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80074fe:	781a      	ldrb	r2, [r3, #0]
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007504:	7bfb      	ldrb	r3, [r7, #15]
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	211a      	movs	r1, #26
 800750a:	fb01 f303 	mul.w	r3, r1, r3
 800750e:	4413      	add	r3, r2
 8007510:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007514:	881a      	ldrh	r2, [r3, #0]
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	835a      	strh	r2, [r3, #26]
 800751a:	e015      	b.n	8007548 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800751c:	7bfb      	ldrb	r3, [r7, #15]
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	211a      	movs	r1, #26
 8007522:	fb01 f303 	mul.w	r3, r1, r3
 8007526:	4413      	add	r3, r2
 8007528:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800752c:	781a      	ldrb	r2, [r3, #0]
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007532:	7bfb      	ldrb	r3, [r7, #15]
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	211a      	movs	r1, #26
 8007538:	fb01 f303 	mul.w	r3, r1, r3
 800753c:	4413      	add	r3, r2
 800753e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007542:	881a      	ldrh	r2, [r3, #0]
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007548:	7bfb      	ldrb	r3, [r7, #15]
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	211a      	movs	r1, #26
 800754e:	fb01 f303 	mul.w	r3, r1, r3
 8007552:	4413      	add	r3, r2
 8007554:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	b25b      	sxtb	r3, r3
 800755c:	2b00      	cmp	r3, #0
 800755e:	da16      	bge.n	800758e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007560:	7bfb      	ldrb	r3, [r7, #15]
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	211a      	movs	r1, #26
 8007566:	fb01 f303 	mul.w	r3, r1, r3
 800756a:	4413      	add	r3, r2
 800756c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007570:	781a      	ldrb	r2, [r3, #0]
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007576:	7bfb      	ldrb	r3, [r7, #15]
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	211a      	movs	r1, #26
 800757c:	fb01 f303 	mul.w	r3, r1, r3
 8007580:	4413      	add	r3, r2
 8007582:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007586:	881a      	ldrh	r2, [r3, #0]
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	835a      	strh	r2, [r3, #26]
 800758c:	e015      	b.n	80075ba <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800758e:	7bfb      	ldrb	r3, [r7, #15]
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	211a      	movs	r1, #26
 8007594:	fb01 f303 	mul.w	r3, r1, r3
 8007598:	4413      	add	r3, r2
 800759a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800759e:	781a      	ldrb	r2, [r3, #0]
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80075a4:	7bfb      	ldrb	r3, [r7, #15]
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	211a      	movs	r1, #26
 80075aa:	fb01 f303 	mul.w	r3, r1, r3
 80075ae:	4413      	add	r3, r2
 80075b0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80075b4:	881a      	ldrh	r2, [r3, #0]
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	7b9b      	ldrb	r3, [r3, #14]
 80075be:	4619      	mov	r1, r3
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f002 f8de 	bl	8009782 <USBH_AllocPipe>
 80075c6:	4603      	mov	r3, r0
 80075c8:	461a      	mov	r2, r3
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	7bdb      	ldrb	r3, [r3, #15]
 80075d2:	4619      	mov	r1, r3
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f002 f8d4 	bl	8009782 <USBH_AllocPipe>
 80075da:	4603      	mov	r3, r0
 80075dc:	461a      	mov	r2, r3
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	7b59      	ldrb	r1, [r3, #13]
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	7b98      	ldrb	r0, [r3, #14]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80075f6:	68ba      	ldr	r2, [r7, #8]
 80075f8:	8b12      	ldrh	r2, [r2, #24]
 80075fa:	9202      	str	r2, [sp, #8]
 80075fc:	2202      	movs	r2, #2
 80075fe:	9201      	str	r2, [sp, #4]
 8007600:	9300      	str	r3, [sp, #0]
 8007602:	4623      	mov	r3, r4
 8007604:	4602      	mov	r2, r0
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f002 f88c 	bl	8009724 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	7b19      	ldrb	r1, [r3, #12]
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	7bd8      	ldrb	r0, [r3, #15]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007620:	68ba      	ldr	r2, [r7, #8]
 8007622:	8b52      	ldrh	r2, [r2, #26]
 8007624:	9202      	str	r2, [sp, #8]
 8007626:	2202      	movs	r2, #2
 8007628:	9201      	str	r2, [sp, #4]
 800762a:	9300      	str	r3, [sp, #0]
 800762c:	4623      	mov	r3, r4
 800762e:	4602      	mov	r2, r0
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f002 f877 	bl	8009724 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	2200      	movs	r2, #0
 800763a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	7b5b      	ldrb	r3, [r3, #13]
 8007642:	2200      	movs	r2, #0
 8007644:	4619      	mov	r1, r3
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f005 fbde 	bl	800ce08 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	7b1b      	ldrb	r3, [r3, #12]
 8007650:	2200      	movs	r2, #0
 8007652:	4619      	mov	r1, r3
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f005 fbd7 	bl	800ce08 <USBH_LL_SetToggle>

  return USBH_OK;
 800765a:	2300      	movs	r3, #0
}
 800765c:	4618      	mov	r0, r3
 800765e:	3714      	adds	r7, #20
 8007660:	46bd      	mov	sp, r7
 8007662:	bd90      	pop	{r4, r7, pc}

08007664 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007672:	69db      	ldr	r3, [r3, #28]
 8007674:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d00e      	beq.n	800769c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	4619      	mov	r1, r3
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f002 f86c 	bl	8009762 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	4619      	mov	r1, r3
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f002 f897 	bl	80097c4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2200      	movs	r2, #0
 800769a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	7b1b      	ldrb	r3, [r3, #12]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d00e      	beq.n	80076c2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	7b1b      	ldrb	r3, [r3, #12]
 80076a8:	4619      	mov	r1, r3
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f002 f859 	bl	8009762 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	7b1b      	ldrb	r3, [r3, #12]
 80076b4:	4619      	mov	r1, r3
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f002 f884 	bl	80097c4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2200      	movs	r2, #0
 80076c0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	7b5b      	ldrb	r3, [r3, #13]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d00e      	beq.n	80076e8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	7b5b      	ldrb	r3, [r3, #13]
 80076ce:	4619      	mov	r1, r3
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f002 f846 	bl	8009762 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	7b5b      	ldrb	r3, [r3, #13]
 80076da:	4619      	mov	r1, r3
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f002 f871 	bl	80097c4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2200      	movs	r2, #0
 80076e6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076ee:	69db      	ldr	r3, [r3, #28]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d00b      	beq.n	800770c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076fa:	69db      	ldr	r3, [r3, #28]
 80076fc:	4618      	mov	r0, r3
 80076fe:	f005 fc0f 	bl	800cf20 <free>
    phost->pActiveClass->pData = 0U;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007708:	2200      	movs	r2, #0
 800770a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800770c:	2300      	movs	r3, #0
}
 800770e:	4618      	mov	r0, r3
 8007710:	3710      	adds	r7, #16
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007716:	b580      	push	{r7, lr}
 8007718:	b084      	sub	sp, #16
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007724:	69db      	ldr	r3, [r3, #28]
 8007726:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	3340      	adds	r3, #64	; 0x40
 800772c:	4619      	mov	r1, r3
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 f8b1 	bl	8007896 <GetLineCoding>
 8007734:	4603      	mov	r3, r0
 8007736:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007738:	7afb      	ldrb	r3, [r7, #11]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d105      	bne.n	800774a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007744:	2102      	movs	r1, #2
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800774a:	7afb      	ldrb	r3, [r7, #11]
}
 800774c:	4618      	mov	r0, r3
 800774e:	3710      	adds	r7, #16
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800775c:	2301      	movs	r3, #1
 800775e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007760:	2300      	movs	r3, #0
 8007762:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800776a:	69db      	ldr	r3, [r3, #28]
 800776c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007774:	2b04      	cmp	r3, #4
 8007776:	d877      	bhi.n	8007868 <USBH_CDC_Process+0x114>
 8007778:	a201      	add	r2, pc, #4	; (adr r2, 8007780 <USBH_CDC_Process+0x2c>)
 800777a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800777e:	bf00      	nop
 8007780:	08007795 	.word	0x08007795
 8007784:	0800779b 	.word	0x0800779b
 8007788:	080077cb 	.word	0x080077cb
 800778c:	0800783f 	.word	0x0800783f
 8007790:	0800784d 	.word	0x0800784d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007794:	2300      	movs	r3, #0
 8007796:	73fb      	strb	r3, [r7, #15]
      break;
 8007798:	e06d      	b.n	8007876 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800779e:	4619      	mov	r1, r3
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 f897 	bl	80078d4 <SetLineCoding>
 80077a6:	4603      	mov	r3, r0
 80077a8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80077aa:	7bbb      	ldrb	r3, [r7, #14]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d104      	bne.n	80077ba <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	2202      	movs	r2, #2
 80077b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80077b8:	e058      	b.n	800786c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80077ba:	7bbb      	ldrb	r3, [r7, #14]
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d055      	beq.n	800786c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	2204      	movs	r2, #4
 80077c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80077c8:	e050      	b.n	800786c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	3340      	adds	r3, #64	; 0x40
 80077ce:	4619      	mov	r1, r3
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 f860 	bl	8007896 <GetLineCoding>
 80077d6:	4603      	mov	r3, r0
 80077d8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80077da:	7bbb      	ldrb	r3, [r7, #14]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d126      	bne.n	800782e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	2200      	movs	r2, #0
 80077e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077f2:	791b      	ldrb	r3, [r3, #4]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d13b      	bne.n	8007870 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007802:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007804:	429a      	cmp	r2, r3
 8007806:	d133      	bne.n	8007870 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007812:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007814:	429a      	cmp	r2, r3
 8007816:	d12b      	bne.n	8007870 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007820:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007822:	429a      	cmp	r2, r3
 8007824:	d124      	bne.n	8007870 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 f982 	bl	8007b30 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800782c:	e020      	b.n	8007870 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800782e:	7bbb      	ldrb	r3, [r7, #14]
 8007830:	2b01      	cmp	r3, #1
 8007832:	d01d      	beq.n	8007870 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	2204      	movs	r2, #4
 8007838:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800783c:	e018      	b.n	8007870 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 f867 	bl	8007912 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 f8f6 	bl	8007a36 <CDC_ProcessReception>
      break;
 800784a:	e014      	b.n	8007876 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800784c:	2100      	movs	r1, #0
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f001 f957 	bl	8008b02 <USBH_ClrFeature>
 8007854:	4603      	mov	r3, r0
 8007856:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007858:	7bbb      	ldrb	r3, [r7, #14]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d10a      	bne.n	8007874 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	2200      	movs	r2, #0
 8007862:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007866:	e005      	b.n	8007874 <USBH_CDC_Process+0x120>

    default:
      break;
 8007868:	bf00      	nop
 800786a:	e004      	b.n	8007876 <USBH_CDC_Process+0x122>
      break;
 800786c:	bf00      	nop
 800786e:	e002      	b.n	8007876 <USBH_CDC_Process+0x122>
      break;
 8007870:	bf00      	nop
 8007872:	e000      	b.n	8007876 <USBH_CDC_Process+0x122>
      break;
 8007874:	bf00      	nop

  }

  return status;
 8007876:	7bfb      	ldrb	r3, [r7, #15]
}
 8007878:	4618      	mov	r0, r3
 800787a:	3710      	adds	r7, #16
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007880:	b480      	push	{r7}
 8007882:	b083      	sub	sp, #12
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007888:	2300      	movs	r3, #0
}
 800788a:	4618      	mov	r0, r3
 800788c:	370c      	adds	r7, #12
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr

08007896 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007896:	b580      	push	{r7, lr}
 8007898:	b082      	sub	sp, #8
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
 800789e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	22a1      	movs	r2, #161	; 0xa1
 80078a4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2221      	movs	r2, #33	; 0x21
 80078aa:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2200      	movs	r2, #0
 80078b6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2207      	movs	r2, #7
 80078bc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	2207      	movs	r2, #7
 80078c2:	4619      	mov	r1, r3
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f001 fbeb 	bl	80090a0 <USBH_CtlReq>
 80078ca:	4603      	mov	r3, r0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3708      	adds	r7, #8
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b082      	sub	sp, #8
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2221      	movs	r2, #33	; 0x21
 80078e2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2220      	movs	r2, #32
 80078e8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2200      	movs	r2, #0
 80078ee:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2207      	movs	r2, #7
 80078fa:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	2207      	movs	r2, #7
 8007900:	4619      	mov	r1, r3
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f001 fbcc 	bl	80090a0 <USBH_CtlReq>
 8007908:	4603      	mov	r3, r0
}
 800790a:	4618      	mov	r0, r3
 800790c:	3708      	adds	r7, #8
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}

08007912 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007912:	b580      	push	{r7, lr}
 8007914:	b086      	sub	sp, #24
 8007916:	af02      	add	r7, sp, #8
 8007918:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007920:	69db      	ldr	r3, [r3, #28]
 8007922:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007924:	2300      	movs	r3, #0
 8007926:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800792e:	2b01      	cmp	r3, #1
 8007930:	d002      	beq.n	8007938 <CDC_ProcessTransmission+0x26>
 8007932:	2b02      	cmp	r3, #2
 8007934:	d023      	beq.n	800797e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007936:	e07a      	b.n	8007a2e <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800793c:	68fa      	ldr	r2, [r7, #12]
 800793e:	8b12      	ldrh	r2, [r2, #24]
 8007940:	4293      	cmp	r3, r2
 8007942:	d90b      	bls.n	800795c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	69d9      	ldr	r1, [r3, #28]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	8b1a      	ldrh	r2, [r3, #24]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	7b5b      	ldrb	r3, [r3, #13]
 8007950:	2001      	movs	r0, #1
 8007952:	9000      	str	r0, [sp, #0]
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f001 fea2 	bl	800969e <USBH_BulkSendData>
 800795a:	e00b      	b.n	8007974 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8007964:	b29a      	uxth	r2, r3
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	7b5b      	ldrb	r3, [r3, #13]
 800796a:	2001      	movs	r0, #1
 800796c:	9000      	str	r0, [sp, #0]
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f001 fe95 	bl	800969e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2202      	movs	r2, #2
 8007978:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800797c:	e057      	b.n	8007a2e <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	7b5b      	ldrb	r3, [r3, #13]
 8007982:	4619      	mov	r1, r3
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f005 fa15 	bl	800cdb4 <USBH_LL_GetURBState>
 800798a:	4603      	mov	r3, r0
 800798c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800798e:	7afb      	ldrb	r3, [r7, #11]
 8007990:	2b01      	cmp	r3, #1
 8007992:	d136      	bne.n	8007a02 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007998:	68fa      	ldr	r2, [r7, #12]
 800799a:	8b12      	ldrh	r2, [r2, #24]
 800799c:	4293      	cmp	r3, r2
 800799e:	d90e      	bls.n	80079be <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a4:	68fa      	ldr	r2, [r7, #12]
 80079a6:	8b12      	ldrh	r2, [r2, #24]
 80079a8:	1a9a      	subs	r2, r3, r2
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	69db      	ldr	r3, [r3, #28]
 80079b2:	68fa      	ldr	r2, [r7, #12]
 80079b4:	8b12      	ldrh	r2, [r2, #24]
 80079b6:	441a      	add	r2, r3
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	61da      	str	r2, [r3, #28]
 80079bc:	e002      	b.n	80079c4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2200      	movs	r2, #0
 80079c2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d004      	beq.n	80079d6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80079d4:	e006      	b.n	80079e4 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2200      	movs	r2, #0
 80079da:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 f892 	bl	8007b08 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2204      	movs	r2, #4
 80079e8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80079f8:	2300      	movs	r3, #0
 80079fa:	2200      	movs	r2, #0
 80079fc:	f002 f8f8 	bl	8009bf0 <osMessageQueuePut>
      break;
 8007a00:	e014      	b.n	8007a2c <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8007a02:	7afb      	ldrb	r3, [r7, #11]
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	d111      	bne.n	8007a2c <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2204      	movs	r2, #4
 8007a14:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007a24:	2300      	movs	r3, #0
 8007a26:	2200      	movs	r2, #0
 8007a28:	f002 f8e2 	bl	8009bf0 <osMessageQueuePut>
      break;
 8007a2c:	bf00      	nop
  }
}
 8007a2e:	bf00      	nop
 8007a30:	3710      	adds	r7, #16
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}

08007a36 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b086      	sub	sp, #24
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a44:	69db      	ldr	r3, [r3, #28]
 8007a46:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007a52:	2b03      	cmp	r3, #3
 8007a54:	d002      	beq.n	8007a5c <CDC_ProcessReception+0x26>
 8007a56:	2b04      	cmp	r3, #4
 8007a58:	d00e      	beq.n	8007a78 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007a5a:	e051      	b.n	8007b00 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	6a19      	ldr	r1, [r3, #32]
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	8b5a      	ldrh	r2, [r3, #26]
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	7b1b      	ldrb	r3, [r3, #12]
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f001 fe3d 	bl	80096e8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	2204      	movs	r2, #4
 8007a72:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007a76:	e043      	b.n	8007b00 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	7b1b      	ldrb	r3, [r3, #12]
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f005 f998 	bl	800cdb4 <USBH_LL_GetURBState>
 8007a84:	4603      	mov	r3, r0
 8007a86:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007a88:	7cfb      	ldrb	r3, [r7, #19]
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d137      	bne.n	8007afe <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	7b1b      	ldrb	r3, [r3, #12]
 8007a92:	4619      	mov	r1, r3
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f005 f8fb 	bl	800cc90 <USBH_LL_GetLastXferSize>
 8007a9a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa0:	68fa      	ldr	r2, [r7, #12]
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d016      	beq.n	8007ad4 <CDC_ProcessReception+0x9e>
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	8b5b      	ldrh	r3, [r3, #26]
 8007aaa:	461a      	mov	r2, r3
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d910      	bls.n	8007ad4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	1ad2      	subs	r2, r2, r3
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	6a1a      	ldr	r2, [r3, #32]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	441a      	add	r2, r3
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	2203      	movs	r2, #3
 8007ace:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8007ad2:	e006      	b.n	8007ae2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 f81d 	bl	8007b1c <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2204      	movs	r2, #4
 8007ae6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007af6:	2300      	movs	r3, #0
 8007af8:	2200      	movs	r2, #0
 8007afa:	f002 f879 	bl	8009bf0 <osMessageQueuePut>
      break;
 8007afe:	bf00      	nop
  }
}
 8007b00:	bf00      	nop
 8007b02:	3718      	adds	r7, #24
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007b10:	bf00      	nop
 8007b12:	370c      	adds	r7, #12
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007b24:	bf00      	nop
 8007b26:	370c      	adds	r7, #12
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b083      	sub	sp, #12
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007b38:	bf00      	nop
 8007b3a:	370c      	adds	r7, #12
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	60b9      	str	r1, [r7, #8]
 8007b4e:	4613      	mov	r3, r2
 8007b50:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d101      	bne.n	8007b5c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007b58:	2302      	movs	r3, #2
 8007b5a:	e044      	b.n	8007be6 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	79fa      	ldrb	r2, [r7, #7]
 8007b60:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2200      	movs	r2, #0
 8007b68:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007b74:	68f8      	ldr	r0, [r7, #12]
 8007b76:	f000 f841 	bl	8007bfc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2200      	movs	r2, #0
 8007b86:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2200      	movs	r2, #0
 8007b96:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d003      	beq.n	8007ba8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	68ba      	ldr	r2, [r7, #8]
 8007ba4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8007ba8:	2200      	movs	r2, #0
 8007baa:	2104      	movs	r1, #4
 8007bac:	2010      	movs	r0, #16
 8007bae:	f001 ffac 	bl	8009b0a <osMessageQueueNew>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 8007bba:	4b0d      	ldr	r3, [pc, #52]	; (8007bf0 <USBH_Init+0xac>)
 8007bbc:	4a0d      	ldr	r2, [pc, #52]	; (8007bf4 <USBH_Init+0xb0>)
 8007bbe:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 8007bc0:	4b0b      	ldr	r3, [pc, #44]	; (8007bf0 <USBH_Init+0xac>)
 8007bc2:	2280      	movs	r2, #128	; 0x80
 8007bc4:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 8007bc6:	4b0a      	ldr	r3, [pc, #40]	; (8007bf0 <USBH_Init+0xac>)
 8007bc8:	2218      	movs	r2, #24
 8007bca:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8007bcc:	4a08      	ldr	r2, [pc, #32]	; (8007bf0 <USBH_Init+0xac>)
 8007bce:	68f9      	ldr	r1, [r7, #12]
 8007bd0:	4809      	ldr	r0, [pc, #36]	; (8007bf8 <USBH_Init+0xb4>)
 8007bd2:	f001 fec7 	bl	8009964 <osThreadNew>
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007bde:	68f8      	ldr	r0, [r7, #12]
 8007be0:	f004 ffa2 	bl	800cb28 <USBH_LL_Init>

  return USBH_OK;
 8007be4:	2300      	movs	r3, #0
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3710      	adds	r7, #16
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	2000028c 	.word	0x2000028c
 8007bf4:	0800da4c 	.word	0x0800da4c
 8007bf8:	08008879 	.word	0x08008879

08007bfc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b085      	sub	sp, #20
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007c04:	2300      	movs	r3, #0
 8007c06:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007c08:	2300      	movs	r3, #0
 8007c0a:	60fb      	str	r3, [r7, #12]
 8007c0c:	e009      	b.n	8007c22 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	33e0      	adds	r3, #224	; 0xe0
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	4413      	add	r3, r2
 8007c18:	2200      	movs	r2, #0
 8007c1a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	3301      	adds	r3, #1
 8007c20:	60fb      	str	r3, [r7, #12]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2b0f      	cmp	r3, #15
 8007c26:	d9f2      	bls.n	8007c0e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007c28:	2300      	movs	r3, #0
 8007c2a:	60fb      	str	r3, [r7, #12]
 8007c2c:	e009      	b.n	8007c42 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	4413      	add	r3, r2
 8007c34:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007c38:	2200      	movs	r2, #0
 8007c3a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	3301      	adds	r3, #1
 8007c40:	60fb      	str	r3, [r7, #12]
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c48:	d3f1      	bcc.n	8007c2e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2201      	movs	r2, #1
 8007c5a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2201      	movs	r2, #1
 8007c68:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2240      	movs	r2, #64	; 0x40
 8007c6e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2201      	movs	r2, #1
 8007c82:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007c96:	2300      	movs	r3, #0
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3714      	adds	r7, #20
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr

08007ca4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b085      	sub	sp, #20
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d016      	beq.n	8007ce6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d10e      	bne.n	8007ce0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007cc8:	1c59      	adds	r1, r3, #1
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	33de      	adds	r3, #222	; 0xde
 8007cd4:	6839      	ldr	r1, [r7, #0]
 8007cd6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	73fb      	strb	r3, [r7, #15]
 8007cde:	e004      	b.n	8007cea <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007ce0:	2302      	movs	r3, #2
 8007ce2:	73fb      	strb	r3, [r7, #15]
 8007ce4:	e001      	b.n	8007cea <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007ce6:	2302      	movs	r3, #2
 8007ce8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3714      	adds	r7, #20
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b085      	sub	sp, #20
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	460b      	mov	r3, r1
 8007d02:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007d04:	2300      	movs	r3, #0
 8007d06:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007d0e:	78fa      	ldrb	r2, [r7, #3]
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d204      	bcs.n	8007d1e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	78fa      	ldrb	r2, [r7, #3]
 8007d18:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007d1c:	e001      	b.n	8007d22 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007d1e:	2302      	movs	r3, #2
 8007d20:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3714      	adds	r7, #20
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b087      	sub	sp, #28
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	4608      	mov	r0, r1
 8007d3a:	4611      	mov	r1, r2
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	4603      	mov	r3, r0
 8007d40:	70fb      	strb	r3, [r7, #3]
 8007d42:	460b      	mov	r3, r1
 8007d44:	70bb      	strb	r3, [r7, #2]
 8007d46:	4613      	mov	r3, r2
 8007d48:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007d58:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007d5a:	e025      	b.n	8007da8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007d5c:	7dfb      	ldrb	r3, [r7, #23]
 8007d5e:	221a      	movs	r2, #26
 8007d60:	fb02 f303 	mul.w	r3, r2, r3
 8007d64:	3308      	adds	r3, #8
 8007d66:	68fa      	ldr	r2, [r7, #12]
 8007d68:	4413      	add	r3, r2
 8007d6a:	3302      	adds	r3, #2
 8007d6c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	795b      	ldrb	r3, [r3, #5]
 8007d72:	78fa      	ldrb	r2, [r7, #3]
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d002      	beq.n	8007d7e <USBH_FindInterface+0x4e>
 8007d78:	78fb      	ldrb	r3, [r7, #3]
 8007d7a:	2bff      	cmp	r3, #255	; 0xff
 8007d7c:	d111      	bne.n	8007da2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007d82:	78ba      	ldrb	r2, [r7, #2]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d002      	beq.n	8007d8e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007d88:	78bb      	ldrb	r3, [r7, #2]
 8007d8a:	2bff      	cmp	r3, #255	; 0xff
 8007d8c:	d109      	bne.n	8007da2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007d92:	787a      	ldrb	r2, [r7, #1]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d002      	beq.n	8007d9e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007d98:	787b      	ldrb	r3, [r7, #1]
 8007d9a:	2bff      	cmp	r3, #255	; 0xff
 8007d9c:	d101      	bne.n	8007da2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007d9e:	7dfb      	ldrb	r3, [r7, #23]
 8007da0:	e006      	b.n	8007db0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007da2:	7dfb      	ldrb	r3, [r7, #23]
 8007da4:	3301      	adds	r3, #1
 8007da6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007da8:	7dfb      	ldrb	r3, [r7, #23]
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d9d6      	bls.n	8007d5c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007dae:	23ff      	movs	r3, #255	; 0xff
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	371c      	adds	r7, #28
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b082      	sub	sp, #8
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f004 feeb 	bl	800cba0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007dca:	2101      	movs	r1, #1
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f005 f804 	bl	800cdda <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007dd2:	2300      	movs	r3, #0
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3708      	adds	r7, #8
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b088      	sub	sp, #32
 8007de0:	af04      	add	r7, sp, #16
 8007de2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007de4:	2302      	movs	r3, #2
 8007de6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007de8:	2300      	movs	r3, #0
 8007dea:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d102      	bne.n	8007dfe <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2203      	movs	r2, #3
 8007dfc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	2b0b      	cmp	r3, #11
 8007e06:	f200 8247 	bhi.w	8008298 <USBH_Process+0x4bc>
 8007e0a:	a201      	add	r2, pc, #4	; (adr r2, 8007e10 <USBH_Process+0x34>)
 8007e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e10:	08007e41 	.word	0x08007e41
 8007e14:	08007e8f 	.word	0x08007e8f
 8007e18:	08007f13 	.word	0x08007f13
 8007e1c:	08008217 	.word	0x08008217
 8007e20:	08008299 	.word	0x08008299
 8007e24:	08007fd3 	.word	0x08007fd3
 8007e28:	080081a1 	.word	0x080081a1
 8007e2c:	08008025 	.word	0x08008025
 8007e30:	08008061 	.word	0x08008061
 8007e34:	0800809b 	.word	0x0800809b
 8007e38:	080080f9 	.word	0x080080f9
 8007e3c:	080081ff 	.word	0x080081ff
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	f000 8227 	beq.w	800829c <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2201      	movs	r2, #1
 8007e52:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007e54:	20c8      	movs	r0, #200	; 0xc8
 8007e56:	f005 f807 	bl	800ce68 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f004 fefd 	bl	800cc5a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007e84:	2300      	movs	r3, #0
 8007e86:	2200      	movs	r2, #0
 8007e88:	f001 feb2 	bl	8009bf0 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8007e8c:	e206      	b.n	800829c <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d107      	bne.n	8007ea8 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2202      	movs	r2, #2
 8007ea4:	701a      	strb	r2, [r3, #0]
 8007ea6:	e025      	b.n	8007ef4 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007eae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007eb2:	d914      	bls.n	8007ede <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007eba:	3301      	adds	r3, #1
 8007ebc:	b2da      	uxtb	r2, r3
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007eca:	2b03      	cmp	r3, #3
 8007ecc:	d903      	bls.n	8007ed6 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	220d      	movs	r2, #13
 8007ed2:	701a      	strb	r2, [r3, #0]
 8007ed4:	e00e      	b.n	8007ef4 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	701a      	strb	r2, [r3, #0]
 8007edc:	e00a      	b.n	8007ef4 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007ee4:	f103 020a 	add.w	r2, r3, #10
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007eee:	200a      	movs	r0, #10
 8007ef0:	f004 ffba 	bl	800ce68 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007f08:	2300      	movs	r3, #0
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f001 fe70 	bl	8009bf0 <osMessageQueuePut>
#endif
#endif
      break;
 8007f10:	e1cb      	b.n	80082aa <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d005      	beq.n	8007f28 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f22:	2104      	movs	r1, #4
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007f28:	2064      	movs	r0, #100	; 0x64
 8007f2a:	f004 ff9d 	bl	800ce68 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f004 fe6c 	bl	800cc0c <USBH_LL_GetSpeed>
 8007f34:	4603      	mov	r3, r0
 8007f36:	461a      	mov	r2, r3
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2205      	movs	r2, #5
 8007f42:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007f44:	2100      	movs	r1, #0
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f001 fc1b 	bl	8009782 <USBH_AllocPipe>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	461a      	mov	r2, r3
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007f54:	2180      	movs	r1, #128	; 0x80
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f001 fc13 	bl	8009782 <USBH_AllocPipe>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	461a      	mov	r2, r3
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	7919      	ldrb	r1, [r3, #4]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007f78:	b292      	uxth	r2, r2
 8007f7a:	9202      	str	r2, [sp, #8]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	9201      	str	r2, [sp, #4]
 8007f80:	9300      	str	r3, [sp, #0]
 8007f82:	4603      	mov	r3, r0
 8007f84:	2280      	movs	r2, #128	; 0x80
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f001 fbcc 	bl	8009724 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	7959      	ldrb	r1, [r3, #5]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007fa0:	b292      	uxth	r2, r2
 8007fa2:	9202      	str	r2, [sp, #8]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	9201      	str	r2, [sp, #4]
 8007fa8:	9300      	str	r3, [sp, #0]
 8007faa:	4603      	mov	r3, r0
 8007fac:	2200      	movs	r2, #0
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f001 fbb8 	bl	8009724 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007fc8:	2300      	movs	r3, #0
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f001 fe10 	bl	8009bf0 <osMessageQueuePut>
#endif
#endif
      break;
 8007fd0:	e16b      	b.n	80082aa <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 f96e 	bl	80082b4 <USBH_HandleEnum>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007fdc:	7bbb      	ldrb	r3, [r7, #14]
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	f040 815d 	bne.w	80082a0 <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d103      	bne.n	8008000 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2208      	movs	r2, #8
 8007ffc:	701a      	strb	r2, [r3, #0]
 8007ffe:	e002      	b.n	8008006 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2207      	movs	r2, #7
 8008004:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2205      	movs	r2, #5
 800800a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800801a:	2300      	movs	r3, #0
 800801c:	2200      	movs	r2, #0
 800801e:	f001 fde7 	bl	8009bf0 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8008022:	e13d      	b.n	80082a0 <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800802a:	2b00      	cmp	r3, #0
 800802c:	f000 813a 	beq.w	80082a4 <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008036:	2101      	movs	r1, #1
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2208      	movs	r2, #8
 8008040:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2205      	movs	r2, #5
 8008046:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008056:	2300      	movs	r3, #0
 8008058:	2200      	movs	r2, #0
 800805a:	f001 fdc9 	bl	8009bf0 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800805e:	e121      	b.n	80082a4 <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008066:	b29b      	uxth	r3, r3
 8008068:	4619      	mov	r1, r3
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 fd02 	bl	8008a74 <USBH_SetCfg>
 8008070:	4603      	mov	r3, r0
 8008072:	2b00      	cmp	r3, #0
 8008074:	d102      	bne.n	800807c <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2209      	movs	r2, #9
 800807a:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2201      	movs	r2, #1
 8008080:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008090:	2300      	movs	r3, #0
 8008092:	2200      	movs	r2, #0
 8008094:	f001 fdac 	bl	8009bf0 <osMessageQueuePut>
#endif
#endif
      break;
 8008098:	e107      	b.n	80082aa <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80080a0:	f003 0320 	and.w	r3, r3, #32
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d015      	beq.n	80080d4 <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80080a8:	2101      	movs	r1, #1
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 fd05 	bl	8008aba <USBH_SetFeature>
 80080b0:	4603      	mov	r3, r0
 80080b2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80080b4:	7bbb      	ldrb	r3, [r7, #14]
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d103      	bne.n	80080c4 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	220a      	movs	r2, #10
 80080c0:	701a      	strb	r2, [r3, #0]
 80080c2:	e00a      	b.n	80080da <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 80080c4:	7bbb      	ldrb	r3, [r7, #14]
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	2b03      	cmp	r3, #3
 80080ca:	d106      	bne.n	80080da <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	220a      	movs	r2, #10
 80080d0:	701a      	strb	r2, [r3, #0]
 80080d2:	e002      	b.n	80080da <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	220a      	movs	r2, #10
 80080d8:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2201      	movs	r2, #1
 80080de:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80080ee:	2300      	movs	r3, #0
 80080f0:	2200      	movs	r2, #0
 80080f2:	f001 fd7d 	bl	8009bf0 <osMessageQueuePut>
#endif
#endif
      break;
 80080f6:	e0d8      	b.n	80082aa <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d03f      	beq.n	8008182 <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800810a:	2300      	movs	r3, #0
 800810c:	73fb      	strb	r3, [r7, #15]
 800810e:	e016      	b.n	800813e <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008110:	7bfa      	ldrb	r2, [r7, #15]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	32de      	adds	r2, #222	; 0xde
 8008116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800811a:	791a      	ldrb	r2, [r3, #4]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008122:	429a      	cmp	r2, r3
 8008124:	d108      	bne.n	8008138 <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008126:	7bfa      	ldrb	r2, [r7, #15]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	32de      	adds	r2, #222	; 0xde
 800812c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008136:	e005      	b.n	8008144 <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008138:	7bfb      	ldrb	r3, [r7, #15]
 800813a:	3301      	adds	r3, #1
 800813c:	73fb      	strb	r3, [r7, #15]
 800813e:	7bfb      	ldrb	r3, [r7, #15]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d0e5      	beq.n	8008110 <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800814a:	2b00      	cmp	r3, #0
 800814c:	d016      	beq.n	800817c <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	4798      	blx	r3
 800815a:	4603      	mov	r3, r0
 800815c:	2b00      	cmp	r3, #0
 800815e:	d109      	bne.n	8008174 <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2206      	movs	r2, #6
 8008164:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800816c:	2103      	movs	r1, #3
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	4798      	blx	r3
 8008172:	e006      	b.n	8008182 <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	220d      	movs	r2, #13
 8008178:	701a      	strb	r2, [r3, #0]
 800817a:	e002      	b.n	8008182 <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	220d      	movs	r2, #13
 8008180:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2205      	movs	r2, #5
 8008186:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008196:	2300      	movs	r3, #0
 8008198:	2200      	movs	r2, #0
 800819a:	f001 fd29 	bl	8009bf0 <osMessageQueuePut>
#endif
#endif
      break;
 800819e:	e084      	b.n	80082aa <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d017      	beq.n	80081da <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081b0:	691b      	ldr	r3, [r3, #16]
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	4798      	blx	r3
 80081b6:	4603      	mov	r3, r0
 80081b8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80081ba:	7bbb      	ldrb	r3, [r7, #14]
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d103      	bne.n	80081ca <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	220b      	movs	r2, #11
 80081c6:	701a      	strb	r2, [r3, #0]
 80081c8:	e00a      	b.n	80081e0 <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 80081ca:	7bbb      	ldrb	r3, [r7, #14]
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	2b02      	cmp	r3, #2
 80081d0:	d106      	bne.n	80081e0 <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	220d      	movs	r2, #13
 80081d6:	701a      	strb	r2, [r3, #0]
 80081d8:	e002      	b.n	80081e0 <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	220d      	movs	r2, #13
 80081de:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2205      	movs	r2, #5
 80081e4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80081f4:	2300      	movs	r3, #0
 80081f6:	2200      	movs	r2, #0
 80081f8:	f001 fcfa 	bl	8009bf0 <osMessageQueuePut>
#endif
#endif
      break;
 80081fc:	e055      	b.n	80082aa <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008204:	2b00      	cmp	r3, #0
 8008206:	d04f      	beq.n	80082a8 <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800820e:	695b      	ldr	r3, [r3, #20]
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	4798      	blx	r3
      }
      break;
 8008214:	e048      	b.n	80082a8 <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2200      	movs	r2, #0
 800821a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f7ff fcec 	bl	8007bfc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800822a:	2b00      	cmp	r3, #0
 800822c:	d009      	beq.n	8008242 <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008234:	68db      	ldr	r3, [r3, #12]
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008248:	2b00      	cmp	r3, #0
 800824a:	d005      	beq.n	8008258 <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008252:	2105      	movs	r1, #5
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800825e:	b2db      	uxtb	r3, r3
 8008260:	2b01      	cmp	r3, #1
 8008262:	d107      	bne.n	8008274 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2200      	movs	r2, #0
 8008268:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f7ff fda5 	bl	8007dbc <USBH_Start>
 8008272:	e002      	b.n	800827a <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f004 fc93 	bl	800cba0 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2201      	movs	r2, #1
 800827e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800828e:	2300      	movs	r3, #0
 8008290:	2200      	movs	r2, #0
 8008292:	f001 fcad 	bl	8009bf0 <osMessageQueuePut>
#endif
#endif
      break;
 8008296:	e008      	b.n	80082aa <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 8008298:	bf00      	nop
 800829a:	e006      	b.n	80082aa <USBH_Process+0x4ce>
      break;
 800829c:	bf00      	nop
 800829e:	e004      	b.n	80082aa <USBH_Process+0x4ce>
      break;
 80082a0:	bf00      	nop
 80082a2:	e002      	b.n	80082aa <USBH_Process+0x4ce>
    break;
 80082a4:	bf00      	nop
 80082a6:	e000      	b.n	80082aa <USBH_Process+0x4ce>
      break;
 80082a8:	bf00      	nop
  }
  return USBH_OK;
 80082aa:	2300      	movs	r3, #0
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3710      	adds	r7, #16
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b088      	sub	sp, #32
 80082b8:	af04      	add	r7, sp, #16
 80082ba:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80082bc:	2301      	movs	r3, #1
 80082be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80082c0:	2301      	movs	r3, #1
 80082c2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	785b      	ldrb	r3, [r3, #1]
 80082c8:	2b07      	cmp	r3, #7
 80082ca:	f200 8208 	bhi.w	80086de <USBH_HandleEnum+0x42a>
 80082ce:	a201      	add	r2, pc, #4	; (adr r2, 80082d4 <USBH_HandleEnum+0x20>)
 80082d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d4:	080082f5 	.word	0x080082f5
 80082d8:	080083b3 	.word	0x080083b3
 80082dc:	0800841d 	.word	0x0800841d
 80082e0:	080084ab 	.word	0x080084ab
 80082e4:	08008515 	.word	0x08008515
 80082e8:	08008585 	.word	0x08008585
 80082ec:	08008621 	.word	0x08008621
 80082f0:	0800869f 	.word	0x0800869f
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80082f4:	2108      	movs	r1, #8
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 faec 	bl	80088d4 <USBH_Get_DevDesc>
 80082fc:	4603      	mov	r3, r0
 80082fe:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008300:	7bbb      	ldrb	r3, [r7, #14]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d130      	bne.n	8008368 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2201      	movs	r2, #1
 8008314:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	7919      	ldrb	r1, [r3, #4]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800832a:	b292      	uxth	r2, r2
 800832c:	9202      	str	r2, [sp, #8]
 800832e:	2200      	movs	r2, #0
 8008330:	9201      	str	r2, [sp, #4]
 8008332:	9300      	str	r3, [sp, #0]
 8008334:	4603      	mov	r3, r0
 8008336:	2280      	movs	r2, #128	; 0x80
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f001 f9f3 	bl	8009724 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	7959      	ldrb	r1, [r3, #5]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008352:	b292      	uxth	r2, r2
 8008354:	9202      	str	r2, [sp, #8]
 8008356:	2200      	movs	r2, #0
 8008358:	9201      	str	r2, [sp, #4]
 800835a:	9300      	str	r3, [sp, #0]
 800835c:	4603      	mov	r3, r0
 800835e:	2200      	movs	r2, #0
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f001 f9df 	bl	8009724 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008366:	e1bc      	b.n	80086e2 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008368:	7bbb      	ldrb	r3, [r7, #14]
 800836a:	2b03      	cmp	r3, #3
 800836c:	f040 81b9 	bne.w	80086e2 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008376:	3301      	adds	r3, #1
 8008378:	b2da      	uxtb	r2, r3
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008386:	2b03      	cmp	r3, #3
 8008388:	d903      	bls.n	8008392 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	220d      	movs	r2, #13
 800838e:	701a      	strb	r2, [r3, #0]
      break;
 8008390:	e1a7      	b.n	80086e2 <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	795b      	ldrb	r3, [r3, #5]
 8008396:	4619      	mov	r1, r3
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f001 fa13 	bl	80097c4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	791b      	ldrb	r3, [r3, #4]
 80083a2:	4619      	mov	r1, r3
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f001 fa0d 	bl	80097c4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2200      	movs	r2, #0
 80083ae:	701a      	strb	r2, [r3, #0]
      break;
 80083b0:	e197      	b.n	80086e2 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80083b2:	2112      	movs	r1, #18
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 fa8d 	bl	80088d4 <USBH_Get_DevDesc>
 80083ba:	4603      	mov	r3, r0
 80083bc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80083be:	7bbb      	ldrb	r3, [r7, #14]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d103      	bne.n	80083cc <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2202      	movs	r2, #2
 80083c8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80083ca:	e18c      	b.n	80086e6 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80083cc:	7bbb      	ldrb	r3, [r7, #14]
 80083ce:	2b03      	cmp	r3, #3
 80083d0:	f040 8189 	bne.w	80086e6 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80083da:	3301      	adds	r3, #1
 80083dc:	b2da      	uxtb	r2, r3
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80083ea:	2b03      	cmp	r3, #3
 80083ec:	d903      	bls.n	80083f6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	220d      	movs	r2, #13
 80083f2:	701a      	strb	r2, [r3, #0]
      break;
 80083f4:	e177      	b.n	80086e6 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	795b      	ldrb	r3, [r3, #5]
 80083fa:	4619      	mov	r1, r3
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f001 f9e1 	bl	80097c4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	791b      	ldrb	r3, [r3, #4]
 8008406:	4619      	mov	r1, r3
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f001 f9db 	bl	80097c4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2200      	movs	r2, #0
 8008412:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2200      	movs	r2, #0
 8008418:	701a      	strb	r2, [r3, #0]
      break;
 800841a:	e164      	b.n	80086e6 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800841c:	2101      	movs	r1, #1
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 fb04 	bl	8008a2c <USBH_SetAddress>
 8008424:	4603      	mov	r3, r0
 8008426:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008428:	7bbb      	ldrb	r3, [r7, #14]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d132      	bne.n	8008494 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800842e:	2002      	movs	r0, #2
 8008430:	f004 fd1a 	bl	800ce68 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2201      	movs	r2, #1
 8008438:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2203      	movs	r2, #3
 8008440:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	7919      	ldrb	r1, [r3, #4]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008456:	b292      	uxth	r2, r2
 8008458:	9202      	str	r2, [sp, #8]
 800845a:	2200      	movs	r2, #0
 800845c:	9201      	str	r2, [sp, #4]
 800845e:	9300      	str	r3, [sp, #0]
 8008460:	4603      	mov	r3, r0
 8008462:	2280      	movs	r2, #128	; 0x80
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f001 f95d 	bl	8009724 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	7959      	ldrb	r1, [r3, #5]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800847e:	b292      	uxth	r2, r2
 8008480:	9202      	str	r2, [sp, #8]
 8008482:	2200      	movs	r2, #0
 8008484:	9201      	str	r2, [sp, #4]
 8008486:	9300      	str	r3, [sp, #0]
 8008488:	4603      	mov	r3, r0
 800848a:	2200      	movs	r2, #0
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f001 f949 	bl	8009724 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008492:	e12a      	b.n	80086ea <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008494:	7bbb      	ldrb	r3, [r7, #14]
 8008496:	2b03      	cmp	r3, #3
 8008498:	f040 8127 	bne.w	80086ea <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	220d      	movs	r2, #13
 80084a0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	705a      	strb	r2, [r3, #1]
      break;
 80084a8:	e11f      	b.n	80086ea <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80084aa:	2109      	movs	r1, #9
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 fa39 	bl	8008924 <USBH_Get_CfgDesc>
 80084b2:	4603      	mov	r3, r0
 80084b4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80084b6:	7bbb      	ldrb	r3, [r7, #14]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d103      	bne.n	80084c4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2204      	movs	r2, #4
 80084c0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80084c2:	e114      	b.n	80086ee <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80084c4:	7bbb      	ldrb	r3, [r7, #14]
 80084c6:	2b03      	cmp	r3, #3
 80084c8:	f040 8111 	bne.w	80086ee <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80084d2:	3301      	adds	r3, #1
 80084d4:	b2da      	uxtb	r2, r3
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80084e2:	2b03      	cmp	r3, #3
 80084e4:	d903      	bls.n	80084ee <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	220d      	movs	r2, #13
 80084ea:	701a      	strb	r2, [r3, #0]
      break;
 80084ec:	e0ff      	b.n	80086ee <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	795b      	ldrb	r3, [r3, #5]
 80084f2:	4619      	mov	r1, r3
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f001 f965 	bl	80097c4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	791b      	ldrb	r3, [r3, #4]
 80084fe:	4619      	mov	r1, r3
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f001 f95f 	bl	80097c4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2200      	movs	r2, #0
 800850a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	701a      	strb	r2, [r3, #0]
      break;
 8008512:	e0ec      	b.n	80086ee <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800851a:	4619      	mov	r1, r3
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f000 fa01 	bl	8008924 <USBH_Get_CfgDesc>
 8008522:	4603      	mov	r3, r0
 8008524:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008526:	7bbb      	ldrb	r3, [r7, #14]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d103      	bne.n	8008534 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2205      	movs	r2, #5
 8008530:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008532:	e0de      	b.n	80086f2 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008534:	7bbb      	ldrb	r3, [r7, #14]
 8008536:	2b03      	cmp	r3, #3
 8008538:	f040 80db 	bne.w	80086f2 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008542:	3301      	adds	r3, #1
 8008544:	b2da      	uxtb	r2, r3
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008552:	2b03      	cmp	r3, #3
 8008554:	d903      	bls.n	800855e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	220d      	movs	r2, #13
 800855a:	701a      	strb	r2, [r3, #0]
      break;
 800855c:	e0c9      	b.n	80086f2 <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	795b      	ldrb	r3, [r3, #5]
 8008562:	4619      	mov	r1, r3
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f001 f92d 	bl	80097c4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	791b      	ldrb	r3, [r3, #4]
 800856e:	4619      	mov	r1, r3
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f001 f927 	bl	80097c4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2200      	movs	r2, #0
 800857a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2200      	movs	r2, #0
 8008580:	701a      	strb	r2, [r3, #0]
      break;
 8008582:	e0b6      	b.n	80086f2 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800858a:	2b00      	cmp	r3, #0
 800858c:	d036      	beq.n	80085fc <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800859a:	23ff      	movs	r3, #255	; 0xff
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f000 f9e5 	bl	800896c <USBH_Get_StringDesc>
 80085a2:	4603      	mov	r3, r0
 80085a4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80085a6:	7bbb      	ldrb	r3, [r7, #14]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d111      	bne.n	80085d0 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2206      	movs	r2, #6
 80085b0:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2205      	movs	r2, #5
 80085b6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80085c6:	2300      	movs	r3, #0
 80085c8:	2200      	movs	r2, #0
 80085ca:	f001 fb11 	bl	8009bf0 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80085ce:	e092      	b.n	80086f6 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80085d0:	7bbb      	ldrb	r3, [r7, #14]
 80085d2:	2b03      	cmp	r3, #3
 80085d4:	f040 808f 	bne.w	80086f6 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2206      	movs	r2, #6
 80085dc:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2205      	movs	r2, #5
 80085e2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80085f2:	2300      	movs	r3, #0
 80085f4:	2200      	movs	r2, #0
 80085f6:	f001 fafb 	bl	8009bf0 <osMessageQueuePut>
      break;
 80085fa:	e07c      	b.n	80086f6 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2206      	movs	r2, #6
 8008600:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2205      	movs	r2, #5
 8008606:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008616:	2300      	movs	r3, #0
 8008618:	2200      	movs	r2, #0
 800861a:	f001 fae9 	bl	8009bf0 <osMessageQueuePut>
      break;
 800861e:	e06a      	b.n	80086f6 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008626:	2b00      	cmp	r3, #0
 8008628:	d027      	beq.n	800867a <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008636:	23ff      	movs	r3, #255	; 0xff
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f000 f997 	bl	800896c <USBH_Get_StringDesc>
 800863e:	4603      	mov	r3, r0
 8008640:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008642:	7bbb      	ldrb	r3, [r7, #14]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d103      	bne.n	8008650 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2207      	movs	r2, #7
 800864c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800864e:	e054      	b.n	80086fa <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008650:	7bbb      	ldrb	r3, [r7, #14]
 8008652:	2b03      	cmp	r3, #3
 8008654:	d151      	bne.n	80086fa <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2207      	movs	r2, #7
 800865a:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2205      	movs	r2, #5
 8008660:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008670:	2300      	movs	r3, #0
 8008672:	2200      	movs	r2, #0
 8008674:	f001 fabc 	bl	8009bf0 <osMessageQueuePut>
      break;
 8008678:	e03f      	b.n	80086fa <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2207      	movs	r2, #7
 800867e:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2205      	movs	r2, #5
 8008684:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008694:	2300      	movs	r3, #0
 8008696:	2200      	movs	r2, #0
 8008698:	f001 faaa 	bl	8009bf0 <osMessageQueuePut>
      break;
 800869c:	e02d      	b.n	80086fa <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d017      	beq.n	80086d8 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80086b4:	23ff      	movs	r3, #255	; 0xff
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 f958 	bl	800896c <USBH_Get_StringDesc>
 80086bc:	4603      	mov	r3, r0
 80086be:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80086c0:	7bbb      	ldrb	r3, [r7, #14]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d102      	bne.n	80086cc <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80086c6:	2300      	movs	r3, #0
 80086c8:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80086ca:	e018      	b.n	80086fe <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80086cc:	7bbb      	ldrb	r3, [r7, #14]
 80086ce:	2b03      	cmp	r3, #3
 80086d0:	d115      	bne.n	80086fe <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 80086d2:	2300      	movs	r3, #0
 80086d4:	73fb      	strb	r3, [r7, #15]
      break;
 80086d6:	e012      	b.n	80086fe <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 80086d8:	2300      	movs	r3, #0
 80086da:	73fb      	strb	r3, [r7, #15]
      break;
 80086dc:	e00f      	b.n	80086fe <USBH_HandleEnum+0x44a>

    default:
      break;
 80086de:	bf00      	nop
 80086e0:	e00e      	b.n	8008700 <USBH_HandleEnum+0x44c>
      break;
 80086e2:	bf00      	nop
 80086e4:	e00c      	b.n	8008700 <USBH_HandleEnum+0x44c>
      break;
 80086e6:	bf00      	nop
 80086e8:	e00a      	b.n	8008700 <USBH_HandleEnum+0x44c>
      break;
 80086ea:	bf00      	nop
 80086ec:	e008      	b.n	8008700 <USBH_HandleEnum+0x44c>
      break;
 80086ee:	bf00      	nop
 80086f0:	e006      	b.n	8008700 <USBH_HandleEnum+0x44c>
      break;
 80086f2:	bf00      	nop
 80086f4:	e004      	b.n	8008700 <USBH_HandleEnum+0x44c>
      break;
 80086f6:	bf00      	nop
 80086f8:	e002      	b.n	8008700 <USBH_HandleEnum+0x44c>
      break;
 80086fa:	bf00      	nop
 80086fc:	e000      	b.n	8008700 <USBH_HandleEnum+0x44c>
      break;
 80086fe:	bf00      	nop
  }
  return Status;
 8008700:	7bfb      	ldrb	r3, [r7, #15]
}
 8008702:	4618      	mov	r0, r3
 8008704:	3710      	adds	r7, #16
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
 800870a:	bf00      	nop

0800870c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800870c:	b480      	push	{r7}
 800870e:	b083      	sub	sp, #12
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	683a      	ldr	r2, [r7, #0]
 800871a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800871e:	bf00      	nop
 8008720:	370c      	adds	r7, #12
 8008722:	46bd      	mov	sp, r7
 8008724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008728:	4770      	bx	lr

0800872a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800872a:	b580      	push	{r7, lr}
 800872c:	b082      	sub	sp, #8
 800872e:	af00      	add	r7, sp, #0
 8008730:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008738:	1c5a      	adds	r2, r3, #1
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f000 f804 	bl	800874e <USBH_HandleSof>
}
 8008746:	bf00      	nop
 8008748:	3708      	adds	r7, #8
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}

0800874e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800874e:	b580      	push	{r7, lr}
 8008750:	b082      	sub	sp, #8
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	781b      	ldrb	r3, [r3, #0]
 800875a:	b2db      	uxtb	r3, r3
 800875c:	2b0b      	cmp	r3, #11
 800875e:	d10a      	bne.n	8008776 <USBH_HandleSof+0x28>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008766:	2b00      	cmp	r3, #0
 8008768:	d005      	beq.n	8008776 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008770:	699b      	ldr	r3, [r3, #24]
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	4798      	blx	r3
  }
}
 8008776:	bf00      	nop
 8008778:	3708      	adds	r7, #8
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}

0800877e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800877e:	b580      	push	{r7, lr}
 8008780:	b082      	sub	sp, #8
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2201      	movs	r2, #1
 800878a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2201      	movs	r2, #1
 8008792:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80087a2:	2300      	movs	r3, #0
 80087a4:	2200      	movs	r2, #0
 80087a6:	f001 fa23 	bl	8009bf0 <osMessageQueuePut>
#endif
#endif

  return;
 80087aa:	bf00      	nop
}
 80087ac:	3708      	adds	r7, #8
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}

080087b2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80087b2:	b480      	push	{r7}
 80087b4:	b083      	sub	sp, #12
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80087c2:	bf00      	nop
}
 80087c4:	370c      	adds	r7, #12
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr

080087ce <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80087ce:	b580      	push	{r7, lr}
 80087d0:	b082      	sub	sp, #8
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2201      	movs	r2, #1
 80087da:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2200      	movs	r2, #0
 80087e2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2200      	movs	r2, #0
 80087ea:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2201      	movs	r2, #1
 80087f2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008802:	2300      	movs	r3, #0
 8008804:	2200      	movs	r2, #0
 8008806:	f001 f9f3 	bl	8009bf0 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800880a:	2300      	movs	r3, #0
}
 800880c:	4618      	mov	r0, r3
 800880e:	3708      	adds	r7, #8
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b082      	sub	sp, #8
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2201      	movs	r2, #1
 8008820:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2200      	movs	r2, #0
 8008828:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2200      	movs	r2, #0
 8008830:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f004 f9ce 	bl	800cbd6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	791b      	ldrb	r3, [r3, #4]
 800883e:	4619      	mov	r1, r3
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 ffbf 	bl	80097c4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	795b      	ldrb	r3, [r3, #5]
 800884a:	4619      	mov	r1, r3
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 ffb9 	bl	80097c4 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2201      	movs	r2, #1
 8008856:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008866:	2300      	movs	r3, #0
 8008868:	2200      	movs	r2, #0
 800886a:	f001 f9c1 	bl	8009bf0 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800886e:	2300      	movs	r3, #0
}
 8008870:	4618      	mov	r0, r3
 8008872:	3708      	adds	r7, #8
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800888c:	f04f 33ff 	mov.w	r3, #4294967295
 8008890:	2200      	movs	r2, #0
 8008892:	f001 fa0d 	bl	8009cb0 <osMessageQueueGet>
 8008896:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d1f0      	bne.n	8008880 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f7ff fa9c 	bl	8007ddc <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 80088a4:	e7ec      	b.n	8008880 <USBH_Process_OS+0x8>

080088a6 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 80088a6:	b580      	push	{r7, lr}
 80088a8:	b082      	sub	sp, #8
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2201      	movs	r2, #1
 80088b2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80088c2:	2300      	movs	r3, #0
 80088c4:	2200      	movs	r2, #0
 80088c6:	f001 f993 	bl	8009bf0 <osMessageQueuePut>
#endif

  return USBH_OK;
 80088ca:	2300      	movs	r3, #0
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3708      	adds	r7, #8
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b086      	sub	sp, #24
 80088d8:	af02      	add	r7, sp, #8
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	460b      	mov	r3, r1
 80088de:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80088e6:	78fb      	ldrb	r3, [r7, #3]
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	9300      	str	r3, [sp, #0]
 80088ec:	4613      	mov	r3, r2
 80088ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80088f2:	2100      	movs	r1, #0
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f000 f864 	bl	80089c2 <USBH_GetDescriptor>
 80088fa:	4603      	mov	r3, r0
 80088fc:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80088fe:	7bfb      	ldrb	r3, [r7, #15]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d10a      	bne.n	800891a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f203 3026 	addw	r0, r3, #806	; 0x326
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008910:	78fa      	ldrb	r2, [r7, #3]
 8008912:	b292      	uxth	r2, r2
 8008914:	4619      	mov	r1, r3
 8008916:	f000 f919 	bl	8008b4c <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800891a:	7bfb      	ldrb	r3, [r7, #15]
}
 800891c:	4618      	mov	r0, r3
 800891e:	3710      	adds	r7, #16
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008924:	b580      	push	{r7, lr}
 8008926:	b086      	sub	sp, #24
 8008928:	af02      	add	r7, sp, #8
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	460b      	mov	r3, r1
 800892e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	331c      	adds	r3, #28
 8008934:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008936:	887b      	ldrh	r3, [r7, #2]
 8008938:	9300      	str	r3, [sp, #0]
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008940:	2100      	movs	r1, #0
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 f83d 	bl	80089c2 <USBH_GetDescriptor>
 8008948:	4603      	mov	r3, r0
 800894a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800894c:	7bfb      	ldrb	r3, [r7, #15]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d107      	bne.n	8008962 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008952:	887b      	ldrh	r3, [r7, #2]
 8008954:	461a      	mov	r2, r3
 8008956:	68b9      	ldr	r1, [r7, #8]
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 f989 	bl	8008c70 <USBH_ParseCfgDesc>
 800895e:	4603      	mov	r3, r0
 8008960:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008962:	7bfb      	ldrb	r3, [r7, #15]
}
 8008964:	4618      	mov	r0, r3
 8008966:	3710      	adds	r7, #16
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b088      	sub	sp, #32
 8008970:	af02      	add	r7, sp, #8
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	607a      	str	r2, [r7, #4]
 8008976:	461a      	mov	r2, r3
 8008978:	460b      	mov	r3, r1
 800897a:	72fb      	strb	r3, [r7, #11]
 800897c:	4613      	mov	r3, r2
 800897e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8008980:	7afb      	ldrb	r3, [r7, #11]
 8008982:	b29b      	uxth	r3, r3
 8008984:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008988:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008990:	893b      	ldrh	r3, [r7, #8]
 8008992:	9300      	str	r3, [sp, #0]
 8008994:	460b      	mov	r3, r1
 8008996:	2100      	movs	r1, #0
 8008998:	68f8      	ldr	r0, [r7, #12]
 800899a:	f000 f812 	bl	80089c2 <USBH_GetDescriptor>
 800899e:	4603      	mov	r3, r0
 80089a0:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80089a2:	7dfb      	ldrb	r3, [r7, #23]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d107      	bne.n	80089b8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80089ae:	893a      	ldrh	r2, [r7, #8]
 80089b0:	6879      	ldr	r1, [r7, #4]
 80089b2:	4618      	mov	r0, r3
 80089b4:	f000 fb26 	bl	8009004 <USBH_ParseStringDesc>
  }

  return status;
 80089b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3718      	adds	r7, #24
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}

080089c2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80089c2:	b580      	push	{r7, lr}
 80089c4:	b084      	sub	sp, #16
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	60f8      	str	r0, [r7, #12]
 80089ca:	607b      	str	r3, [r7, #4]
 80089cc:	460b      	mov	r3, r1
 80089ce:	72fb      	strb	r3, [r7, #11]
 80089d0:	4613      	mov	r3, r2
 80089d2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	789b      	ldrb	r3, [r3, #2]
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d11c      	bne.n	8008a16 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80089dc:	7afb      	ldrb	r3, [r7, #11]
 80089de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80089e2:	b2da      	uxtb	r2, r3
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2206      	movs	r2, #6
 80089ec:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	893a      	ldrh	r2, [r7, #8]
 80089f2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80089f4:	893b      	ldrh	r3, [r7, #8]
 80089f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80089fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089fe:	d104      	bne.n	8008a0a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f240 4209 	movw	r2, #1033	; 0x409
 8008a06:	829a      	strh	r2, [r3, #20]
 8008a08:	e002      	b.n	8008a10 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	8b3a      	ldrh	r2, [r7, #24]
 8008a14:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008a16:	8b3b      	ldrh	r3, [r7, #24]
 8008a18:	461a      	mov	r2, r3
 8008a1a:	6879      	ldr	r1, [r7, #4]
 8008a1c:	68f8      	ldr	r0, [r7, #12]
 8008a1e:	f000 fb3f 	bl	80090a0 <USBH_CtlReq>
 8008a22:	4603      	mov	r3, r0
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3710      	adds	r7, #16
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b082      	sub	sp, #8
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	460b      	mov	r3, r1
 8008a36:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	789b      	ldrb	r3, [r3, #2]
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d10f      	bne.n	8008a60 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2200      	movs	r2, #0
 8008a44:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2205      	movs	r2, #5
 8008a4a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008a4c:	78fb      	ldrb	r3, [r7, #3]
 8008a4e:	b29a      	uxth	r2, r3
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2200      	movs	r2, #0
 8008a58:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008a60:	2200      	movs	r2, #0
 8008a62:	2100      	movs	r1, #0
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 fb1b 	bl	80090a0 <USBH_CtlReq>
 8008a6a:	4603      	mov	r3, r0
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3708      	adds	r7, #8
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b082      	sub	sp, #8
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	460b      	mov	r3, r1
 8008a7e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	789b      	ldrb	r3, [r3, #2]
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d10e      	bne.n	8008aa6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2209      	movs	r2, #9
 8008a92:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	887a      	ldrh	r2, [r7, #2]
 8008a98:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	2100      	movs	r1, #0
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 faf8 	bl	80090a0 <USBH_CtlReq>
 8008ab0:	4603      	mov	r3, r0
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3708      	adds	r7, #8
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}

08008aba <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008aba:	b580      	push	{r7, lr}
 8008abc:	b082      	sub	sp, #8
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	6078      	str	r0, [r7, #4]
 8008ac2:	460b      	mov	r3, r1
 8008ac4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	789b      	ldrb	r3, [r3, #2]
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d10f      	bne.n	8008aee <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2203      	movs	r2, #3
 8008ad8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008ada:	78fb      	ldrb	r3, [r7, #3]
 8008adc:	b29a      	uxth	r2, r3
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2200      	movs	r2, #0
 8008aec:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008aee:	2200      	movs	r2, #0
 8008af0:	2100      	movs	r1, #0
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 fad4 	bl	80090a0 <USBH_CtlReq>
 8008af8:	4603      	mov	r3, r0
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3708      	adds	r7, #8
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}

08008b02 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008b02:	b580      	push	{r7, lr}
 8008b04:	b082      	sub	sp, #8
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
 8008b0a:	460b      	mov	r3, r1
 8008b0c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	789b      	ldrb	r3, [r3, #2]
 8008b12:	2b01      	cmp	r3, #1
 8008b14:	d10f      	bne.n	8008b36 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2202      	movs	r2, #2
 8008b1a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2201      	movs	r2, #1
 8008b20:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2200      	movs	r2, #0
 8008b26:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008b28:	78fb      	ldrb	r3, [r7, #3]
 8008b2a:	b29a      	uxth	r2, r3
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2200      	movs	r2, #0
 8008b34:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8008b36:	2200      	movs	r2, #0
 8008b38:	2100      	movs	r1, #0
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 fab0 	bl	80090a0 <USBH_CtlReq>
 8008b40:	4603      	mov	r3, r0
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3708      	adds	r7, #8
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
	...

08008b4c <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b085      	sub	sp, #20
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	60f8      	str	r0, [r7, #12]
 8008b54:	60b9      	str	r1, [r7, #8]
 8008b56:	4613      	mov	r3, r2
 8008b58:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	781a      	ldrb	r2, [r3, #0]
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	785a      	ldrb	r2, [r3, #1]
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	3302      	adds	r3, #2
 8008b6e:	781b      	ldrb	r3, [r3, #0]
 8008b70:	b29a      	uxth	r2, r3
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	3303      	adds	r3, #3
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	021b      	lsls	r3, r3, #8
 8008b7c:	b29b      	uxth	r3, r3
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	b29a      	uxth	r2, r3
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	791a      	ldrb	r2, [r3, #4]
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	795a      	ldrb	r2, [r3, #5]
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	799a      	ldrb	r2, [r3, #6]
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	79da      	ldrb	r2, [r3, #7]
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	79db      	ldrb	r3, [r3, #7]
 8008baa:	2b20      	cmp	r3, #32
 8008bac:	dc0f      	bgt.n	8008bce <USBH_ParseDevDesc+0x82>
 8008bae:	2b08      	cmp	r3, #8
 8008bb0:	db14      	blt.n	8008bdc <USBH_ParseDevDesc+0x90>
 8008bb2:	3b08      	subs	r3, #8
 8008bb4:	4a2d      	ldr	r2, [pc, #180]	; (8008c6c <USBH_ParseDevDesc+0x120>)
 8008bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8008bba:	f003 0301 	and.w	r3, r3, #1
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	bf14      	ite	ne
 8008bc2:	2301      	movne	r3, #1
 8008bc4:	2300      	moveq	r3, #0
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d102      	bne.n	8008bd2 <USBH_ParseDevDesc+0x86>
 8008bcc:	e006      	b.n	8008bdc <USBH_ParseDevDesc+0x90>
 8008bce:	2b40      	cmp	r3, #64	; 0x40
 8008bd0:	d104      	bne.n	8008bdc <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	79da      	ldrb	r2, [r3, #7]
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	71da      	strb	r2, [r3, #7]
      break;
 8008bda:	e003      	b.n	8008be4 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2240      	movs	r2, #64	; 0x40
 8008be0:	71da      	strb	r2, [r3, #7]
      break;
 8008be2:	bf00      	nop
  }

  if (length > 8U)
 8008be4:	88fb      	ldrh	r3, [r7, #6]
 8008be6:	2b08      	cmp	r3, #8
 8008be8:	d939      	bls.n	8008c5e <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	3308      	adds	r3, #8
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	b29a      	uxth	r2, r3
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	3309      	adds	r3, #9
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	021b      	lsls	r3, r3, #8
 8008bfc:	b29b      	uxth	r3, r3
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	b29a      	uxth	r2, r3
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	330a      	adds	r3, #10
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	b29a      	uxth	r2, r3
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	330b      	adds	r3, #11
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	021b      	lsls	r3, r3, #8
 8008c18:	b29b      	uxth	r3, r3
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	b29a      	uxth	r2, r3
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	330c      	adds	r3, #12
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	b29a      	uxth	r2, r3
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	330d      	adds	r3, #13
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	b29b      	uxth	r3, r3
 8008c32:	021b      	lsls	r3, r3, #8
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	4313      	orrs	r3, r2
 8008c38:	b29a      	uxth	r2, r3
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	7b9a      	ldrb	r2, [r3, #14]
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	7bda      	ldrb	r2, [r3, #15]
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	7c1a      	ldrb	r2, [r3, #16]
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	7c5a      	ldrb	r2, [r3, #17]
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	745a      	strb	r2, [r3, #17]
  }
}
 8008c5e:	bf00      	nop
 8008c60:	3714      	adds	r7, #20
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr
 8008c6a:	bf00      	nop
 8008c6c:	01000101 	.word	0x01000101

08008c70 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b08c      	sub	sp, #48	; 0x30
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	60f8      	str	r0, [r7, #12]
 8008c78:	60b9      	str	r1, [r7, #8]
 8008c7a:	4613      	mov	r3, r2
 8008c7c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008c84:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008c86:	2300      	movs	r3, #0
 8008c88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008c90:	2300      	movs	r3, #0
 8008c92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8008c96:	2300      	movs	r3, #0
 8008c98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	781a      	ldrb	r2, [r3, #0]
 8008ca4:	6a3b      	ldr	r3, [r7, #32]
 8008ca6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	785a      	ldrb	r2, [r3, #1]
 8008cac:	6a3b      	ldr	r3, [r7, #32]
 8008cae:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	3302      	adds	r3, #2
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	b29a      	uxth	r2, r3
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	3303      	adds	r3, #3
 8008cbc:	781b      	ldrb	r3, [r3, #0]
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	021b      	lsls	r3, r3, #8
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ccc:	bf28      	it	cs
 8008cce:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8008cd2:	b29a      	uxth	r2, r3
 8008cd4:	6a3b      	ldr	r3, [r7, #32]
 8008cd6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	791a      	ldrb	r2, [r3, #4]
 8008cdc:	6a3b      	ldr	r3, [r7, #32]
 8008cde:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	795a      	ldrb	r2, [r3, #5]
 8008ce4:	6a3b      	ldr	r3, [r7, #32]
 8008ce6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	799a      	ldrb	r2, [r3, #6]
 8008cec:	6a3b      	ldr	r3, [r7, #32]
 8008cee:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	79da      	ldrb	r2, [r3, #7]
 8008cf4:	6a3b      	ldr	r3, [r7, #32]
 8008cf6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	7a1a      	ldrb	r2, [r3, #8]
 8008cfc:	6a3b      	ldr	r3, [r7, #32]
 8008cfe:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8008d00:	6a3b      	ldr	r3, [r7, #32]
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	2b09      	cmp	r3, #9
 8008d06:	d002      	beq.n	8008d0e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008d08:	6a3b      	ldr	r3, [r7, #32]
 8008d0a:	2209      	movs	r2, #9
 8008d0c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008d0e:	88fb      	ldrh	r3, [r7, #6]
 8008d10:	2b09      	cmp	r3, #9
 8008d12:	f240 809d 	bls.w	8008e50 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8008d16:	2309      	movs	r3, #9
 8008d18:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008d1e:	e081      	b.n	8008e24 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008d20:	f107 0316 	add.w	r3, r7, #22
 8008d24:	4619      	mov	r1, r3
 8008d26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d28:	f000 f99f 	bl	800906a <USBH_GetNextDesc>
 8008d2c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d30:	785b      	ldrb	r3, [r3, #1]
 8008d32:	2b04      	cmp	r3, #4
 8008d34:	d176      	bne.n	8008e24 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	2b09      	cmp	r3, #9
 8008d3c:	d002      	beq.n	8008d44 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d40:	2209      	movs	r2, #9
 8008d42:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008d44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d48:	221a      	movs	r2, #26
 8008d4a:	fb02 f303 	mul.w	r3, r2, r3
 8008d4e:	3308      	adds	r3, #8
 8008d50:	6a3a      	ldr	r2, [r7, #32]
 8008d52:	4413      	add	r3, r2
 8008d54:	3302      	adds	r3, #2
 8008d56:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008d58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d5a:	69f8      	ldr	r0, [r7, #28]
 8008d5c:	f000 f87e 	bl	8008e5c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008d60:	2300      	movs	r3, #0
 8008d62:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008d66:	2300      	movs	r3, #0
 8008d68:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008d6a:	e043      	b.n	8008df4 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008d6c:	f107 0316 	add.w	r3, r7, #22
 8008d70:	4619      	mov	r1, r3
 8008d72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d74:	f000 f979 	bl	800906a <USBH_GetNextDesc>
 8008d78:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d7c:	785b      	ldrb	r3, [r3, #1]
 8008d7e:	2b05      	cmp	r3, #5
 8008d80:	d138      	bne.n	8008df4 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8008d82:	69fb      	ldr	r3, [r7, #28]
 8008d84:	795b      	ldrb	r3, [r3, #5]
 8008d86:	2b01      	cmp	r3, #1
 8008d88:	d10f      	bne.n	8008daa <USBH_ParseCfgDesc+0x13a>
 8008d8a:	69fb      	ldr	r3, [r7, #28]
 8008d8c:	799b      	ldrb	r3, [r3, #6]
 8008d8e:	2b02      	cmp	r3, #2
 8008d90:	d10b      	bne.n	8008daa <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008d92:	69fb      	ldr	r3, [r7, #28]
 8008d94:	79db      	ldrb	r3, [r3, #7]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d10f      	bne.n	8008dba <USBH_ParseCfgDesc+0x14a>
 8008d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	2b09      	cmp	r3, #9
 8008da0:	d00b      	beq.n	8008dba <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8008da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da4:	2209      	movs	r2, #9
 8008da6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008da8:	e007      	b.n	8008dba <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8008daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	2b07      	cmp	r3, #7
 8008db0:	d004      	beq.n	8008dbc <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db4:	2207      	movs	r2, #7
 8008db6:	701a      	strb	r2, [r3, #0]
 8008db8:	e000      	b.n	8008dbc <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008dba:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008dbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008dc0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008dc4:	3201      	adds	r2, #1
 8008dc6:	00d2      	lsls	r2, r2, #3
 8008dc8:	211a      	movs	r1, #26
 8008dca:	fb01 f303 	mul.w	r3, r1, r3
 8008dce:	4413      	add	r3, r2
 8008dd0:	3308      	adds	r3, #8
 8008dd2:	6a3a      	ldr	r2, [r7, #32]
 8008dd4:	4413      	add	r3, r2
 8008dd6:	3304      	adds	r3, #4
 8008dd8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008dda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ddc:	69b9      	ldr	r1, [r7, #24]
 8008dde:	68f8      	ldr	r0, [r7, #12]
 8008de0:	f000 f86b 	bl	8008eba <USBH_ParseEPDesc>
 8008de4:	4603      	mov	r3, r0
 8008de6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8008dea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008dee:	3301      	adds	r3, #1
 8008df0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008df4:	69fb      	ldr	r3, [r7, #28]
 8008df6:	791b      	ldrb	r3, [r3, #4]
 8008df8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d204      	bcs.n	8008e0a <USBH_ParseCfgDesc+0x19a>
 8008e00:	6a3b      	ldr	r3, [r7, #32]
 8008e02:	885a      	ldrh	r2, [r3, #2]
 8008e04:	8afb      	ldrh	r3, [r7, #22]
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d8b0      	bhi.n	8008d6c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008e0a:	69fb      	ldr	r3, [r7, #28]
 8008e0c:	791b      	ldrb	r3, [r3, #4]
 8008e0e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d201      	bcs.n	8008e1a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8008e16:	2303      	movs	r3, #3
 8008e18:	e01c      	b.n	8008e54 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8008e1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e1e:	3301      	adds	r3, #1
 8008e20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008e24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e28:	2b01      	cmp	r3, #1
 8008e2a:	d805      	bhi.n	8008e38 <USBH_ParseCfgDesc+0x1c8>
 8008e2c:	6a3b      	ldr	r3, [r7, #32]
 8008e2e:	885a      	ldrh	r2, [r3, #2]
 8008e30:	8afb      	ldrh	r3, [r7, #22]
 8008e32:	429a      	cmp	r2, r3
 8008e34:	f63f af74 	bhi.w	8008d20 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008e38:	6a3b      	ldr	r3, [r7, #32]
 8008e3a:	791b      	ldrb	r3, [r3, #4]
 8008e3c:	2b02      	cmp	r3, #2
 8008e3e:	bf28      	it	cs
 8008e40:	2302      	movcs	r3, #2
 8008e42:	b2db      	uxtb	r3, r3
 8008e44:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d201      	bcs.n	8008e50 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8008e4c:	2303      	movs	r3, #3
 8008e4e:	e001      	b.n	8008e54 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8008e50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3730      	adds	r7, #48	; 0x30
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}

08008e5c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b083      	sub	sp, #12
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	781a      	ldrb	r2, [r3, #0]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	785a      	ldrb	r2, [r3, #1]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	789a      	ldrb	r2, [r3, #2]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	78da      	ldrb	r2, [r3, #3]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	791a      	ldrb	r2, [r3, #4]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	795a      	ldrb	r2, [r3, #5]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	799a      	ldrb	r2, [r3, #6]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	79da      	ldrb	r2, [r3, #7]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	7a1a      	ldrb	r2, [r3, #8]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	721a      	strb	r2, [r3, #8]
}
 8008eae:	bf00      	nop
 8008eb0:	370c      	adds	r7, #12
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb8:	4770      	bx	lr

08008eba <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8008eba:	b480      	push	{r7}
 8008ebc:	b087      	sub	sp, #28
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	60f8      	str	r0, [r7, #12]
 8008ec2:	60b9      	str	r1, [r7, #8]
 8008ec4:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	781a      	ldrb	r2, [r3, #0]
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	785a      	ldrb	r2, [r3, #1]
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	789a      	ldrb	r2, [r3, #2]
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	78da      	ldrb	r2, [r3, #3]
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	3304      	adds	r3, #4
 8008eee:	781b      	ldrb	r3, [r3, #0]
 8008ef0:	b29a      	uxth	r2, r3
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	3305      	adds	r3, #5
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	b29b      	uxth	r3, r3
 8008efa:	021b      	lsls	r3, r3, #8
 8008efc:	b29b      	uxth	r3, r3
 8008efe:	4313      	orrs	r3, r2
 8008f00:	b29a      	uxth	r2, r3
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	799a      	ldrb	r2, [r3, #6]
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	889b      	ldrh	r3, [r3, #4]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d102      	bne.n	8008f1c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8008f16:	2303      	movs	r3, #3
 8008f18:	75fb      	strb	r3, [r7, #23]
 8008f1a:	e033      	b.n	8008f84 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	889b      	ldrh	r3, [r3, #4]
 8008f20:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008f24:	f023 0307 	bic.w	r3, r3, #7
 8008f28:	b29a      	uxth	r2, r3
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	889b      	ldrh	r3, [r3, #4]
 8008f32:	b21a      	sxth	r2, r3
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	3304      	adds	r3, #4
 8008f38:	781b      	ldrb	r3, [r3, #0]
 8008f3a:	b299      	uxth	r1, r3
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	3305      	adds	r3, #5
 8008f40:	781b      	ldrb	r3, [r3, #0]
 8008f42:	b29b      	uxth	r3, r3
 8008f44:	021b      	lsls	r3, r3, #8
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	430b      	orrs	r3, r1
 8008f4a:	b29b      	uxth	r3, r3
 8008f4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d110      	bne.n	8008f76 <USBH_ParseEPDesc+0xbc>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	3304      	adds	r3, #4
 8008f58:	781b      	ldrb	r3, [r3, #0]
 8008f5a:	b299      	uxth	r1, r3
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	3305      	adds	r3, #5
 8008f60:	781b      	ldrb	r3, [r3, #0]
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	021b      	lsls	r3, r3, #8
 8008f66:	b29b      	uxth	r3, r3
 8008f68:	430b      	orrs	r3, r1
 8008f6a:	b29b      	uxth	r3, r3
 8008f6c:	b21b      	sxth	r3, r3
 8008f6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008f72:	b21b      	sxth	r3, r3
 8008f74:	e001      	b.n	8008f7a <USBH_ParseEPDesc+0xc0>
 8008f76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	b21b      	sxth	r3, r3
 8008f7e:	b29a      	uxth	r2, r3
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d116      	bne.n	8008fbc <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	78db      	ldrb	r3, [r3, #3]
 8008f92:	f003 0303 	and.w	r3, r3, #3
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d005      	beq.n	8008fa6 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	78db      	ldrb	r3, [r3, #3]
 8008f9e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008fa2:	2b03      	cmp	r3, #3
 8008fa4:	d127      	bne.n	8008ff6 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	799b      	ldrb	r3, [r3, #6]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d003      	beq.n	8008fb6 <USBH_ParseEPDesc+0xfc>
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	799b      	ldrb	r3, [r3, #6]
 8008fb2:	2b10      	cmp	r3, #16
 8008fb4:	d91f      	bls.n	8008ff6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008fb6:	2303      	movs	r3, #3
 8008fb8:	75fb      	strb	r3, [r7, #23]
 8008fba:	e01c      	b.n	8008ff6 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	78db      	ldrb	r3, [r3, #3]
 8008fc0:	f003 0303 	and.w	r3, r3, #3
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d10a      	bne.n	8008fde <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	799b      	ldrb	r3, [r3, #6]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d003      	beq.n	8008fd8 <USBH_ParseEPDesc+0x11e>
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	799b      	ldrb	r3, [r3, #6]
 8008fd4:	2b10      	cmp	r3, #16
 8008fd6:	d90e      	bls.n	8008ff6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008fd8:	2303      	movs	r3, #3
 8008fda:	75fb      	strb	r3, [r7, #23]
 8008fdc:	e00b      	b.n	8008ff6 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	78db      	ldrb	r3, [r3, #3]
 8008fe2:	f003 0303 	and.w	r3, r3, #3
 8008fe6:	2b03      	cmp	r3, #3
 8008fe8:	d105      	bne.n	8008ff6 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	799b      	ldrb	r3, [r3, #6]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d101      	bne.n	8008ff6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008ff2:	2303      	movs	r3, #3
 8008ff4:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8008ff6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	371c      	adds	r7, #28
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr

08009004 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009004:	b480      	push	{r7}
 8009006:	b087      	sub	sp, #28
 8009008:	af00      	add	r7, sp, #0
 800900a:	60f8      	str	r0, [r7, #12]
 800900c:	60b9      	str	r1, [r7, #8]
 800900e:	4613      	mov	r3, r2
 8009010:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	3301      	adds	r3, #1
 8009016:	781b      	ldrb	r3, [r3, #0]
 8009018:	2b03      	cmp	r3, #3
 800901a:	d120      	bne.n	800905e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	1e9a      	subs	r2, r3, #2
 8009022:	88fb      	ldrh	r3, [r7, #6]
 8009024:	4293      	cmp	r3, r2
 8009026:	bf28      	it	cs
 8009028:	4613      	movcs	r3, r2
 800902a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	3302      	adds	r3, #2
 8009030:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009032:	2300      	movs	r3, #0
 8009034:	82fb      	strh	r3, [r7, #22]
 8009036:	e00b      	b.n	8009050 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009038:	8afb      	ldrh	r3, [r7, #22]
 800903a:	68fa      	ldr	r2, [r7, #12]
 800903c:	4413      	add	r3, r2
 800903e:	781a      	ldrb	r2, [r3, #0]
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	3301      	adds	r3, #1
 8009048:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800904a:	8afb      	ldrh	r3, [r7, #22]
 800904c:	3302      	adds	r3, #2
 800904e:	82fb      	strh	r3, [r7, #22]
 8009050:	8afa      	ldrh	r2, [r7, #22]
 8009052:	8abb      	ldrh	r3, [r7, #20]
 8009054:	429a      	cmp	r2, r3
 8009056:	d3ef      	bcc.n	8009038 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	2200      	movs	r2, #0
 800905c:	701a      	strb	r2, [r3, #0]
  }
}
 800905e:	bf00      	nop
 8009060:	371c      	adds	r7, #28
 8009062:	46bd      	mov	sp, r7
 8009064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009068:	4770      	bx	lr

0800906a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800906a:	b480      	push	{r7}
 800906c:	b085      	sub	sp, #20
 800906e:	af00      	add	r7, sp, #0
 8009070:	6078      	str	r0, [r7, #4]
 8009072:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	881a      	ldrh	r2, [r3, #0]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	b29b      	uxth	r3, r3
 800907e:	4413      	add	r3, r2
 8009080:	b29a      	uxth	r2, r3
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	781b      	ldrb	r3, [r3, #0]
 800908a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	4413      	add	r3, r2
 8009090:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009092:	68fb      	ldr	r3, [r7, #12]
}
 8009094:	4618      	mov	r0, r3
 8009096:	3714      	adds	r7, #20
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr

080090a0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b086      	sub	sp, #24
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	60f8      	str	r0, [r7, #12]
 80090a8:	60b9      	str	r1, [r7, #8]
 80090aa:	4613      	mov	r3, r2
 80090ac:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80090ae:	2301      	movs	r3, #1
 80090b0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	789b      	ldrb	r3, [r3, #2]
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d002      	beq.n	80090c0 <USBH_CtlReq+0x20>
 80090ba:	2b02      	cmp	r3, #2
 80090bc:	d01d      	beq.n	80090fa <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 80090be:	e043      	b.n	8009148 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	68ba      	ldr	r2, [r7, #8]
 80090c4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	88fa      	ldrh	r2, [r7, #6]
 80090ca:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2201      	movs	r2, #1
 80090d0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2202      	movs	r2, #2
 80090d6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80090d8:	2301      	movs	r3, #1
 80090da:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2203      	movs	r2, #3
 80090e0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80090f0:	2300      	movs	r3, #0
 80090f2:	2200      	movs	r2, #0
 80090f4:	f000 fd7c 	bl	8009bf0 <osMessageQueuePut>
      break;
 80090f8:	e026      	b.n	8009148 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 80090fa:	68f8      	ldr	r0, [r7, #12]
 80090fc:	f000 f82a 	bl	8009154 <USBH_HandleControl>
 8009100:	4603      	mov	r3, r0
 8009102:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009104:	7dfb      	ldrb	r3, [r7, #23]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d002      	beq.n	8009110 <USBH_CtlReq+0x70>
 800910a:	7dfb      	ldrb	r3, [r7, #23]
 800910c:	2b03      	cmp	r3, #3
 800910e:	d106      	bne.n	800911e <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2201      	movs	r2, #1
 8009114:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2200      	movs	r2, #0
 800911a:	761a      	strb	r2, [r3, #24]
 800911c:	e005      	b.n	800912a <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800911e:	7dfb      	ldrb	r3, [r7, #23]
 8009120:	2b02      	cmp	r3, #2
 8009122:	d102      	bne.n	800912a <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2201      	movs	r2, #1
 8009128:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	2203      	movs	r2, #3
 800912e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800913e:	2300      	movs	r3, #0
 8009140:	2200      	movs	r2, #0
 8009142:	f000 fd55 	bl	8009bf0 <osMessageQueuePut>
      break;
 8009146:	bf00      	nop
  }
  return status;
 8009148:	7dfb      	ldrb	r3, [r7, #23]
}
 800914a:	4618      	mov	r0, r3
 800914c:	3718      	adds	r7, #24
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
	...

08009154 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b086      	sub	sp, #24
 8009158:	af02      	add	r7, sp, #8
 800915a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800915c:	2301      	movs	r3, #1
 800915e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009160:	2300      	movs	r3, #0
 8009162:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	7e1b      	ldrb	r3, [r3, #24]
 8009168:	3b01      	subs	r3, #1
 800916a:	2b0a      	cmp	r3, #10
 800916c:	f200 8229 	bhi.w	80095c2 <USBH_HandleControl+0x46e>
 8009170:	a201      	add	r2, pc, #4	; (adr r2, 8009178 <USBH_HandleControl+0x24>)
 8009172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009176:	bf00      	nop
 8009178:	080091a5 	.word	0x080091a5
 800917c:	080091bf 	.word	0x080091bf
 8009180:	08009261 	.word	0x08009261
 8009184:	08009287 	.word	0x08009287
 8009188:	08009313 	.word	0x08009313
 800918c:	0800933d 	.word	0x0800933d
 8009190:	080093ff 	.word	0x080093ff
 8009194:	08009421 	.word	0x08009421
 8009198:	080094b3 	.word	0x080094b3
 800919c:	080094d9 	.word	0x080094d9
 80091a0:	0800956b 	.word	0x0800956b
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f103 0110 	add.w	r1, r3, #16
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	795b      	ldrb	r3, [r3, #5]
 80091ae:	461a      	mov	r2, r3
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 fa17 	bl	80095e4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2202      	movs	r2, #2
 80091ba:	761a      	strb	r2, [r3, #24]
      break;
 80091bc:	e20c      	b.n	80095d8 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	795b      	ldrb	r3, [r3, #5]
 80091c2:	4619      	mov	r1, r3
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f003 fdf5 	bl	800cdb4 <USBH_LL_GetURBState>
 80091ca:	4603      	mov	r3, r0
 80091cc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80091ce:	7bbb      	ldrb	r3, [r7, #14]
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d12c      	bne.n	800922e <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	7c1b      	ldrb	r3, [r3, #16]
 80091d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80091dc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	8adb      	ldrh	r3, [r3, #22]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d00a      	beq.n	80091fc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80091e6:	7b7b      	ldrb	r3, [r7, #13]
 80091e8:	2b80      	cmp	r3, #128	; 0x80
 80091ea:	d103      	bne.n	80091f4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2203      	movs	r2, #3
 80091f0:	761a      	strb	r2, [r3, #24]
 80091f2:	e00d      	b.n	8009210 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2205      	movs	r2, #5
 80091f8:	761a      	strb	r2, [r3, #24]
 80091fa:	e009      	b.n	8009210 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 80091fc:	7b7b      	ldrb	r3, [r7, #13]
 80091fe:	2b80      	cmp	r3, #128	; 0x80
 8009200:	d103      	bne.n	800920a <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2209      	movs	r2, #9
 8009206:	761a      	strb	r2, [r3, #24]
 8009208:	e002      	b.n	8009210 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2207      	movs	r2, #7
 800920e:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2203      	movs	r2, #3
 8009214:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009224:	2300      	movs	r3, #0
 8009226:	2200      	movs	r2, #0
 8009228:	f000 fce2 	bl	8009bf0 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800922c:	e1cb      	b.n	80095c6 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800922e:	7bbb      	ldrb	r3, [r7, #14]
 8009230:	2b04      	cmp	r3, #4
 8009232:	d003      	beq.n	800923c <USBH_HandleControl+0xe8>
 8009234:	7bbb      	ldrb	r3, [r7, #14]
 8009236:	2b02      	cmp	r3, #2
 8009238:	f040 81c5 	bne.w	80095c6 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	220b      	movs	r2, #11
 8009240:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2203      	movs	r2, #3
 8009246:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009256:	2300      	movs	r3, #0
 8009258:	2200      	movs	r2, #0
 800925a:	f000 fcc9 	bl	8009bf0 <osMessageQueuePut>
      break;
 800925e:	e1b2      	b.n	80095c6 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009266:	b29a      	uxth	r2, r3
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6899      	ldr	r1, [r3, #8]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	899a      	ldrh	r2, [r3, #12]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	791b      	ldrb	r3, [r3, #4]
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f000 f9f2 	bl	8009662 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2204      	movs	r2, #4
 8009282:	761a      	strb	r2, [r3, #24]
      break;
 8009284:	e1a8      	b.n	80095d8 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	791b      	ldrb	r3, [r3, #4]
 800928a:	4619      	mov	r1, r3
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f003 fd91 	bl	800cdb4 <USBH_LL_GetURBState>
 8009292:	4603      	mov	r3, r0
 8009294:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009296:	7bbb      	ldrb	r3, [r7, #14]
 8009298:	2b01      	cmp	r3, #1
 800929a:	d110      	bne.n	80092be <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2209      	movs	r2, #9
 80092a0:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2203      	movs	r2, #3
 80092a6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80092b6:	2300      	movs	r3, #0
 80092b8:	2200      	movs	r2, #0
 80092ba:	f000 fc99 	bl	8009bf0 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80092be:	7bbb      	ldrb	r3, [r7, #14]
 80092c0:	2b05      	cmp	r3, #5
 80092c2:	d110      	bne.n	80092e6 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80092c4:	2303      	movs	r3, #3
 80092c6:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2203      	movs	r2, #3
 80092cc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80092dc:	2300      	movs	r3, #0
 80092de:	2200      	movs	r2, #0
 80092e0:	f000 fc86 	bl	8009bf0 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80092e4:	e171      	b.n	80095ca <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 80092e6:	7bbb      	ldrb	r3, [r7, #14]
 80092e8:	2b04      	cmp	r3, #4
 80092ea:	f040 816e 	bne.w	80095ca <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	220b      	movs	r2, #11
 80092f2:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2203      	movs	r2, #3
 80092f8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009308:	2300      	movs	r3, #0
 800930a:	2200      	movs	r2, #0
 800930c:	f000 fc70 	bl	8009bf0 <osMessageQueuePut>
      break;
 8009310:	e15b      	b.n	80095ca <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6899      	ldr	r1, [r3, #8]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	899a      	ldrh	r2, [r3, #12]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	795b      	ldrb	r3, [r3, #5]
 800931e:	2001      	movs	r0, #1
 8009320:	9000      	str	r0, [sp, #0]
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 f978 	bl	8009618 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800932e:	b29a      	uxth	r2, r3
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2206      	movs	r2, #6
 8009338:	761a      	strb	r2, [r3, #24]
      break;
 800933a:	e14d      	b.n	80095d8 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	795b      	ldrb	r3, [r3, #5]
 8009340:	4619      	mov	r1, r3
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f003 fd36 	bl	800cdb4 <USBH_LL_GetURBState>
 8009348:	4603      	mov	r3, r0
 800934a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800934c:	7bbb      	ldrb	r3, [r7, #14]
 800934e:	2b01      	cmp	r3, #1
 8009350:	d111      	bne.n	8009376 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2207      	movs	r2, #7
 8009356:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2203      	movs	r2, #3
 800935c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800936c:	2300      	movs	r3, #0
 800936e:	2200      	movs	r2, #0
 8009370:	f000 fc3e 	bl	8009bf0 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009374:	e12b      	b.n	80095ce <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 8009376:	7bbb      	ldrb	r3, [r7, #14]
 8009378:	2b05      	cmp	r3, #5
 800937a:	d113      	bne.n	80093a4 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	220c      	movs	r2, #12
 8009380:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009382:	2303      	movs	r3, #3
 8009384:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2203      	movs	r2, #3
 800938a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800939a:	2300      	movs	r3, #0
 800939c:	2200      	movs	r2, #0
 800939e:	f000 fc27 	bl	8009bf0 <osMessageQueuePut>
      break;
 80093a2:	e114      	b.n	80095ce <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 80093a4:	7bbb      	ldrb	r3, [r7, #14]
 80093a6:	2b02      	cmp	r3, #2
 80093a8:	d111      	bne.n	80093ce <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2205      	movs	r2, #5
 80093ae:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2203      	movs	r2, #3
 80093b4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80093c4:	2300      	movs	r3, #0
 80093c6:	2200      	movs	r2, #0
 80093c8:	f000 fc12 	bl	8009bf0 <osMessageQueuePut>
      break;
 80093cc:	e0ff      	b.n	80095ce <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 80093ce:	7bbb      	ldrb	r3, [r7, #14]
 80093d0:	2b04      	cmp	r3, #4
 80093d2:	f040 80fc 	bne.w	80095ce <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	220b      	movs	r2, #11
 80093da:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80093dc:	2302      	movs	r3, #2
 80093de:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2203      	movs	r2, #3
 80093e4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80093f4:	2300      	movs	r3, #0
 80093f6:	2200      	movs	r2, #0
 80093f8:	f000 fbfa 	bl	8009bf0 <osMessageQueuePut>
      break;
 80093fc:	e0e7      	b.n	80095ce <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	791b      	ldrb	r3, [r3, #4]
 8009402:	2200      	movs	r2, #0
 8009404:	2100      	movs	r1, #0
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 f92b 	bl	8009662 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009412:	b29a      	uxth	r2, r3
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2208      	movs	r2, #8
 800941c:	761a      	strb	r2, [r3, #24]

      break;
 800941e:	e0db      	b.n	80095d8 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	791b      	ldrb	r3, [r3, #4]
 8009424:	4619      	mov	r1, r3
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f003 fcc4 	bl	800cdb4 <USBH_LL_GetURBState>
 800942c:	4603      	mov	r3, r0
 800942e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009430:	7bbb      	ldrb	r3, [r7, #14]
 8009432:	2b01      	cmp	r3, #1
 8009434:	d113      	bne.n	800945e <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	220d      	movs	r2, #13
 800943a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800943c:	2300      	movs	r3, #0
 800943e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2203      	movs	r2, #3
 8009444:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009454:	2300      	movs	r3, #0
 8009456:	2200      	movs	r2, #0
 8009458:	f000 fbca 	bl	8009bf0 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800945c:	e0b9      	b.n	80095d2 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800945e:	7bbb      	ldrb	r3, [r7, #14]
 8009460:	2b04      	cmp	r3, #4
 8009462:	d111      	bne.n	8009488 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	220b      	movs	r2, #11
 8009468:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2203      	movs	r2, #3
 800946e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800947e:	2300      	movs	r3, #0
 8009480:	2200      	movs	r2, #0
 8009482:	f000 fbb5 	bl	8009bf0 <osMessageQueuePut>
      break;
 8009486:	e0a4      	b.n	80095d2 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 8009488:	7bbb      	ldrb	r3, [r7, #14]
 800948a:	2b05      	cmp	r3, #5
 800948c:	f040 80a1 	bne.w	80095d2 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 8009490:	2303      	movs	r3, #3
 8009492:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2203      	movs	r2, #3
 8009498:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80094a8:	2300      	movs	r3, #0
 80094aa:	2200      	movs	r2, #0
 80094ac:	f000 fba0 	bl	8009bf0 <osMessageQueuePut>
      break;
 80094b0:	e08f      	b.n	80095d2 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	795b      	ldrb	r3, [r3, #5]
 80094b6:	2201      	movs	r2, #1
 80094b8:	9200      	str	r2, [sp, #0]
 80094ba:	2200      	movs	r2, #0
 80094bc:	2100      	movs	r1, #0
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 f8aa 	bl	8009618 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80094ca:	b29a      	uxth	r2, r3
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	220a      	movs	r2, #10
 80094d4:	761a      	strb	r2, [r3, #24]
      break;
 80094d6:	e07f      	b.n	80095d8 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	795b      	ldrb	r3, [r3, #5]
 80094dc:	4619      	mov	r1, r3
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f003 fc68 	bl	800cdb4 <USBH_LL_GetURBState>
 80094e4:	4603      	mov	r3, r0
 80094e6:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80094e8:	7bbb      	ldrb	r3, [r7, #14]
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d113      	bne.n	8009516 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 80094ee:	2300      	movs	r3, #0
 80094f0:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	220d      	movs	r2, #13
 80094f6:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2203      	movs	r2, #3
 80094fc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800950c:	2300      	movs	r3, #0
 800950e:	2200      	movs	r2, #0
 8009510:	f000 fb6e 	bl	8009bf0 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009514:	e05f      	b.n	80095d6 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009516:	7bbb      	ldrb	r3, [r7, #14]
 8009518:	2b02      	cmp	r3, #2
 800951a:	d111      	bne.n	8009540 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2209      	movs	r2, #9
 8009520:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2203      	movs	r2, #3
 8009526:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009536:	2300      	movs	r3, #0
 8009538:	2200      	movs	r2, #0
 800953a:	f000 fb59 	bl	8009bf0 <osMessageQueuePut>
      break;
 800953e:	e04a      	b.n	80095d6 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8009540:	7bbb      	ldrb	r3, [r7, #14]
 8009542:	2b04      	cmp	r3, #4
 8009544:	d147      	bne.n	80095d6 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	220b      	movs	r2, #11
 800954a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2203      	movs	r2, #3
 8009550:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009560:	2300      	movs	r3, #0
 8009562:	2200      	movs	r2, #0
 8009564:	f000 fb44 	bl	8009bf0 <osMessageQueuePut>
      break;
 8009568:	e035      	b.n	80095d6 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	7e5b      	ldrb	r3, [r3, #25]
 800956e:	3301      	adds	r3, #1
 8009570:	b2da      	uxtb	r2, r3
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	765a      	strb	r2, [r3, #25]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	7e5b      	ldrb	r3, [r3, #25]
 800957a:	2b02      	cmp	r3, #2
 800957c:	d806      	bhi.n	800958c <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2201      	movs	r2, #1
 8009582:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2201      	movs	r2, #1
 8009588:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800958a:	e025      	b.n	80095d8 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009592:	2106      	movs	r1, #6
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2200      	movs	r2, #0
 800959c:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	795b      	ldrb	r3, [r3, #5]
 80095a2:	4619      	mov	r1, r3
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f000 f90d 	bl	80097c4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	791b      	ldrb	r3, [r3, #4]
 80095ae:	4619      	mov	r1, r3
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f000 f907 	bl	80097c4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2200      	movs	r2, #0
 80095ba:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80095bc:	2302      	movs	r3, #2
 80095be:	73fb      	strb	r3, [r7, #15]
      break;
 80095c0:	e00a      	b.n	80095d8 <USBH_HandleControl+0x484>

    default:
      break;
 80095c2:	bf00      	nop
 80095c4:	e008      	b.n	80095d8 <USBH_HandleControl+0x484>
      break;
 80095c6:	bf00      	nop
 80095c8:	e006      	b.n	80095d8 <USBH_HandleControl+0x484>
      break;
 80095ca:	bf00      	nop
 80095cc:	e004      	b.n	80095d8 <USBH_HandleControl+0x484>
      break;
 80095ce:	bf00      	nop
 80095d0:	e002      	b.n	80095d8 <USBH_HandleControl+0x484>
      break;
 80095d2:	bf00      	nop
 80095d4:	e000      	b.n	80095d8 <USBH_HandleControl+0x484>
      break;
 80095d6:	bf00      	nop
  }

  return status;
 80095d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3710      	adds	r7, #16
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}
 80095e2:	bf00      	nop

080095e4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b088      	sub	sp, #32
 80095e8:	af04      	add	r7, sp, #16
 80095ea:	60f8      	str	r0, [r7, #12]
 80095ec:	60b9      	str	r1, [r7, #8]
 80095ee:	4613      	mov	r3, r2
 80095f0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80095f2:	79f9      	ldrb	r1, [r7, #7]
 80095f4:	2300      	movs	r3, #0
 80095f6:	9303      	str	r3, [sp, #12]
 80095f8:	2308      	movs	r3, #8
 80095fa:	9302      	str	r3, [sp, #8]
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	9301      	str	r3, [sp, #4]
 8009600:	2300      	movs	r3, #0
 8009602:	9300      	str	r3, [sp, #0]
 8009604:	2300      	movs	r3, #0
 8009606:	2200      	movs	r2, #0
 8009608:	68f8      	ldr	r0, [r7, #12]
 800960a:	f003 fba2 	bl	800cd52 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800960e:	2300      	movs	r3, #0
}
 8009610:	4618      	mov	r0, r3
 8009612:	3710      	adds	r7, #16
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b088      	sub	sp, #32
 800961c:	af04      	add	r7, sp, #16
 800961e:	60f8      	str	r0, [r7, #12]
 8009620:	60b9      	str	r1, [r7, #8]
 8009622:	4611      	mov	r1, r2
 8009624:	461a      	mov	r2, r3
 8009626:	460b      	mov	r3, r1
 8009628:	80fb      	strh	r3, [r7, #6]
 800962a:	4613      	mov	r3, r2
 800962c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009634:	2b00      	cmp	r3, #0
 8009636:	d001      	beq.n	800963c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009638:	2300      	movs	r3, #0
 800963a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800963c:	7979      	ldrb	r1, [r7, #5]
 800963e:	7e3b      	ldrb	r3, [r7, #24]
 8009640:	9303      	str	r3, [sp, #12]
 8009642:	88fb      	ldrh	r3, [r7, #6]
 8009644:	9302      	str	r3, [sp, #8]
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	9301      	str	r3, [sp, #4]
 800964a:	2301      	movs	r3, #1
 800964c:	9300      	str	r3, [sp, #0]
 800964e:	2300      	movs	r3, #0
 8009650:	2200      	movs	r2, #0
 8009652:	68f8      	ldr	r0, [r7, #12]
 8009654:	f003 fb7d 	bl	800cd52 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009658:	2300      	movs	r3, #0
}
 800965a:	4618      	mov	r0, r3
 800965c:	3710      	adds	r7, #16
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}

08009662 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009662:	b580      	push	{r7, lr}
 8009664:	b088      	sub	sp, #32
 8009666:	af04      	add	r7, sp, #16
 8009668:	60f8      	str	r0, [r7, #12]
 800966a:	60b9      	str	r1, [r7, #8]
 800966c:	4611      	mov	r1, r2
 800966e:	461a      	mov	r2, r3
 8009670:	460b      	mov	r3, r1
 8009672:	80fb      	strh	r3, [r7, #6]
 8009674:	4613      	mov	r3, r2
 8009676:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009678:	7979      	ldrb	r1, [r7, #5]
 800967a:	2300      	movs	r3, #0
 800967c:	9303      	str	r3, [sp, #12]
 800967e:	88fb      	ldrh	r3, [r7, #6]
 8009680:	9302      	str	r3, [sp, #8]
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	9301      	str	r3, [sp, #4]
 8009686:	2301      	movs	r3, #1
 8009688:	9300      	str	r3, [sp, #0]
 800968a:	2300      	movs	r3, #0
 800968c:	2201      	movs	r2, #1
 800968e:	68f8      	ldr	r0, [r7, #12]
 8009690:	f003 fb5f 	bl	800cd52 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009694:	2300      	movs	r3, #0

}
 8009696:	4618      	mov	r0, r3
 8009698:	3710      	adds	r7, #16
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}

0800969e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800969e:	b580      	push	{r7, lr}
 80096a0:	b088      	sub	sp, #32
 80096a2:	af04      	add	r7, sp, #16
 80096a4:	60f8      	str	r0, [r7, #12]
 80096a6:	60b9      	str	r1, [r7, #8]
 80096a8:	4611      	mov	r1, r2
 80096aa:	461a      	mov	r2, r3
 80096ac:	460b      	mov	r3, r1
 80096ae:	80fb      	strh	r3, [r7, #6]
 80096b0:	4613      	mov	r3, r2
 80096b2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d001      	beq.n	80096c2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80096be:	2300      	movs	r3, #0
 80096c0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80096c2:	7979      	ldrb	r1, [r7, #5]
 80096c4:	7e3b      	ldrb	r3, [r7, #24]
 80096c6:	9303      	str	r3, [sp, #12]
 80096c8:	88fb      	ldrh	r3, [r7, #6]
 80096ca:	9302      	str	r3, [sp, #8]
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	9301      	str	r3, [sp, #4]
 80096d0:	2301      	movs	r3, #1
 80096d2:	9300      	str	r3, [sp, #0]
 80096d4:	2302      	movs	r3, #2
 80096d6:	2200      	movs	r2, #0
 80096d8:	68f8      	ldr	r0, [r7, #12]
 80096da:	f003 fb3a 	bl	800cd52 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80096de:	2300      	movs	r3, #0
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3710      	adds	r7, #16
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}

080096e8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b088      	sub	sp, #32
 80096ec:	af04      	add	r7, sp, #16
 80096ee:	60f8      	str	r0, [r7, #12]
 80096f0:	60b9      	str	r1, [r7, #8]
 80096f2:	4611      	mov	r1, r2
 80096f4:	461a      	mov	r2, r3
 80096f6:	460b      	mov	r3, r1
 80096f8:	80fb      	strh	r3, [r7, #6]
 80096fa:	4613      	mov	r3, r2
 80096fc:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80096fe:	7979      	ldrb	r1, [r7, #5]
 8009700:	2300      	movs	r3, #0
 8009702:	9303      	str	r3, [sp, #12]
 8009704:	88fb      	ldrh	r3, [r7, #6]
 8009706:	9302      	str	r3, [sp, #8]
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	9301      	str	r3, [sp, #4]
 800970c:	2301      	movs	r3, #1
 800970e:	9300      	str	r3, [sp, #0]
 8009710:	2302      	movs	r3, #2
 8009712:	2201      	movs	r2, #1
 8009714:	68f8      	ldr	r0, [r7, #12]
 8009716:	f003 fb1c 	bl	800cd52 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800971a:	2300      	movs	r3, #0
}
 800971c:	4618      	mov	r0, r3
 800971e:	3710      	adds	r7, #16
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}

08009724 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b086      	sub	sp, #24
 8009728:	af04      	add	r7, sp, #16
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	4608      	mov	r0, r1
 800972e:	4611      	mov	r1, r2
 8009730:	461a      	mov	r2, r3
 8009732:	4603      	mov	r3, r0
 8009734:	70fb      	strb	r3, [r7, #3]
 8009736:	460b      	mov	r3, r1
 8009738:	70bb      	strb	r3, [r7, #2]
 800973a:	4613      	mov	r3, r2
 800973c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800973e:	7878      	ldrb	r0, [r7, #1]
 8009740:	78ba      	ldrb	r2, [r7, #2]
 8009742:	78f9      	ldrb	r1, [r7, #3]
 8009744:	8b3b      	ldrh	r3, [r7, #24]
 8009746:	9302      	str	r3, [sp, #8]
 8009748:	7d3b      	ldrb	r3, [r7, #20]
 800974a:	9301      	str	r3, [sp, #4]
 800974c:	7c3b      	ldrb	r3, [r7, #16]
 800974e:	9300      	str	r3, [sp, #0]
 8009750:	4603      	mov	r3, r0
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f003 faaf 	bl	800ccb6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009758:	2300      	movs	r3, #0
}
 800975a:	4618      	mov	r0, r3
 800975c:	3708      	adds	r7, #8
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}

08009762 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009762:	b580      	push	{r7, lr}
 8009764:	b082      	sub	sp, #8
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
 800976a:	460b      	mov	r3, r1
 800976c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800976e:	78fb      	ldrb	r3, [r7, #3]
 8009770:	4619      	mov	r1, r3
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f003 face 	bl	800cd14 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009778:	2300      	movs	r3, #0
}
 800977a:	4618      	mov	r0, r3
 800977c:	3708      	adds	r7, #8
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}

08009782 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009782:	b580      	push	{r7, lr}
 8009784:	b084      	sub	sp, #16
 8009786:	af00      	add	r7, sp, #0
 8009788:	6078      	str	r0, [r7, #4]
 800978a:	460b      	mov	r3, r1
 800978c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 f836 	bl	8009800 <USBH_GetFreePipe>
 8009794:	4603      	mov	r3, r0
 8009796:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009798:	89fb      	ldrh	r3, [r7, #14]
 800979a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800979e:	4293      	cmp	r3, r2
 80097a0:	d00a      	beq.n	80097b8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80097a2:	78fa      	ldrb	r2, [r7, #3]
 80097a4:	89fb      	ldrh	r3, [r7, #14]
 80097a6:	f003 030f 	and.w	r3, r3, #15
 80097aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80097ae:	6879      	ldr	r1, [r7, #4]
 80097b0:	33e0      	adds	r3, #224	; 0xe0
 80097b2:	009b      	lsls	r3, r3, #2
 80097b4:	440b      	add	r3, r1
 80097b6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80097b8:	89fb      	ldrh	r3, [r7, #14]
 80097ba:	b2db      	uxtb	r3, r3
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3710      	adds	r7, #16
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b083      	sub	sp, #12
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	460b      	mov	r3, r1
 80097ce:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80097d0:	78fb      	ldrb	r3, [r7, #3]
 80097d2:	2b0f      	cmp	r3, #15
 80097d4:	d80d      	bhi.n	80097f2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80097d6:	78fb      	ldrb	r3, [r7, #3]
 80097d8:	687a      	ldr	r2, [r7, #4]
 80097da:	33e0      	adds	r3, #224	; 0xe0
 80097dc:	009b      	lsls	r3, r3, #2
 80097de:	4413      	add	r3, r2
 80097e0:	685a      	ldr	r2, [r3, #4]
 80097e2:	78fb      	ldrb	r3, [r7, #3]
 80097e4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80097e8:	6879      	ldr	r1, [r7, #4]
 80097ea:	33e0      	adds	r3, #224	; 0xe0
 80097ec:	009b      	lsls	r3, r3, #2
 80097ee:	440b      	add	r3, r1
 80097f0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80097f2:	2300      	movs	r3, #0
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	370c      	adds	r7, #12
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr

08009800 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009800:	b480      	push	{r7}
 8009802:	b085      	sub	sp, #20
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009808:	2300      	movs	r3, #0
 800980a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800980c:	2300      	movs	r3, #0
 800980e:	73fb      	strb	r3, [r7, #15]
 8009810:	e00f      	b.n	8009832 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009812:	7bfb      	ldrb	r3, [r7, #15]
 8009814:	687a      	ldr	r2, [r7, #4]
 8009816:	33e0      	adds	r3, #224	; 0xe0
 8009818:	009b      	lsls	r3, r3, #2
 800981a:	4413      	add	r3, r2
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009822:	2b00      	cmp	r3, #0
 8009824:	d102      	bne.n	800982c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009826:	7bfb      	ldrb	r3, [r7, #15]
 8009828:	b29b      	uxth	r3, r3
 800982a:	e007      	b.n	800983c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800982c:	7bfb      	ldrb	r3, [r7, #15]
 800982e:	3301      	adds	r3, #1
 8009830:	73fb      	strb	r3, [r7, #15]
 8009832:	7bfb      	ldrb	r3, [r7, #15]
 8009834:	2b0f      	cmp	r3, #15
 8009836:	d9ec      	bls.n	8009812 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009838:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800983c:	4618      	mov	r0, r3
 800983e:	3714      	adds	r7, #20
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr

08009848 <__NVIC_SetPriority>:
{
 8009848:	b480      	push	{r7}
 800984a:	b083      	sub	sp, #12
 800984c:	af00      	add	r7, sp, #0
 800984e:	4603      	mov	r3, r0
 8009850:	6039      	str	r1, [r7, #0]
 8009852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009858:	2b00      	cmp	r3, #0
 800985a:	db0a      	blt.n	8009872 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	b2da      	uxtb	r2, r3
 8009860:	490c      	ldr	r1, [pc, #48]	; (8009894 <__NVIC_SetPriority+0x4c>)
 8009862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009866:	0112      	lsls	r2, r2, #4
 8009868:	b2d2      	uxtb	r2, r2
 800986a:	440b      	add	r3, r1
 800986c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009870:	e00a      	b.n	8009888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	b2da      	uxtb	r2, r3
 8009876:	4908      	ldr	r1, [pc, #32]	; (8009898 <__NVIC_SetPriority+0x50>)
 8009878:	79fb      	ldrb	r3, [r7, #7]
 800987a:	f003 030f 	and.w	r3, r3, #15
 800987e:	3b04      	subs	r3, #4
 8009880:	0112      	lsls	r2, r2, #4
 8009882:	b2d2      	uxtb	r2, r2
 8009884:	440b      	add	r3, r1
 8009886:	761a      	strb	r2, [r3, #24]
}
 8009888:	bf00      	nop
 800988a:	370c      	adds	r7, #12
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr
 8009894:	e000e100 	.word	0xe000e100
 8009898:	e000ed00 	.word	0xe000ed00

0800989c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800989c:	b580      	push	{r7, lr}
 800989e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80098a0:	4b05      	ldr	r3, [pc, #20]	; (80098b8 <SysTick_Handler+0x1c>)
 80098a2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80098a4:	f001 ffc8 	bl	800b838 <xTaskGetSchedulerState>
 80098a8:	4603      	mov	r3, r0
 80098aa:	2b01      	cmp	r3, #1
 80098ac:	d001      	beq.n	80098b2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80098ae:	f002 fdb3 	bl	800c418 <xPortSysTickHandler>
  }
}
 80098b2:	bf00      	nop
 80098b4:	bd80      	pop	{r7, pc}
 80098b6:	bf00      	nop
 80098b8:	e000e010 	.word	0xe000e010

080098bc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80098bc:	b580      	push	{r7, lr}
 80098be:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80098c0:	2100      	movs	r1, #0
 80098c2:	f06f 0004 	mvn.w	r0, #4
 80098c6:	f7ff ffbf 	bl	8009848 <__NVIC_SetPriority>
#endif
}
 80098ca:	bf00      	nop
 80098cc:	bd80      	pop	{r7, pc}
	...

080098d0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80098d0:	b480      	push	{r7}
 80098d2:	b083      	sub	sp, #12
 80098d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098d6:	f3ef 8305 	mrs	r3, IPSR
 80098da:	603b      	str	r3, [r7, #0]
  return(result);
 80098dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d003      	beq.n	80098ea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80098e2:	f06f 0305 	mvn.w	r3, #5
 80098e6:	607b      	str	r3, [r7, #4]
 80098e8:	e00c      	b.n	8009904 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80098ea:	4b0a      	ldr	r3, [pc, #40]	; (8009914 <osKernelInitialize+0x44>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d105      	bne.n	80098fe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80098f2:	4b08      	ldr	r3, [pc, #32]	; (8009914 <osKernelInitialize+0x44>)
 80098f4:	2201      	movs	r2, #1
 80098f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80098f8:	2300      	movs	r3, #0
 80098fa:	607b      	str	r3, [r7, #4]
 80098fc:	e002      	b.n	8009904 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80098fe:	f04f 33ff 	mov.w	r3, #4294967295
 8009902:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009904:	687b      	ldr	r3, [r7, #4]
}
 8009906:	4618      	mov	r0, r3
 8009908:	370c      	adds	r7, #12
 800990a:	46bd      	mov	sp, r7
 800990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009910:	4770      	bx	lr
 8009912:	bf00      	nop
 8009914:	200002b0 	.word	0x200002b0

08009918 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009918:	b580      	push	{r7, lr}
 800991a:	b082      	sub	sp, #8
 800991c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800991e:	f3ef 8305 	mrs	r3, IPSR
 8009922:	603b      	str	r3, [r7, #0]
  return(result);
 8009924:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009926:	2b00      	cmp	r3, #0
 8009928:	d003      	beq.n	8009932 <osKernelStart+0x1a>
    stat = osErrorISR;
 800992a:	f06f 0305 	mvn.w	r3, #5
 800992e:	607b      	str	r3, [r7, #4]
 8009930:	e010      	b.n	8009954 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009932:	4b0b      	ldr	r3, [pc, #44]	; (8009960 <osKernelStart+0x48>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	2b01      	cmp	r3, #1
 8009938:	d109      	bne.n	800994e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800993a:	f7ff ffbf 	bl	80098bc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800993e:	4b08      	ldr	r3, [pc, #32]	; (8009960 <osKernelStart+0x48>)
 8009940:	2202      	movs	r2, #2
 8009942:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009944:	f001 fae8 	bl	800af18 <vTaskStartScheduler>
      stat = osOK;
 8009948:	2300      	movs	r3, #0
 800994a:	607b      	str	r3, [r7, #4]
 800994c:	e002      	b.n	8009954 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800994e:	f04f 33ff 	mov.w	r3, #4294967295
 8009952:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009954:	687b      	ldr	r3, [r7, #4]
}
 8009956:	4618      	mov	r0, r3
 8009958:	3708      	adds	r7, #8
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}
 800995e:	bf00      	nop
 8009960:	200002b0 	.word	0x200002b0

08009964 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009964:	b580      	push	{r7, lr}
 8009966:	b08e      	sub	sp, #56	; 0x38
 8009968:	af04      	add	r7, sp, #16
 800996a:	60f8      	str	r0, [r7, #12]
 800996c:	60b9      	str	r1, [r7, #8]
 800996e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009970:	2300      	movs	r3, #0
 8009972:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009974:	f3ef 8305 	mrs	r3, IPSR
 8009978:	617b      	str	r3, [r7, #20]
  return(result);
 800997a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800997c:	2b00      	cmp	r3, #0
 800997e:	d17e      	bne.n	8009a7e <osThreadNew+0x11a>
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d07b      	beq.n	8009a7e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009986:	2380      	movs	r3, #128	; 0x80
 8009988:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800998a:	2318      	movs	r3, #24
 800998c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800998e:	2300      	movs	r3, #0
 8009990:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009992:	f04f 33ff 	mov.w	r3, #4294967295
 8009996:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d045      	beq.n	8009a2a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d002      	beq.n	80099ac <osThreadNew+0x48>
        name = attr->name;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	699b      	ldr	r3, [r3, #24]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d002      	beq.n	80099ba <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	699b      	ldr	r3, [r3, #24]
 80099b8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80099ba:	69fb      	ldr	r3, [r7, #28]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d008      	beq.n	80099d2 <osThreadNew+0x6e>
 80099c0:	69fb      	ldr	r3, [r7, #28]
 80099c2:	2b38      	cmp	r3, #56	; 0x38
 80099c4:	d805      	bhi.n	80099d2 <osThreadNew+0x6e>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	f003 0301 	and.w	r3, r3, #1
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d001      	beq.n	80099d6 <osThreadNew+0x72>
        return (NULL);
 80099d2:	2300      	movs	r3, #0
 80099d4:	e054      	b.n	8009a80 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	695b      	ldr	r3, [r3, #20]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d003      	beq.n	80099e6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	695b      	ldr	r3, [r3, #20]
 80099e2:	089b      	lsrs	r3, r3, #2
 80099e4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	689b      	ldr	r3, [r3, #8]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d00e      	beq.n	8009a0c <osThreadNew+0xa8>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	68db      	ldr	r3, [r3, #12]
 80099f2:	2ba7      	cmp	r3, #167	; 0xa7
 80099f4:	d90a      	bls.n	8009a0c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d006      	beq.n	8009a0c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	695b      	ldr	r3, [r3, #20]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d002      	beq.n	8009a0c <osThreadNew+0xa8>
        mem = 1;
 8009a06:	2301      	movs	r3, #1
 8009a08:	61bb      	str	r3, [r7, #24]
 8009a0a:	e010      	b.n	8009a2e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	689b      	ldr	r3, [r3, #8]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d10c      	bne.n	8009a2e <osThreadNew+0xca>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	68db      	ldr	r3, [r3, #12]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d108      	bne.n	8009a2e <osThreadNew+0xca>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	691b      	ldr	r3, [r3, #16]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d104      	bne.n	8009a2e <osThreadNew+0xca>
          mem = 0;
 8009a24:	2300      	movs	r3, #0
 8009a26:	61bb      	str	r3, [r7, #24]
 8009a28:	e001      	b.n	8009a2e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009a2e:	69bb      	ldr	r3, [r7, #24]
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	d110      	bne.n	8009a56 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009a3c:	9202      	str	r2, [sp, #8]
 8009a3e:	9301      	str	r3, [sp, #4]
 8009a40:	69fb      	ldr	r3, [r7, #28]
 8009a42:	9300      	str	r3, [sp, #0]
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	6a3a      	ldr	r2, [r7, #32]
 8009a48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a4a:	68f8      	ldr	r0, [r7, #12]
 8009a4c:	f001 f878 	bl	800ab40 <xTaskCreateStatic>
 8009a50:	4603      	mov	r3, r0
 8009a52:	613b      	str	r3, [r7, #16]
 8009a54:	e013      	b.n	8009a7e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009a56:	69bb      	ldr	r3, [r7, #24]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d110      	bne.n	8009a7e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009a5c:	6a3b      	ldr	r3, [r7, #32]
 8009a5e:	b29a      	uxth	r2, r3
 8009a60:	f107 0310 	add.w	r3, r7, #16
 8009a64:	9301      	str	r3, [sp, #4]
 8009a66:	69fb      	ldr	r3, [r7, #28]
 8009a68:	9300      	str	r3, [sp, #0]
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a6e:	68f8      	ldr	r0, [r7, #12]
 8009a70:	f001 f8c3 	bl	800abfa <xTaskCreate>
 8009a74:	4603      	mov	r3, r0
 8009a76:	2b01      	cmp	r3, #1
 8009a78:	d001      	beq.n	8009a7e <osThreadNew+0x11a>
            hTask = NULL;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009a7e:	693b      	ldr	r3, [r7, #16]
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3728      	adds	r7, #40	; 0x28
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}

08009a88 <osThreadGetName>:

const char *osThreadGetName (osThreadId_t thread_id) {
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b086      	sub	sp, #24
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a94:	f3ef 8305 	mrs	r3, IPSR
 8009a98:	60fb      	str	r3, [r7, #12]
  return(result);
 8009a9a:	68fb      	ldr	r3, [r7, #12]
  const char *name;

  if (IS_IRQ() || (hTask == NULL)) {
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d102      	bne.n	8009aa6 <osThreadGetName+0x1e>
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d102      	bne.n	8009aac <osThreadGetName+0x24>
    name = NULL;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	617b      	str	r3, [r7, #20]
 8009aaa:	e003      	b.n	8009ab4 <osThreadGetName+0x2c>
  } else {
    name = pcTaskGetName (hTask);
 8009aac:	6938      	ldr	r0, [r7, #16]
 8009aae:	f001 fb5f 	bl	800b170 <pcTaskGetName>
 8009ab2:	6178      	str	r0, [r7, #20]
  }

  return (name);
 8009ab4:	697b      	ldr	r3, [r7, #20]
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3718      	adds	r7, #24
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}

08009abe <osThreadGetId>:

osThreadId_t osThreadGetId (void) {
 8009abe:	b580      	push	{r7, lr}
 8009ac0:	b082      	sub	sp, #8
 8009ac2:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8009ac4:	f001 fea8 	bl	800b818 <xTaskGetCurrentTaskHandle>
 8009ac8:	6078      	str	r0, [r7, #4]

  return (id);
 8009aca:	687b      	ldr	r3, [r7, #4]
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3708      	adds	r7, #8
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b084      	sub	sp, #16
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009adc:	f3ef 8305 	mrs	r3, IPSR
 8009ae0:	60bb      	str	r3, [r7, #8]
  return(result);
 8009ae2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d003      	beq.n	8009af0 <osDelay+0x1c>
    stat = osErrorISR;
 8009ae8:	f06f 0305 	mvn.w	r3, #5
 8009aec:	60fb      	str	r3, [r7, #12]
 8009aee:	e007      	b.n	8009b00 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009af0:	2300      	movs	r3, #0
 8009af2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d002      	beq.n	8009b00 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f001 f9d8 	bl	800aeb0 <vTaskDelay>
    }
  }

  return (stat);
 8009b00:	68fb      	ldr	r3, [r7, #12]
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3710      	adds	r7, #16
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}

08009b0a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009b0a:	b580      	push	{r7, lr}
 8009b0c:	b08a      	sub	sp, #40	; 0x28
 8009b0e:	af02      	add	r7, sp, #8
 8009b10:	60f8      	str	r0, [r7, #12]
 8009b12:	60b9      	str	r1, [r7, #8]
 8009b14:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009b16:	2300      	movs	r3, #0
 8009b18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b1a:	f3ef 8305 	mrs	r3, IPSR
 8009b1e:	613b      	str	r3, [r7, #16]
  return(result);
 8009b20:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d15f      	bne.n	8009be6 <osMessageQueueNew+0xdc>
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d05c      	beq.n	8009be6 <osMessageQueueNew+0xdc>
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d059      	beq.n	8009be6 <osMessageQueueNew+0xdc>
    mem = -1;
 8009b32:	f04f 33ff 	mov.w	r3, #4294967295
 8009b36:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d029      	beq.n	8009b92 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	689b      	ldr	r3, [r3, #8]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d012      	beq.n	8009b6c <osMessageQueueNew+0x62>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	68db      	ldr	r3, [r3, #12]
 8009b4a:	2b4f      	cmp	r3, #79	; 0x4f
 8009b4c:	d90e      	bls.n	8009b6c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d00a      	beq.n	8009b6c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	695a      	ldr	r2, [r3, #20]
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	68b9      	ldr	r1, [r7, #8]
 8009b5e:	fb01 f303 	mul.w	r3, r1, r3
 8009b62:	429a      	cmp	r2, r3
 8009b64:	d302      	bcc.n	8009b6c <osMessageQueueNew+0x62>
        mem = 1;
 8009b66:	2301      	movs	r3, #1
 8009b68:	61bb      	str	r3, [r7, #24]
 8009b6a:	e014      	b.n	8009b96 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	689b      	ldr	r3, [r3, #8]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d110      	bne.n	8009b96 <osMessageQueueNew+0x8c>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	68db      	ldr	r3, [r3, #12]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d10c      	bne.n	8009b96 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d108      	bne.n	8009b96 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	695b      	ldr	r3, [r3, #20]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d104      	bne.n	8009b96 <osMessageQueueNew+0x8c>
          mem = 0;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	61bb      	str	r3, [r7, #24]
 8009b90:	e001      	b.n	8009b96 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009b92:	2300      	movs	r3, #0
 8009b94:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009b96:	69bb      	ldr	r3, [r7, #24]
 8009b98:	2b01      	cmp	r3, #1
 8009b9a:	d10b      	bne.n	8009bb4 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	691a      	ldr	r2, [r3, #16]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	689b      	ldr	r3, [r3, #8]
 8009ba4:	2100      	movs	r1, #0
 8009ba6:	9100      	str	r1, [sp, #0]
 8009ba8:	68b9      	ldr	r1, [r7, #8]
 8009baa:	68f8      	ldr	r0, [r7, #12]
 8009bac:	f000 fa4e 	bl	800a04c <xQueueGenericCreateStatic>
 8009bb0:	61f8      	str	r0, [r7, #28]
 8009bb2:	e008      	b.n	8009bc6 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009bb4:	69bb      	ldr	r3, [r7, #24]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d105      	bne.n	8009bc6 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009bba:	2200      	movs	r2, #0
 8009bbc:	68b9      	ldr	r1, [r7, #8]
 8009bbe:	68f8      	ldr	r0, [r7, #12]
 8009bc0:	f000 fabc 	bl	800a13c <xQueueGenericCreate>
 8009bc4:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009bc6:	69fb      	ldr	r3, [r7, #28]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d00c      	beq.n	8009be6 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d003      	beq.n	8009bda <osMessageQueueNew+0xd0>
        name = attr->name;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	617b      	str	r3, [r7, #20]
 8009bd8:	e001      	b.n	8009bde <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009bde:	6979      	ldr	r1, [r7, #20]
 8009be0:	69f8      	ldr	r0, [r7, #28]
 8009be2:	f000 ff4f 	bl	800aa84 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009be6:	69fb      	ldr	r3, [r7, #28]
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3720      	adds	r7, #32
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b088      	sub	sp, #32
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	60f8      	str	r0, [r7, #12]
 8009bf8:	60b9      	str	r1, [r7, #8]
 8009bfa:	603b      	str	r3, [r7, #0]
 8009bfc:	4613      	mov	r3, r2
 8009bfe:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009c04:	2300      	movs	r3, #0
 8009c06:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c08:	f3ef 8305 	mrs	r3, IPSR
 8009c0c:	617b      	str	r3, [r7, #20]
  return(result);
 8009c0e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d028      	beq.n	8009c66 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009c14:	69bb      	ldr	r3, [r7, #24]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d005      	beq.n	8009c26 <osMessageQueuePut+0x36>
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d002      	beq.n	8009c26 <osMessageQueuePut+0x36>
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d003      	beq.n	8009c2e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8009c26:	f06f 0303 	mvn.w	r3, #3
 8009c2a:	61fb      	str	r3, [r7, #28]
 8009c2c:	e038      	b.n	8009ca0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009c32:	f107 0210 	add.w	r2, r7, #16
 8009c36:	2300      	movs	r3, #0
 8009c38:	68b9      	ldr	r1, [r7, #8]
 8009c3a:	69b8      	ldr	r0, [r7, #24]
 8009c3c:	f000 fbda 	bl	800a3f4 <xQueueGenericSendFromISR>
 8009c40:	4603      	mov	r3, r0
 8009c42:	2b01      	cmp	r3, #1
 8009c44:	d003      	beq.n	8009c4e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8009c46:	f06f 0302 	mvn.w	r3, #2
 8009c4a:	61fb      	str	r3, [r7, #28]
 8009c4c:	e028      	b.n	8009ca0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d025      	beq.n	8009ca0 <osMessageQueuePut+0xb0>
 8009c54:	4b15      	ldr	r3, [pc, #84]	; (8009cac <osMessageQueuePut+0xbc>)
 8009c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c5a:	601a      	str	r2, [r3, #0]
 8009c5c:	f3bf 8f4f 	dsb	sy
 8009c60:	f3bf 8f6f 	isb	sy
 8009c64:	e01c      	b.n	8009ca0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009c66:	69bb      	ldr	r3, [r7, #24]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d002      	beq.n	8009c72 <osMessageQueuePut+0x82>
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d103      	bne.n	8009c7a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8009c72:	f06f 0303 	mvn.w	r3, #3
 8009c76:	61fb      	str	r3, [r7, #28]
 8009c78:	e012      	b.n	8009ca0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	683a      	ldr	r2, [r7, #0]
 8009c7e:	68b9      	ldr	r1, [r7, #8]
 8009c80:	69b8      	ldr	r0, [r7, #24]
 8009c82:	f000 fab9 	bl	800a1f8 <xQueueGenericSend>
 8009c86:	4603      	mov	r3, r0
 8009c88:	2b01      	cmp	r3, #1
 8009c8a:	d009      	beq.n	8009ca0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d003      	beq.n	8009c9a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8009c92:	f06f 0301 	mvn.w	r3, #1
 8009c96:	61fb      	str	r3, [r7, #28]
 8009c98:	e002      	b.n	8009ca0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8009c9a:	f06f 0302 	mvn.w	r3, #2
 8009c9e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009ca0:	69fb      	ldr	r3, [r7, #28]
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3720      	adds	r7, #32
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}
 8009caa:	bf00      	nop
 8009cac:	e000ed04 	.word	0xe000ed04

08009cb0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b088      	sub	sp, #32
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	60f8      	str	r0, [r7, #12]
 8009cb8:	60b9      	str	r1, [r7, #8]
 8009cba:	607a      	str	r2, [r7, #4]
 8009cbc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009cc6:	f3ef 8305 	mrs	r3, IPSR
 8009cca:	617b      	str	r3, [r7, #20]
  return(result);
 8009ccc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d028      	beq.n	8009d24 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009cd2:	69bb      	ldr	r3, [r7, #24]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d005      	beq.n	8009ce4 <osMessageQueueGet+0x34>
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d002      	beq.n	8009ce4 <osMessageQueueGet+0x34>
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d003      	beq.n	8009cec <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009ce4:	f06f 0303 	mvn.w	r3, #3
 8009ce8:	61fb      	str	r3, [r7, #28]
 8009cea:	e037      	b.n	8009d5c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8009cec:	2300      	movs	r3, #0
 8009cee:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009cf0:	f107 0310 	add.w	r3, r7, #16
 8009cf4:	461a      	mov	r2, r3
 8009cf6:	68b9      	ldr	r1, [r7, #8]
 8009cf8:	69b8      	ldr	r0, [r7, #24]
 8009cfa:	f000 fcf7 	bl	800a6ec <xQueueReceiveFromISR>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	2b01      	cmp	r3, #1
 8009d02:	d003      	beq.n	8009d0c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009d04:	f06f 0302 	mvn.w	r3, #2
 8009d08:	61fb      	str	r3, [r7, #28]
 8009d0a:	e027      	b.n	8009d5c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d024      	beq.n	8009d5c <osMessageQueueGet+0xac>
 8009d12:	4b15      	ldr	r3, [pc, #84]	; (8009d68 <osMessageQueueGet+0xb8>)
 8009d14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d18:	601a      	str	r2, [r3, #0]
 8009d1a:	f3bf 8f4f 	dsb	sy
 8009d1e:	f3bf 8f6f 	isb	sy
 8009d22:	e01b      	b.n	8009d5c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009d24:	69bb      	ldr	r3, [r7, #24]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d002      	beq.n	8009d30 <osMessageQueueGet+0x80>
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d103      	bne.n	8009d38 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8009d30:	f06f 0303 	mvn.w	r3, #3
 8009d34:	61fb      	str	r3, [r7, #28]
 8009d36:	e011      	b.n	8009d5c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009d38:	683a      	ldr	r2, [r7, #0]
 8009d3a:	68b9      	ldr	r1, [r7, #8]
 8009d3c:	69b8      	ldr	r0, [r7, #24]
 8009d3e:	f000 fbf5 	bl	800a52c <xQueueReceive>
 8009d42:	4603      	mov	r3, r0
 8009d44:	2b01      	cmp	r3, #1
 8009d46:	d009      	beq.n	8009d5c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d003      	beq.n	8009d56 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8009d4e:	f06f 0301 	mvn.w	r3, #1
 8009d52:	61fb      	str	r3, [r7, #28]
 8009d54:	e002      	b.n	8009d5c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8009d56:	f06f 0302 	mvn.w	r3, #2
 8009d5a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009d5c:	69fb      	ldr	r3, [r7, #28]
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3720      	adds	r7, #32
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}
 8009d66:	bf00      	nop
 8009d68:	e000ed04 	.word	0xe000ed04

08009d6c <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b086      	sub	sp, #24
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d102      	bne.n	8009d84 <osMessageQueueGetCount+0x18>
    count = 0U;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	617b      	str	r3, [r7, #20]
 8009d82:	e00e      	b.n	8009da2 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d84:	f3ef 8305 	mrs	r3, IPSR
 8009d88:	60fb      	str	r3, [r7, #12]
  return(result);
 8009d8a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d004      	beq.n	8009d9a <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8009d90:	6938      	ldr	r0, [r7, #16]
 8009d92:	f000 fd49 	bl	800a828 <uxQueueMessagesWaitingFromISR>
 8009d96:	6178      	str	r0, [r7, #20]
 8009d98:	e003      	b.n	8009da2 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8009d9a:	6938      	ldr	r0, [r7, #16]
 8009d9c:	f000 fd26 	bl	800a7ec <uxQueueMessagesWaiting>
 8009da0:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8009da2:	697b      	ldr	r3, [r7, #20]
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3718      	adds	r7, #24
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009dac:	b480      	push	{r7}
 8009dae:	b085      	sub	sp, #20
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	60f8      	str	r0, [r7, #12]
 8009db4:	60b9      	str	r1, [r7, #8]
 8009db6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	4a07      	ldr	r2, [pc, #28]	; (8009dd8 <vApplicationGetIdleTaskMemory+0x2c>)
 8009dbc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	4a06      	ldr	r2, [pc, #24]	; (8009ddc <vApplicationGetIdleTaskMemory+0x30>)
 8009dc2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2280      	movs	r2, #128	; 0x80
 8009dc8:	601a      	str	r2, [r3, #0]
}
 8009dca:	bf00      	nop
 8009dcc:	3714      	adds	r7, #20
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd4:	4770      	bx	lr
 8009dd6:	bf00      	nop
 8009dd8:	200002b4 	.word	0x200002b4
 8009ddc:	2000035c 	.word	0x2000035c

08009de0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009de0:	b480      	push	{r7}
 8009de2:	b085      	sub	sp, #20
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	60f8      	str	r0, [r7, #12]
 8009de8:	60b9      	str	r1, [r7, #8]
 8009dea:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	4a07      	ldr	r2, [pc, #28]	; (8009e0c <vApplicationGetTimerTaskMemory+0x2c>)
 8009df0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	4a06      	ldr	r2, [pc, #24]	; (8009e10 <vApplicationGetTimerTaskMemory+0x30>)
 8009df6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009dfe:	601a      	str	r2, [r3, #0]
}
 8009e00:	bf00      	nop
 8009e02:	3714      	adds	r7, #20
 8009e04:	46bd      	mov	sp, r7
 8009e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0a:	4770      	bx	lr
 8009e0c:	2000055c 	.word	0x2000055c
 8009e10:	20000604 	.word	0x20000604

08009e14 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009e14:	b480      	push	{r7}
 8009e16:	b083      	sub	sp, #12
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f103 0208 	add.w	r2, r3, #8
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f04f 32ff 	mov.w	r2, #4294967295
 8009e2c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f103 0208 	add.w	r2, r3, #8
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f103 0208 	add.w	r2, r3, #8
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2200      	movs	r2, #0
 8009e46:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009e48:	bf00      	nop
 8009e4a:	370c      	adds	r7, #12
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e52:	4770      	bx	lr

08009e54 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009e54:	b480      	push	{r7}
 8009e56:	b083      	sub	sp, #12
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009e62:	bf00      	nop
 8009e64:	370c      	adds	r7, #12
 8009e66:	46bd      	mov	sp, r7
 8009e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6c:	4770      	bx	lr

08009e6e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e6e:	b480      	push	{r7}
 8009e70:	b085      	sub	sp, #20
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]
 8009e76:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	685b      	ldr	r3, [r3, #4]
 8009e7c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	68fa      	ldr	r2, [r7, #12]
 8009e82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	689a      	ldr	r2, [r3, #8]
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	689b      	ldr	r3, [r3, #8]
 8009e90:	683a      	ldr	r2, [r7, #0]
 8009e92:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	683a      	ldr	r2, [r7, #0]
 8009e98:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	1c5a      	adds	r2, r3, #1
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	601a      	str	r2, [r3, #0]
}
 8009eaa:	bf00      	nop
 8009eac:	3714      	adds	r7, #20
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb4:	4770      	bx	lr

08009eb6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009eb6:	b480      	push	{r7}
 8009eb8:	b085      	sub	sp, #20
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	6078      	str	r0, [r7, #4]
 8009ebe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ecc:	d103      	bne.n	8009ed6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	691b      	ldr	r3, [r3, #16]
 8009ed2:	60fb      	str	r3, [r7, #12]
 8009ed4:	e00c      	b.n	8009ef0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	3308      	adds	r3, #8
 8009eda:	60fb      	str	r3, [r7, #12]
 8009edc:	e002      	b.n	8009ee4 <vListInsert+0x2e>
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	685b      	ldr	r3, [r3, #4]
 8009ee2:	60fb      	str	r3, [r7, #12]
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	685b      	ldr	r3, [r3, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	68ba      	ldr	r2, [r7, #8]
 8009eec:	429a      	cmp	r2, r3
 8009eee:	d2f6      	bcs.n	8009ede <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	685a      	ldr	r2, [r3, #4]
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	685b      	ldr	r3, [r3, #4]
 8009efc:	683a      	ldr	r2, [r7, #0]
 8009efe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	68fa      	ldr	r2, [r7, #12]
 8009f04:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	683a      	ldr	r2, [r7, #0]
 8009f0a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	687a      	ldr	r2, [r7, #4]
 8009f10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	1c5a      	adds	r2, r3, #1
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	601a      	str	r2, [r3, #0]
}
 8009f1c:	bf00      	nop
 8009f1e:	3714      	adds	r7, #20
 8009f20:	46bd      	mov	sp, r7
 8009f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f26:	4770      	bx	lr

08009f28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b085      	sub	sp, #20
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	691b      	ldr	r3, [r3, #16]
 8009f34:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	685b      	ldr	r3, [r3, #4]
 8009f3a:	687a      	ldr	r2, [r7, #4]
 8009f3c:	6892      	ldr	r2, [r2, #8]
 8009f3e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	689b      	ldr	r3, [r3, #8]
 8009f44:	687a      	ldr	r2, [r7, #4]
 8009f46:	6852      	ldr	r2, [r2, #4]
 8009f48:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	685b      	ldr	r3, [r3, #4]
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d103      	bne.n	8009f5c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	689a      	ldr	r2, [r3, #8]
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	1e5a      	subs	r2, r3, #1
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3714      	adds	r7, #20
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	4770      	bx	lr

08009f7c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b084      	sub	sp, #16
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
 8009f84:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d10a      	bne.n	8009fa6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f94:	f383 8811 	msr	BASEPRI, r3
 8009f98:	f3bf 8f6f 	isb	sy
 8009f9c:	f3bf 8f4f 	dsb	sy
 8009fa0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009fa2:	bf00      	nop
 8009fa4:	e7fe      	b.n	8009fa4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009fa6:	f002 f9a5 	bl	800c2f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681a      	ldr	r2, [r3, #0]
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fb2:	68f9      	ldr	r1, [r7, #12]
 8009fb4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009fb6:	fb01 f303 	mul.w	r3, r1, r3
 8009fba:	441a      	add	r2, r3
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681a      	ldr	r2, [r3, #0]
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681a      	ldr	r2, [r3, #0]
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fd6:	3b01      	subs	r3, #1
 8009fd8:	68f9      	ldr	r1, [r7, #12]
 8009fda:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009fdc:	fb01 f303 	mul.w	r3, r1, r3
 8009fe0:	441a      	add	r2, r3
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	22ff      	movs	r2, #255	; 0xff
 8009fea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	22ff      	movs	r2, #255	; 0xff
 8009ff2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d114      	bne.n	800a026 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	691b      	ldr	r3, [r3, #16]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d01a      	beq.n	800a03a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	3310      	adds	r3, #16
 800a008:	4618      	mov	r0, r3
 800a00a:	f001 fa43 	bl	800b494 <xTaskRemoveFromEventList>
 800a00e:	4603      	mov	r3, r0
 800a010:	2b00      	cmp	r3, #0
 800a012:	d012      	beq.n	800a03a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a014:	4b0c      	ldr	r3, [pc, #48]	; (800a048 <xQueueGenericReset+0xcc>)
 800a016:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a01a:	601a      	str	r2, [r3, #0]
 800a01c:	f3bf 8f4f 	dsb	sy
 800a020:	f3bf 8f6f 	isb	sy
 800a024:	e009      	b.n	800a03a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	3310      	adds	r3, #16
 800a02a:	4618      	mov	r0, r3
 800a02c:	f7ff fef2 	bl	8009e14 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	3324      	adds	r3, #36	; 0x24
 800a034:	4618      	mov	r0, r3
 800a036:	f7ff feed 	bl	8009e14 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a03a:	f002 f98b 	bl	800c354 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a03e:	2301      	movs	r3, #1
}
 800a040:	4618      	mov	r0, r3
 800a042:	3710      	adds	r7, #16
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}
 800a048:	e000ed04 	.word	0xe000ed04

0800a04c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b08e      	sub	sp, #56	; 0x38
 800a050:	af02      	add	r7, sp, #8
 800a052:	60f8      	str	r0, [r7, #12]
 800a054:	60b9      	str	r1, [r7, #8]
 800a056:	607a      	str	r2, [r7, #4]
 800a058:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d10a      	bne.n	800a076 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a064:	f383 8811 	msr	BASEPRI, r3
 800a068:	f3bf 8f6f 	isb	sy
 800a06c:	f3bf 8f4f 	dsb	sy
 800a070:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a072:	bf00      	nop
 800a074:	e7fe      	b.n	800a074 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d10a      	bne.n	800a092 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a080:	f383 8811 	msr	BASEPRI, r3
 800a084:	f3bf 8f6f 	isb	sy
 800a088:	f3bf 8f4f 	dsb	sy
 800a08c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a08e:	bf00      	nop
 800a090:	e7fe      	b.n	800a090 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d002      	beq.n	800a09e <xQueueGenericCreateStatic+0x52>
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d001      	beq.n	800a0a2 <xQueueGenericCreateStatic+0x56>
 800a09e:	2301      	movs	r3, #1
 800a0a0:	e000      	b.n	800a0a4 <xQueueGenericCreateStatic+0x58>
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d10a      	bne.n	800a0be <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a0a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ac:	f383 8811 	msr	BASEPRI, r3
 800a0b0:	f3bf 8f6f 	isb	sy
 800a0b4:	f3bf 8f4f 	dsb	sy
 800a0b8:	623b      	str	r3, [r7, #32]
}
 800a0ba:	bf00      	nop
 800a0bc:	e7fe      	b.n	800a0bc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d102      	bne.n	800a0ca <xQueueGenericCreateStatic+0x7e>
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d101      	bne.n	800a0ce <xQueueGenericCreateStatic+0x82>
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	e000      	b.n	800a0d0 <xQueueGenericCreateStatic+0x84>
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d10a      	bne.n	800a0ea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d8:	f383 8811 	msr	BASEPRI, r3
 800a0dc:	f3bf 8f6f 	isb	sy
 800a0e0:	f3bf 8f4f 	dsb	sy
 800a0e4:	61fb      	str	r3, [r7, #28]
}
 800a0e6:	bf00      	nop
 800a0e8:	e7fe      	b.n	800a0e8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a0ea:	2350      	movs	r3, #80	; 0x50
 800a0ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	2b50      	cmp	r3, #80	; 0x50
 800a0f2:	d00a      	beq.n	800a10a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a0f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f8:	f383 8811 	msr	BASEPRI, r3
 800a0fc:	f3bf 8f6f 	isb	sy
 800a100:	f3bf 8f4f 	dsb	sy
 800a104:	61bb      	str	r3, [r7, #24]
}
 800a106:	bf00      	nop
 800a108:	e7fe      	b.n	800a108 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a10a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a112:	2b00      	cmp	r3, #0
 800a114:	d00d      	beq.n	800a132 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a118:	2201      	movs	r2, #1
 800a11a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a11e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a124:	9300      	str	r3, [sp, #0]
 800a126:	4613      	mov	r3, r2
 800a128:	687a      	ldr	r2, [r7, #4]
 800a12a:	68b9      	ldr	r1, [r7, #8]
 800a12c:	68f8      	ldr	r0, [r7, #12]
 800a12e:	f000 f83f 	bl	800a1b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a134:	4618      	mov	r0, r3
 800a136:	3730      	adds	r7, #48	; 0x30
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}

0800a13c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b08a      	sub	sp, #40	; 0x28
 800a140:	af02      	add	r7, sp, #8
 800a142:	60f8      	str	r0, [r7, #12]
 800a144:	60b9      	str	r1, [r7, #8]
 800a146:	4613      	mov	r3, r2
 800a148:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d10a      	bne.n	800a166 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a154:	f383 8811 	msr	BASEPRI, r3
 800a158:	f3bf 8f6f 	isb	sy
 800a15c:	f3bf 8f4f 	dsb	sy
 800a160:	613b      	str	r3, [r7, #16]
}
 800a162:	bf00      	nop
 800a164:	e7fe      	b.n	800a164 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	68ba      	ldr	r2, [r7, #8]
 800a16a:	fb02 f303 	mul.w	r3, r2, r3
 800a16e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a170:	69fb      	ldr	r3, [r7, #28]
 800a172:	3350      	adds	r3, #80	; 0x50
 800a174:	4618      	mov	r0, r3
 800a176:	f002 f9df 	bl	800c538 <pvPortMalloc>
 800a17a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a17c:	69bb      	ldr	r3, [r7, #24]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d011      	beq.n	800a1a6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a182:	69bb      	ldr	r3, [r7, #24]
 800a184:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	3350      	adds	r3, #80	; 0x50
 800a18a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a18c:	69bb      	ldr	r3, [r7, #24]
 800a18e:	2200      	movs	r2, #0
 800a190:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a194:	79fa      	ldrb	r2, [r7, #7]
 800a196:	69bb      	ldr	r3, [r7, #24]
 800a198:	9300      	str	r3, [sp, #0]
 800a19a:	4613      	mov	r3, r2
 800a19c:	697a      	ldr	r2, [r7, #20]
 800a19e:	68b9      	ldr	r1, [r7, #8]
 800a1a0:	68f8      	ldr	r0, [r7, #12]
 800a1a2:	f000 f805 	bl	800a1b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a1a6:	69bb      	ldr	r3, [r7, #24]
	}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	3720      	adds	r7, #32
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}

0800a1b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b084      	sub	sp, #16
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	60f8      	str	r0, [r7, #12]
 800a1b8:	60b9      	str	r1, [r7, #8]
 800a1ba:	607a      	str	r2, [r7, #4]
 800a1bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d103      	bne.n	800a1cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a1c4:	69bb      	ldr	r3, [r7, #24]
 800a1c6:	69ba      	ldr	r2, [r7, #24]
 800a1c8:	601a      	str	r2, [r3, #0]
 800a1ca:	e002      	b.n	800a1d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a1cc:	69bb      	ldr	r3, [r7, #24]
 800a1ce:	687a      	ldr	r2, [r7, #4]
 800a1d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a1d2:	69bb      	ldr	r3, [r7, #24]
 800a1d4:	68fa      	ldr	r2, [r7, #12]
 800a1d6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a1d8:	69bb      	ldr	r3, [r7, #24]
 800a1da:	68ba      	ldr	r2, [r7, #8]
 800a1dc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a1de:	2101      	movs	r1, #1
 800a1e0:	69b8      	ldr	r0, [r7, #24]
 800a1e2:	f7ff fecb 	bl	8009f7c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a1e6:	69bb      	ldr	r3, [r7, #24]
 800a1e8:	78fa      	ldrb	r2, [r7, #3]
 800a1ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a1ee:	bf00      	nop
 800a1f0:	3710      	adds	r7, #16
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}
	...

0800a1f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b08e      	sub	sp, #56	; 0x38
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	60f8      	str	r0, [r7, #12]
 800a200:	60b9      	str	r1, [r7, #8]
 800a202:	607a      	str	r2, [r7, #4]
 800a204:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a206:	2300      	movs	r3, #0
 800a208:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a210:	2b00      	cmp	r3, #0
 800a212:	d10a      	bne.n	800a22a <xQueueGenericSend+0x32>
	__asm volatile
 800a214:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a218:	f383 8811 	msr	BASEPRI, r3
 800a21c:	f3bf 8f6f 	isb	sy
 800a220:	f3bf 8f4f 	dsb	sy
 800a224:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a226:	bf00      	nop
 800a228:	e7fe      	b.n	800a228 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d103      	bne.n	800a238 <xQueueGenericSend+0x40>
 800a230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a234:	2b00      	cmp	r3, #0
 800a236:	d101      	bne.n	800a23c <xQueueGenericSend+0x44>
 800a238:	2301      	movs	r3, #1
 800a23a:	e000      	b.n	800a23e <xQueueGenericSend+0x46>
 800a23c:	2300      	movs	r3, #0
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d10a      	bne.n	800a258 <xQueueGenericSend+0x60>
	__asm volatile
 800a242:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a246:	f383 8811 	msr	BASEPRI, r3
 800a24a:	f3bf 8f6f 	isb	sy
 800a24e:	f3bf 8f4f 	dsb	sy
 800a252:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a254:	bf00      	nop
 800a256:	e7fe      	b.n	800a256 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	2b02      	cmp	r3, #2
 800a25c:	d103      	bne.n	800a266 <xQueueGenericSend+0x6e>
 800a25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a262:	2b01      	cmp	r3, #1
 800a264:	d101      	bne.n	800a26a <xQueueGenericSend+0x72>
 800a266:	2301      	movs	r3, #1
 800a268:	e000      	b.n	800a26c <xQueueGenericSend+0x74>
 800a26a:	2300      	movs	r3, #0
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d10a      	bne.n	800a286 <xQueueGenericSend+0x8e>
	__asm volatile
 800a270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a274:	f383 8811 	msr	BASEPRI, r3
 800a278:	f3bf 8f6f 	isb	sy
 800a27c:	f3bf 8f4f 	dsb	sy
 800a280:	623b      	str	r3, [r7, #32]
}
 800a282:	bf00      	nop
 800a284:	e7fe      	b.n	800a284 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a286:	f001 fad7 	bl	800b838 <xTaskGetSchedulerState>
 800a28a:	4603      	mov	r3, r0
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d102      	bne.n	800a296 <xQueueGenericSend+0x9e>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d101      	bne.n	800a29a <xQueueGenericSend+0xa2>
 800a296:	2301      	movs	r3, #1
 800a298:	e000      	b.n	800a29c <xQueueGenericSend+0xa4>
 800a29a:	2300      	movs	r3, #0
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d10a      	bne.n	800a2b6 <xQueueGenericSend+0xbe>
	__asm volatile
 800a2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a4:	f383 8811 	msr	BASEPRI, r3
 800a2a8:	f3bf 8f6f 	isb	sy
 800a2ac:	f3bf 8f4f 	dsb	sy
 800a2b0:	61fb      	str	r3, [r7, #28]
}
 800a2b2:	bf00      	nop
 800a2b4:	e7fe      	b.n	800a2b4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a2b6:	f002 f81d 	bl	800c2f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2c2:	429a      	cmp	r2, r3
 800a2c4:	d302      	bcc.n	800a2cc <xQueueGenericSend+0xd4>
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	2b02      	cmp	r3, #2
 800a2ca:	d129      	bne.n	800a320 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a2cc:	683a      	ldr	r2, [r7, #0]
 800a2ce:	68b9      	ldr	r1, [r7, #8]
 800a2d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2d2:	f000 fac7 	bl	800a864 <prvCopyDataToQueue>
 800a2d6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a2d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d010      	beq.n	800a302 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e2:	3324      	adds	r3, #36	; 0x24
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f001 f8d5 	bl	800b494 <xTaskRemoveFromEventList>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d013      	beq.n	800a318 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a2f0:	4b3f      	ldr	r3, [pc, #252]	; (800a3f0 <xQueueGenericSend+0x1f8>)
 800a2f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2f6:	601a      	str	r2, [r3, #0]
 800a2f8:	f3bf 8f4f 	dsb	sy
 800a2fc:	f3bf 8f6f 	isb	sy
 800a300:	e00a      	b.n	800a318 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a304:	2b00      	cmp	r3, #0
 800a306:	d007      	beq.n	800a318 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a308:	4b39      	ldr	r3, [pc, #228]	; (800a3f0 <xQueueGenericSend+0x1f8>)
 800a30a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a30e:	601a      	str	r2, [r3, #0]
 800a310:	f3bf 8f4f 	dsb	sy
 800a314:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a318:	f002 f81c 	bl	800c354 <vPortExitCritical>
				return pdPASS;
 800a31c:	2301      	movs	r3, #1
 800a31e:	e063      	b.n	800a3e8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d103      	bne.n	800a32e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a326:	f002 f815 	bl	800c354 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a32a:	2300      	movs	r3, #0
 800a32c:	e05c      	b.n	800a3e8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a32e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a330:	2b00      	cmp	r3, #0
 800a332:	d106      	bne.n	800a342 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a334:	f107 0314 	add.w	r3, r7, #20
 800a338:	4618      	mov	r0, r3
 800a33a:	f001 f90f 	bl	800b55c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a33e:	2301      	movs	r3, #1
 800a340:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a342:	f002 f807 	bl	800c354 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a346:	f000 fe57 	bl	800aff8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a34a:	f001 ffd3 	bl	800c2f4 <vPortEnterCritical>
 800a34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a350:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a354:	b25b      	sxtb	r3, r3
 800a356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a35a:	d103      	bne.n	800a364 <xQueueGenericSend+0x16c>
 800a35c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a35e:	2200      	movs	r2, #0
 800a360:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a366:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a36a:	b25b      	sxtb	r3, r3
 800a36c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a370:	d103      	bne.n	800a37a <xQueueGenericSend+0x182>
 800a372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a374:	2200      	movs	r2, #0
 800a376:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a37a:	f001 ffeb 	bl	800c354 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a37e:	1d3a      	adds	r2, r7, #4
 800a380:	f107 0314 	add.w	r3, r7, #20
 800a384:	4611      	mov	r1, r2
 800a386:	4618      	mov	r0, r3
 800a388:	f001 f8fe 	bl	800b588 <xTaskCheckForTimeOut>
 800a38c:	4603      	mov	r3, r0
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d124      	bne.n	800a3dc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a392:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a394:	f000 fb5e 	bl	800aa54 <prvIsQueueFull>
 800a398:	4603      	mov	r3, r0
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d018      	beq.n	800a3d0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a0:	3310      	adds	r3, #16
 800a3a2:	687a      	ldr	r2, [r7, #4]
 800a3a4:	4611      	mov	r1, r2
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f001 f824 	bl	800b3f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a3ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3ae:	f000 fae9 	bl	800a984 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a3b2:	f000 fe2f 	bl	800b014 <xTaskResumeAll>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	f47f af7c 	bne.w	800a2b6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a3be:	4b0c      	ldr	r3, [pc, #48]	; (800a3f0 <xQueueGenericSend+0x1f8>)
 800a3c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3c4:	601a      	str	r2, [r3, #0]
 800a3c6:	f3bf 8f4f 	dsb	sy
 800a3ca:	f3bf 8f6f 	isb	sy
 800a3ce:	e772      	b.n	800a2b6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a3d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3d2:	f000 fad7 	bl	800a984 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a3d6:	f000 fe1d 	bl	800b014 <xTaskResumeAll>
 800a3da:	e76c      	b.n	800a2b6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a3dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3de:	f000 fad1 	bl	800a984 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a3e2:	f000 fe17 	bl	800b014 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a3e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3738      	adds	r7, #56	; 0x38
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}
 800a3f0:	e000ed04 	.word	0xe000ed04

0800a3f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b090      	sub	sp, #64	; 0x40
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	60f8      	str	r0, [r7, #12]
 800a3fc:	60b9      	str	r1, [r7, #8]
 800a3fe:	607a      	str	r2, [r7, #4]
 800a400:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d10a      	bne.n	800a422 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a410:	f383 8811 	msr	BASEPRI, r3
 800a414:	f3bf 8f6f 	isb	sy
 800a418:	f3bf 8f4f 	dsb	sy
 800a41c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a41e:	bf00      	nop
 800a420:	e7fe      	b.n	800a420 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d103      	bne.n	800a430 <xQueueGenericSendFromISR+0x3c>
 800a428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a42a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d101      	bne.n	800a434 <xQueueGenericSendFromISR+0x40>
 800a430:	2301      	movs	r3, #1
 800a432:	e000      	b.n	800a436 <xQueueGenericSendFromISR+0x42>
 800a434:	2300      	movs	r3, #0
 800a436:	2b00      	cmp	r3, #0
 800a438:	d10a      	bne.n	800a450 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a43a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a43e:	f383 8811 	msr	BASEPRI, r3
 800a442:	f3bf 8f6f 	isb	sy
 800a446:	f3bf 8f4f 	dsb	sy
 800a44a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a44c:	bf00      	nop
 800a44e:	e7fe      	b.n	800a44e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	2b02      	cmp	r3, #2
 800a454:	d103      	bne.n	800a45e <xQueueGenericSendFromISR+0x6a>
 800a456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a45a:	2b01      	cmp	r3, #1
 800a45c:	d101      	bne.n	800a462 <xQueueGenericSendFromISR+0x6e>
 800a45e:	2301      	movs	r3, #1
 800a460:	e000      	b.n	800a464 <xQueueGenericSendFromISR+0x70>
 800a462:	2300      	movs	r3, #0
 800a464:	2b00      	cmp	r3, #0
 800a466:	d10a      	bne.n	800a47e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a46c:	f383 8811 	msr	BASEPRI, r3
 800a470:	f3bf 8f6f 	isb	sy
 800a474:	f3bf 8f4f 	dsb	sy
 800a478:	623b      	str	r3, [r7, #32]
}
 800a47a:	bf00      	nop
 800a47c:	e7fe      	b.n	800a47c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a47e:	f002 f81b 	bl	800c4b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a482:	f3ef 8211 	mrs	r2, BASEPRI
 800a486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a48a:	f383 8811 	msr	BASEPRI, r3
 800a48e:	f3bf 8f6f 	isb	sy
 800a492:	f3bf 8f4f 	dsb	sy
 800a496:	61fa      	str	r2, [r7, #28]
 800a498:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a49a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a49c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a49e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	d302      	bcc.n	800a4b0 <xQueueGenericSendFromISR+0xbc>
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	2b02      	cmp	r3, #2
 800a4ae:	d12f      	bne.n	800a510 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a4b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a4b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a4ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4be:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a4c0:	683a      	ldr	r2, [r7, #0]
 800a4c2:	68b9      	ldr	r1, [r7, #8]
 800a4c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a4c6:	f000 f9cd 	bl	800a864 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a4ca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a4ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4d2:	d112      	bne.n	800a4fa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d016      	beq.n	800a50a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4de:	3324      	adds	r3, #36	; 0x24
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f000 ffd7 	bl	800b494 <xTaskRemoveFromEventList>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d00e      	beq.n	800a50a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d00b      	beq.n	800a50a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2201      	movs	r2, #1
 800a4f6:	601a      	str	r2, [r3, #0]
 800a4f8:	e007      	b.n	800a50a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a4fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a4fe:	3301      	adds	r3, #1
 800a500:	b2db      	uxtb	r3, r3
 800a502:	b25a      	sxtb	r2, r3
 800a504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a506:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a50a:	2301      	movs	r3, #1
 800a50c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a50e:	e001      	b.n	800a514 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a510:	2300      	movs	r3, #0
 800a512:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a516:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a51e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a522:	4618      	mov	r0, r3
 800a524:	3740      	adds	r7, #64	; 0x40
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}
	...

0800a52c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b08c      	sub	sp, #48	; 0x30
 800a530:	af00      	add	r7, sp, #0
 800a532:	60f8      	str	r0, [r7, #12]
 800a534:	60b9      	str	r1, [r7, #8]
 800a536:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a538:	2300      	movs	r3, #0
 800a53a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a542:	2b00      	cmp	r3, #0
 800a544:	d10a      	bne.n	800a55c <xQueueReceive+0x30>
	__asm volatile
 800a546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a54a:	f383 8811 	msr	BASEPRI, r3
 800a54e:	f3bf 8f6f 	isb	sy
 800a552:	f3bf 8f4f 	dsb	sy
 800a556:	623b      	str	r3, [r7, #32]
}
 800a558:	bf00      	nop
 800a55a:	e7fe      	b.n	800a55a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d103      	bne.n	800a56a <xQueueReceive+0x3e>
 800a562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a566:	2b00      	cmp	r3, #0
 800a568:	d101      	bne.n	800a56e <xQueueReceive+0x42>
 800a56a:	2301      	movs	r3, #1
 800a56c:	e000      	b.n	800a570 <xQueueReceive+0x44>
 800a56e:	2300      	movs	r3, #0
 800a570:	2b00      	cmp	r3, #0
 800a572:	d10a      	bne.n	800a58a <xQueueReceive+0x5e>
	__asm volatile
 800a574:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a578:	f383 8811 	msr	BASEPRI, r3
 800a57c:	f3bf 8f6f 	isb	sy
 800a580:	f3bf 8f4f 	dsb	sy
 800a584:	61fb      	str	r3, [r7, #28]
}
 800a586:	bf00      	nop
 800a588:	e7fe      	b.n	800a588 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a58a:	f001 f955 	bl	800b838 <xTaskGetSchedulerState>
 800a58e:	4603      	mov	r3, r0
 800a590:	2b00      	cmp	r3, #0
 800a592:	d102      	bne.n	800a59a <xQueueReceive+0x6e>
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d101      	bne.n	800a59e <xQueueReceive+0x72>
 800a59a:	2301      	movs	r3, #1
 800a59c:	e000      	b.n	800a5a0 <xQueueReceive+0x74>
 800a59e:	2300      	movs	r3, #0
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d10a      	bne.n	800a5ba <xQueueReceive+0x8e>
	__asm volatile
 800a5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5a8:	f383 8811 	msr	BASEPRI, r3
 800a5ac:	f3bf 8f6f 	isb	sy
 800a5b0:	f3bf 8f4f 	dsb	sy
 800a5b4:	61bb      	str	r3, [r7, #24]
}
 800a5b6:	bf00      	nop
 800a5b8:	e7fe      	b.n	800a5b8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a5ba:	f001 fe9b 	bl	800c2f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a5be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5c2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d01f      	beq.n	800a60a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a5ca:	68b9      	ldr	r1, [r7, #8]
 800a5cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5ce:	f000 f9b3 	bl	800a938 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d4:	1e5a      	subs	r2, r3, #1
 800a5d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a5da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5dc:	691b      	ldr	r3, [r3, #16]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d00f      	beq.n	800a602 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5e4:	3310      	adds	r3, #16
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f000 ff54 	bl	800b494 <xTaskRemoveFromEventList>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d007      	beq.n	800a602 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a5f2:	4b3d      	ldr	r3, [pc, #244]	; (800a6e8 <xQueueReceive+0x1bc>)
 800a5f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5f8:	601a      	str	r2, [r3, #0]
 800a5fa:	f3bf 8f4f 	dsb	sy
 800a5fe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a602:	f001 fea7 	bl	800c354 <vPortExitCritical>
				return pdPASS;
 800a606:	2301      	movs	r3, #1
 800a608:	e069      	b.n	800a6de <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d103      	bne.n	800a618 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a610:	f001 fea0 	bl	800c354 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a614:	2300      	movs	r3, #0
 800a616:	e062      	b.n	800a6de <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d106      	bne.n	800a62c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a61e:	f107 0310 	add.w	r3, r7, #16
 800a622:	4618      	mov	r0, r3
 800a624:	f000 ff9a 	bl	800b55c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a628:	2301      	movs	r3, #1
 800a62a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a62c:	f001 fe92 	bl	800c354 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a630:	f000 fce2 	bl	800aff8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a634:	f001 fe5e 	bl	800c2f4 <vPortEnterCritical>
 800a638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a63a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a63e:	b25b      	sxtb	r3, r3
 800a640:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a644:	d103      	bne.n	800a64e <xQueueReceive+0x122>
 800a646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a648:	2200      	movs	r2, #0
 800a64a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a64e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a650:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a654:	b25b      	sxtb	r3, r3
 800a656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a65a:	d103      	bne.n	800a664 <xQueueReceive+0x138>
 800a65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a65e:	2200      	movs	r2, #0
 800a660:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a664:	f001 fe76 	bl	800c354 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a668:	1d3a      	adds	r2, r7, #4
 800a66a:	f107 0310 	add.w	r3, r7, #16
 800a66e:	4611      	mov	r1, r2
 800a670:	4618      	mov	r0, r3
 800a672:	f000 ff89 	bl	800b588 <xTaskCheckForTimeOut>
 800a676:	4603      	mov	r3, r0
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d123      	bne.n	800a6c4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a67c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a67e:	f000 f9d3 	bl	800aa28 <prvIsQueueEmpty>
 800a682:	4603      	mov	r3, r0
 800a684:	2b00      	cmp	r3, #0
 800a686:	d017      	beq.n	800a6b8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a68a:	3324      	adds	r3, #36	; 0x24
 800a68c:	687a      	ldr	r2, [r7, #4]
 800a68e:	4611      	mov	r1, r2
 800a690:	4618      	mov	r0, r3
 800a692:	f000 feaf 	bl	800b3f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a696:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a698:	f000 f974 	bl	800a984 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a69c:	f000 fcba 	bl	800b014 <xTaskResumeAll>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d189      	bne.n	800a5ba <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a6a6:	4b10      	ldr	r3, [pc, #64]	; (800a6e8 <xQueueReceive+0x1bc>)
 800a6a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6ac:	601a      	str	r2, [r3, #0]
 800a6ae:	f3bf 8f4f 	dsb	sy
 800a6b2:	f3bf 8f6f 	isb	sy
 800a6b6:	e780      	b.n	800a5ba <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a6b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6ba:	f000 f963 	bl	800a984 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a6be:	f000 fca9 	bl	800b014 <xTaskResumeAll>
 800a6c2:	e77a      	b.n	800a5ba <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a6c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6c6:	f000 f95d 	bl	800a984 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a6ca:	f000 fca3 	bl	800b014 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a6ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6d0:	f000 f9aa 	bl	800aa28 <prvIsQueueEmpty>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	f43f af6f 	beq.w	800a5ba <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a6dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3730      	adds	r7, #48	; 0x30
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}
 800a6e6:	bf00      	nop
 800a6e8:	e000ed04 	.word	0xe000ed04

0800a6ec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b08e      	sub	sp, #56	; 0x38
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	60f8      	str	r0, [r7, #12]
 800a6f4:	60b9      	str	r1, [r7, #8]
 800a6f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a6fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d10a      	bne.n	800a718 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a702:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a706:	f383 8811 	msr	BASEPRI, r3
 800a70a:	f3bf 8f6f 	isb	sy
 800a70e:	f3bf 8f4f 	dsb	sy
 800a712:	623b      	str	r3, [r7, #32]
}
 800a714:	bf00      	nop
 800a716:	e7fe      	b.n	800a716 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d103      	bne.n	800a726 <xQueueReceiveFromISR+0x3a>
 800a71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a722:	2b00      	cmp	r3, #0
 800a724:	d101      	bne.n	800a72a <xQueueReceiveFromISR+0x3e>
 800a726:	2301      	movs	r3, #1
 800a728:	e000      	b.n	800a72c <xQueueReceiveFromISR+0x40>
 800a72a:	2300      	movs	r3, #0
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d10a      	bne.n	800a746 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a734:	f383 8811 	msr	BASEPRI, r3
 800a738:	f3bf 8f6f 	isb	sy
 800a73c:	f3bf 8f4f 	dsb	sy
 800a740:	61fb      	str	r3, [r7, #28]
}
 800a742:	bf00      	nop
 800a744:	e7fe      	b.n	800a744 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a746:	f001 feb7 	bl	800c4b8 <vPortValidateInterruptPriority>
	__asm volatile
 800a74a:	f3ef 8211 	mrs	r2, BASEPRI
 800a74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a752:	f383 8811 	msr	BASEPRI, r3
 800a756:	f3bf 8f6f 	isb	sy
 800a75a:	f3bf 8f4f 	dsb	sy
 800a75e:	61ba      	str	r2, [r7, #24]
 800a760:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a762:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a764:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a76a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d02f      	beq.n	800a7d2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a774:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a778:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a77c:	68b9      	ldr	r1, [r7, #8]
 800a77e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a780:	f000 f8da 	bl	800a938 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a786:	1e5a      	subs	r2, r3, #1
 800a788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a78a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a78c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a790:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a794:	d112      	bne.n	800a7bc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a798:	691b      	ldr	r3, [r3, #16]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d016      	beq.n	800a7cc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a0:	3310      	adds	r3, #16
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f000 fe76 	bl	800b494 <xTaskRemoveFromEventList>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d00e      	beq.n	800a7cc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d00b      	beq.n	800a7cc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	601a      	str	r2, [r3, #0]
 800a7ba:	e007      	b.n	800a7cc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a7bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a7c0:	3301      	adds	r3, #1
 800a7c2:	b2db      	uxtb	r3, r3
 800a7c4:	b25a      	sxtb	r2, r3
 800a7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	637b      	str	r3, [r7, #52]	; 0x34
 800a7d0:	e001      	b.n	800a7d6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	637b      	str	r3, [r7, #52]	; 0x34
 800a7d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7d8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	f383 8811 	msr	BASEPRI, r3
}
 800a7e0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a7e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3738      	adds	r7, #56	; 0x38
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}

0800a7ec <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b084      	sub	sp, #16
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d10a      	bne.n	800a810 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800a7fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7fe:	f383 8811 	msr	BASEPRI, r3
 800a802:	f3bf 8f6f 	isb	sy
 800a806:	f3bf 8f4f 	dsb	sy
 800a80a:	60bb      	str	r3, [r7, #8]
}
 800a80c:	bf00      	nop
 800a80e:	e7fe      	b.n	800a80e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800a810:	f001 fd70 	bl	800c2f4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a818:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800a81a:	f001 fd9b 	bl	800c354 <vPortExitCritical>

	return uxReturn;
 800a81e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a820:	4618      	mov	r0, r3
 800a822:	3710      	adds	r7, #16
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}

0800a828 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800a828:	b480      	push	{r7}
 800a82a:	b087      	sub	sp, #28
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d10a      	bne.n	800a850 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800a83a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a83e:	f383 8811 	msr	BASEPRI, r3
 800a842:	f3bf 8f6f 	isb	sy
 800a846:	f3bf 8f4f 	dsb	sy
 800a84a:	60fb      	str	r3, [r7, #12]
}
 800a84c:	bf00      	nop
 800a84e:	e7fe      	b.n	800a84e <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a854:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800a856:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a858:	4618      	mov	r0, r3
 800a85a:	371c      	adds	r7, #28
 800a85c:	46bd      	mov	sp, r7
 800a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a862:	4770      	bx	lr

0800a864 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b086      	sub	sp, #24
 800a868:	af00      	add	r7, sp, #0
 800a86a:	60f8      	str	r0, [r7, #12]
 800a86c:	60b9      	str	r1, [r7, #8]
 800a86e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a870:	2300      	movs	r3, #0
 800a872:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a878:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d10d      	bne.n	800a89e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d14d      	bne.n	800a926 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	689b      	ldr	r3, [r3, #8]
 800a88e:	4618      	mov	r0, r3
 800a890:	f000 fff0 	bl	800b874 <xTaskPriorityDisinherit>
 800a894:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	2200      	movs	r2, #0
 800a89a:	609a      	str	r2, [r3, #8]
 800a89c:	e043      	b.n	800a926 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d119      	bne.n	800a8d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	6858      	ldr	r0, [r3, #4]
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ac:	461a      	mov	r2, r3
 800a8ae:	68b9      	ldr	r1, [r7, #8]
 800a8b0:	f002 fcd4 	bl	800d25c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	685a      	ldr	r2, [r3, #4]
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8bc:	441a      	add	r2, r3
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	685a      	ldr	r2, [r3, #4]
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	689b      	ldr	r3, [r3, #8]
 800a8ca:	429a      	cmp	r2, r3
 800a8cc:	d32b      	bcc.n	800a926 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	681a      	ldr	r2, [r3, #0]
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	605a      	str	r2, [r3, #4]
 800a8d6:	e026      	b.n	800a926 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	68d8      	ldr	r0, [r3, #12]
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8e0:	461a      	mov	r2, r3
 800a8e2:	68b9      	ldr	r1, [r7, #8]
 800a8e4:	f002 fcba 	bl	800d25c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	68da      	ldr	r2, [r3, #12]
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8f0:	425b      	negs	r3, r3
 800a8f2:	441a      	add	r2, r3
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	68da      	ldr	r2, [r3, #12]
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	429a      	cmp	r2, r3
 800a902:	d207      	bcs.n	800a914 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	689a      	ldr	r2, [r3, #8]
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a90c:	425b      	negs	r3, r3
 800a90e:	441a      	add	r2, r3
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2b02      	cmp	r3, #2
 800a918:	d105      	bne.n	800a926 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d002      	beq.n	800a926 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	3b01      	subs	r3, #1
 800a924:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a926:	693b      	ldr	r3, [r7, #16]
 800a928:	1c5a      	adds	r2, r3, #1
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a92e:	697b      	ldr	r3, [r7, #20]
}
 800a930:	4618      	mov	r0, r3
 800a932:	3718      	adds	r7, #24
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}

0800a938 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b082      	sub	sp, #8
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
 800a940:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a946:	2b00      	cmp	r3, #0
 800a948:	d018      	beq.n	800a97c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	68da      	ldr	r2, [r3, #12]
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a952:	441a      	add	r2, r3
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	68da      	ldr	r2, [r3, #12]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	689b      	ldr	r3, [r3, #8]
 800a960:	429a      	cmp	r2, r3
 800a962:	d303      	bcc.n	800a96c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681a      	ldr	r2, [r3, #0]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	68d9      	ldr	r1, [r3, #12]
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a974:	461a      	mov	r2, r3
 800a976:	6838      	ldr	r0, [r7, #0]
 800a978:	f002 fc70 	bl	800d25c <memcpy>
	}
}
 800a97c:	bf00      	nop
 800a97e:	3708      	adds	r7, #8
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}

0800a984 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b084      	sub	sp, #16
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a98c:	f001 fcb2 	bl	800c2f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a996:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a998:	e011      	b.n	800a9be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d012      	beq.n	800a9c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	3324      	adds	r3, #36	; 0x24
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f000 fd74 	bl	800b494 <xTaskRemoveFromEventList>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d001      	beq.n	800a9b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a9b2:	f000 fe4b 	bl	800b64c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a9b6:	7bfb      	ldrb	r3, [r7, #15]
 800a9b8:	3b01      	subs	r3, #1
 800a9ba:	b2db      	uxtb	r3, r3
 800a9bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a9be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	dce9      	bgt.n	800a99a <prvUnlockQueue+0x16>
 800a9c6:	e000      	b.n	800a9ca <prvUnlockQueue+0x46>
					break;
 800a9c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	22ff      	movs	r2, #255	; 0xff
 800a9ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a9d2:	f001 fcbf 	bl	800c354 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a9d6:	f001 fc8d 	bl	800c2f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a9e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a9e2:	e011      	b.n	800aa08 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	691b      	ldr	r3, [r3, #16]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d012      	beq.n	800aa12 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	3310      	adds	r3, #16
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f000 fd4f 	bl	800b494 <xTaskRemoveFromEventList>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d001      	beq.n	800aa00 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a9fc:	f000 fe26 	bl	800b64c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800aa00:	7bbb      	ldrb	r3, [r7, #14]
 800aa02:	3b01      	subs	r3, #1
 800aa04:	b2db      	uxtb	r3, r3
 800aa06:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aa08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	dce9      	bgt.n	800a9e4 <prvUnlockQueue+0x60>
 800aa10:	e000      	b.n	800aa14 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aa12:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	22ff      	movs	r2, #255	; 0xff
 800aa18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800aa1c:	f001 fc9a 	bl	800c354 <vPortExitCritical>
}
 800aa20:	bf00      	nop
 800aa22:	3710      	adds	r7, #16
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}

0800aa28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b084      	sub	sp, #16
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aa30:	f001 fc60 	bl	800c2f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d102      	bne.n	800aa42 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	60fb      	str	r3, [r7, #12]
 800aa40:	e001      	b.n	800aa46 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800aa42:	2300      	movs	r3, #0
 800aa44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aa46:	f001 fc85 	bl	800c354 <vPortExitCritical>

	return xReturn;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3710      	adds	r7, #16
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}

0800aa54 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b084      	sub	sp, #16
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aa5c:	f001 fc4a 	bl	800c2f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa68:	429a      	cmp	r2, r3
 800aa6a:	d102      	bne.n	800aa72 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	60fb      	str	r3, [r7, #12]
 800aa70:	e001      	b.n	800aa76 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800aa72:	2300      	movs	r3, #0
 800aa74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aa76:	f001 fc6d 	bl	800c354 <vPortExitCritical>

	return xReturn;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3710      	adds	r7, #16
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}

0800aa84 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800aa84:	b480      	push	{r7}
 800aa86:	b085      	sub	sp, #20
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
 800aa8c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aa8e:	2300      	movs	r3, #0
 800aa90:	60fb      	str	r3, [r7, #12]
 800aa92:	e014      	b.n	800aabe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800aa94:	4a0f      	ldr	r2, [pc, #60]	; (800aad4 <vQueueAddToRegistry+0x50>)
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d10b      	bne.n	800aab8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800aaa0:	490c      	ldr	r1, [pc, #48]	; (800aad4 <vQueueAddToRegistry+0x50>)
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	683a      	ldr	r2, [r7, #0]
 800aaa6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800aaaa:	4a0a      	ldr	r2, [pc, #40]	; (800aad4 <vQueueAddToRegistry+0x50>)
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	00db      	lsls	r3, r3, #3
 800aab0:	4413      	add	r3, r2
 800aab2:	687a      	ldr	r2, [r7, #4]
 800aab4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800aab6:	e006      	b.n	800aac6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	3301      	adds	r3, #1
 800aabc:	60fb      	str	r3, [r7, #12]
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2b07      	cmp	r3, #7
 800aac2:	d9e7      	bls.n	800aa94 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800aac4:	bf00      	nop
 800aac6:	bf00      	nop
 800aac8:	3714      	adds	r7, #20
 800aaca:	46bd      	mov	sp, r7
 800aacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad0:	4770      	bx	lr
 800aad2:	bf00      	nop
 800aad4:	20000a04 	.word	0x20000a04

0800aad8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b086      	sub	sp, #24
 800aadc:	af00      	add	r7, sp, #0
 800aade:	60f8      	str	r0, [r7, #12]
 800aae0:	60b9      	str	r1, [r7, #8]
 800aae2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800aae8:	f001 fc04 	bl	800c2f4 <vPortEnterCritical>
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aaf2:	b25b      	sxtb	r3, r3
 800aaf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaf8:	d103      	bne.n	800ab02 <vQueueWaitForMessageRestricted+0x2a>
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	2200      	movs	r2, #0
 800aafe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab08:	b25b      	sxtb	r3, r3
 800ab0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab0e:	d103      	bne.n	800ab18 <vQueueWaitForMessageRestricted+0x40>
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	2200      	movs	r2, #0
 800ab14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab18:	f001 fc1c 	bl	800c354 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ab1c:	697b      	ldr	r3, [r7, #20]
 800ab1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d106      	bne.n	800ab32 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ab24:	697b      	ldr	r3, [r7, #20]
 800ab26:	3324      	adds	r3, #36	; 0x24
 800ab28:	687a      	ldr	r2, [r7, #4]
 800ab2a:	68b9      	ldr	r1, [r7, #8]
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f000 fc85 	bl	800b43c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ab32:	6978      	ldr	r0, [r7, #20]
 800ab34:	f7ff ff26 	bl	800a984 <prvUnlockQueue>
	}
 800ab38:	bf00      	nop
 800ab3a:	3718      	adds	r7, #24
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}

0800ab40 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b08e      	sub	sp, #56	; 0x38
 800ab44:	af04      	add	r7, sp, #16
 800ab46:	60f8      	str	r0, [r7, #12]
 800ab48:	60b9      	str	r1, [r7, #8]
 800ab4a:	607a      	str	r2, [r7, #4]
 800ab4c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ab4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d10a      	bne.n	800ab6a <xTaskCreateStatic+0x2a>
	__asm volatile
 800ab54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab58:	f383 8811 	msr	BASEPRI, r3
 800ab5c:	f3bf 8f6f 	isb	sy
 800ab60:	f3bf 8f4f 	dsb	sy
 800ab64:	623b      	str	r3, [r7, #32]
}
 800ab66:	bf00      	nop
 800ab68:	e7fe      	b.n	800ab68 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ab6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d10a      	bne.n	800ab86 <xTaskCreateStatic+0x46>
	__asm volatile
 800ab70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab74:	f383 8811 	msr	BASEPRI, r3
 800ab78:	f3bf 8f6f 	isb	sy
 800ab7c:	f3bf 8f4f 	dsb	sy
 800ab80:	61fb      	str	r3, [r7, #28]
}
 800ab82:	bf00      	nop
 800ab84:	e7fe      	b.n	800ab84 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ab86:	23a8      	movs	r3, #168	; 0xa8
 800ab88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	2ba8      	cmp	r3, #168	; 0xa8
 800ab8e:	d00a      	beq.n	800aba6 <xTaskCreateStatic+0x66>
	__asm volatile
 800ab90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab94:	f383 8811 	msr	BASEPRI, r3
 800ab98:	f3bf 8f6f 	isb	sy
 800ab9c:	f3bf 8f4f 	dsb	sy
 800aba0:	61bb      	str	r3, [r7, #24]
}
 800aba2:	bf00      	nop
 800aba4:	e7fe      	b.n	800aba4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800aba6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800aba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d01e      	beq.n	800abec <xTaskCreateStatic+0xac>
 800abae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d01b      	beq.n	800abec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800abb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abb6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800abb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800abbc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800abbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc0:	2202      	movs	r2, #2
 800abc2:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800abc6:	2300      	movs	r3, #0
 800abc8:	9303      	str	r3, [sp, #12]
 800abca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abcc:	9302      	str	r3, [sp, #8]
 800abce:	f107 0314 	add.w	r3, r7, #20
 800abd2:	9301      	str	r3, [sp, #4]
 800abd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abd6:	9300      	str	r3, [sp, #0]
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	687a      	ldr	r2, [r7, #4]
 800abdc:	68b9      	ldr	r1, [r7, #8]
 800abde:	68f8      	ldr	r0, [r7, #12]
 800abe0:	f000 f850 	bl	800ac84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800abe4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800abe6:	f000 f8f3 	bl	800add0 <prvAddNewTaskToReadyList>
 800abea:	e001      	b.n	800abf0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800abec:	2300      	movs	r3, #0
 800abee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800abf0:	697b      	ldr	r3, [r7, #20]
	}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3728      	adds	r7, #40	; 0x28
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}

0800abfa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800abfa:	b580      	push	{r7, lr}
 800abfc:	b08c      	sub	sp, #48	; 0x30
 800abfe:	af04      	add	r7, sp, #16
 800ac00:	60f8      	str	r0, [r7, #12]
 800ac02:	60b9      	str	r1, [r7, #8]
 800ac04:	603b      	str	r3, [r7, #0]
 800ac06:	4613      	mov	r3, r2
 800ac08:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ac0a:	88fb      	ldrh	r3, [r7, #6]
 800ac0c:	009b      	lsls	r3, r3, #2
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f001 fc92 	bl	800c538 <pvPortMalloc>
 800ac14:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d00e      	beq.n	800ac3a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ac1c:	20a8      	movs	r0, #168	; 0xa8
 800ac1e:	f001 fc8b 	bl	800c538 <pvPortMalloc>
 800ac22:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ac24:	69fb      	ldr	r3, [r7, #28]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d003      	beq.n	800ac32 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ac2a:	69fb      	ldr	r3, [r7, #28]
 800ac2c:	697a      	ldr	r2, [r7, #20]
 800ac2e:	631a      	str	r2, [r3, #48]	; 0x30
 800ac30:	e005      	b.n	800ac3e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ac32:	6978      	ldr	r0, [r7, #20]
 800ac34:	f001 fd4c 	bl	800c6d0 <vPortFree>
 800ac38:	e001      	b.n	800ac3e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ac3e:	69fb      	ldr	r3, [r7, #28]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d017      	beq.n	800ac74 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ac44:	69fb      	ldr	r3, [r7, #28]
 800ac46:	2200      	movs	r2, #0
 800ac48:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ac4c:	88fa      	ldrh	r2, [r7, #6]
 800ac4e:	2300      	movs	r3, #0
 800ac50:	9303      	str	r3, [sp, #12]
 800ac52:	69fb      	ldr	r3, [r7, #28]
 800ac54:	9302      	str	r3, [sp, #8]
 800ac56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac58:	9301      	str	r3, [sp, #4]
 800ac5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac5c:	9300      	str	r3, [sp, #0]
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	68b9      	ldr	r1, [r7, #8]
 800ac62:	68f8      	ldr	r0, [r7, #12]
 800ac64:	f000 f80e 	bl	800ac84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ac68:	69f8      	ldr	r0, [r7, #28]
 800ac6a:	f000 f8b1 	bl	800add0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ac6e:	2301      	movs	r3, #1
 800ac70:	61bb      	str	r3, [r7, #24]
 800ac72:	e002      	b.n	800ac7a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ac74:	f04f 33ff 	mov.w	r3, #4294967295
 800ac78:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ac7a:	69bb      	ldr	r3, [r7, #24]
	}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3720      	adds	r7, #32
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}

0800ac84 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b088      	sub	sp, #32
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	60f8      	str	r0, [r7, #12]
 800ac8c:	60b9      	str	r1, [r7, #8]
 800ac8e:	607a      	str	r2, [r7, #4]
 800ac90:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ac92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac94:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	009b      	lsls	r3, r3, #2
 800ac9a:	461a      	mov	r2, r3
 800ac9c:	21a5      	movs	r1, #165	; 0xa5
 800ac9e:	f002 fa27 	bl	800d0f0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aca4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800acac:	3b01      	subs	r3, #1
 800acae:	009b      	lsls	r3, r3, #2
 800acb0:	4413      	add	r3, r2
 800acb2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800acb4:	69bb      	ldr	r3, [r7, #24]
 800acb6:	f023 0307 	bic.w	r3, r3, #7
 800acba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800acbc:	69bb      	ldr	r3, [r7, #24]
 800acbe:	f003 0307 	and.w	r3, r3, #7
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d00a      	beq.n	800acdc <prvInitialiseNewTask+0x58>
	__asm volatile
 800acc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acca:	f383 8811 	msr	BASEPRI, r3
 800acce:	f3bf 8f6f 	isb	sy
 800acd2:	f3bf 8f4f 	dsb	sy
 800acd6:	617b      	str	r3, [r7, #20]
}
 800acd8:	bf00      	nop
 800acda:	e7fe      	b.n	800acda <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d01f      	beq.n	800ad22 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ace2:	2300      	movs	r3, #0
 800ace4:	61fb      	str	r3, [r7, #28]
 800ace6:	e012      	b.n	800ad0e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ace8:	68ba      	ldr	r2, [r7, #8]
 800acea:	69fb      	ldr	r3, [r7, #28]
 800acec:	4413      	add	r3, r2
 800acee:	7819      	ldrb	r1, [r3, #0]
 800acf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acf2:	69fb      	ldr	r3, [r7, #28]
 800acf4:	4413      	add	r3, r2
 800acf6:	3334      	adds	r3, #52	; 0x34
 800acf8:	460a      	mov	r2, r1
 800acfa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800acfc:	68ba      	ldr	r2, [r7, #8]
 800acfe:	69fb      	ldr	r3, [r7, #28]
 800ad00:	4413      	add	r3, r2
 800ad02:	781b      	ldrb	r3, [r3, #0]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d006      	beq.n	800ad16 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ad08:	69fb      	ldr	r3, [r7, #28]
 800ad0a:	3301      	adds	r3, #1
 800ad0c:	61fb      	str	r3, [r7, #28]
 800ad0e:	69fb      	ldr	r3, [r7, #28]
 800ad10:	2b0f      	cmp	r3, #15
 800ad12:	d9e9      	bls.n	800ace8 <prvInitialiseNewTask+0x64>
 800ad14:	e000      	b.n	800ad18 <prvInitialiseNewTask+0x94>
			{
				break;
 800ad16:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ad18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ad20:	e003      	b.n	800ad2a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ad22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad24:	2200      	movs	r2, #0
 800ad26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ad2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad2c:	2b37      	cmp	r3, #55	; 0x37
 800ad2e:	d901      	bls.n	800ad34 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ad30:	2337      	movs	r3, #55	; 0x37
 800ad32:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ad34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad38:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ad3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad3e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ad40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad42:	2200      	movs	r2, #0
 800ad44:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ad46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad48:	3304      	adds	r3, #4
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f7ff f882 	bl	8009e54 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ad50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad52:	3318      	adds	r3, #24
 800ad54:	4618      	mov	r0, r3
 800ad56:	f7ff f87d 	bl	8009e54 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ad5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad5e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad62:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ad66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad68:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ad6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad6e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ad70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad72:	2200      	movs	r2, #0
 800ad74:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ad78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ad80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad82:	3354      	adds	r3, #84	; 0x54
 800ad84:	224c      	movs	r2, #76	; 0x4c
 800ad86:	2100      	movs	r1, #0
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f002 f9b1 	bl	800d0f0 <memset>
 800ad8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad90:	4a0c      	ldr	r2, [pc, #48]	; (800adc4 <prvInitialiseNewTask+0x140>)
 800ad92:	659a      	str	r2, [r3, #88]	; 0x58
 800ad94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad96:	4a0c      	ldr	r2, [pc, #48]	; (800adc8 <prvInitialiseNewTask+0x144>)
 800ad98:	65da      	str	r2, [r3, #92]	; 0x5c
 800ad9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad9c:	4a0b      	ldr	r2, [pc, #44]	; (800adcc <prvInitialiseNewTask+0x148>)
 800ad9e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ada0:	683a      	ldr	r2, [r7, #0]
 800ada2:	68f9      	ldr	r1, [r7, #12]
 800ada4:	69b8      	ldr	r0, [r7, #24]
 800ada6:	f001 f975 	bl	800c094 <pxPortInitialiseStack>
 800adaa:	4602      	mov	r2, r0
 800adac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800adb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d002      	beq.n	800adbc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800adb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800adbc:	bf00      	nop
 800adbe:	3720      	adds	r7, #32
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd80      	pop	{r7, pc}
 800adc4:	2000538c 	.word	0x2000538c
 800adc8:	200053f4 	.word	0x200053f4
 800adcc:	2000545c 	.word	0x2000545c

0800add0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b082      	sub	sp, #8
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800add8:	f001 fa8c 	bl	800c2f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800addc:	4b2d      	ldr	r3, [pc, #180]	; (800ae94 <prvAddNewTaskToReadyList+0xc4>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	3301      	adds	r3, #1
 800ade2:	4a2c      	ldr	r2, [pc, #176]	; (800ae94 <prvAddNewTaskToReadyList+0xc4>)
 800ade4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ade6:	4b2c      	ldr	r3, [pc, #176]	; (800ae98 <prvAddNewTaskToReadyList+0xc8>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d109      	bne.n	800ae02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800adee:	4a2a      	ldr	r2, [pc, #168]	; (800ae98 <prvAddNewTaskToReadyList+0xc8>)
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800adf4:	4b27      	ldr	r3, [pc, #156]	; (800ae94 <prvAddNewTaskToReadyList+0xc4>)
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	2b01      	cmp	r3, #1
 800adfa:	d110      	bne.n	800ae1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800adfc:	f000 fc4a 	bl	800b694 <prvInitialiseTaskLists>
 800ae00:	e00d      	b.n	800ae1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ae02:	4b26      	ldr	r3, [pc, #152]	; (800ae9c <prvAddNewTaskToReadyList+0xcc>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d109      	bne.n	800ae1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ae0a:	4b23      	ldr	r3, [pc, #140]	; (800ae98 <prvAddNewTaskToReadyList+0xc8>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae14:	429a      	cmp	r2, r3
 800ae16:	d802      	bhi.n	800ae1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ae18:	4a1f      	ldr	r2, [pc, #124]	; (800ae98 <prvAddNewTaskToReadyList+0xc8>)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ae1e:	4b20      	ldr	r3, [pc, #128]	; (800aea0 <prvAddNewTaskToReadyList+0xd0>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	3301      	adds	r3, #1
 800ae24:	4a1e      	ldr	r2, [pc, #120]	; (800aea0 <prvAddNewTaskToReadyList+0xd0>)
 800ae26:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ae28:	4b1d      	ldr	r3, [pc, #116]	; (800aea0 <prvAddNewTaskToReadyList+0xd0>)
 800ae2a:	681a      	ldr	r2, [r3, #0]
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae34:	4b1b      	ldr	r3, [pc, #108]	; (800aea4 <prvAddNewTaskToReadyList+0xd4>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	429a      	cmp	r2, r3
 800ae3a:	d903      	bls.n	800ae44 <prvAddNewTaskToReadyList+0x74>
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae40:	4a18      	ldr	r2, [pc, #96]	; (800aea4 <prvAddNewTaskToReadyList+0xd4>)
 800ae42:	6013      	str	r3, [r2, #0]
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae48:	4613      	mov	r3, r2
 800ae4a:	009b      	lsls	r3, r3, #2
 800ae4c:	4413      	add	r3, r2
 800ae4e:	009b      	lsls	r3, r3, #2
 800ae50:	4a15      	ldr	r2, [pc, #84]	; (800aea8 <prvAddNewTaskToReadyList+0xd8>)
 800ae52:	441a      	add	r2, r3
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	3304      	adds	r3, #4
 800ae58:	4619      	mov	r1, r3
 800ae5a:	4610      	mov	r0, r2
 800ae5c:	f7ff f807 	bl	8009e6e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ae60:	f001 fa78 	bl	800c354 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ae64:	4b0d      	ldr	r3, [pc, #52]	; (800ae9c <prvAddNewTaskToReadyList+0xcc>)
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d00e      	beq.n	800ae8a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ae6c:	4b0a      	ldr	r3, [pc, #40]	; (800ae98 <prvAddNewTaskToReadyList+0xc8>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae76:	429a      	cmp	r2, r3
 800ae78:	d207      	bcs.n	800ae8a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ae7a:	4b0c      	ldr	r3, [pc, #48]	; (800aeac <prvAddNewTaskToReadyList+0xdc>)
 800ae7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae80:	601a      	str	r2, [r3, #0]
 800ae82:	f3bf 8f4f 	dsb	sy
 800ae86:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae8a:	bf00      	nop
 800ae8c:	3708      	adds	r7, #8
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}
 800ae92:	bf00      	nop
 800ae94:	20000f18 	.word	0x20000f18
 800ae98:	20000a44 	.word	0x20000a44
 800ae9c:	20000f24 	.word	0x20000f24
 800aea0:	20000f34 	.word	0x20000f34
 800aea4:	20000f20 	.word	0x20000f20
 800aea8:	20000a48 	.word	0x20000a48
 800aeac:	e000ed04 	.word	0xe000ed04

0800aeb0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b084      	sub	sp, #16
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d017      	beq.n	800aef2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800aec2:	4b13      	ldr	r3, [pc, #76]	; (800af10 <vTaskDelay+0x60>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d00a      	beq.n	800aee0 <vTaskDelay+0x30>
	__asm volatile
 800aeca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aece:	f383 8811 	msr	BASEPRI, r3
 800aed2:	f3bf 8f6f 	isb	sy
 800aed6:	f3bf 8f4f 	dsb	sy
 800aeda:	60bb      	str	r3, [r7, #8]
}
 800aedc:	bf00      	nop
 800aede:	e7fe      	b.n	800aede <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800aee0:	f000 f88a 	bl	800aff8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800aee4:	2100      	movs	r1, #0
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f000 fd32 	bl	800b950 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800aeec:	f000 f892 	bl	800b014 <xTaskResumeAll>
 800aef0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d107      	bne.n	800af08 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800aef8:	4b06      	ldr	r3, [pc, #24]	; (800af14 <vTaskDelay+0x64>)
 800aefa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aefe:	601a      	str	r2, [r3, #0]
 800af00:	f3bf 8f4f 	dsb	sy
 800af04:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800af08:	bf00      	nop
 800af0a:	3710      	adds	r7, #16
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}
 800af10:	20000f40 	.word	0x20000f40
 800af14:	e000ed04 	.word	0xe000ed04

0800af18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b08a      	sub	sp, #40	; 0x28
 800af1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800af1e:	2300      	movs	r3, #0
 800af20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800af22:	2300      	movs	r3, #0
 800af24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800af26:	463a      	mov	r2, r7
 800af28:	1d39      	adds	r1, r7, #4
 800af2a:	f107 0308 	add.w	r3, r7, #8
 800af2e:	4618      	mov	r0, r3
 800af30:	f7fe ff3c 	bl	8009dac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800af34:	6839      	ldr	r1, [r7, #0]
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	68ba      	ldr	r2, [r7, #8]
 800af3a:	9202      	str	r2, [sp, #8]
 800af3c:	9301      	str	r3, [sp, #4]
 800af3e:	2300      	movs	r3, #0
 800af40:	9300      	str	r3, [sp, #0]
 800af42:	2300      	movs	r3, #0
 800af44:	460a      	mov	r2, r1
 800af46:	4924      	ldr	r1, [pc, #144]	; (800afd8 <vTaskStartScheduler+0xc0>)
 800af48:	4824      	ldr	r0, [pc, #144]	; (800afdc <vTaskStartScheduler+0xc4>)
 800af4a:	f7ff fdf9 	bl	800ab40 <xTaskCreateStatic>
 800af4e:	4603      	mov	r3, r0
 800af50:	4a23      	ldr	r2, [pc, #140]	; (800afe0 <vTaskStartScheduler+0xc8>)
 800af52:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800af54:	4b22      	ldr	r3, [pc, #136]	; (800afe0 <vTaskStartScheduler+0xc8>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d002      	beq.n	800af62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800af5c:	2301      	movs	r3, #1
 800af5e:	617b      	str	r3, [r7, #20]
 800af60:	e001      	b.n	800af66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800af62:	2300      	movs	r3, #0
 800af64:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800af66:	697b      	ldr	r3, [r7, #20]
 800af68:	2b01      	cmp	r3, #1
 800af6a:	d102      	bne.n	800af72 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800af6c:	f000 fd44 	bl	800b9f8 <xTimerCreateTimerTask>
 800af70:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	2b01      	cmp	r3, #1
 800af76:	d11b      	bne.n	800afb0 <vTaskStartScheduler+0x98>
	__asm volatile
 800af78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af7c:	f383 8811 	msr	BASEPRI, r3
 800af80:	f3bf 8f6f 	isb	sy
 800af84:	f3bf 8f4f 	dsb	sy
 800af88:	613b      	str	r3, [r7, #16]
}
 800af8a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800af8c:	4b15      	ldr	r3, [pc, #84]	; (800afe4 <vTaskStartScheduler+0xcc>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	3354      	adds	r3, #84	; 0x54
 800af92:	4a15      	ldr	r2, [pc, #84]	; (800afe8 <vTaskStartScheduler+0xd0>)
 800af94:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800af96:	4b15      	ldr	r3, [pc, #84]	; (800afec <vTaskStartScheduler+0xd4>)
 800af98:	f04f 32ff 	mov.w	r2, #4294967295
 800af9c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800af9e:	4b14      	ldr	r3, [pc, #80]	; (800aff0 <vTaskStartScheduler+0xd8>)
 800afa0:	2201      	movs	r2, #1
 800afa2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800afa4:	4b13      	ldr	r3, [pc, #76]	; (800aff4 <vTaskStartScheduler+0xdc>)
 800afa6:	2200      	movs	r2, #0
 800afa8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800afaa:	f001 f901 	bl	800c1b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800afae:	e00e      	b.n	800afce <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afb6:	d10a      	bne.n	800afce <vTaskStartScheduler+0xb6>
	__asm volatile
 800afb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afbc:	f383 8811 	msr	BASEPRI, r3
 800afc0:	f3bf 8f6f 	isb	sy
 800afc4:	f3bf 8f4f 	dsb	sy
 800afc8:	60fb      	str	r3, [r7, #12]
}
 800afca:	bf00      	nop
 800afcc:	e7fe      	b.n	800afcc <vTaskStartScheduler+0xb4>
}
 800afce:	bf00      	nop
 800afd0:	3718      	adds	r7, #24
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}
 800afd6:	bf00      	nop
 800afd8:	0800da58 	.word	0x0800da58
 800afdc:	0800b665 	.word	0x0800b665
 800afe0:	20000f3c 	.word	0x20000f3c
 800afe4:	20000a44 	.word	0x20000a44
 800afe8:	2000007c 	.word	0x2000007c
 800afec:	20000f38 	.word	0x20000f38
 800aff0:	20000f24 	.word	0x20000f24
 800aff4:	20000f1c 	.word	0x20000f1c

0800aff8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800aff8:	b480      	push	{r7}
 800affa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800affc:	4b04      	ldr	r3, [pc, #16]	; (800b010 <vTaskSuspendAll+0x18>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	3301      	adds	r3, #1
 800b002:	4a03      	ldr	r2, [pc, #12]	; (800b010 <vTaskSuspendAll+0x18>)
 800b004:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b006:	bf00      	nop
 800b008:	46bd      	mov	sp, r7
 800b00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00e:	4770      	bx	lr
 800b010:	20000f40 	.word	0x20000f40

0800b014 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b084      	sub	sp, #16
 800b018:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b01a:	2300      	movs	r3, #0
 800b01c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b01e:	2300      	movs	r3, #0
 800b020:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b022:	4b42      	ldr	r3, [pc, #264]	; (800b12c <xTaskResumeAll+0x118>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d10a      	bne.n	800b040 <xTaskResumeAll+0x2c>
	__asm volatile
 800b02a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b02e:	f383 8811 	msr	BASEPRI, r3
 800b032:	f3bf 8f6f 	isb	sy
 800b036:	f3bf 8f4f 	dsb	sy
 800b03a:	603b      	str	r3, [r7, #0]
}
 800b03c:	bf00      	nop
 800b03e:	e7fe      	b.n	800b03e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b040:	f001 f958 	bl	800c2f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b044:	4b39      	ldr	r3, [pc, #228]	; (800b12c <xTaskResumeAll+0x118>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	3b01      	subs	r3, #1
 800b04a:	4a38      	ldr	r2, [pc, #224]	; (800b12c <xTaskResumeAll+0x118>)
 800b04c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b04e:	4b37      	ldr	r3, [pc, #220]	; (800b12c <xTaskResumeAll+0x118>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d162      	bne.n	800b11c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b056:	4b36      	ldr	r3, [pc, #216]	; (800b130 <xTaskResumeAll+0x11c>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d05e      	beq.n	800b11c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b05e:	e02f      	b.n	800b0c0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b060:	4b34      	ldr	r3, [pc, #208]	; (800b134 <xTaskResumeAll+0x120>)
 800b062:	68db      	ldr	r3, [r3, #12]
 800b064:	68db      	ldr	r3, [r3, #12]
 800b066:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	3318      	adds	r3, #24
 800b06c:	4618      	mov	r0, r3
 800b06e:	f7fe ff5b 	bl	8009f28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	3304      	adds	r3, #4
 800b076:	4618      	mov	r0, r3
 800b078:	f7fe ff56 	bl	8009f28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b080:	4b2d      	ldr	r3, [pc, #180]	; (800b138 <xTaskResumeAll+0x124>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	429a      	cmp	r2, r3
 800b086:	d903      	bls.n	800b090 <xTaskResumeAll+0x7c>
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b08c:	4a2a      	ldr	r2, [pc, #168]	; (800b138 <xTaskResumeAll+0x124>)
 800b08e:	6013      	str	r3, [r2, #0]
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b094:	4613      	mov	r3, r2
 800b096:	009b      	lsls	r3, r3, #2
 800b098:	4413      	add	r3, r2
 800b09a:	009b      	lsls	r3, r3, #2
 800b09c:	4a27      	ldr	r2, [pc, #156]	; (800b13c <xTaskResumeAll+0x128>)
 800b09e:	441a      	add	r2, r3
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	3304      	adds	r3, #4
 800b0a4:	4619      	mov	r1, r3
 800b0a6:	4610      	mov	r0, r2
 800b0a8:	f7fe fee1 	bl	8009e6e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0b0:	4b23      	ldr	r3, [pc, #140]	; (800b140 <xTaskResumeAll+0x12c>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0b6:	429a      	cmp	r2, r3
 800b0b8:	d302      	bcc.n	800b0c0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b0ba:	4b22      	ldr	r3, [pc, #136]	; (800b144 <xTaskResumeAll+0x130>)
 800b0bc:	2201      	movs	r2, #1
 800b0be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b0c0:	4b1c      	ldr	r3, [pc, #112]	; (800b134 <xTaskResumeAll+0x120>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d1cb      	bne.n	800b060 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d001      	beq.n	800b0d2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b0ce:	f000 fb83 	bl	800b7d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b0d2:	4b1d      	ldr	r3, [pc, #116]	; (800b148 <xTaskResumeAll+0x134>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d010      	beq.n	800b100 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b0de:	f000 f86b 	bl	800b1b8 <xTaskIncrementTick>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d002      	beq.n	800b0ee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b0e8:	4b16      	ldr	r3, [pc, #88]	; (800b144 <xTaskResumeAll+0x130>)
 800b0ea:	2201      	movs	r2, #1
 800b0ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	3b01      	subs	r3, #1
 800b0f2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d1f1      	bne.n	800b0de <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b0fa:	4b13      	ldr	r3, [pc, #76]	; (800b148 <xTaskResumeAll+0x134>)
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b100:	4b10      	ldr	r3, [pc, #64]	; (800b144 <xTaskResumeAll+0x130>)
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d009      	beq.n	800b11c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b108:	2301      	movs	r3, #1
 800b10a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b10c:	4b0f      	ldr	r3, [pc, #60]	; (800b14c <xTaskResumeAll+0x138>)
 800b10e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b112:	601a      	str	r2, [r3, #0]
 800b114:	f3bf 8f4f 	dsb	sy
 800b118:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b11c:	f001 f91a 	bl	800c354 <vPortExitCritical>

	return xAlreadyYielded;
 800b120:	68bb      	ldr	r3, [r7, #8]
}
 800b122:	4618      	mov	r0, r3
 800b124:	3710      	adds	r7, #16
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}
 800b12a:	bf00      	nop
 800b12c:	20000f40 	.word	0x20000f40
 800b130:	20000f18 	.word	0x20000f18
 800b134:	20000ed8 	.word	0x20000ed8
 800b138:	20000f20 	.word	0x20000f20
 800b13c:	20000a48 	.word	0x20000a48
 800b140:	20000a44 	.word	0x20000a44
 800b144:	20000f2c 	.word	0x20000f2c
 800b148:	20000f28 	.word	0x20000f28
 800b14c:	e000ed04 	.word	0xe000ed04

0800b150 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b150:	b480      	push	{r7}
 800b152:	b083      	sub	sp, #12
 800b154:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b156:	4b05      	ldr	r3, [pc, #20]	; (800b16c <xTaskGetTickCount+0x1c>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b15c:	687b      	ldr	r3, [r7, #4]
}
 800b15e:	4618      	mov	r0, r3
 800b160:	370c      	adds	r7, #12
 800b162:	46bd      	mov	sp, r7
 800b164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b168:	4770      	bx	lr
 800b16a:	bf00      	nop
 800b16c:	20000f1c 	.word	0x20000f1c

0800b170 <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800b170:	b480      	push	{r7}
 800b172:	b085      	sub	sp, #20
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d102      	bne.n	800b184 <pcTaskGetName+0x14>
 800b17e:	4b0d      	ldr	r3, [pc, #52]	; (800b1b4 <pcTaskGetName+0x44>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	e000      	b.n	800b186 <pcTaskGetName+0x16>
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d10a      	bne.n	800b1a4 <pcTaskGetName+0x34>
	__asm volatile
 800b18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b192:	f383 8811 	msr	BASEPRI, r3
 800b196:	f3bf 8f6f 	isb	sy
 800b19a:	f3bf 8f4f 	dsb	sy
 800b19e:	60bb      	str	r3, [r7, #8]
}
 800b1a0:	bf00      	nop
 800b1a2:	e7fe      	b.n	800b1a2 <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	3334      	adds	r3, #52	; 0x34
}
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	3714      	adds	r7, #20
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b2:	4770      	bx	lr
 800b1b4:	20000a44 	.word	0x20000a44

0800b1b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b086      	sub	sp, #24
 800b1bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b1c2:	4b4f      	ldr	r3, [pc, #316]	; (800b300 <xTaskIncrementTick+0x148>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	f040 808f 	bne.w	800b2ea <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b1cc:	4b4d      	ldr	r3, [pc, #308]	; (800b304 <xTaskIncrementTick+0x14c>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	3301      	adds	r3, #1
 800b1d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b1d4:	4a4b      	ldr	r2, [pc, #300]	; (800b304 <xTaskIncrementTick+0x14c>)
 800b1d6:	693b      	ldr	r3, [r7, #16]
 800b1d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b1da:	693b      	ldr	r3, [r7, #16]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d120      	bne.n	800b222 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b1e0:	4b49      	ldr	r3, [pc, #292]	; (800b308 <xTaskIncrementTick+0x150>)
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d00a      	beq.n	800b200 <xTaskIncrementTick+0x48>
	__asm volatile
 800b1ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ee:	f383 8811 	msr	BASEPRI, r3
 800b1f2:	f3bf 8f6f 	isb	sy
 800b1f6:	f3bf 8f4f 	dsb	sy
 800b1fa:	603b      	str	r3, [r7, #0]
}
 800b1fc:	bf00      	nop
 800b1fe:	e7fe      	b.n	800b1fe <xTaskIncrementTick+0x46>
 800b200:	4b41      	ldr	r3, [pc, #260]	; (800b308 <xTaskIncrementTick+0x150>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	60fb      	str	r3, [r7, #12]
 800b206:	4b41      	ldr	r3, [pc, #260]	; (800b30c <xTaskIncrementTick+0x154>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4a3f      	ldr	r2, [pc, #252]	; (800b308 <xTaskIncrementTick+0x150>)
 800b20c:	6013      	str	r3, [r2, #0]
 800b20e:	4a3f      	ldr	r2, [pc, #252]	; (800b30c <xTaskIncrementTick+0x154>)
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	6013      	str	r3, [r2, #0]
 800b214:	4b3e      	ldr	r3, [pc, #248]	; (800b310 <xTaskIncrementTick+0x158>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	3301      	adds	r3, #1
 800b21a:	4a3d      	ldr	r2, [pc, #244]	; (800b310 <xTaskIncrementTick+0x158>)
 800b21c:	6013      	str	r3, [r2, #0]
 800b21e:	f000 fadb 	bl	800b7d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b222:	4b3c      	ldr	r3, [pc, #240]	; (800b314 <xTaskIncrementTick+0x15c>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	693a      	ldr	r2, [r7, #16]
 800b228:	429a      	cmp	r2, r3
 800b22a:	d349      	bcc.n	800b2c0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b22c:	4b36      	ldr	r3, [pc, #216]	; (800b308 <xTaskIncrementTick+0x150>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d104      	bne.n	800b240 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b236:	4b37      	ldr	r3, [pc, #220]	; (800b314 <xTaskIncrementTick+0x15c>)
 800b238:	f04f 32ff 	mov.w	r2, #4294967295
 800b23c:	601a      	str	r2, [r3, #0]
					break;
 800b23e:	e03f      	b.n	800b2c0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b240:	4b31      	ldr	r3, [pc, #196]	; (800b308 <xTaskIncrementTick+0x150>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	68db      	ldr	r3, [r3, #12]
 800b246:	68db      	ldr	r3, [r3, #12]
 800b248:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	685b      	ldr	r3, [r3, #4]
 800b24e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b250:	693a      	ldr	r2, [r7, #16]
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	429a      	cmp	r2, r3
 800b256:	d203      	bcs.n	800b260 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b258:	4a2e      	ldr	r2, [pc, #184]	; (800b314 <xTaskIncrementTick+0x15c>)
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b25e:	e02f      	b.n	800b2c0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	3304      	adds	r3, #4
 800b264:	4618      	mov	r0, r3
 800b266:	f7fe fe5f 	bl	8009f28 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d004      	beq.n	800b27c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b272:	68bb      	ldr	r3, [r7, #8]
 800b274:	3318      	adds	r3, #24
 800b276:	4618      	mov	r0, r3
 800b278:	f7fe fe56 	bl	8009f28 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b280:	4b25      	ldr	r3, [pc, #148]	; (800b318 <xTaskIncrementTick+0x160>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	429a      	cmp	r2, r3
 800b286:	d903      	bls.n	800b290 <xTaskIncrementTick+0xd8>
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b28c:	4a22      	ldr	r2, [pc, #136]	; (800b318 <xTaskIncrementTick+0x160>)
 800b28e:	6013      	str	r3, [r2, #0]
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b294:	4613      	mov	r3, r2
 800b296:	009b      	lsls	r3, r3, #2
 800b298:	4413      	add	r3, r2
 800b29a:	009b      	lsls	r3, r3, #2
 800b29c:	4a1f      	ldr	r2, [pc, #124]	; (800b31c <xTaskIncrementTick+0x164>)
 800b29e:	441a      	add	r2, r3
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	3304      	adds	r3, #4
 800b2a4:	4619      	mov	r1, r3
 800b2a6:	4610      	mov	r0, r2
 800b2a8:	f7fe fde1 	bl	8009e6e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2b0:	4b1b      	ldr	r3, [pc, #108]	; (800b320 <xTaskIncrementTick+0x168>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2b6:	429a      	cmp	r2, r3
 800b2b8:	d3b8      	bcc.n	800b22c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b2ba:	2301      	movs	r3, #1
 800b2bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b2be:	e7b5      	b.n	800b22c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b2c0:	4b17      	ldr	r3, [pc, #92]	; (800b320 <xTaskIncrementTick+0x168>)
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2c6:	4915      	ldr	r1, [pc, #84]	; (800b31c <xTaskIncrementTick+0x164>)
 800b2c8:	4613      	mov	r3, r2
 800b2ca:	009b      	lsls	r3, r3, #2
 800b2cc:	4413      	add	r3, r2
 800b2ce:	009b      	lsls	r3, r3, #2
 800b2d0:	440b      	add	r3, r1
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	2b01      	cmp	r3, #1
 800b2d6:	d901      	bls.n	800b2dc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b2d8:	2301      	movs	r3, #1
 800b2da:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b2dc:	4b11      	ldr	r3, [pc, #68]	; (800b324 <xTaskIncrementTick+0x16c>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d007      	beq.n	800b2f4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	617b      	str	r3, [r7, #20]
 800b2e8:	e004      	b.n	800b2f4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b2ea:	4b0f      	ldr	r3, [pc, #60]	; (800b328 <xTaskIncrementTick+0x170>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	3301      	adds	r3, #1
 800b2f0:	4a0d      	ldr	r2, [pc, #52]	; (800b328 <xTaskIncrementTick+0x170>)
 800b2f2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b2f4:	697b      	ldr	r3, [r7, #20]
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3718      	adds	r7, #24
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}
 800b2fe:	bf00      	nop
 800b300:	20000f40 	.word	0x20000f40
 800b304:	20000f1c 	.word	0x20000f1c
 800b308:	20000ed0 	.word	0x20000ed0
 800b30c:	20000ed4 	.word	0x20000ed4
 800b310:	20000f30 	.word	0x20000f30
 800b314:	20000f38 	.word	0x20000f38
 800b318:	20000f20 	.word	0x20000f20
 800b31c:	20000a48 	.word	0x20000a48
 800b320:	20000a44 	.word	0x20000a44
 800b324:	20000f2c 	.word	0x20000f2c
 800b328:	20000f28 	.word	0x20000f28

0800b32c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b32c:	b480      	push	{r7}
 800b32e:	b085      	sub	sp, #20
 800b330:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b332:	4b2a      	ldr	r3, [pc, #168]	; (800b3dc <vTaskSwitchContext+0xb0>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d003      	beq.n	800b342 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b33a:	4b29      	ldr	r3, [pc, #164]	; (800b3e0 <vTaskSwitchContext+0xb4>)
 800b33c:	2201      	movs	r2, #1
 800b33e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b340:	e046      	b.n	800b3d0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b342:	4b27      	ldr	r3, [pc, #156]	; (800b3e0 <vTaskSwitchContext+0xb4>)
 800b344:	2200      	movs	r2, #0
 800b346:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b348:	4b26      	ldr	r3, [pc, #152]	; (800b3e4 <vTaskSwitchContext+0xb8>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	60fb      	str	r3, [r7, #12]
 800b34e:	e010      	b.n	800b372 <vTaskSwitchContext+0x46>
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d10a      	bne.n	800b36c <vTaskSwitchContext+0x40>
	__asm volatile
 800b356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b35a:	f383 8811 	msr	BASEPRI, r3
 800b35e:	f3bf 8f6f 	isb	sy
 800b362:	f3bf 8f4f 	dsb	sy
 800b366:	607b      	str	r3, [r7, #4]
}
 800b368:	bf00      	nop
 800b36a:	e7fe      	b.n	800b36a <vTaskSwitchContext+0x3e>
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	3b01      	subs	r3, #1
 800b370:	60fb      	str	r3, [r7, #12]
 800b372:	491d      	ldr	r1, [pc, #116]	; (800b3e8 <vTaskSwitchContext+0xbc>)
 800b374:	68fa      	ldr	r2, [r7, #12]
 800b376:	4613      	mov	r3, r2
 800b378:	009b      	lsls	r3, r3, #2
 800b37a:	4413      	add	r3, r2
 800b37c:	009b      	lsls	r3, r3, #2
 800b37e:	440b      	add	r3, r1
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d0e4      	beq.n	800b350 <vTaskSwitchContext+0x24>
 800b386:	68fa      	ldr	r2, [r7, #12]
 800b388:	4613      	mov	r3, r2
 800b38a:	009b      	lsls	r3, r3, #2
 800b38c:	4413      	add	r3, r2
 800b38e:	009b      	lsls	r3, r3, #2
 800b390:	4a15      	ldr	r2, [pc, #84]	; (800b3e8 <vTaskSwitchContext+0xbc>)
 800b392:	4413      	add	r3, r2
 800b394:	60bb      	str	r3, [r7, #8]
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	685b      	ldr	r3, [r3, #4]
 800b39a:	685a      	ldr	r2, [r3, #4]
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	605a      	str	r2, [r3, #4]
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	685a      	ldr	r2, [r3, #4]
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	3308      	adds	r3, #8
 800b3a8:	429a      	cmp	r2, r3
 800b3aa:	d104      	bne.n	800b3b6 <vTaskSwitchContext+0x8a>
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	685b      	ldr	r3, [r3, #4]
 800b3b0:	685a      	ldr	r2, [r3, #4]
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	605a      	str	r2, [r3, #4]
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	685b      	ldr	r3, [r3, #4]
 800b3ba:	68db      	ldr	r3, [r3, #12]
 800b3bc:	4a0b      	ldr	r2, [pc, #44]	; (800b3ec <vTaskSwitchContext+0xc0>)
 800b3be:	6013      	str	r3, [r2, #0]
 800b3c0:	4a08      	ldr	r2, [pc, #32]	; (800b3e4 <vTaskSwitchContext+0xb8>)
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b3c6:	4b09      	ldr	r3, [pc, #36]	; (800b3ec <vTaskSwitchContext+0xc0>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	3354      	adds	r3, #84	; 0x54
 800b3cc:	4a08      	ldr	r2, [pc, #32]	; (800b3f0 <vTaskSwitchContext+0xc4>)
 800b3ce:	6013      	str	r3, [r2, #0]
}
 800b3d0:	bf00      	nop
 800b3d2:	3714      	adds	r7, #20
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3da:	4770      	bx	lr
 800b3dc:	20000f40 	.word	0x20000f40
 800b3e0:	20000f2c 	.word	0x20000f2c
 800b3e4:	20000f20 	.word	0x20000f20
 800b3e8:	20000a48 	.word	0x20000a48
 800b3ec:	20000a44 	.word	0x20000a44
 800b3f0:	2000007c 	.word	0x2000007c

0800b3f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b084      	sub	sp, #16
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
 800b3fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d10a      	bne.n	800b41a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b404:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b408:	f383 8811 	msr	BASEPRI, r3
 800b40c:	f3bf 8f6f 	isb	sy
 800b410:	f3bf 8f4f 	dsb	sy
 800b414:	60fb      	str	r3, [r7, #12]
}
 800b416:	bf00      	nop
 800b418:	e7fe      	b.n	800b418 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b41a:	4b07      	ldr	r3, [pc, #28]	; (800b438 <vTaskPlaceOnEventList+0x44>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	3318      	adds	r3, #24
 800b420:	4619      	mov	r1, r3
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f7fe fd47 	bl	8009eb6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b428:	2101      	movs	r1, #1
 800b42a:	6838      	ldr	r0, [r7, #0]
 800b42c:	f000 fa90 	bl	800b950 <prvAddCurrentTaskToDelayedList>
}
 800b430:	bf00      	nop
 800b432:	3710      	adds	r7, #16
 800b434:	46bd      	mov	sp, r7
 800b436:	bd80      	pop	{r7, pc}
 800b438:	20000a44 	.word	0x20000a44

0800b43c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b086      	sub	sp, #24
 800b440:	af00      	add	r7, sp, #0
 800b442:	60f8      	str	r0, [r7, #12]
 800b444:	60b9      	str	r1, [r7, #8]
 800b446:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d10a      	bne.n	800b464 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b452:	f383 8811 	msr	BASEPRI, r3
 800b456:	f3bf 8f6f 	isb	sy
 800b45a:	f3bf 8f4f 	dsb	sy
 800b45e:	617b      	str	r3, [r7, #20]
}
 800b460:	bf00      	nop
 800b462:	e7fe      	b.n	800b462 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b464:	4b0a      	ldr	r3, [pc, #40]	; (800b490 <vTaskPlaceOnEventListRestricted+0x54>)
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	3318      	adds	r3, #24
 800b46a:	4619      	mov	r1, r3
 800b46c:	68f8      	ldr	r0, [r7, #12]
 800b46e:	f7fe fcfe 	bl	8009e6e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d002      	beq.n	800b47e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b478:	f04f 33ff 	mov.w	r3, #4294967295
 800b47c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b47e:	6879      	ldr	r1, [r7, #4]
 800b480:	68b8      	ldr	r0, [r7, #8]
 800b482:	f000 fa65 	bl	800b950 <prvAddCurrentTaskToDelayedList>
	}
 800b486:	bf00      	nop
 800b488:	3718      	adds	r7, #24
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}
 800b48e:	bf00      	nop
 800b490:	20000a44 	.word	0x20000a44

0800b494 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b086      	sub	sp, #24
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	68db      	ldr	r3, [r3, #12]
 800b4a0:	68db      	ldr	r3, [r3, #12]
 800b4a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b4a4:	693b      	ldr	r3, [r7, #16]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d10a      	bne.n	800b4c0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ae:	f383 8811 	msr	BASEPRI, r3
 800b4b2:	f3bf 8f6f 	isb	sy
 800b4b6:	f3bf 8f4f 	dsb	sy
 800b4ba:	60fb      	str	r3, [r7, #12]
}
 800b4bc:	bf00      	nop
 800b4be:	e7fe      	b.n	800b4be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	3318      	adds	r3, #24
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	f7fe fd2f 	bl	8009f28 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b4ca:	4b1e      	ldr	r3, [pc, #120]	; (800b544 <xTaskRemoveFromEventList+0xb0>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d11d      	bne.n	800b50e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b4d2:	693b      	ldr	r3, [r7, #16]
 800b4d4:	3304      	adds	r3, #4
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f7fe fd26 	bl	8009f28 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b4dc:	693b      	ldr	r3, [r7, #16]
 800b4de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4e0:	4b19      	ldr	r3, [pc, #100]	; (800b548 <xTaskRemoveFromEventList+0xb4>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	429a      	cmp	r2, r3
 800b4e6:	d903      	bls.n	800b4f0 <xTaskRemoveFromEventList+0x5c>
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4ec:	4a16      	ldr	r2, [pc, #88]	; (800b548 <xTaskRemoveFromEventList+0xb4>)
 800b4ee:	6013      	str	r3, [r2, #0]
 800b4f0:	693b      	ldr	r3, [r7, #16]
 800b4f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4f4:	4613      	mov	r3, r2
 800b4f6:	009b      	lsls	r3, r3, #2
 800b4f8:	4413      	add	r3, r2
 800b4fa:	009b      	lsls	r3, r3, #2
 800b4fc:	4a13      	ldr	r2, [pc, #76]	; (800b54c <xTaskRemoveFromEventList+0xb8>)
 800b4fe:	441a      	add	r2, r3
 800b500:	693b      	ldr	r3, [r7, #16]
 800b502:	3304      	adds	r3, #4
 800b504:	4619      	mov	r1, r3
 800b506:	4610      	mov	r0, r2
 800b508:	f7fe fcb1 	bl	8009e6e <vListInsertEnd>
 800b50c:	e005      	b.n	800b51a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b50e:	693b      	ldr	r3, [r7, #16]
 800b510:	3318      	adds	r3, #24
 800b512:	4619      	mov	r1, r3
 800b514:	480e      	ldr	r0, [pc, #56]	; (800b550 <xTaskRemoveFromEventList+0xbc>)
 800b516:	f7fe fcaa 	bl	8009e6e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b51e:	4b0d      	ldr	r3, [pc, #52]	; (800b554 <xTaskRemoveFromEventList+0xc0>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b524:	429a      	cmp	r2, r3
 800b526:	d905      	bls.n	800b534 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b528:	2301      	movs	r3, #1
 800b52a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b52c:	4b0a      	ldr	r3, [pc, #40]	; (800b558 <xTaskRemoveFromEventList+0xc4>)
 800b52e:	2201      	movs	r2, #1
 800b530:	601a      	str	r2, [r3, #0]
 800b532:	e001      	b.n	800b538 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b534:	2300      	movs	r3, #0
 800b536:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b538:	697b      	ldr	r3, [r7, #20]
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3718      	adds	r7, #24
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}
 800b542:	bf00      	nop
 800b544:	20000f40 	.word	0x20000f40
 800b548:	20000f20 	.word	0x20000f20
 800b54c:	20000a48 	.word	0x20000a48
 800b550:	20000ed8 	.word	0x20000ed8
 800b554:	20000a44 	.word	0x20000a44
 800b558:	20000f2c 	.word	0x20000f2c

0800b55c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b55c:	b480      	push	{r7}
 800b55e:	b083      	sub	sp, #12
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b564:	4b06      	ldr	r3, [pc, #24]	; (800b580 <vTaskInternalSetTimeOutState+0x24>)
 800b566:	681a      	ldr	r2, [r3, #0]
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b56c:	4b05      	ldr	r3, [pc, #20]	; (800b584 <vTaskInternalSetTimeOutState+0x28>)
 800b56e:	681a      	ldr	r2, [r3, #0]
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	605a      	str	r2, [r3, #4]
}
 800b574:	bf00      	nop
 800b576:	370c      	adds	r7, #12
 800b578:	46bd      	mov	sp, r7
 800b57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57e:	4770      	bx	lr
 800b580:	20000f30 	.word	0x20000f30
 800b584:	20000f1c 	.word	0x20000f1c

0800b588 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b088      	sub	sp, #32
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
 800b590:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d10a      	bne.n	800b5ae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b59c:	f383 8811 	msr	BASEPRI, r3
 800b5a0:	f3bf 8f6f 	isb	sy
 800b5a4:	f3bf 8f4f 	dsb	sy
 800b5a8:	613b      	str	r3, [r7, #16]
}
 800b5aa:	bf00      	nop
 800b5ac:	e7fe      	b.n	800b5ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d10a      	bne.n	800b5ca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b8:	f383 8811 	msr	BASEPRI, r3
 800b5bc:	f3bf 8f6f 	isb	sy
 800b5c0:	f3bf 8f4f 	dsb	sy
 800b5c4:	60fb      	str	r3, [r7, #12]
}
 800b5c6:	bf00      	nop
 800b5c8:	e7fe      	b.n	800b5c8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b5ca:	f000 fe93 	bl	800c2f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b5ce:	4b1d      	ldr	r3, [pc, #116]	; (800b644 <xTaskCheckForTimeOut+0xbc>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	685b      	ldr	r3, [r3, #4]
 800b5d8:	69ba      	ldr	r2, [r7, #24]
 800b5da:	1ad3      	subs	r3, r2, r3
 800b5dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5e6:	d102      	bne.n	800b5ee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	61fb      	str	r3, [r7, #28]
 800b5ec:	e023      	b.n	800b636 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681a      	ldr	r2, [r3, #0]
 800b5f2:	4b15      	ldr	r3, [pc, #84]	; (800b648 <xTaskCheckForTimeOut+0xc0>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	429a      	cmp	r2, r3
 800b5f8:	d007      	beq.n	800b60a <xTaskCheckForTimeOut+0x82>
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	685b      	ldr	r3, [r3, #4]
 800b5fe:	69ba      	ldr	r2, [r7, #24]
 800b600:	429a      	cmp	r2, r3
 800b602:	d302      	bcc.n	800b60a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b604:	2301      	movs	r3, #1
 800b606:	61fb      	str	r3, [r7, #28]
 800b608:	e015      	b.n	800b636 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	697a      	ldr	r2, [r7, #20]
 800b610:	429a      	cmp	r2, r3
 800b612:	d20b      	bcs.n	800b62c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	681a      	ldr	r2, [r3, #0]
 800b618:	697b      	ldr	r3, [r7, #20]
 800b61a:	1ad2      	subs	r2, r2, r3
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f7ff ff9b 	bl	800b55c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b626:	2300      	movs	r3, #0
 800b628:	61fb      	str	r3, [r7, #28]
 800b62a:	e004      	b.n	800b636 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	2200      	movs	r2, #0
 800b630:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b632:	2301      	movs	r3, #1
 800b634:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b636:	f000 fe8d 	bl	800c354 <vPortExitCritical>

	return xReturn;
 800b63a:	69fb      	ldr	r3, [r7, #28]
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	3720      	adds	r7, #32
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}
 800b644:	20000f1c 	.word	0x20000f1c
 800b648:	20000f30 	.word	0x20000f30

0800b64c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b64c:	b480      	push	{r7}
 800b64e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b650:	4b03      	ldr	r3, [pc, #12]	; (800b660 <vTaskMissedYield+0x14>)
 800b652:	2201      	movs	r2, #1
 800b654:	601a      	str	r2, [r3, #0]
}
 800b656:	bf00      	nop
 800b658:	46bd      	mov	sp, r7
 800b65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65e:	4770      	bx	lr
 800b660:	20000f2c 	.word	0x20000f2c

0800b664 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b082      	sub	sp, #8
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b66c:	f000 f852 	bl	800b714 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b670:	4b06      	ldr	r3, [pc, #24]	; (800b68c <prvIdleTask+0x28>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	2b01      	cmp	r3, #1
 800b676:	d9f9      	bls.n	800b66c <prvIdleTask+0x8>
			{
				taskYIELD();
 800b678:	4b05      	ldr	r3, [pc, #20]	; (800b690 <prvIdleTask+0x2c>)
 800b67a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b67e:	601a      	str	r2, [r3, #0]
 800b680:	f3bf 8f4f 	dsb	sy
 800b684:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b688:	e7f0      	b.n	800b66c <prvIdleTask+0x8>
 800b68a:	bf00      	nop
 800b68c:	20000a48 	.word	0x20000a48
 800b690:	e000ed04 	.word	0xe000ed04

0800b694 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b082      	sub	sp, #8
 800b698:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b69a:	2300      	movs	r3, #0
 800b69c:	607b      	str	r3, [r7, #4]
 800b69e:	e00c      	b.n	800b6ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b6a0:	687a      	ldr	r2, [r7, #4]
 800b6a2:	4613      	mov	r3, r2
 800b6a4:	009b      	lsls	r3, r3, #2
 800b6a6:	4413      	add	r3, r2
 800b6a8:	009b      	lsls	r3, r3, #2
 800b6aa:	4a12      	ldr	r2, [pc, #72]	; (800b6f4 <prvInitialiseTaskLists+0x60>)
 800b6ac:	4413      	add	r3, r2
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f7fe fbb0 	bl	8009e14 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	3301      	adds	r3, #1
 800b6b8:	607b      	str	r3, [r7, #4]
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2b37      	cmp	r3, #55	; 0x37
 800b6be:	d9ef      	bls.n	800b6a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b6c0:	480d      	ldr	r0, [pc, #52]	; (800b6f8 <prvInitialiseTaskLists+0x64>)
 800b6c2:	f7fe fba7 	bl	8009e14 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b6c6:	480d      	ldr	r0, [pc, #52]	; (800b6fc <prvInitialiseTaskLists+0x68>)
 800b6c8:	f7fe fba4 	bl	8009e14 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b6cc:	480c      	ldr	r0, [pc, #48]	; (800b700 <prvInitialiseTaskLists+0x6c>)
 800b6ce:	f7fe fba1 	bl	8009e14 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b6d2:	480c      	ldr	r0, [pc, #48]	; (800b704 <prvInitialiseTaskLists+0x70>)
 800b6d4:	f7fe fb9e 	bl	8009e14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b6d8:	480b      	ldr	r0, [pc, #44]	; (800b708 <prvInitialiseTaskLists+0x74>)
 800b6da:	f7fe fb9b 	bl	8009e14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b6de:	4b0b      	ldr	r3, [pc, #44]	; (800b70c <prvInitialiseTaskLists+0x78>)
 800b6e0:	4a05      	ldr	r2, [pc, #20]	; (800b6f8 <prvInitialiseTaskLists+0x64>)
 800b6e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b6e4:	4b0a      	ldr	r3, [pc, #40]	; (800b710 <prvInitialiseTaskLists+0x7c>)
 800b6e6:	4a05      	ldr	r2, [pc, #20]	; (800b6fc <prvInitialiseTaskLists+0x68>)
 800b6e8:	601a      	str	r2, [r3, #0]
}
 800b6ea:	bf00      	nop
 800b6ec:	3708      	adds	r7, #8
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}
 800b6f2:	bf00      	nop
 800b6f4:	20000a48 	.word	0x20000a48
 800b6f8:	20000ea8 	.word	0x20000ea8
 800b6fc:	20000ebc 	.word	0x20000ebc
 800b700:	20000ed8 	.word	0x20000ed8
 800b704:	20000eec 	.word	0x20000eec
 800b708:	20000f04 	.word	0x20000f04
 800b70c:	20000ed0 	.word	0x20000ed0
 800b710:	20000ed4 	.word	0x20000ed4

0800b714 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b082      	sub	sp, #8
 800b718:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b71a:	e019      	b.n	800b750 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b71c:	f000 fdea 	bl	800c2f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b720:	4b10      	ldr	r3, [pc, #64]	; (800b764 <prvCheckTasksWaitingTermination+0x50>)
 800b722:	68db      	ldr	r3, [r3, #12]
 800b724:	68db      	ldr	r3, [r3, #12]
 800b726:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	3304      	adds	r3, #4
 800b72c:	4618      	mov	r0, r3
 800b72e:	f7fe fbfb 	bl	8009f28 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b732:	4b0d      	ldr	r3, [pc, #52]	; (800b768 <prvCheckTasksWaitingTermination+0x54>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	3b01      	subs	r3, #1
 800b738:	4a0b      	ldr	r2, [pc, #44]	; (800b768 <prvCheckTasksWaitingTermination+0x54>)
 800b73a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b73c:	4b0b      	ldr	r3, [pc, #44]	; (800b76c <prvCheckTasksWaitingTermination+0x58>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	3b01      	subs	r3, #1
 800b742:	4a0a      	ldr	r2, [pc, #40]	; (800b76c <prvCheckTasksWaitingTermination+0x58>)
 800b744:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b746:	f000 fe05 	bl	800c354 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f000 f810 	bl	800b770 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b750:	4b06      	ldr	r3, [pc, #24]	; (800b76c <prvCheckTasksWaitingTermination+0x58>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d1e1      	bne.n	800b71c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b758:	bf00      	nop
 800b75a:	bf00      	nop
 800b75c:	3708      	adds	r7, #8
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}
 800b762:	bf00      	nop
 800b764:	20000eec 	.word	0x20000eec
 800b768:	20000f18 	.word	0x20000f18
 800b76c:	20000f00 	.word	0x20000f00

0800b770 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b770:	b580      	push	{r7, lr}
 800b772:	b084      	sub	sp, #16
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	3354      	adds	r3, #84	; 0x54
 800b77c:	4618      	mov	r0, r3
 800b77e:	f001 fcd3 	bl	800d128 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d108      	bne.n	800b79e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b790:	4618      	mov	r0, r3
 800b792:	f000 ff9d 	bl	800c6d0 <vPortFree>
				vPortFree( pxTCB );
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f000 ff9a 	bl	800c6d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b79c:	e018      	b.n	800b7d0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b7a4:	2b01      	cmp	r3, #1
 800b7a6:	d103      	bne.n	800b7b0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f000 ff91 	bl	800c6d0 <vPortFree>
	}
 800b7ae:	e00f      	b.n	800b7d0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b7b6:	2b02      	cmp	r3, #2
 800b7b8:	d00a      	beq.n	800b7d0 <prvDeleteTCB+0x60>
	__asm volatile
 800b7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7be:	f383 8811 	msr	BASEPRI, r3
 800b7c2:	f3bf 8f6f 	isb	sy
 800b7c6:	f3bf 8f4f 	dsb	sy
 800b7ca:	60fb      	str	r3, [r7, #12]
}
 800b7cc:	bf00      	nop
 800b7ce:	e7fe      	b.n	800b7ce <prvDeleteTCB+0x5e>
	}
 800b7d0:	bf00      	nop
 800b7d2:	3710      	adds	r7, #16
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}

0800b7d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b7d8:	b480      	push	{r7}
 800b7da:	b083      	sub	sp, #12
 800b7dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b7de:	4b0c      	ldr	r3, [pc, #48]	; (800b810 <prvResetNextTaskUnblockTime+0x38>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d104      	bne.n	800b7f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b7e8:	4b0a      	ldr	r3, [pc, #40]	; (800b814 <prvResetNextTaskUnblockTime+0x3c>)
 800b7ea:	f04f 32ff 	mov.w	r2, #4294967295
 800b7ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b7f0:	e008      	b.n	800b804 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7f2:	4b07      	ldr	r3, [pc, #28]	; (800b810 <prvResetNextTaskUnblockTime+0x38>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	68db      	ldr	r3, [r3, #12]
 800b7f8:	68db      	ldr	r3, [r3, #12]
 800b7fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	685b      	ldr	r3, [r3, #4]
 800b800:	4a04      	ldr	r2, [pc, #16]	; (800b814 <prvResetNextTaskUnblockTime+0x3c>)
 800b802:	6013      	str	r3, [r2, #0]
}
 800b804:	bf00      	nop
 800b806:	370c      	adds	r7, #12
 800b808:	46bd      	mov	sp, r7
 800b80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80e:	4770      	bx	lr
 800b810:	20000ed0 	.word	0x20000ed0
 800b814:	20000f38 	.word	0x20000f38

0800b818 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800b818:	b480      	push	{r7}
 800b81a:	b083      	sub	sp, #12
 800b81c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800b81e:	4b05      	ldr	r3, [pc, #20]	; (800b834 <xTaskGetCurrentTaskHandle+0x1c>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	607b      	str	r3, [r7, #4]

		return xReturn;
 800b824:	687b      	ldr	r3, [r7, #4]
	}
 800b826:	4618      	mov	r0, r3
 800b828:	370c      	adds	r7, #12
 800b82a:	46bd      	mov	sp, r7
 800b82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b830:	4770      	bx	lr
 800b832:	bf00      	nop
 800b834:	20000a44 	.word	0x20000a44

0800b838 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b838:	b480      	push	{r7}
 800b83a:	b083      	sub	sp, #12
 800b83c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b83e:	4b0b      	ldr	r3, [pc, #44]	; (800b86c <xTaskGetSchedulerState+0x34>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d102      	bne.n	800b84c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b846:	2301      	movs	r3, #1
 800b848:	607b      	str	r3, [r7, #4]
 800b84a:	e008      	b.n	800b85e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b84c:	4b08      	ldr	r3, [pc, #32]	; (800b870 <xTaskGetSchedulerState+0x38>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d102      	bne.n	800b85a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b854:	2302      	movs	r3, #2
 800b856:	607b      	str	r3, [r7, #4]
 800b858:	e001      	b.n	800b85e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b85a:	2300      	movs	r3, #0
 800b85c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b85e:	687b      	ldr	r3, [r7, #4]
	}
 800b860:	4618      	mov	r0, r3
 800b862:	370c      	adds	r7, #12
 800b864:	46bd      	mov	sp, r7
 800b866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86a:	4770      	bx	lr
 800b86c:	20000f24 	.word	0x20000f24
 800b870:	20000f40 	.word	0x20000f40

0800b874 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b874:	b580      	push	{r7, lr}
 800b876:	b086      	sub	sp, #24
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b880:	2300      	movs	r3, #0
 800b882:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d056      	beq.n	800b938 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b88a:	4b2e      	ldr	r3, [pc, #184]	; (800b944 <xTaskPriorityDisinherit+0xd0>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	693a      	ldr	r2, [r7, #16]
 800b890:	429a      	cmp	r2, r3
 800b892:	d00a      	beq.n	800b8aa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b894:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b898:	f383 8811 	msr	BASEPRI, r3
 800b89c:	f3bf 8f6f 	isb	sy
 800b8a0:	f3bf 8f4f 	dsb	sy
 800b8a4:	60fb      	str	r3, [r7, #12]
}
 800b8a6:	bf00      	nop
 800b8a8:	e7fe      	b.n	800b8a8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b8aa:	693b      	ldr	r3, [r7, #16]
 800b8ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d10a      	bne.n	800b8c8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b8b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b6:	f383 8811 	msr	BASEPRI, r3
 800b8ba:	f3bf 8f6f 	isb	sy
 800b8be:	f3bf 8f4f 	dsb	sy
 800b8c2:	60bb      	str	r3, [r7, #8]
}
 800b8c4:	bf00      	nop
 800b8c6:	e7fe      	b.n	800b8c6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b8c8:	693b      	ldr	r3, [r7, #16]
 800b8ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8cc:	1e5a      	subs	r2, r3, #1
 800b8ce:	693b      	ldr	r3, [r7, #16]
 800b8d0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b8d2:	693b      	ldr	r3, [r7, #16]
 800b8d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8d6:	693b      	ldr	r3, [r7, #16]
 800b8d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	d02c      	beq.n	800b938 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d128      	bne.n	800b938 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	3304      	adds	r3, #4
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f7fe fb1c 	bl	8009f28 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b8f0:	693b      	ldr	r3, [r7, #16]
 800b8f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b8f4:	693b      	ldr	r3, [r7, #16]
 800b8f6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8fc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b900:	693b      	ldr	r3, [r7, #16]
 800b902:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b904:	693b      	ldr	r3, [r7, #16]
 800b906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b908:	4b0f      	ldr	r3, [pc, #60]	; (800b948 <xTaskPriorityDisinherit+0xd4>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	429a      	cmp	r2, r3
 800b90e:	d903      	bls.n	800b918 <xTaskPriorityDisinherit+0xa4>
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b914:	4a0c      	ldr	r2, [pc, #48]	; (800b948 <xTaskPriorityDisinherit+0xd4>)
 800b916:	6013      	str	r3, [r2, #0]
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b91c:	4613      	mov	r3, r2
 800b91e:	009b      	lsls	r3, r3, #2
 800b920:	4413      	add	r3, r2
 800b922:	009b      	lsls	r3, r3, #2
 800b924:	4a09      	ldr	r2, [pc, #36]	; (800b94c <xTaskPriorityDisinherit+0xd8>)
 800b926:	441a      	add	r2, r3
 800b928:	693b      	ldr	r3, [r7, #16]
 800b92a:	3304      	adds	r3, #4
 800b92c:	4619      	mov	r1, r3
 800b92e:	4610      	mov	r0, r2
 800b930:	f7fe fa9d 	bl	8009e6e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b934:	2301      	movs	r3, #1
 800b936:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b938:	697b      	ldr	r3, [r7, #20]
	}
 800b93a:	4618      	mov	r0, r3
 800b93c:	3718      	adds	r7, #24
 800b93e:	46bd      	mov	sp, r7
 800b940:	bd80      	pop	{r7, pc}
 800b942:	bf00      	nop
 800b944:	20000a44 	.word	0x20000a44
 800b948:	20000f20 	.word	0x20000f20
 800b94c:	20000a48 	.word	0x20000a48

0800b950 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b084      	sub	sp, #16
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
 800b958:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b95a:	4b21      	ldr	r3, [pc, #132]	; (800b9e0 <prvAddCurrentTaskToDelayedList+0x90>)
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b960:	4b20      	ldr	r3, [pc, #128]	; (800b9e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	3304      	adds	r3, #4
 800b966:	4618      	mov	r0, r3
 800b968:	f7fe fade 	bl	8009f28 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b972:	d10a      	bne.n	800b98a <prvAddCurrentTaskToDelayedList+0x3a>
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d007      	beq.n	800b98a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b97a:	4b1a      	ldr	r3, [pc, #104]	; (800b9e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	3304      	adds	r3, #4
 800b980:	4619      	mov	r1, r3
 800b982:	4819      	ldr	r0, [pc, #100]	; (800b9e8 <prvAddCurrentTaskToDelayedList+0x98>)
 800b984:	f7fe fa73 	bl	8009e6e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b988:	e026      	b.n	800b9d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b98a:	68fa      	ldr	r2, [r7, #12]
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	4413      	add	r3, r2
 800b990:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b992:	4b14      	ldr	r3, [pc, #80]	; (800b9e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	68ba      	ldr	r2, [r7, #8]
 800b998:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b99a:	68ba      	ldr	r2, [r7, #8]
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	429a      	cmp	r2, r3
 800b9a0:	d209      	bcs.n	800b9b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b9a2:	4b12      	ldr	r3, [pc, #72]	; (800b9ec <prvAddCurrentTaskToDelayedList+0x9c>)
 800b9a4:	681a      	ldr	r2, [r3, #0]
 800b9a6:	4b0f      	ldr	r3, [pc, #60]	; (800b9e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	3304      	adds	r3, #4
 800b9ac:	4619      	mov	r1, r3
 800b9ae:	4610      	mov	r0, r2
 800b9b0:	f7fe fa81 	bl	8009eb6 <vListInsert>
}
 800b9b4:	e010      	b.n	800b9d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b9b6:	4b0e      	ldr	r3, [pc, #56]	; (800b9f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b9b8:	681a      	ldr	r2, [r3, #0]
 800b9ba:	4b0a      	ldr	r3, [pc, #40]	; (800b9e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	3304      	adds	r3, #4
 800b9c0:	4619      	mov	r1, r3
 800b9c2:	4610      	mov	r0, r2
 800b9c4:	f7fe fa77 	bl	8009eb6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b9c8:	4b0a      	ldr	r3, [pc, #40]	; (800b9f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	68ba      	ldr	r2, [r7, #8]
 800b9ce:	429a      	cmp	r2, r3
 800b9d0:	d202      	bcs.n	800b9d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b9d2:	4a08      	ldr	r2, [pc, #32]	; (800b9f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b9d4:	68bb      	ldr	r3, [r7, #8]
 800b9d6:	6013      	str	r3, [r2, #0]
}
 800b9d8:	bf00      	nop
 800b9da:	3710      	adds	r7, #16
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}
 800b9e0:	20000f1c 	.word	0x20000f1c
 800b9e4:	20000a44 	.word	0x20000a44
 800b9e8:	20000f04 	.word	0x20000f04
 800b9ec:	20000ed4 	.word	0x20000ed4
 800b9f0:	20000ed0 	.word	0x20000ed0
 800b9f4:	20000f38 	.word	0x20000f38

0800b9f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b08a      	sub	sp, #40	; 0x28
 800b9fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ba02:	f000 fb07 	bl	800c014 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ba06:	4b1c      	ldr	r3, [pc, #112]	; (800ba78 <xTimerCreateTimerTask+0x80>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d021      	beq.n	800ba52 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ba12:	2300      	movs	r3, #0
 800ba14:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ba16:	1d3a      	adds	r2, r7, #4
 800ba18:	f107 0108 	add.w	r1, r7, #8
 800ba1c:	f107 030c 	add.w	r3, r7, #12
 800ba20:	4618      	mov	r0, r3
 800ba22:	f7fe f9dd 	bl	8009de0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ba26:	6879      	ldr	r1, [r7, #4]
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	68fa      	ldr	r2, [r7, #12]
 800ba2c:	9202      	str	r2, [sp, #8]
 800ba2e:	9301      	str	r3, [sp, #4]
 800ba30:	2302      	movs	r3, #2
 800ba32:	9300      	str	r3, [sp, #0]
 800ba34:	2300      	movs	r3, #0
 800ba36:	460a      	mov	r2, r1
 800ba38:	4910      	ldr	r1, [pc, #64]	; (800ba7c <xTimerCreateTimerTask+0x84>)
 800ba3a:	4811      	ldr	r0, [pc, #68]	; (800ba80 <xTimerCreateTimerTask+0x88>)
 800ba3c:	f7ff f880 	bl	800ab40 <xTaskCreateStatic>
 800ba40:	4603      	mov	r3, r0
 800ba42:	4a10      	ldr	r2, [pc, #64]	; (800ba84 <xTimerCreateTimerTask+0x8c>)
 800ba44:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ba46:	4b0f      	ldr	r3, [pc, #60]	; (800ba84 <xTimerCreateTimerTask+0x8c>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d001      	beq.n	800ba52 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ba4e:	2301      	movs	r3, #1
 800ba50:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ba52:	697b      	ldr	r3, [r7, #20]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d10a      	bne.n	800ba6e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ba58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba5c:	f383 8811 	msr	BASEPRI, r3
 800ba60:	f3bf 8f6f 	isb	sy
 800ba64:	f3bf 8f4f 	dsb	sy
 800ba68:	613b      	str	r3, [r7, #16]
}
 800ba6a:	bf00      	nop
 800ba6c:	e7fe      	b.n	800ba6c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ba6e:	697b      	ldr	r3, [r7, #20]
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	3718      	adds	r7, #24
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}
 800ba78:	20000f74 	.word	0x20000f74
 800ba7c:	0800da60 	.word	0x0800da60
 800ba80:	0800bbbd 	.word	0x0800bbbd
 800ba84:	20000f78 	.word	0x20000f78

0800ba88 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b08a      	sub	sp, #40	; 0x28
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	60f8      	str	r0, [r7, #12]
 800ba90:	60b9      	str	r1, [r7, #8]
 800ba92:	607a      	str	r2, [r7, #4]
 800ba94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ba96:	2300      	movs	r3, #0
 800ba98:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d10a      	bne.n	800bab6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800baa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa4:	f383 8811 	msr	BASEPRI, r3
 800baa8:	f3bf 8f6f 	isb	sy
 800baac:	f3bf 8f4f 	dsb	sy
 800bab0:	623b      	str	r3, [r7, #32]
}
 800bab2:	bf00      	nop
 800bab4:	e7fe      	b.n	800bab4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bab6:	4b1a      	ldr	r3, [pc, #104]	; (800bb20 <xTimerGenericCommand+0x98>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d02a      	beq.n	800bb14 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	2b05      	cmp	r3, #5
 800bace:	dc18      	bgt.n	800bb02 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bad0:	f7ff feb2 	bl	800b838 <xTaskGetSchedulerState>
 800bad4:	4603      	mov	r3, r0
 800bad6:	2b02      	cmp	r3, #2
 800bad8:	d109      	bne.n	800baee <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bada:	4b11      	ldr	r3, [pc, #68]	; (800bb20 <xTimerGenericCommand+0x98>)
 800badc:	6818      	ldr	r0, [r3, #0]
 800bade:	f107 0110 	add.w	r1, r7, #16
 800bae2:	2300      	movs	r3, #0
 800bae4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bae6:	f7fe fb87 	bl	800a1f8 <xQueueGenericSend>
 800baea:	6278      	str	r0, [r7, #36]	; 0x24
 800baec:	e012      	b.n	800bb14 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800baee:	4b0c      	ldr	r3, [pc, #48]	; (800bb20 <xTimerGenericCommand+0x98>)
 800baf0:	6818      	ldr	r0, [r3, #0]
 800baf2:	f107 0110 	add.w	r1, r7, #16
 800baf6:	2300      	movs	r3, #0
 800baf8:	2200      	movs	r2, #0
 800bafa:	f7fe fb7d 	bl	800a1f8 <xQueueGenericSend>
 800bafe:	6278      	str	r0, [r7, #36]	; 0x24
 800bb00:	e008      	b.n	800bb14 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bb02:	4b07      	ldr	r3, [pc, #28]	; (800bb20 <xTimerGenericCommand+0x98>)
 800bb04:	6818      	ldr	r0, [r3, #0]
 800bb06:	f107 0110 	add.w	r1, r7, #16
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	683a      	ldr	r2, [r7, #0]
 800bb0e:	f7fe fc71 	bl	800a3f4 <xQueueGenericSendFromISR>
 800bb12:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bb14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	3728      	adds	r7, #40	; 0x28
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bd80      	pop	{r7, pc}
 800bb1e:	bf00      	nop
 800bb20:	20000f74 	.word	0x20000f74

0800bb24 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b088      	sub	sp, #32
 800bb28:	af02      	add	r7, sp, #8
 800bb2a:	6078      	str	r0, [r7, #4]
 800bb2c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb2e:	4b22      	ldr	r3, [pc, #136]	; (800bbb8 <prvProcessExpiredTimer+0x94>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	68db      	ldr	r3, [r3, #12]
 800bb34:	68db      	ldr	r3, [r3, #12]
 800bb36:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bb38:	697b      	ldr	r3, [r7, #20]
 800bb3a:	3304      	adds	r3, #4
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	f7fe f9f3 	bl	8009f28 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb48:	f003 0304 	and.w	r3, r3, #4
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d022      	beq.n	800bb96 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bb50:	697b      	ldr	r3, [r7, #20]
 800bb52:	699a      	ldr	r2, [r3, #24]
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	18d1      	adds	r1, r2, r3
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	683a      	ldr	r2, [r7, #0]
 800bb5c:	6978      	ldr	r0, [r7, #20]
 800bb5e:	f000 f8d1 	bl	800bd04 <prvInsertTimerInActiveList>
 800bb62:	4603      	mov	r3, r0
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d01f      	beq.n	800bba8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bb68:	2300      	movs	r3, #0
 800bb6a:	9300      	str	r3, [sp, #0]
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	687a      	ldr	r2, [r7, #4]
 800bb70:	2100      	movs	r1, #0
 800bb72:	6978      	ldr	r0, [r7, #20]
 800bb74:	f7ff ff88 	bl	800ba88 <xTimerGenericCommand>
 800bb78:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bb7a:	693b      	ldr	r3, [r7, #16]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d113      	bne.n	800bba8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800bb80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb84:	f383 8811 	msr	BASEPRI, r3
 800bb88:	f3bf 8f6f 	isb	sy
 800bb8c:	f3bf 8f4f 	dsb	sy
 800bb90:	60fb      	str	r3, [r7, #12]
}
 800bb92:	bf00      	nop
 800bb94:	e7fe      	b.n	800bb94 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bb96:	697b      	ldr	r3, [r7, #20]
 800bb98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb9c:	f023 0301 	bic.w	r3, r3, #1
 800bba0:	b2da      	uxtb	r2, r3
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bba8:	697b      	ldr	r3, [r7, #20]
 800bbaa:	6a1b      	ldr	r3, [r3, #32]
 800bbac:	6978      	ldr	r0, [r7, #20]
 800bbae:	4798      	blx	r3
}
 800bbb0:	bf00      	nop
 800bbb2:	3718      	adds	r7, #24
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}
 800bbb8:	20000f6c 	.word	0x20000f6c

0800bbbc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b084      	sub	sp, #16
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bbc4:	f107 0308 	add.w	r3, r7, #8
 800bbc8:	4618      	mov	r0, r3
 800bbca:	f000 f857 	bl	800bc7c <prvGetNextExpireTime>
 800bbce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bbd0:	68bb      	ldr	r3, [r7, #8]
 800bbd2:	4619      	mov	r1, r3
 800bbd4:	68f8      	ldr	r0, [r7, #12]
 800bbd6:	f000 f803 	bl	800bbe0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bbda:	f000 f8d5 	bl	800bd88 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bbde:	e7f1      	b.n	800bbc4 <prvTimerTask+0x8>

0800bbe0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b084      	sub	sp, #16
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
 800bbe8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bbea:	f7ff fa05 	bl	800aff8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bbee:	f107 0308 	add.w	r3, r7, #8
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	f000 f866 	bl	800bcc4 <prvSampleTimeNow>
 800bbf8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bbfa:	68bb      	ldr	r3, [r7, #8]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d130      	bne.n	800bc62 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d10a      	bne.n	800bc1c <prvProcessTimerOrBlockTask+0x3c>
 800bc06:	687a      	ldr	r2, [r7, #4]
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d806      	bhi.n	800bc1c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bc0e:	f7ff fa01 	bl	800b014 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bc12:	68f9      	ldr	r1, [r7, #12]
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	f7ff ff85 	bl	800bb24 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bc1a:	e024      	b.n	800bc66 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d008      	beq.n	800bc34 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bc22:	4b13      	ldr	r3, [pc, #76]	; (800bc70 <prvProcessTimerOrBlockTask+0x90>)
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d101      	bne.n	800bc30 <prvProcessTimerOrBlockTask+0x50>
 800bc2c:	2301      	movs	r3, #1
 800bc2e:	e000      	b.n	800bc32 <prvProcessTimerOrBlockTask+0x52>
 800bc30:	2300      	movs	r3, #0
 800bc32:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bc34:	4b0f      	ldr	r3, [pc, #60]	; (800bc74 <prvProcessTimerOrBlockTask+0x94>)
 800bc36:	6818      	ldr	r0, [r3, #0]
 800bc38:	687a      	ldr	r2, [r7, #4]
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	1ad3      	subs	r3, r2, r3
 800bc3e:	683a      	ldr	r2, [r7, #0]
 800bc40:	4619      	mov	r1, r3
 800bc42:	f7fe ff49 	bl	800aad8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bc46:	f7ff f9e5 	bl	800b014 <xTaskResumeAll>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d10a      	bne.n	800bc66 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bc50:	4b09      	ldr	r3, [pc, #36]	; (800bc78 <prvProcessTimerOrBlockTask+0x98>)
 800bc52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc56:	601a      	str	r2, [r3, #0]
 800bc58:	f3bf 8f4f 	dsb	sy
 800bc5c:	f3bf 8f6f 	isb	sy
}
 800bc60:	e001      	b.n	800bc66 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bc62:	f7ff f9d7 	bl	800b014 <xTaskResumeAll>
}
 800bc66:	bf00      	nop
 800bc68:	3710      	adds	r7, #16
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}
 800bc6e:	bf00      	nop
 800bc70:	20000f70 	.word	0x20000f70
 800bc74:	20000f74 	.word	0x20000f74
 800bc78:	e000ed04 	.word	0xe000ed04

0800bc7c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	b085      	sub	sp, #20
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bc84:	4b0e      	ldr	r3, [pc, #56]	; (800bcc0 <prvGetNextExpireTime+0x44>)
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d101      	bne.n	800bc92 <prvGetNextExpireTime+0x16>
 800bc8e:	2201      	movs	r2, #1
 800bc90:	e000      	b.n	800bc94 <prvGetNextExpireTime+0x18>
 800bc92:	2200      	movs	r2, #0
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d105      	bne.n	800bcac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bca0:	4b07      	ldr	r3, [pc, #28]	; (800bcc0 <prvGetNextExpireTime+0x44>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	68db      	ldr	r3, [r3, #12]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	60fb      	str	r3, [r7, #12]
 800bcaa:	e001      	b.n	800bcb0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bcac:	2300      	movs	r3, #0
 800bcae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	3714      	adds	r7, #20
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbc:	4770      	bx	lr
 800bcbe:	bf00      	nop
 800bcc0:	20000f6c 	.word	0x20000f6c

0800bcc4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b084      	sub	sp, #16
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bccc:	f7ff fa40 	bl	800b150 <xTaskGetTickCount>
 800bcd0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bcd2:	4b0b      	ldr	r3, [pc, #44]	; (800bd00 <prvSampleTimeNow+0x3c>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	68fa      	ldr	r2, [r7, #12]
 800bcd8:	429a      	cmp	r2, r3
 800bcda:	d205      	bcs.n	800bce8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bcdc:	f000 f936 	bl	800bf4c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2201      	movs	r2, #1
 800bce4:	601a      	str	r2, [r3, #0]
 800bce6:	e002      	b.n	800bcee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2200      	movs	r2, #0
 800bcec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bcee:	4a04      	ldr	r2, [pc, #16]	; (800bd00 <prvSampleTimeNow+0x3c>)
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	3710      	adds	r7, #16
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}
 800bcfe:	bf00      	nop
 800bd00:	20000f7c 	.word	0x20000f7c

0800bd04 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b086      	sub	sp, #24
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	60f8      	str	r0, [r7, #12]
 800bd0c:	60b9      	str	r1, [r7, #8]
 800bd0e:	607a      	str	r2, [r7, #4]
 800bd10:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bd12:	2300      	movs	r3, #0
 800bd14:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	68ba      	ldr	r2, [r7, #8]
 800bd1a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	68fa      	ldr	r2, [r7, #12]
 800bd20:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bd22:	68ba      	ldr	r2, [r7, #8]
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	429a      	cmp	r2, r3
 800bd28:	d812      	bhi.n	800bd50 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd2a:	687a      	ldr	r2, [r7, #4]
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	1ad2      	subs	r2, r2, r3
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	699b      	ldr	r3, [r3, #24]
 800bd34:	429a      	cmp	r2, r3
 800bd36:	d302      	bcc.n	800bd3e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bd38:	2301      	movs	r3, #1
 800bd3a:	617b      	str	r3, [r7, #20]
 800bd3c:	e01b      	b.n	800bd76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bd3e:	4b10      	ldr	r3, [pc, #64]	; (800bd80 <prvInsertTimerInActiveList+0x7c>)
 800bd40:	681a      	ldr	r2, [r3, #0]
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	3304      	adds	r3, #4
 800bd46:	4619      	mov	r1, r3
 800bd48:	4610      	mov	r0, r2
 800bd4a:	f7fe f8b4 	bl	8009eb6 <vListInsert>
 800bd4e:	e012      	b.n	800bd76 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bd50:	687a      	ldr	r2, [r7, #4]
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	429a      	cmp	r2, r3
 800bd56:	d206      	bcs.n	800bd66 <prvInsertTimerInActiveList+0x62>
 800bd58:	68ba      	ldr	r2, [r7, #8]
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	d302      	bcc.n	800bd66 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bd60:	2301      	movs	r3, #1
 800bd62:	617b      	str	r3, [r7, #20]
 800bd64:	e007      	b.n	800bd76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bd66:	4b07      	ldr	r3, [pc, #28]	; (800bd84 <prvInsertTimerInActiveList+0x80>)
 800bd68:	681a      	ldr	r2, [r3, #0]
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	3304      	adds	r3, #4
 800bd6e:	4619      	mov	r1, r3
 800bd70:	4610      	mov	r0, r2
 800bd72:	f7fe f8a0 	bl	8009eb6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bd76:	697b      	ldr	r3, [r7, #20]
}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	3718      	adds	r7, #24
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}
 800bd80:	20000f70 	.word	0x20000f70
 800bd84:	20000f6c 	.word	0x20000f6c

0800bd88 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b08e      	sub	sp, #56	; 0x38
 800bd8c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bd8e:	e0ca      	b.n	800bf26 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	da18      	bge.n	800bdc8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bd96:	1d3b      	adds	r3, r7, #4
 800bd98:	3304      	adds	r3, #4
 800bd9a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bd9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d10a      	bne.n	800bdb8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bda2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda6:	f383 8811 	msr	BASEPRI, r3
 800bdaa:	f3bf 8f6f 	isb	sy
 800bdae:	f3bf 8f4f 	dsb	sy
 800bdb2:	61fb      	str	r3, [r7, #28]
}
 800bdb4:	bf00      	nop
 800bdb6:	e7fe      	b.n	800bdb6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bdb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bdbe:	6850      	ldr	r0, [r2, #4]
 800bdc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bdc2:	6892      	ldr	r2, [r2, #8]
 800bdc4:	4611      	mov	r1, r2
 800bdc6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	f2c0 80ab 	blt.w	800bf26 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bdd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdd6:	695b      	ldr	r3, [r3, #20]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d004      	beq.n	800bde6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdde:	3304      	adds	r3, #4
 800bde0:	4618      	mov	r0, r3
 800bde2:	f7fe f8a1 	bl	8009f28 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bde6:	463b      	mov	r3, r7
 800bde8:	4618      	mov	r0, r3
 800bdea:	f7ff ff6b 	bl	800bcc4 <prvSampleTimeNow>
 800bdee:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2b09      	cmp	r3, #9
 800bdf4:	f200 8096 	bhi.w	800bf24 <prvProcessReceivedCommands+0x19c>
 800bdf8:	a201      	add	r2, pc, #4	; (adr r2, 800be00 <prvProcessReceivedCommands+0x78>)
 800bdfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdfe:	bf00      	nop
 800be00:	0800be29 	.word	0x0800be29
 800be04:	0800be29 	.word	0x0800be29
 800be08:	0800be29 	.word	0x0800be29
 800be0c:	0800be9d 	.word	0x0800be9d
 800be10:	0800beb1 	.word	0x0800beb1
 800be14:	0800befb 	.word	0x0800befb
 800be18:	0800be29 	.word	0x0800be29
 800be1c:	0800be29 	.word	0x0800be29
 800be20:	0800be9d 	.word	0x0800be9d
 800be24:	0800beb1 	.word	0x0800beb1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800be28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be2e:	f043 0301 	orr.w	r3, r3, #1
 800be32:	b2da      	uxtb	r2, r3
 800be34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800be3a:	68ba      	ldr	r2, [r7, #8]
 800be3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be3e:	699b      	ldr	r3, [r3, #24]
 800be40:	18d1      	adds	r1, r2, r3
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be48:	f7ff ff5c 	bl	800bd04 <prvInsertTimerInActiveList>
 800be4c:	4603      	mov	r3, r0
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d069      	beq.n	800bf26 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be54:	6a1b      	ldr	r3, [r3, #32]
 800be56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be58:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800be5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be60:	f003 0304 	and.w	r3, r3, #4
 800be64:	2b00      	cmp	r3, #0
 800be66:	d05e      	beq.n	800bf26 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800be68:	68ba      	ldr	r2, [r7, #8]
 800be6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be6c:	699b      	ldr	r3, [r3, #24]
 800be6e:	441a      	add	r2, r3
 800be70:	2300      	movs	r3, #0
 800be72:	9300      	str	r3, [sp, #0]
 800be74:	2300      	movs	r3, #0
 800be76:	2100      	movs	r1, #0
 800be78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be7a:	f7ff fe05 	bl	800ba88 <xTimerGenericCommand>
 800be7e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800be80:	6a3b      	ldr	r3, [r7, #32]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d14f      	bne.n	800bf26 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800be86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be8a:	f383 8811 	msr	BASEPRI, r3
 800be8e:	f3bf 8f6f 	isb	sy
 800be92:	f3bf 8f4f 	dsb	sy
 800be96:	61bb      	str	r3, [r7, #24]
}
 800be98:	bf00      	nop
 800be9a:	e7fe      	b.n	800be9a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800be9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bea2:	f023 0301 	bic.w	r3, r3, #1
 800bea6:	b2da      	uxtb	r2, r3
 800bea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beaa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800beae:	e03a      	b.n	800bf26 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800beb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800beb6:	f043 0301 	orr.w	r3, r3, #1
 800beba:	b2da      	uxtb	r2, r3
 800bebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bebe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bec2:	68ba      	ldr	r2, [r7, #8]
 800bec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bec6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beca:	699b      	ldr	r3, [r3, #24]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d10a      	bne.n	800bee6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800bed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bed4:	f383 8811 	msr	BASEPRI, r3
 800bed8:	f3bf 8f6f 	isb	sy
 800bedc:	f3bf 8f4f 	dsb	sy
 800bee0:	617b      	str	r3, [r7, #20]
}
 800bee2:	bf00      	nop
 800bee4:	e7fe      	b.n	800bee4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bee8:	699a      	ldr	r2, [r3, #24]
 800beea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beec:	18d1      	adds	r1, r2, r3
 800beee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bef2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bef4:	f7ff ff06 	bl	800bd04 <prvInsertTimerInActiveList>
					break;
 800bef8:	e015      	b.n	800bf26 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800befa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800befc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf00:	f003 0302 	and.w	r3, r3, #2
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d103      	bne.n	800bf10 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800bf08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf0a:	f000 fbe1 	bl	800c6d0 <vPortFree>
 800bf0e:	e00a      	b.n	800bf26 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bf10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf16:	f023 0301 	bic.w	r3, r3, #1
 800bf1a:	b2da      	uxtb	r2, r3
 800bf1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bf22:	e000      	b.n	800bf26 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800bf24:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bf26:	4b08      	ldr	r3, [pc, #32]	; (800bf48 <prvProcessReceivedCommands+0x1c0>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	1d39      	adds	r1, r7, #4
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	4618      	mov	r0, r3
 800bf30:	f7fe fafc 	bl	800a52c <xQueueReceive>
 800bf34:	4603      	mov	r3, r0
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	f47f af2a 	bne.w	800bd90 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bf3c:	bf00      	nop
 800bf3e:	bf00      	nop
 800bf40:	3730      	adds	r7, #48	; 0x30
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}
 800bf46:	bf00      	nop
 800bf48:	20000f74 	.word	0x20000f74

0800bf4c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b088      	sub	sp, #32
 800bf50:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bf52:	e048      	b.n	800bfe6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bf54:	4b2d      	ldr	r3, [pc, #180]	; (800c00c <prvSwitchTimerLists+0xc0>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	68db      	ldr	r3, [r3, #12]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf5e:	4b2b      	ldr	r3, [pc, #172]	; (800c00c <prvSwitchTimerLists+0xc0>)
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	68db      	ldr	r3, [r3, #12]
 800bf64:	68db      	ldr	r3, [r3, #12]
 800bf66:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	3304      	adds	r3, #4
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f7fd ffdb 	bl	8009f28 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	6a1b      	ldr	r3, [r3, #32]
 800bf76:	68f8      	ldr	r0, [r7, #12]
 800bf78:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf80:	f003 0304 	and.w	r3, r3, #4
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d02e      	beq.n	800bfe6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	699b      	ldr	r3, [r3, #24]
 800bf8c:	693a      	ldr	r2, [r7, #16]
 800bf8e:	4413      	add	r3, r2
 800bf90:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bf92:	68ba      	ldr	r2, [r7, #8]
 800bf94:	693b      	ldr	r3, [r7, #16]
 800bf96:	429a      	cmp	r2, r3
 800bf98:	d90e      	bls.n	800bfb8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	68ba      	ldr	r2, [r7, #8]
 800bf9e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	68fa      	ldr	r2, [r7, #12]
 800bfa4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bfa6:	4b19      	ldr	r3, [pc, #100]	; (800c00c <prvSwitchTimerLists+0xc0>)
 800bfa8:	681a      	ldr	r2, [r3, #0]
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	3304      	adds	r3, #4
 800bfae:	4619      	mov	r1, r3
 800bfb0:	4610      	mov	r0, r2
 800bfb2:	f7fd ff80 	bl	8009eb6 <vListInsert>
 800bfb6:	e016      	b.n	800bfe6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bfb8:	2300      	movs	r3, #0
 800bfba:	9300      	str	r3, [sp, #0]
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	693a      	ldr	r2, [r7, #16]
 800bfc0:	2100      	movs	r1, #0
 800bfc2:	68f8      	ldr	r0, [r7, #12]
 800bfc4:	f7ff fd60 	bl	800ba88 <xTimerGenericCommand>
 800bfc8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d10a      	bne.n	800bfe6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800bfd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfd4:	f383 8811 	msr	BASEPRI, r3
 800bfd8:	f3bf 8f6f 	isb	sy
 800bfdc:	f3bf 8f4f 	dsb	sy
 800bfe0:	603b      	str	r3, [r7, #0]
}
 800bfe2:	bf00      	nop
 800bfe4:	e7fe      	b.n	800bfe4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bfe6:	4b09      	ldr	r3, [pc, #36]	; (800c00c <prvSwitchTimerLists+0xc0>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d1b1      	bne.n	800bf54 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bff0:	4b06      	ldr	r3, [pc, #24]	; (800c00c <prvSwitchTimerLists+0xc0>)
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bff6:	4b06      	ldr	r3, [pc, #24]	; (800c010 <prvSwitchTimerLists+0xc4>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	4a04      	ldr	r2, [pc, #16]	; (800c00c <prvSwitchTimerLists+0xc0>)
 800bffc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bffe:	4a04      	ldr	r2, [pc, #16]	; (800c010 <prvSwitchTimerLists+0xc4>)
 800c000:	697b      	ldr	r3, [r7, #20]
 800c002:	6013      	str	r3, [r2, #0]
}
 800c004:	bf00      	nop
 800c006:	3718      	adds	r7, #24
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}
 800c00c:	20000f6c 	.word	0x20000f6c
 800c010:	20000f70 	.word	0x20000f70

0800c014 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b082      	sub	sp, #8
 800c018:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c01a:	f000 f96b 	bl	800c2f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c01e:	4b15      	ldr	r3, [pc, #84]	; (800c074 <prvCheckForValidListAndQueue+0x60>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d120      	bne.n	800c068 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c026:	4814      	ldr	r0, [pc, #80]	; (800c078 <prvCheckForValidListAndQueue+0x64>)
 800c028:	f7fd fef4 	bl	8009e14 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c02c:	4813      	ldr	r0, [pc, #76]	; (800c07c <prvCheckForValidListAndQueue+0x68>)
 800c02e:	f7fd fef1 	bl	8009e14 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c032:	4b13      	ldr	r3, [pc, #76]	; (800c080 <prvCheckForValidListAndQueue+0x6c>)
 800c034:	4a10      	ldr	r2, [pc, #64]	; (800c078 <prvCheckForValidListAndQueue+0x64>)
 800c036:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c038:	4b12      	ldr	r3, [pc, #72]	; (800c084 <prvCheckForValidListAndQueue+0x70>)
 800c03a:	4a10      	ldr	r2, [pc, #64]	; (800c07c <prvCheckForValidListAndQueue+0x68>)
 800c03c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c03e:	2300      	movs	r3, #0
 800c040:	9300      	str	r3, [sp, #0]
 800c042:	4b11      	ldr	r3, [pc, #68]	; (800c088 <prvCheckForValidListAndQueue+0x74>)
 800c044:	4a11      	ldr	r2, [pc, #68]	; (800c08c <prvCheckForValidListAndQueue+0x78>)
 800c046:	2110      	movs	r1, #16
 800c048:	200a      	movs	r0, #10
 800c04a:	f7fd ffff 	bl	800a04c <xQueueGenericCreateStatic>
 800c04e:	4603      	mov	r3, r0
 800c050:	4a08      	ldr	r2, [pc, #32]	; (800c074 <prvCheckForValidListAndQueue+0x60>)
 800c052:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c054:	4b07      	ldr	r3, [pc, #28]	; (800c074 <prvCheckForValidListAndQueue+0x60>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d005      	beq.n	800c068 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c05c:	4b05      	ldr	r3, [pc, #20]	; (800c074 <prvCheckForValidListAndQueue+0x60>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	490b      	ldr	r1, [pc, #44]	; (800c090 <prvCheckForValidListAndQueue+0x7c>)
 800c062:	4618      	mov	r0, r3
 800c064:	f7fe fd0e 	bl	800aa84 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c068:	f000 f974 	bl	800c354 <vPortExitCritical>
}
 800c06c:	bf00      	nop
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}
 800c072:	bf00      	nop
 800c074:	20000f74 	.word	0x20000f74
 800c078:	20000f44 	.word	0x20000f44
 800c07c:	20000f58 	.word	0x20000f58
 800c080:	20000f6c 	.word	0x20000f6c
 800c084:	20000f70 	.word	0x20000f70
 800c088:	20001020 	.word	0x20001020
 800c08c:	20000f80 	.word	0x20000f80
 800c090:	0800da68 	.word	0x0800da68

0800c094 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c094:	b480      	push	{r7}
 800c096:	b085      	sub	sp, #20
 800c098:	af00      	add	r7, sp, #0
 800c09a:	60f8      	str	r0, [r7, #12]
 800c09c:	60b9      	str	r1, [r7, #8]
 800c09e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	3b04      	subs	r3, #4
 800c0a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c0ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	3b04      	subs	r3, #4
 800c0b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	f023 0201 	bic.w	r2, r3, #1
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	3b04      	subs	r3, #4
 800c0c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c0c4:	4a0c      	ldr	r2, [pc, #48]	; (800c0f8 <pxPortInitialiseStack+0x64>)
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	3b14      	subs	r3, #20
 800c0ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c0d0:	687a      	ldr	r2, [r7, #4]
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	3b04      	subs	r3, #4
 800c0da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	f06f 0202 	mvn.w	r2, #2
 800c0e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	3b20      	subs	r3, #32
 800c0e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	3714      	adds	r7, #20
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f6:	4770      	bx	lr
 800c0f8:	0800c0fd 	.word	0x0800c0fd

0800c0fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c0fc:	b480      	push	{r7}
 800c0fe:	b085      	sub	sp, #20
 800c100:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c102:	2300      	movs	r3, #0
 800c104:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c106:	4b12      	ldr	r3, [pc, #72]	; (800c150 <prvTaskExitError+0x54>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c10e:	d00a      	beq.n	800c126 <prvTaskExitError+0x2a>
	__asm volatile
 800c110:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c114:	f383 8811 	msr	BASEPRI, r3
 800c118:	f3bf 8f6f 	isb	sy
 800c11c:	f3bf 8f4f 	dsb	sy
 800c120:	60fb      	str	r3, [r7, #12]
}
 800c122:	bf00      	nop
 800c124:	e7fe      	b.n	800c124 <prvTaskExitError+0x28>
	__asm volatile
 800c126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c12a:	f383 8811 	msr	BASEPRI, r3
 800c12e:	f3bf 8f6f 	isb	sy
 800c132:	f3bf 8f4f 	dsb	sy
 800c136:	60bb      	str	r3, [r7, #8]
}
 800c138:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c13a:	bf00      	nop
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d0fc      	beq.n	800c13c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c142:	bf00      	nop
 800c144:	bf00      	nop
 800c146:	3714      	adds	r7, #20
 800c148:	46bd      	mov	sp, r7
 800c14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14e:	4770      	bx	lr
 800c150:	2000002c 	.word	0x2000002c
	...

0800c160 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c160:	4b07      	ldr	r3, [pc, #28]	; (800c180 <pxCurrentTCBConst2>)
 800c162:	6819      	ldr	r1, [r3, #0]
 800c164:	6808      	ldr	r0, [r1, #0]
 800c166:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c16a:	f380 8809 	msr	PSP, r0
 800c16e:	f3bf 8f6f 	isb	sy
 800c172:	f04f 0000 	mov.w	r0, #0
 800c176:	f380 8811 	msr	BASEPRI, r0
 800c17a:	4770      	bx	lr
 800c17c:	f3af 8000 	nop.w

0800c180 <pxCurrentTCBConst2>:
 800c180:	20000a44 	.word	0x20000a44
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c184:	bf00      	nop
 800c186:	bf00      	nop

0800c188 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c188:	4808      	ldr	r0, [pc, #32]	; (800c1ac <prvPortStartFirstTask+0x24>)
 800c18a:	6800      	ldr	r0, [r0, #0]
 800c18c:	6800      	ldr	r0, [r0, #0]
 800c18e:	f380 8808 	msr	MSP, r0
 800c192:	f04f 0000 	mov.w	r0, #0
 800c196:	f380 8814 	msr	CONTROL, r0
 800c19a:	b662      	cpsie	i
 800c19c:	b661      	cpsie	f
 800c19e:	f3bf 8f4f 	dsb	sy
 800c1a2:	f3bf 8f6f 	isb	sy
 800c1a6:	df00      	svc	0
 800c1a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c1aa:	bf00      	nop
 800c1ac:	e000ed08 	.word	0xe000ed08

0800c1b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b086      	sub	sp, #24
 800c1b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c1b6:	4b46      	ldr	r3, [pc, #280]	; (800c2d0 <xPortStartScheduler+0x120>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	4a46      	ldr	r2, [pc, #280]	; (800c2d4 <xPortStartScheduler+0x124>)
 800c1bc:	4293      	cmp	r3, r2
 800c1be:	d10a      	bne.n	800c1d6 <xPortStartScheduler+0x26>
	__asm volatile
 800c1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c4:	f383 8811 	msr	BASEPRI, r3
 800c1c8:	f3bf 8f6f 	isb	sy
 800c1cc:	f3bf 8f4f 	dsb	sy
 800c1d0:	613b      	str	r3, [r7, #16]
}
 800c1d2:	bf00      	nop
 800c1d4:	e7fe      	b.n	800c1d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c1d6:	4b3e      	ldr	r3, [pc, #248]	; (800c2d0 <xPortStartScheduler+0x120>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	4a3f      	ldr	r2, [pc, #252]	; (800c2d8 <xPortStartScheduler+0x128>)
 800c1dc:	4293      	cmp	r3, r2
 800c1de:	d10a      	bne.n	800c1f6 <xPortStartScheduler+0x46>
	__asm volatile
 800c1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e4:	f383 8811 	msr	BASEPRI, r3
 800c1e8:	f3bf 8f6f 	isb	sy
 800c1ec:	f3bf 8f4f 	dsb	sy
 800c1f0:	60fb      	str	r3, [r7, #12]
}
 800c1f2:	bf00      	nop
 800c1f4:	e7fe      	b.n	800c1f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c1f6:	4b39      	ldr	r3, [pc, #228]	; (800c2dc <xPortStartScheduler+0x12c>)
 800c1f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c1fa:	697b      	ldr	r3, [r7, #20]
 800c1fc:	781b      	ldrb	r3, [r3, #0]
 800c1fe:	b2db      	uxtb	r3, r3
 800c200:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c202:	697b      	ldr	r3, [r7, #20]
 800c204:	22ff      	movs	r2, #255	; 0xff
 800c206:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c208:	697b      	ldr	r3, [r7, #20]
 800c20a:	781b      	ldrb	r3, [r3, #0]
 800c20c:	b2db      	uxtb	r3, r3
 800c20e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c210:	78fb      	ldrb	r3, [r7, #3]
 800c212:	b2db      	uxtb	r3, r3
 800c214:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c218:	b2da      	uxtb	r2, r3
 800c21a:	4b31      	ldr	r3, [pc, #196]	; (800c2e0 <xPortStartScheduler+0x130>)
 800c21c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c21e:	4b31      	ldr	r3, [pc, #196]	; (800c2e4 <xPortStartScheduler+0x134>)
 800c220:	2207      	movs	r2, #7
 800c222:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c224:	e009      	b.n	800c23a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c226:	4b2f      	ldr	r3, [pc, #188]	; (800c2e4 <xPortStartScheduler+0x134>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	3b01      	subs	r3, #1
 800c22c:	4a2d      	ldr	r2, [pc, #180]	; (800c2e4 <xPortStartScheduler+0x134>)
 800c22e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c230:	78fb      	ldrb	r3, [r7, #3]
 800c232:	b2db      	uxtb	r3, r3
 800c234:	005b      	lsls	r3, r3, #1
 800c236:	b2db      	uxtb	r3, r3
 800c238:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c23a:	78fb      	ldrb	r3, [r7, #3]
 800c23c:	b2db      	uxtb	r3, r3
 800c23e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c242:	2b80      	cmp	r3, #128	; 0x80
 800c244:	d0ef      	beq.n	800c226 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c246:	4b27      	ldr	r3, [pc, #156]	; (800c2e4 <xPortStartScheduler+0x134>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	f1c3 0307 	rsb	r3, r3, #7
 800c24e:	2b04      	cmp	r3, #4
 800c250:	d00a      	beq.n	800c268 <xPortStartScheduler+0xb8>
	__asm volatile
 800c252:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c256:	f383 8811 	msr	BASEPRI, r3
 800c25a:	f3bf 8f6f 	isb	sy
 800c25e:	f3bf 8f4f 	dsb	sy
 800c262:	60bb      	str	r3, [r7, #8]
}
 800c264:	bf00      	nop
 800c266:	e7fe      	b.n	800c266 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c268:	4b1e      	ldr	r3, [pc, #120]	; (800c2e4 <xPortStartScheduler+0x134>)
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	021b      	lsls	r3, r3, #8
 800c26e:	4a1d      	ldr	r2, [pc, #116]	; (800c2e4 <xPortStartScheduler+0x134>)
 800c270:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c272:	4b1c      	ldr	r3, [pc, #112]	; (800c2e4 <xPortStartScheduler+0x134>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c27a:	4a1a      	ldr	r2, [pc, #104]	; (800c2e4 <xPortStartScheduler+0x134>)
 800c27c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	b2da      	uxtb	r2, r3
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c286:	4b18      	ldr	r3, [pc, #96]	; (800c2e8 <xPortStartScheduler+0x138>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	4a17      	ldr	r2, [pc, #92]	; (800c2e8 <xPortStartScheduler+0x138>)
 800c28c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c290:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c292:	4b15      	ldr	r3, [pc, #84]	; (800c2e8 <xPortStartScheduler+0x138>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	4a14      	ldr	r2, [pc, #80]	; (800c2e8 <xPortStartScheduler+0x138>)
 800c298:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c29c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c29e:	f000 f8dd 	bl	800c45c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c2a2:	4b12      	ldr	r3, [pc, #72]	; (800c2ec <xPortStartScheduler+0x13c>)
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c2a8:	f000 f8fc 	bl	800c4a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c2ac:	4b10      	ldr	r3, [pc, #64]	; (800c2f0 <xPortStartScheduler+0x140>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	4a0f      	ldr	r2, [pc, #60]	; (800c2f0 <xPortStartScheduler+0x140>)
 800c2b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c2b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c2b8:	f7ff ff66 	bl	800c188 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c2bc:	f7ff f836 	bl	800b32c <vTaskSwitchContext>
	prvTaskExitError();
 800c2c0:	f7ff ff1c 	bl	800c0fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c2c4:	2300      	movs	r3, #0
}
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	3718      	adds	r7, #24
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}
 800c2ce:	bf00      	nop
 800c2d0:	e000ed00 	.word	0xe000ed00
 800c2d4:	410fc271 	.word	0x410fc271
 800c2d8:	410fc270 	.word	0x410fc270
 800c2dc:	e000e400 	.word	0xe000e400
 800c2e0:	20001070 	.word	0x20001070
 800c2e4:	20001074 	.word	0x20001074
 800c2e8:	e000ed20 	.word	0xe000ed20
 800c2ec:	2000002c 	.word	0x2000002c
 800c2f0:	e000ef34 	.word	0xe000ef34

0800c2f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c2f4:	b480      	push	{r7}
 800c2f6:	b083      	sub	sp, #12
 800c2f8:	af00      	add	r7, sp, #0
	__asm volatile
 800c2fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2fe:	f383 8811 	msr	BASEPRI, r3
 800c302:	f3bf 8f6f 	isb	sy
 800c306:	f3bf 8f4f 	dsb	sy
 800c30a:	607b      	str	r3, [r7, #4]
}
 800c30c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c30e:	4b0f      	ldr	r3, [pc, #60]	; (800c34c <vPortEnterCritical+0x58>)
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	3301      	adds	r3, #1
 800c314:	4a0d      	ldr	r2, [pc, #52]	; (800c34c <vPortEnterCritical+0x58>)
 800c316:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c318:	4b0c      	ldr	r3, [pc, #48]	; (800c34c <vPortEnterCritical+0x58>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	2b01      	cmp	r3, #1
 800c31e:	d10f      	bne.n	800c340 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c320:	4b0b      	ldr	r3, [pc, #44]	; (800c350 <vPortEnterCritical+0x5c>)
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	b2db      	uxtb	r3, r3
 800c326:	2b00      	cmp	r3, #0
 800c328:	d00a      	beq.n	800c340 <vPortEnterCritical+0x4c>
	__asm volatile
 800c32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c32e:	f383 8811 	msr	BASEPRI, r3
 800c332:	f3bf 8f6f 	isb	sy
 800c336:	f3bf 8f4f 	dsb	sy
 800c33a:	603b      	str	r3, [r7, #0]
}
 800c33c:	bf00      	nop
 800c33e:	e7fe      	b.n	800c33e <vPortEnterCritical+0x4a>
	}
}
 800c340:	bf00      	nop
 800c342:	370c      	adds	r7, #12
 800c344:	46bd      	mov	sp, r7
 800c346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34a:	4770      	bx	lr
 800c34c:	2000002c 	.word	0x2000002c
 800c350:	e000ed04 	.word	0xe000ed04

0800c354 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c354:	b480      	push	{r7}
 800c356:	b083      	sub	sp, #12
 800c358:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c35a:	4b12      	ldr	r3, [pc, #72]	; (800c3a4 <vPortExitCritical+0x50>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d10a      	bne.n	800c378 <vPortExitCritical+0x24>
	__asm volatile
 800c362:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c366:	f383 8811 	msr	BASEPRI, r3
 800c36a:	f3bf 8f6f 	isb	sy
 800c36e:	f3bf 8f4f 	dsb	sy
 800c372:	607b      	str	r3, [r7, #4]
}
 800c374:	bf00      	nop
 800c376:	e7fe      	b.n	800c376 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c378:	4b0a      	ldr	r3, [pc, #40]	; (800c3a4 <vPortExitCritical+0x50>)
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	3b01      	subs	r3, #1
 800c37e:	4a09      	ldr	r2, [pc, #36]	; (800c3a4 <vPortExitCritical+0x50>)
 800c380:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c382:	4b08      	ldr	r3, [pc, #32]	; (800c3a4 <vPortExitCritical+0x50>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d105      	bne.n	800c396 <vPortExitCritical+0x42>
 800c38a:	2300      	movs	r3, #0
 800c38c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	f383 8811 	msr	BASEPRI, r3
}
 800c394:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c396:	bf00      	nop
 800c398:	370c      	adds	r7, #12
 800c39a:	46bd      	mov	sp, r7
 800c39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a0:	4770      	bx	lr
 800c3a2:	bf00      	nop
 800c3a4:	2000002c 	.word	0x2000002c
	...

0800c3b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c3b0:	f3ef 8009 	mrs	r0, PSP
 800c3b4:	f3bf 8f6f 	isb	sy
 800c3b8:	4b15      	ldr	r3, [pc, #84]	; (800c410 <pxCurrentTCBConst>)
 800c3ba:	681a      	ldr	r2, [r3, #0]
 800c3bc:	f01e 0f10 	tst.w	lr, #16
 800c3c0:	bf08      	it	eq
 800c3c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c3c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3ca:	6010      	str	r0, [r2, #0]
 800c3cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c3d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c3d4:	f380 8811 	msr	BASEPRI, r0
 800c3d8:	f3bf 8f4f 	dsb	sy
 800c3dc:	f3bf 8f6f 	isb	sy
 800c3e0:	f7fe ffa4 	bl	800b32c <vTaskSwitchContext>
 800c3e4:	f04f 0000 	mov.w	r0, #0
 800c3e8:	f380 8811 	msr	BASEPRI, r0
 800c3ec:	bc09      	pop	{r0, r3}
 800c3ee:	6819      	ldr	r1, [r3, #0]
 800c3f0:	6808      	ldr	r0, [r1, #0]
 800c3f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3f6:	f01e 0f10 	tst.w	lr, #16
 800c3fa:	bf08      	it	eq
 800c3fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c400:	f380 8809 	msr	PSP, r0
 800c404:	f3bf 8f6f 	isb	sy
 800c408:	4770      	bx	lr
 800c40a:	bf00      	nop
 800c40c:	f3af 8000 	nop.w

0800c410 <pxCurrentTCBConst>:
 800c410:	20000a44 	.word	0x20000a44
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c414:	bf00      	nop
 800c416:	bf00      	nop

0800c418 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b082      	sub	sp, #8
 800c41c:	af00      	add	r7, sp, #0
	__asm volatile
 800c41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c422:	f383 8811 	msr	BASEPRI, r3
 800c426:	f3bf 8f6f 	isb	sy
 800c42a:	f3bf 8f4f 	dsb	sy
 800c42e:	607b      	str	r3, [r7, #4]
}
 800c430:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c432:	f7fe fec1 	bl	800b1b8 <xTaskIncrementTick>
 800c436:	4603      	mov	r3, r0
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d003      	beq.n	800c444 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c43c:	4b06      	ldr	r3, [pc, #24]	; (800c458 <xPortSysTickHandler+0x40>)
 800c43e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c442:	601a      	str	r2, [r3, #0]
 800c444:	2300      	movs	r3, #0
 800c446:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	f383 8811 	msr	BASEPRI, r3
}
 800c44e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c450:	bf00      	nop
 800c452:	3708      	adds	r7, #8
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}
 800c458:	e000ed04 	.word	0xe000ed04

0800c45c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c45c:	b480      	push	{r7}
 800c45e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c460:	4b0b      	ldr	r3, [pc, #44]	; (800c490 <vPortSetupTimerInterrupt+0x34>)
 800c462:	2200      	movs	r2, #0
 800c464:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c466:	4b0b      	ldr	r3, [pc, #44]	; (800c494 <vPortSetupTimerInterrupt+0x38>)
 800c468:	2200      	movs	r2, #0
 800c46a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c46c:	4b0a      	ldr	r3, [pc, #40]	; (800c498 <vPortSetupTimerInterrupt+0x3c>)
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	4a0a      	ldr	r2, [pc, #40]	; (800c49c <vPortSetupTimerInterrupt+0x40>)
 800c472:	fba2 2303 	umull	r2, r3, r2, r3
 800c476:	099b      	lsrs	r3, r3, #6
 800c478:	4a09      	ldr	r2, [pc, #36]	; (800c4a0 <vPortSetupTimerInterrupt+0x44>)
 800c47a:	3b01      	subs	r3, #1
 800c47c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c47e:	4b04      	ldr	r3, [pc, #16]	; (800c490 <vPortSetupTimerInterrupt+0x34>)
 800c480:	2207      	movs	r2, #7
 800c482:	601a      	str	r2, [r3, #0]
}
 800c484:	bf00      	nop
 800c486:	46bd      	mov	sp, r7
 800c488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48c:	4770      	bx	lr
 800c48e:	bf00      	nop
 800c490:	e000e010 	.word	0xe000e010
 800c494:	e000e018 	.word	0xe000e018
 800c498:	20000000 	.word	0x20000000
 800c49c:	10624dd3 	.word	0x10624dd3
 800c4a0:	e000e014 	.word	0xe000e014

0800c4a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c4a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c4b4 <vPortEnableVFP+0x10>
 800c4a8:	6801      	ldr	r1, [r0, #0]
 800c4aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c4ae:	6001      	str	r1, [r0, #0]
 800c4b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c4b2:	bf00      	nop
 800c4b4:	e000ed88 	.word	0xe000ed88

0800c4b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c4b8:	b480      	push	{r7}
 800c4ba:	b085      	sub	sp, #20
 800c4bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c4be:	f3ef 8305 	mrs	r3, IPSR
 800c4c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	2b0f      	cmp	r3, #15
 800c4c8:	d914      	bls.n	800c4f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c4ca:	4a17      	ldr	r2, [pc, #92]	; (800c528 <vPortValidateInterruptPriority+0x70>)
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	4413      	add	r3, r2
 800c4d0:	781b      	ldrb	r3, [r3, #0]
 800c4d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c4d4:	4b15      	ldr	r3, [pc, #84]	; (800c52c <vPortValidateInterruptPriority+0x74>)
 800c4d6:	781b      	ldrb	r3, [r3, #0]
 800c4d8:	7afa      	ldrb	r2, [r7, #11]
 800c4da:	429a      	cmp	r2, r3
 800c4dc:	d20a      	bcs.n	800c4f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e2:	f383 8811 	msr	BASEPRI, r3
 800c4e6:	f3bf 8f6f 	isb	sy
 800c4ea:	f3bf 8f4f 	dsb	sy
 800c4ee:	607b      	str	r3, [r7, #4]
}
 800c4f0:	bf00      	nop
 800c4f2:	e7fe      	b.n	800c4f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c4f4:	4b0e      	ldr	r3, [pc, #56]	; (800c530 <vPortValidateInterruptPriority+0x78>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c4fc:	4b0d      	ldr	r3, [pc, #52]	; (800c534 <vPortValidateInterruptPriority+0x7c>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	429a      	cmp	r2, r3
 800c502:	d90a      	bls.n	800c51a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c504:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c508:	f383 8811 	msr	BASEPRI, r3
 800c50c:	f3bf 8f6f 	isb	sy
 800c510:	f3bf 8f4f 	dsb	sy
 800c514:	603b      	str	r3, [r7, #0]
}
 800c516:	bf00      	nop
 800c518:	e7fe      	b.n	800c518 <vPortValidateInterruptPriority+0x60>
	}
 800c51a:	bf00      	nop
 800c51c:	3714      	adds	r7, #20
 800c51e:	46bd      	mov	sp, r7
 800c520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c524:	4770      	bx	lr
 800c526:	bf00      	nop
 800c528:	e000e3f0 	.word	0xe000e3f0
 800c52c:	20001070 	.word	0x20001070
 800c530:	e000ed0c 	.word	0xe000ed0c
 800c534:	20001074 	.word	0x20001074

0800c538 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b08a      	sub	sp, #40	; 0x28
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c540:	2300      	movs	r3, #0
 800c542:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c544:	f7fe fd58 	bl	800aff8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c548:	4b5b      	ldr	r3, [pc, #364]	; (800c6b8 <pvPortMalloc+0x180>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d101      	bne.n	800c554 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c550:	f000 f920 	bl	800c794 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c554:	4b59      	ldr	r3, [pc, #356]	; (800c6bc <pvPortMalloc+0x184>)
 800c556:	681a      	ldr	r2, [r3, #0]
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	4013      	ands	r3, r2
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	f040 8093 	bne.w	800c688 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d01d      	beq.n	800c5a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c568:	2208      	movs	r2, #8
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	4413      	add	r3, r2
 800c56e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f003 0307 	and.w	r3, r3, #7
 800c576:	2b00      	cmp	r3, #0
 800c578:	d014      	beq.n	800c5a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	f023 0307 	bic.w	r3, r3, #7
 800c580:	3308      	adds	r3, #8
 800c582:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f003 0307 	and.w	r3, r3, #7
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d00a      	beq.n	800c5a4 <pvPortMalloc+0x6c>
	__asm volatile
 800c58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c592:	f383 8811 	msr	BASEPRI, r3
 800c596:	f3bf 8f6f 	isb	sy
 800c59a:	f3bf 8f4f 	dsb	sy
 800c59e:	617b      	str	r3, [r7, #20]
}
 800c5a0:	bf00      	nop
 800c5a2:	e7fe      	b.n	800c5a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d06e      	beq.n	800c688 <pvPortMalloc+0x150>
 800c5aa:	4b45      	ldr	r3, [pc, #276]	; (800c6c0 <pvPortMalloc+0x188>)
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	687a      	ldr	r2, [r7, #4]
 800c5b0:	429a      	cmp	r2, r3
 800c5b2:	d869      	bhi.n	800c688 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c5b4:	4b43      	ldr	r3, [pc, #268]	; (800c6c4 <pvPortMalloc+0x18c>)
 800c5b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c5b8:	4b42      	ldr	r3, [pc, #264]	; (800c6c4 <pvPortMalloc+0x18c>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c5be:	e004      	b.n	800c5ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5cc:	685b      	ldr	r3, [r3, #4]
 800c5ce:	687a      	ldr	r2, [r7, #4]
 800c5d0:	429a      	cmp	r2, r3
 800c5d2:	d903      	bls.n	800c5dc <pvPortMalloc+0xa4>
 800c5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d1f1      	bne.n	800c5c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c5dc:	4b36      	ldr	r3, [pc, #216]	; (800c6b8 <pvPortMalloc+0x180>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5e2:	429a      	cmp	r2, r3
 800c5e4:	d050      	beq.n	800c688 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c5e6:	6a3b      	ldr	r3, [r7, #32]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	2208      	movs	r2, #8
 800c5ec:	4413      	add	r3, r2
 800c5ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5f2:	681a      	ldr	r2, [r3, #0]
 800c5f4:	6a3b      	ldr	r3, [r7, #32]
 800c5f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5fa:	685a      	ldr	r2, [r3, #4]
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	1ad2      	subs	r2, r2, r3
 800c600:	2308      	movs	r3, #8
 800c602:	005b      	lsls	r3, r3, #1
 800c604:	429a      	cmp	r2, r3
 800c606:	d91f      	bls.n	800c648 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	4413      	add	r3, r2
 800c60e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c610:	69bb      	ldr	r3, [r7, #24]
 800c612:	f003 0307 	and.w	r3, r3, #7
 800c616:	2b00      	cmp	r3, #0
 800c618:	d00a      	beq.n	800c630 <pvPortMalloc+0xf8>
	__asm volatile
 800c61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c61e:	f383 8811 	msr	BASEPRI, r3
 800c622:	f3bf 8f6f 	isb	sy
 800c626:	f3bf 8f4f 	dsb	sy
 800c62a:	613b      	str	r3, [r7, #16]
}
 800c62c:	bf00      	nop
 800c62e:	e7fe      	b.n	800c62e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c632:	685a      	ldr	r2, [r3, #4]
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	1ad2      	subs	r2, r2, r3
 800c638:	69bb      	ldr	r3, [r7, #24]
 800c63a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c63e:	687a      	ldr	r2, [r7, #4]
 800c640:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c642:	69b8      	ldr	r0, [r7, #24]
 800c644:	f000 f908 	bl	800c858 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c648:	4b1d      	ldr	r3, [pc, #116]	; (800c6c0 <pvPortMalloc+0x188>)
 800c64a:	681a      	ldr	r2, [r3, #0]
 800c64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c64e:	685b      	ldr	r3, [r3, #4]
 800c650:	1ad3      	subs	r3, r2, r3
 800c652:	4a1b      	ldr	r2, [pc, #108]	; (800c6c0 <pvPortMalloc+0x188>)
 800c654:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c656:	4b1a      	ldr	r3, [pc, #104]	; (800c6c0 <pvPortMalloc+0x188>)
 800c658:	681a      	ldr	r2, [r3, #0]
 800c65a:	4b1b      	ldr	r3, [pc, #108]	; (800c6c8 <pvPortMalloc+0x190>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	429a      	cmp	r2, r3
 800c660:	d203      	bcs.n	800c66a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c662:	4b17      	ldr	r3, [pc, #92]	; (800c6c0 <pvPortMalloc+0x188>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	4a18      	ldr	r2, [pc, #96]	; (800c6c8 <pvPortMalloc+0x190>)
 800c668:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c66c:	685a      	ldr	r2, [r3, #4]
 800c66e:	4b13      	ldr	r3, [pc, #76]	; (800c6bc <pvPortMalloc+0x184>)
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	431a      	orrs	r2, r3
 800c674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c676:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c67a:	2200      	movs	r2, #0
 800c67c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c67e:	4b13      	ldr	r3, [pc, #76]	; (800c6cc <pvPortMalloc+0x194>)
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	3301      	adds	r3, #1
 800c684:	4a11      	ldr	r2, [pc, #68]	; (800c6cc <pvPortMalloc+0x194>)
 800c686:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c688:	f7fe fcc4 	bl	800b014 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c68c:	69fb      	ldr	r3, [r7, #28]
 800c68e:	f003 0307 	and.w	r3, r3, #7
 800c692:	2b00      	cmp	r3, #0
 800c694:	d00a      	beq.n	800c6ac <pvPortMalloc+0x174>
	__asm volatile
 800c696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c69a:	f383 8811 	msr	BASEPRI, r3
 800c69e:	f3bf 8f6f 	isb	sy
 800c6a2:	f3bf 8f4f 	dsb	sy
 800c6a6:	60fb      	str	r3, [r7, #12]
}
 800c6a8:	bf00      	nop
 800c6aa:	e7fe      	b.n	800c6aa <pvPortMalloc+0x172>
	return pvReturn;
 800c6ac:	69fb      	ldr	r3, [r7, #28]
}
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	3728      	adds	r7, #40	; 0x28
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}
 800c6b6:	bf00      	nop
 800c6b8:	20004c80 	.word	0x20004c80
 800c6bc:	20004c94 	.word	0x20004c94
 800c6c0:	20004c84 	.word	0x20004c84
 800c6c4:	20004c78 	.word	0x20004c78
 800c6c8:	20004c88 	.word	0x20004c88
 800c6cc:	20004c8c 	.word	0x20004c8c

0800c6d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b086      	sub	sp, #24
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d04d      	beq.n	800c77e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c6e2:	2308      	movs	r3, #8
 800c6e4:	425b      	negs	r3, r3
 800c6e6:	697a      	ldr	r2, [r7, #20]
 800c6e8:	4413      	add	r3, r2
 800c6ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c6ec:	697b      	ldr	r3, [r7, #20]
 800c6ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c6f0:	693b      	ldr	r3, [r7, #16]
 800c6f2:	685a      	ldr	r2, [r3, #4]
 800c6f4:	4b24      	ldr	r3, [pc, #144]	; (800c788 <vPortFree+0xb8>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	4013      	ands	r3, r2
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d10a      	bne.n	800c714 <vPortFree+0x44>
	__asm volatile
 800c6fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c702:	f383 8811 	msr	BASEPRI, r3
 800c706:	f3bf 8f6f 	isb	sy
 800c70a:	f3bf 8f4f 	dsb	sy
 800c70e:	60fb      	str	r3, [r7, #12]
}
 800c710:	bf00      	nop
 800c712:	e7fe      	b.n	800c712 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c714:	693b      	ldr	r3, [r7, #16]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d00a      	beq.n	800c732 <vPortFree+0x62>
	__asm volatile
 800c71c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c720:	f383 8811 	msr	BASEPRI, r3
 800c724:	f3bf 8f6f 	isb	sy
 800c728:	f3bf 8f4f 	dsb	sy
 800c72c:	60bb      	str	r3, [r7, #8]
}
 800c72e:	bf00      	nop
 800c730:	e7fe      	b.n	800c730 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c732:	693b      	ldr	r3, [r7, #16]
 800c734:	685a      	ldr	r2, [r3, #4]
 800c736:	4b14      	ldr	r3, [pc, #80]	; (800c788 <vPortFree+0xb8>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	4013      	ands	r3, r2
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d01e      	beq.n	800c77e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c740:	693b      	ldr	r3, [r7, #16]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d11a      	bne.n	800c77e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c748:	693b      	ldr	r3, [r7, #16]
 800c74a:	685a      	ldr	r2, [r3, #4]
 800c74c:	4b0e      	ldr	r3, [pc, #56]	; (800c788 <vPortFree+0xb8>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	43db      	mvns	r3, r3
 800c752:	401a      	ands	r2, r3
 800c754:	693b      	ldr	r3, [r7, #16]
 800c756:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c758:	f7fe fc4e 	bl	800aff8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c75c:	693b      	ldr	r3, [r7, #16]
 800c75e:	685a      	ldr	r2, [r3, #4]
 800c760:	4b0a      	ldr	r3, [pc, #40]	; (800c78c <vPortFree+0xbc>)
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	4413      	add	r3, r2
 800c766:	4a09      	ldr	r2, [pc, #36]	; (800c78c <vPortFree+0xbc>)
 800c768:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c76a:	6938      	ldr	r0, [r7, #16]
 800c76c:	f000 f874 	bl	800c858 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c770:	4b07      	ldr	r3, [pc, #28]	; (800c790 <vPortFree+0xc0>)
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	3301      	adds	r3, #1
 800c776:	4a06      	ldr	r2, [pc, #24]	; (800c790 <vPortFree+0xc0>)
 800c778:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c77a:	f7fe fc4b 	bl	800b014 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c77e:	bf00      	nop
 800c780:	3718      	adds	r7, #24
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}
 800c786:	bf00      	nop
 800c788:	20004c94 	.word	0x20004c94
 800c78c:	20004c84 	.word	0x20004c84
 800c790:	20004c90 	.word	0x20004c90

0800c794 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c794:	b480      	push	{r7}
 800c796:	b085      	sub	sp, #20
 800c798:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c79a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c79e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c7a0:	4b27      	ldr	r3, [pc, #156]	; (800c840 <prvHeapInit+0xac>)
 800c7a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	f003 0307 	and.w	r3, r3, #7
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d00c      	beq.n	800c7c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	3307      	adds	r3, #7
 800c7b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	f023 0307 	bic.w	r3, r3, #7
 800c7ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c7bc:	68ba      	ldr	r2, [r7, #8]
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	1ad3      	subs	r3, r2, r3
 800c7c2:	4a1f      	ldr	r2, [pc, #124]	; (800c840 <prvHeapInit+0xac>)
 800c7c4:	4413      	add	r3, r2
 800c7c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c7cc:	4a1d      	ldr	r2, [pc, #116]	; (800c844 <prvHeapInit+0xb0>)
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c7d2:	4b1c      	ldr	r3, [pc, #112]	; (800c844 <prvHeapInit+0xb0>)
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	68ba      	ldr	r2, [r7, #8]
 800c7dc:	4413      	add	r3, r2
 800c7de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c7e0:	2208      	movs	r2, #8
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	1a9b      	subs	r3, r3, r2
 800c7e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	f023 0307 	bic.w	r3, r3, #7
 800c7ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	4a15      	ldr	r2, [pc, #84]	; (800c848 <prvHeapInit+0xb4>)
 800c7f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c7f6:	4b14      	ldr	r3, [pc, #80]	; (800c848 <prvHeapInit+0xb4>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c7fe:	4b12      	ldr	r3, [pc, #72]	; (800c848 <prvHeapInit+0xb4>)
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	2200      	movs	r2, #0
 800c804:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	68fa      	ldr	r2, [r7, #12]
 800c80e:	1ad2      	subs	r2, r2, r3
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c814:	4b0c      	ldr	r3, [pc, #48]	; (800c848 <prvHeapInit+0xb4>)
 800c816:	681a      	ldr	r2, [r3, #0]
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c81c:	683b      	ldr	r3, [r7, #0]
 800c81e:	685b      	ldr	r3, [r3, #4]
 800c820:	4a0a      	ldr	r2, [pc, #40]	; (800c84c <prvHeapInit+0xb8>)
 800c822:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	685b      	ldr	r3, [r3, #4]
 800c828:	4a09      	ldr	r2, [pc, #36]	; (800c850 <prvHeapInit+0xbc>)
 800c82a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c82c:	4b09      	ldr	r3, [pc, #36]	; (800c854 <prvHeapInit+0xc0>)
 800c82e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c832:	601a      	str	r2, [r3, #0]
}
 800c834:	bf00      	nop
 800c836:	3714      	adds	r7, #20
 800c838:	46bd      	mov	sp, r7
 800c83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83e:	4770      	bx	lr
 800c840:	20001078 	.word	0x20001078
 800c844:	20004c78 	.word	0x20004c78
 800c848:	20004c80 	.word	0x20004c80
 800c84c:	20004c88 	.word	0x20004c88
 800c850:	20004c84 	.word	0x20004c84
 800c854:	20004c94 	.word	0x20004c94

0800c858 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c858:	b480      	push	{r7}
 800c85a:	b085      	sub	sp, #20
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c860:	4b28      	ldr	r3, [pc, #160]	; (800c904 <prvInsertBlockIntoFreeList+0xac>)
 800c862:	60fb      	str	r3, [r7, #12]
 800c864:	e002      	b.n	800c86c <prvInsertBlockIntoFreeList+0x14>
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	60fb      	str	r3, [r7, #12]
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	687a      	ldr	r2, [r7, #4]
 800c872:	429a      	cmp	r2, r3
 800c874:	d8f7      	bhi.n	800c866 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	685b      	ldr	r3, [r3, #4]
 800c87e:	68ba      	ldr	r2, [r7, #8]
 800c880:	4413      	add	r3, r2
 800c882:	687a      	ldr	r2, [r7, #4]
 800c884:	429a      	cmp	r2, r3
 800c886:	d108      	bne.n	800c89a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	685a      	ldr	r2, [r3, #4]
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	685b      	ldr	r3, [r3, #4]
 800c890:	441a      	add	r2, r3
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	685b      	ldr	r3, [r3, #4]
 800c8a2:	68ba      	ldr	r2, [r7, #8]
 800c8a4:	441a      	add	r2, r3
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	429a      	cmp	r2, r3
 800c8ac:	d118      	bne.n	800c8e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	681a      	ldr	r2, [r3, #0]
 800c8b2:	4b15      	ldr	r3, [pc, #84]	; (800c908 <prvInsertBlockIntoFreeList+0xb0>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	429a      	cmp	r2, r3
 800c8b8:	d00d      	beq.n	800c8d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	685a      	ldr	r2, [r3, #4]
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	685b      	ldr	r3, [r3, #4]
 800c8c4:	441a      	add	r2, r3
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	681a      	ldr	r2, [r3, #0]
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	601a      	str	r2, [r3, #0]
 800c8d4:	e008      	b.n	800c8e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c8d6:	4b0c      	ldr	r3, [pc, #48]	; (800c908 <prvInsertBlockIntoFreeList+0xb0>)
 800c8d8:	681a      	ldr	r2, [r3, #0]
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	601a      	str	r2, [r3, #0]
 800c8de:	e003      	b.n	800c8e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	681a      	ldr	r2, [r3, #0]
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c8e8:	68fa      	ldr	r2, [r7, #12]
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	429a      	cmp	r2, r3
 800c8ee:	d002      	beq.n	800c8f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	687a      	ldr	r2, [r7, #4]
 800c8f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c8f6:	bf00      	nop
 800c8f8:	3714      	adds	r7, #20
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c900:	4770      	bx	lr
 800c902:	bf00      	nop
 800c904:	20004c78 	.word	0x20004c78
 800c908:	20004c80 	.word	0x20004c80

0800c90c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800c910:	2201      	movs	r2, #1
 800c912:	490e      	ldr	r1, [pc, #56]	; (800c94c <MX_USB_HOST_Init+0x40>)
 800c914:	480e      	ldr	r0, [pc, #56]	; (800c950 <MX_USB_HOST_Init+0x44>)
 800c916:	f7fb f915 	bl	8007b44 <USBH_Init>
 800c91a:	4603      	mov	r3, r0
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d001      	beq.n	800c924 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c920:	f7f4 fac8 	bl	8000eb4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800c924:	490b      	ldr	r1, [pc, #44]	; (800c954 <MX_USB_HOST_Init+0x48>)
 800c926:	480a      	ldr	r0, [pc, #40]	; (800c950 <MX_USB_HOST_Init+0x44>)
 800c928:	f7fb f9bc 	bl	8007ca4 <USBH_RegisterClass>
 800c92c:	4603      	mov	r3, r0
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d001      	beq.n	800c936 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c932:	f7f4 fabf 	bl	8000eb4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800c936:	4806      	ldr	r0, [pc, #24]	; (800c950 <MX_USB_HOST_Init+0x44>)
 800c938:	f7fb fa40 	bl	8007dbc <USBH_Start>
 800c93c:	4603      	mov	r3, r0
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d001      	beq.n	800c946 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c942:	f7f4 fab7 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c946:	bf00      	nop
 800c948:	bd80      	pop	{r7, pc}
 800c94a:	bf00      	nop
 800c94c:	0800c959 	.word	0x0800c959
 800c950:	20004c98 	.word	0x20004c98
 800c954:	2000000c 	.word	0x2000000c

0800c958 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c958:	b480      	push	{r7}
 800c95a:	b083      	sub	sp, #12
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
 800c960:	460b      	mov	r3, r1
 800c962:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c964:	78fb      	ldrb	r3, [r7, #3]
 800c966:	3b01      	subs	r3, #1
 800c968:	2b04      	cmp	r3, #4
 800c96a:	d819      	bhi.n	800c9a0 <USBH_UserProcess+0x48>
 800c96c:	a201      	add	r2, pc, #4	; (adr r2, 800c974 <USBH_UserProcess+0x1c>)
 800c96e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c972:	bf00      	nop
 800c974:	0800c9a1 	.word	0x0800c9a1
 800c978:	0800c991 	.word	0x0800c991
 800c97c:	0800c9a1 	.word	0x0800c9a1
 800c980:	0800c999 	.word	0x0800c999
 800c984:	0800c989 	.word	0x0800c989
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c988:	4b09      	ldr	r3, [pc, #36]	; (800c9b0 <USBH_UserProcess+0x58>)
 800c98a:	2203      	movs	r2, #3
 800c98c:	701a      	strb	r2, [r3, #0]
  break;
 800c98e:	e008      	b.n	800c9a2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c990:	4b07      	ldr	r3, [pc, #28]	; (800c9b0 <USBH_UserProcess+0x58>)
 800c992:	2202      	movs	r2, #2
 800c994:	701a      	strb	r2, [r3, #0]
  break;
 800c996:	e004      	b.n	800c9a2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c998:	4b05      	ldr	r3, [pc, #20]	; (800c9b0 <USBH_UserProcess+0x58>)
 800c99a:	2201      	movs	r2, #1
 800c99c:	701a      	strb	r2, [r3, #0]
  break;
 800c99e:	e000      	b.n	800c9a2 <USBH_UserProcess+0x4a>

  default:
  break;
 800c9a0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c9a2:	bf00      	nop
 800c9a4:	370c      	adds	r7, #12
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ac:	4770      	bx	lr
 800c9ae:	bf00      	nop
 800c9b0:	2000507c 	.word	0x2000507c

0800c9b4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b08a      	sub	sp, #40	; 0x28
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c9bc:	f107 0314 	add.w	r3, r7, #20
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	601a      	str	r2, [r3, #0]
 800c9c4:	605a      	str	r2, [r3, #4]
 800c9c6:	609a      	str	r2, [r3, #8]
 800c9c8:	60da      	str	r2, [r3, #12]
 800c9ca:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c9d4:	d147      	bne.n	800ca66 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	613b      	str	r3, [r7, #16]
 800c9da:	4b25      	ldr	r3, [pc, #148]	; (800ca70 <HAL_HCD_MspInit+0xbc>)
 800c9dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9de:	4a24      	ldr	r2, [pc, #144]	; (800ca70 <HAL_HCD_MspInit+0xbc>)
 800c9e0:	f043 0301 	orr.w	r3, r3, #1
 800c9e4:	6313      	str	r3, [r2, #48]	; 0x30
 800c9e6:	4b22      	ldr	r3, [pc, #136]	; (800ca70 <HAL_HCD_MspInit+0xbc>)
 800c9e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9ea:	f003 0301 	and.w	r3, r3, #1
 800c9ee:	613b      	str	r3, [r7, #16]
 800c9f0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800c9f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c9f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800ca00:	f107 0314 	add.w	r3, r7, #20
 800ca04:	4619      	mov	r1, r3
 800ca06:	481b      	ldr	r0, [pc, #108]	; (800ca74 <HAL_HCD_MspInit+0xc0>)
 800ca08:	f7f5 f9fe 	bl	8001e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800ca0c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800ca10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ca12:	2302      	movs	r3, #2
 800ca14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca16:	2300      	movs	r3, #0
 800ca18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ca1e:	230a      	movs	r3, #10
 800ca20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ca22:	f107 0314 	add.w	r3, r7, #20
 800ca26:	4619      	mov	r1, r3
 800ca28:	4812      	ldr	r0, [pc, #72]	; (800ca74 <HAL_HCD_MspInit+0xc0>)
 800ca2a:	f7f5 f9ed 	bl	8001e08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ca2e:	4b10      	ldr	r3, [pc, #64]	; (800ca70 <HAL_HCD_MspInit+0xbc>)
 800ca30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca32:	4a0f      	ldr	r2, [pc, #60]	; (800ca70 <HAL_HCD_MspInit+0xbc>)
 800ca34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca38:	6353      	str	r3, [r2, #52]	; 0x34
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	60fb      	str	r3, [r7, #12]
 800ca3e:	4b0c      	ldr	r3, [pc, #48]	; (800ca70 <HAL_HCD_MspInit+0xbc>)
 800ca40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca42:	4a0b      	ldr	r2, [pc, #44]	; (800ca70 <HAL_HCD_MspInit+0xbc>)
 800ca44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ca48:	6453      	str	r3, [r2, #68]	; 0x44
 800ca4a:	4b09      	ldr	r3, [pc, #36]	; (800ca70 <HAL_HCD_MspInit+0xbc>)
 800ca4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ca52:	60fb      	str	r3, [r7, #12]
 800ca54:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800ca56:	2200      	movs	r2, #0
 800ca58:	2105      	movs	r1, #5
 800ca5a:	2043      	movs	r0, #67	; 0x43
 800ca5c:	f7f5 f9aa 	bl	8001db4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ca60:	2043      	movs	r0, #67	; 0x43
 800ca62:	f7f5 f9c3 	bl	8001dec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ca66:	bf00      	nop
 800ca68:	3728      	adds	r7, #40	; 0x28
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	bd80      	pop	{r7, pc}
 800ca6e:	bf00      	nop
 800ca70:	40023800 	.word	0x40023800
 800ca74:	40020000 	.word	0x40020000

0800ca78 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b082      	sub	sp, #8
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ca86:	4618      	mov	r0, r3
 800ca88:	f7fb fe4f 	bl	800872a <USBH_LL_IncTimer>
}
 800ca8c:	bf00      	nop
 800ca8e:	3708      	adds	r7, #8
 800ca90:	46bd      	mov	sp, r7
 800ca92:	bd80      	pop	{r7, pc}

0800ca94 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b082      	sub	sp, #8
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800caa2:	4618      	mov	r0, r3
 800caa4:	f7fb fe93 	bl	80087ce <USBH_LL_Connect>
}
 800caa8:	bf00      	nop
 800caaa:	3708      	adds	r7, #8
 800caac:	46bd      	mov	sp, r7
 800caae:	bd80      	pop	{r7, pc}

0800cab0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b082      	sub	sp, #8
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cabe:	4618      	mov	r0, r3
 800cac0:	f7fb fea8 	bl	8008814 <USBH_LL_Disconnect>
}
 800cac4:	bf00      	nop
 800cac6:	3708      	adds	r7, #8
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}

0800cacc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b082      	sub	sp, #8
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
 800cad4:	460b      	mov	r3, r1
 800cad6:	70fb      	strb	r3, [r7, #3]
 800cad8:	4613      	mov	r3, r2
 800cada:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cae2:	4618      	mov	r0, r3
 800cae4:	f7fb fedf 	bl	80088a6 <USBH_LL_NotifyURBChange>
#endif
}
 800cae8:	bf00      	nop
 800caea:	3708      	adds	r7, #8
 800caec:	46bd      	mov	sp, r7
 800caee:	bd80      	pop	{r7, pc}

0800caf0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b082      	sub	sp, #8
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cafe:	4618      	mov	r0, r3
 800cb00:	f7fb fe3d 	bl	800877e <USBH_LL_PortEnabled>
}
 800cb04:	bf00      	nop
 800cb06:	3708      	adds	r7, #8
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	bd80      	pop	{r7, pc}

0800cb0c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b082      	sub	sp, #8
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f7fb fe49 	bl	80087b2 <USBH_LL_PortDisabled>
}
 800cb20:	bf00      	nop
 800cb22:	3708      	adds	r7, #8
 800cb24:	46bd      	mov	sp, r7
 800cb26:	bd80      	pop	{r7, pc}

0800cb28 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b082      	sub	sp, #8
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800cb36:	2b01      	cmp	r3, #1
 800cb38:	d12a      	bne.n	800cb90 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800cb3a:	4a18      	ldr	r2, [pc, #96]	; (800cb9c <USBH_LL_Init+0x74>)
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	4a15      	ldr	r2, [pc, #84]	; (800cb9c <USBH_LL_Init+0x74>)
 800cb46:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cb4a:	4b14      	ldr	r3, [pc, #80]	; (800cb9c <USBH_LL_Init+0x74>)
 800cb4c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800cb50:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800cb52:	4b12      	ldr	r3, [pc, #72]	; (800cb9c <USBH_LL_Init+0x74>)
 800cb54:	2208      	movs	r2, #8
 800cb56:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800cb58:	4b10      	ldr	r3, [pc, #64]	; (800cb9c <USBH_LL_Init+0x74>)
 800cb5a:	2201      	movs	r2, #1
 800cb5c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cb5e:	4b0f      	ldr	r3, [pc, #60]	; (800cb9c <USBH_LL_Init+0x74>)
 800cb60:	2200      	movs	r2, #0
 800cb62:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800cb64:	4b0d      	ldr	r3, [pc, #52]	; (800cb9c <USBH_LL_Init+0x74>)
 800cb66:	2202      	movs	r2, #2
 800cb68:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800cb6a:	4b0c      	ldr	r3, [pc, #48]	; (800cb9c <USBH_LL_Init+0x74>)
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800cb70:	480a      	ldr	r0, [pc, #40]	; (800cb9c <USBH_LL_Init+0x74>)
 800cb72:	f7f5 fb16 	bl	80021a2 <HAL_HCD_Init>
 800cb76:	4603      	mov	r3, r0
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d001      	beq.n	800cb80 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800cb7c:	f7f4 f99a 	bl	8000eb4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800cb80:	4806      	ldr	r0, [pc, #24]	; (800cb9c <USBH_LL_Init+0x74>)
 800cb82:	f7f5 fefa 	bl	800297a <HAL_HCD_GetCurrentFrame>
 800cb86:	4603      	mov	r3, r0
 800cb88:	4619      	mov	r1, r3
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f7fb fdbe 	bl	800870c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800cb90:	2300      	movs	r3, #0
}
 800cb92:	4618      	mov	r0, r3
 800cb94:	3708      	adds	r7, #8
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd80      	pop	{r7, pc}
 800cb9a:	bf00      	nop
 800cb9c:	20005080 	.word	0x20005080

0800cba0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b084      	sub	sp, #16
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cba8:	2300      	movs	r3, #0
 800cbaa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cbac:	2300      	movs	r3, #0
 800cbae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	f7f5 fe69 	bl	800288e <HAL_HCD_Start>
 800cbbc:	4603      	mov	r3, r0
 800cbbe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cbc0:	7bfb      	ldrb	r3, [r7, #15]
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	f000 f95c 	bl	800ce80 <USBH_Get_USB_Status>
 800cbc8:	4603      	mov	r3, r0
 800cbca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cbcc:	7bbb      	ldrb	r3, [r7, #14]
}
 800cbce:	4618      	mov	r0, r3
 800cbd0:	3710      	adds	r7, #16
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	bd80      	pop	{r7, pc}

0800cbd6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800cbd6:	b580      	push	{r7, lr}
 800cbd8:	b084      	sub	sp, #16
 800cbda:	af00      	add	r7, sp, #0
 800cbdc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbde:	2300      	movs	r3, #0
 800cbe0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cbec:	4618      	mov	r0, r3
 800cbee:	f7f5 fe71 	bl	80028d4 <HAL_HCD_Stop>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cbf6:	7bfb      	ldrb	r3, [r7, #15]
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	f000 f941 	bl	800ce80 <USBH_Get_USB_Status>
 800cbfe:	4603      	mov	r3, r0
 800cc00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc02:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc04:	4618      	mov	r0, r3
 800cc06:	3710      	adds	r7, #16
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd80      	pop	{r7, pc}

0800cc0c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b084      	sub	sp, #16
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800cc14:	2301      	movs	r3, #1
 800cc16:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cc1e:	4618      	mov	r0, r3
 800cc20:	f7f5 feb9 	bl	8002996 <HAL_HCD_GetCurrentSpeed>
 800cc24:	4603      	mov	r3, r0
 800cc26:	2b02      	cmp	r3, #2
 800cc28:	d00c      	beq.n	800cc44 <USBH_LL_GetSpeed+0x38>
 800cc2a:	2b02      	cmp	r3, #2
 800cc2c:	d80d      	bhi.n	800cc4a <USBH_LL_GetSpeed+0x3e>
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d002      	beq.n	800cc38 <USBH_LL_GetSpeed+0x2c>
 800cc32:	2b01      	cmp	r3, #1
 800cc34:	d003      	beq.n	800cc3e <USBH_LL_GetSpeed+0x32>
 800cc36:	e008      	b.n	800cc4a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	73fb      	strb	r3, [r7, #15]
    break;
 800cc3c:	e008      	b.n	800cc50 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800cc3e:	2301      	movs	r3, #1
 800cc40:	73fb      	strb	r3, [r7, #15]
    break;
 800cc42:	e005      	b.n	800cc50 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800cc44:	2302      	movs	r3, #2
 800cc46:	73fb      	strb	r3, [r7, #15]
    break;
 800cc48:	e002      	b.n	800cc50 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	73fb      	strb	r3, [r7, #15]
    break;
 800cc4e:	bf00      	nop
  }
  return  speed;
 800cc50:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc52:	4618      	mov	r0, r3
 800cc54:	3710      	adds	r7, #16
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}

0800cc5a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800cc5a:	b580      	push	{r7, lr}
 800cc5c:	b084      	sub	sp, #16
 800cc5e:	af00      	add	r7, sp, #0
 800cc60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc62:	2300      	movs	r3, #0
 800cc64:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cc66:	2300      	movs	r3, #0
 800cc68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cc70:	4618      	mov	r0, r3
 800cc72:	f7f5 fe4c 	bl	800290e <HAL_HCD_ResetPort>
 800cc76:	4603      	mov	r3, r0
 800cc78:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cc7a:	7bfb      	ldrb	r3, [r7, #15]
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f000 f8ff 	bl	800ce80 <USBH_Get_USB_Status>
 800cc82:	4603      	mov	r3, r0
 800cc84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc86:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc88:	4618      	mov	r0, r3
 800cc8a:	3710      	adds	r7, #16
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bd80      	pop	{r7, pc}

0800cc90 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b082      	sub	sp, #8
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
 800cc98:	460b      	mov	r3, r1
 800cc9a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cca2:	78fa      	ldrb	r2, [r7, #3]
 800cca4:	4611      	mov	r1, r2
 800cca6:	4618      	mov	r0, r3
 800cca8:	f7f5 fe53 	bl	8002952 <HAL_HCD_HC_GetXferCount>
 800ccac:	4603      	mov	r3, r0
}
 800ccae:	4618      	mov	r0, r3
 800ccb0:	3708      	adds	r7, #8
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	bd80      	pop	{r7, pc}

0800ccb6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ccb6:	b590      	push	{r4, r7, lr}
 800ccb8:	b089      	sub	sp, #36	; 0x24
 800ccba:	af04      	add	r7, sp, #16
 800ccbc:	6078      	str	r0, [r7, #4]
 800ccbe:	4608      	mov	r0, r1
 800ccc0:	4611      	mov	r1, r2
 800ccc2:	461a      	mov	r2, r3
 800ccc4:	4603      	mov	r3, r0
 800ccc6:	70fb      	strb	r3, [r7, #3]
 800ccc8:	460b      	mov	r3, r1
 800ccca:	70bb      	strb	r3, [r7, #2]
 800cccc:	4613      	mov	r3, r2
 800ccce:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ccde:	787c      	ldrb	r4, [r7, #1]
 800cce0:	78ba      	ldrb	r2, [r7, #2]
 800cce2:	78f9      	ldrb	r1, [r7, #3]
 800cce4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cce6:	9302      	str	r3, [sp, #8]
 800cce8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ccec:	9301      	str	r3, [sp, #4]
 800ccee:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ccf2:	9300      	str	r3, [sp, #0]
 800ccf4:	4623      	mov	r3, r4
 800ccf6:	f7f5 fab6 	bl	8002266 <HAL_HCD_HC_Init>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ccfe:	7bfb      	ldrb	r3, [r7, #15]
 800cd00:	4618      	mov	r0, r3
 800cd02:	f000 f8bd 	bl	800ce80 <USBH_Get_USB_Status>
 800cd06:	4603      	mov	r3, r0
 800cd08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd0a:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	3714      	adds	r7, #20
 800cd10:	46bd      	mov	sp, r7
 800cd12:	bd90      	pop	{r4, r7, pc}

0800cd14 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b084      	sub	sp, #16
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
 800cd1c:	460b      	mov	r3, r1
 800cd1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd20:	2300      	movs	r3, #0
 800cd22:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cd24:	2300      	movs	r3, #0
 800cd26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cd2e:	78fa      	ldrb	r2, [r7, #3]
 800cd30:	4611      	mov	r1, r2
 800cd32:	4618      	mov	r0, r3
 800cd34:	f7f5 fb26 	bl	8002384 <HAL_HCD_HC_Halt>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cd3c:	7bfb      	ldrb	r3, [r7, #15]
 800cd3e:	4618      	mov	r0, r3
 800cd40:	f000 f89e 	bl	800ce80 <USBH_Get_USB_Status>
 800cd44:	4603      	mov	r3, r0
 800cd46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd48:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	3710      	adds	r7, #16
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	bd80      	pop	{r7, pc}

0800cd52 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800cd52:	b590      	push	{r4, r7, lr}
 800cd54:	b089      	sub	sp, #36	; 0x24
 800cd56:	af04      	add	r7, sp, #16
 800cd58:	6078      	str	r0, [r7, #4]
 800cd5a:	4608      	mov	r0, r1
 800cd5c:	4611      	mov	r1, r2
 800cd5e:	461a      	mov	r2, r3
 800cd60:	4603      	mov	r3, r0
 800cd62:	70fb      	strb	r3, [r7, #3]
 800cd64:	460b      	mov	r3, r1
 800cd66:	70bb      	strb	r3, [r7, #2]
 800cd68:	4613      	mov	r3, r2
 800cd6a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cd70:	2300      	movs	r3, #0
 800cd72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800cd7a:	787c      	ldrb	r4, [r7, #1]
 800cd7c:	78ba      	ldrb	r2, [r7, #2]
 800cd7e:	78f9      	ldrb	r1, [r7, #3]
 800cd80:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800cd84:	9303      	str	r3, [sp, #12]
 800cd86:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cd88:	9302      	str	r3, [sp, #8]
 800cd8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd8c:	9301      	str	r3, [sp, #4]
 800cd8e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cd92:	9300      	str	r3, [sp, #0]
 800cd94:	4623      	mov	r3, r4
 800cd96:	f7f5 fb19 	bl	80023cc <HAL_HCD_HC_SubmitRequest>
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800cd9e:	7bfb      	ldrb	r3, [r7, #15]
 800cda0:	4618      	mov	r0, r3
 800cda2:	f000 f86d 	bl	800ce80 <USBH_Get_USB_Status>
 800cda6:	4603      	mov	r3, r0
 800cda8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cdaa:	7bbb      	ldrb	r3, [r7, #14]
}
 800cdac:	4618      	mov	r0, r3
 800cdae:	3714      	adds	r7, #20
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	bd90      	pop	{r4, r7, pc}

0800cdb4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b082      	sub	sp, #8
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
 800cdbc:	460b      	mov	r3, r1
 800cdbe:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cdc6:	78fa      	ldrb	r2, [r7, #3]
 800cdc8:	4611      	mov	r1, r2
 800cdca:	4618      	mov	r0, r3
 800cdcc:	f7f5 fdad 	bl	800292a <HAL_HCD_HC_GetURBState>
 800cdd0:	4603      	mov	r3, r0
}
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	3708      	adds	r7, #8
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bd80      	pop	{r7, pc}

0800cdda <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800cdda:	b580      	push	{r7, lr}
 800cddc:	b082      	sub	sp, #8
 800cdde:	af00      	add	r7, sp, #0
 800cde0:	6078      	str	r0, [r7, #4]
 800cde2:	460b      	mov	r3, r1
 800cde4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800cdec:	2b01      	cmp	r3, #1
 800cdee:	d103      	bne.n	800cdf8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800cdf0:	78fb      	ldrb	r3, [r7, #3]
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	f000 f870 	bl	800ced8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800cdf8:	20c8      	movs	r0, #200	; 0xc8
 800cdfa:	f7f4 feff 	bl	8001bfc <HAL_Delay>
  return USBH_OK;
 800cdfe:	2300      	movs	r3, #0
}
 800ce00:	4618      	mov	r0, r3
 800ce02:	3708      	adds	r7, #8
 800ce04:	46bd      	mov	sp, r7
 800ce06:	bd80      	pop	{r7, pc}

0800ce08 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ce08:	b480      	push	{r7}
 800ce0a:	b085      	sub	sp, #20
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
 800ce10:	460b      	mov	r3, r1
 800ce12:	70fb      	strb	r3, [r7, #3]
 800ce14:	4613      	mov	r3, r2
 800ce16:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ce1e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ce20:	78fb      	ldrb	r3, [r7, #3]
 800ce22:	68fa      	ldr	r2, [r7, #12]
 800ce24:	212c      	movs	r1, #44	; 0x2c
 800ce26:	fb01 f303 	mul.w	r3, r1, r3
 800ce2a:	4413      	add	r3, r2
 800ce2c:	333b      	adds	r3, #59	; 0x3b
 800ce2e:	781b      	ldrb	r3, [r3, #0]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d009      	beq.n	800ce48 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ce34:	78fb      	ldrb	r3, [r7, #3]
 800ce36:	68fa      	ldr	r2, [r7, #12]
 800ce38:	212c      	movs	r1, #44	; 0x2c
 800ce3a:	fb01 f303 	mul.w	r3, r1, r3
 800ce3e:	4413      	add	r3, r2
 800ce40:	3354      	adds	r3, #84	; 0x54
 800ce42:	78ba      	ldrb	r2, [r7, #2]
 800ce44:	701a      	strb	r2, [r3, #0]
 800ce46:	e008      	b.n	800ce5a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800ce48:	78fb      	ldrb	r3, [r7, #3]
 800ce4a:	68fa      	ldr	r2, [r7, #12]
 800ce4c:	212c      	movs	r1, #44	; 0x2c
 800ce4e:	fb01 f303 	mul.w	r3, r1, r3
 800ce52:	4413      	add	r3, r2
 800ce54:	3355      	adds	r3, #85	; 0x55
 800ce56:	78ba      	ldrb	r2, [r7, #2]
 800ce58:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800ce5a:	2300      	movs	r3, #0
}
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	3714      	adds	r7, #20
 800ce60:	46bd      	mov	sp, r7
 800ce62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce66:	4770      	bx	lr

0800ce68 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b082      	sub	sp, #8
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ce70:	6878      	ldr	r0, [r7, #4]
 800ce72:	f7f4 fec3 	bl	8001bfc <HAL_Delay>
}
 800ce76:	bf00      	nop
 800ce78:	3708      	adds	r7, #8
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bd80      	pop	{r7, pc}
	...

0800ce80 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ce80:	b480      	push	{r7}
 800ce82:	b085      	sub	sp, #20
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	4603      	mov	r3, r0
 800ce88:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ce8e:	79fb      	ldrb	r3, [r7, #7]
 800ce90:	2b03      	cmp	r3, #3
 800ce92:	d817      	bhi.n	800cec4 <USBH_Get_USB_Status+0x44>
 800ce94:	a201      	add	r2, pc, #4	; (adr r2, 800ce9c <USBH_Get_USB_Status+0x1c>)
 800ce96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce9a:	bf00      	nop
 800ce9c:	0800cead 	.word	0x0800cead
 800cea0:	0800ceb3 	.word	0x0800ceb3
 800cea4:	0800ceb9 	.word	0x0800ceb9
 800cea8:	0800cebf 	.word	0x0800cebf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ceac:	2300      	movs	r3, #0
 800ceae:	73fb      	strb	r3, [r7, #15]
    break;
 800ceb0:	e00b      	b.n	800ceca <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ceb2:	2302      	movs	r3, #2
 800ceb4:	73fb      	strb	r3, [r7, #15]
    break;
 800ceb6:	e008      	b.n	800ceca <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ceb8:	2301      	movs	r3, #1
 800ceba:	73fb      	strb	r3, [r7, #15]
    break;
 800cebc:	e005      	b.n	800ceca <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800cebe:	2302      	movs	r3, #2
 800cec0:	73fb      	strb	r3, [r7, #15]
    break;
 800cec2:	e002      	b.n	800ceca <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800cec4:	2302      	movs	r3, #2
 800cec6:	73fb      	strb	r3, [r7, #15]
    break;
 800cec8:	bf00      	nop
  }
  return usb_status;
 800ceca:	7bfb      	ldrb	r3, [r7, #15]
}
 800cecc:	4618      	mov	r0, r3
 800cece:	3714      	adds	r7, #20
 800ced0:	46bd      	mov	sp, r7
 800ced2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced6:	4770      	bx	lr

0800ced8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b084      	sub	sp, #16
 800cedc:	af00      	add	r7, sp, #0
 800cede:	4603      	mov	r3, r0
 800cee0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800cee2:	79fb      	ldrb	r3, [r7, #7]
 800cee4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800cee6:	79fb      	ldrb	r3, [r7, #7]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d102      	bne.n	800cef2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800ceec:	2300      	movs	r3, #0
 800ceee:	73fb      	strb	r3, [r7, #15]
 800cef0:	e001      	b.n	800cef6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800cef2:	2301      	movs	r3, #1
 800cef4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800cef6:	7bfb      	ldrb	r3, [r7, #15]
 800cef8:	461a      	mov	r2, r3
 800cefa:	2101      	movs	r1, #1
 800cefc:	4803      	ldr	r0, [pc, #12]	; (800cf0c <MX_DriverVbusFS+0x34>)
 800cefe:	f7f5 f937 	bl	8002170 <HAL_GPIO_WritePin>
}
 800cf02:	bf00      	nop
 800cf04:	3710      	adds	r7, #16
 800cf06:	46bd      	mov	sp, r7
 800cf08:	bd80      	pop	{r7, pc}
 800cf0a:	bf00      	nop
 800cf0c:	40020800 	.word	0x40020800

0800cf10 <malloc>:
 800cf10:	4b02      	ldr	r3, [pc, #8]	; (800cf1c <malloc+0xc>)
 800cf12:	4601      	mov	r1, r0
 800cf14:	6818      	ldr	r0, [r3, #0]
 800cf16:	f000 b82b 	b.w	800cf70 <_malloc_r>
 800cf1a:	bf00      	nop
 800cf1c:	2000007c 	.word	0x2000007c

0800cf20 <free>:
 800cf20:	4b02      	ldr	r3, [pc, #8]	; (800cf2c <free+0xc>)
 800cf22:	4601      	mov	r1, r0
 800cf24:	6818      	ldr	r0, [r3, #0]
 800cf26:	f000 b9a7 	b.w	800d278 <_free_r>
 800cf2a:	bf00      	nop
 800cf2c:	2000007c 	.word	0x2000007c

0800cf30 <sbrk_aligned>:
 800cf30:	b570      	push	{r4, r5, r6, lr}
 800cf32:	4e0e      	ldr	r6, [pc, #56]	; (800cf6c <sbrk_aligned+0x3c>)
 800cf34:	460c      	mov	r4, r1
 800cf36:	6831      	ldr	r1, [r6, #0]
 800cf38:	4605      	mov	r5, r0
 800cf3a:	b911      	cbnz	r1, 800cf42 <sbrk_aligned+0x12>
 800cf3c:	f000 f94a 	bl	800d1d4 <_sbrk_r>
 800cf40:	6030      	str	r0, [r6, #0]
 800cf42:	4621      	mov	r1, r4
 800cf44:	4628      	mov	r0, r5
 800cf46:	f000 f945 	bl	800d1d4 <_sbrk_r>
 800cf4a:	1c43      	adds	r3, r0, #1
 800cf4c:	d00a      	beq.n	800cf64 <sbrk_aligned+0x34>
 800cf4e:	1cc4      	adds	r4, r0, #3
 800cf50:	f024 0403 	bic.w	r4, r4, #3
 800cf54:	42a0      	cmp	r0, r4
 800cf56:	d007      	beq.n	800cf68 <sbrk_aligned+0x38>
 800cf58:	1a21      	subs	r1, r4, r0
 800cf5a:	4628      	mov	r0, r5
 800cf5c:	f000 f93a 	bl	800d1d4 <_sbrk_r>
 800cf60:	3001      	adds	r0, #1
 800cf62:	d101      	bne.n	800cf68 <sbrk_aligned+0x38>
 800cf64:	f04f 34ff 	mov.w	r4, #4294967295
 800cf68:	4620      	mov	r0, r4
 800cf6a:	bd70      	pop	{r4, r5, r6, pc}
 800cf6c:	20005388 	.word	0x20005388

0800cf70 <_malloc_r>:
 800cf70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf74:	1ccd      	adds	r5, r1, #3
 800cf76:	f025 0503 	bic.w	r5, r5, #3
 800cf7a:	3508      	adds	r5, #8
 800cf7c:	2d0c      	cmp	r5, #12
 800cf7e:	bf38      	it	cc
 800cf80:	250c      	movcc	r5, #12
 800cf82:	2d00      	cmp	r5, #0
 800cf84:	4607      	mov	r7, r0
 800cf86:	db01      	blt.n	800cf8c <_malloc_r+0x1c>
 800cf88:	42a9      	cmp	r1, r5
 800cf8a:	d905      	bls.n	800cf98 <_malloc_r+0x28>
 800cf8c:	230c      	movs	r3, #12
 800cf8e:	603b      	str	r3, [r7, #0]
 800cf90:	2600      	movs	r6, #0
 800cf92:	4630      	mov	r0, r6
 800cf94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf98:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d06c <_malloc_r+0xfc>
 800cf9c:	f000 f868 	bl	800d070 <__malloc_lock>
 800cfa0:	f8d8 3000 	ldr.w	r3, [r8]
 800cfa4:	461c      	mov	r4, r3
 800cfa6:	bb5c      	cbnz	r4, 800d000 <_malloc_r+0x90>
 800cfa8:	4629      	mov	r1, r5
 800cfaa:	4638      	mov	r0, r7
 800cfac:	f7ff ffc0 	bl	800cf30 <sbrk_aligned>
 800cfb0:	1c43      	adds	r3, r0, #1
 800cfb2:	4604      	mov	r4, r0
 800cfb4:	d155      	bne.n	800d062 <_malloc_r+0xf2>
 800cfb6:	f8d8 4000 	ldr.w	r4, [r8]
 800cfba:	4626      	mov	r6, r4
 800cfbc:	2e00      	cmp	r6, #0
 800cfbe:	d145      	bne.n	800d04c <_malloc_r+0xdc>
 800cfc0:	2c00      	cmp	r4, #0
 800cfc2:	d048      	beq.n	800d056 <_malloc_r+0xe6>
 800cfc4:	6823      	ldr	r3, [r4, #0]
 800cfc6:	4631      	mov	r1, r6
 800cfc8:	4638      	mov	r0, r7
 800cfca:	eb04 0903 	add.w	r9, r4, r3
 800cfce:	f000 f901 	bl	800d1d4 <_sbrk_r>
 800cfd2:	4581      	cmp	r9, r0
 800cfd4:	d13f      	bne.n	800d056 <_malloc_r+0xe6>
 800cfd6:	6821      	ldr	r1, [r4, #0]
 800cfd8:	1a6d      	subs	r5, r5, r1
 800cfda:	4629      	mov	r1, r5
 800cfdc:	4638      	mov	r0, r7
 800cfde:	f7ff ffa7 	bl	800cf30 <sbrk_aligned>
 800cfe2:	3001      	adds	r0, #1
 800cfe4:	d037      	beq.n	800d056 <_malloc_r+0xe6>
 800cfe6:	6823      	ldr	r3, [r4, #0]
 800cfe8:	442b      	add	r3, r5
 800cfea:	6023      	str	r3, [r4, #0]
 800cfec:	f8d8 3000 	ldr.w	r3, [r8]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d038      	beq.n	800d066 <_malloc_r+0xf6>
 800cff4:	685a      	ldr	r2, [r3, #4]
 800cff6:	42a2      	cmp	r2, r4
 800cff8:	d12b      	bne.n	800d052 <_malloc_r+0xe2>
 800cffa:	2200      	movs	r2, #0
 800cffc:	605a      	str	r2, [r3, #4]
 800cffe:	e00f      	b.n	800d020 <_malloc_r+0xb0>
 800d000:	6822      	ldr	r2, [r4, #0]
 800d002:	1b52      	subs	r2, r2, r5
 800d004:	d41f      	bmi.n	800d046 <_malloc_r+0xd6>
 800d006:	2a0b      	cmp	r2, #11
 800d008:	d917      	bls.n	800d03a <_malloc_r+0xca>
 800d00a:	1961      	adds	r1, r4, r5
 800d00c:	42a3      	cmp	r3, r4
 800d00e:	6025      	str	r5, [r4, #0]
 800d010:	bf18      	it	ne
 800d012:	6059      	strne	r1, [r3, #4]
 800d014:	6863      	ldr	r3, [r4, #4]
 800d016:	bf08      	it	eq
 800d018:	f8c8 1000 	streq.w	r1, [r8]
 800d01c:	5162      	str	r2, [r4, r5]
 800d01e:	604b      	str	r3, [r1, #4]
 800d020:	4638      	mov	r0, r7
 800d022:	f104 060b 	add.w	r6, r4, #11
 800d026:	f000 f829 	bl	800d07c <__malloc_unlock>
 800d02a:	f026 0607 	bic.w	r6, r6, #7
 800d02e:	1d23      	adds	r3, r4, #4
 800d030:	1af2      	subs	r2, r6, r3
 800d032:	d0ae      	beq.n	800cf92 <_malloc_r+0x22>
 800d034:	1b9b      	subs	r3, r3, r6
 800d036:	50a3      	str	r3, [r4, r2]
 800d038:	e7ab      	b.n	800cf92 <_malloc_r+0x22>
 800d03a:	42a3      	cmp	r3, r4
 800d03c:	6862      	ldr	r2, [r4, #4]
 800d03e:	d1dd      	bne.n	800cffc <_malloc_r+0x8c>
 800d040:	f8c8 2000 	str.w	r2, [r8]
 800d044:	e7ec      	b.n	800d020 <_malloc_r+0xb0>
 800d046:	4623      	mov	r3, r4
 800d048:	6864      	ldr	r4, [r4, #4]
 800d04a:	e7ac      	b.n	800cfa6 <_malloc_r+0x36>
 800d04c:	4634      	mov	r4, r6
 800d04e:	6876      	ldr	r6, [r6, #4]
 800d050:	e7b4      	b.n	800cfbc <_malloc_r+0x4c>
 800d052:	4613      	mov	r3, r2
 800d054:	e7cc      	b.n	800cff0 <_malloc_r+0x80>
 800d056:	230c      	movs	r3, #12
 800d058:	603b      	str	r3, [r7, #0]
 800d05a:	4638      	mov	r0, r7
 800d05c:	f000 f80e 	bl	800d07c <__malloc_unlock>
 800d060:	e797      	b.n	800cf92 <_malloc_r+0x22>
 800d062:	6025      	str	r5, [r4, #0]
 800d064:	e7dc      	b.n	800d020 <_malloc_r+0xb0>
 800d066:	605b      	str	r3, [r3, #4]
 800d068:	deff      	udf	#255	; 0xff
 800d06a:	bf00      	nop
 800d06c:	20005384 	.word	0x20005384

0800d070 <__malloc_lock>:
 800d070:	4801      	ldr	r0, [pc, #4]	; (800d078 <__malloc_lock+0x8>)
 800d072:	f000 b8e9 	b.w	800d248 <__retarget_lock_acquire_recursive>
 800d076:	bf00      	nop
 800d078:	200054c8 	.word	0x200054c8

0800d07c <__malloc_unlock>:
 800d07c:	4801      	ldr	r0, [pc, #4]	; (800d084 <__malloc_unlock+0x8>)
 800d07e:	f000 b8e4 	b.w	800d24a <__retarget_lock_release_recursive>
 800d082:	bf00      	nop
 800d084:	200054c8 	.word	0x200054c8

0800d088 <sniprintf>:
 800d088:	b40c      	push	{r2, r3}
 800d08a:	b530      	push	{r4, r5, lr}
 800d08c:	4b17      	ldr	r3, [pc, #92]	; (800d0ec <sniprintf+0x64>)
 800d08e:	1e0c      	subs	r4, r1, #0
 800d090:	681d      	ldr	r5, [r3, #0]
 800d092:	b09d      	sub	sp, #116	; 0x74
 800d094:	da08      	bge.n	800d0a8 <sniprintf+0x20>
 800d096:	238b      	movs	r3, #139	; 0x8b
 800d098:	602b      	str	r3, [r5, #0]
 800d09a:	f04f 30ff 	mov.w	r0, #4294967295
 800d09e:	b01d      	add	sp, #116	; 0x74
 800d0a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d0a4:	b002      	add	sp, #8
 800d0a6:	4770      	bx	lr
 800d0a8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d0ac:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d0b0:	bf14      	ite	ne
 800d0b2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d0b6:	4623      	moveq	r3, r4
 800d0b8:	9304      	str	r3, [sp, #16]
 800d0ba:	9307      	str	r3, [sp, #28]
 800d0bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d0c0:	9002      	str	r0, [sp, #8]
 800d0c2:	9006      	str	r0, [sp, #24]
 800d0c4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d0c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d0ca:	ab21      	add	r3, sp, #132	; 0x84
 800d0cc:	a902      	add	r1, sp, #8
 800d0ce:	4628      	mov	r0, r5
 800d0d0:	9301      	str	r3, [sp, #4]
 800d0d2:	f000 f977 	bl	800d3c4 <_svfiprintf_r>
 800d0d6:	1c43      	adds	r3, r0, #1
 800d0d8:	bfbc      	itt	lt
 800d0da:	238b      	movlt	r3, #139	; 0x8b
 800d0dc:	602b      	strlt	r3, [r5, #0]
 800d0de:	2c00      	cmp	r4, #0
 800d0e0:	d0dd      	beq.n	800d09e <sniprintf+0x16>
 800d0e2:	9b02      	ldr	r3, [sp, #8]
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	701a      	strb	r2, [r3, #0]
 800d0e8:	e7d9      	b.n	800d09e <sniprintf+0x16>
 800d0ea:	bf00      	nop
 800d0ec:	2000007c 	.word	0x2000007c

0800d0f0 <memset>:
 800d0f0:	4402      	add	r2, r0
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	4293      	cmp	r3, r2
 800d0f6:	d100      	bne.n	800d0fa <memset+0xa>
 800d0f8:	4770      	bx	lr
 800d0fa:	f803 1b01 	strb.w	r1, [r3], #1
 800d0fe:	e7f9      	b.n	800d0f4 <memset+0x4>

0800d100 <strncpy>:
 800d100:	b510      	push	{r4, lr}
 800d102:	3901      	subs	r1, #1
 800d104:	4603      	mov	r3, r0
 800d106:	b132      	cbz	r2, 800d116 <strncpy+0x16>
 800d108:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d10c:	f803 4b01 	strb.w	r4, [r3], #1
 800d110:	3a01      	subs	r2, #1
 800d112:	2c00      	cmp	r4, #0
 800d114:	d1f7      	bne.n	800d106 <strncpy+0x6>
 800d116:	441a      	add	r2, r3
 800d118:	2100      	movs	r1, #0
 800d11a:	4293      	cmp	r3, r2
 800d11c:	d100      	bne.n	800d120 <strncpy+0x20>
 800d11e:	bd10      	pop	{r4, pc}
 800d120:	f803 1b01 	strb.w	r1, [r3], #1
 800d124:	e7f9      	b.n	800d11a <strncpy+0x1a>
	...

0800d128 <_reclaim_reent>:
 800d128:	4b29      	ldr	r3, [pc, #164]	; (800d1d0 <_reclaim_reent+0xa8>)
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	4283      	cmp	r3, r0
 800d12e:	b570      	push	{r4, r5, r6, lr}
 800d130:	4604      	mov	r4, r0
 800d132:	d04b      	beq.n	800d1cc <_reclaim_reent+0xa4>
 800d134:	69c3      	ldr	r3, [r0, #28]
 800d136:	b143      	cbz	r3, 800d14a <_reclaim_reent+0x22>
 800d138:	68db      	ldr	r3, [r3, #12]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d144      	bne.n	800d1c8 <_reclaim_reent+0xa0>
 800d13e:	69e3      	ldr	r3, [r4, #28]
 800d140:	6819      	ldr	r1, [r3, #0]
 800d142:	b111      	cbz	r1, 800d14a <_reclaim_reent+0x22>
 800d144:	4620      	mov	r0, r4
 800d146:	f000 f897 	bl	800d278 <_free_r>
 800d14a:	6961      	ldr	r1, [r4, #20]
 800d14c:	b111      	cbz	r1, 800d154 <_reclaim_reent+0x2c>
 800d14e:	4620      	mov	r0, r4
 800d150:	f000 f892 	bl	800d278 <_free_r>
 800d154:	69e1      	ldr	r1, [r4, #28]
 800d156:	b111      	cbz	r1, 800d15e <_reclaim_reent+0x36>
 800d158:	4620      	mov	r0, r4
 800d15a:	f000 f88d 	bl	800d278 <_free_r>
 800d15e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d160:	b111      	cbz	r1, 800d168 <_reclaim_reent+0x40>
 800d162:	4620      	mov	r0, r4
 800d164:	f000 f888 	bl	800d278 <_free_r>
 800d168:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d16a:	b111      	cbz	r1, 800d172 <_reclaim_reent+0x4a>
 800d16c:	4620      	mov	r0, r4
 800d16e:	f000 f883 	bl	800d278 <_free_r>
 800d172:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d174:	b111      	cbz	r1, 800d17c <_reclaim_reent+0x54>
 800d176:	4620      	mov	r0, r4
 800d178:	f000 f87e 	bl	800d278 <_free_r>
 800d17c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d17e:	b111      	cbz	r1, 800d186 <_reclaim_reent+0x5e>
 800d180:	4620      	mov	r0, r4
 800d182:	f000 f879 	bl	800d278 <_free_r>
 800d186:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d188:	b111      	cbz	r1, 800d190 <_reclaim_reent+0x68>
 800d18a:	4620      	mov	r0, r4
 800d18c:	f000 f874 	bl	800d278 <_free_r>
 800d190:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d192:	b111      	cbz	r1, 800d19a <_reclaim_reent+0x72>
 800d194:	4620      	mov	r0, r4
 800d196:	f000 f86f 	bl	800d278 <_free_r>
 800d19a:	6a23      	ldr	r3, [r4, #32]
 800d19c:	b1b3      	cbz	r3, 800d1cc <_reclaim_reent+0xa4>
 800d19e:	4620      	mov	r0, r4
 800d1a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d1a4:	4718      	bx	r3
 800d1a6:	5949      	ldr	r1, [r1, r5]
 800d1a8:	b941      	cbnz	r1, 800d1bc <_reclaim_reent+0x94>
 800d1aa:	3504      	adds	r5, #4
 800d1ac:	69e3      	ldr	r3, [r4, #28]
 800d1ae:	2d80      	cmp	r5, #128	; 0x80
 800d1b0:	68d9      	ldr	r1, [r3, #12]
 800d1b2:	d1f8      	bne.n	800d1a6 <_reclaim_reent+0x7e>
 800d1b4:	4620      	mov	r0, r4
 800d1b6:	f000 f85f 	bl	800d278 <_free_r>
 800d1ba:	e7c0      	b.n	800d13e <_reclaim_reent+0x16>
 800d1bc:	680e      	ldr	r6, [r1, #0]
 800d1be:	4620      	mov	r0, r4
 800d1c0:	f000 f85a 	bl	800d278 <_free_r>
 800d1c4:	4631      	mov	r1, r6
 800d1c6:	e7ef      	b.n	800d1a8 <_reclaim_reent+0x80>
 800d1c8:	2500      	movs	r5, #0
 800d1ca:	e7ef      	b.n	800d1ac <_reclaim_reent+0x84>
 800d1cc:	bd70      	pop	{r4, r5, r6, pc}
 800d1ce:	bf00      	nop
 800d1d0:	2000007c 	.word	0x2000007c

0800d1d4 <_sbrk_r>:
 800d1d4:	b538      	push	{r3, r4, r5, lr}
 800d1d6:	4d06      	ldr	r5, [pc, #24]	; (800d1f0 <_sbrk_r+0x1c>)
 800d1d8:	2300      	movs	r3, #0
 800d1da:	4604      	mov	r4, r0
 800d1dc:	4608      	mov	r0, r1
 800d1de:	602b      	str	r3, [r5, #0]
 800d1e0:	f7f4 f8ca 	bl	8001378 <_sbrk>
 800d1e4:	1c43      	adds	r3, r0, #1
 800d1e6:	d102      	bne.n	800d1ee <_sbrk_r+0x1a>
 800d1e8:	682b      	ldr	r3, [r5, #0]
 800d1ea:	b103      	cbz	r3, 800d1ee <_sbrk_r+0x1a>
 800d1ec:	6023      	str	r3, [r4, #0]
 800d1ee:	bd38      	pop	{r3, r4, r5, pc}
 800d1f0:	200054c4 	.word	0x200054c4

0800d1f4 <__errno>:
 800d1f4:	4b01      	ldr	r3, [pc, #4]	; (800d1fc <__errno+0x8>)
 800d1f6:	6818      	ldr	r0, [r3, #0]
 800d1f8:	4770      	bx	lr
 800d1fa:	bf00      	nop
 800d1fc:	2000007c 	.word	0x2000007c

0800d200 <__libc_init_array>:
 800d200:	b570      	push	{r4, r5, r6, lr}
 800d202:	4d0d      	ldr	r5, [pc, #52]	; (800d238 <__libc_init_array+0x38>)
 800d204:	4c0d      	ldr	r4, [pc, #52]	; (800d23c <__libc_init_array+0x3c>)
 800d206:	1b64      	subs	r4, r4, r5
 800d208:	10a4      	asrs	r4, r4, #2
 800d20a:	2600      	movs	r6, #0
 800d20c:	42a6      	cmp	r6, r4
 800d20e:	d109      	bne.n	800d224 <__libc_init_array+0x24>
 800d210:	4d0b      	ldr	r5, [pc, #44]	; (800d240 <__libc_init_array+0x40>)
 800d212:	4c0c      	ldr	r4, [pc, #48]	; (800d244 <__libc_init_array+0x44>)
 800d214:	f000 fbb6 	bl	800d984 <_init>
 800d218:	1b64      	subs	r4, r4, r5
 800d21a:	10a4      	asrs	r4, r4, #2
 800d21c:	2600      	movs	r6, #0
 800d21e:	42a6      	cmp	r6, r4
 800d220:	d105      	bne.n	800d22e <__libc_init_array+0x2e>
 800d222:	bd70      	pop	{r4, r5, r6, pc}
 800d224:	f855 3b04 	ldr.w	r3, [r5], #4
 800d228:	4798      	blx	r3
 800d22a:	3601      	adds	r6, #1
 800d22c:	e7ee      	b.n	800d20c <__libc_init_array+0xc>
 800d22e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d232:	4798      	blx	r3
 800d234:	3601      	adds	r6, #1
 800d236:	e7f2      	b.n	800d21e <__libc_init_array+0x1e>
 800d238:	0800fb48 	.word	0x0800fb48
 800d23c:	0800fb48 	.word	0x0800fb48
 800d240:	0800fb48 	.word	0x0800fb48
 800d244:	0800fb4c 	.word	0x0800fb4c

0800d248 <__retarget_lock_acquire_recursive>:
 800d248:	4770      	bx	lr

0800d24a <__retarget_lock_release_recursive>:
 800d24a:	4770      	bx	lr

0800d24c <strcpy>:
 800d24c:	4603      	mov	r3, r0
 800d24e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d252:	f803 2b01 	strb.w	r2, [r3], #1
 800d256:	2a00      	cmp	r2, #0
 800d258:	d1f9      	bne.n	800d24e <strcpy+0x2>
 800d25a:	4770      	bx	lr

0800d25c <memcpy>:
 800d25c:	440a      	add	r2, r1
 800d25e:	4291      	cmp	r1, r2
 800d260:	f100 33ff 	add.w	r3, r0, #4294967295
 800d264:	d100      	bne.n	800d268 <memcpy+0xc>
 800d266:	4770      	bx	lr
 800d268:	b510      	push	{r4, lr}
 800d26a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d26e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d272:	4291      	cmp	r1, r2
 800d274:	d1f9      	bne.n	800d26a <memcpy+0xe>
 800d276:	bd10      	pop	{r4, pc}

0800d278 <_free_r>:
 800d278:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d27a:	2900      	cmp	r1, #0
 800d27c:	d044      	beq.n	800d308 <_free_r+0x90>
 800d27e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d282:	9001      	str	r0, [sp, #4]
 800d284:	2b00      	cmp	r3, #0
 800d286:	f1a1 0404 	sub.w	r4, r1, #4
 800d28a:	bfb8      	it	lt
 800d28c:	18e4      	addlt	r4, r4, r3
 800d28e:	f7ff feef 	bl	800d070 <__malloc_lock>
 800d292:	4a1e      	ldr	r2, [pc, #120]	; (800d30c <_free_r+0x94>)
 800d294:	9801      	ldr	r0, [sp, #4]
 800d296:	6813      	ldr	r3, [r2, #0]
 800d298:	b933      	cbnz	r3, 800d2a8 <_free_r+0x30>
 800d29a:	6063      	str	r3, [r4, #4]
 800d29c:	6014      	str	r4, [r2, #0]
 800d29e:	b003      	add	sp, #12
 800d2a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d2a4:	f7ff beea 	b.w	800d07c <__malloc_unlock>
 800d2a8:	42a3      	cmp	r3, r4
 800d2aa:	d908      	bls.n	800d2be <_free_r+0x46>
 800d2ac:	6825      	ldr	r5, [r4, #0]
 800d2ae:	1961      	adds	r1, r4, r5
 800d2b0:	428b      	cmp	r3, r1
 800d2b2:	bf01      	itttt	eq
 800d2b4:	6819      	ldreq	r1, [r3, #0]
 800d2b6:	685b      	ldreq	r3, [r3, #4]
 800d2b8:	1949      	addeq	r1, r1, r5
 800d2ba:	6021      	streq	r1, [r4, #0]
 800d2bc:	e7ed      	b.n	800d29a <_free_r+0x22>
 800d2be:	461a      	mov	r2, r3
 800d2c0:	685b      	ldr	r3, [r3, #4]
 800d2c2:	b10b      	cbz	r3, 800d2c8 <_free_r+0x50>
 800d2c4:	42a3      	cmp	r3, r4
 800d2c6:	d9fa      	bls.n	800d2be <_free_r+0x46>
 800d2c8:	6811      	ldr	r1, [r2, #0]
 800d2ca:	1855      	adds	r5, r2, r1
 800d2cc:	42a5      	cmp	r5, r4
 800d2ce:	d10b      	bne.n	800d2e8 <_free_r+0x70>
 800d2d0:	6824      	ldr	r4, [r4, #0]
 800d2d2:	4421      	add	r1, r4
 800d2d4:	1854      	adds	r4, r2, r1
 800d2d6:	42a3      	cmp	r3, r4
 800d2d8:	6011      	str	r1, [r2, #0]
 800d2da:	d1e0      	bne.n	800d29e <_free_r+0x26>
 800d2dc:	681c      	ldr	r4, [r3, #0]
 800d2de:	685b      	ldr	r3, [r3, #4]
 800d2e0:	6053      	str	r3, [r2, #4]
 800d2e2:	440c      	add	r4, r1
 800d2e4:	6014      	str	r4, [r2, #0]
 800d2e6:	e7da      	b.n	800d29e <_free_r+0x26>
 800d2e8:	d902      	bls.n	800d2f0 <_free_r+0x78>
 800d2ea:	230c      	movs	r3, #12
 800d2ec:	6003      	str	r3, [r0, #0]
 800d2ee:	e7d6      	b.n	800d29e <_free_r+0x26>
 800d2f0:	6825      	ldr	r5, [r4, #0]
 800d2f2:	1961      	adds	r1, r4, r5
 800d2f4:	428b      	cmp	r3, r1
 800d2f6:	bf04      	itt	eq
 800d2f8:	6819      	ldreq	r1, [r3, #0]
 800d2fa:	685b      	ldreq	r3, [r3, #4]
 800d2fc:	6063      	str	r3, [r4, #4]
 800d2fe:	bf04      	itt	eq
 800d300:	1949      	addeq	r1, r1, r5
 800d302:	6021      	streq	r1, [r4, #0]
 800d304:	6054      	str	r4, [r2, #4]
 800d306:	e7ca      	b.n	800d29e <_free_r+0x26>
 800d308:	b003      	add	sp, #12
 800d30a:	bd30      	pop	{r4, r5, pc}
 800d30c:	20005384 	.word	0x20005384

0800d310 <__ssputs_r>:
 800d310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d314:	688e      	ldr	r6, [r1, #8]
 800d316:	461f      	mov	r7, r3
 800d318:	42be      	cmp	r6, r7
 800d31a:	680b      	ldr	r3, [r1, #0]
 800d31c:	4682      	mov	sl, r0
 800d31e:	460c      	mov	r4, r1
 800d320:	4690      	mov	r8, r2
 800d322:	d82c      	bhi.n	800d37e <__ssputs_r+0x6e>
 800d324:	898a      	ldrh	r2, [r1, #12]
 800d326:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d32a:	d026      	beq.n	800d37a <__ssputs_r+0x6a>
 800d32c:	6965      	ldr	r5, [r4, #20]
 800d32e:	6909      	ldr	r1, [r1, #16]
 800d330:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d334:	eba3 0901 	sub.w	r9, r3, r1
 800d338:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d33c:	1c7b      	adds	r3, r7, #1
 800d33e:	444b      	add	r3, r9
 800d340:	106d      	asrs	r5, r5, #1
 800d342:	429d      	cmp	r5, r3
 800d344:	bf38      	it	cc
 800d346:	461d      	movcc	r5, r3
 800d348:	0553      	lsls	r3, r2, #21
 800d34a:	d527      	bpl.n	800d39c <__ssputs_r+0x8c>
 800d34c:	4629      	mov	r1, r5
 800d34e:	f7ff fe0f 	bl	800cf70 <_malloc_r>
 800d352:	4606      	mov	r6, r0
 800d354:	b360      	cbz	r0, 800d3b0 <__ssputs_r+0xa0>
 800d356:	6921      	ldr	r1, [r4, #16]
 800d358:	464a      	mov	r2, r9
 800d35a:	f7ff ff7f 	bl	800d25c <memcpy>
 800d35e:	89a3      	ldrh	r3, [r4, #12]
 800d360:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d368:	81a3      	strh	r3, [r4, #12]
 800d36a:	6126      	str	r6, [r4, #16]
 800d36c:	6165      	str	r5, [r4, #20]
 800d36e:	444e      	add	r6, r9
 800d370:	eba5 0509 	sub.w	r5, r5, r9
 800d374:	6026      	str	r6, [r4, #0]
 800d376:	60a5      	str	r5, [r4, #8]
 800d378:	463e      	mov	r6, r7
 800d37a:	42be      	cmp	r6, r7
 800d37c:	d900      	bls.n	800d380 <__ssputs_r+0x70>
 800d37e:	463e      	mov	r6, r7
 800d380:	6820      	ldr	r0, [r4, #0]
 800d382:	4632      	mov	r2, r6
 800d384:	4641      	mov	r1, r8
 800d386:	f000 faab 	bl	800d8e0 <memmove>
 800d38a:	68a3      	ldr	r3, [r4, #8]
 800d38c:	1b9b      	subs	r3, r3, r6
 800d38e:	60a3      	str	r3, [r4, #8]
 800d390:	6823      	ldr	r3, [r4, #0]
 800d392:	4433      	add	r3, r6
 800d394:	6023      	str	r3, [r4, #0]
 800d396:	2000      	movs	r0, #0
 800d398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d39c:	462a      	mov	r2, r5
 800d39e:	f000 fab9 	bl	800d914 <_realloc_r>
 800d3a2:	4606      	mov	r6, r0
 800d3a4:	2800      	cmp	r0, #0
 800d3a6:	d1e0      	bne.n	800d36a <__ssputs_r+0x5a>
 800d3a8:	6921      	ldr	r1, [r4, #16]
 800d3aa:	4650      	mov	r0, sl
 800d3ac:	f7ff ff64 	bl	800d278 <_free_r>
 800d3b0:	230c      	movs	r3, #12
 800d3b2:	f8ca 3000 	str.w	r3, [sl]
 800d3b6:	89a3      	ldrh	r3, [r4, #12]
 800d3b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3bc:	81a3      	strh	r3, [r4, #12]
 800d3be:	f04f 30ff 	mov.w	r0, #4294967295
 800d3c2:	e7e9      	b.n	800d398 <__ssputs_r+0x88>

0800d3c4 <_svfiprintf_r>:
 800d3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3c8:	4698      	mov	r8, r3
 800d3ca:	898b      	ldrh	r3, [r1, #12]
 800d3cc:	061b      	lsls	r3, r3, #24
 800d3ce:	b09d      	sub	sp, #116	; 0x74
 800d3d0:	4607      	mov	r7, r0
 800d3d2:	460d      	mov	r5, r1
 800d3d4:	4614      	mov	r4, r2
 800d3d6:	d50e      	bpl.n	800d3f6 <_svfiprintf_r+0x32>
 800d3d8:	690b      	ldr	r3, [r1, #16]
 800d3da:	b963      	cbnz	r3, 800d3f6 <_svfiprintf_r+0x32>
 800d3dc:	2140      	movs	r1, #64	; 0x40
 800d3de:	f7ff fdc7 	bl	800cf70 <_malloc_r>
 800d3e2:	6028      	str	r0, [r5, #0]
 800d3e4:	6128      	str	r0, [r5, #16]
 800d3e6:	b920      	cbnz	r0, 800d3f2 <_svfiprintf_r+0x2e>
 800d3e8:	230c      	movs	r3, #12
 800d3ea:	603b      	str	r3, [r7, #0]
 800d3ec:	f04f 30ff 	mov.w	r0, #4294967295
 800d3f0:	e0d0      	b.n	800d594 <_svfiprintf_r+0x1d0>
 800d3f2:	2340      	movs	r3, #64	; 0x40
 800d3f4:	616b      	str	r3, [r5, #20]
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	9309      	str	r3, [sp, #36]	; 0x24
 800d3fa:	2320      	movs	r3, #32
 800d3fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d400:	f8cd 800c 	str.w	r8, [sp, #12]
 800d404:	2330      	movs	r3, #48	; 0x30
 800d406:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d5ac <_svfiprintf_r+0x1e8>
 800d40a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d40e:	f04f 0901 	mov.w	r9, #1
 800d412:	4623      	mov	r3, r4
 800d414:	469a      	mov	sl, r3
 800d416:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d41a:	b10a      	cbz	r2, 800d420 <_svfiprintf_r+0x5c>
 800d41c:	2a25      	cmp	r2, #37	; 0x25
 800d41e:	d1f9      	bne.n	800d414 <_svfiprintf_r+0x50>
 800d420:	ebba 0b04 	subs.w	fp, sl, r4
 800d424:	d00b      	beq.n	800d43e <_svfiprintf_r+0x7a>
 800d426:	465b      	mov	r3, fp
 800d428:	4622      	mov	r2, r4
 800d42a:	4629      	mov	r1, r5
 800d42c:	4638      	mov	r0, r7
 800d42e:	f7ff ff6f 	bl	800d310 <__ssputs_r>
 800d432:	3001      	adds	r0, #1
 800d434:	f000 80a9 	beq.w	800d58a <_svfiprintf_r+0x1c6>
 800d438:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d43a:	445a      	add	r2, fp
 800d43c:	9209      	str	r2, [sp, #36]	; 0x24
 800d43e:	f89a 3000 	ldrb.w	r3, [sl]
 800d442:	2b00      	cmp	r3, #0
 800d444:	f000 80a1 	beq.w	800d58a <_svfiprintf_r+0x1c6>
 800d448:	2300      	movs	r3, #0
 800d44a:	f04f 32ff 	mov.w	r2, #4294967295
 800d44e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d452:	f10a 0a01 	add.w	sl, sl, #1
 800d456:	9304      	str	r3, [sp, #16]
 800d458:	9307      	str	r3, [sp, #28]
 800d45a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d45e:	931a      	str	r3, [sp, #104]	; 0x68
 800d460:	4654      	mov	r4, sl
 800d462:	2205      	movs	r2, #5
 800d464:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d468:	4850      	ldr	r0, [pc, #320]	; (800d5ac <_svfiprintf_r+0x1e8>)
 800d46a:	f7f2 fec1 	bl	80001f0 <memchr>
 800d46e:	9a04      	ldr	r2, [sp, #16]
 800d470:	b9d8      	cbnz	r0, 800d4aa <_svfiprintf_r+0xe6>
 800d472:	06d0      	lsls	r0, r2, #27
 800d474:	bf44      	itt	mi
 800d476:	2320      	movmi	r3, #32
 800d478:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d47c:	0711      	lsls	r1, r2, #28
 800d47e:	bf44      	itt	mi
 800d480:	232b      	movmi	r3, #43	; 0x2b
 800d482:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d486:	f89a 3000 	ldrb.w	r3, [sl]
 800d48a:	2b2a      	cmp	r3, #42	; 0x2a
 800d48c:	d015      	beq.n	800d4ba <_svfiprintf_r+0xf6>
 800d48e:	9a07      	ldr	r2, [sp, #28]
 800d490:	4654      	mov	r4, sl
 800d492:	2000      	movs	r0, #0
 800d494:	f04f 0c0a 	mov.w	ip, #10
 800d498:	4621      	mov	r1, r4
 800d49a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d49e:	3b30      	subs	r3, #48	; 0x30
 800d4a0:	2b09      	cmp	r3, #9
 800d4a2:	d94d      	bls.n	800d540 <_svfiprintf_r+0x17c>
 800d4a4:	b1b0      	cbz	r0, 800d4d4 <_svfiprintf_r+0x110>
 800d4a6:	9207      	str	r2, [sp, #28]
 800d4a8:	e014      	b.n	800d4d4 <_svfiprintf_r+0x110>
 800d4aa:	eba0 0308 	sub.w	r3, r0, r8
 800d4ae:	fa09 f303 	lsl.w	r3, r9, r3
 800d4b2:	4313      	orrs	r3, r2
 800d4b4:	9304      	str	r3, [sp, #16]
 800d4b6:	46a2      	mov	sl, r4
 800d4b8:	e7d2      	b.n	800d460 <_svfiprintf_r+0x9c>
 800d4ba:	9b03      	ldr	r3, [sp, #12]
 800d4bc:	1d19      	adds	r1, r3, #4
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	9103      	str	r1, [sp, #12]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	bfbb      	ittet	lt
 800d4c6:	425b      	neglt	r3, r3
 800d4c8:	f042 0202 	orrlt.w	r2, r2, #2
 800d4cc:	9307      	strge	r3, [sp, #28]
 800d4ce:	9307      	strlt	r3, [sp, #28]
 800d4d0:	bfb8      	it	lt
 800d4d2:	9204      	strlt	r2, [sp, #16]
 800d4d4:	7823      	ldrb	r3, [r4, #0]
 800d4d6:	2b2e      	cmp	r3, #46	; 0x2e
 800d4d8:	d10c      	bne.n	800d4f4 <_svfiprintf_r+0x130>
 800d4da:	7863      	ldrb	r3, [r4, #1]
 800d4dc:	2b2a      	cmp	r3, #42	; 0x2a
 800d4de:	d134      	bne.n	800d54a <_svfiprintf_r+0x186>
 800d4e0:	9b03      	ldr	r3, [sp, #12]
 800d4e2:	1d1a      	adds	r2, r3, #4
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	9203      	str	r2, [sp, #12]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	bfb8      	it	lt
 800d4ec:	f04f 33ff 	movlt.w	r3, #4294967295
 800d4f0:	3402      	adds	r4, #2
 800d4f2:	9305      	str	r3, [sp, #20]
 800d4f4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d5bc <_svfiprintf_r+0x1f8>
 800d4f8:	7821      	ldrb	r1, [r4, #0]
 800d4fa:	2203      	movs	r2, #3
 800d4fc:	4650      	mov	r0, sl
 800d4fe:	f7f2 fe77 	bl	80001f0 <memchr>
 800d502:	b138      	cbz	r0, 800d514 <_svfiprintf_r+0x150>
 800d504:	9b04      	ldr	r3, [sp, #16]
 800d506:	eba0 000a 	sub.w	r0, r0, sl
 800d50a:	2240      	movs	r2, #64	; 0x40
 800d50c:	4082      	lsls	r2, r0
 800d50e:	4313      	orrs	r3, r2
 800d510:	3401      	adds	r4, #1
 800d512:	9304      	str	r3, [sp, #16]
 800d514:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d518:	4825      	ldr	r0, [pc, #148]	; (800d5b0 <_svfiprintf_r+0x1ec>)
 800d51a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d51e:	2206      	movs	r2, #6
 800d520:	f7f2 fe66 	bl	80001f0 <memchr>
 800d524:	2800      	cmp	r0, #0
 800d526:	d038      	beq.n	800d59a <_svfiprintf_r+0x1d6>
 800d528:	4b22      	ldr	r3, [pc, #136]	; (800d5b4 <_svfiprintf_r+0x1f0>)
 800d52a:	bb1b      	cbnz	r3, 800d574 <_svfiprintf_r+0x1b0>
 800d52c:	9b03      	ldr	r3, [sp, #12]
 800d52e:	3307      	adds	r3, #7
 800d530:	f023 0307 	bic.w	r3, r3, #7
 800d534:	3308      	adds	r3, #8
 800d536:	9303      	str	r3, [sp, #12]
 800d538:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d53a:	4433      	add	r3, r6
 800d53c:	9309      	str	r3, [sp, #36]	; 0x24
 800d53e:	e768      	b.n	800d412 <_svfiprintf_r+0x4e>
 800d540:	fb0c 3202 	mla	r2, ip, r2, r3
 800d544:	460c      	mov	r4, r1
 800d546:	2001      	movs	r0, #1
 800d548:	e7a6      	b.n	800d498 <_svfiprintf_r+0xd4>
 800d54a:	2300      	movs	r3, #0
 800d54c:	3401      	adds	r4, #1
 800d54e:	9305      	str	r3, [sp, #20]
 800d550:	4619      	mov	r1, r3
 800d552:	f04f 0c0a 	mov.w	ip, #10
 800d556:	4620      	mov	r0, r4
 800d558:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d55c:	3a30      	subs	r2, #48	; 0x30
 800d55e:	2a09      	cmp	r2, #9
 800d560:	d903      	bls.n	800d56a <_svfiprintf_r+0x1a6>
 800d562:	2b00      	cmp	r3, #0
 800d564:	d0c6      	beq.n	800d4f4 <_svfiprintf_r+0x130>
 800d566:	9105      	str	r1, [sp, #20]
 800d568:	e7c4      	b.n	800d4f4 <_svfiprintf_r+0x130>
 800d56a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d56e:	4604      	mov	r4, r0
 800d570:	2301      	movs	r3, #1
 800d572:	e7f0      	b.n	800d556 <_svfiprintf_r+0x192>
 800d574:	ab03      	add	r3, sp, #12
 800d576:	9300      	str	r3, [sp, #0]
 800d578:	462a      	mov	r2, r5
 800d57a:	4b0f      	ldr	r3, [pc, #60]	; (800d5b8 <_svfiprintf_r+0x1f4>)
 800d57c:	a904      	add	r1, sp, #16
 800d57e:	4638      	mov	r0, r7
 800d580:	f3af 8000 	nop.w
 800d584:	1c42      	adds	r2, r0, #1
 800d586:	4606      	mov	r6, r0
 800d588:	d1d6      	bne.n	800d538 <_svfiprintf_r+0x174>
 800d58a:	89ab      	ldrh	r3, [r5, #12]
 800d58c:	065b      	lsls	r3, r3, #25
 800d58e:	f53f af2d 	bmi.w	800d3ec <_svfiprintf_r+0x28>
 800d592:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d594:	b01d      	add	sp, #116	; 0x74
 800d596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d59a:	ab03      	add	r3, sp, #12
 800d59c:	9300      	str	r3, [sp, #0]
 800d59e:	462a      	mov	r2, r5
 800d5a0:	4b05      	ldr	r3, [pc, #20]	; (800d5b8 <_svfiprintf_r+0x1f4>)
 800d5a2:	a904      	add	r1, sp, #16
 800d5a4:	4638      	mov	r0, r7
 800d5a6:	f000 f879 	bl	800d69c <_printf_i>
 800d5aa:	e7eb      	b.n	800d584 <_svfiprintf_r+0x1c0>
 800d5ac:	0800fb0c 	.word	0x0800fb0c
 800d5b0:	0800fb16 	.word	0x0800fb16
 800d5b4:	00000000 	.word	0x00000000
 800d5b8:	0800d311 	.word	0x0800d311
 800d5bc:	0800fb12 	.word	0x0800fb12

0800d5c0 <_printf_common>:
 800d5c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5c4:	4616      	mov	r6, r2
 800d5c6:	4699      	mov	r9, r3
 800d5c8:	688a      	ldr	r2, [r1, #8]
 800d5ca:	690b      	ldr	r3, [r1, #16]
 800d5cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d5d0:	4293      	cmp	r3, r2
 800d5d2:	bfb8      	it	lt
 800d5d4:	4613      	movlt	r3, r2
 800d5d6:	6033      	str	r3, [r6, #0]
 800d5d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d5dc:	4607      	mov	r7, r0
 800d5de:	460c      	mov	r4, r1
 800d5e0:	b10a      	cbz	r2, 800d5e6 <_printf_common+0x26>
 800d5e2:	3301      	adds	r3, #1
 800d5e4:	6033      	str	r3, [r6, #0]
 800d5e6:	6823      	ldr	r3, [r4, #0]
 800d5e8:	0699      	lsls	r1, r3, #26
 800d5ea:	bf42      	ittt	mi
 800d5ec:	6833      	ldrmi	r3, [r6, #0]
 800d5ee:	3302      	addmi	r3, #2
 800d5f0:	6033      	strmi	r3, [r6, #0]
 800d5f2:	6825      	ldr	r5, [r4, #0]
 800d5f4:	f015 0506 	ands.w	r5, r5, #6
 800d5f8:	d106      	bne.n	800d608 <_printf_common+0x48>
 800d5fa:	f104 0a19 	add.w	sl, r4, #25
 800d5fe:	68e3      	ldr	r3, [r4, #12]
 800d600:	6832      	ldr	r2, [r6, #0]
 800d602:	1a9b      	subs	r3, r3, r2
 800d604:	42ab      	cmp	r3, r5
 800d606:	dc26      	bgt.n	800d656 <_printf_common+0x96>
 800d608:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d60c:	1e13      	subs	r3, r2, #0
 800d60e:	6822      	ldr	r2, [r4, #0]
 800d610:	bf18      	it	ne
 800d612:	2301      	movne	r3, #1
 800d614:	0692      	lsls	r2, r2, #26
 800d616:	d42b      	bmi.n	800d670 <_printf_common+0xb0>
 800d618:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d61c:	4649      	mov	r1, r9
 800d61e:	4638      	mov	r0, r7
 800d620:	47c0      	blx	r8
 800d622:	3001      	adds	r0, #1
 800d624:	d01e      	beq.n	800d664 <_printf_common+0xa4>
 800d626:	6823      	ldr	r3, [r4, #0]
 800d628:	6922      	ldr	r2, [r4, #16]
 800d62a:	f003 0306 	and.w	r3, r3, #6
 800d62e:	2b04      	cmp	r3, #4
 800d630:	bf02      	ittt	eq
 800d632:	68e5      	ldreq	r5, [r4, #12]
 800d634:	6833      	ldreq	r3, [r6, #0]
 800d636:	1aed      	subeq	r5, r5, r3
 800d638:	68a3      	ldr	r3, [r4, #8]
 800d63a:	bf0c      	ite	eq
 800d63c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d640:	2500      	movne	r5, #0
 800d642:	4293      	cmp	r3, r2
 800d644:	bfc4      	itt	gt
 800d646:	1a9b      	subgt	r3, r3, r2
 800d648:	18ed      	addgt	r5, r5, r3
 800d64a:	2600      	movs	r6, #0
 800d64c:	341a      	adds	r4, #26
 800d64e:	42b5      	cmp	r5, r6
 800d650:	d11a      	bne.n	800d688 <_printf_common+0xc8>
 800d652:	2000      	movs	r0, #0
 800d654:	e008      	b.n	800d668 <_printf_common+0xa8>
 800d656:	2301      	movs	r3, #1
 800d658:	4652      	mov	r2, sl
 800d65a:	4649      	mov	r1, r9
 800d65c:	4638      	mov	r0, r7
 800d65e:	47c0      	blx	r8
 800d660:	3001      	adds	r0, #1
 800d662:	d103      	bne.n	800d66c <_printf_common+0xac>
 800d664:	f04f 30ff 	mov.w	r0, #4294967295
 800d668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d66c:	3501      	adds	r5, #1
 800d66e:	e7c6      	b.n	800d5fe <_printf_common+0x3e>
 800d670:	18e1      	adds	r1, r4, r3
 800d672:	1c5a      	adds	r2, r3, #1
 800d674:	2030      	movs	r0, #48	; 0x30
 800d676:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d67a:	4422      	add	r2, r4
 800d67c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d680:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d684:	3302      	adds	r3, #2
 800d686:	e7c7      	b.n	800d618 <_printf_common+0x58>
 800d688:	2301      	movs	r3, #1
 800d68a:	4622      	mov	r2, r4
 800d68c:	4649      	mov	r1, r9
 800d68e:	4638      	mov	r0, r7
 800d690:	47c0      	blx	r8
 800d692:	3001      	adds	r0, #1
 800d694:	d0e6      	beq.n	800d664 <_printf_common+0xa4>
 800d696:	3601      	adds	r6, #1
 800d698:	e7d9      	b.n	800d64e <_printf_common+0x8e>
	...

0800d69c <_printf_i>:
 800d69c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d6a0:	7e0f      	ldrb	r7, [r1, #24]
 800d6a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d6a4:	2f78      	cmp	r7, #120	; 0x78
 800d6a6:	4691      	mov	r9, r2
 800d6a8:	4680      	mov	r8, r0
 800d6aa:	460c      	mov	r4, r1
 800d6ac:	469a      	mov	sl, r3
 800d6ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d6b2:	d807      	bhi.n	800d6c4 <_printf_i+0x28>
 800d6b4:	2f62      	cmp	r7, #98	; 0x62
 800d6b6:	d80a      	bhi.n	800d6ce <_printf_i+0x32>
 800d6b8:	2f00      	cmp	r7, #0
 800d6ba:	f000 80d4 	beq.w	800d866 <_printf_i+0x1ca>
 800d6be:	2f58      	cmp	r7, #88	; 0x58
 800d6c0:	f000 80c0 	beq.w	800d844 <_printf_i+0x1a8>
 800d6c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d6c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d6cc:	e03a      	b.n	800d744 <_printf_i+0xa8>
 800d6ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d6d2:	2b15      	cmp	r3, #21
 800d6d4:	d8f6      	bhi.n	800d6c4 <_printf_i+0x28>
 800d6d6:	a101      	add	r1, pc, #4	; (adr r1, 800d6dc <_printf_i+0x40>)
 800d6d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d6dc:	0800d735 	.word	0x0800d735
 800d6e0:	0800d749 	.word	0x0800d749
 800d6e4:	0800d6c5 	.word	0x0800d6c5
 800d6e8:	0800d6c5 	.word	0x0800d6c5
 800d6ec:	0800d6c5 	.word	0x0800d6c5
 800d6f0:	0800d6c5 	.word	0x0800d6c5
 800d6f4:	0800d749 	.word	0x0800d749
 800d6f8:	0800d6c5 	.word	0x0800d6c5
 800d6fc:	0800d6c5 	.word	0x0800d6c5
 800d700:	0800d6c5 	.word	0x0800d6c5
 800d704:	0800d6c5 	.word	0x0800d6c5
 800d708:	0800d84d 	.word	0x0800d84d
 800d70c:	0800d775 	.word	0x0800d775
 800d710:	0800d807 	.word	0x0800d807
 800d714:	0800d6c5 	.word	0x0800d6c5
 800d718:	0800d6c5 	.word	0x0800d6c5
 800d71c:	0800d86f 	.word	0x0800d86f
 800d720:	0800d6c5 	.word	0x0800d6c5
 800d724:	0800d775 	.word	0x0800d775
 800d728:	0800d6c5 	.word	0x0800d6c5
 800d72c:	0800d6c5 	.word	0x0800d6c5
 800d730:	0800d80f 	.word	0x0800d80f
 800d734:	682b      	ldr	r3, [r5, #0]
 800d736:	1d1a      	adds	r2, r3, #4
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	602a      	str	r2, [r5, #0]
 800d73c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d740:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d744:	2301      	movs	r3, #1
 800d746:	e09f      	b.n	800d888 <_printf_i+0x1ec>
 800d748:	6820      	ldr	r0, [r4, #0]
 800d74a:	682b      	ldr	r3, [r5, #0]
 800d74c:	0607      	lsls	r7, r0, #24
 800d74e:	f103 0104 	add.w	r1, r3, #4
 800d752:	6029      	str	r1, [r5, #0]
 800d754:	d501      	bpl.n	800d75a <_printf_i+0xbe>
 800d756:	681e      	ldr	r6, [r3, #0]
 800d758:	e003      	b.n	800d762 <_printf_i+0xc6>
 800d75a:	0646      	lsls	r6, r0, #25
 800d75c:	d5fb      	bpl.n	800d756 <_printf_i+0xba>
 800d75e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d762:	2e00      	cmp	r6, #0
 800d764:	da03      	bge.n	800d76e <_printf_i+0xd2>
 800d766:	232d      	movs	r3, #45	; 0x2d
 800d768:	4276      	negs	r6, r6
 800d76a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d76e:	485a      	ldr	r0, [pc, #360]	; (800d8d8 <_printf_i+0x23c>)
 800d770:	230a      	movs	r3, #10
 800d772:	e012      	b.n	800d79a <_printf_i+0xfe>
 800d774:	682b      	ldr	r3, [r5, #0]
 800d776:	6820      	ldr	r0, [r4, #0]
 800d778:	1d19      	adds	r1, r3, #4
 800d77a:	6029      	str	r1, [r5, #0]
 800d77c:	0605      	lsls	r5, r0, #24
 800d77e:	d501      	bpl.n	800d784 <_printf_i+0xe8>
 800d780:	681e      	ldr	r6, [r3, #0]
 800d782:	e002      	b.n	800d78a <_printf_i+0xee>
 800d784:	0641      	lsls	r1, r0, #25
 800d786:	d5fb      	bpl.n	800d780 <_printf_i+0xe4>
 800d788:	881e      	ldrh	r6, [r3, #0]
 800d78a:	4853      	ldr	r0, [pc, #332]	; (800d8d8 <_printf_i+0x23c>)
 800d78c:	2f6f      	cmp	r7, #111	; 0x6f
 800d78e:	bf0c      	ite	eq
 800d790:	2308      	moveq	r3, #8
 800d792:	230a      	movne	r3, #10
 800d794:	2100      	movs	r1, #0
 800d796:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d79a:	6865      	ldr	r5, [r4, #4]
 800d79c:	60a5      	str	r5, [r4, #8]
 800d79e:	2d00      	cmp	r5, #0
 800d7a0:	bfa2      	ittt	ge
 800d7a2:	6821      	ldrge	r1, [r4, #0]
 800d7a4:	f021 0104 	bicge.w	r1, r1, #4
 800d7a8:	6021      	strge	r1, [r4, #0]
 800d7aa:	b90e      	cbnz	r6, 800d7b0 <_printf_i+0x114>
 800d7ac:	2d00      	cmp	r5, #0
 800d7ae:	d04b      	beq.n	800d848 <_printf_i+0x1ac>
 800d7b0:	4615      	mov	r5, r2
 800d7b2:	fbb6 f1f3 	udiv	r1, r6, r3
 800d7b6:	fb03 6711 	mls	r7, r3, r1, r6
 800d7ba:	5dc7      	ldrb	r7, [r0, r7]
 800d7bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d7c0:	4637      	mov	r7, r6
 800d7c2:	42bb      	cmp	r3, r7
 800d7c4:	460e      	mov	r6, r1
 800d7c6:	d9f4      	bls.n	800d7b2 <_printf_i+0x116>
 800d7c8:	2b08      	cmp	r3, #8
 800d7ca:	d10b      	bne.n	800d7e4 <_printf_i+0x148>
 800d7cc:	6823      	ldr	r3, [r4, #0]
 800d7ce:	07de      	lsls	r6, r3, #31
 800d7d0:	d508      	bpl.n	800d7e4 <_printf_i+0x148>
 800d7d2:	6923      	ldr	r3, [r4, #16]
 800d7d4:	6861      	ldr	r1, [r4, #4]
 800d7d6:	4299      	cmp	r1, r3
 800d7d8:	bfde      	ittt	le
 800d7da:	2330      	movle	r3, #48	; 0x30
 800d7dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d7e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d7e4:	1b52      	subs	r2, r2, r5
 800d7e6:	6122      	str	r2, [r4, #16]
 800d7e8:	f8cd a000 	str.w	sl, [sp]
 800d7ec:	464b      	mov	r3, r9
 800d7ee:	aa03      	add	r2, sp, #12
 800d7f0:	4621      	mov	r1, r4
 800d7f2:	4640      	mov	r0, r8
 800d7f4:	f7ff fee4 	bl	800d5c0 <_printf_common>
 800d7f8:	3001      	adds	r0, #1
 800d7fa:	d14a      	bne.n	800d892 <_printf_i+0x1f6>
 800d7fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d800:	b004      	add	sp, #16
 800d802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d806:	6823      	ldr	r3, [r4, #0]
 800d808:	f043 0320 	orr.w	r3, r3, #32
 800d80c:	6023      	str	r3, [r4, #0]
 800d80e:	4833      	ldr	r0, [pc, #204]	; (800d8dc <_printf_i+0x240>)
 800d810:	2778      	movs	r7, #120	; 0x78
 800d812:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d816:	6823      	ldr	r3, [r4, #0]
 800d818:	6829      	ldr	r1, [r5, #0]
 800d81a:	061f      	lsls	r7, r3, #24
 800d81c:	f851 6b04 	ldr.w	r6, [r1], #4
 800d820:	d402      	bmi.n	800d828 <_printf_i+0x18c>
 800d822:	065f      	lsls	r7, r3, #25
 800d824:	bf48      	it	mi
 800d826:	b2b6      	uxthmi	r6, r6
 800d828:	07df      	lsls	r7, r3, #31
 800d82a:	bf48      	it	mi
 800d82c:	f043 0320 	orrmi.w	r3, r3, #32
 800d830:	6029      	str	r1, [r5, #0]
 800d832:	bf48      	it	mi
 800d834:	6023      	strmi	r3, [r4, #0]
 800d836:	b91e      	cbnz	r6, 800d840 <_printf_i+0x1a4>
 800d838:	6823      	ldr	r3, [r4, #0]
 800d83a:	f023 0320 	bic.w	r3, r3, #32
 800d83e:	6023      	str	r3, [r4, #0]
 800d840:	2310      	movs	r3, #16
 800d842:	e7a7      	b.n	800d794 <_printf_i+0xf8>
 800d844:	4824      	ldr	r0, [pc, #144]	; (800d8d8 <_printf_i+0x23c>)
 800d846:	e7e4      	b.n	800d812 <_printf_i+0x176>
 800d848:	4615      	mov	r5, r2
 800d84a:	e7bd      	b.n	800d7c8 <_printf_i+0x12c>
 800d84c:	682b      	ldr	r3, [r5, #0]
 800d84e:	6826      	ldr	r6, [r4, #0]
 800d850:	6961      	ldr	r1, [r4, #20]
 800d852:	1d18      	adds	r0, r3, #4
 800d854:	6028      	str	r0, [r5, #0]
 800d856:	0635      	lsls	r5, r6, #24
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	d501      	bpl.n	800d860 <_printf_i+0x1c4>
 800d85c:	6019      	str	r1, [r3, #0]
 800d85e:	e002      	b.n	800d866 <_printf_i+0x1ca>
 800d860:	0670      	lsls	r0, r6, #25
 800d862:	d5fb      	bpl.n	800d85c <_printf_i+0x1c0>
 800d864:	8019      	strh	r1, [r3, #0]
 800d866:	2300      	movs	r3, #0
 800d868:	6123      	str	r3, [r4, #16]
 800d86a:	4615      	mov	r5, r2
 800d86c:	e7bc      	b.n	800d7e8 <_printf_i+0x14c>
 800d86e:	682b      	ldr	r3, [r5, #0]
 800d870:	1d1a      	adds	r2, r3, #4
 800d872:	602a      	str	r2, [r5, #0]
 800d874:	681d      	ldr	r5, [r3, #0]
 800d876:	6862      	ldr	r2, [r4, #4]
 800d878:	2100      	movs	r1, #0
 800d87a:	4628      	mov	r0, r5
 800d87c:	f7f2 fcb8 	bl	80001f0 <memchr>
 800d880:	b108      	cbz	r0, 800d886 <_printf_i+0x1ea>
 800d882:	1b40      	subs	r0, r0, r5
 800d884:	6060      	str	r0, [r4, #4]
 800d886:	6863      	ldr	r3, [r4, #4]
 800d888:	6123      	str	r3, [r4, #16]
 800d88a:	2300      	movs	r3, #0
 800d88c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d890:	e7aa      	b.n	800d7e8 <_printf_i+0x14c>
 800d892:	6923      	ldr	r3, [r4, #16]
 800d894:	462a      	mov	r2, r5
 800d896:	4649      	mov	r1, r9
 800d898:	4640      	mov	r0, r8
 800d89a:	47d0      	blx	sl
 800d89c:	3001      	adds	r0, #1
 800d89e:	d0ad      	beq.n	800d7fc <_printf_i+0x160>
 800d8a0:	6823      	ldr	r3, [r4, #0]
 800d8a2:	079b      	lsls	r3, r3, #30
 800d8a4:	d413      	bmi.n	800d8ce <_printf_i+0x232>
 800d8a6:	68e0      	ldr	r0, [r4, #12]
 800d8a8:	9b03      	ldr	r3, [sp, #12]
 800d8aa:	4298      	cmp	r0, r3
 800d8ac:	bfb8      	it	lt
 800d8ae:	4618      	movlt	r0, r3
 800d8b0:	e7a6      	b.n	800d800 <_printf_i+0x164>
 800d8b2:	2301      	movs	r3, #1
 800d8b4:	4632      	mov	r2, r6
 800d8b6:	4649      	mov	r1, r9
 800d8b8:	4640      	mov	r0, r8
 800d8ba:	47d0      	blx	sl
 800d8bc:	3001      	adds	r0, #1
 800d8be:	d09d      	beq.n	800d7fc <_printf_i+0x160>
 800d8c0:	3501      	adds	r5, #1
 800d8c2:	68e3      	ldr	r3, [r4, #12]
 800d8c4:	9903      	ldr	r1, [sp, #12]
 800d8c6:	1a5b      	subs	r3, r3, r1
 800d8c8:	42ab      	cmp	r3, r5
 800d8ca:	dcf2      	bgt.n	800d8b2 <_printf_i+0x216>
 800d8cc:	e7eb      	b.n	800d8a6 <_printf_i+0x20a>
 800d8ce:	2500      	movs	r5, #0
 800d8d0:	f104 0619 	add.w	r6, r4, #25
 800d8d4:	e7f5      	b.n	800d8c2 <_printf_i+0x226>
 800d8d6:	bf00      	nop
 800d8d8:	0800fb1d 	.word	0x0800fb1d
 800d8dc:	0800fb2e 	.word	0x0800fb2e

0800d8e0 <memmove>:
 800d8e0:	4288      	cmp	r0, r1
 800d8e2:	b510      	push	{r4, lr}
 800d8e4:	eb01 0402 	add.w	r4, r1, r2
 800d8e8:	d902      	bls.n	800d8f0 <memmove+0x10>
 800d8ea:	4284      	cmp	r4, r0
 800d8ec:	4623      	mov	r3, r4
 800d8ee:	d807      	bhi.n	800d900 <memmove+0x20>
 800d8f0:	1e43      	subs	r3, r0, #1
 800d8f2:	42a1      	cmp	r1, r4
 800d8f4:	d008      	beq.n	800d908 <memmove+0x28>
 800d8f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d8fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d8fe:	e7f8      	b.n	800d8f2 <memmove+0x12>
 800d900:	4402      	add	r2, r0
 800d902:	4601      	mov	r1, r0
 800d904:	428a      	cmp	r2, r1
 800d906:	d100      	bne.n	800d90a <memmove+0x2a>
 800d908:	bd10      	pop	{r4, pc}
 800d90a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d90e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d912:	e7f7      	b.n	800d904 <memmove+0x24>

0800d914 <_realloc_r>:
 800d914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d918:	4680      	mov	r8, r0
 800d91a:	4614      	mov	r4, r2
 800d91c:	460e      	mov	r6, r1
 800d91e:	b921      	cbnz	r1, 800d92a <_realloc_r+0x16>
 800d920:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d924:	4611      	mov	r1, r2
 800d926:	f7ff bb23 	b.w	800cf70 <_malloc_r>
 800d92a:	b92a      	cbnz	r2, 800d938 <_realloc_r+0x24>
 800d92c:	f7ff fca4 	bl	800d278 <_free_r>
 800d930:	4625      	mov	r5, r4
 800d932:	4628      	mov	r0, r5
 800d934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d938:	f000 f81b 	bl	800d972 <_malloc_usable_size_r>
 800d93c:	4284      	cmp	r4, r0
 800d93e:	4607      	mov	r7, r0
 800d940:	d802      	bhi.n	800d948 <_realloc_r+0x34>
 800d942:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d946:	d812      	bhi.n	800d96e <_realloc_r+0x5a>
 800d948:	4621      	mov	r1, r4
 800d94a:	4640      	mov	r0, r8
 800d94c:	f7ff fb10 	bl	800cf70 <_malloc_r>
 800d950:	4605      	mov	r5, r0
 800d952:	2800      	cmp	r0, #0
 800d954:	d0ed      	beq.n	800d932 <_realloc_r+0x1e>
 800d956:	42bc      	cmp	r4, r7
 800d958:	4622      	mov	r2, r4
 800d95a:	4631      	mov	r1, r6
 800d95c:	bf28      	it	cs
 800d95e:	463a      	movcs	r2, r7
 800d960:	f7ff fc7c 	bl	800d25c <memcpy>
 800d964:	4631      	mov	r1, r6
 800d966:	4640      	mov	r0, r8
 800d968:	f7ff fc86 	bl	800d278 <_free_r>
 800d96c:	e7e1      	b.n	800d932 <_realloc_r+0x1e>
 800d96e:	4635      	mov	r5, r6
 800d970:	e7df      	b.n	800d932 <_realloc_r+0x1e>

0800d972 <_malloc_usable_size_r>:
 800d972:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d976:	1f18      	subs	r0, r3, #4
 800d978:	2b00      	cmp	r3, #0
 800d97a:	bfbc      	itt	lt
 800d97c:	580b      	ldrlt	r3, [r1, r0]
 800d97e:	18c0      	addlt	r0, r0, r3
 800d980:	4770      	bx	lr
	...

0800d984 <_init>:
 800d984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d986:	bf00      	nop
 800d988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d98a:	bc08      	pop	{r3}
 800d98c:	469e      	mov	lr, r3
 800d98e:	4770      	bx	lr

0800d990 <_fini>:
 800d990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d992:	bf00      	nop
 800d994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d996:	bc08      	pop	{r3}
 800d998:	469e      	mov	lr, r3
 800d99a:	4770      	bx	lr
