
thi-board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d7c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000021a4  0800d954  0800d954  0001d954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800faf8  0800faf8  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800faf8  0800faf8  0001faf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fb00  0800fb00  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fb00  0800fb00  0001fb00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fb04  0800fb04  0001fb04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800fb08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          0000544c  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200054cc  200054cc  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00026df0  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005a4c  00000000  00000000  00046ee3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001fa0  00000000  00000000  0004c930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001863  00000000  00000000  0004e8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00007d32  00000000  00000000  00050133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00027e04  00000000  00000000  00057e65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000df564  00000000  00000000  0007fc69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008b14  00000000  00000000  0015f1d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  00167ce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d93c 	.word	0x0800d93c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	0800d93c 	.word	0x0800d93c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000590:	f001 fae2 	bl	8001b58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000594:	f000 f854 	bl	8000640 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* GPIO Modifications done here, will be
   * overwritten by following init procedures
   */
  mcpr_LCD_Init();
 8000598:	f001 f85c 	bl	8001654 <mcpr_LCD_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059c:	f000 fa04 	bl	80009a8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005a0:	f000 f8b8 	bl	8000714 <MX_I2C1_Init>
  MX_I2S3_Init();
 80005a4:	f000 f8e4 	bl	8000770 <MX_I2S3_Init>
  MX_SPI1_Init();
 80005a8:	f000 f912 	bl	80007d0 <MX_SPI1_Init>
  MX_TIM4_Init();
 80005ac:	f000 f946 	bl	800083c <MX_TIM4_Init>
  MX_TIM7_Init();
 80005b0:	f000 f9bc 	bl	800092c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim7);
 80005b4:	4815      	ldr	r0, [pc, #84]	; (800060c <main+0x80>)
 80005b6:	f004 feb5 	bl	8005324 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80005ba:	2104      	movs	r1, #4
 80005bc:	4814      	ldr	r0, [pc, #80]	; (8000610 <main+0x84>)
 80005be:	f004 ffe3 	bl	8005588 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005c2:	f009 f975 	bl	80098b0 <osKernelInitialize>

  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of logQueue */
  logQueueHandle = osMessageQueueNew (16, sizeof(ThreadInfo), &logQueue_attributes);
 80005c6:	4a13      	ldr	r2, [pc, #76]	; (8000614 <main+0x88>)
 80005c8:	2129      	movs	r1, #41	; 0x29
 80005ca:	2010      	movs	r0, #16
 80005cc:	f009 fa8d 	bl	8009aea <osMessageQueueNew>
 80005d0:	4603      	mov	r3, r0
 80005d2:	4a11      	ldr	r2, [pc, #68]	; (8000618 <main+0x8c>)
 80005d4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of IOControl */
  IOControlHandle = osThreadNew(IOControlTask, NULL, &IOControl_attributes);
 80005d6:	4a11      	ldr	r2, [pc, #68]	; (800061c <main+0x90>)
 80005d8:	2100      	movs	r1, #0
 80005da:	4811      	ldr	r0, [pc, #68]	; (8000620 <main+0x94>)
 80005dc:	f009 f9b2 	bl	8009944 <osThreadNew>
 80005e0:	4603      	mov	r3, r0
 80005e2:	4a10      	ldr	r2, [pc, #64]	; (8000624 <main+0x98>)
 80005e4:	6013      	str	r3, [r2, #0]

  /* creation of displayTask */
  displayTaskHandle = osThreadNew(StartDisplayTask, NULL, &displayTask_attributes);
 80005e6:	4a10      	ldr	r2, [pc, #64]	; (8000628 <main+0x9c>)
 80005e8:	2100      	movs	r1, #0
 80005ea:	4810      	ldr	r0, [pc, #64]	; (800062c <main+0xa0>)
 80005ec:	f009 f9aa 	bl	8009944 <osThreadNew>
 80005f0:	4603      	mov	r3, r0
 80005f2:	4a0f      	ldr	r2, [pc, #60]	; (8000630 <main+0xa4>)
 80005f4:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 80005f6:	4a0f      	ldr	r2, [pc, #60]	; (8000634 <main+0xa8>)
 80005f8:	2100      	movs	r1, #0
 80005fa:	480f      	ldr	r0, [pc, #60]	; (8000638 <main+0xac>)
 80005fc:	f009 f9a2 	bl	8009944 <osThreadNew>
 8000600:	4603      	mov	r3, r0
 8000602:	4a0e      	ldr	r2, [pc, #56]	; (800063c <main+0xb0>)
 8000604:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000606:	f009 f977 	bl	80098f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800060a:	e7fe      	b.n	800060a <main+0x7e>
 800060c:	200001d8 	.word	0x200001d8
 8000610:	20000190 	.word	0x20000190
 8000614:	0800da94 	.word	0x0800da94
 8000618:	2000022c 	.word	0x2000022c
 800061c:	0800da28 	.word	0x0800da28
 8000620:	08000ba5 	.word	0x08000ba5
 8000624:	20000220 	.word	0x20000220
 8000628:	0800da4c 	.word	0x0800da4c
 800062c:	08000d19 	.word	0x08000d19
 8000630:	20000224 	.word	0x20000224
 8000634:	0800da70 	.word	0x0800da70
 8000638:	08000ded 	.word	0x08000ded
 800063c:	20000228 	.word	0x20000228

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b094      	sub	sp, #80	; 0x50
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0320 	add.w	r3, r7, #32
 800064a:	2230      	movs	r2, #48	; 0x30
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f00c fd3e 	bl	800d0d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000664:	2300      	movs	r3, #0
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	4b28      	ldr	r3, [pc, #160]	; (800070c <SystemClock_Config+0xcc>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066c:	4a27      	ldr	r2, [pc, #156]	; (800070c <SystemClock_Config+0xcc>)
 800066e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000672:	6413      	str	r3, [r2, #64]	; 0x40
 8000674:	4b25      	ldr	r3, [pc, #148]	; (800070c <SystemClock_Config+0xcc>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000680:	2300      	movs	r3, #0
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	4b22      	ldr	r3, [pc, #136]	; (8000710 <SystemClock_Config+0xd0>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a21      	ldr	r2, [pc, #132]	; (8000710 <SystemClock_Config+0xd0>)
 800068a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	4b1f      	ldr	r3, [pc, #124]	; (8000710 <SystemClock_Config+0xd0>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800069c:	2301      	movs	r3, #1
 800069e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a6:	2302      	movs	r3, #2
 80006a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006b0:	2308      	movs	r3, #8
 80006b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006b4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ba:	2302      	movs	r3, #2
 80006bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006be:	2307      	movs	r3, #7
 80006c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c2:	f107 0320 	add.w	r3, r7, #32
 80006c6:	4618      	mov	r0, r3
 80006c8:	f003 ff4a 	bl	8004560 <HAL_RCC_OscConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006d2:	f000 fbdf 	bl	8000e94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d6:	230f      	movs	r3, #15
 80006d8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006da:	2302      	movs	r3, #2
 80006dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006ee:	f107 030c 	add.w	r3, r7, #12
 80006f2:	2105      	movs	r1, #5
 80006f4:	4618      	mov	r0, r3
 80006f6:	f004 f9ab 	bl	8004a50 <HAL_RCC_ClockConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000700:	f000 fbc8 	bl	8000e94 <Error_Handler>
  }
}
 8000704:	bf00      	nop
 8000706:	3750      	adds	r7, #80	; 0x50
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40023800 	.word	0x40023800
 8000710:	40007000 	.word	0x40007000

08000714 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <MX_I2C1_Init+0x50>)
 800071a:	4a13      	ldr	r2, [pc, #76]	; (8000768 <MX_I2C1_Init+0x54>)
 800071c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_I2C1_Init+0x50>)
 8000720:	4a12      	ldr	r2, [pc, #72]	; (800076c <MX_I2C1_Init+0x58>)
 8000722:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000724:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <MX_I2C1_Init+0x50>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <MX_I2C1_Init+0x50>)
 800072c:	2200      	movs	r2, #0
 800072e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000730:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <MX_I2C1_Init+0x50>)
 8000732:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000736:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000738:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <MX_I2C1_Init+0x50>)
 800073a:	2200      	movs	r2, #0
 800073c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800073e:	4b09      	ldr	r3, [pc, #36]	; (8000764 <MX_I2C1_Init+0x50>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000744:	4b07      	ldr	r3, [pc, #28]	; (8000764 <MX_I2C1_Init+0x50>)
 8000746:	2200      	movs	r2, #0
 8000748:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <MX_I2C1_Init+0x50>)
 800074c:	2200      	movs	r2, #0
 800074e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000750:	4804      	ldr	r0, [pc, #16]	; (8000764 <MX_I2C1_Init+0x50>)
 8000752:	f003 f921 	bl	8003998 <HAL_I2C_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800075c:	f000 fb9a 	bl	8000e94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	2000009c 	.word	0x2000009c
 8000768:	40005400 	.word	0x40005400
 800076c:	000186a0 	.word	0x000186a0

08000770 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000774:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <MX_I2S3_Init+0x54>)
 8000776:	4a14      	ldr	r2, [pc, #80]	; (80007c8 <MX_I2S3_Init+0x58>)
 8000778:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800077a:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <MX_I2S3_Init+0x54>)
 800077c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000780:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <MX_I2S3_Init+0x54>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000788:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_I2S3_Init+0x54>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800078e:	4b0d      	ldr	r3, [pc, #52]	; (80007c4 <MX_I2S3_Init+0x54>)
 8000790:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000794:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000796:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <MX_I2S3_Init+0x54>)
 8000798:	4a0c      	ldr	r2, [pc, #48]	; (80007cc <MX_I2S3_Init+0x5c>)
 800079a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MX_I2S3_Init+0x54>)
 800079e:	2200      	movs	r2, #0
 80007a0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <MX_I2S3_Init+0x54>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_I2S3_Init+0x54>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_I2S3_Init+0x54>)
 80007b0:	f003 fa36 	bl	8003c20 <HAL_I2S_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007ba:	f000 fb6b 	bl	8000e94 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200000f0 	.word	0x200000f0
 80007c8:	40003c00 	.word	0x40003c00
 80007cc:	00017700 	.word	0x00017700

080007d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007d4:	4b17      	ldr	r3, [pc, #92]	; (8000834 <MX_SPI1_Init+0x64>)
 80007d6:	4a18      	ldr	r2, [pc, #96]	; (8000838 <MX_SPI1_Init+0x68>)
 80007d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007da:	4b16      	ldr	r3, [pc, #88]	; (8000834 <MX_SPI1_Init+0x64>)
 80007dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007e2:	4b14      	ldr	r3, [pc, #80]	; (8000834 <MX_SPI1_Init+0x64>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007e8:	4b12      	ldr	r3, [pc, #72]	; (8000834 <MX_SPI1_Init+0x64>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ee:	4b11      	ldr	r3, [pc, #68]	; (8000834 <MX_SPI1_Init+0x64>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007f4:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <MX_SPI1_Init+0x64>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <MX_SPI1_Init+0x64>)
 80007fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000800:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000802:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <MX_SPI1_Init+0x64>)
 8000804:	2200      	movs	r2, #0
 8000806:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000808:	4b0a      	ldr	r3, [pc, #40]	; (8000834 <MX_SPI1_Init+0x64>)
 800080a:	2200      	movs	r2, #0
 800080c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800080e:	4b09      	ldr	r3, [pc, #36]	; (8000834 <MX_SPI1_Init+0x64>)
 8000810:	2200      	movs	r2, #0
 8000812:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000814:	4b07      	ldr	r3, [pc, #28]	; (8000834 <MX_SPI1_Init+0x64>)
 8000816:	2200      	movs	r2, #0
 8000818:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800081a:	4b06      	ldr	r3, [pc, #24]	; (8000834 <MX_SPI1_Init+0x64>)
 800081c:	220a      	movs	r2, #10
 800081e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000820:	4804      	ldr	r0, [pc, #16]	; (8000834 <MX_SPI1_Init+0x64>)
 8000822:	f004 fca7 	bl	8005174 <HAL_SPI_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800082c:	f000 fb32 	bl	8000e94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000830:	bf00      	nop
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000138 	.word	0x20000138
 8000838:	40013000 	.word	0x40013000

0800083c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08e      	sub	sp, #56	; 0x38
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000842:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000850:	f107 0320 	add.w	r3, r7, #32
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]
 8000868:	615a      	str	r2, [r3, #20]
 800086a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800086c:	4b2d      	ldr	r3, [pc, #180]	; (8000924 <MX_TIM4_Init+0xe8>)
 800086e:	4a2e      	ldr	r2, [pc, #184]	; (8000928 <MX_TIM4_Init+0xec>)
 8000870:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 419;
 8000872:	4b2c      	ldr	r3, [pc, #176]	; (8000924 <MX_TIM4_Init+0xe8>)
 8000874:	f240 12a3 	movw	r2, #419	; 0x1a3
 8000878:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800087a:	4b2a      	ldr	r3, [pc, #168]	; (8000924 <MX_TIM4_Init+0xe8>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000880:	4b28      	ldr	r3, [pc, #160]	; (8000924 <MX_TIM4_Init+0xe8>)
 8000882:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000886:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000888:	4b26      	ldr	r3, [pc, #152]	; (8000924 <MX_TIM4_Init+0xe8>)
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800088e:	4b25      	ldr	r3, [pc, #148]	; (8000924 <MX_TIM4_Init+0xe8>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000894:	4823      	ldr	r0, [pc, #140]	; (8000924 <MX_TIM4_Init+0xe8>)
 8000896:	f004 fcf6 	bl	8005286 <HAL_TIM_Base_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80008a0:	f000 faf8 	bl	8000e94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80008aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008ae:	4619      	mov	r1, r3
 80008b0:	481c      	ldr	r0, [pc, #112]	; (8000924 <MX_TIM4_Init+0xe8>)
 80008b2:	f005 f8fb 	bl	8005aac <HAL_TIM_ConfigClockSource>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80008bc:	f000 faea 	bl	8000e94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80008c0:	4818      	ldr	r0, [pc, #96]	; (8000924 <MX_TIM4_Init+0xe8>)
 80008c2:	f004 fe07 	bl	80054d4 <HAL_TIM_PWM_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80008cc:	f000 fae2 	bl	8000e94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d0:	2300      	movs	r3, #0
 80008d2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d4:	2300      	movs	r3, #0
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008d8:	f107 0320 	add.w	r3, r7, #32
 80008dc:	4619      	mov	r1, r3
 80008de:	4811      	ldr	r0, [pc, #68]	; (8000924 <MX_TIM4_Init+0xe8>)
 80008e0:	f005 fce4 	bl	80062ac <HAL_TIMEx_MasterConfigSynchronization>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80008ea:	f000 fad3 	bl	8000e94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008ee:	2360      	movs	r3, #96	; 0x60
 80008f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 999;
 80008f2:	f240 33e7 	movw	r3, #999	; 0x3e7
 80008f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008f8:	2300      	movs	r3, #0
 80008fa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008fc:	2300      	movs	r3, #0
 80008fe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000900:	1d3b      	adds	r3, r7, #4
 8000902:	2204      	movs	r2, #4
 8000904:	4619      	mov	r1, r3
 8000906:	4807      	ldr	r0, [pc, #28]	; (8000924 <MX_TIM4_Init+0xe8>)
 8000908:	f005 f80e 	bl	8005928 <HAL_TIM_PWM_ConfigChannel>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000912:	f000 fabf 	bl	8000e94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000916:	4803      	ldr	r0, [pc, #12]	; (8000924 <MX_TIM4_Init+0xe8>)
 8000918:	f000 fc3c 	bl	8001194 <HAL_TIM_MspPostInit>

}
 800091c:	bf00      	nop
 800091e:	3738      	adds	r7, #56	; 0x38
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000190 	.word	0x20000190
 8000928:	40000800 	.word	0x40000800

0800092c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000932:	463b      	mov	r3, r7
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800093a:	4b19      	ldr	r3, [pc, #100]	; (80009a0 <MX_TIM7_Init+0x74>)
 800093c:	4a19      	ldr	r2, [pc, #100]	; (80009a4 <MX_TIM7_Init+0x78>)
 800093e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 8000940:	4b17      	ldr	r3, [pc, #92]	; (80009a0 <MX_TIM7_Init+0x74>)
 8000942:	2253      	movs	r2, #83	; 0x53
 8000944:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000946:	4b16      	ldr	r3, [pc, #88]	; (80009a0 <MX_TIM7_Init+0x74>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 800094c:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <MX_TIM7_Init+0x74>)
 800094e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000952:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000954:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <MX_TIM7_Init+0x74>)
 8000956:	2200      	movs	r2, #0
 8000958:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800095a:	4811      	ldr	r0, [pc, #68]	; (80009a0 <MX_TIM7_Init+0x74>)
 800095c:	f004 fc93 	bl	8005286 <HAL_TIM_Base_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000966:	f000 fa95 	bl	8000e94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800096a:	2320      	movs	r3, #32
 800096c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800096e:	2300      	movs	r3, #0
 8000970:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000972:	463b      	mov	r3, r7
 8000974:	4619      	mov	r1, r3
 8000976:	480a      	ldr	r0, [pc, #40]	; (80009a0 <MX_TIM7_Init+0x74>)
 8000978:	f005 fc98 	bl	80062ac <HAL_TIMEx_MasterConfigSynchronization>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000982:	f000 fa87 	bl	8000e94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* Set UIE Flag - trigger interrupt on ARR overflow */
  __HAL_TIM_ENABLE_IT(&htim7, TIM_IT_UPDATE);
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <MX_TIM7_Init+0x74>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	68da      	ldr	r2, [r3, #12]
 800098c:	4b04      	ldr	r3, [pc, #16]	; (80009a0 <MX_TIM7_Init+0x74>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f042 0201 	orr.w	r2, r2, #1
 8000994:	60da      	str	r2, [r3, #12]
  /* USER CODE END TIM7_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	200001d8 	.word	0x200001d8
 80009a4:	40001400 	.word	0x40001400

080009a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08c      	sub	sp, #48	; 0x30
 80009ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]
 80009bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	61bb      	str	r3, [r7, #24]
 80009c2:	4b72      	ldr	r3, [pc, #456]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a71      	ldr	r2, [pc, #452]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 80009c8:	f043 0310 	orr.w	r3, r3, #16
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b6f      	ldr	r3, [pc, #444]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0310 	and.w	r3, r3, #16
 80009d6:	61bb      	str	r3, [r7, #24]
 80009d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	617b      	str	r3, [r7, #20]
 80009de:	4b6b      	ldr	r3, [pc, #428]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a6a      	ldr	r2, [pc, #424]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 80009e4:	f043 0304 	orr.w	r3, r3, #4
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b68      	ldr	r3, [pc, #416]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0304 	and.w	r3, r3, #4
 80009f2:	617b      	str	r3, [r7, #20]
 80009f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	613b      	str	r3, [r7, #16]
 80009fa:	4b64      	ldr	r3, [pc, #400]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a63      	ldr	r2, [pc, #396]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 8000a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b61      	ldr	r3, [pc, #388]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	4b5d      	ldr	r3, [pc, #372]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a5c      	ldr	r2, [pc, #368]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b5a      	ldr	r3, [pc, #360]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	4b56      	ldr	r3, [pc, #344]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a55      	ldr	r2, [pc, #340]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 8000a38:	f043 0302 	orr.w	r3, r3, #2
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b53      	ldr	r3, [pc, #332]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0302 	and.w	r3, r3, #2
 8000a46:	60bb      	str	r3, [r7, #8]
 8000a48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	4b4f      	ldr	r3, [pc, #316]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a4e      	ldr	r2, [pc, #312]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 8000a54:	f043 0308 	orr.w	r3, r3, #8
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b4c      	ldr	r3, [pc, #304]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0308 	and.w	r3, r3, #8
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2108      	movs	r1, #8
 8000a6a:	4849      	ldr	r0, [pc, #292]	; (8000b90 <MX_GPIO_Init+0x1e8>)
 8000a6c:	f001 fb70 	bl	8002150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a70:	2201      	movs	r2, #1
 8000a72:	2101      	movs	r1, #1
 8000a74:	4847      	ldr	r0, [pc, #284]	; (8000b94 <MX_GPIO_Init+0x1ec>)
 8000a76:	f001 fb6b 	bl	8002150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD5_Pin|LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f24d 0110 	movw	r1, #53264	; 0xd010
 8000a80:	4845      	ldr	r0, [pc, #276]	; (8000b98 <MX_GPIO_Init+0x1f0>)
 8000a82:	f001 fb65 	bl	8002150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a86:	2308      	movs	r3, #8
 8000a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	483c      	ldr	r0, [pc, #240]	; (8000b90 <MX_GPIO_Init+0x1e8>)
 8000a9e:	f001 f9a3 	bl	8001de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ab2:	f107 031c 	add.w	r3, r7, #28
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4836      	ldr	r0, [pc, #216]	; (8000b94 <MX_GPIO_Init+0x1ec>)
 8000aba:	f001 f995 	bl	8001de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000abe:	2308      	movs	r3, #8
 8000ac0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aca:	2300      	movs	r3, #0
 8000acc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ace:	2305      	movs	r3, #5
 8000ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	f107 031c 	add.w	r3, r7, #28
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	482e      	ldr	r0, [pc, #184]	; (8000b94 <MX_GPIO_Init+0x1ec>)
 8000ada:	f001 f985 	bl	8001de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ae2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000ae6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aec:	f107 031c 	add.w	r3, r7, #28
 8000af0:	4619      	mov	r1, r3
 8000af2:	482a      	ldr	r0, [pc, #168]	; (8000b9c <MX_GPIO_Init+0x1f4>)
 8000af4:	f001 f978 	bl	8001de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000af8:	2304      	movs	r3, #4
 8000afa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000afc:	2300      	movs	r3, #0
 8000afe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000b04:	f107 031c 	add.w	r3, r7, #28
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4825      	ldr	r0, [pc, #148]	; (8000ba0 <MX_GPIO_Init+0x1f8>)
 8000b0c:	f001 f96c 	bl	8001de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000b10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b16:	2302      	movs	r3, #2
 8000b18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b22:	2305      	movs	r3, #5
 8000b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000b26:	f107 031c 	add.w	r3, r7, #28
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	481c      	ldr	r0, [pc, #112]	; (8000ba0 <MX_GPIO_Init+0x1f8>)
 8000b2e:	f001 f95b 	bl	8001de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD5_Pin LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD5_Pin|LD6_Pin|Audio_RST_Pin;
 8000b32:	f24d 0310 	movw	r3, #53264	; 0xd010
 8000b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b44:	f107 031c 	add.w	r3, r7, #28
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4813      	ldr	r0, [pc, #76]	; (8000b98 <MX_GPIO_Init+0x1f0>)
 8000b4c:	f001 f94c 	bl	8001de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b50:	2320      	movs	r3, #32
 8000b52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b54:	2300      	movs	r3, #0
 8000b56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b5c:	f107 031c 	add.w	r3, r7, #28
 8000b60:	4619      	mov	r1, r3
 8000b62:	480d      	ldr	r0, [pc, #52]	; (8000b98 <MX_GPIO_Init+0x1f0>)
 8000b64:	f001 f940 	bl	8001de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b6c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b76:	f107 031c 	add.w	r3, r7, #28
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4804      	ldr	r0, [pc, #16]	; (8000b90 <MX_GPIO_Init+0x1e8>)
 8000b7e:	f001 f933 	bl	8001de8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b82:	bf00      	nop
 8000b84:	3730      	adds	r7, #48	; 0x30
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40021000 	.word	0x40021000
 8000b94:	40020800 	.word	0x40020800
 8000b98:	40020c00 	.word	0x40020c00
 8000b9c:	40020000 	.word	0x40020000
 8000ba0:	40020400 	.word	0x40020400

08000ba4 <IOControlTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_IOControlTask */
void IOControlTask(void *argument)
{
 8000ba4:	b5b0      	push	{r4, r5, r7, lr}
 8000ba6:	b090      	sub	sp, #64	; 0x40
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000bac:	f00b fe9e 	bl	800c8ec <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  uint8_t cnt = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t newDutyCycle = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	63bb      	str	r3, [r7, #56]	; 0x38
  ThreadInfo tInfo;

  /* RFC 1925 2.1: "It Has To Work" */
  strcpy(tInfo.threadName, osThreadGetName(osThreadGetId()));
 8000bba:	f008 ff70 	bl	8009a9e <osThreadGetId>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f008 ff51 	bl	8009a68 <osThreadGetName>
 8000bc6:	4602      	mov	r2, r0
 8000bc8:	f107 030c 	add.w	r3, r7, #12
 8000bcc:	3314      	adds	r3, #20
 8000bce:	4611      	mov	r1, r2
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f00c fb17 	bl	800d204 <strcpy>

  /* Infinite loop */
  for (;;)
  {

    if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) != GPIO_PIN_RESET && buttonReleased)
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	4846      	ldr	r0, [pc, #280]	; (8000cf4 <IOControlTask+0x150>)
 8000bda:	f001 faa1 	bl	8002120 <HAL_GPIO_ReadPin>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d074      	beq.n	8000cce <IOControlTask+0x12a>
 8000be4:	4b44      	ldr	r3, [pc, #272]	; (8000cf8 <IOControlTask+0x154>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d06f      	beq.n	8000cce <IOControlTask+0x12a>
    {
      /* Lock */
  	  buttonReleased = false;
 8000bee:	4b42      	ldr	r3, [pc, #264]	; (8000cf8 <IOControlTask+0x154>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	701a      	strb	r2, [r3, #0]

  	  /* Clear message buffer */
  	  memset((void*)tInfo.msg_buf, 0, MAX_STR_LEN);
 8000bf4:	f107 030c 	add.w	r3, r7, #12
 8000bf8:	2214      	movs	r2, #20
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f00c fa67 	bl	800d0d0 <memset>

  	  /* continuous count for changing brightness */
      cnt = (cnt + 1) % 4;
 8000c02:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000c06:	3301      	adds	r3, #1
 8000c08:	425a      	negs	r2, r3
 8000c0a:	f003 0303 	and.w	r3, r3, #3
 8000c0e:	f002 0203 	and.w	r2, r2, #3
 8000c12:	bf58      	it	pl
 8000c14:	4253      	negpl	r3, r2
 8000c16:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  	  switch (cnt)
 8000c1a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000c1e:	2b03      	cmp	r3, #3
 8000c20:	d83a      	bhi.n	8000c98 <IOControlTask+0xf4>
 8000c22:	a201      	add	r2, pc, #4	; (adr r2, 8000c28 <IOControlTask+0x84>)
 8000c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c28:	08000c39 	.word	0x08000c39
 8000c2c:	08000c53 	.word	0x08000c53
 8000c30:	08000c6b 	.word	0x08000c6b
 8000c34:	08000c83 	.word	0x08000c83
  	  {
  		case 0:
  			newDutyCycle = 1000;
 8000c38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c3c:	63bb      	str	r3, [r7, #56]	; 0x38
  			strcpy(tInfo.msg_buf, "Brightness: 100%");
 8000c3e:	f107 030c 	add.w	r3, r7, #12
 8000c42:	4a2e      	ldr	r2, [pc, #184]	; (8000cfc <IOControlTask+0x158>)
 8000c44:	461c      	mov	r4, r3
 8000c46:	4615      	mov	r5, r2
 8000c48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c4c:	682b      	ldr	r3, [r5, #0]
 8000c4e:	7023      	strb	r3, [r4, #0]
  			break;
 8000c50:	e030      	b.n	8000cb4 <IOControlTask+0x110>

  		case 1:
  			newDutyCycle = 750;
 8000c52:	f240 23ee 	movw	r3, #750	; 0x2ee
 8000c56:	63bb      	str	r3, [r7, #56]	; 0x38
  			strcpy(tInfo.msg_buf, "Brightness: 75%");
 8000c58:	f107 030c 	add.w	r3, r7, #12
 8000c5c:	4a28      	ldr	r2, [pc, #160]	; (8000d00 <IOControlTask+0x15c>)
 8000c5e:	461c      	mov	r4, r3
 8000c60:	4613      	mov	r3, r2
 8000c62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  			break;
 8000c68:	e024      	b.n	8000cb4 <IOControlTask+0x110>

  		case 2:
  			newDutyCycle = 500;
 8000c6a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c6e:	63bb      	str	r3, [r7, #56]	; 0x38
  			strcpy(tInfo.msg_buf, "Brightness: 50%");
 8000c70:	f107 030c 	add.w	r3, r7, #12
 8000c74:	4a23      	ldr	r2, [pc, #140]	; (8000d04 <IOControlTask+0x160>)
 8000c76:	461c      	mov	r4, r3
 8000c78:	4613      	mov	r3, r2
 8000c7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  			break;
 8000c80:	e018      	b.n	8000cb4 <IOControlTask+0x110>

  		case 3:
  			newDutyCycle = 250;
 8000c82:	23fa      	movs	r3, #250	; 0xfa
 8000c84:	63bb      	str	r3, [r7, #56]	; 0x38
  			strcpy(tInfo.msg_buf, "Brightness: 25%");
 8000c86:	f107 030c 	add.w	r3, r7, #12
 8000c8a:	4a1f      	ldr	r2, [pc, #124]	; (8000d08 <IOControlTask+0x164>)
 8000c8c:	461c      	mov	r4, r3
 8000c8e:	4613      	mov	r3, r2
 8000c90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  			break;
 8000c96:	e00d      	b.n	8000cb4 <IOControlTask+0x110>

  	    default:
  			newDutyCycle = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	63bb      	str	r3, [r7, #56]	; 0x38
  			strcpy(tInfo.msg_buf, "Brightness: 0%");
 8000c9c:	f107 030c 	add.w	r3, r7, #12
 8000ca0:	4a1a      	ldr	r2, [pc, #104]	; (8000d0c <IOControlTask+0x168>)
 8000ca2:	461c      	mov	r4, r3
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ca8:	c407      	stmia	r4!, {r0, r1, r2}
 8000caa:	8023      	strh	r3, [r4, #0]
 8000cac:	3402      	adds	r4, #2
 8000cae:	0c1b      	lsrs	r3, r3, #16
 8000cb0:	7023      	strb	r3, [r4, #0]
  			break;
 8000cb2:	bf00      	nop
  	    }

  	    /* Set CCR2 Value */
  	    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, newDutyCycle);
 8000cb4:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <IOControlTask+0x16c>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000cba:	639a      	str	r2, [r3, #56]	; 0x38

  	    /* Add message to Queue */
  	    if (osMessageQueuePut(logQueueHandle, (void*)&tInfo, 0, 100) != osOK)
 8000cbc:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <IOControlTask+0x170>)
 8000cbe:	6818      	ldr	r0, [r3, #0]
 8000cc0:	f107 010c 	add.w	r1, r7, #12
 8000cc4:	2364      	movs	r3, #100	; 0x64
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f008 ff82 	bl	8009bd0 <osMessageQueuePut>
 8000ccc:	e00e      	b.n	8000cec <IOControlTask+0x148>
  	    {
  	    	/* Error Handling */
  	    }

      }
  	  else if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8000cce:	2101      	movs	r1, #1
 8000cd0:	4808      	ldr	r0, [pc, #32]	; (8000cf4 <IOControlTask+0x150>)
 8000cd2:	f001 fa25 	bl	8002120 <HAL_GPIO_ReadPin>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d107      	bne.n	8000cec <IOControlTask+0x148>
  	  {
  		if (!buttonReleased)
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <IOControlTask+0x154>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d102      	bne.n	8000cec <IOControlTask+0x148>
  			buttonReleased = true;
 8000ce6:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <IOControlTask+0x154>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	701a      	strb	r2, [r3, #0]
  	  }
  	osDelay(1);
 8000cec:	2001      	movs	r0, #1
 8000cee:	f008 fee1 	bl	8009ab4 <osDelay>
    if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) != GPIO_PIN_RESET && buttonReleased)
 8000cf2:	e770      	b.n	8000bd6 <IOControlTask+0x32>
 8000cf4:	40020000 	.word	0x40020000
 8000cf8:	20000234 	.word	0x20000234
 8000cfc:	0800d984 	.word	0x0800d984
 8000d00:	0800d998 	.word	0x0800d998
 8000d04:	0800d9a8 	.word	0x0800d9a8
 8000d08:	0800d9b8 	.word	0x0800d9b8
 8000d0c:	0800d9c8 	.word	0x0800d9c8
 8000d10:	20000190 	.word	0x20000190
 8000d14:	2000022c 	.word	0x2000022c

08000d18 <StartDisplayTask>:
* @param argument: Not use
* @retval None
*/
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void *argument)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b090      	sub	sp, #64	; 0x40
 8000d1c:	af02      	add	r7, sp, #8
 8000d1e:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  /* Infinite loop */
  for(;;)
  {
	  if (osMessageQueueGetCount(logQueueHandle) > 0)
 8000d20:	4b2d      	ldr	r3, [pc, #180]	; (8000dd8 <StartDisplayTask+0xc0>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f009 f811 	bl	8009d4c <osMessageQueueGetCount>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d04e      	beq.n	8000dce <StartDisplayTask+0xb6>
	  {
		  status = osMessageQueueGet(logQueueHandle, (void*)&tInfo, 0, 100);
 8000d30:	4b29      	ldr	r3, [pc, #164]	; (8000dd8 <StartDisplayTask+0xc0>)
 8000d32:	6818      	ldr	r0, [r3, #0]
 8000d34:	f107 0108 	add.w	r1, r7, #8
 8000d38:	2364      	movs	r3, #100	; 0x64
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f008 ffa8 	bl	8009c90 <osMessageQueueGet>
 8000d40:	6378      	str	r0, [r7, #52]	; 0x34

		  /* Message was received successfully and stored in log */
		  if (status == osOK)
 8000d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d142      	bne.n	8000dce <StartDisplayTask+0xb6>
		  {
			  /* A message was received from IOControl Thread */
			  if (strcmp(tInfo.threadName, displayTask_attributes.name) == 0)
 8000d48:	4a24      	ldr	r2, [pc, #144]	; (8000ddc <StartDisplayTask+0xc4>)
 8000d4a:	f107 0308 	add.w	r3, r7, #8
 8000d4e:	3314      	adds	r3, #20
 8000d50:	4611      	mov	r1, r2
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff fa3c 	bl	80001d0 <strcmp>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d116      	bne.n	8000d8c <StartDisplayTask+0x74>
			  {
				  /* Task1 will be printed on y: 100 to 120*/
				  mcpr_LCD_ClearLine(100, 120, LCD_BLACK);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2178      	movs	r1, #120	; 0x78
 8000d62:	2064      	movs	r0, #100	; 0x64
 8000d64:	f000 fd28 	bl	80017b8 <mcpr_LCD_ClearLine>
				  mcpr_LCD_WriteString(10, 100, LCD_WHITE, LCD_BLACK, "Task 1: ");
 8000d68:	4b1d      	ldr	r3, [pc, #116]	; (8000de0 <StartDisplayTask+0xc8>)
 8000d6a:	9300      	str	r3, [sp, #0]
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2164      	movs	r1, #100	; 0x64
 8000d72:	200a      	movs	r0, #10
 8000d74:	f000 fda6 	bl	80018c4 <mcpr_LCD_WriteString>
				  mcpr_LCD_WriteString(130, 100, LCD_WHITE, LCD_BLACK, tInfo.msg_buf);
 8000d78:	f107 0308 	add.w	r3, r7, #8
 8000d7c:	9300      	str	r3, [sp, #0]
 8000d7e:	2300      	movs	r3, #0
 8000d80:	2200      	movs	r2, #0
 8000d82:	2164      	movs	r1, #100	; 0x64
 8000d84:	2082      	movs	r0, #130	; 0x82
 8000d86:	f000 fd9d 	bl	80018c4 <mcpr_LCD_WriteString>
 8000d8a:	e020      	b.n	8000dce <StartDisplayTask+0xb6>
			  }
			  else if (strcmp(tInfo.threadName, myTask03_attributes.name) == 0)
 8000d8c:	4a15      	ldr	r2, [pc, #84]	; (8000de4 <StartDisplayTask+0xcc>)
 8000d8e:	f107 0308 	add.w	r3, r7, #8
 8000d92:	3314      	adds	r3, #20
 8000d94:	4611      	mov	r1, r2
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff fa1a 	bl	80001d0 <strcmp>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d115      	bne.n	8000dce <StartDisplayTask+0xb6>
			  {
				  /* Task1 will be printed on y: 140 to 160*/
				  mcpr_LCD_ClearLine(140, 160, LCD_BLACK);
 8000da2:	2200      	movs	r2, #0
 8000da4:	21a0      	movs	r1, #160	; 0xa0
 8000da6:	208c      	movs	r0, #140	; 0x8c
 8000da8:	f000 fd06 	bl	80017b8 <mcpr_LCD_ClearLine>
				  mcpr_LCD_WriteString(10, 140, LCD_WHITE, LCD_BLACK, "Task 2: ");
 8000dac:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <StartDisplayTask+0xd0>)
 8000dae:	9300      	str	r3, [sp, #0]
 8000db0:	2300      	movs	r3, #0
 8000db2:	2200      	movs	r2, #0
 8000db4:	218c      	movs	r1, #140	; 0x8c
 8000db6:	200a      	movs	r0, #10
 8000db8:	f000 fd84 	bl	80018c4 <mcpr_LCD_WriteString>
				  mcpr_LCD_WriteString(130, 100, LCD_WHITE, LCD_BLACK, tInfo.msg_buf);
 8000dbc:	f107 0308 	add.w	r3, r7, #8
 8000dc0:	9300      	str	r3, [sp, #0]
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2164      	movs	r1, #100	; 0x64
 8000dc8:	2082      	movs	r0, #130	; 0x82
 8000dca:	f000 fd7b 	bl	80018c4 <mcpr_LCD_WriteString>
		  {
			  /* Error Handling */
		  }
	  }
	  /* 25 Hz Refresh Rate - FreeRTOS clock rate: 1000Hz */
	  osDelay(pdMS_TO_TICKS(40));
 8000dce:	2028      	movs	r0, #40	; 0x28
 8000dd0:	f008 fe70 	bl	8009ab4 <osDelay>
	  if (osMessageQueueGetCount(logQueueHandle) > 0)
 8000dd4:	e7a4      	b.n	8000d20 <StartDisplayTask+0x8>
 8000dd6:	bf00      	nop
 8000dd8:	2000022c 	.word	0x2000022c
 8000ddc:	0800d960 	.word	0x0800d960
 8000de0:	0800d9d8 	.word	0x0800d9d8
 8000de4:	0800d96c 	.word	0x0800d96c
 8000de8:	0800d9e4 	.word	0x0800d9e4

08000dec <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08e      	sub	sp, #56	; 0x38
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  ThreadInfo tInfo;

  /* RFC 1925 2.1: "It Has To Work" */
  strcpy(tInfo.threadName, osThreadGetName(osThreadGetId()));
 8000df4:	f008 fe53 	bl	8009a9e <osThreadGetId>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f008 fe34 	bl	8009a68 <osThreadGetName>
 8000e00:	4602      	mov	r2, r0
 8000e02:	f107 030c 	add.w	r3, r7, #12
 8000e06:	3314      	adds	r3, #20
 8000e08:	4611      	mov	r1, r2
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f00c f9fa 	bl	800d204 <strcpy>

  /* Infinite loop */
  for(;;)
  {
	  /* Clear message buffer */
	  memset((void*)tInfo.msg_buf, 0, MAX_STR_LEN);
 8000e10:	f107 030c 	add.w	r3, r7, #12
 8000e14:	2214      	movs	r2, #20
 8000e16:	2100      	movs	r1, #0
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f00c f959 	bl	800d0d0 <memset>

	  /* Write message into buffer */
	  snprintf(tInfo.msg_buf, MAX_STR_LEN, "ms_counter: %ld", ms_counter);
 8000e1e:	4b0a      	ldr	r3, [pc, #40]	; (8000e48 <StartTask03+0x5c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f107 000c 	add.w	r0, r7, #12
 8000e26:	4a09      	ldr	r2, [pc, #36]	; (8000e4c <StartTask03+0x60>)
 8000e28:	2114      	movs	r1, #20
 8000e2a:	f00c f91d 	bl	800d068 <sniprintf>

	  /* Add message to Queue */
	  if (osMessageQueuePut(logQueueHandle, (void*)&tInfo, 0, 100) != osOK)
 8000e2e:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <StartTask03+0x64>)
 8000e30:	6818      	ldr	r0, [r3, #0]
 8000e32:	f107 010c 	add.w	r1, r7, #12
 8000e36:	2364      	movs	r3, #100	; 0x64
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f008 fec9 	bl	8009bd0 <osMessageQueuePut>
	  {
		  /* Error Handling */
	  }

	  /* let this task run every 1000ms */
	  osDelay(pdMS_TO_TICKS(1000));
 8000e3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e42:	f008 fe37 	bl	8009ab4 <osDelay>
	  memset((void*)tInfo.msg_buf, 0, MAX_STR_LEN);
 8000e46:	e7e3      	b.n	8000e10 <StartTask03+0x24>
 8000e48:	20000230 	.word	0x20000230
 8000e4c:	0800d9f0 	.word	0x0800d9f0
 8000e50:	2000022c 	.word	0x2000022c

08000e54 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM8) {
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a09      	ldr	r2, [pc, #36]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d101      	bne.n	8000e6a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e66:	f000 fe99 	bl	8001b9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM7) {
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a07      	ldr	r2, [pc, #28]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d104      	bne.n	8000e7e <HAL_TIM_PeriodElapsedCallback+0x2a>
	  ms_counter += 1;
 8000e74:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	4a05      	ldr	r2, [pc, #20]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000e7c:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END Callback 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40010400 	.word	0x40010400
 8000e8c:	40001400 	.word	0x40001400
 8000e90:	20000230 	.word	0x20000230

08000e94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e98:	b672      	cpsid	i
}
 8000e9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <Error_Handler+0x8>
	...

08000ea0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <HAL_MspInit+0x54>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eae:	4a11      	ldr	r2, [pc, #68]	; (8000ef4 <HAL_MspInit+0x54>)
 8000eb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000eb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <HAL_MspInit+0x54>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	603b      	str	r3, [r7, #0]
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <HAL_MspInit+0x54>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	4a0a      	ldr	r2, [pc, #40]	; (8000ef4 <HAL_MspInit+0x54>)
 8000ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed2:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <HAL_MspInit+0x54>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eda:	603b      	str	r3, [r7, #0]
 8000edc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	210f      	movs	r1, #15
 8000ee2:	f06f 0001 	mvn.w	r0, #1
 8000ee6:	f000 ff55 	bl	8001d94 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40023800 	.word	0x40023800

08000ef8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08a      	sub	sp, #40	; 0x28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a19      	ldr	r2, [pc, #100]	; (8000f7c <HAL_I2C_MspInit+0x84>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d12c      	bne.n	8000f74 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	4b18      	ldr	r3, [pc, #96]	; (8000f80 <HAL_I2C_MspInit+0x88>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a17      	ldr	r2, [pc, #92]	; (8000f80 <HAL_I2C_MspInit+0x88>)
 8000f24:	f043 0302 	orr.w	r3, r3, #2
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <HAL_I2C_MspInit+0x88>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0302 	and.w	r3, r3, #2
 8000f32:	613b      	str	r3, [r7, #16]
 8000f34:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000f36:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000f3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f3c:	2312      	movs	r3, #18
 8000f3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f40:	2301      	movs	r3, #1
 8000f42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f44:	2300      	movs	r3, #0
 8000f46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f48:	2304      	movs	r3, #4
 8000f4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	4619      	mov	r1, r3
 8000f52:	480c      	ldr	r0, [pc, #48]	; (8000f84 <HAL_I2C_MspInit+0x8c>)
 8000f54:	f000 ff48 	bl	8001de8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <HAL_I2C_MspInit+0x88>)
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f60:	4a07      	ldr	r2, [pc, #28]	; (8000f80 <HAL_I2C_MspInit+0x88>)
 8000f62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f66:	6413      	str	r3, [r2, #64]	; 0x40
 8000f68:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <HAL_I2C_MspInit+0x88>)
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f74:	bf00      	nop
 8000f76:	3728      	adds	r7, #40	; 0x28
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40005400 	.word	0x40005400
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40020400 	.word	0x40020400

08000f88 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08e      	sub	sp, #56	; 0x38
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a31      	ldr	r2, [pc, #196]	; (8001078 <HAL_I2S_MspInit+0xf0>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d15a      	bne.n	800106e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000fbc:	23c0      	movs	r3, #192	; 0xc0
 8000fbe:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f003 ff93 	bl	8004ef4 <HAL_RCCEx_PeriphCLKConfig>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000fd4:	f7ff ff5e 	bl	8000e94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000fd8:	2300      	movs	r3, #0
 8000fda:	613b      	str	r3, [r7, #16]
 8000fdc:	4b27      	ldr	r3, [pc, #156]	; (800107c <HAL_I2S_MspInit+0xf4>)
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	4a26      	ldr	r2, [pc, #152]	; (800107c <HAL_I2S_MspInit+0xf4>)
 8000fe2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fe6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe8:	4b24      	ldr	r3, [pc, #144]	; (800107c <HAL_I2S_MspInit+0xf4>)
 8000fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ff0:	613b      	str	r3, [r7, #16]
 8000ff2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	4b20      	ldr	r3, [pc, #128]	; (800107c <HAL_I2S_MspInit+0xf4>)
 8000ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffc:	4a1f      	ldr	r2, [pc, #124]	; (800107c <HAL_I2S_MspInit+0xf4>)
 8000ffe:	f043 0301 	orr.w	r3, r3, #1
 8001002:	6313      	str	r3, [r2, #48]	; 0x30
 8001004:	4b1d      	ldr	r3, [pc, #116]	; (800107c <HAL_I2S_MspInit+0xf4>)
 8001006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001008:	f003 0301 	and.w	r3, r3, #1
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001010:	2300      	movs	r3, #0
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	4b19      	ldr	r3, [pc, #100]	; (800107c <HAL_I2S_MspInit+0xf4>)
 8001016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001018:	4a18      	ldr	r2, [pc, #96]	; (800107c <HAL_I2S_MspInit+0xf4>)
 800101a:	f043 0304 	orr.w	r3, r3, #4
 800101e:	6313      	str	r3, [r2, #48]	; 0x30
 8001020:	4b16      	ldr	r3, [pc, #88]	; (800107c <HAL_I2S_MspInit+0xf4>)
 8001022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001024:	f003 0304 	and.w	r3, r3, #4
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800102c:	2310      	movs	r3, #16
 800102e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001030:	2302      	movs	r3, #2
 8001032:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	2300      	movs	r3, #0
 800103a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800103c:	2306      	movs	r3, #6
 800103e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001040:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001044:	4619      	mov	r1, r3
 8001046:	480e      	ldr	r0, [pc, #56]	; (8001080 <HAL_I2S_MspInit+0xf8>)
 8001048:	f000 fece 	bl	8001de8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800104c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001050:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001052:	2302      	movs	r3, #2
 8001054:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	2300      	movs	r3, #0
 800105c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800105e:	2306      	movs	r3, #6
 8001060:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001062:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001066:	4619      	mov	r1, r3
 8001068:	4806      	ldr	r0, [pc, #24]	; (8001084 <HAL_I2S_MspInit+0xfc>)
 800106a:	f000 febd 	bl	8001de8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800106e:	bf00      	nop
 8001070:	3738      	adds	r7, #56	; 0x38
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40003c00 	.word	0x40003c00
 800107c:	40023800 	.word	0x40023800
 8001080:	40020000 	.word	0x40020000
 8001084:	40020800 	.word	0x40020800

08001088 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08a      	sub	sp, #40	; 0x28
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a19      	ldr	r2, [pc, #100]	; (800110c <HAL_SPI_MspInit+0x84>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d12b      	bne.n	8001102 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	613b      	str	r3, [r7, #16]
 80010ae:	4b18      	ldr	r3, [pc, #96]	; (8001110 <HAL_SPI_MspInit+0x88>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b2:	4a17      	ldr	r2, [pc, #92]	; (8001110 <HAL_SPI_MspInit+0x88>)
 80010b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010b8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ba:	4b15      	ldr	r3, [pc, #84]	; (8001110 <HAL_SPI_MspInit+0x88>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010c2:	613b      	str	r3, [r7, #16]
 80010c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	4b11      	ldr	r3, [pc, #68]	; (8001110 <HAL_SPI_MspInit+0x88>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	4a10      	ldr	r2, [pc, #64]	; (8001110 <HAL_SPI_MspInit+0x88>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	6313      	str	r3, [r2, #48]	; 0x30
 80010d6:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <HAL_SPI_MspInit+0x88>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80010e2:	23e0      	movs	r3, #224	; 0xe0
 80010e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e6:	2302      	movs	r3, #2
 80010e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ee:	2300      	movs	r3, #0
 80010f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010f2:	2305      	movs	r3, #5
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f6:	f107 0314 	add.w	r3, r7, #20
 80010fa:	4619      	mov	r1, r3
 80010fc:	4805      	ldr	r0, [pc, #20]	; (8001114 <HAL_SPI_MspInit+0x8c>)
 80010fe:	f000 fe73 	bl	8001de8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001102:	bf00      	nop
 8001104:	3728      	adds	r7, #40	; 0x28
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40013000 	.word	0x40013000
 8001110:	40023800 	.word	0x40023800
 8001114:	40020000 	.word	0x40020000

08001118 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a18      	ldr	r2, [pc, #96]	; (8001188 <HAL_TIM_Base_MspInit+0x70>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d10e      	bne.n	8001148 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	4b17      	ldr	r3, [pc, #92]	; (800118c <HAL_TIM_Base_MspInit+0x74>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	4a16      	ldr	r2, [pc, #88]	; (800118c <HAL_TIM_Base_MspInit+0x74>)
 8001134:	f043 0304 	orr.w	r3, r3, #4
 8001138:	6413      	str	r3, [r2, #64]	; 0x40
 800113a:	4b14      	ldr	r3, [pc, #80]	; (800118c <HAL_TIM_Base_MspInit+0x74>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	f003 0304 	and.w	r3, r3, #4
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001146:	e01a      	b.n	800117e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM7)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a10      	ldr	r2, [pc, #64]	; (8001190 <HAL_TIM_Base_MspInit+0x78>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d115      	bne.n	800117e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	4b0d      	ldr	r3, [pc, #52]	; (800118c <HAL_TIM_Base_MspInit+0x74>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	4a0c      	ldr	r2, [pc, #48]	; (800118c <HAL_TIM_Base_MspInit+0x74>)
 800115c:	f043 0320 	orr.w	r3, r3, #32
 8001160:	6413      	str	r3, [r2, #64]	; 0x40
 8001162:	4b0a      	ldr	r3, [pc, #40]	; (800118c <HAL_TIM_Base_MspInit+0x74>)
 8001164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001166:	f003 0320 	and.w	r3, r3, #32
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800116e:	2200      	movs	r2, #0
 8001170:	2105      	movs	r1, #5
 8001172:	2037      	movs	r0, #55	; 0x37
 8001174:	f000 fe0e 	bl	8001d94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001178:	2037      	movs	r0, #55	; 0x37
 800117a:	f000 fe27 	bl	8001dcc <HAL_NVIC_EnableIRQ>
}
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40000800 	.word	0x40000800
 800118c:	40023800 	.word	0x40023800
 8001190:	40001400 	.word	0x40001400

08001194 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b088      	sub	sp, #32
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119c:	f107 030c 	add.w	r3, r7, #12
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a12      	ldr	r2, [pc, #72]	; (80011fc <HAL_TIM_MspPostInit+0x68>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d11e      	bne.n	80011f4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	4b11      	ldr	r3, [pc, #68]	; (8001200 <HAL_TIM_MspPostInit+0x6c>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a10      	ldr	r2, [pc, #64]	; (8001200 <HAL_TIM_MspPostInit+0x6c>)
 80011c0:	f043 0308 	orr.w	r3, r3, #8
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <HAL_TIM_MspPostInit+0x6c>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0308 	and.w	r3, r3, #8
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d8:	2302      	movs	r3, #2
 80011da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80011e4:	2302      	movs	r3, #2
 80011e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011e8:	f107 030c 	add.w	r3, r7, #12
 80011ec:	4619      	mov	r1, r3
 80011ee:	4805      	ldr	r0, [pc, #20]	; (8001204 <HAL_TIM_MspPostInit+0x70>)
 80011f0:	f000 fdfa 	bl	8001de8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80011f4:	bf00      	nop
 80011f6:	3720      	adds	r7, #32
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40000800 	.word	0x40000800
 8001200:	40023800 	.word	0x40023800
 8001204:	40020c00 	.word	0x40020c00

08001208 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08c      	sub	sp, #48	; 0x30
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001210:	2300      	movs	r3, #0
 8001212:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001214:	2300      	movs	r3, #0
 8001216:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM8 clock */
  __HAL_RCC_TIM8_CLK_ENABLE();
 8001218:	2300      	movs	r3, #0
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	4b2f      	ldr	r3, [pc, #188]	; (80012dc <HAL_InitTick+0xd4>)
 800121e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001220:	4a2e      	ldr	r2, [pc, #184]	; (80012dc <HAL_InitTick+0xd4>)
 8001222:	f043 0302 	orr.w	r3, r3, #2
 8001226:	6453      	str	r3, [r2, #68]	; 0x44
 8001228:	4b2c      	ldr	r3, [pc, #176]	; (80012dc <HAL_InitTick+0xd4>)
 800122a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122c:	f003 0302 	and.w	r3, r3, #2
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001234:	f107 020c 	add.w	r2, r7, #12
 8001238:	f107 0310 	add.w	r3, r7, #16
 800123c:	4611      	mov	r1, r2
 800123e:	4618      	mov	r0, r3
 8001240:	f003 fe26 	bl	8004e90 <HAL_RCC_GetClockConfig>

  /* Compute TIM8 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001244:	f003 fe10 	bl	8004e68 <HAL_RCC_GetPCLK2Freq>
 8001248:	4603      	mov	r3, r0
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM8 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800124e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001250:	4a23      	ldr	r2, [pc, #140]	; (80012e0 <HAL_InitTick+0xd8>)
 8001252:	fba2 2303 	umull	r2, r3, r2, r3
 8001256:	0c9b      	lsrs	r3, r3, #18
 8001258:	3b01      	subs	r3, #1
 800125a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM8 */
  htim8.Instance = TIM8;
 800125c:	4b21      	ldr	r3, [pc, #132]	; (80012e4 <HAL_InitTick+0xdc>)
 800125e:	4a22      	ldr	r2, [pc, #136]	; (80012e8 <HAL_InitTick+0xe0>)
 8001260:	601a      	str	r2, [r3, #0]
  + Period = [(TIM8CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim8.Init.Period = (1000000U / 1000U) - 1U;
 8001262:	4b20      	ldr	r3, [pc, #128]	; (80012e4 <HAL_InitTick+0xdc>)
 8001264:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001268:	60da      	str	r2, [r3, #12]
  htim8.Init.Prescaler = uwPrescalerValue;
 800126a:	4a1e      	ldr	r2, [pc, #120]	; (80012e4 <HAL_InitTick+0xdc>)
 800126c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126e:	6053      	str	r3, [r2, #4]
  htim8.Init.ClockDivision = 0;
 8001270:	4b1c      	ldr	r3, [pc, #112]	; (80012e4 <HAL_InitTick+0xdc>)
 8001272:	2200      	movs	r2, #0
 8001274:	611a      	str	r2, [r3, #16]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001276:	4b1b      	ldr	r3, [pc, #108]	; (80012e4 <HAL_InitTick+0xdc>)
 8001278:	2200      	movs	r2, #0
 800127a:	609a      	str	r2, [r3, #8]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800127c:	4b19      	ldr	r3, [pc, #100]	; (80012e4 <HAL_InitTick+0xdc>)
 800127e:	2200      	movs	r2, #0
 8001280:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim8);
 8001282:	4818      	ldr	r0, [pc, #96]	; (80012e4 <HAL_InitTick+0xdc>)
 8001284:	f003 ffff 	bl	8005286 <HAL_TIM_Base_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800128e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001292:	2b00      	cmp	r3, #0
 8001294:	d11b      	bne.n	80012ce <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim8);
 8001296:	4813      	ldr	r0, [pc, #76]	; (80012e4 <HAL_InitTick+0xdc>)
 8001298:	f004 f8ac 	bl	80053f4 <HAL_TIM_Base_Start_IT>
 800129c:	4603      	mov	r3, r0
 800129e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80012a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d111      	bne.n	80012ce <HAL_InitTick+0xc6>
    {
    /* Enable the TIM8 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80012aa:	202c      	movs	r0, #44	; 0x2c
 80012ac:	f000 fd8e 	bl	8001dcc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2b0f      	cmp	r3, #15
 80012b4:	d808      	bhi.n	80012c8 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority, 0U);
 80012b6:	2200      	movs	r2, #0
 80012b8:	6879      	ldr	r1, [r7, #4]
 80012ba:	202c      	movs	r0, #44	; 0x2c
 80012bc:	f000 fd6a 	bl	8001d94 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012c0:	4a0a      	ldr	r2, [pc, #40]	; (80012ec <HAL_InitTick+0xe4>)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6013      	str	r3, [r2, #0]
 80012c6:	e002      	b.n	80012ce <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80012ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3730      	adds	r7, #48	; 0x30
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40023800 	.word	0x40023800
 80012e0:	431bde83 	.word	0x431bde83
 80012e4:	20000238 	.word	0x20000238
 80012e8:	40010400 	.word	0x40010400
 80012ec:	20000004 	.word	0x20000004

080012f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012f4:	e7fe      	b.n	80012f4 <NMI_Handler+0x4>

080012f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012fa:	e7fe      	b.n	80012fa <HardFault_Handler+0x4>

080012fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001300:	e7fe      	b.n	8001300 <MemManage_Handler+0x4>

08001302 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001306:	e7fe      	b.n	8001306 <BusFault_Handler+0x4>

08001308 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800130c:	e7fe      	b.n	800130c <UsageFault_Handler+0x4>

0800130e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001320:	4802      	ldr	r0, [pc, #8]	; (800132c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001322:	f004 f9f9 	bl	8005718 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000238 	.word	0x20000238

08001330 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001334:	4802      	ldr	r0, [pc, #8]	; (8001340 <TIM7_IRQHandler+0x10>)
 8001336:	f004 f9ef 	bl	8005718 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	200001d8 	.word	0x200001d8

08001344 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001348:	4802      	ldr	r0, [pc, #8]	; (8001354 <OTG_FS_IRQHandler+0x10>)
 800134a:	f001 f985 	bl	8002658 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20005080 	.word	0x20005080

08001358 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001360:	4a14      	ldr	r2, [pc, #80]	; (80013b4 <_sbrk+0x5c>)
 8001362:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <_sbrk+0x60>)
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800136c:	4b13      	ldr	r3, [pc, #76]	; (80013bc <_sbrk+0x64>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d102      	bne.n	800137a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001374:	4b11      	ldr	r3, [pc, #68]	; (80013bc <_sbrk+0x64>)
 8001376:	4a12      	ldr	r2, [pc, #72]	; (80013c0 <_sbrk+0x68>)
 8001378:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800137a:	4b10      	ldr	r3, [pc, #64]	; (80013bc <_sbrk+0x64>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4413      	add	r3, r2
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	429a      	cmp	r2, r3
 8001386:	d207      	bcs.n	8001398 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001388:	f00b ff10 	bl	800d1ac <__errno>
 800138c:	4603      	mov	r3, r0
 800138e:	220c      	movs	r2, #12
 8001390:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001392:	f04f 33ff 	mov.w	r3, #4294967295
 8001396:	e009      	b.n	80013ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001398:	4b08      	ldr	r3, [pc, #32]	; (80013bc <_sbrk+0x64>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800139e:	4b07      	ldr	r3, [pc, #28]	; (80013bc <_sbrk+0x64>)
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4413      	add	r3, r2
 80013a6:	4a05      	ldr	r2, [pc, #20]	; (80013bc <_sbrk+0x64>)
 80013a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013aa:	68fb      	ldr	r3, [r7, #12]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3718      	adds	r7, #24
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20020000 	.word	0x20020000
 80013b8:	00000400 	.word	0x00000400
 80013bc:	20000280 	.word	0x20000280
 80013c0:	200054d0 	.word	0x200054d0

080013c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <SystemInit+0x20>)
 80013ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ce:	4a05      	ldr	r2, [pc, #20]	; (80013e4 <SystemInit+0x20>)
 80013d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80013e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001420 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013ec:	480d      	ldr	r0, [pc, #52]	; (8001424 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013ee:	490e      	ldr	r1, [pc, #56]	; (8001428 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013f0:	4a0e      	ldr	r2, [pc, #56]	; (800142c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013f4:	e002      	b.n	80013fc <LoopCopyDataInit>

080013f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013fa:	3304      	adds	r3, #4

080013fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001400:	d3f9      	bcc.n	80013f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001402:	4a0b      	ldr	r2, [pc, #44]	; (8001430 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001404:	4c0b      	ldr	r4, [pc, #44]	; (8001434 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001406:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001408:	e001      	b.n	800140e <LoopFillZerobss>

0800140a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800140a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800140c:	3204      	adds	r2, #4

0800140e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800140e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001410:	d3fb      	bcc.n	800140a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001412:	f7ff ffd7 	bl	80013c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001416:	f00b fecf 	bl	800d1b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800141a:	f7ff f8b7 	bl	800058c <main>
  bx  lr    
 800141e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001420:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001424:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001428:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 800142c:	0800fb08 	.word	0x0800fb08
  ldr r2, =_sbss
 8001430:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001434:	200054cc 	.word	0x200054cc

08001438 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001438:	e7fe      	b.n	8001438 <ADC_IRQHandler>
	...

0800143c <mcpr_LCD_InitPorts>:
#include "fonts.h"
#include "display.h"
#include <stdio.h>

void mcpr_LCD_InitPorts(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
	// GPIOB Takt aktivieren | wird anscheinend nicht benoetigt
	// RCC->AHB1ENR |= 1<<1;
	
	// GPIOD und GPIOE Takt aktivieren, falls zuvor nicht geschehen
	RCC->AHB1ENR |= 1<<3;
 8001440:	4b14      	ldr	r3, [pc, #80]	; (8001494 <mcpr_LCD_InitPorts+0x58>)
 8001442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001444:	4a13      	ldr	r2, [pc, #76]	; (8001494 <mcpr_LCD_InitPorts+0x58>)
 8001446:	f043 0308 	orr.w	r3, r3, #8
 800144a:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= 1<<4;
 800144c:	4b11      	ldr	r3, [pc, #68]	; (8001494 <mcpr_LCD_InitPorts+0x58>)
 800144e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001450:	4a10      	ldr	r2, [pc, #64]	; (8001494 <mcpr_LCD_InitPorts+0x58>)
 8001452:	f043 0310 	orr.w	r3, r3, #16
 8001456:	6313      	str	r3, [r2, #48]	; 0x30
	
	// benoetigte Datenleitungen und Steuerleitung zuruecksetzen falls zuvor noch nicht geschehen
	// 0b0000 0011 0000 0000 0011 0000 0011 0000
	GPIOD->MODER &= 0x03003030;
 8001458:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <mcpr_LCD_InitPorts+0x5c>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	490e      	ldr	r1, [pc, #56]	; (8001498 <mcpr_LCD_InitPorts+0x5c>)
 800145e:	4b0f      	ldr	r3, [pc, #60]	; (800149c <mcpr_LCD_InitPorts+0x60>)
 8001460:	4013      	ands	r3, r2
 8001462:	600b      	str	r3, [r1, #0]
	
	// Datenleitungen und Steuerleitungen neusetzen
	// 0b0101 0100 0101 0101 0100 0101 0100 0101
	GPIOD->MODER |= 0x54554545;
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <mcpr_LCD_InitPorts+0x5c>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	490b      	ldr	r1, [pc, #44]	; (8001498 <mcpr_LCD_InitPorts+0x5c>)
 800146a:	4b0d      	ldr	r3, [pc, #52]	; (80014a0 <mcpr_LCD_InitPorts+0x64>)
 800146c:	4313      	orrs	r3, r2
 800146e:	600b      	str	r3, [r1, #0]
	
	// GPIOE Daten u. Steuerleitung zuruecksetzen
	// 0b0000 0000 0000 0000 0011 1111 0011 1111
	GPIOE->MODER &= 0x00003F3F;
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <mcpr_LCD_InitPorts+0x68>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	490b      	ldr	r1, [pc, #44]	; (80014a4 <mcpr_LCD_InitPorts+0x68>)
 8001476:	f643 733f 	movw	r3, #16191	; 0x3f3f
 800147a:	4013      	ands	r3, r2
 800147c:	600b      	str	r3, [r1, #0]
	
	// GPIOE Daten u Steuerleitungen neusetzen
	// 0b0101 0101 0101 0101 0100 0000 0100 0000
	GPIOE->MODER |= 0x55554040;
 800147e:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <mcpr_LCD_InitPorts+0x68>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	4908      	ldr	r1, [pc, #32]	; (80014a4 <mcpr_LCD_InitPorts+0x68>)
 8001484:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <mcpr_LCD_InitPorts+0x6c>)
 8001486:	4313      	orrs	r3, r2
 8001488:	600b      	str	r3, [r1, #0]
	
	// GPIOB Steuerleitungen zuruecksetzen
	//
	// GPIOB->MODER &=;
	// GPIOB->MODER |=;
}
 800148a:	bf00      	nop
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	40023800 	.word	0x40023800
 8001498:	40020c00 	.word	0x40020c00
 800149c:	03003030 	.word	0x03003030
 80014a0:	54554545 	.word	0x54554545
 80014a4:	40021000 	.word	0x40021000
 80014a8:	55554040 	.word	0x55554040

080014ac <mcpr_LCD_Output16BitWord>:
{
	mcpr_LCD_Output16BitWord(data);
}

void mcpr_LCD_Output16BitWord(uint16_t data)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	80fb      	strh	r3, [r7, #6]
  // Die Bits 0 und 1 von data muessen auf Port D, Bits 14 und 15 ausgegeben werden
	// Die Bits 2 und 3 von data muessen auf Port D, Bit 0 und Bit 1 ausgegeben werden 0000 1100
	// Die Bits 13 bis 15 muessen auf Port D, Bit 8 bis 10 ausgegeben werden 1110
	// Bitmaske ergibt sich aus den zusetzenden bits auf dem port
	GPIOD->ODR &= ~(0xC703u);
 80014b6:	4b19      	ldr	r3, [pc, #100]	; (800151c <mcpr_LCD_Output16BitWord+0x70>)
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	4a18      	ldr	r2, [pc, #96]	; (800151c <mcpr_LCD_Output16BitWord+0x70>)
 80014bc:	f423 4347 	bic.w	r3, r3, #50944	; 0xc700
 80014c0:	f023 0303 	bic.w	r3, r3, #3
 80014c4:	6153      	str	r3, [r2, #20]
	GPIOD->ODR |= (((data & 0x3u)<<14) | ((data & 0x0Cu) >> 2) | ((data & 0xE000u) >> 5));
 80014c6:	4b15      	ldr	r3, [pc, #84]	; (800151c <mcpr_LCD_Output16BitWord+0x70>)
 80014c8:	695a      	ldr	r2, [r3, #20]
 80014ca:	88fb      	ldrh	r3, [r7, #6]
 80014cc:	039b      	lsls	r3, r3, #14
 80014ce:	b299      	uxth	r1, r3
 80014d0:	88fb      	ldrh	r3, [r7, #6]
 80014d2:	089b      	lsrs	r3, r3, #2
 80014d4:	f003 0303 	and.w	r3, r3, #3
 80014d8:	4319      	orrs	r1, r3
 80014da:	88fb      	ldrh	r3, [r7, #6]
 80014dc:	095b      	lsrs	r3, r3, #5
 80014de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80014e2:	430b      	orrs	r3, r1
 80014e4:	490d      	ldr	r1, [pc, #52]	; (800151c <mcpr_LCD_Output16BitWord+0x70>)
 80014e6:	4313      	orrs	r3, r2
 80014e8:	614b      	str	r3, [r1, #20]
	
	// Die Bits 4 bis 12 muessen auf Port E, Bit 7 bis 15 ausgegeben werden
	// Bitmaske ergibt sich aus den zusetzenden bits auf dem port
	GPIOE->ODR &= ~(0xFF80u);
 80014ea:	4b0d      	ldr	r3, [pc, #52]	; (8001520 <mcpr_LCD_Output16BitWord+0x74>)
 80014ec:	695b      	ldr	r3, [r3, #20]
 80014ee:	4a0c      	ldr	r2, [pc, #48]	; (8001520 <mcpr_LCD_Output16BitWord+0x74>)
 80014f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80014f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80014f8:	6153      	str	r3, [r2, #20]
	GPIOE->ODR |= (data & 0x1FF0u) << 3;	
 80014fa:	4b09      	ldr	r3, [pc, #36]	; (8001520 <mcpr_LCD_Output16BitWord+0x74>)
 80014fc:	695a      	ldr	r2, [r3, #20]
 80014fe:	88fb      	ldrh	r3, [r7, #6]
 8001500:	00d9      	lsls	r1, r3, #3
 8001502:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001506:	400b      	ands	r3, r1
 8001508:	4905      	ldr	r1, [pc, #20]	; (8001520 <mcpr_LCD_Output16BitWord+0x74>)
 800150a:	4313      	orrs	r3, r2
 800150c:	614b      	str	r3, [r1, #20]
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	40020c00 	.word	0x40020c00
 8001520:	40021000 	.word	0x40021000

08001524 <mcpr_LCD_WriteData>:

void mcpr_LCD_WriteData(uint16_t data) // wie das mit den delays is, keine Ahnung
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	80fb      	strh	r3, [r7, #6]
	// Aktivieren des Displays CS -> CHIP SELECT
	// Mit PD7 = Low waehlt der Mikrocontroller externe Bausteine an (hier IC3 o. Display).
	// Bei PD7 = High kann an den externen Bausteinen nichts geaendert werden.
	// PD11 = High wird von den externen Bausteinen der IC3 fuer die LEDs ausgewaehlt,
	// PD11 = Low waehlt das Display aus.
	GPIOD->ODR &= ~(1u<<7);
 800152e:	4b1c      	ldr	r3, [pc, #112]	; (80015a0 <mcpr_LCD_WriteData+0x7c>)
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	4a1b      	ldr	r2, [pc, #108]	; (80015a0 <mcpr_LCD_WriteData+0x7c>)
 8001534:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001538:	6153      	str	r3, [r2, #20]
	GPIOD->ODR &= ~(1u<<11);
 800153a:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <mcpr_LCD_WriteData+0x7c>)
 800153c:	695b      	ldr	r3, [r3, #20]
 800153e:	4a18      	ldr	r2, [pc, #96]	; (80015a0 <mcpr_LCD_WriteData+0x7c>)
 8001540:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001544:	6153      	str	r3, [r2, #20]
	
	// PD5 auf HIGH setzen
	GPIOD->ODR |= 1<<5;
 8001546:	4b16      	ldr	r3, [pc, #88]	; (80015a0 <mcpr_LCD_WriteData+0x7c>)
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	4a15      	ldr	r2, [pc, #84]	; (80015a0 <mcpr_LCD_WriteData+0x7c>)
 800154c:	f043 0320 	orr.w	r3, r3, #32
 8001550:	6153      	str	r3, [r2, #20]
	
	// RD muss waehrend des Zugriffs immer 1 sein, setze PD4 auf 1
	GPIOD->ODR |= 1<<4;
 8001552:	4b13      	ldr	r3, [pc, #76]	; (80015a0 <mcpr_LCD_WriteData+0x7c>)
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	4a12      	ldr	r2, [pc, #72]	; (80015a0 <mcpr_LCD_WriteData+0x7c>)
 8001558:	f043 0310 	orr.w	r3, r3, #16
 800155c:	6153      	str	r3, [r2, #20]
	
	// Wir schreiben Daten also PE3 (DC) auf 1 setzen;
	GPIOE->ODR |= 1<<3;
 800155e:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <mcpr_LCD_WriteData+0x80>)
 8001560:	695b      	ldr	r3, [r3, #20]
 8001562:	4a10      	ldr	r2, [pc, #64]	; (80015a4 <mcpr_LCD_WriteData+0x80>)
 8001564:	f043 0308 	orr.w	r3, r3, #8
 8001568:	6153      	str	r3, [r2, #20]
	
	// LOW PD5
	GPIOD->ODR ^= 1<<5;
 800156a:	4b0d      	ldr	r3, [pc, #52]	; (80015a0 <mcpr_LCD_WriteData+0x7c>)
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	4a0c      	ldr	r2, [pc, #48]	; (80015a0 <mcpr_LCD_WriteData+0x7c>)
 8001570:	f083 0320 	eor.w	r3, r3, #32
 8001574:	6153      	str	r3, [r2, #20]
	
	// Daten ans Display schreiben
	mcpr_LCD_Output16BitWord(data);
 8001576:	88fb      	ldrh	r3, [r7, #6]
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff ff97 	bl	80014ac <mcpr_LCD_Output16BitWord>
	
	// PD5 wieder HIGH setzen, da bei steigender Flanke die Daten am Grafikcontroller uebernommen werden
	GPIOD->ODR ^= 1<<5;
 800157e:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <mcpr_LCD_WriteData+0x7c>)
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	4a07      	ldr	r2, [pc, #28]	; (80015a0 <mcpr_LCD_WriteData+0x7c>)
 8001584:	f083 0320 	eor.w	r3, r3, #32
 8001588:	6153      	str	r3, [r2, #20]
	
	// Ziehe PD7 wieder auf HIGH
	GPIOD->ODR |= 1<<7;	
 800158a:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <mcpr_LCD_WriteData+0x7c>)
 800158c:	695b      	ldr	r3, [r3, #20]
 800158e:	4a04      	ldr	r2, [pc, #16]	; (80015a0 <mcpr_LCD_WriteData+0x7c>)
 8001590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001594:	6153      	str	r3, [r2, #20]
	// PD5 wieder auf LOW ziehen? Die Low-aktiven Steuerleitungen /RD, /WR und /CS muessen vor dem Reset deaktiviert werden (d.h. auf 1 gesetzt werden).
	// GPIOD->ODR &= ~(1u<<5);
}
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40020c00 	.word	0x40020c00
 80015a4:	40021000 	.word	0x40021000

080015a8 <mcpr_LCD_WriteCommand>:

void mcpr_LCD_WriteCommand(uint16_t data) // wie das mit den delays is, keine Ahnung
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	80fb      	strh	r3, [r7, #6]
	// Aktivieren des Displays CS -> CHIP SELECT
	// Mit PD7 = Low waehlt der Mikrocontroller externe Bausteine an (hier IC3 o. Display).
	// Bei PD7 = High kann an den externen Bausteinen nichts geaendert werden.
	// PD11 = High wird von den externen Bausteinen der IC3 fuer die LEDs ausgewaehlt,
	// PD11 = Low waehlt das Display aus.
	GPIOD->ODR &= ~(1u<<7);
 80015b2:	4b1c      	ldr	r3, [pc, #112]	; (8001624 <mcpr_LCD_WriteCommand+0x7c>)
 80015b4:	695b      	ldr	r3, [r3, #20]
 80015b6:	4a1b      	ldr	r2, [pc, #108]	; (8001624 <mcpr_LCD_WriteCommand+0x7c>)
 80015b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80015bc:	6153      	str	r3, [r2, #20]
	GPIOD->ODR &= ~(1u<<11);
 80015be:	4b19      	ldr	r3, [pc, #100]	; (8001624 <mcpr_LCD_WriteCommand+0x7c>)
 80015c0:	695b      	ldr	r3, [r3, #20]
 80015c2:	4a18      	ldr	r2, [pc, #96]	; (8001624 <mcpr_LCD_WriteCommand+0x7c>)
 80015c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80015c8:	6153      	str	r3, [r2, #20]
	
	// PD5 auf HIGH setzen
	GPIOD->ODR |= 1<<5;
 80015ca:	4b16      	ldr	r3, [pc, #88]	; (8001624 <mcpr_LCD_WriteCommand+0x7c>)
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	4a15      	ldr	r2, [pc, #84]	; (8001624 <mcpr_LCD_WriteCommand+0x7c>)
 80015d0:	f043 0320 	orr.w	r3, r3, #32
 80015d4:	6153      	str	r3, [r2, #20]
	
	// RD muss waehrend des Zugriffs immer 1 sein, setze PD4 auf 1
	GPIOD->ODR |= 1<<4;
 80015d6:	4b13      	ldr	r3, [pc, #76]	; (8001624 <mcpr_LCD_WriteCommand+0x7c>)
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	4a12      	ldr	r2, [pc, #72]	; (8001624 <mcpr_LCD_WriteCommand+0x7c>)
 80015dc:	f043 0310 	orr.w	r3, r3, #16
 80015e0:	6153      	str	r3, [r2, #20]
	
	// Wir schreiben Kommandos also PE3 (DC) auf 0 setzen;
	GPIOE->ODR &= ~(1u<<3);
 80015e2:	4b11      	ldr	r3, [pc, #68]	; (8001628 <mcpr_LCD_WriteCommand+0x80>)
 80015e4:	695b      	ldr	r3, [r3, #20]
 80015e6:	4a10      	ldr	r2, [pc, #64]	; (8001628 <mcpr_LCD_WriteCommand+0x80>)
 80015e8:	f023 0308 	bic.w	r3, r3, #8
 80015ec:	6153      	str	r3, [r2, #20]
	
	// LOW PD5
	GPIOD->ODR ^= 1<<5;
 80015ee:	4b0d      	ldr	r3, [pc, #52]	; (8001624 <mcpr_LCD_WriteCommand+0x7c>)
 80015f0:	695b      	ldr	r3, [r3, #20]
 80015f2:	4a0c      	ldr	r2, [pc, #48]	; (8001624 <mcpr_LCD_WriteCommand+0x7c>)
 80015f4:	f083 0320 	eor.w	r3, r3, #32
 80015f8:	6153      	str	r3, [r2, #20]
	
	// Daten ans Display schreiben
	mcpr_LCD_Output16BitWord(data);
 80015fa:	88fb      	ldrh	r3, [r7, #6]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff ff55 	bl	80014ac <mcpr_LCD_Output16BitWord>
	
	// PD5 wieder HIGH setzen, da bei steigender Flanke die Daten am Grafikcontroller uebernommen werden
	GPIOD->ODR ^= 1<<5;
 8001602:	4b08      	ldr	r3, [pc, #32]	; (8001624 <mcpr_LCD_WriteCommand+0x7c>)
 8001604:	695b      	ldr	r3, [r3, #20]
 8001606:	4a07      	ldr	r2, [pc, #28]	; (8001624 <mcpr_LCD_WriteCommand+0x7c>)
 8001608:	f083 0320 	eor.w	r3, r3, #32
 800160c:	6153      	str	r3, [r2, #20]
	
	// Ziehe PD7 wieder auf HIGH
	GPIOD->ODR |= 1<<7;	
 800160e:	4b05      	ldr	r3, [pc, #20]	; (8001624 <mcpr_LCD_WriteCommand+0x7c>)
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	4a04      	ldr	r2, [pc, #16]	; (8001624 <mcpr_LCD_WriteCommand+0x7c>)
 8001614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001618:	6153      	str	r3, [r2, #20]
	// PD5 wieder auf LOW ziehen? Die Low-aktiven Steuerleitungen /RD, /WR und /CS muessen vor dem Reset deaktiviert werden (d.h. auf 1 gesetzt werden).
	// GPIOD->ODR &= ~(1u<<5);	
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40020c00 	.word	0x40020c00
 8001628:	40021000 	.word	0x40021000

0800162c <mcpr_LCD_WriteReg>:

void mcpr_LCD_WriteReg(uint16_t cmd, uint16_t data)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	460a      	mov	r2, r1
 8001636:	80fb      	strh	r3, [r7, #6]
 8001638:	4613      	mov	r3, r2
 800163a:	80bb      	strh	r3, [r7, #4]
	mcpr_LCD_WriteCommand(cmd);
 800163c:	88fb      	ldrh	r3, [r7, #6]
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff ffb2 	bl	80015a8 <mcpr_LCD_WriteCommand>
	mcpr_LCD_WriteData(data);	
 8001644:	88bb      	ldrh	r3, [r7, #4]
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff ff6c 	bl	8001524 <mcpr_LCD_WriteData>
}
 800164c:	bf00      	nop
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <mcpr_LCD_Init>:

void mcpr_LCD_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
	// helper function
	mcpr_LCD_InitPorts();
 8001658:	f7ff fef0 	bl	800143c <mcpr_LCD_InitPorts>

	// Low Impuls auf die Reset Leitung
	GPIOD->ODR &= ~(1u<<3);
 800165c:	4b35      	ldr	r3, [pc, #212]	; (8001734 <mcpr_LCD_Init+0xe0>)
 800165e:	695b      	ldr	r3, [r3, #20]
 8001660:	4a34      	ldr	r2, [pc, #208]	; (8001734 <mcpr_LCD_Init+0xe0>)
 8001662:	f023 0308 	bic.w	r3, r3, #8
 8001666:	6153      	str	r3, [r2, #20]
	// min 15 us sekunden warten 
	u_delay(30);
 8001668:	201e      	movs	r0, #30
 800166a:	f000 f9ed 	bl	8001a48 <u_delay>
	// anschliessend high setzen
	GPIOD->ODR |= 1<<3;
 800166e:	4b31      	ldr	r3, [pc, #196]	; (8001734 <mcpr_LCD_Init+0xe0>)
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	4a30      	ldr	r2, [pc, #192]	; (8001734 <mcpr_LCD_Init+0xe0>)
 8001674:	f043 0308 	orr.w	r3, r3, #8
 8001678:	6153      	str	r3, [r2, #20]

	// Initialisierung
	mcpr_LCD_WriteReg(0x0010, 0x0001); /* Enter sleep mode */
 800167a:	2101      	movs	r1, #1
 800167c:	2010      	movs	r0, #16
 800167e:	f7ff ffd5 	bl	800162c <mcpr_LCD_WriteReg>
	mcpr_LCD_WriteReg(0x001E, 0x00B2); /* Set initial power parameters. */
 8001682:	21b2      	movs	r1, #178	; 0xb2
 8001684:	201e      	movs	r0, #30
 8001686:	f7ff ffd1 	bl	800162c <mcpr_LCD_WriteReg>
	mcpr_LCD_WriteReg(0x0028, 0x0006); /* Set initial power parameters. */
 800168a:	2106      	movs	r1, #6
 800168c:	2028      	movs	r0, #40	; 0x28
 800168e:	f7ff ffcd 	bl	800162c <mcpr_LCD_WriteReg>
	mcpr_LCD_WriteReg(0x0000, 0x0001); /* Start the oscillator.*/
 8001692:	2101      	movs	r1, #1
 8001694:	2000      	movs	r0, #0
 8001696:	f7ff ffc9 	bl	800162c <mcpr_LCD_WriteReg>
	mcpr_LCD_WriteReg(0x0001, 0x72EF); /* Set pixel format and basic display orientation */
 800169a:	f247 21ef 	movw	r1, #29423	; 0x72ef
 800169e:	2001      	movs	r0, #1
 80016a0:	f7ff ffc4 	bl	800162c <mcpr_LCD_WriteReg>
	mcpr_LCD_WriteReg(0x0002, 0x0600);
 80016a4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80016a8:	2002      	movs	r0, #2
 80016aa:	f7ff ffbf 	bl	800162c <mcpr_LCD_WriteReg>
	mcpr_LCD_WriteReg(0x0010, 0x0000); /* Exit sleep mode.*/ 
 80016ae:	2100      	movs	r1, #0
 80016b0:	2010      	movs	r0, #16
 80016b2:	f7ff ffbb 	bl	800162c <mcpr_LCD_WriteReg>
	// 30ms warten weniger geht meist auch
	m_delay(30);
 80016b6:	201e      	movs	r0, #30
 80016b8:	f000 fa0c 	bl	8001ad4 <m_delay>
	mcpr_LCD_WriteReg(0x0011, 0x6870); /* Configure pixel color format and MCU interface parameters.*/
 80016bc:	f646 0170 	movw	r1, #26736	; 0x6870
 80016c0:	2011      	movs	r0, #17
 80016c2:	f7ff ffb3 	bl	800162c <mcpr_LCD_WriteReg>
	mcpr_LCD_WriteReg(0x0012, 0x0999); /* Set analog parameters */
 80016c6:	f640 1199 	movw	r1, #2457	; 0x999
 80016ca:	2012      	movs	r0, #18
 80016cc:	f7ff ffae 	bl	800162c <mcpr_LCD_WriteReg>
	mcpr_LCD_WriteReg(0x0026, 0x3800);
 80016d0:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 80016d4:	2026      	movs	r0, #38	; 0x26
 80016d6:	f7ff ffa9 	bl	800162c <mcpr_LCD_WriteReg>
	mcpr_LCD_WriteReg(0x0007, 0x0033); /* Enable the display */
 80016da:	2133      	movs	r1, #51	; 0x33
 80016dc:	2007      	movs	r0, #7
 80016de:	f7ff ffa5 	bl	800162c <mcpr_LCD_WriteReg>
	mcpr_LCD_WriteReg(0x000C, 0x0005); /* Set VCIX2 voltage to 6.1V.*/
 80016e2:	2105      	movs	r1, #5
 80016e4:	200c      	movs	r0, #12
 80016e6:	f7ff ffa1 	bl	800162c <mcpr_LCD_WriteReg>
	mcpr_LCD_WriteReg(0x000D, 0x000A); /* Configure Vlcd63 and VCOMl */
 80016ea:	210a      	movs	r1, #10
 80016ec:	200d      	movs	r0, #13
 80016ee:	f7ff ff9d 	bl	800162c <mcpr_LCD_WriteReg>
	mcpr_LCD_WriteReg(0x000E, 0x2E00);
 80016f2:	f44f 5138 	mov.w	r1, #11776	; 0x2e00
 80016f6:	200e      	movs	r0, #14
 80016f8:	f7ff ff98 	bl	800162c <mcpr_LCD_WriteReg>
	mcpr_LCD_WriteReg(0x0044, (240-1) << 8); /* Set the display size and ensure that the GRAM window	is set to allow access to the full display buffer.*/
 80016fc:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 8001700:	2044      	movs	r0, #68	; 0x44
 8001702:	f7ff ff93 	bl	800162c <mcpr_LCD_WriteReg>
	mcpr_LCD_WriteReg(0x0045, 0x0000);
 8001706:	2100      	movs	r1, #0
 8001708:	2045      	movs	r0, #69	; 0x45
 800170a:	f7ff ff8f 	bl	800162c <mcpr_LCD_WriteReg>
	mcpr_LCD_WriteReg(0x0046, 320-1);
 800170e:	f240 113f 	movw	r1, #319	; 0x13f
 8001712:	2046      	movs	r0, #70	; 0x46
 8001714:	f7ff ff8a 	bl	800162c <mcpr_LCD_WriteReg>
	mcpr_LCD_WriteReg(0x004E, 0x0000); /*Set cursor to 0,0 */
 8001718:	2100      	movs	r1, #0
 800171a:	204e      	movs	r0, #78	; 0x4e
 800171c:	f7ff ff86 	bl	800162c <mcpr_LCD_WriteReg>
	mcpr_LCD_WriteReg(0x004F, 0x0000);
 8001720:	2100      	movs	r1, #0
 8001722:	204f      	movs	r0, #79	; 0x4f
 8001724:	f7ff ff82 	bl	800162c <mcpr_LCD_WriteReg>
	mcpr_LCD_ClearDisplay(LCD_BACKGROUND); // Clear Display
 8001728:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800172c:	f000 f828 	bl	8001780 <mcpr_LCD_ClearDisplay>
}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40020c00 	.word	0x40020c00

08001738 <mcpr_LCD_SetCursor>:

// uint16_t, da die Koordinaten Register, garnicht groesser sind?
void mcpr_LCD_SetCursor(const uint16_t x, const uint16_t y)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	460a      	mov	r2, r1
 8001742:	80fb      	strh	r3, [r7, #6]
 8001744:	4613      	mov	r3, r2
 8001746:	80bb      	strh	r3, [r7, #4]
	// SSD2119_X_RAM_ADDR_REG 0x4E
	// SSD2119_Y_RAM_ADDR_REG 0x4F
	mcpr_LCD_WriteReg(0x004E, x); // Set GDDRAM X 
 8001748:	88fb      	ldrh	r3, [r7, #6]
 800174a:	4619      	mov	r1, r3
 800174c:	204e      	movs	r0, #78	; 0x4e
 800174e:	f7ff ff6d 	bl	800162c <mcpr_LCD_WriteReg>
	mcpr_LCD_WriteReg(0x004F, y); // Set GDDRAM Y
 8001752:	88bb      	ldrh	r3, [r7, #4]
 8001754:	4619      	mov	r1, r3
 8001756:	204f      	movs	r0, #79	; 0x4f
 8001758:	f7ff ff68 	bl	800162c <mcpr_LCD_WriteReg>
}
 800175c:	bf00      	nop
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <mcpr_LCD_DrawPixel>:

void mcpr_LCD_DrawPixel(uint16_t color)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	80fb      	strh	r3, [r7, #6]
	// Write Data to GRAM (R22h)
	mcpr_LCD_WriteReg(0x0022, color);
 800176e:	88fb      	ldrh	r3, [r7, #6]
 8001770:	4619      	mov	r1, r3
 8001772:	2022      	movs	r0, #34	; 0x22
 8001774:	f7ff ff5a 	bl	800162c <mcpr_LCD_WriteReg>
}
 8001778:	bf00      	nop
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <mcpr_LCD_ClearDisplay>:

void mcpr_LCD_ClearDisplay(uint16_t color)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	80fb      	strh	r3, [r7, #6]
	// die x-Koordinate des Cursors zw. 0 und 319 liegen und die y-Koordinate zw. 0 und 239
	// Die Position des Cursors inkrementiert sich automatisch. Wuerden also noch weitere Datenzugriffe erfolgen, ergaebe sich eine horizontale Linie.	
	mcpr_LCD_SetCursor(0x0, 0x0);
 800178a:	2100      	movs	r1, #0
 800178c:	2000      	movs	r0, #0
 800178e:	f7ff ffd3 	bl	8001738 <mcpr_LCD_SetCursor>
	
	// Optimierung: kein erneutes Aufrufen der DrawPixel Fkt. 
	// stattdessen wiederholtes ausloesen einer Write Flanke, da Color
	// Information sich nicht veraendern und Cursor automatisch inkrementiert wird
	for (uint32_t i = 0; i < DISPLAY_WIDTH*DISPLAY_HEIGHT; i++)
 8001792:	2300      	movs	r3, #0
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	e006      	b.n	80017a6 <mcpr_LCD_ClearDisplay+0x26>
	{
		mcpr_LCD_DrawPixel(color);
 8001798:	88fb      	ldrh	r3, [r7, #6]
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff ffe2 	bl	8001764 <mcpr_LCD_DrawPixel>
	for (uint32_t i = 0; i < DISPLAY_WIDTH*DISPLAY_HEIGHT; i++)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	3301      	adds	r3, #1
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 80017ac:	d3f4      	bcc.n	8001798 <mcpr_LCD_ClearDisplay+0x18>
	}
}
 80017ae:	bf00      	nop
 80017b0:	bf00      	nop
 80017b2:	3710      	adds	r7, #16
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <mcpr_LCD_ClearLine>:

void mcpr_LCD_ClearLine(uint16_t y_begin, uint16_t y_end, uint16_t color)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	80fb      	strh	r3, [r7, #6]
 80017c2:	460b      	mov	r3, r1
 80017c4:	80bb      	strh	r3, [r7, #4]
 80017c6:	4613      	mov	r3, r2
 80017c8:	807b      	strh	r3, [r7, #2]
	mcpr_LCD_SetCursor(0x0, y_begin);
 80017ca:	88fb      	ldrh	r3, [r7, #6]
 80017cc:	4619      	mov	r1, r3
 80017ce:	2000      	movs	r0, #0
 80017d0:	f7ff ffb2 	bl	8001738 <mcpr_LCD_SetCursor>
	
	mcpr_LCD_DrawPixel(color);
 80017d4:	887b      	ldrh	r3, [r7, #2]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff ffc4 	bl	8001764 <mcpr_LCD_DrawPixel>

	for (uint32_t i = 0; i < DISPLAY_WIDTH*(y_end-y_begin); i++)
 80017dc:	2300      	movs	r3, #0
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	e005      	b.n	80017ee <mcpr_LCD_ClearLine+0x36>
	{
		mcpr_LCD_WriteCommand(0x0022);
 80017e2:	2022      	movs	r0, #34	; 0x22
 80017e4:	f7ff fee0 	bl	80015a8 <mcpr_LCD_WriteCommand>
	for (uint32_t i = 0; i < DISPLAY_WIDTH*(y_end-y_begin); i++)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	3301      	adds	r3, #1
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	88ba      	ldrh	r2, [r7, #4]
 80017f0:	88fb      	ldrh	r3, [r7, #6]
 80017f2:	1ad2      	subs	r2, r2, r3
 80017f4:	4613      	mov	r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	4413      	add	r3, r2
 80017fa:	019b      	lsls	r3, r3, #6
 80017fc:	461a      	mov	r2, r3
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	4293      	cmp	r3, r2
 8001802:	d3ee      	bcc.n	80017e2 <mcpr_LCD_ClearLine+0x2a>
	}
}
 8001804:	bf00      	nop
 8001806:	bf00      	nop
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
	...

08001810 <mcpr_LCD_WriteLetter>:

void mcpr_LCD_WriteLetter(uint16_t x, uint16_t y, uint16_t colorfg, uint16_t colorbg, uint8_t c)
{
 8001810:	b590      	push	{r4, r7, lr}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	4604      	mov	r4, r0
 8001818:	4608      	mov	r0, r1
 800181a:	4611      	mov	r1, r2
 800181c:	461a      	mov	r2, r3
 800181e:	4623      	mov	r3, r4
 8001820:	80fb      	strh	r3, [r7, #6]
 8001822:	4603      	mov	r3, r0
 8001824:	80bb      	strh	r3, [r7, #4]
 8001826:	460b      	mov	r3, r1
 8001828:	807b      	strh	r3, [r7, #2]
 800182a:	4613      	mov	r3, r2
 800182c:	803b      	strh	r3, [r7, #0]
	int pix_byte = 0;
 800182e:	2300      	movs	r3, #0
 8001830:	60bb      	str	r3, [r7, #8]

	// setze initial den Cursor auf x y
	mcpr_LCD_SetCursor(x, y);
 8001832:	88ba      	ldrh	r2, [r7, #4]
 8001834:	88fb      	ldrh	r3, [r7, #6]
 8001836:	4611      	mov	r1, r2
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff ff7d 	bl	8001738 <mcpr_LCD_SetCursor>

	for (uint8_t i = 0; i < 31; i++)
 800183e:	2300      	movs	r3, #0
 8001840:	73fb      	strb	r3, [r7, #15]
 8001842:	e034      	b.n	80018ae <mcpr_LCD_WriteLetter+0x9e>
	{
		pix_byte = console_font_12x16[(32*(int)c)+i];
 8001844:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001848:	015a      	lsls	r2, r3, #5
 800184a:	7bfb      	ldrb	r3, [r7, #15]
 800184c:	4413      	add	r3, r2
 800184e:	4a1c      	ldr	r2, [pc, #112]	; (80018c0 <mcpr_LCD_WriteLetter+0xb0>)
 8001850:	5cd3      	ldrb	r3, [r2, r3]
 8001852:	60bb      	str	r3, [r7, #8]
		for (uint8_t k = 8; k > 0; k--)
 8001854:	2308      	movs	r3, #8
 8001856:	73bb      	strb	r3, [r7, #14]
 8001858:	e014      	b.n	8001884 <mcpr_LCD_WriteLetter+0x74>
		{
			// Schreibe ein pixel mit der farbe fg wenn 1 und ein pixel mir farbe bg wenn 0
			// alternativ kann das umgeschrieben werden um nicht extra ein pixel zu schreiben wenn 0
			(pix_byte & (1<<(k-1))) ? mcpr_LCD_DrawPixel(colorfg) : mcpr_LCD_DrawPixel(colorbg);
 800185a:	7bbb      	ldrb	r3, [r7, #14]
 800185c:	3b01      	subs	r3, #1
 800185e:	68ba      	ldr	r2, [r7, #8]
 8001860:	fa42 f303 	asr.w	r3, r2, r3
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	2b00      	cmp	r3, #0
 800186a:	d004      	beq.n	8001876 <mcpr_LCD_WriteLetter+0x66>
 800186c:	887b      	ldrh	r3, [r7, #2]
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff ff78 	bl	8001764 <mcpr_LCD_DrawPixel>
 8001874:	e003      	b.n	800187e <mcpr_LCD_WriteLetter+0x6e>
 8001876:	883b      	ldrh	r3, [r7, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff ff73 	bl	8001764 <mcpr_LCD_DrawPixel>
		for (uint8_t k = 8; k > 0; k--)
 800187e:	7bbb      	ldrb	r3, [r7, #14]
 8001880:	3b01      	subs	r3, #1
 8001882:	73bb      	strb	r3, [r7, #14]
 8001884:	7bbb      	ldrb	r3, [r7, #14]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1e7      	bne.n	800185a <mcpr_LCD_WriteLetter+0x4a>
		}

		// setze Cursor auf anfangs position x und inkrementiere y um 1 um in die naechste zeile zu springen
		if (i%2 != 0)
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b00      	cmp	r3, #0
 8001894:	d008      	beq.n	80018a8 <mcpr_LCD_WriteLetter+0x98>
			mcpr_LCD_SetCursor(x, y+=1);
 8001896:	88bb      	ldrh	r3, [r7, #4]
 8001898:	3301      	adds	r3, #1
 800189a:	80bb      	strh	r3, [r7, #4]
 800189c:	88ba      	ldrh	r2, [r7, #4]
 800189e:	88fb      	ldrh	r3, [r7, #6]
 80018a0:	4611      	mov	r1, r2
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff ff48 	bl	8001738 <mcpr_LCD_SetCursor>
	for (uint8_t i = 0; i < 31; i++)
 80018a8:	7bfb      	ldrb	r3, [r7, #15]
 80018aa:	3301      	adds	r3, #1
 80018ac:	73fb      	strb	r3, [r7, #15]
 80018ae:	7bfb      	ldrb	r3, [r7, #15]
 80018b0:	2b1e      	cmp	r3, #30
 80018b2:	d9c7      	bls.n	8001844 <mcpr_LCD_WriteLetter+0x34>
	}
}
 80018b4:	bf00      	nop
 80018b6:	bf00      	nop
 80018b8:	3714      	adds	r7, #20
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd90      	pop	{r4, r7, pc}
 80018be:	bf00      	nop
 80018c0:	0800dac4 	.word	0x0800dac4

080018c4 <mcpr_LCD_WriteString>:

void mcpr_LCD_WriteString(uint16_t x, uint16_t y, uint16_t colorfg, uint16_t colorbg, char str[MAX_STR_LEN])
{
 80018c4:	b590      	push	{r4, r7, lr}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af02      	add	r7, sp, #8
 80018ca:	4604      	mov	r4, r0
 80018cc:	4608      	mov	r0, r1
 80018ce:	4611      	mov	r1, r2
 80018d0:	461a      	mov	r2, r3
 80018d2:	4623      	mov	r3, r4
 80018d4:	80fb      	strh	r3, [r7, #6]
 80018d6:	4603      	mov	r3, r0
 80018d8:	80bb      	strh	r3, [r7, #4]
 80018da:	460b      	mov	r3, r1
 80018dc:	807b      	strh	r3, [r7, #2]
 80018de:	4613      	mov	r3, r2
 80018e0:	803b      	strh	r3, [r7, #0]
	while (*str != '\0')
 80018e2:	e00f      	b.n	8001904 <mcpr_LCD_WriteString+0x40>
	{
		mcpr_LCD_WriteLetter(x, y, colorfg, colorbg, *str);
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	883c      	ldrh	r4, [r7, #0]
 80018ea:	887a      	ldrh	r2, [r7, #2]
 80018ec:	88b9      	ldrh	r1, [r7, #4]
 80018ee:	88f8      	ldrh	r0, [r7, #6]
 80018f0:	9300      	str	r3, [sp, #0]
 80018f2:	4623      	mov	r3, r4
 80018f4:	f7ff ff8c 	bl	8001810 <mcpr_LCD_WriteLetter>
		// naechster Buchstabe
		str+=1;
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	3301      	adds	r3, #1
 80018fc:	61bb      	str	r3, [r7, #24]
		// springe ein Zeichen nach rechts
		x+=12;
 80018fe:	88fb      	ldrh	r3, [r7, #6]
 8001900:	330c      	adds	r3, #12
 8001902:	80fb      	strh	r3, [r7, #6]
	while (*str != '\0')
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d1eb      	bne.n	80018e4 <mcpr_LCD_WriteString+0x20>
	}
}
 800190c:	bf00      	nop
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	bd90      	pop	{r4, r7, pc}
	...

08001918 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001926:	2b00      	cmp	r3, #0
 8001928:	db0b      	blt.n	8001942 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800192a:	79fb      	ldrb	r3, [r7, #7]
 800192c:	f003 021f 	and.w	r2, r3, #31
 8001930:	4907      	ldr	r1, [pc, #28]	; (8001950 <__NVIC_EnableIRQ+0x38>)
 8001932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001936:	095b      	lsrs	r3, r3, #5
 8001938:	2001      	movs	r0, #1
 800193a:	fa00 f202 	lsl.w	r2, r0, r2
 800193e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	e000e100 	.word	0xe000e100

08001954 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800195e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001962:	2b00      	cmp	r3, #0
 8001964:	db12      	blt.n	800198c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001966:	79fb      	ldrb	r3, [r7, #7]
 8001968:	f003 021f 	and.w	r2, r3, #31
 800196c:	490a      	ldr	r1, [pc, #40]	; (8001998 <__NVIC_DisableIRQ+0x44>)
 800196e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001972:	095b      	lsrs	r3, r3, #5
 8001974:	2001      	movs	r0, #1
 8001976:	fa00 f202 	lsl.w	r2, r0, r2
 800197a:	3320      	adds	r3, #32
 800197c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001980:	f3bf 8f4f 	dsb	sy
}
 8001984:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001986:	f3bf 8f6f 	isb	sy
}
 800198a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	e000e100 	.word	0xe000e100

0800199c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	6039      	str	r1, [r7, #0]
 80019a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	db0a      	blt.n	80019c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	490c      	ldr	r1, [pc, #48]	; (80019e8 <__NVIC_SetPriority+0x4c>)
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	0112      	lsls	r2, r2, #4
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	440b      	add	r3, r1
 80019c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c4:	e00a      	b.n	80019dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	4908      	ldr	r1, [pc, #32]	; (80019ec <__NVIC_SetPriority+0x50>)
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	f003 030f 	and.w	r3, r3, #15
 80019d2:	3b04      	subs	r3, #4
 80019d4:	0112      	lsls	r2, r2, #4
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	440b      	add	r3, r1
 80019da:	761a      	strb	r2, [r3, #24]
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000e100 	.word	0xe000e100
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <TIM6_DAC_IRQHandler>:
#include "mcpr_timer.h"
#include <stdbool.h>

// IRQ Handler fuer TIM6, welche fuer die delay funktionen genutzt wird
void TIM6_DAC_IRQHandler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
	if (TIM6->SR & TIM_SR_UIF)
 80019f4:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <TIM6_DAC_IRQHandler+0x50>)
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d00c      	beq.n	8001a1a <TIM6_DAC_IRQHandler+0x2a>
	{
		// Resetten des Status Registers ansonsten wird die Service Routine sofort neu ausgeloest
		// gilt fuer alle Interrupts
		TIM6->SR &= ~TIM_SR_UIF;
 8001a00:	4b0f      	ldr	r3, [pc, #60]	; (8001a40 <TIM6_DAC_IRQHandler+0x50>)
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	4a0e      	ldr	r2, [pc, #56]	; (8001a40 <TIM6_DAC_IRQHandler+0x50>)
 8001a06:	f023 0301 	bic.w	r3, r3, #1
 8001a0a:	6113      	str	r3, [r2, #16]
		resetCnt++;
 8001a0c:	4b0d      	ldr	r3, [pc, #52]	; (8001a44 <TIM6_DAC_IRQHandler+0x54>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	3301      	adds	r3, #1
 8001a14:	b2da      	uxtb	r2, r3
 8001a16:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <TIM6_DAC_IRQHandler+0x54>)
 8001a18:	701a      	strb	r2, [r3, #0]
	}
	if (resetCnt == 2)
 8001a1a:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <TIM6_DAC_IRQHandler+0x54>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d108      	bne.n	8001a36 <TIM6_DAC_IRQHandler+0x46>
	{
		resetCnt = 0;
 8001a24:	4b07      	ldr	r3, [pc, #28]	; (8001a44 <TIM6_DAC_IRQHandler+0x54>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	701a      	strb	r2, [r3, #0]
		//Beende den Timer
		TIM6->CR1 &= ~TIM_CR1_CEN;
 8001a2a:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <TIM6_DAC_IRQHandler+0x50>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a04      	ldr	r2, [pc, #16]	; (8001a40 <TIM6_DAC_IRQHandler+0x50>)
 8001a30:	f023 0301 	bic.w	r3, r3, #1
 8001a34:	6013      	str	r3, [r2, #0]
	}
}
 8001a36:	bf00      	nop
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	40001000 	.word	0x40001000
 8001a44:	20000284 	.word	0x20000284

08001a48 <u_delay>:

// Delay funktionen basierend auf dem TIM6 Interrupt
void u_delay(uint16_t us)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	80fb      	strh	r3, [r7, #6]
	// Setup Timer 6
	// aktivieren der TIM6 Clock auf bit 4
	RCC->APB1ENR |= (1<<4);
 8001a52:	4b1d      	ldr	r3, [pc, #116]	; (8001ac8 <u_delay+0x80>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	4a1c      	ldr	r2, [pc, #112]	; (8001ac8 <u_delay+0x80>)
 8001a58:	f043 0310 	orr.w	r3, r3, #16
 8001a5c:	6413      	str	r3, [r2, #64]	; 0x40
	
	// fuer mikro-sekunden genauigkeit benoetigen wir einen Timertakt von 1MHz
	TIM6->PSC = 83;
 8001a5e:	4b1b      	ldr	r3, [pc, #108]	; (8001acc <u_delay+0x84>)
 8001a60:	2253      	movs	r2, #83	; 0x53
 8001a62:	629a      	str	r2, [r3, #40]	; 0x28
	TIM6->ARR = us-1;
 8001a64:	88fb      	ldrh	r3, [r7, #6]
 8001a66:	1e5a      	subs	r2, r3, #1
 8001a68:	4b18      	ldr	r3, [pc, #96]	; (8001acc <u_delay+0x84>)
 8001a6a:	62da      	str	r2, [r3, #44]	; 0x2c
	// Enable Interrupts
	TIM6->DIER |= TIM_DIER_UIE;
 8001a6c:	4b17      	ldr	r3, [pc, #92]	; (8001acc <u_delay+0x84>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	4a16      	ldr	r2, [pc, #88]	; (8001acc <u_delay+0x84>)
 8001a72:	f043 0301 	orr.w	r3, r3, #1
 8001a76:	60d3      	str	r3, [r2, #12]
	NVIC_SetPriority(TIM6_DAC_IRQn, 8);
 8001a78:	2108      	movs	r1, #8
 8001a7a:	2036      	movs	r0, #54	; 0x36
 8001a7c:	f7ff ff8e 	bl	800199c <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a80:	2036      	movs	r0, #54	; 0x36
 8001a82:	f7ff ff49 	bl	8001918 <__NVIC_EnableIRQ>
	TIM6->CNT = 0;
 8001a86:	4b11      	ldr	r3, [pc, #68]	; (8001acc <u_delay+0x84>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	625a      	str	r2, [r3, #36]	; 0x24
	// setze resetCnt auf 1 da wir nicht das problem wie beim ms timer haben (es ist nicht schoen aber es funktioniert)
	resetCnt = 1;
 8001a8c:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <u_delay+0x88>)
 8001a8e:	2201      	movs	r2, #1
 8001a90:	701a      	strb	r2, [r3, #0]
	TIM6->CR1 |= TIM_CR1_CEN;
 8001a92:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <u_delay+0x84>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a0d      	ldr	r2, [pc, #52]	; (8001acc <u_delay+0x84>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	6013      	str	r3, [r2, #0]
	
	while(TIM6->CR1 & TIM_CR1_CEN);
 8001a9e:	bf00      	nop
 8001aa0:	4b0a      	ldr	r3, [pc, #40]	; (8001acc <u_delay+0x84>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1f9      	bne.n	8001aa0 <u_delay+0x58>
	RCC->APB1ENR &= ~(1u<<4);
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <u_delay+0x80>)
 8001aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab0:	4a05      	ldr	r2, [pc, #20]	; (8001ac8 <u_delay+0x80>)
 8001ab2:	f023 0310 	bic.w	r3, r3, #16
 8001ab6:	6413      	str	r3, [r2, #64]	; 0x40
	NVIC_DisableIRQ(TIM6_DAC_IRQn);
 8001ab8:	2036      	movs	r0, #54	; 0x36
 8001aba:	f7ff ff4b 	bl	8001954 <__NVIC_DisableIRQ>
}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	40001000 	.word	0x40001000
 8001ad0:	20000284 	.word	0x20000284

08001ad4 <m_delay>:

void m_delay(uint16_t ms)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	80fb      	strh	r3, [r7, #6]
	// Setup Timer 6
	// aktivieren der TIM6 Clock auf bit 4
	RCC->APB1ENR |= (1<<4);
 8001ade:	4b1c      	ldr	r3, [pc, #112]	; (8001b50 <m_delay+0x7c>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	4a1b      	ldr	r2, [pc, #108]	; (8001b50 <m_delay+0x7c>)
 8001ae4:	f043 0310 	orr.w	r3, r3, #16
 8001ae8:	6413      	str	r3, [r2, #64]	; 0x40
	
	// 84000 / 2, da allerdings 16bit register passt muss getrixt werden
	// Basistakt des Timers = 84Mhz
	// Fuer millisekunden genauigkeit benoetigen wir einen Timertakt von 1kHz
	TIM6->PSC = 42000-1;
 8001aea:	4b1a      	ldr	r3, [pc, #104]	; (8001b54 <m_delay+0x80>)
 8001aec:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001af0:	629a      	str	r2, [r3, #40]	; 0x28
	TIM6->ARR = (ms-1);
 8001af2:	88fb      	ldrh	r3, [r7, #6]
 8001af4:	1e5a      	subs	r2, r3, #1
 8001af6:	4b17      	ldr	r3, [pc, #92]	; (8001b54 <m_delay+0x80>)
 8001af8:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM6->DIER |= TIM_DIER_UIE;
 8001afa:	4b16      	ldr	r3, [pc, #88]	; (8001b54 <m_delay+0x80>)
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	4a15      	ldr	r2, [pc, #84]	; (8001b54 <m_delay+0x80>)
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	60d3      	str	r3, [r2, #12]
	NVIC_SetPriority(TIM6_DAC_IRQn, 8);
 8001b06:	2108      	movs	r1, #8
 8001b08:	2036      	movs	r0, #54	; 0x36
 8001b0a:	f7ff ff47 	bl	800199c <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b0e:	2036      	movs	r0, #54	; 0x36
 8001b10:	f7ff ff02 	bl	8001918 <__NVIC_EnableIRQ>
	TIM6->CNT = 0;
 8001b14:	4b0f      	ldr	r3, [pc, #60]	; (8001b54 <m_delay+0x80>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	625a      	str	r2, [r3, #36]	; 0x24
	TIM6->CR1 |= TIM_CR1_CEN;
 8001b1a:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <m_delay+0x80>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a0d      	ldr	r2, [pc, #52]	; (8001b54 <m_delay+0x80>)
 8001b20:	f043 0301 	orr.w	r3, r3, #1
 8001b24:	6013      	str	r3, [r2, #0]
	
	while(TIM6->CR1 & TIM_CR1_CEN);
 8001b26:	bf00      	nop
 8001b28:	4b0a      	ldr	r3, [pc, #40]	; (8001b54 <m_delay+0x80>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0301 	and.w	r3, r3, #1
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d1f9      	bne.n	8001b28 <m_delay+0x54>
	RCC->APB1ENR &= ~(1u<<4);
 8001b34:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <m_delay+0x7c>)
 8001b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b38:	4a05      	ldr	r2, [pc, #20]	; (8001b50 <m_delay+0x7c>)
 8001b3a:	f023 0310 	bic.w	r3, r3, #16
 8001b3e:	6413      	str	r3, [r2, #64]	; 0x40
	NVIC_DisableIRQ(TIM6_DAC_IRQn);
 8001b40:	2036      	movs	r0, #54	; 0x36
 8001b42:	f7ff ff07 	bl	8001954 <__NVIC_DisableIRQ>
}
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40023800 	.word	0x40023800
 8001b54:	40001000 	.word	0x40001000

08001b58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b5c:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <HAL_Init+0x40>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a0d      	ldr	r2, [pc, #52]	; (8001b98 <HAL_Init+0x40>)
 8001b62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b68:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <HAL_Init+0x40>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a0a      	ldr	r2, [pc, #40]	; (8001b98 <HAL_Init+0x40>)
 8001b6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b74:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <HAL_Init+0x40>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a07      	ldr	r2, [pc, #28]	; (8001b98 <HAL_Init+0x40>)
 8001b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b80:	2003      	movs	r0, #3
 8001b82:	f000 f8fc 	bl	8001d7e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b86:	200f      	movs	r0, #15
 8001b88:	f7ff fb3e 	bl	8001208 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b8c:	f7ff f988 	bl	8000ea0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40023c00 	.word	0x40023c00

08001b9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <HAL_IncTick+0x20>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <HAL_IncTick+0x24>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4413      	add	r3, r2
 8001bac:	4a04      	ldr	r2, [pc, #16]	; (8001bc0 <HAL_IncTick+0x24>)
 8001bae:	6013      	str	r3, [r2, #0]
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	20000008 	.word	0x20000008
 8001bc0:	20000288 	.word	0x20000288

08001bc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc8:	4b03      	ldr	r3, [pc, #12]	; (8001bd8 <HAL_GetTick+0x14>)
 8001bca:	681b      	ldr	r3, [r3, #0]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	20000288 	.word	0x20000288

08001bdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001be4:	f7ff ffee 	bl	8001bc4 <HAL_GetTick>
 8001be8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf4:	d005      	beq.n	8001c02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <HAL_Delay+0x44>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	4413      	add	r3, r2
 8001c00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c02:	bf00      	nop
 8001c04:	f7ff ffde 	bl	8001bc4 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d8f7      	bhi.n	8001c04 <HAL_Delay+0x28>
  {
  }
}
 8001c14:	bf00      	nop
 8001c16:	bf00      	nop
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000008 	.word	0x20000008

08001c24 <__NVIC_SetPriorityGrouping>:
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c34:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <__NVIC_SetPriorityGrouping+0x44>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c3a:	68ba      	ldr	r2, [r7, #8]
 8001c3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c40:	4013      	ands	r3, r2
 8001c42:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c56:	4a04      	ldr	r2, [pc, #16]	; (8001c68 <__NVIC_SetPriorityGrouping+0x44>)
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	60d3      	str	r3, [r2, #12]
}
 8001c5c:	bf00      	nop
 8001c5e:	3714      	adds	r7, #20
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	e000ed00 	.word	0xe000ed00

08001c6c <__NVIC_GetPriorityGrouping>:
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c70:	4b04      	ldr	r3, [pc, #16]	; (8001c84 <__NVIC_GetPriorityGrouping+0x18>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	0a1b      	lsrs	r3, r3, #8
 8001c76:	f003 0307 	and.w	r3, r3, #7
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <__NVIC_EnableIRQ>:
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	db0b      	blt.n	8001cb2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	f003 021f 	and.w	r2, r3, #31
 8001ca0:	4907      	ldr	r1, [pc, #28]	; (8001cc0 <__NVIC_EnableIRQ+0x38>)
 8001ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca6:	095b      	lsrs	r3, r3, #5
 8001ca8:	2001      	movs	r0, #1
 8001caa:	fa00 f202 	lsl.w	r2, r0, r2
 8001cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	e000e100 	.word	0xe000e100

08001cc4 <__NVIC_SetPriority>:
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	6039      	str	r1, [r7, #0]
 8001cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	db0a      	blt.n	8001cee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	b2da      	uxtb	r2, r3
 8001cdc:	490c      	ldr	r1, [pc, #48]	; (8001d10 <__NVIC_SetPriority+0x4c>)
 8001cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce2:	0112      	lsls	r2, r2, #4
 8001ce4:	b2d2      	uxtb	r2, r2
 8001ce6:	440b      	add	r3, r1
 8001ce8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001cec:	e00a      	b.n	8001d04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	4908      	ldr	r1, [pc, #32]	; (8001d14 <__NVIC_SetPriority+0x50>)
 8001cf4:	79fb      	ldrb	r3, [r7, #7]
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	3b04      	subs	r3, #4
 8001cfc:	0112      	lsls	r2, r2, #4
 8001cfe:	b2d2      	uxtb	r2, r2
 8001d00:	440b      	add	r3, r1
 8001d02:	761a      	strb	r2, [r3, #24]
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	e000e100 	.word	0xe000e100
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b089      	sub	sp, #36	; 0x24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	f1c3 0307 	rsb	r3, r3, #7
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	bf28      	it	cs
 8001d36:	2304      	movcs	r3, #4
 8001d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	3304      	adds	r3, #4
 8001d3e:	2b06      	cmp	r3, #6
 8001d40:	d902      	bls.n	8001d48 <NVIC_EncodePriority+0x30>
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	3b03      	subs	r3, #3
 8001d46:	e000      	b.n	8001d4a <NVIC_EncodePriority+0x32>
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	43da      	mvns	r2, r3
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	401a      	ands	r2, r3
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d60:	f04f 31ff 	mov.w	r1, #4294967295
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6a:	43d9      	mvns	r1, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d70:	4313      	orrs	r3, r2
         );
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3724      	adds	r7, #36	; 0x24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b082      	sub	sp, #8
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7ff ff4c 	bl	8001c24 <__NVIC_SetPriorityGrouping>
}
 8001d8c:	bf00      	nop
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
 8001da0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001da2:	2300      	movs	r3, #0
 8001da4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001da6:	f7ff ff61 	bl	8001c6c <__NVIC_GetPriorityGrouping>
 8001daa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	68b9      	ldr	r1, [r7, #8]
 8001db0:	6978      	ldr	r0, [r7, #20]
 8001db2:	f7ff ffb1 	bl	8001d18 <NVIC_EncodePriority>
 8001db6:	4602      	mov	r2, r0
 8001db8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dbc:	4611      	mov	r1, r2
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff ff80 	bl	8001cc4 <__NVIC_SetPriority>
}
 8001dc4:	bf00      	nop
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff ff54 	bl	8001c88 <__NVIC_EnableIRQ>
}
 8001de0:	bf00      	nop
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b089      	sub	sp, #36	; 0x24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001df6:	2300      	movs	r3, #0
 8001df8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dfe:	2300      	movs	r3, #0
 8001e00:	61fb      	str	r3, [r7, #28]
 8001e02:	e16b      	b.n	80020dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e04:	2201      	movs	r2, #1
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	697a      	ldr	r2, [r7, #20]
 8001e14:	4013      	ands	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	f040 815a 	bne.w	80020d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d005      	beq.n	8001e3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d130      	bne.n	8001e9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	2203      	movs	r2, #3
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	68da      	ldr	r2, [r3, #12]
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e70:	2201      	movs	r2, #1
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	091b      	lsrs	r3, r3, #4
 8001e86:	f003 0201 	and.w	r2, r3, #1
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f003 0303 	and.w	r3, r3, #3
 8001ea4:	2b03      	cmp	r3, #3
 8001ea6:	d017      	beq.n	8001ed8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	2203      	movs	r2, #3
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f003 0303 	and.w	r3, r3, #3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d123      	bne.n	8001f2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	08da      	lsrs	r2, r3, #3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3208      	adds	r2, #8
 8001eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	f003 0307 	and.w	r3, r3, #7
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	220f      	movs	r2, #15
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	43db      	mvns	r3, r3
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	4013      	ands	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	691a      	ldr	r2, [r3, #16]
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	08da      	lsrs	r2, r3, #3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	3208      	adds	r2, #8
 8001f26:	69b9      	ldr	r1, [r7, #24]
 8001f28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	2203      	movs	r2, #3
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4013      	ands	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f003 0203 	and.w	r2, r3, #3
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f000 80b4 	beq.w	80020d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	4b60      	ldr	r3, [pc, #384]	; (80020f4 <HAL_GPIO_Init+0x30c>)
 8001f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f76:	4a5f      	ldr	r2, [pc, #380]	; (80020f4 <HAL_GPIO_Init+0x30c>)
 8001f78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f7e:	4b5d      	ldr	r3, [pc, #372]	; (80020f4 <HAL_GPIO_Init+0x30c>)
 8001f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f8a:	4a5b      	ldr	r2, [pc, #364]	; (80020f8 <HAL_GPIO_Init+0x310>)
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	089b      	lsrs	r3, r3, #2
 8001f90:	3302      	adds	r3, #2
 8001f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	f003 0303 	and.w	r3, r3, #3
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	220f      	movs	r2, #15
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4013      	ands	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a52      	ldr	r2, [pc, #328]	; (80020fc <HAL_GPIO_Init+0x314>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d02b      	beq.n	800200e <HAL_GPIO_Init+0x226>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a51      	ldr	r2, [pc, #324]	; (8002100 <HAL_GPIO_Init+0x318>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d025      	beq.n	800200a <HAL_GPIO_Init+0x222>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a50      	ldr	r2, [pc, #320]	; (8002104 <HAL_GPIO_Init+0x31c>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d01f      	beq.n	8002006 <HAL_GPIO_Init+0x21e>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a4f      	ldr	r2, [pc, #316]	; (8002108 <HAL_GPIO_Init+0x320>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d019      	beq.n	8002002 <HAL_GPIO_Init+0x21a>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a4e      	ldr	r2, [pc, #312]	; (800210c <HAL_GPIO_Init+0x324>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d013      	beq.n	8001ffe <HAL_GPIO_Init+0x216>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a4d      	ldr	r2, [pc, #308]	; (8002110 <HAL_GPIO_Init+0x328>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d00d      	beq.n	8001ffa <HAL_GPIO_Init+0x212>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a4c      	ldr	r2, [pc, #304]	; (8002114 <HAL_GPIO_Init+0x32c>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d007      	beq.n	8001ff6 <HAL_GPIO_Init+0x20e>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a4b      	ldr	r2, [pc, #300]	; (8002118 <HAL_GPIO_Init+0x330>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d101      	bne.n	8001ff2 <HAL_GPIO_Init+0x20a>
 8001fee:	2307      	movs	r3, #7
 8001ff0:	e00e      	b.n	8002010 <HAL_GPIO_Init+0x228>
 8001ff2:	2308      	movs	r3, #8
 8001ff4:	e00c      	b.n	8002010 <HAL_GPIO_Init+0x228>
 8001ff6:	2306      	movs	r3, #6
 8001ff8:	e00a      	b.n	8002010 <HAL_GPIO_Init+0x228>
 8001ffa:	2305      	movs	r3, #5
 8001ffc:	e008      	b.n	8002010 <HAL_GPIO_Init+0x228>
 8001ffe:	2304      	movs	r3, #4
 8002000:	e006      	b.n	8002010 <HAL_GPIO_Init+0x228>
 8002002:	2303      	movs	r3, #3
 8002004:	e004      	b.n	8002010 <HAL_GPIO_Init+0x228>
 8002006:	2302      	movs	r3, #2
 8002008:	e002      	b.n	8002010 <HAL_GPIO_Init+0x228>
 800200a:	2301      	movs	r3, #1
 800200c:	e000      	b.n	8002010 <HAL_GPIO_Init+0x228>
 800200e:	2300      	movs	r3, #0
 8002010:	69fa      	ldr	r2, [r7, #28]
 8002012:	f002 0203 	and.w	r2, r2, #3
 8002016:	0092      	lsls	r2, r2, #2
 8002018:	4093      	lsls	r3, r2
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	4313      	orrs	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002020:	4935      	ldr	r1, [pc, #212]	; (80020f8 <HAL_GPIO_Init+0x310>)
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	089b      	lsrs	r3, r3, #2
 8002026:	3302      	adds	r3, #2
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800202e:	4b3b      	ldr	r3, [pc, #236]	; (800211c <HAL_GPIO_Init+0x334>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	43db      	mvns	r3, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4013      	ands	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	4313      	orrs	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002052:	4a32      	ldr	r2, [pc, #200]	; (800211c <HAL_GPIO_Init+0x334>)
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002058:	4b30      	ldr	r3, [pc, #192]	; (800211c <HAL_GPIO_Init+0x334>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	43db      	mvns	r3, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d003      	beq.n	800207c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	4313      	orrs	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800207c:	4a27      	ldr	r2, [pc, #156]	; (800211c <HAL_GPIO_Init+0x334>)
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002082:	4b26      	ldr	r3, [pc, #152]	; (800211c <HAL_GPIO_Init+0x334>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	43db      	mvns	r3, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4013      	ands	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020a6:	4a1d      	ldr	r2, [pc, #116]	; (800211c <HAL_GPIO_Init+0x334>)
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020ac:	4b1b      	ldr	r3, [pc, #108]	; (800211c <HAL_GPIO_Init+0x334>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	43db      	mvns	r3, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4013      	ands	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d003      	beq.n	80020d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020d0:	4a12      	ldr	r2, [pc, #72]	; (800211c <HAL_GPIO_Init+0x334>)
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	3301      	adds	r3, #1
 80020da:	61fb      	str	r3, [r7, #28]
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	2b0f      	cmp	r3, #15
 80020e0:	f67f ae90 	bls.w	8001e04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020e4:	bf00      	nop
 80020e6:	bf00      	nop
 80020e8:	3724      	adds	r7, #36	; 0x24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	40023800 	.word	0x40023800
 80020f8:	40013800 	.word	0x40013800
 80020fc:	40020000 	.word	0x40020000
 8002100:	40020400 	.word	0x40020400
 8002104:	40020800 	.word	0x40020800
 8002108:	40020c00 	.word	0x40020c00
 800210c:	40021000 	.word	0x40021000
 8002110:	40021400 	.word	0x40021400
 8002114:	40021800 	.word	0x40021800
 8002118:	40021c00 	.word	0x40021c00
 800211c:	40013c00 	.word	0x40013c00

08002120 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	460b      	mov	r3, r1
 800212a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	691a      	ldr	r2, [r3, #16]
 8002130:	887b      	ldrh	r3, [r7, #2]
 8002132:	4013      	ands	r3, r2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d002      	beq.n	800213e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002138:	2301      	movs	r3, #1
 800213a:	73fb      	strb	r3, [r7, #15]
 800213c:	e001      	b.n	8002142 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800213e:	2300      	movs	r3, #0
 8002140:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002142:	7bfb      	ldrb	r3, [r7, #15]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	460b      	mov	r3, r1
 800215a:	807b      	strh	r3, [r7, #2]
 800215c:	4613      	mov	r3, r2
 800215e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002160:	787b      	ldrb	r3, [r7, #1]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002166:	887a      	ldrh	r2, [r7, #2]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800216c:	e003      	b.n	8002176 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800216e:	887b      	ldrh	r3, [r7, #2]
 8002170:	041a      	lsls	r2, r3, #16
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	619a      	str	r2, [r3, #24]
}
 8002176:	bf00      	nop
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002182:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002184:	b08f      	sub	sp, #60	; 0x3c
 8002186:	af0a      	add	r7, sp, #40	; 0x28
 8002188:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d101      	bne.n	8002194 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e054      	b.n	800223e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d106      	bne.n	80021b4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f00a fbf0 	bl	800c994 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2203      	movs	r2, #3
 80021b8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d102      	bne.n	80021ce <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f004 f96c 	bl	80064b0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	603b      	str	r3, [r7, #0]
 80021de:	687e      	ldr	r6, [r7, #4]
 80021e0:	466d      	mov	r5, sp
 80021e2:	f106 0410 	add.w	r4, r6, #16
 80021e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80021f6:	1d33      	adds	r3, r6, #4
 80021f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021fa:	6838      	ldr	r0, [r7, #0]
 80021fc:	f004 f8e6 	bl	80063cc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2101      	movs	r1, #1
 8002206:	4618      	mov	r0, r3
 8002208:	f004 f963 	bl	80064d2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	603b      	str	r3, [r7, #0]
 8002212:	687e      	ldr	r6, [r7, #4]
 8002214:	466d      	mov	r5, sp
 8002216:	f106 0410 	add.w	r4, r6, #16
 800221a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800221c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800221e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002220:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002222:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002226:	e885 0003 	stmia.w	r5, {r0, r1}
 800222a:	1d33      	adds	r3, r6, #4
 800222c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800222e:	6838      	ldr	r0, [r7, #0]
 8002230:	f004 faec 	bl	800680c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3714      	adds	r7, #20
 8002242:	46bd      	mov	sp, r7
 8002244:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002246 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002246:	b590      	push	{r4, r7, lr}
 8002248:	b089      	sub	sp, #36	; 0x24
 800224a:	af04      	add	r7, sp, #16
 800224c:	6078      	str	r0, [r7, #4]
 800224e:	4608      	mov	r0, r1
 8002250:	4611      	mov	r1, r2
 8002252:	461a      	mov	r2, r3
 8002254:	4603      	mov	r3, r0
 8002256:	70fb      	strb	r3, [r7, #3]
 8002258:	460b      	mov	r3, r1
 800225a:	70bb      	strb	r3, [r7, #2]
 800225c:	4613      	mov	r3, r2
 800225e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002266:	2b01      	cmp	r3, #1
 8002268:	d101      	bne.n	800226e <HAL_HCD_HC_Init+0x28>
 800226a:	2302      	movs	r3, #2
 800226c:	e076      	b.n	800235c <HAL_HCD_HC_Init+0x116>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002276:	78fb      	ldrb	r3, [r7, #3]
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	212c      	movs	r1, #44	; 0x2c
 800227c:	fb01 f303 	mul.w	r3, r1, r3
 8002280:	4413      	add	r3, r2
 8002282:	333d      	adds	r3, #61	; 0x3d
 8002284:	2200      	movs	r2, #0
 8002286:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002288:	78fb      	ldrb	r3, [r7, #3]
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	212c      	movs	r1, #44	; 0x2c
 800228e:	fb01 f303 	mul.w	r3, r1, r3
 8002292:	4413      	add	r3, r2
 8002294:	3338      	adds	r3, #56	; 0x38
 8002296:	787a      	ldrb	r2, [r7, #1]
 8002298:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800229a:	78fb      	ldrb	r3, [r7, #3]
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	212c      	movs	r1, #44	; 0x2c
 80022a0:	fb01 f303 	mul.w	r3, r1, r3
 80022a4:	4413      	add	r3, r2
 80022a6:	3340      	adds	r3, #64	; 0x40
 80022a8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80022aa:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80022ac:	78fb      	ldrb	r3, [r7, #3]
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	212c      	movs	r1, #44	; 0x2c
 80022b2:	fb01 f303 	mul.w	r3, r1, r3
 80022b6:	4413      	add	r3, r2
 80022b8:	3339      	adds	r3, #57	; 0x39
 80022ba:	78fa      	ldrb	r2, [r7, #3]
 80022bc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80022be:	78fb      	ldrb	r3, [r7, #3]
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	212c      	movs	r1, #44	; 0x2c
 80022c4:	fb01 f303 	mul.w	r3, r1, r3
 80022c8:	4413      	add	r3, r2
 80022ca:	333f      	adds	r3, #63	; 0x3f
 80022cc:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80022d0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80022d2:	78fb      	ldrb	r3, [r7, #3]
 80022d4:	78ba      	ldrb	r2, [r7, #2]
 80022d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80022da:	b2d0      	uxtb	r0, r2
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	212c      	movs	r1, #44	; 0x2c
 80022e0:	fb01 f303 	mul.w	r3, r1, r3
 80022e4:	4413      	add	r3, r2
 80022e6:	333a      	adds	r3, #58	; 0x3a
 80022e8:	4602      	mov	r2, r0
 80022ea:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80022ec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	da09      	bge.n	8002308 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80022f4:	78fb      	ldrb	r3, [r7, #3]
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	212c      	movs	r1, #44	; 0x2c
 80022fa:	fb01 f303 	mul.w	r3, r1, r3
 80022fe:	4413      	add	r3, r2
 8002300:	333b      	adds	r3, #59	; 0x3b
 8002302:	2201      	movs	r2, #1
 8002304:	701a      	strb	r2, [r3, #0]
 8002306:	e008      	b.n	800231a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002308:	78fb      	ldrb	r3, [r7, #3]
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	212c      	movs	r1, #44	; 0x2c
 800230e:	fb01 f303 	mul.w	r3, r1, r3
 8002312:	4413      	add	r3, r2
 8002314:	333b      	adds	r3, #59	; 0x3b
 8002316:	2200      	movs	r2, #0
 8002318:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800231a:	78fb      	ldrb	r3, [r7, #3]
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	212c      	movs	r1, #44	; 0x2c
 8002320:	fb01 f303 	mul.w	r3, r1, r3
 8002324:	4413      	add	r3, r2
 8002326:	333c      	adds	r3, #60	; 0x3c
 8002328:	f897 2020 	ldrb.w	r2, [r7, #32]
 800232c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6818      	ldr	r0, [r3, #0]
 8002332:	787c      	ldrb	r4, [r7, #1]
 8002334:	78ba      	ldrb	r2, [r7, #2]
 8002336:	78f9      	ldrb	r1, [r7, #3]
 8002338:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800233a:	9302      	str	r3, [sp, #8]
 800233c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002340:	9301      	str	r3, [sp, #4]
 8002342:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	4623      	mov	r3, r4
 800234a:	f004 fbe5 	bl	8006b18 <USB_HC_Init>
 800234e:	4603      	mov	r3, r0
 8002350:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800235a:	7bfb      	ldrb	r3, [r7, #15]
}
 800235c:	4618      	mov	r0, r3
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	bd90      	pop	{r4, r7, pc}

08002364 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	460b      	mov	r3, r1
 800236e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002370:	2300      	movs	r3, #0
 8002372:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800237a:	2b01      	cmp	r3, #1
 800237c:	d101      	bne.n	8002382 <HAL_HCD_HC_Halt+0x1e>
 800237e:	2302      	movs	r3, #2
 8002380:	e00f      	b.n	80023a2 <HAL_HCD_HC_Halt+0x3e>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	78fa      	ldrb	r2, [r7, #3]
 8002390:	4611      	mov	r1, r2
 8002392:	4618      	mov	r0, r3
 8002394:	f004 fe35 	bl	8007002 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
	...

080023ac <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	4608      	mov	r0, r1
 80023b6:	4611      	mov	r1, r2
 80023b8:	461a      	mov	r2, r3
 80023ba:	4603      	mov	r3, r0
 80023bc:	70fb      	strb	r3, [r7, #3]
 80023be:	460b      	mov	r3, r1
 80023c0:	70bb      	strb	r3, [r7, #2]
 80023c2:	4613      	mov	r3, r2
 80023c4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80023c6:	78fb      	ldrb	r3, [r7, #3]
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	212c      	movs	r1, #44	; 0x2c
 80023cc:	fb01 f303 	mul.w	r3, r1, r3
 80023d0:	4413      	add	r3, r2
 80023d2:	333b      	adds	r3, #59	; 0x3b
 80023d4:	78ba      	ldrb	r2, [r7, #2]
 80023d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80023d8:	78fb      	ldrb	r3, [r7, #3]
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	212c      	movs	r1, #44	; 0x2c
 80023de:	fb01 f303 	mul.w	r3, r1, r3
 80023e2:	4413      	add	r3, r2
 80023e4:	333f      	adds	r3, #63	; 0x3f
 80023e6:	787a      	ldrb	r2, [r7, #1]
 80023e8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80023ea:	7c3b      	ldrb	r3, [r7, #16]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d112      	bne.n	8002416 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80023f0:	78fb      	ldrb	r3, [r7, #3]
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	212c      	movs	r1, #44	; 0x2c
 80023f6:	fb01 f303 	mul.w	r3, r1, r3
 80023fa:	4413      	add	r3, r2
 80023fc:	3342      	adds	r3, #66	; 0x42
 80023fe:	2203      	movs	r2, #3
 8002400:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002402:	78fb      	ldrb	r3, [r7, #3]
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	212c      	movs	r1, #44	; 0x2c
 8002408:	fb01 f303 	mul.w	r3, r1, r3
 800240c:	4413      	add	r3, r2
 800240e:	333d      	adds	r3, #61	; 0x3d
 8002410:	7f3a      	ldrb	r2, [r7, #28]
 8002412:	701a      	strb	r2, [r3, #0]
 8002414:	e008      	b.n	8002428 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002416:	78fb      	ldrb	r3, [r7, #3]
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	212c      	movs	r1, #44	; 0x2c
 800241c:	fb01 f303 	mul.w	r3, r1, r3
 8002420:	4413      	add	r3, r2
 8002422:	3342      	adds	r3, #66	; 0x42
 8002424:	2202      	movs	r2, #2
 8002426:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002428:	787b      	ldrb	r3, [r7, #1]
 800242a:	2b03      	cmp	r3, #3
 800242c:	f200 80c6 	bhi.w	80025bc <HAL_HCD_HC_SubmitRequest+0x210>
 8002430:	a201      	add	r2, pc, #4	; (adr r2, 8002438 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002436:	bf00      	nop
 8002438:	08002449 	.word	0x08002449
 800243c:	080025a9 	.word	0x080025a9
 8002440:	080024ad 	.word	0x080024ad
 8002444:	0800252b 	.word	0x0800252b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002448:	7c3b      	ldrb	r3, [r7, #16]
 800244a:	2b01      	cmp	r3, #1
 800244c:	f040 80b8 	bne.w	80025c0 <HAL_HCD_HC_SubmitRequest+0x214>
 8002450:	78bb      	ldrb	r3, [r7, #2]
 8002452:	2b00      	cmp	r3, #0
 8002454:	f040 80b4 	bne.w	80025c0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002458:	8b3b      	ldrh	r3, [r7, #24]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d108      	bne.n	8002470 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800245e:	78fb      	ldrb	r3, [r7, #3]
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	212c      	movs	r1, #44	; 0x2c
 8002464:	fb01 f303 	mul.w	r3, r1, r3
 8002468:	4413      	add	r3, r2
 800246a:	3355      	adds	r3, #85	; 0x55
 800246c:	2201      	movs	r2, #1
 800246e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002470:	78fb      	ldrb	r3, [r7, #3]
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	212c      	movs	r1, #44	; 0x2c
 8002476:	fb01 f303 	mul.w	r3, r1, r3
 800247a:	4413      	add	r3, r2
 800247c:	3355      	adds	r3, #85	; 0x55
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d109      	bne.n	8002498 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002484:	78fb      	ldrb	r3, [r7, #3]
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	212c      	movs	r1, #44	; 0x2c
 800248a:	fb01 f303 	mul.w	r3, r1, r3
 800248e:	4413      	add	r3, r2
 8002490:	3342      	adds	r3, #66	; 0x42
 8002492:	2200      	movs	r2, #0
 8002494:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002496:	e093      	b.n	80025c0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002498:	78fb      	ldrb	r3, [r7, #3]
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	212c      	movs	r1, #44	; 0x2c
 800249e:	fb01 f303 	mul.w	r3, r1, r3
 80024a2:	4413      	add	r3, r2
 80024a4:	3342      	adds	r3, #66	; 0x42
 80024a6:	2202      	movs	r2, #2
 80024a8:	701a      	strb	r2, [r3, #0]
      break;
 80024aa:	e089      	b.n	80025c0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80024ac:	78bb      	ldrb	r3, [r7, #2]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d11d      	bne.n	80024ee <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80024b2:	78fb      	ldrb	r3, [r7, #3]
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	212c      	movs	r1, #44	; 0x2c
 80024b8:	fb01 f303 	mul.w	r3, r1, r3
 80024bc:	4413      	add	r3, r2
 80024be:	3355      	adds	r3, #85	; 0x55
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d109      	bne.n	80024da <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024c6:	78fb      	ldrb	r3, [r7, #3]
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	212c      	movs	r1, #44	; 0x2c
 80024cc:	fb01 f303 	mul.w	r3, r1, r3
 80024d0:	4413      	add	r3, r2
 80024d2:	3342      	adds	r3, #66	; 0x42
 80024d4:	2200      	movs	r2, #0
 80024d6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80024d8:	e073      	b.n	80025c2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024da:	78fb      	ldrb	r3, [r7, #3]
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	212c      	movs	r1, #44	; 0x2c
 80024e0:	fb01 f303 	mul.w	r3, r1, r3
 80024e4:	4413      	add	r3, r2
 80024e6:	3342      	adds	r3, #66	; 0x42
 80024e8:	2202      	movs	r2, #2
 80024ea:	701a      	strb	r2, [r3, #0]
      break;
 80024ec:	e069      	b.n	80025c2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80024ee:	78fb      	ldrb	r3, [r7, #3]
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	212c      	movs	r1, #44	; 0x2c
 80024f4:	fb01 f303 	mul.w	r3, r1, r3
 80024f8:	4413      	add	r3, r2
 80024fa:	3354      	adds	r3, #84	; 0x54
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d109      	bne.n	8002516 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002502:	78fb      	ldrb	r3, [r7, #3]
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	212c      	movs	r1, #44	; 0x2c
 8002508:	fb01 f303 	mul.w	r3, r1, r3
 800250c:	4413      	add	r3, r2
 800250e:	3342      	adds	r3, #66	; 0x42
 8002510:	2200      	movs	r2, #0
 8002512:	701a      	strb	r2, [r3, #0]
      break;
 8002514:	e055      	b.n	80025c2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002516:	78fb      	ldrb	r3, [r7, #3]
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	212c      	movs	r1, #44	; 0x2c
 800251c:	fb01 f303 	mul.w	r3, r1, r3
 8002520:	4413      	add	r3, r2
 8002522:	3342      	adds	r3, #66	; 0x42
 8002524:	2202      	movs	r2, #2
 8002526:	701a      	strb	r2, [r3, #0]
      break;
 8002528:	e04b      	b.n	80025c2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800252a:	78bb      	ldrb	r3, [r7, #2]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d11d      	bne.n	800256c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002530:	78fb      	ldrb	r3, [r7, #3]
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	212c      	movs	r1, #44	; 0x2c
 8002536:	fb01 f303 	mul.w	r3, r1, r3
 800253a:	4413      	add	r3, r2
 800253c:	3355      	adds	r3, #85	; 0x55
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d109      	bne.n	8002558 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002544:	78fb      	ldrb	r3, [r7, #3]
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	212c      	movs	r1, #44	; 0x2c
 800254a:	fb01 f303 	mul.w	r3, r1, r3
 800254e:	4413      	add	r3, r2
 8002550:	3342      	adds	r3, #66	; 0x42
 8002552:	2200      	movs	r2, #0
 8002554:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002556:	e034      	b.n	80025c2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002558:	78fb      	ldrb	r3, [r7, #3]
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	212c      	movs	r1, #44	; 0x2c
 800255e:	fb01 f303 	mul.w	r3, r1, r3
 8002562:	4413      	add	r3, r2
 8002564:	3342      	adds	r3, #66	; 0x42
 8002566:	2202      	movs	r2, #2
 8002568:	701a      	strb	r2, [r3, #0]
      break;
 800256a:	e02a      	b.n	80025c2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800256c:	78fb      	ldrb	r3, [r7, #3]
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	212c      	movs	r1, #44	; 0x2c
 8002572:	fb01 f303 	mul.w	r3, r1, r3
 8002576:	4413      	add	r3, r2
 8002578:	3354      	adds	r3, #84	; 0x54
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d109      	bne.n	8002594 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002580:	78fb      	ldrb	r3, [r7, #3]
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	212c      	movs	r1, #44	; 0x2c
 8002586:	fb01 f303 	mul.w	r3, r1, r3
 800258a:	4413      	add	r3, r2
 800258c:	3342      	adds	r3, #66	; 0x42
 800258e:	2200      	movs	r2, #0
 8002590:	701a      	strb	r2, [r3, #0]
      break;
 8002592:	e016      	b.n	80025c2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002594:	78fb      	ldrb	r3, [r7, #3]
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	212c      	movs	r1, #44	; 0x2c
 800259a:	fb01 f303 	mul.w	r3, r1, r3
 800259e:	4413      	add	r3, r2
 80025a0:	3342      	adds	r3, #66	; 0x42
 80025a2:	2202      	movs	r2, #2
 80025a4:	701a      	strb	r2, [r3, #0]
      break;
 80025a6:	e00c      	b.n	80025c2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025a8:	78fb      	ldrb	r3, [r7, #3]
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	212c      	movs	r1, #44	; 0x2c
 80025ae:	fb01 f303 	mul.w	r3, r1, r3
 80025b2:	4413      	add	r3, r2
 80025b4:	3342      	adds	r3, #66	; 0x42
 80025b6:	2200      	movs	r2, #0
 80025b8:	701a      	strb	r2, [r3, #0]
      break;
 80025ba:	e002      	b.n	80025c2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80025bc:	bf00      	nop
 80025be:	e000      	b.n	80025c2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80025c0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80025c2:	78fb      	ldrb	r3, [r7, #3]
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	212c      	movs	r1, #44	; 0x2c
 80025c8:	fb01 f303 	mul.w	r3, r1, r3
 80025cc:	4413      	add	r3, r2
 80025ce:	3344      	adds	r3, #68	; 0x44
 80025d0:	697a      	ldr	r2, [r7, #20]
 80025d2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80025d4:	78fb      	ldrb	r3, [r7, #3]
 80025d6:	8b3a      	ldrh	r2, [r7, #24]
 80025d8:	6879      	ldr	r1, [r7, #4]
 80025da:	202c      	movs	r0, #44	; 0x2c
 80025dc:	fb00 f303 	mul.w	r3, r0, r3
 80025e0:	440b      	add	r3, r1
 80025e2:	334c      	adds	r3, #76	; 0x4c
 80025e4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80025e6:	78fb      	ldrb	r3, [r7, #3]
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	212c      	movs	r1, #44	; 0x2c
 80025ec:	fb01 f303 	mul.w	r3, r1, r3
 80025f0:	4413      	add	r3, r2
 80025f2:	3360      	adds	r3, #96	; 0x60
 80025f4:	2200      	movs	r2, #0
 80025f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80025f8:	78fb      	ldrb	r3, [r7, #3]
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	212c      	movs	r1, #44	; 0x2c
 80025fe:	fb01 f303 	mul.w	r3, r1, r3
 8002602:	4413      	add	r3, r2
 8002604:	3350      	adds	r3, #80	; 0x50
 8002606:	2200      	movs	r2, #0
 8002608:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800260a:	78fb      	ldrb	r3, [r7, #3]
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	212c      	movs	r1, #44	; 0x2c
 8002610:	fb01 f303 	mul.w	r3, r1, r3
 8002614:	4413      	add	r3, r2
 8002616:	3339      	adds	r3, #57	; 0x39
 8002618:	78fa      	ldrb	r2, [r7, #3]
 800261a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800261c:	78fb      	ldrb	r3, [r7, #3]
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	212c      	movs	r1, #44	; 0x2c
 8002622:	fb01 f303 	mul.w	r3, r1, r3
 8002626:	4413      	add	r3, r2
 8002628:	3361      	adds	r3, #97	; 0x61
 800262a:	2200      	movs	r2, #0
 800262c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6818      	ldr	r0, [r3, #0]
 8002632:	78fb      	ldrb	r3, [r7, #3]
 8002634:	222c      	movs	r2, #44	; 0x2c
 8002636:	fb02 f303 	mul.w	r3, r2, r3
 800263a:	3338      	adds	r3, #56	; 0x38
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	18d1      	adds	r1, r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	b2db      	uxtb	r3, r3
 8002646:	461a      	mov	r2, r3
 8002648:	f004 fb88 	bl	8006d5c <USB_HC_StartXfer>
 800264c:	4603      	mov	r3, r0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop

08002658 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f004 f889 	bl	8006786 <USB_GetMode>
 8002674:	4603      	mov	r3, r0
 8002676:	2b01      	cmp	r3, #1
 8002678:	f040 80f6 	bne.w	8002868 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4618      	mov	r0, r3
 8002682:	f004 f86d 	bl	8006760 <USB_ReadInterrupts>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 80ec 	beq.w	8002866 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f004 f864 	bl	8006760 <USB_ReadInterrupts>
 8002698:	4603      	mov	r3, r0
 800269a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800269e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026a2:	d104      	bne.n	80026ae <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80026ac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f004 f854 	bl	8006760 <USB_ReadInterrupts>
 80026b8:	4603      	mov	r3, r0
 80026ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026c2:	d104      	bne.n	80026ce <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80026cc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f004 f844 	bl	8006760 <USB_ReadInterrupts>
 80026d8:	4603      	mov	r3, r0
 80026da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026e2:	d104      	bne.n	80026ee <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80026ec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f004 f834 	bl	8006760 <USB_ReadInterrupts>
 80026f8:	4603      	mov	r3, r0
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d103      	bne.n	800270a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2202      	movs	r2, #2
 8002708:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f004 f826 	bl	8006760 <USB_ReadInterrupts>
 8002714:	4603      	mov	r3, r0
 8002716:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800271a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800271e:	d11c      	bne.n	800275a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002728:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10f      	bne.n	800275a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800273a:	2110      	movs	r1, #16
 800273c:	6938      	ldr	r0, [r7, #16]
 800273e:	f003 ff15 	bl	800656c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002742:	6938      	ldr	r0, [r7, #16]
 8002744:	f003 ff46 	bl	80065d4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2101      	movs	r1, #1
 800274e:	4618      	mov	r0, r3
 8002750:	f004 f91c 	bl	800698c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f00a f99b 	bl	800ca90 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f003 fffe 	bl	8006760 <USB_ReadInterrupts>
 8002764:	4603      	mov	r3, r0
 8002766:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800276a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800276e:	d102      	bne.n	8002776 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f001 f89e 	bl	80038b2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f003 fff0 	bl	8006760 <USB_ReadInterrupts>
 8002780:	4603      	mov	r3, r0
 8002782:	f003 0308 	and.w	r3, r3, #8
 8002786:	2b08      	cmp	r3, #8
 8002788:	d106      	bne.n	8002798 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f00a f964 	bl	800ca58 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2208      	movs	r2, #8
 8002796:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f003 ffdf 	bl	8006760 <USB_ReadInterrupts>
 80027a2:	4603      	mov	r3, r0
 80027a4:	f003 0310 	and.w	r3, r3, #16
 80027a8:	2b10      	cmp	r3, #16
 80027aa:	d101      	bne.n	80027b0 <HAL_HCD_IRQHandler+0x158>
 80027ac:	2301      	movs	r3, #1
 80027ae:	e000      	b.n	80027b2 <HAL_HCD_IRQHandler+0x15a>
 80027b0:	2300      	movs	r3, #0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d012      	beq.n	80027dc <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	699a      	ldr	r2, [r3, #24]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 0210 	bic.w	r2, r2, #16
 80027c4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 ffa1 	bl	800370e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	699a      	ldr	r2, [r3, #24]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f042 0210 	orr.w	r2, r2, #16
 80027da:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f003 ffbd 	bl	8006760 <USB_ReadInterrupts>
 80027e6:	4603      	mov	r3, r0
 80027e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027f0:	d13a      	bne.n	8002868 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f004 fbf2 	bl	8006fe0 <USB_HC_ReadInterrupt>
 80027fc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80027fe:	2300      	movs	r3, #0
 8002800:	617b      	str	r3, [r7, #20]
 8002802:	e025      	b.n	8002850 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	f003 030f 	and.w	r3, r3, #15
 800280a:	68ba      	ldr	r2, [r7, #8]
 800280c:	fa22 f303 	lsr.w	r3, r2, r3
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	2b00      	cmp	r3, #0
 8002816:	d018      	beq.n	800284a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	015a      	lsls	r2, r3, #5
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	4413      	add	r3, r2
 8002820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800282a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800282e:	d106      	bne.n	800283e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	b2db      	uxtb	r3, r3
 8002834:	4619      	mov	r1, r3
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f8ab 	bl	8002992 <HCD_HC_IN_IRQHandler>
 800283c:	e005      	b.n	800284a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	b2db      	uxtb	r3, r3
 8002842:	4619      	mov	r1, r3
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f000 fbf9 	bl	800303c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	3301      	adds	r3, #1
 800284e:	617b      	str	r3, [r7, #20]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	429a      	cmp	r2, r3
 8002858:	d3d4      	bcc.n	8002804 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002862:	615a      	str	r2, [r3, #20]
 8002864:	e000      	b.n	8002868 <HAL_HCD_IRQHandler+0x210>
      return;
 8002866:	bf00      	nop
    }
  }
}
 8002868:	3718      	adds	r7, #24
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b082      	sub	sp, #8
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800287c:	2b01      	cmp	r3, #1
 800287e:	d101      	bne.n	8002884 <HAL_HCD_Start+0x16>
 8002880:	2302      	movs	r3, #2
 8002882:	e013      	b.n	80028ac <HAL_HCD_Start+0x3e>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2101      	movs	r1, #1
 8002892:	4618      	mov	r0, r3
 8002894:	f004 f8de 	bl	8006a54 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4618      	mov	r0, r3
 800289e:	f003 fdf6 	bl	800648e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d101      	bne.n	80028ca <HAL_HCD_Stop+0x16>
 80028c6:	2302      	movs	r3, #2
 80028c8:	e00d      	b.n	80028e6 <HAL_HCD_Stop+0x32>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f004 fccc 	bl	8007274 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b082      	sub	sp, #8
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f004 f880 	bl	8006a00 <USB_ResetPort>
 8002900:	4603      	mov	r3, r0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
 8002912:	460b      	mov	r3, r1
 8002914:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002916:	78fb      	ldrb	r3, [r7, #3]
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	212c      	movs	r1, #44	; 0x2c
 800291c:	fb01 f303 	mul.w	r3, r1, r3
 8002920:	4413      	add	r3, r2
 8002922:	3360      	adds	r3, #96	; 0x60
 8002924:	781b      	ldrb	r3, [r3, #0]
}
 8002926:	4618      	mov	r0, r3
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
 800293a:	460b      	mov	r3, r1
 800293c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800293e:	78fb      	ldrb	r3, [r7, #3]
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	212c      	movs	r1, #44	; 0x2c
 8002944:	fb01 f303 	mul.w	r3, r1, r3
 8002948:	4413      	add	r3, r2
 800294a:	3350      	adds	r3, #80	; 0x50
 800294c:	681b      	ldr	r3, [r3, #0]
}
 800294e:	4618      	mov	r0, r3
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr

0800295a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b082      	sub	sp, #8
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4618      	mov	r0, r3
 8002968:	f004 f8c4 	bl	8006af4 <USB_GetCurrentFrame>
 800296c:	4603      	mov	r3, r0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b082      	sub	sp, #8
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f004 f89f 	bl	8006ac6 <USB_GetHostSpeed>
 8002988:	4603      	mov	r3, r0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b086      	sub	sp, #24
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
 800299a:	460b      	mov	r3, r1
 800299c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80029a8:	78fb      	ldrb	r3, [r7, #3]
 80029aa:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	015a      	lsls	r2, r3, #5
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	4413      	add	r3, r2
 80029b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 0304 	and.w	r3, r3, #4
 80029be:	2b04      	cmp	r3, #4
 80029c0:	d11a      	bne.n	80029f8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	015a      	lsls	r2, r3, #5
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	4413      	add	r3, r2
 80029ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ce:	461a      	mov	r2, r3
 80029d0:	2304      	movs	r3, #4
 80029d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	212c      	movs	r1, #44	; 0x2c
 80029da:	fb01 f303 	mul.w	r3, r1, r3
 80029de:	4413      	add	r3, r2
 80029e0:	3361      	adds	r3, #97	; 0x61
 80029e2:	2206      	movs	r2, #6
 80029e4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	4611      	mov	r1, r2
 80029f0:	4618      	mov	r0, r3
 80029f2:	f004 fb06 	bl	8007002 <USB_HC_Halt>
 80029f6:	e0af      	b.n	8002b58 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	015a      	lsls	r2, r3, #5
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	4413      	add	r3, r2
 8002a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a0e:	d11b      	bne.n	8002a48 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	015a      	lsls	r2, r3, #5
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	4413      	add	r3, r2
 8002a18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a22:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	212c      	movs	r1, #44	; 0x2c
 8002a2a:	fb01 f303 	mul.w	r3, r1, r3
 8002a2e:	4413      	add	r3, r2
 8002a30:	3361      	adds	r3, #97	; 0x61
 8002a32:	2207      	movs	r2, #7
 8002a34:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	b2d2      	uxtb	r2, r2
 8002a3e:	4611      	mov	r1, r2
 8002a40:	4618      	mov	r0, r3
 8002a42:	f004 fade 	bl	8007002 <USB_HC_Halt>
 8002a46:	e087      	b.n	8002b58 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	015a      	lsls	r2, r3, #5
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	4413      	add	r3, r2
 8002a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 0320 	and.w	r3, r3, #32
 8002a5a:	2b20      	cmp	r3, #32
 8002a5c:	d109      	bne.n	8002a72 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	015a      	lsls	r2, r3, #5
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	4413      	add	r3, r2
 8002a66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	2320      	movs	r3, #32
 8002a6e:	6093      	str	r3, [r2, #8]
 8002a70:	e072      	b.n	8002b58 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	015a      	lsls	r2, r3, #5
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	4413      	add	r3, r2
 8002a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f003 0308 	and.w	r3, r3, #8
 8002a84:	2b08      	cmp	r3, #8
 8002a86:	d11a      	bne.n	8002abe <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	015a      	lsls	r2, r3, #5
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	4413      	add	r3, r2
 8002a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a94:	461a      	mov	r2, r3
 8002a96:	2308      	movs	r3, #8
 8002a98:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	212c      	movs	r1, #44	; 0x2c
 8002aa0:	fb01 f303 	mul.w	r3, r1, r3
 8002aa4:	4413      	add	r3, r2
 8002aa6:	3361      	adds	r3, #97	; 0x61
 8002aa8:	2205      	movs	r2, #5
 8002aaa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	4611      	mov	r1, r2
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f004 faa3 	bl	8007002 <USB_HC_Halt>
 8002abc:	e04c      	b.n	8002b58 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	015a      	lsls	r2, r3, #5
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ad4:	d11b      	bne.n	8002b0e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	015a      	lsls	r2, r3, #5
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	4413      	add	r3, r2
 8002ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ae8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	212c      	movs	r1, #44	; 0x2c
 8002af0:	fb01 f303 	mul.w	r3, r1, r3
 8002af4:	4413      	add	r3, r2
 8002af6:	3361      	adds	r3, #97	; 0x61
 8002af8:	2208      	movs	r2, #8
 8002afa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	b2d2      	uxtb	r2, r2
 8002b04:	4611      	mov	r1, r2
 8002b06:	4618      	mov	r0, r3
 8002b08:	f004 fa7b 	bl	8007002 <USB_HC_Halt>
 8002b0c:	e024      	b.n	8002b58 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	015a      	lsls	r2, r3, #5
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	4413      	add	r3, r2
 8002b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b20:	2b80      	cmp	r3, #128	; 0x80
 8002b22:	d119      	bne.n	8002b58 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	015a      	lsls	r2, r3, #5
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b30:	461a      	mov	r2, r3
 8002b32:	2380      	movs	r3, #128	; 0x80
 8002b34:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	212c      	movs	r1, #44	; 0x2c
 8002b3c:	fb01 f303 	mul.w	r3, r1, r3
 8002b40:	4413      	add	r3, r2
 8002b42:	3361      	adds	r3, #97	; 0x61
 8002b44:	2206      	movs	r2, #6
 8002b46:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	b2d2      	uxtb	r2, r2
 8002b50:	4611      	mov	r1, r2
 8002b52:	4618      	mov	r0, r3
 8002b54:	f004 fa55 	bl	8007002 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	015a      	lsls	r2, r3, #5
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	4413      	add	r3, r2
 8002b60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b6e:	d112      	bne.n	8002b96 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	4611      	mov	r1, r2
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f004 fa41 	bl	8007002 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	015a      	lsls	r2, r3, #5
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	4413      	add	r3, r2
 8002b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b92:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002b94:	e24e      	b.n	8003034 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	015a      	lsls	r2, r3, #5
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	f040 80df 	bne.w	8002d6c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d019      	beq.n	8002bea <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	212c      	movs	r1, #44	; 0x2c
 8002bbc:	fb01 f303 	mul.w	r3, r1, r3
 8002bc0:	4413      	add	r3, r2
 8002bc2:	3348      	adds	r3, #72	; 0x48
 8002bc4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	0159      	lsls	r1, r3, #5
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	440b      	add	r3, r1
 8002bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002bd8:	1ad2      	subs	r2, r2, r3
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	202c      	movs	r0, #44	; 0x2c
 8002be0:	fb00 f303 	mul.w	r3, r0, r3
 8002be4:	440b      	add	r3, r1
 8002be6:	3350      	adds	r3, #80	; 0x50
 8002be8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	212c      	movs	r1, #44	; 0x2c
 8002bf0:	fb01 f303 	mul.w	r3, r1, r3
 8002bf4:	4413      	add	r3, r2
 8002bf6:	3361      	adds	r3, #97	; 0x61
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	212c      	movs	r1, #44	; 0x2c
 8002c02:	fb01 f303 	mul.w	r3, r1, r3
 8002c06:	4413      	add	r3, r2
 8002c08:	335c      	adds	r3, #92	; 0x5c
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	015a      	lsls	r2, r3, #5
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	4413      	add	r3, r2
 8002c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	212c      	movs	r1, #44	; 0x2c
 8002c26:	fb01 f303 	mul.w	r3, r1, r3
 8002c2a:	4413      	add	r3, r2
 8002c2c:	333f      	adds	r3, #63	; 0x3f
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d009      	beq.n	8002c48 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	212c      	movs	r1, #44	; 0x2c
 8002c3a:	fb01 f303 	mul.w	r3, r1, r3
 8002c3e:	4413      	add	r3, r2
 8002c40:	333f      	adds	r3, #63	; 0x3f
 8002c42:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d111      	bne.n	8002c6c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	b2d2      	uxtb	r2, r2
 8002c50:	4611      	mov	r1, r2
 8002c52:	4618      	mov	r0, r3
 8002c54:	f004 f9d5 	bl	8007002 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	015a      	lsls	r2, r3, #5
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	4413      	add	r3, r2
 8002c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c64:	461a      	mov	r2, r3
 8002c66:	2310      	movs	r3, #16
 8002c68:	6093      	str	r3, [r2, #8]
 8002c6a:	e03a      	b.n	8002ce2 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	212c      	movs	r1, #44	; 0x2c
 8002c72:	fb01 f303 	mul.w	r3, r1, r3
 8002c76:	4413      	add	r3, r2
 8002c78:	333f      	adds	r3, #63	; 0x3f
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b03      	cmp	r3, #3
 8002c7e:	d009      	beq.n	8002c94 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	212c      	movs	r1, #44	; 0x2c
 8002c86:	fb01 f303 	mul.w	r3, r1, r3
 8002c8a:	4413      	add	r3, r2
 8002c8c:	333f      	adds	r3, #63	; 0x3f
 8002c8e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d126      	bne.n	8002ce2 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	015a      	lsls	r2, r3, #5
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	0151      	lsls	r1, r2, #5
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	440a      	add	r2, r1
 8002caa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002cb2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	212c      	movs	r1, #44	; 0x2c
 8002cba:	fb01 f303 	mul.w	r3, r1, r3
 8002cbe:	4413      	add	r3, r2
 8002cc0:	3360      	adds	r3, #96	; 0x60
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	b2d9      	uxtb	r1, r3
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	202c      	movs	r0, #44	; 0x2c
 8002cd0:	fb00 f303 	mul.w	r3, r0, r3
 8002cd4:	4413      	add	r3, r2
 8002cd6:	3360      	adds	r3, #96	; 0x60
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f009 fee5 	bl	800caac <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d12b      	bne.n	8002d42 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	212c      	movs	r1, #44	; 0x2c
 8002cf0:	fb01 f303 	mul.w	r3, r1, r3
 8002cf4:	4413      	add	r3, r2
 8002cf6:	3348      	adds	r3, #72	; 0x48
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6879      	ldr	r1, [r7, #4]
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	202c      	movs	r0, #44	; 0x2c
 8002d00:	fb00 f202 	mul.w	r2, r0, r2
 8002d04:	440a      	add	r2, r1
 8002d06:	3240      	adds	r2, #64	; 0x40
 8002d08:	8812      	ldrh	r2, [r2, #0]
 8002d0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f000 818e 	beq.w	8003034 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	212c      	movs	r1, #44	; 0x2c
 8002d1e:	fb01 f303 	mul.w	r3, r1, r3
 8002d22:	4413      	add	r3, r2
 8002d24:	3354      	adds	r3, #84	; 0x54
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	f083 0301 	eor.w	r3, r3, #1
 8002d2c:	b2d8      	uxtb	r0, r3
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	212c      	movs	r1, #44	; 0x2c
 8002d34:	fb01 f303 	mul.w	r3, r1, r3
 8002d38:	4413      	add	r3, r2
 8002d3a:	3354      	adds	r3, #84	; 0x54
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	701a      	strb	r2, [r3, #0]
}
 8002d40:	e178      	b.n	8003034 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	212c      	movs	r1, #44	; 0x2c
 8002d48:	fb01 f303 	mul.w	r3, r1, r3
 8002d4c:	4413      	add	r3, r2
 8002d4e:	3354      	adds	r3, #84	; 0x54
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	f083 0301 	eor.w	r3, r3, #1
 8002d56:	b2d8      	uxtb	r0, r3
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	212c      	movs	r1, #44	; 0x2c
 8002d5e:	fb01 f303 	mul.w	r3, r1, r3
 8002d62:	4413      	add	r3, r2
 8002d64:	3354      	adds	r3, #84	; 0x54
 8002d66:	4602      	mov	r2, r0
 8002d68:	701a      	strb	r2, [r3, #0]
}
 8002d6a:	e163      	b.n	8003034 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	015a      	lsls	r2, r3, #5
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	4413      	add	r3, r2
 8002d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	f040 80f6 	bne.w	8002f70 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	212c      	movs	r1, #44	; 0x2c
 8002d8a:	fb01 f303 	mul.w	r3, r1, r3
 8002d8e:	4413      	add	r3, r2
 8002d90:	3361      	adds	r3, #97	; 0x61
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d109      	bne.n	8002dac <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	212c      	movs	r1, #44	; 0x2c
 8002d9e:	fb01 f303 	mul.w	r3, r1, r3
 8002da2:	4413      	add	r3, r2
 8002da4:	3360      	adds	r3, #96	; 0x60
 8002da6:	2201      	movs	r2, #1
 8002da8:	701a      	strb	r2, [r3, #0]
 8002daa:	e0c9      	b.n	8002f40 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	212c      	movs	r1, #44	; 0x2c
 8002db2:	fb01 f303 	mul.w	r3, r1, r3
 8002db6:	4413      	add	r3, r2
 8002db8:	3361      	adds	r3, #97	; 0x61
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	2b05      	cmp	r3, #5
 8002dbe:	d109      	bne.n	8002dd4 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	212c      	movs	r1, #44	; 0x2c
 8002dc6:	fb01 f303 	mul.w	r3, r1, r3
 8002dca:	4413      	add	r3, r2
 8002dcc:	3360      	adds	r3, #96	; 0x60
 8002dce:	2205      	movs	r2, #5
 8002dd0:	701a      	strb	r2, [r3, #0]
 8002dd2:	e0b5      	b.n	8002f40 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	212c      	movs	r1, #44	; 0x2c
 8002dda:	fb01 f303 	mul.w	r3, r1, r3
 8002dde:	4413      	add	r3, r2
 8002de0:	3361      	adds	r3, #97	; 0x61
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	2b06      	cmp	r3, #6
 8002de6:	d009      	beq.n	8002dfc <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	212c      	movs	r1, #44	; 0x2c
 8002dee:	fb01 f303 	mul.w	r3, r1, r3
 8002df2:	4413      	add	r3, r2
 8002df4:	3361      	adds	r3, #97	; 0x61
 8002df6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d150      	bne.n	8002e9e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	212c      	movs	r1, #44	; 0x2c
 8002e02:	fb01 f303 	mul.w	r3, r1, r3
 8002e06:	4413      	add	r3, r2
 8002e08:	335c      	adds	r3, #92	; 0x5c
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	1c5a      	adds	r2, r3, #1
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	202c      	movs	r0, #44	; 0x2c
 8002e14:	fb00 f303 	mul.w	r3, r0, r3
 8002e18:	440b      	add	r3, r1
 8002e1a:	335c      	adds	r3, #92	; 0x5c
 8002e1c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	212c      	movs	r1, #44	; 0x2c
 8002e24:	fb01 f303 	mul.w	r3, r1, r3
 8002e28:	4413      	add	r3, r2
 8002e2a:	335c      	adds	r3, #92	; 0x5c
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d912      	bls.n	8002e58 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	212c      	movs	r1, #44	; 0x2c
 8002e38:	fb01 f303 	mul.w	r3, r1, r3
 8002e3c:	4413      	add	r3, r2
 8002e3e:	335c      	adds	r3, #92	; 0x5c
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	212c      	movs	r1, #44	; 0x2c
 8002e4a:	fb01 f303 	mul.w	r3, r1, r3
 8002e4e:	4413      	add	r3, r2
 8002e50:	3360      	adds	r3, #96	; 0x60
 8002e52:	2204      	movs	r2, #4
 8002e54:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e56:	e073      	b.n	8002f40 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	212c      	movs	r1, #44	; 0x2c
 8002e5e:	fb01 f303 	mul.w	r3, r1, r3
 8002e62:	4413      	add	r3, r2
 8002e64:	3360      	adds	r3, #96	; 0x60
 8002e66:	2202      	movs	r2, #2
 8002e68:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	015a      	lsls	r2, r3, #5
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	4413      	add	r3, r2
 8002e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e80:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e88:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	015a      	lsls	r2, r3, #5
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	4413      	add	r3, r2
 8002e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e96:	461a      	mov	r2, r3
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e9c:	e050      	b.n	8002f40 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	212c      	movs	r1, #44	; 0x2c
 8002ea4:	fb01 f303 	mul.w	r3, r1, r3
 8002ea8:	4413      	add	r3, r2
 8002eaa:	3361      	adds	r3, #97	; 0x61
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	2b03      	cmp	r3, #3
 8002eb0:	d122      	bne.n	8002ef8 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	212c      	movs	r1, #44	; 0x2c
 8002eb8:	fb01 f303 	mul.w	r3, r1, r3
 8002ebc:	4413      	add	r3, r2
 8002ebe:	3360      	adds	r3, #96	; 0x60
 8002ec0:	2202      	movs	r2, #2
 8002ec2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	015a      	lsls	r2, r3, #5
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	4413      	add	r3, r2
 8002ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002eda:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ee2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	015a      	lsls	r2, r3, #5
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	4413      	add	r3, r2
 8002eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	e023      	b.n	8002f40 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	212c      	movs	r1, #44	; 0x2c
 8002efe:	fb01 f303 	mul.w	r3, r1, r3
 8002f02:	4413      	add	r3, r2
 8002f04:	3361      	adds	r3, #97	; 0x61
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	2b07      	cmp	r3, #7
 8002f0a:	d119      	bne.n	8002f40 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	212c      	movs	r1, #44	; 0x2c
 8002f12:	fb01 f303 	mul.w	r3, r1, r3
 8002f16:	4413      	add	r3, r2
 8002f18:	335c      	adds	r3, #92	; 0x5c
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	1c5a      	adds	r2, r3, #1
 8002f1e:	6879      	ldr	r1, [r7, #4]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	202c      	movs	r0, #44	; 0x2c
 8002f24:	fb00 f303 	mul.w	r3, r0, r3
 8002f28:	440b      	add	r3, r1
 8002f2a:	335c      	adds	r3, #92	; 0x5c
 8002f2c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	212c      	movs	r1, #44	; 0x2c
 8002f34:	fb01 f303 	mul.w	r3, r1, r3
 8002f38:	4413      	add	r3, r2
 8002f3a:	3360      	adds	r3, #96	; 0x60
 8002f3c:	2204      	movs	r2, #4
 8002f3e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	015a      	lsls	r2, r3, #5
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	4413      	add	r3, r2
 8002f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	2302      	movs	r3, #2
 8002f50:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	b2d9      	uxtb	r1, r3
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	202c      	movs	r0, #44	; 0x2c
 8002f5c:	fb00 f303 	mul.w	r3, r0, r3
 8002f60:	4413      	add	r3, r2
 8002f62:	3360      	adds	r3, #96	; 0x60
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	461a      	mov	r2, r3
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f009 fd9f 	bl	800caac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002f6e:	e061      	b.n	8003034 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	015a      	lsls	r2, r3, #5
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	4413      	add	r3, r2
 8002f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 0310 	and.w	r3, r3, #16
 8002f82:	2b10      	cmp	r3, #16
 8002f84:	d156      	bne.n	8003034 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	212c      	movs	r1, #44	; 0x2c
 8002f8c:	fb01 f303 	mul.w	r3, r1, r3
 8002f90:	4413      	add	r3, r2
 8002f92:	333f      	adds	r3, #63	; 0x3f
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	2b03      	cmp	r3, #3
 8002f98:	d111      	bne.n	8002fbe <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	212c      	movs	r1, #44	; 0x2c
 8002fa0:	fb01 f303 	mul.w	r3, r1, r3
 8002fa4:	4413      	add	r3, r2
 8002fa6:	335c      	adds	r3, #92	; 0x5c
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	b2d2      	uxtb	r2, r2
 8002fb4:	4611      	mov	r1, r2
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f004 f823 	bl	8007002 <USB_HC_Halt>
 8002fbc:	e031      	b.n	8003022 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	212c      	movs	r1, #44	; 0x2c
 8002fc4:	fb01 f303 	mul.w	r3, r1, r3
 8002fc8:	4413      	add	r3, r2
 8002fca:	333f      	adds	r3, #63	; 0x3f
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d009      	beq.n	8002fe6 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	212c      	movs	r1, #44	; 0x2c
 8002fd8:	fb01 f303 	mul.w	r3, r1, r3
 8002fdc:	4413      	add	r3, r2
 8002fde:	333f      	adds	r3, #63	; 0x3f
 8002fe0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d11d      	bne.n	8003022 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	212c      	movs	r1, #44	; 0x2c
 8002fec:	fb01 f303 	mul.w	r3, r1, r3
 8002ff0:	4413      	add	r3, r2
 8002ff2:	335c      	adds	r3, #92	; 0x5c
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d110      	bne.n	8003022 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	212c      	movs	r1, #44	; 0x2c
 8003006:	fb01 f303 	mul.w	r3, r1, r3
 800300a:	4413      	add	r3, r2
 800300c:	3361      	adds	r3, #97	; 0x61
 800300e:	2203      	movs	r2, #3
 8003010:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	b2d2      	uxtb	r2, r2
 800301a:	4611      	mov	r1, r2
 800301c:	4618      	mov	r0, r3
 800301e:	f003 fff0 	bl	8007002 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	015a      	lsls	r2, r3, #5
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	4413      	add	r3, r2
 800302a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800302e:	461a      	mov	r2, r3
 8003030:	2310      	movs	r3, #16
 8003032:	6093      	str	r3, [r2, #8]
}
 8003034:	bf00      	nop
 8003036:	3718      	adds	r7, #24
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b088      	sub	sp, #32
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	460b      	mov	r3, r1
 8003046:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003052:	78fb      	ldrb	r3, [r7, #3]
 8003054:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	015a      	lsls	r2, r3, #5
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	4413      	add	r3, r2
 800305e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	2b04      	cmp	r3, #4
 800306a:	d11a      	bne.n	80030a2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	015a      	lsls	r2, r3, #5
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	4413      	add	r3, r2
 8003074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003078:	461a      	mov	r2, r3
 800307a:	2304      	movs	r3, #4
 800307c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	212c      	movs	r1, #44	; 0x2c
 8003084:	fb01 f303 	mul.w	r3, r1, r3
 8003088:	4413      	add	r3, r2
 800308a:	3361      	adds	r3, #97	; 0x61
 800308c:	2206      	movs	r2, #6
 800308e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	4611      	mov	r1, r2
 800309a:	4618      	mov	r0, r3
 800309c:	f003 ffb1 	bl	8007002 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80030a0:	e331      	b.n	8003706 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	015a      	lsls	r2, r3, #5
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	4413      	add	r3, r2
 80030aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f003 0320 	and.w	r3, r3, #32
 80030b4:	2b20      	cmp	r3, #32
 80030b6:	d12e      	bne.n	8003116 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	015a      	lsls	r2, r3, #5
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	4413      	add	r3, r2
 80030c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c4:	461a      	mov	r2, r3
 80030c6:	2320      	movs	r3, #32
 80030c8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	212c      	movs	r1, #44	; 0x2c
 80030d0:	fb01 f303 	mul.w	r3, r1, r3
 80030d4:	4413      	add	r3, r2
 80030d6:	333d      	adds	r3, #61	; 0x3d
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	f040 8313 	bne.w	8003706 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	212c      	movs	r1, #44	; 0x2c
 80030e6:	fb01 f303 	mul.w	r3, r1, r3
 80030ea:	4413      	add	r3, r2
 80030ec:	333d      	adds	r3, #61	; 0x3d
 80030ee:	2200      	movs	r2, #0
 80030f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	212c      	movs	r1, #44	; 0x2c
 80030f8:	fb01 f303 	mul.w	r3, r1, r3
 80030fc:	4413      	add	r3, r2
 80030fe:	3360      	adds	r3, #96	; 0x60
 8003100:	2202      	movs	r2, #2
 8003102:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	b2d2      	uxtb	r2, r2
 800310c:	4611      	mov	r1, r2
 800310e:	4618      	mov	r0, r3
 8003110:	f003 ff77 	bl	8007002 <USB_HC_Halt>
}
 8003114:	e2f7      	b.n	8003706 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	015a      	lsls	r2, r3, #5
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	4413      	add	r3, r2
 800311e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800312c:	d112      	bne.n	8003154 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	015a      	lsls	r2, r3, #5
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	4413      	add	r3, r2
 8003136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800313a:	461a      	mov	r2, r3
 800313c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003140:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	b2d2      	uxtb	r2, r2
 800314a:	4611      	mov	r1, r2
 800314c:	4618      	mov	r0, r3
 800314e:	f003 ff58 	bl	8007002 <USB_HC_Halt>
}
 8003152:	e2d8      	b.n	8003706 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	015a      	lsls	r2, r3, #5
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	4413      	add	r3, r2
 800315c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b01      	cmp	r3, #1
 8003168:	d140      	bne.n	80031ec <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	212c      	movs	r1, #44	; 0x2c
 8003170:	fb01 f303 	mul.w	r3, r1, r3
 8003174:	4413      	add	r3, r2
 8003176:	335c      	adds	r3, #92	; 0x5c
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	015a      	lsls	r2, r3, #5
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	4413      	add	r3, r2
 8003184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800318e:	2b40      	cmp	r3, #64	; 0x40
 8003190:	d111      	bne.n	80031b6 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	212c      	movs	r1, #44	; 0x2c
 8003198:	fb01 f303 	mul.w	r3, r1, r3
 800319c:	4413      	add	r3, r2
 800319e:	333d      	adds	r3, #61	; 0x3d
 80031a0:	2201      	movs	r2, #1
 80031a2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	015a      	lsls	r2, r3, #5
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	4413      	add	r3, r2
 80031ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b0:	461a      	mov	r2, r3
 80031b2:	2340      	movs	r3, #64	; 0x40
 80031b4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	015a      	lsls	r2, r3, #5
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	4413      	add	r3, r2
 80031be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031c2:	461a      	mov	r2, r3
 80031c4:	2301      	movs	r3, #1
 80031c6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	212c      	movs	r1, #44	; 0x2c
 80031ce:	fb01 f303 	mul.w	r3, r1, r3
 80031d2:	4413      	add	r3, r2
 80031d4:	3361      	adds	r3, #97	; 0x61
 80031d6:	2201      	movs	r2, #1
 80031d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	b2d2      	uxtb	r2, r2
 80031e2:	4611      	mov	r1, r2
 80031e4:	4618      	mov	r0, r3
 80031e6:	f003 ff0c 	bl	8007002 <USB_HC_Halt>
}
 80031ea:	e28c      	b.n	8003706 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	015a      	lsls	r2, r3, #5
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	4413      	add	r3, r2
 80031f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031fe:	2b40      	cmp	r3, #64	; 0x40
 8003200:	d12c      	bne.n	800325c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	212c      	movs	r1, #44	; 0x2c
 8003208:	fb01 f303 	mul.w	r3, r1, r3
 800320c:	4413      	add	r3, r2
 800320e:	3361      	adds	r3, #97	; 0x61
 8003210:	2204      	movs	r2, #4
 8003212:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	212c      	movs	r1, #44	; 0x2c
 800321a:	fb01 f303 	mul.w	r3, r1, r3
 800321e:	4413      	add	r3, r2
 8003220:	333d      	adds	r3, #61	; 0x3d
 8003222:	2201      	movs	r2, #1
 8003224:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	212c      	movs	r1, #44	; 0x2c
 800322c:	fb01 f303 	mul.w	r3, r1, r3
 8003230:	4413      	add	r3, r2
 8003232:	335c      	adds	r3, #92	; 0x5c
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	b2d2      	uxtb	r2, r2
 8003240:	4611      	mov	r1, r2
 8003242:	4618      	mov	r0, r3
 8003244:	f003 fedd 	bl	8007002 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	015a      	lsls	r2, r3, #5
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	4413      	add	r3, r2
 8003250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003254:	461a      	mov	r2, r3
 8003256:	2340      	movs	r3, #64	; 0x40
 8003258:	6093      	str	r3, [r2, #8]
}
 800325a:	e254      	b.n	8003706 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	015a      	lsls	r2, r3, #5
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	4413      	add	r3, r2
 8003264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 0308 	and.w	r3, r3, #8
 800326e:	2b08      	cmp	r3, #8
 8003270:	d11a      	bne.n	80032a8 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	015a      	lsls	r2, r3, #5
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	4413      	add	r3, r2
 800327a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800327e:	461a      	mov	r2, r3
 8003280:	2308      	movs	r3, #8
 8003282:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	212c      	movs	r1, #44	; 0x2c
 800328a:	fb01 f303 	mul.w	r3, r1, r3
 800328e:	4413      	add	r3, r2
 8003290:	3361      	adds	r3, #97	; 0x61
 8003292:	2205      	movs	r2, #5
 8003294:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	b2d2      	uxtb	r2, r2
 800329e:	4611      	mov	r1, r2
 80032a0:	4618      	mov	r0, r3
 80032a2:	f003 feae 	bl	8007002 <USB_HC_Halt>
}
 80032a6:	e22e      	b.n	8003706 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	015a      	lsls	r2, r3, #5
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	4413      	add	r3, r2
 80032b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f003 0310 	and.w	r3, r3, #16
 80032ba:	2b10      	cmp	r3, #16
 80032bc:	d140      	bne.n	8003340 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	212c      	movs	r1, #44	; 0x2c
 80032c4:	fb01 f303 	mul.w	r3, r1, r3
 80032c8:	4413      	add	r3, r2
 80032ca:	335c      	adds	r3, #92	; 0x5c
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	212c      	movs	r1, #44	; 0x2c
 80032d6:	fb01 f303 	mul.w	r3, r1, r3
 80032da:	4413      	add	r3, r2
 80032dc:	3361      	adds	r3, #97	; 0x61
 80032de:	2203      	movs	r2, #3
 80032e0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	212c      	movs	r1, #44	; 0x2c
 80032e8:	fb01 f303 	mul.w	r3, r1, r3
 80032ec:	4413      	add	r3, r2
 80032ee:	333d      	adds	r3, #61	; 0x3d
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d112      	bne.n	800331c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	212c      	movs	r1, #44	; 0x2c
 80032fc:	fb01 f303 	mul.w	r3, r1, r3
 8003300:	4413      	add	r3, r2
 8003302:	333c      	adds	r3, #60	; 0x3c
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d108      	bne.n	800331c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	212c      	movs	r1, #44	; 0x2c
 8003310:	fb01 f303 	mul.w	r3, r1, r3
 8003314:	4413      	add	r3, r2
 8003316:	333d      	adds	r3, #61	; 0x3d
 8003318:	2201      	movs	r2, #1
 800331a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	b2d2      	uxtb	r2, r2
 8003324:	4611      	mov	r1, r2
 8003326:	4618      	mov	r0, r3
 8003328:	f003 fe6b 	bl	8007002 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	015a      	lsls	r2, r3, #5
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	4413      	add	r3, r2
 8003334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003338:	461a      	mov	r2, r3
 800333a:	2310      	movs	r3, #16
 800333c:	6093      	str	r3, [r2, #8]
}
 800333e:	e1e2      	b.n	8003706 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	015a      	lsls	r2, r3, #5
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	4413      	add	r3, r2
 8003348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003352:	2b80      	cmp	r3, #128	; 0x80
 8003354:	d164      	bne.n	8003420 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d111      	bne.n	8003382 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	212c      	movs	r1, #44	; 0x2c
 8003364:	fb01 f303 	mul.w	r3, r1, r3
 8003368:	4413      	add	r3, r2
 800336a:	3361      	adds	r3, #97	; 0x61
 800336c:	2206      	movs	r2, #6
 800336e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	697a      	ldr	r2, [r7, #20]
 8003376:	b2d2      	uxtb	r2, r2
 8003378:	4611      	mov	r1, r2
 800337a:	4618      	mov	r0, r3
 800337c:	f003 fe41 	bl	8007002 <USB_HC_Halt>
 8003380:	e044      	b.n	800340c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	212c      	movs	r1, #44	; 0x2c
 8003388:	fb01 f303 	mul.w	r3, r1, r3
 800338c:	4413      	add	r3, r2
 800338e:	335c      	adds	r3, #92	; 0x5c
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	1c5a      	adds	r2, r3, #1
 8003394:	6879      	ldr	r1, [r7, #4]
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	202c      	movs	r0, #44	; 0x2c
 800339a:	fb00 f303 	mul.w	r3, r0, r3
 800339e:	440b      	add	r3, r1
 80033a0:	335c      	adds	r3, #92	; 0x5c
 80033a2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	212c      	movs	r1, #44	; 0x2c
 80033aa:	fb01 f303 	mul.w	r3, r1, r3
 80033ae:	4413      	add	r3, r2
 80033b0:	335c      	adds	r3, #92	; 0x5c
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d920      	bls.n	80033fa <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	212c      	movs	r1, #44	; 0x2c
 80033be:	fb01 f303 	mul.w	r3, r1, r3
 80033c2:	4413      	add	r3, r2
 80033c4:	335c      	adds	r3, #92	; 0x5c
 80033c6:	2200      	movs	r2, #0
 80033c8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	212c      	movs	r1, #44	; 0x2c
 80033d0:	fb01 f303 	mul.w	r3, r1, r3
 80033d4:	4413      	add	r3, r2
 80033d6:	3360      	adds	r3, #96	; 0x60
 80033d8:	2204      	movs	r2, #4
 80033da:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	b2d9      	uxtb	r1, r3
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	202c      	movs	r0, #44	; 0x2c
 80033e6:	fb00 f303 	mul.w	r3, r0, r3
 80033ea:	4413      	add	r3, r2
 80033ec:	3360      	adds	r3, #96	; 0x60
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	461a      	mov	r2, r3
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f009 fb5a 	bl	800caac <HAL_HCD_HC_NotifyURBChange_Callback>
 80033f8:	e008      	b.n	800340c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	212c      	movs	r1, #44	; 0x2c
 8003400:	fb01 f303 	mul.w	r3, r1, r3
 8003404:	4413      	add	r3, r2
 8003406:	3360      	adds	r3, #96	; 0x60
 8003408:	2202      	movs	r2, #2
 800340a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	015a      	lsls	r2, r3, #5
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	4413      	add	r3, r2
 8003414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003418:	461a      	mov	r2, r3
 800341a:	2380      	movs	r3, #128	; 0x80
 800341c:	6093      	str	r3, [r2, #8]
}
 800341e:	e172      	b.n	8003706 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	015a      	lsls	r2, r3, #5
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	4413      	add	r3, r2
 8003428:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003432:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003436:	d11b      	bne.n	8003470 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	212c      	movs	r1, #44	; 0x2c
 800343e:	fb01 f303 	mul.w	r3, r1, r3
 8003442:	4413      	add	r3, r2
 8003444:	3361      	adds	r3, #97	; 0x61
 8003446:	2208      	movs	r2, #8
 8003448:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	697a      	ldr	r2, [r7, #20]
 8003450:	b2d2      	uxtb	r2, r2
 8003452:	4611      	mov	r1, r2
 8003454:	4618      	mov	r0, r3
 8003456:	f003 fdd4 	bl	8007002 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	015a      	lsls	r2, r3, #5
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	4413      	add	r3, r2
 8003462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003466:	461a      	mov	r2, r3
 8003468:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800346c:	6093      	str	r3, [r2, #8]
}
 800346e:	e14a      	b.n	8003706 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	015a      	lsls	r2, r3, #5
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	4413      	add	r3, r2
 8003478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b02      	cmp	r3, #2
 8003484:	f040 813f 	bne.w	8003706 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	212c      	movs	r1, #44	; 0x2c
 800348e:	fb01 f303 	mul.w	r3, r1, r3
 8003492:	4413      	add	r3, r2
 8003494:	3361      	adds	r3, #97	; 0x61
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d17d      	bne.n	8003598 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	212c      	movs	r1, #44	; 0x2c
 80034a2:	fb01 f303 	mul.w	r3, r1, r3
 80034a6:	4413      	add	r3, r2
 80034a8:	3360      	adds	r3, #96	; 0x60
 80034aa:	2201      	movs	r2, #1
 80034ac:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	212c      	movs	r1, #44	; 0x2c
 80034b4:	fb01 f303 	mul.w	r3, r1, r3
 80034b8:	4413      	add	r3, r2
 80034ba:	333f      	adds	r3, #63	; 0x3f
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d00a      	beq.n	80034d8 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	212c      	movs	r1, #44	; 0x2c
 80034c8:	fb01 f303 	mul.w	r3, r1, r3
 80034cc:	4413      	add	r3, r2
 80034ce:	333f      	adds	r3, #63	; 0x3f
 80034d0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80034d2:	2b03      	cmp	r3, #3
 80034d4:	f040 8100 	bne.w	80036d8 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d113      	bne.n	8003508 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	212c      	movs	r1, #44	; 0x2c
 80034e6:	fb01 f303 	mul.w	r3, r1, r3
 80034ea:	4413      	add	r3, r2
 80034ec:	3355      	adds	r3, #85	; 0x55
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	f083 0301 	eor.w	r3, r3, #1
 80034f4:	b2d8      	uxtb	r0, r3
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	212c      	movs	r1, #44	; 0x2c
 80034fc:	fb01 f303 	mul.w	r3, r1, r3
 8003500:	4413      	add	r3, r2
 8003502:	3355      	adds	r3, #85	; 0x55
 8003504:	4602      	mov	r2, r0
 8003506:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	2b01      	cmp	r3, #1
 800350e:	f040 80e3 	bne.w	80036d8 <HCD_HC_OUT_IRQHandler+0x69c>
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	212c      	movs	r1, #44	; 0x2c
 8003518:	fb01 f303 	mul.w	r3, r1, r3
 800351c:	4413      	add	r3, r2
 800351e:	334c      	adds	r3, #76	; 0x4c
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	f000 80d8 	beq.w	80036d8 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	212c      	movs	r1, #44	; 0x2c
 800352e:	fb01 f303 	mul.w	r3, r1, r3
 8003532:	4413      	add	r3, r2
 8003534:	334c      	adds	r3, #76	; 0x4c
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	6879      	ldr	r1, [r7, #4]
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	202c      	movs	r0, #44	; 0x2c
 800353e:	fb00 f202 	mul.w	r2, r0, r2
 8003542:	440a      	add	r2, r1
 8003544:	3240      	adds	r2, #64	; 0x40
 8003546:	8812      	ldrh	r2, [r2, #0]
 8003548:	4413      	add	r3, r2
 800354a:	3b01      	subs	r3, #1
 800354c:	6879      	ldr	r1, [r7, #4]
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	202c      	movs	r0, #44	; 0x2c
 8003552:	fb00 f202 	mul.w	r2, r0, r2
 8003556:	440a      	add	r2, r1
 8003558:	3240      	adds	r2, #64	; 0x40
 800355a:	8812      	ldrh	r2, [r2, #0]
 800355c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003560:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	2b00      	cmp	r3, #0
 800356a:	f000 80b5 	beq.w	80036d8 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	212c      	movs	r1, #44	; 0x2c
 8003574:	fb01 f303 	mul.w	r3, r1, r3
 8003578:	4413      	add	r3, r2
 800357a:	3355      	adds	r3, #85	; 0x55
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	f083 0301 	eor.w	r3, r3, #1
 8003582:	b2d8      	uxtb	r0, r3
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	212c      	movs	r1, #44	; 0x2c
 800358a:	fb01 f303 	mul.w	r3, r1, r3
 800358e:	4413      	add	r3, r2
 8003590:	3355      	adds	r3, #85	; 0x55
 8003592:	4602      	mov	r2, r0
 8003594:	701a      	strb	r2, [r3, #0]
 8003596:	e09f      	b.n	80036d8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	212c      	movs	r1, #44	; 0x2c
 800359e:	fb01 f303 	mul.w	r3, r1, r3
 80035a2:	4413      	add	r3, r2
 80035a4:	3361      	adds	r3, #97	; 0x61
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	2b03      	cmp	r3, #3
 80035aa:	d109      	bne.n	80035c0 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	212c      	movs	r1, #44	; 0x2c
 80035b2:	fb01 f303 	mul.w	r3, r1, r3
 80035b6:	4413      	add	r3, r2
 80035b8:	3360      	adds	r3, #96	; 0x60
 80035ba:	2202      	movs	r2, #2
 80035bc:	701a      	strb	r2, [r3, #0]
 80035be:	e08b      	b.n	80036d8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	212c      	movs	r1, #44	; 0x2c
 80035c6:	fb01 f303 	mul.w	r3, r1, r3
 80035ca:	4413      	add	r3, r2
 80035cc:	3361      	adds	r3, #97	; 0x61
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	2b04      	cmp	r3, #4
 80035d2:	d109      	bne.n	80035e8 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	212c      	movs	r1, #44	; 0x2c
 80035da:	fb01 f303 	mul.w	r3, r1, r3
 80035de:	4413      	add	r3, r2
 80035e0:	3360      	adds	r3, #96	; 0x60
 80035e2:	2202      	movs	r2, #2
 80035e4:	701a      	strb	r2, [r3, #0]
 80035e6:	e077      	b.n	80036d8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	212c      	movs	r1, #44	; 0x2c
 80035ee:	fb01 f303 	mul.w	r3, r1, r3
 80035f2:	4413      	add	r3, r2
 80035f4:	3361      	adds	r3, #97	; 0x61
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	2b05      	cmp	r3, #5
 80035fa:	d109      	bne.n	8003610 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	212c      	movs	r1, #44	; 0x2c
 8003602:	fb01 f303 	mul.w	r3, r1, r3
 8003606:	4413      	add	r3, r2
 8003608:	3360      	adds	r3, #96	; 0x60
 800360a:	2205      	movs	r2, #5
 800360c:	701a      	strb	r2, [r3, #0]
 800360e:	e063      	b.n	80036d8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	212c      	movs	r1, #44	; 0x2c
 8003616:	fb01 f303 	mul.w	r3, r1, r3
 800361a:	4413      	add	r3, r2
 800361c:	3361      	adds	r3, #97	; 0x61
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	2b06      	cmp	r3, #6
 8003622:	d009      	beq.n	8003638 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	212c      	movs	r1, #44	; 0x2c
 800362a:	fb01 f303 	mul.w	r3, r1, r3
 800362e:	4413      	add	r3, r2
 8003630:	3361      	adds	r3, #97	; 0x61
 8003632:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003634:	2b08      	cmp	r3, #8
 8003636:	d14f      	bne.n	80036d8 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	212c      	movs	r1, #44	; 0x2c
 800363e:	fb01 f303 	mul.w	r3, r1, r3
 8003642:	4413      	add	r3, r2
 8003644:	335c      	adds	r3, #92	; 0x5c
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	1c5a      	adds	r2, r3, #1
 800364a:	6879      	ldr	r1, [r7, #4]
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	202c      	movs	r0, #44	; 0x2c
 8003650:	fb00 f303 	mul.w	r3, r0, r3
 8003654:	440b      	add	r3, r1
 8003656:	335c      	adds	r3, #92	; 0x5c
 8003658:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	212c      	movs	r1, #44	; 0x2c
 8003660:	fb01 f303 	mul.w	r3, r1, r3
 8003664:	4413      	add	r3, r2
 8003666:	335c      	adds	r3, #92	; 0x5c
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2b02      	cmp	r3, #2
 800366c:	d912      	bls.n	8003694 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	212c      	movs	r1, #44	; 0x2c
 8003674:	fb01 f303 	mul.w	r3, r1, r3
 8003678:	4413      	add	r3, r2
 800367a:	335c      	adds	r3, #92	; 0x5c
 800367c:	2200      	movs	r2, #0
 800367e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	212c      	movs	r1, #44	; 0x2c
 8003686:	fb01 f303 	mul.w	r3, r1, r3
 800368a:	4413      	add	r3, r2
 800368c:	3360      	adds	r3, #96	; 0x60
 800368e:	2204      	movs	r2, #4
 8003690:	701a      	strb	r2, [r3, #0]
 8003692:	e021      	b.n	80036d8 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	212c      	movs	r1, #44	; 0x2c
 800369a:	fb01 f303 	mul.w	r3, r1, r3
 800369e:	4413      	add	r3, r2
 80036a0:	3360      	adds	r3, #96	; 0x60
 80036a2:	2202      	movs	r2, #2
 80036a4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	015a      	lsls	r2, r3, #5
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	4413      	add	r3, r2
 80036ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80036bc:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80036c4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	015a      	lsls	r2, r3, #5
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	4413      	add	r3, r2
 80036ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036d2:	461a      	mov	r2, r3
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	015a      	lsls	r2, r3, #5
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	4413      	add	r3, r2
 80036e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e4:	461a      	mov	r2, r3
 80036e6:	2302      	movs	r3, #2
 80036e8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	b2d9      	uxtb	r1, r3
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	202c      	movs	r0, #44	; 0x2c
 80036f4:	fb00 f303 	mul.w	r3, r0, r3
 80036f8:	4413      	add	r3, r2
 80036fa:	3360      	adds	r3, #96	; 0x60
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	461a      	mov	r2, r3
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f009 f9d3 	bl	800caac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003706:	bf00      	nop
 8003708:	3720      	adds	r7, #32
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b08a      	sub	sp, #40	; 0x28
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	f003 030f 	and.w	r3, r3, #15
 800372e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	0c5b      	lsrs	r3, r3, #17
 8003734:	f003 030f 	and.w	r3, r3, #15
 8003738:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	091b      	lsrs	r3, r3, #4
 800373e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003742:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	2b02      	cmp	r3, #2
 8003748:	d004      	beq.n	8003754 <HCD_RXQLVL_IRQHandler+0x46>
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	2b05      	cmp	r3, #5
 800374e:	f000 80a9 	beq.w	80038a4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003752:	e0aa      	b.n	80038aa <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	2b00      	cmp	r3, #0
 8003758:	f000 80a6 	beq.w	80038a8 <HCD_RXQLVL_IRQHandler+0x19a>
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	212c      	movs	r1, #44	; 0x2c
 8003762:	fb01 f303 	mul.w	r3, r1, r3
 8003766:	4413      	add	r3, r2
 8003768:	3344      	adds	r3, #68	; 0x44
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 809b 	beq.w	80038a8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	212c      	movs	r1, #44	; 0x2c
 8003778:	fb01 f303 	mul.w	r3, r1, r3
 800377c:	4413      	add	r3, r2
 800377e:	3350      	adds	r3, #80	; 0x50
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	441a      	add	r2, r3
 8003786:	6879      	ldr	r1, [r7, #4]
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	202c      	movs	r0, #44	; 0x2c
 800378c:	fb00 f303 	mul.w	r3, r0, r3
 8003790:	440b      	add	r3, r1
 8003792:	334c      	adds	r3, #76	; 0x4c
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	429a      	cmp	r2, r3
 8003798:	d87a      	bhi.n	8003890 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6818      	ldr	r0, [r3, #0]
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	212c      	movs	r1, #44	; 0x2c
 80037a4:	fb01 f303 	mul.w	r3, r1, r3
 80037a8:	4413      	add	r3, r2
 80037aa:	3344      	adds	r3, #68	; 0x44
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	b292      	uxth	r2, r2
 80037b2:	4619      	mov	r1, r3
 80037b4:	f002 ff7c 	bl	80066b0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	212c      	movs	r1, #44	; 0x2c
 80037be:	fb01 f303 	mul.w	r3, r1, r3
 80037c2:	4413      	add	r3, r2
 80037c4:	3344      	adds	r3, #68	; 0x44
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	441a      	add	r2, r3
 80037cc:	6879      	ldr	r1, [r7, #4]
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	202c      	movs	r0, #44	; 0x2c
 80037d2:	fb00 f303 	mul.w	r3, r0, r3
 80037d6:	440b      	add	r3, r1
 80037d8:	3344      	adds	r3, #68	; 0x44
 80037da:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	212c      	movs	r1, #44	; 0x2c
 80037e2:	fb01 f303 	mul.w	r3, r1, r3
 80037e6:	4413      	add	r3, r2
 80037e8:	3350      	adds	r3, #80	; 0x50
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	441a      	add	r2, r3
 80037f0:	6879      	ldr	r1, [r7, #4]
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	202c      	movs	r0, #44	; 0x2c
 80037f6:	fb00 f303 	mul.w	r3, r0, r3
 80037fa:	440b      	add	r3, r1
 80037fc:	3350      	adds	r3, #80	; 0x50
 80037fe:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	015a      	lsls	r2, r3, #5
 8003804:	6a3b      	ldr	r3, [r7, #32]
 8003806:	4413      	add	r3, r2
 8003808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	0cdb      	lsrs	r3, r3, #19
 8003810:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003814:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	212c      	movs	r1, #44	; 0x2c
 800381c:	fb01 f303 	mul.w	r3, r1, r3
 8003820:	4413      	add	r3, r2
 8003822:	3340      	adds	r3, #64	; 0x40
 8003824:	881b      	ldrh	r3, [r3, #0]
 8003826:	461a      	mov	r2, r3
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	4293      	cmp	r3, r2
 800382c:	d13c      	bne.n	80038a8 <HCD_RXQLVL_IRQHandler+0x19a>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d039      	beq.n	80038a8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	015a      	lsls	r2, r3, #5
 8003838:	6a3b      	ldr	r3, [r7, #32]
 800383a:	4413      	add	r3, r2
 800383c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800384a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003852:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	015a      	lsls	r2, r3, #5
 8003858:	6a3b      	ldr	r3, [r7, #32]
 800385a:	4413      	add	r3, r2
 800385c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003860:	461a      	mov	r2, r3
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	212c      	movs	r1, #44	; 0x2c
 800386c:	fb01 f303 	mul.w	r3, r1, r3
 8003870:	4413      	add	r3, r2
 8003872:	3354      	adds	r3, #84	; 0x54
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	f083 0301 	eor.w	r3, r3, #1
 800387a:	b2d8      	uxtb	r0, r3
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	212c      	movs	r1, #44	; 0x2c
 8003882:	fb01 f303 	mul.w	r3, r1, r3
 8003886:	4413      	add	r3, r2
 8003888:	3354      	adds	r3, #84	; 0x54
 800388a:	4602      	mov	r2, r0
 800388c:	701a      	strb	r2, [r3, #0]
      break;
 800388e:	e00b      	b.n	80038a8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	212c      	movs	r1, #44	; 0x2c
 8003896:	fb01 f303 	mul.w	r3, r1, r3
 800389a:	4413      	add	r3, r2
 800389c:	3360      	adds	r3, #96	; 0x60
 800389e:	2204      	movs	r2, #4
 80038a0:	701a      	strb	r2, [r3, #0]
      break;
 80038a2:	e001      	b.n	80038a8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80038a4:	bf00      	nop
 80038a6:	e000      	b.n	80038aa <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80038a8:	bf00      	nop
  }
}
 80038aa:	bf00      	nop
 80038ac:	3728      	adds	r7, #40	; 0x28
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b086      	sub	sp, #24
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80038de:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d10b      	bne.n	8003902 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d102      	bne.n	80038fa <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f009 f8bd 	bl	800ca74 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	f043 0302 	orr.w	r3, r3, #2
 8003900:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f003 0308 	and.w	r3, r3, #8
 8003908:	2b08      	cmp	r3, #8
 800390a:	d132      	bne.n	8003972 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	f043 0308 	orr.w	r3, r3, #8
 8003912:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f003 0304 	and.w	r3, r3, #4
 800391a:	2b04      	cmp	r3, #4
 800391c:	d126      	bne.n	800396c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	2b02      	cmp	r3, #2
 8003924:	d113      	bne.n	800394e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800392c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003930:	d106      	bne.n	8003940 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2102      	movs	r1, #2
 8003938:	4618      	mov	r0, r3
 800393a:	f003 f827 	bl	800698c <USB_InitFSLSPClkSel>
 800393e:	e011      	b.n	8003964 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2101      	movs	r1, #1
 8003946:	4618      	mov	r0, r3
 8003948:	f003 f820 	bl	800698c <USB_InitFSLSPClkSel>
 800394c:	e00a      	b.n	8003964 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d106      	bne.n	8003964 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800395c:	461a      	mov	r2, r3
 800395e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003962:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f009 f8b3 	bl	800cad0 <HAL_HCD_PortEnabled_Callback>
 800396a:	e002      	b.n	8003972 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f009 f8bd 	bl	800caec <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f003 0320 	and.w	r3, r3, #32
 8003978:	2b20      	cmp	r3, #32
 800397a:	d103      	bne.n	8003984 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	f043 0320 	orr.w	r3, r3, #32
 8003982:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800398a:	461a      	mov	r2, r3
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	6013      	str	r3, [r2, #0]
}
 8003990:	bf00      	nop
 8003992:	3718      	adds	r7, #24
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e12b      	b.n	8003c02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d106      	bne.n	80039c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7fd fa9a 	bl	8000ef8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2224      	movs	r2, #36	; 0x24
 80039c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0201 	bic.w	r2, r2, #1
 80039da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039fc:	f001 fa20 	bl	8004e40 <HAL_RCC_GetPCLK1Freq>
 8003a00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	4a81      	ldr	r2, [pc, #516]	; (8003c0c <HAL_I2C_Init+0x274>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d807      	bhi.n	8003a1c <HAL_I2C_Init+0x84>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	4a80      	ldr	r2, [pc, #512]	; (8003c10 <HAL_I2C_Init+0x278>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	bf94      	ite	ls
 8003a14:	2301      	movls	r3, #1
 8003a16:	2300      	movhi	r3, #0
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	e006      	b.n	8003a2a <HAL_I2C_Init+0x92>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	4a7d      	ldr	r2, [pc, #500]	; (8003c14 <HAL_I2C_Init+0x27c>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	bf94      	ite	ls
 8003a24:	2301      	movls	r3, #1
 8003a26:	2300      	movhi	r3, #0
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e0e7      	b.n	8003c02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	4a78      	ldr	r2, [pc, #480]	; (8003c18 <HAL_I2C_Init+0x280>)
 8003a36:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3a:	0c9b      	lsrs	r3, r3, #18
 8003a3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	4a6a      	ldr	r2, [pc, #424]	; (8003c0c <HAL_I2C_Init+0x274>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d802      	bhi.n	8003a6c <HAL_I2C_Init+0xd4>
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	3301      	adds	r3, #1
 8003a6a:	e009      	b.n	8003a80 <HAL_I2C_Init+0xe8>
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a72:	fb02 f303 	mul.w	r3, r2, r3
 8003a76:	4a69      	ldr	r2, [pc, #420]	; (8003c1c <HAL_I2C_Init+0x284>)
 8003a78:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7c:	099b      	lsrs	r3, r3, #6
 8003a7e:	3301      	adds	r3, #1
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6812      	ldr	r2, [r2, #0]
 8003a84:	430b      	orrs	r3, r1
 8003a86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a92:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	495c      	ldr	r1, [pc, #368]	; (8003c0c <HAL_I2C_Init+0x274>)
 8003a9c:	428b      	cmp	r3, r1
 8003a9e:	d819      	bhi.n	8003ad4 <HAL_I2C_Init+0x13c>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	1e59      	subs	r1, r3, #1
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	fbb1 f3f3 	udiv	r3, r1, r3
 8003aae:	1c59      	adds	r1, r3, #1
 8003ab0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ab4:	400b      	ands	r3, r1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00a      	beq.n	8003ad0 <HAL_I2C_Init+0x138>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	1e59      	subs	r1, r3, #1
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ac8:	3301      	adds	r3, #1
 8003aca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ace:	e051      	b.n	8003b74 <HAL_I2C_Init+0x1dc>
 8003ad0:	2304      	movs	r3, #4
 8003ad2:	e04f      	b.n	8003b74 <HAL_I2C_Init+0x1dc>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d111      	bne.n	8003b00 <HAL_I2C_Init+0x168>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	1e58      	subs	r0, r3, #1
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6859      	ldr	r1, [r3, #4]
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	440b      	add	r3, r1
 8003aea:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aee:	3301      	adds	r3, #1
 8003af0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	bf0c      	ite	eq
 8003af8:	2301      	moveq	r3, #1
 8003afa:	2300      	movne	r3, #0
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	e012      	b.n	8003b26 <HAL_I2C_Init+0x18e>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	1e58      	subs	r0, r3, #1
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6859      	ldr	r1, [r3, #4]
 8003b08:	460b      	mov	r3, r1
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	440b      	add	r3, r1
 8003b0e:	0099      	lsls	r1, r3, #2
 8003b10:	440b      	add	r3, r1
 8003b12:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b16:	3301      	adds	r3, #1
 8003b18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	bf0c      	ite	eq
 8003b20:	2301      	moveq	r3, #1
 8003b22:	2300      	movne	r3, #0
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <HAL_I2C_Init+0x196>
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e022      	b.n	8003b74 <HAL_I2C_Init+0x1dc>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10e      	bne.n	8003b54 <HAL_I2C_Init+0x1bc>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	1e58      	subs	r0, r3, #1
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6859      	ldr	r1, [r3, #4]
 8003b3e:	460b      	mov	r3, r1
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	440b      	add	r3, r1
 8003b44:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b48:	3301      	adds	r3, #1
 8003b4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b52:	e00f      	b.n	8003b74 <HAL_I2C_Init+0x1dc>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	1e58      	subs	r0, r3, #1
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6859      	ldr	r1, [r3, #4]
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	440b      	add	r3, r1
 8003b62:	0099      	lsls	r1, r3, #2
 8003b64:	440b      	add	r3, r1
 8003b66:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b74:	6879      	ldr	r1, [r7, #4]
 8003b76:	6809      	ldr	r1, [r1, #0]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	69da      	ldr	r2, [r3, #28]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	430a      	orrs	r2, r1
 8003b96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003ba2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	6911      	ldr	r1, [r2, #16]
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	68d2      	ldr	r2, [r2, #12]
 8003bae:	4311      	orrs	r1, r2
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6812      	ldr	r2, [r2, #0]
 8003bb4:	430b      	orrs	r3, r1
 8003bb6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	695a      	ldr	r2, [r3, #20]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f042 0201 	orr.w	r2, r2, #1
 8003be2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2220      	movs	r2, #32
 8003bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	000186a0 	.word	0x000186a0
 8003c10:	001e847f 	.word	0x001e847f
 8003c14:	003d08ff 	.word	0x003d08ff
 8003c18:	431bde83 	.word	0x431bde83
 8003c1c:	10624dd3 	.word	0x10624dd3

08003c20 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b088      	sub	sp, #32
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e128      	b.n	8003e84 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d109      	bne.n	8003c52 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a90      	ldr	r2, [pc, #576]	; (8003e8c <HAL_I2S_Init+0x26c>)
 8003c4a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f7fd f99b 	bl	8000f88 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2202      	movs	r2, #2
 8003c56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	69db      	ldr	r3, [r3, #28]
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6812      	ldr	r2, [r2, #0]
 8003c64:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003c68:	f023 030f 	bic.w	r3, r3, #15
 8003c6c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2202      	movs	r2, #2
 8003c74:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d060      	beq.n	8003d40 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d102      	bne.n	8003c8c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003c86:	2310      	movs	r3, #16
 8003c88:	617b      	str	r3, [r7, #20]
 8003c8a:	e001      	b.n	8003c90 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003c8c:	2320      	movs	r3, #32
 8003c8e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	2b20      	cmp	r3, #32
 8003c96:	d802      	bhi.n	8003c9e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	005b      	lsls	r3, r3, #1
 8003c9c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003c9e:	2001      	movs	r0, #1
 8003ca0:	f001 fa0a 	bl	80050b8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003ca4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cae:	d125      	bne.n	8003cfc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d010      	beq.n	8003cda <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	4413      	add	r3, r2
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	461a      	mov	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd4:	3305      	adds	r3, #5
 8003cd6:	613b      	str	r3, [r7, #16]
 8003cd8:	e01f      	b.n	8003d1a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	00db      	lsls	r3, r3, #3
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	4413      	add	r3, r2
 8003cea:	005b      	lsls	r3, r3, #1
 8003cec:	461a      	mov	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf6:	3305      	adds	r3, #5
 8003cf8:	613b      	str	r3, [r7, #16]
 8003cfa:	e00e      	b.n	8003d1a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d04:	4613      	mov	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4413      	add	r3, r2
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d16:	3305      	adds	r3, #5
 8003d18:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	4a5c      	ldr	r2, [pc, #368]	; (8003e90 <HAL_I2S_Init+0x270>)
 8003d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d22:	08db      	lsrs	r3, r3, #3
 8003d24:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	085b      	lsrs	r3, r3, #1
 8003d36:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	021b      	lsls	r3, r3, #8
 8003d3c:	61bb      	str	r3, [r7, #24]
 8003d3e:	e003      	b.n	8003d48 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003d40:	2302      	movs	r3, #2
 8003d42:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003d44:	2300      	movs	r3, #0
 8003d46:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d902      	bls.n	8003d54 <HAL_I2S_Init+0x134>
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	2bff      	cmp	r3, #255	; 0xff
 8003d52:	d907      	bls.n	8003d64 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d58:	f043 0210 	orr.w	r2, r3, #16
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e08f      	b.n	8003e84 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	691a      	ldr	r2, [r3, #16]
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	ea42 0103 	orr.w	r1, r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	69fa      	ldr	r2, [r7, #28]
 8003d74:	430a      	orrs	r2, r1
 8003d76:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003d82:	f023 030f 	bic.w	r3, r3, #15
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	6851      	ldr	r1, [r2, #4]
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	6892      	ldr	r2, [r2, #8]
 8003d8e:	4311      	orrs	r1, r2
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	68d2      	ldr	r2, [r2, #12]
 8003d94:	4311      	orrs	r1, r2
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	6992      	ldr	r2, [r2, #24]
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	431a      	orrs	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003da6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d161      	bne.n	8003e74 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a38      	ldr	r2, [pc, #224]	; (8003e94 <HAL_I2S_Init+0x274>)
 8003db4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a37      	ldr	r2, [pc, #220]	; (8003e98 <HAL_I2S_Init+0x278>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d101      	bne.n	8003dc4 <HAL_I2S_Init+0x1a4>
 8003dc0:	4b36      	ldr	r3, [pc, #216]	; (8003e9c <HAL_I2S_Init+0x27c>)
 8003dc2:	e001      	b.n	8003dc8 <HAL_I2S_Init+0x1a8>
 8003dc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	6812      	ldr	r2, [r2, #0]
 8003dce:	4932      	ldr	r1, [pc, #200]	; (8003e98 <HAL_I2S_Init+0x278>)
 8003dd0:	428a      	cmp	r2, r1
 8003dd2:	d101      	bne.n	8003dd8 <HAL_I2S_Init+0x1b8>
 8003dd4:	4a31      	ldr	r2, [pc, #196]	; (8003e9c <HAL_I2S_Init+0x27c>)
 8003dd6:	e001      	b.n	8003ddc <HAL_I2S_Init+0x1bc>
 8003dd8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003ddc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003de0:	f023 030f 	bic.w	r3, r3, #15
 8003de4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a2b      	ldr	r2, [pc, #172]	; (8003e98 <HAL_I2S_Init+0x278>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d101      	bne.n	8003df4 <HAL_I2S_Init+0x1d4>
 8003df0:	4b2a      	ldr	r3, [pc, #168]	; (8003e9c <HAL_I2S_Init+0x27c>)
 8003df2:	e001      	b.n	8003df8 <HAL_I2S_Init+0x1d8>
 8003df4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003df8:	2202      	movs	r2, #2
 8003dfa:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a25      	ldr	r2, [pc, #148]	; (8003e98 <HAL_I2S_Init+0x278>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d101      	bne.n	8003e0a <HAL_I2S_Init+0x1ea>
 8003e06:	4b25      	ldr	r3, [pc, #148]	; (8003e9c <HAL_I2S_Init+0x27c>)
 8003e08:	e001      	b.n	8003e0e <HAL_I2S_Init+0x1ee>
 8003e0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e0e:	69db      	ldr	r3, [r3, #28]
 8003e10:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e1a:	d003      	beq.n	8003e24 <HAL_I2S_Init+0x204>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d103      	bne.n	8003e2c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003e24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e28:	613b      	str	r3, [r7, #16]
 8003e2a:	e001      	b.n	8003e30 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003e44:	4313      	orrs	r3, r2
 8003e46:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	897b      	ldrh	r3, [r7, #10]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003e5c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a0d      	ldr	r2, [pc, #52]	; (8003e98 <HAL_I2S_Init+0x278>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d101      	bne.n	8003e6c <HAL_I2S_Init+0x24c>
 8003e68:	4b0c      	ldr	r3, [pc, #48]	; (8003e9c <HAL_I2S_Init+0x27c>)
 8003e6a:	e001      	b.n	8003e70 <HAL_I2S_Init+0x250>
 8003e6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e70:	897a      	ldrh	r2, [r7, #10]
 8003e72:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3720      	adds	r7, #32
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	08003f97 	.word	0x08003f97
 8003e90:	cccccccd 	.word	0xcccccccd
 8003e94:	080040ad 	.word	0x080040ad
 8003e98:	40003800 	.word	0x40003800
 8003e9c:	40003400 	.word	0x40003400

08003ea0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee8:	881a      	ldrh	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef4:	1c9a      	adds	r2, r3, #2
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	3b01      	subs	r3, #1
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10e      	bne.n	8003f30 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	685a      	ldr	r2, [r3, #4]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f20:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7ff ffb8 	bl	8003ea0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003f30:	bf00      	nop
 8003f32:	3708      	adds	r7, #8
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68da      	ldr	r2, [r3, #12]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4a:	b292      	uxth	r2, r2
 8003f4c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f52:	1c9a      	adds	r2, r3, #2
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d10e      	bne.n	8003f8e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685a      	ldr	r2, [r3, #4]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f7e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f7ff ff93 	bl	8003eb4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003f8e:	bf00      	nop
 8003f90:	3708      	adds	r7, #8
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b086      	sub	sp, #24
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	d13a      	bne.n	8004028 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	f003 0301 	and.w	r3, r3, #1
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d109      	bne.n	8003fd0 <I2S_IRQHandler+0x3a>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc6:	2b40      	cmp	r3, #64	; 0x40
 8003fc8:	d102      	bne.n	8003fd0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7ff ffb4 	bl	8003f38 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd6:	2b40      	cmp	r3, #64	; 0x40
 8003fd8:	d126      	bne.n	8004028 <I2S_IRQHandler+0x92>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f003 0320 	and.w	r3, r3, #32
 8003fe4:	2b20      	cmp	r3, #32
 8003fe6:	d11f      	bne.n	8004028 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	685a      	ldr	r2, [r3, #4]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ff6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	613b      	str	r3, [r7, #16]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	613b      	str	r3, [r7, #16]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	613b      	str	r3, [r7, #16]
 800400c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401a:	f043 0202 	orr.w	r2, r3, #2
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7ff ff50 	bl	8003ec8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b03      	cmp	r3, #3
 8004032:	d136      	bne.n	80040a2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b02      	cmp	r3, #2
 800403c:	d109      	bne.n	8004052 <I2S_IRQHandler+0xbc>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004048:	2b80      	cmp	r3, #128	; 0x80
 800404a:	d102      	bne.n	8004052 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f7ff ff45 	bl	8003edc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	f003 0308 	and.w	r3, r3, #8
 8004058:	2b08      	cmp	r3, #8
 800405a:	d122      	bne.n	80040a2 <I2S_IRQHandler+0x10c>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f003 0320 	and.w	r3, r3, #32
 8004066:	2b20      	cmp	r3, #32
 8004068:	d11b      	bne.n	80040a2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004078:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800407a:	2300      	movs	r3, #0
 800407c:	60fb      	str	r3, [r7, #12]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	60fb      	str	r3, [r7, #12]
 8004086:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004094:	f043 0204 	orr.w	r2, r3, #4
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f7ff ff13 	bl	8003ec8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040a2:	bf00      	nop
 80040a4:	3718      	adds	r7, #24
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
	...

080040ac <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b088      	sub	sp, #32
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a92      	ldr	r2, [pc, #584]	; (800430c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d101      	bne.n	80040ca <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80040c6:	4b92      	ldr	r3, [pc, #584]	; (8004310 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040c8:	e001      	b.n	80040ce <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80040ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a8b      	ldr	r2, [pc, #556]	; (800430c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d101      	bne.n	80040e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80040e4:	4b8a      	ldr	r3, [pc, #552]	; (8004310 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040e6:	e001      	b.n	80040ec <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80040e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040f8:	d004      	beq.n	8004104 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f040 8099 	bne.w	8004236 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b02      	cmp	r3, #2
 800410c:	d107      	bne.n	800411e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004114:	2b00      	cmp	r3, #0
 8004116:	d002      	beq.n	800411e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f000 f925 	bl	8004368 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	2b01      	cmp	r3, #1
 8004126:	d107      	bne.n	8004138 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800412e:	2b00      	cmp	r3, #0
 8004130:	d002      	beq.n	8004138 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f9c8 	bl	80044c8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800413e:	2b40      	cmp	r3, #64	; 0x40
 8004140:	d13a      	bne.n	80041b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	f003 0320 	and.w	r3, r3, #32
 8004148:	2b00      	cmp	r3, #0
 800414a:	d035      	beq.n	80041b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a6e      	ldr	r2, [pc, #440]	; (800430c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d101      	bne.n	800415a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004156:	4b6e      	ldr	r3, [pc, #440]	; (8004310 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004158:	e001      	b.n	800415e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800415a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4969      	ldr	r1, [pc, #420]	; (800430c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004166:	428b      	cmp	r3, r1
 8004168:	d101      	bne.n	800416e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800416a:	4b69      	ldr	r3, [pc, #420]	; (8004310 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800416c:	e001      	b.n	8004172 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800416e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004172:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004176:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	685a      	ldr	r2, [r3, #4]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004186:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004188:	2300      	movs	r3, #0
 800418a:	60fb      	str	r3, [r7, #12]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	60fb      	str	r3, [r7, #12]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2201      	movs	r2, #1
 80041a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041aa:	f043 0202 	orr.w	r2, r3, #2
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f7ff fe88 	bl	8003ec8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	f003 0308 	and.w	r3, r3, #8
 80041be:	2b08      	cmp	r3, #8
 80041c0:	f040 80c3 	bne.w	800434a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f003 0320 	and.w	r3, r3, #32
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f000 80bd 	beq.w	800434a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	685a      	ldr	r2, [r3, #4]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80041de:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a49      	ldr	r2, [pc, #292]	; (800430c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d101      	bne.n	80041ee <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80041ea:	4b49      	ldr	r3, [pc, #292]	; (8004310 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041ec:	e001      	b.n	80041f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80041ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041f2:	685a      	ldr	r2, [r3, #4]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4944      	ldr	r1, [pc, #272]	; (800430c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041fa:	428b      	cmp	r3, r1
 80041fc:	d101      	bne.n	8004202 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80041fe:	4b44      	ldr	r3, [pc, #272]	; (8004310 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004200:	e001      	b.n	8004206 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004202:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004206:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800420a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800420c:	2300      	movs	r3, #0
 800420e:	60bb      	str	r3, [r7, #8]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	60bb      	str	r3, [r7, #8]
 8004218:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2201      	movs	r2, #1
 800421e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004226:	f043 0204 	orr.w	r2, r3, #4
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f7ff fe4a 	bl	8003ec8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004234:	e089      	b.n	800434a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b02      	cmp	r3, #2
 800423e:	d107      	bne.n	8004250 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004246:	2b00      	cmp	r3, #0
 8004248:	d002      	beq.n	8004250 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 f8be 	bl	80043cc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b01      	cmp	r3, #1
 8004258:	d107      	bne.n	800426a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004260:	2b00      	cmp	r3, #0
 8004262:	d002      	beq.n	800426a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 f8fd 	bl	8004464 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004270:	2b40      	cmp	r3, #64	; 0x40
 8004272:	d12f      	bne.n	80042d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	f003 0320 	and.w	r3, r3, #32
 800427a:	2b00      	cmp	r3, #0
 800427c:	d02a      	beq.n	80042d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	685a      	ldr	r2, [r3, #4]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800428c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a1e      	ldr	r2, [pc, #120]	; (800430c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d101      	bne.n	800429c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004298:	4b1d      	ldr	r3, [pc, #116]	; (8004310 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800429a:	e001      	b.n	80042a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800429c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042a0:	685a      	ldr	r2, [r3, #4]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4919      	ldr	r1, [pc, #100]	; (800430c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042a8:	428b      	cmp	r3, r1
 80042aa:	d101      	bne.n	80042b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80042ac:	4b18      	ldr	r3, [pc, #96]	; (8004310 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042ae:	e001      	b.n	80042b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80042b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80042b8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c6:	f043 0202 	orr.w	r2, r3, #2
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f7ff fdfa 	bl	8003ec8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	f003 0308 	and.w	r3, r3, #8
 80042da:	2b08      	cmp	r3, #8
 80042dc:	d136      	bne.n	800434c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	f003 0320 	and.w	r3, r3, #32
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d031      	beq.n	800434c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a07      	ldr	r2, [pc, #28]	; (800430c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d101      	bne.n	80042f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80042f2:	4b07      	ldr	r3, [pc, #28]	; (8004310 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042f4:	e001      	b.n	80042fa <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80042f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042fa:	685a      	ldr	r2, [r3, #4]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4902      	ldr	r1, [pc, #8]	; (800430c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004302:	428b      	cmp	r3, r1
 8004304:	d106      	bne.n	8004314 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004306:	4b02      	ldr	r3, [pc, #8]	; (8004310 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004308:	e006      	b.n	8004318 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800430a:	bf00      	nop
 800430c:	40003800 	.word	0x40003800
 8004310:	40003400 	.word	0x40003400
 8004314:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004318:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800431c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	685a      	ldr	r2, [r3, #4]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800432c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2201      	movs	r2, #1
 8004332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433a:	f043 0204 	orr.w	r2, r3, #4
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7ff fdc0 	bl	8003ec8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004348:	e000      	b.n	800434c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800434a:	bf00      	nop
}
 800434c:	bf00      	nop
 800434e:	3720      	adds	r7, #32
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004374:	1c99      	adds	r1, r3, #2
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	6251      	str	r1, [r2, #36]	; 0x24
 800437a:	881a      	ldrh	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004386:	b29b      	uxth	r3, r3
 8004388:	3b01      	subs	r3, #1
 800438a:	b29a      	uxth	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004394:	b29b      	uxth	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d113      	bne.n	80043c2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80043a8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d106      	bne.n	80043c2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f7ff ffc9 	bl	8004354 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80043c2:	bf00      	nop
 80043c4:	3708      	adds	r7, #8
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
	...

080043cc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d8:	1c99      	adds	r1, r3, #2
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	6251      	str	r1, [r2, #36]	; 0x24
 80043de:	8819      	ldrh	r1, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a1d      	ldr	r2, [pc, #116]	; (800445c <I2SEx_TxISR_I2SExt+0x90>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d101      	bne.n	80043ee <I2SEx_TxISR_I2SExt+0x22>
 80043ea:	4b1d      	ldr	r3, [pc, #116]	; (8004460 <I2SEx_TxISR_I2SExt+0x94>)
 80043ec:	e001      	b.n	80043f2 <I2SEx_TxISR_I2SExt+0x26>
 80043ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043f2:	460a      	mov	r2, r1
 80043f4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	3b01      	subs	r3, #1
 80043fe:	b29a      	uxth	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004408:	b29b      	uxth	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	d121      	bne.n	8004452 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a12      	ldr	r2, [pc, #72]	; (800445c <I2SEx_TxISR_I2SExt+0x90>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d101      	bne.n	800441c <I2SEx_TxISR_I2SExt+0x50>
 8004418:	4b11      	ldr	r3, [pc, #68]	; (8004460 <I2SEx_TxISR_I2SExt+0x94>)
 800441a:	e001      	b.n	8004420 <I2SEx_TxISR_I2SExt+0x54>
 800441c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004420:	685a      	ldr	r2, [r3, #4]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	490d      	ldr	r1, [pc, #52]	; (800445c <I2SEx_TxISR_I2SExt+0x90>)
 8004428:	428b      	cmp	r3, r1
 800442a:	d101      	bne.n	8004430 <I2SEx_TxISR_I2SExt+0x64>
 800442c:	4b0c      	ldr	r3, [pc, #48]	; (8004460 <I2SEx_TxISR_I2SExt+0x94>)
 800442e:	e001      	b.n	8004434 <I2SEx_TxISR_I2SExt+0x68>
 8004430:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004434:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004438:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800443e:	b29b      	uxth	r3, r3
 8004440:	2b00      	cmp	r3, #0
 8004442:	d106      	bne.n	8004452 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f7ff ff81 	bl	8004354 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004452:	bf00      	nop
 8004454:	3708      	adds	r7, #8
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	40003800 	.word	0x40003800
 8004460:	40003400 	.word	0x40003400

08004464 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68d8      	ldr	r0, [r3, #12]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004476:	1c99      	adds	r1, r3, #2
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800447c:	b282      	uxth	r2, r0
 800447e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004484:	b29b      	uxth	r3, r3
 8004486:	3b01      	subs	r3, #1
 8004488:	b29a      	uxth	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004492:	b29b      	uxth	r3, r3
 8004494:	2b00      	cmp	r3, #0
 8004496:	d113      	bne.n	80044c0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	685a      	ldr	r2, [r3, #4]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80044a6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d106      	bne.n	80044c0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2201      	movs	r2, #1
 80044b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f7ff ff4a 	bl	8004354 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80044c0:	bf00      	nop
 80044c2:	3708      	adds	r7, #8
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a20      	ldr	r2, [pc, #128]	; (8004558 <I2SEx_RxISR_I2SExt+0x90>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d101      	bne.n	80044de <I2SEx_RxISR_I2SExt+0x16>
 80044da:	4b20      	ldr	r3, [pc, #128]	; (800455c <I2SEx_RxISR_I2SExt+0x94>)
 80044dc:	e001      	b.n	80044e2 <I2SEx_RxISR_I2SExt+0x1a>
 80044de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044e2:	68d8      	ldr	r0, [r3, #12]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e8:	1c99      	adds	r1, r3, #2
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	62d1      	str	r1, [r2, #44]	; 0x2c
 80044ee:	b282      	uxth	r2, r0
 80044f0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	3b01      	subs	r3, #1
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004504:	b29b      	uxth	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d121      	bne.n	800454e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a12      	ldr	r2, [pc, #72]	; (8004558 <I2SEx_RxISR_I2SExt+0x90>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d101      	bne.n	8004518 <I2SEx_RxISR_I2SExt+0x50>
 8004514:	4b11      	ldr	r3, [pc, #68]	; (800455c <I2SEx_RxISR_I2SExt+0x94>)
 8004516:	e001      	b.n	800451c <I2SEx_RxISR_I2SExt+0x54>
 8004518:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	490d      	ldr	r1, [pc, #52]	; (8004558 <I2SEx_RxISR_I2SExt+0x90>)
 8004524:	428b      	cmp	r3, r1
 8004526:	d101      	bne.n	800452c <I2SEx_RxISR_I2SExt+0x64>
 8004528:	4b0c      	ldr	r3, [pc, #48]	; (800455c <I2SEx_RxISR_I2SExt+0x94>)
 800452a:	e001      	b.n	8004530 <I2SEx_RxISR_I2SExt+0x68>
 800452c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004530:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004534:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800453a:	b29b      	uxth	r3, r3
 800453c:	2b00      	cmp	r3, #0
 800453e:	d106      	bne.n	800454e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f7ff ff03 	bl	8004354 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800454e:	bf00      	nop
 8004550:	3708      	adds	r7, #8
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	40003800 	.word	0x40003800
 800455c:	40003400 	.word	0x40003400

08004560 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e267      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	d075      	beq.n	800466a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800457e:	4b88      	ldr	r3, [pc, #544]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f003 030c 	and.w	r3, r3, #12
 8004586:	2b04      	cmp	r3, #4
 8004588:	d00c      	beq.n	80045a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800458a:	4b85      	ldr	r3, [pc, #532]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004592:	2b08      	cmp	r3, #8
 8004594:	d112      	bne.n	80045bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004596:	4b82      	ldr	r3, [pc, #520]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800459e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045a2:	d10b      	bne.n	80045bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045a4:	4b7e      	ldr	r3, [pc, #504]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d05b      	beq.n	8004668 <HAL_RCC_OscConfig+0x108>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d157      	bne.n	8004668 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e242      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045c4:	d106      	bne.n	80045d4 <HAL_RCC_OscConfig+0x74>
 80045c6:	4b76      	ldr	r3, [pc, #472]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a75      	ldr	r2, [pc, #468]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 80045cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045d0:	6013      	str	r3, [r2, #0]
 80045d2:	e01d      	b.n	8004610 <HAL_RCC_OscConfig+0xb0>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045dc:	d10c      	bne.n	80045f8 <HAL_RCC_OscConfig+0x98>
 80045de:	4b70      	ldr	r3, [pc, #448]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a6f      	ldr	r2, [pc, #444]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 80045e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045e8:	6013      	str	r3, [r2, #0]
 80045ea:	4b6d      	ldr	r3, [pc, #436]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a6c      	ldr	r2, [pc, #432]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 80045f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045f4:	6013      	str	r3, [r2, #0]
 80045f6:	e00b      	b.n	8004610 <HAL_RCC_OscConfig+0xb0>
 80045f8:	4b69      	ldr	r3, [pc, #420]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a68      	ldr	r2, [pc, #416]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 80045fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004602:	6013      	str	r3, [r2, #0]
 8004604:	4b66      	ldr	r3, [pc, #408]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a65      	ldr	r2, [pc, #404]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 800460a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800460e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d013      	beq.n	8004640 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004618:	f7fd fad4 	bl	8001bc4 <HAL_GetTick>
 800461c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800461e:	e008      	b.n	8004632 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004620:	f7fd fad0 	bl	8001bc4 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b64      	cmp	r3, #100	; 0x64
 800462c:	d901      	bls.n	8004632 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e207      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004632:	4b5b      	ldr	r3, [pc, #364]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d0f0      	beq.n	8004620 <HAL_RCC_OscConfig+0xc0>
 800463e:	e014      	b.n	800466a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004640:	f7fd fac0 	bl	8001bc4 <HAL_GetTick>
 8004644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004646:	e008      	b.n	800465a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004648:	f7fd fabc 	bl	8001bc4 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b64      	cmp	r3, #100	; 0x64
 8004654:	d901      	bls.n	800465a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e1f3      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800465a:	4b51      	ldr	r3, [pc, #324]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1f0      	bne.n	8004648 <HAL_RCC_OscConfig+0xe8>
 8004666:	e000      	b.n	800466a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004668:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d063      	beq.n	800473e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004676:	4b4a      	ldr	r3, [pc, #296]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f003 030c 	and.w	r3, r3, #12
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00b      	beq.n	800469a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004682:	4b47      	ldr	r3, [pc, #284]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800468a:	2b08      	cmp	r3, #8
 800468c:	d11c      	bne.n	80046c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800468e:	4b44      	ldr	r3, [pc, #272]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d116      	bne.n	80046c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800469a:	4b41      	ldr	r3, [pc, #260]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d005      	beq.n	80046b2 <HAL_RCC_OscConfig+0x152>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d001      	beq.n	80046b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e1c7      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046b2:	4b3b      	ldr	r3, [pc, #236]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	4937      	ldr	r1, [pc, #220]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046c6:	e03a      	b.n	800473e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d020      	beq.n	8004712 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046d0:	4b34      	ldr	r3, [pc, #208]	; (80047a4 <HAL_RCC_OscConfig+0x244>)
 80046d2:	2201      	movs	r2, #1
 80046d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d6:	f7fd fa75 	bl	8001bc4 <HAL_GetTick>
 80046da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046dc:	e008      	b.n	80046f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046de:	f7fd fa71 	bl	8001bc4 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d901      	bls.n	80046f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e1a8      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046f0:	4b2b      	ldr	r3, [pc, #172]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d0f0      	beq.n	80046de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046fc:	4b28      	ldr	r3, [pc, #160]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	00db      	lsls	r3, r3, #3
 800470a:	4925      	ldr	r1, [pc, #148]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 800470c:	4313      	orrs	r3, r2
 800470e:	600b      	str	r3, [r1, #0]
 8004710:	e015      	b.n	800473e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004712:	4b24      	ldr	r3, [pc, #144]	; (80047a4 <HAL_RCC_OscConfig+0x244>)
 8004714:	2200      	movs	r2, #0
 8004716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004718:	f7fd fa54 	bl	8001bc4 <HAL_GetTick>
 800471c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800471e:	e008      	b.n	8004732 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004720:	f7fd fa50 	bl	8001bc4 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b02      	cmp	r3, #2
 800472c:	d901      	bls.n	8004732 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e187      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004732:	4b1b      	ldr	r3, [pc, #108]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1f0      	bne.n	8004720 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0308 	and.w	r3, r3, #8
 8004746:	2b00      	cmp	r3, #0
 8004748:	d036      	beq.n	80047b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d016      	beq.n	8004780 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004752:	4b15      	ldr	r3, [pc, #84]	; (80047a8 <HAL_RCC_OscConfig+0x248>)
 8004754:	2201      	movs	r2, #1
 8004756:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004758:	f7fd fa34 	bl	8001bc4 <HAL_GetTick>
 800475c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800475e:	e008      	b.n	8004772 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004760:	f7fd fa30 	bl	8001bc4 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b02      	cmp	r3, #2
 800476c:	d901      	bls.n	8004772 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e167      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004772:	4b0b      	ldr	r3, [pc, #44]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 8004774:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004776:	f003 0302 	and.w	r3, r3, #2
 800477a:	2b00      	cmp	r3, #0
 800477c:	d0f0      	beq.n	8004760 <HAL_RCC_OscConfig+0x200>
 800477e:	e01b      	b.n	80047b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004780:	4b09      	ldr	r3, [pc, #36]	; (80047a8 <HAL_RCC_OscConfig+0x248>)
 8004782:	2200      	movs	r2, #0
 8004784:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004786:	f7fd fa1d 	bl	8001bc4 <HAL_GetTick>
 800478a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800478c:	e00e      	b.n	80047ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800478e:	f7fd fa19 	bl	8001bc4 <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b02      	cmp	r3, #2
 800479a:	d907      	bls.n	80047ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e150      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
 80047a0:	40023800 	.word	0x40023800
 80047a4:	42470000 	.word	0x42470000
 80047a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047ac:	4b88      	ldr	r3, [pc, #544]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 80047ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047b0:	f003 0302 	and.w	r3, r3, #2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1ea      	bne.n	800478e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0304 	and.w	r3, r3, #4
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f000 8097 	beq.w	80048f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047c6:	2300      	movs	r3, #0
 80047c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047ca:	4b81      	ldr	r3, [pc, #516]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 80047cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d10f      	bne.n	80047f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047d6:	2300      	movs	r3, #0
 80047d8:	60bb      	str	r3, [r7, #8]
 80047da:	4b7d      	ldr	r3, [pc, #500]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 80047dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047de:	4a7c      	ldr	r2, [pc, #496]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 80047e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047e4:	6413      	str	r3, [r2, #64]	; 0x40
 80047e6:	4b7a      	ldr	r3, [pc, #488]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ee:	60bb      	str	r3, [r7, #8]
 80047f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047f2:	2301      	movs	r3, #1
 80047f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047f6:	4b77      	ldr	r3, [pc, #476]	; (80049d4 <HAL_RCC_OscConfig+0x474>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d118      	bne.n	8004834 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004802:	4b74      	ldr	r3, [pc, #464]	; (80049d4 <HAL_RCC_OscConfig+0x474>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a73      	ldr	r2, [pc, #460]	; (80049d4 <HAL_RCC_OscConfig+0x474>)
 8004808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800480c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800480e:	f7fd f9d9 	bl	8001bc4 <HAL_GetTick>
 8004812:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004814:	e008      	b.n	8004828 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004816:	f7fd f9d5 	bl	8001bc4 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	2b02      	cmp	r3, #2
 8004822:	d901      	bls.n	8004828 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e10c      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004828:	4b6a      	ldr	r3, [pc, #424]	; (80049d4 <HAL_RCC_OscConfig+0x474>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004830:	2b00      	cmp	r3, #0
 8004832:	d0f0      	beq.n	8004816 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d106      	bne.n	800484a <HAL_RCC_OscConfig+0x2ea>
 800483c:	4b64      	ldr	r3, [pc, #400]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 800483e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004840:	4a63      	ldr	r2, [pc, #396]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 8004842:	f043 0301 	orr.w	r3, r3, #1
 8004846:	6713      	str	r3, [r2, #112]	; 0x70
 8004848:	e01c      	b.n	8004884 <HAL_RCC_OscConfig+0x324>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	2b05      	cmp	r3, #5
 8004850:	d10c      	bne.n	800486c <HAL_RCC_OscConfig+0x30c>
 8004852:	4b5f      	ldr	r3, [pc, #380]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 8004854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004856:	4a5e      	ldr	r2, [pc, #376]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 8004858:	f043 0304 	orr.w	r3, r3, #4
 800485c:	6713      	str	r3, [r2, #112]	; 0x70
 800485e:	4b5c      	ldr	r3, [pc, #368]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 8004860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004862:	4a5b      	ldr	r2, [pc, #364]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 8004864:	f043 0301 	orr.w	r3, r3, #1
 8004868:	6713      	str	r3, [r2, #112]	; 0x70
 800486a:	e00b      	b.n	8004884 <HAL_RCC_OscConfig+0x324>
 800486c:	4b58      	ldr	r3, [pc, #352]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 800486e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004870:	4a57      	ldr	r2, [pc, #348]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 8004872:	f023 0301 	bic.w	r3, r3, #1
 8004876:	6713      	str	r3, [r2, #112]	; 0x70
 8004878:	4b55      	ldr	r3, [pc, #340]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 800487a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800487c:	4a54      	ldr	r2, [pc, #336]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 800487e:	f023 0304 	bic.w	r3, r3, #4
 8004882:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d015      	beq.n	80048b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800488c:	f7fd f99a 	bl	8001bc4 <HAL_GetTick>
 8004890:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004892:	e00a      	b.n	80048aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004894:	f7fd f996 	bl	8001bc4 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	f241 3288 	movw	r2, #5000	; 0x1388
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e0cb      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048aa:	4b49      	ldr	r3, [pc, #292]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 80048ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ae:	f003 0302 	and.w	r3, r3, #2
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d0ee      	beq.n	8004894 <HAL_RCC_OscConfig+0x334>
 80048b6:	e014      	b.n	80048e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048b8:	f7fd f984 	bl	8001bc4 <HAL_GetTick>
 80048bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048be:	e00a      	b.n	80048d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048c0:	f7fd f980 	bl	8001bc4 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e0b5      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048d6:	4b3e      	ldr	r3, [pc, #248]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 80048d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1ee      	bne.n	80048c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048e2:	7dfb      	ldrb	r3, [r7, #23]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d105      	bne.n	80048f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048e8:	4b39      	ldr	r3, [pc, #228]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 80048ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ec:	4a38      	ldr	r2, [pc, #224]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 80048ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f000 80a1 	beq.w	8004a40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048fe:	4b34      	ldr	r3, [pc, #208]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f003 030c 	and.w	r3, r3, #12
 8004906:	2b08      	cmp	r3, #8
 8004908:	d05c      	beq.n	80049c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	2b02      	cmp	r3, #2
 8004910:	d141      	bne.n	8004996 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004912:	4b31      	ldr	r3, [pc, #196]	; (80049d8 <HAL_RCC_OscConfig+0x478>)
 8004914:	2200      	movs	r2, #0
 8004916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004918:	f7fd f954 	bl	8001bc4 <HAL_GetTick>
 800491c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800491e:	e008      	b.n	8004932 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004920:	f7fd f950 	bl	8001bc4 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b02      	cmp	r3, #2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e087      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004932:	4b27      	ldr	r3, [pc, #156]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1f0      	bne.n	8004920 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	69da      	ldr	r2, [r3, #28]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	431a      	orrs	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494c:	019b      	lsls	r3, r3, #6
 800494e:	431a      	orrs	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004954:	085b      	lsrs	r3, r3, #1
 8004956:	3b01      	subs	r3, #1
 8004958:	041b      	lsls	r3, r3, #16
 800495a:	431a      	orrs	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004960:	061b      	lsls	r3, r3, #24
 8004962:	491b      	ldr	r1, [pc, #108]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 8004964:	4313      	orrs	r3, r2
 8004966:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004968:	4b1b      	ldr	r3, [pc, #108]	; (80049d8 <HAL_RCC_OscConfig+0x478>)
 800496a:	2201      	movs	r2, #1
 800496c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800496e:	f7fd f929 	bl	8001bc4 <HAL_GetTick>
 8004972:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004974:	e008      	b.n	8004988 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004976:	f7fd f925 	bl	8001bc4 <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	2b02      	cmp	r3, #2
 8004982:	d901      	bls.n	8004988 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e05c      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004988:	4b11      	ldr	r3, [pc, #68]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d0f0      	beq.n	8004976 <HAL_RCC_OscConfig+0x416>
 8004994:	e054      	b.n	8004a40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004996:	4b10      	ldr	r3, [pc, #64]	; (80049d8 <HAL_RCC_OscConfig+0x478>)
 8004998:	2200      	movs	r2, #0
 800499a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800499c:	f7fd f912 	bl	8001bc4 <HAL_GetTick>
 80049a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049a2:	e008      	b.n	80049b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049a4:	f7fd f90e 	bl	8001bc4 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e045      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049b6:	4b06      	ldr	r3, [pc, #24]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1f0      	bne.n	80049a4 <HAL_RCC_OscConfig+0x444>
 80049c2:	e03d      	b.n	8004a40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d107      	bne.n	80049dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e038      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
 80049d0:	40023800 	.word	0x40023800
 80049d4:	40007000 	.word	0x40007000
 80049d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049dc:	4b1b      	ldr	r3, [pc, #108]	; (8004a4c <HAL_RCC_OscConfig+0x4ec>)
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	699b      	ldr	r3, [r3, #24]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d028      	beq.n	8004a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d121      	bne.n	8004a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d11a      	bne.n	8004a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d111      	bne.n	8004a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a22:	085b      	lsrs	r3, r3, #1
 8004a24:	3b01      	subs	r3, #1
 8004a26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d107      	bne.n	8004a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d001      	beq.n	8004a40 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e000      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3718      	adds	r7, #24
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	40023800 	.word	0x40023800

08004a50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d101      	bne.n	8004a64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e0cc      	b.n	8004bfe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a64:	4b68      	ldr	r3, [pc, #416]	; (8004c08 <HAL_RCC_ClockConfig+0x1b8>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0307 	and.w	r3, r3, #7
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d90c      	bls.n	8004a8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a72:	4b65      	ldr	r3, [pc, #404]	; (8004c08 <HAL_RCC_ClockConfig+0x1b8>)
 8004a74:	683a      	ldr	r2, [r7, #0]
 8004a76:	b2d2      	uxtb	r2, r2
 8004a78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a7a:	4b63      	ldr	r3, [pc, #396]	; (8004c08 <HAL_RCC_ClockConfig+0x1b8>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0307 	and.w	r3, r3, #7
 8004a82:	683a      	ldr	r2, [r7, #0]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d001      	beq.n	8004a8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e0b8      	b.n	8004bfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0302 	and.w	r3, r3, #2
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d020      	beq.n	8004ada <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0304 	and.w	r3, r3, #4
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d005      	beq.n	8004ab0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004aa4:	4b59      	ldr	r3, [pc, #356]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	4a58      	ldr	r2, [pc, #352]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004aaa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004aae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0308 	and.w	r3, r3, #8
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d005      	beq.n	8004ac8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004abc:	4b53      	ldr	r3, [pc, #332]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	4a52      	ldr	r2, [pc, #328]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004ac2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ac6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ac8:	4b50      	ldr	r3, [pc, #320]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	494d      	ldr	r1, [pc, #308]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d044      	beq.n	8004b70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d107      	bne.n	8004afe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aee:	4b47      	ldr	r3, [pc, #284]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d119      	bne.n	8004b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e07f      	b.n	8004bfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d003      	beq.n	8004b0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b0a:	2b03      	cmp	r3, #3
 8004b0c:	d107      	bne.n	8004b1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b0e:	4b3f      	ldr	r3, [pc, #252]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d109      	bne.n	8004b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e06f      	b.n	8004bfe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b1e:	4b3b      	ldr	r3, [pc, #236]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e067      	b.n	8004bfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b2e:	4b37      	ldr	r3, [pc, #220]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f023 0203 	bic.w	r2, r3, #3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	4934      	ldr	r1, [pc, #208]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b40:	f7fd f840 	bl	8001bc4 <HAL_GetTick>
 8004b44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b46:	e00a      	b.n	8004b5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b48:	f7fd f83c 	bl	8001bc4 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d901      	bls.n	8004b5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e04f      	b.n	8004bfe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b5e:	4b2b      	ldr	r3, [pc, #172]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f003 020c 	and.w	r2, r3, #12
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d1eb      	bne.n	8004b48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b70:	4b25      	ldr	r3, [pc, #148]	; (8004c08 <HAL_RCC_ClockConfig+0x1b8>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0307 	and.w	r3, r3, #7
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d20c      	bcs.n	8004b98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b7e:	4b22      	ldr	r3, [pc, #136]	; (8004c08 <HAL_RCC_ClockConfig+0x1b8>)
 8004b80:	683a      	ldr	r2, [r7, #0]
 8004b82:	b2d2      	uxtb	r2, r2
 8004b84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b86:	4b20      	ldr	r3, [pc, #128]	; (8004c08 <HAL_RCC_ClockConfig+0x1b8>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0307 	and.w	r3, r3, #7
 8004b8e:	683a      	ldr	r2, [r7, #0]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d001      	beq.n	8004b98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e032      	b.n	8004bfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0304 	and.w	r3, r3, #4
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d008      	beq.n	8004bb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ba4:	4b19      	ldr	r3, [pc, #100]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	4916      	ldr	r1, [pc, #88]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0308 	and.w	r3, r3, #8
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d009      	beq.n	8004bd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bc2:	4b12      	ldr	r3, [pc, #72]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	00db      	lsls	r3, r3, #3
 8004bd0:	490e      	ldr	r1, [pc, #56]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004bd6:	f000 f821 	bl	8004c1c <HAL_RCC_GetSysClockFreq>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	4b0b      	ldr	r3, [pc, #44]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	091b      	lsrs	r3, r3, #4
 8004be2:	f003 030f 	and.w	r3, r3, #15
 8004be6:	490a      	ldr	r1, [pc, #40]	; (8004c10 <HAL_RCC_ClockConfig+0x1c0>)
 8004be8:	5ccb      	ldrb	r3, [r1, r3]
 8004bea:	fa22 f303 	lsr.w	r3, r2, r3
 8004bee:	4a09      	ldr	r2, [pc, #36]	; (8004c14 <HAL_RCC_ClockConfig+0x1c4>)
 8004bf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004bf2:	4b09      	ldr	r3, [pc, #36]	; (8004c18 <HAL_RCC_ClockConfig+0x1c8>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f7fc fb06 	bl	8001208 <HAL_InitTick>

  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	40023c00 	.word	0x40023c00
 8004c0c:	40023800 	.word	0x40023800
 8004c10:	0800daac 	.word	0x0800daac
 8004c14:	20000000 	.word	0x20000000
 8004c18:	20000004 	.word	0x20000004

08004c1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c20:	b094      	sub	sp, #80	; 0x50
 8004c22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c24:	2300      	movs	r3, #0
 8004c26:	647b      	str	r3, [r7, #68]	; 0x44
 8004c28:	2300      	movs	r3, #0
 8004c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004c30:	2300      	movs	r3, #0
 8004c32:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c34:	4b79      	ldr	r3, [pc, #484]	; (8004e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f003 030c 	and.w	r3, r3, #12
 8004c3c:	2b08      	cmp	r3, #8
 8004c3e:	d00d      	beq.n	8004c5c <HAL_RCC_GetSysClockFreq+0x40>
 8004c40:	2b08      	cmp	r3, #8
 8004c42:	f200 80e1 	bhi.w	8004e08 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d002      	beq.n	8004c50 <HAL_RCC_GetSysClockFreq+0x34>
 8004c4a:	2b04      	cmp	r3, #4
 8004c4c:	d003      	beq.n	8004c56 <HAL_RCC_GetSysClockFreq+0x3a>
 8004c4e:	e0db      	b.n	8004e08 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c50:	4b73      	ldr	r3, [pc, #460]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c52:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004c54:	e0db      	b.n	8004e0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c56:	4b73      	ldr	r3, [pc, #460]	; (8004e24 <HAL_RCC_GetSysClockFreq+0x208>)
 8004c58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c5a:	e0d8      	b.n	8004e0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c5c:	4b6f      	ldr	r3, [pc, #444]	; (8004e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c64:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c66:	4b6d      	ldr	r3, [pc, #436]	; (8004e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d063      	beq.n	8004d3a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c72:	4b6a      	ldr	r3, [pc, #424]	; (8004e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	099b      	lsrs	r3, r3, #6
 8004c78:	2200      	movs	r2, #0
 8004c7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c7c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c84:	633b      	str	r3, [r7, #48]	; 0x30
 8004c86:	2300      	movs	r3, #0
 8004c88:	637b      	str	r3, [r7, #52]	; 0x34
 8004c8a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004c8e:	4622      	mov	r2, r4
 8004c90:	462b      	mov	r3, r5
 8004c92:	f04f 0000 	mov.w	r0, #0
 8004c96:	f04f 0100 	mov.w	r1, #0
 8004c9a:	0159      	lsls	r1, r3, #5
 8004c9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ca0:	0150      	lsls	r0, r2, #5
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	4621      	mov	r1, r4
 8004ca8:	1a51      	subs	r1, r2, r1
 8004caa:	6139      	str	r1, [r7, #16]
 8004cac:	4629      	mov	r1, r5
 8004cae:	eb63 0301 	sbc.w	r3, r3, r1
 8004cb2:	617b      	str	r3, [r7, #20]
 8004cb4:	f04f 0200 	mov.w	r2, #0
 8004cb8:	f04f 0300 	mov.w	r3, #0
 8004cbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cc0:	4659      	mov	r1, fp
 8004cc2:	018b      	lsls	r3, r1, #6
 8004cc4:	4651      	mov	r1, sl
 8004cc6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004cca:	4651      	mov	r1, sl
 8004ccc:	018a      	lsls	r2, r1, #6
 8004cce:	4651      	mov	r1, sl
 8004cd0:	ebb2 0801 	subs.w	r8, r2, r1
 8004cd4:	4659      	mov	r1, fp
 8004cd6:	eb63 0901 	sbc.w	r9, r3, r1
 8004cda:	f04f 0200 	mov.w	r2, #0
 8004cde:	f04f 0300 	mov.w	r3, #0
 8004ce2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ce6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cee:	4690      	mov	r8, r2
 8004cf0:	4699      	mov	r9, r3
 8004cf2:	4623      	mov	r3, r4
 8004cf4:	eb18 0303 	adds.w	r3, r8, r3
 8004cf8:	60bb      	str	r3, [r7, #8]
 8004cfa:	462b      	mov	r3, r5
 8004cfc:	eb49 0303 	adc.w	r3, r9, r3
 8004d00:	60fb      	str	r3, [r7, #12]
 8004d02:	f04f 0200 	mov.w	r2, #0
 8004d06:	f04f 0300 	mov.w	r3, #0
 8004d0a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d0e:	4629      	mov	r1, r5
 8004d10:	024b      	lsls	r3, r1, #9
 8004d12:	4621      	mov	r1, r4
 8004d14:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d18:	4621      	mov	r1, r4
 8004d1a:	024a      	lsls	r2, r1, #9
 8004d1c:	4610      	mov	r0, r2
 8004d1e:	4619      	mov	r1, r3
 8004d20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d22:	2200      	movs	r2, #0
 8004d24:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d2c:	f7fb fab0 	bl	8000290 <__aeabi_uldivmod>
 8004d30:	4602      	mov	r2, r0
 8004d32:	460b      	mov	r3, r1
 8004d34:	4613      	mov	r3, r2
 8004d36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d38:	e058      	b.n	8004dec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d3a:	4b38      	ldr	r3, [pc, #224]	; (8004e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	099b      	lsrs	r3, r3, #6
 8004d40:	2200      	movs	r2, #0
 8004d42:	4618      	mov	r0, r3
 8004d44:	4611      	mov	r1, r2
 8004d46:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d4a:	623b      	str	r3, [r7, #32]
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	627b      	str	r3, [r7, #36]	; 0x24
 8004d50:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d54:	4642      	mov	r2, r8
 8004d56:	464b      	mov	r3, r9
 8004d58:	f04f 0000 	mov.w	r0, #0
 8004d5c:	f04f 0100 	mov.w	r1, #0
 8004d60:	0159      	lsls	r1, r3, #5
 8004d62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d66:	0150      	lsls	r0, r2, #5
 8004d68:	4602      	mov	r2, r0
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	4641      	mov	r1, r8
 8004d6e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d72:	4649      	mov	r1, r9
 8004d74:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d78:	f04f 0200 	mov.w	r2, #0
 8004d7c:	f04f 0300 	mov.w	r3, #0
 8004d80:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d84:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d88:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d8c:	ebb2 040a 	subs.w	r4, r2, sl
 8004d90:	eb63 050b 	sbc.w	r5, r3, fp
 8004d94:	f04f 0200 	mov.w	r2, #0
 8004d98:	f04f 0300 	mov.w	r3, #0
 8004d9c:	00eb      	lsls	r3, r5, #3
 8004d9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004da2:	00e2      	lsls	r2, r4, #3
 8004da4:	4614      	mov	r4, r2
 8004da6:	461d      	mov	r5, r3
 8004da8:	4643      	mov	r3, r8
 8004daa:	18e3      	adds	r3, r4, r3
 8004dac:	603b      	str	r3, [r7, #0]
 8004dae:	464b      	mov	r3, r9
 8004db0:	eb45 0303 	adc.w	r3, r5, r3
 8004db4:	607b      	str	r3, [r7, #4]
 8004db6:	f04f 0200 	mov.w	r2, #0
 8004dba:	f04f 0300 	mov.w	r3, #0
 8004dbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004dc2:	4629      	mov	r1, r5
 8004dc4:	028b      	lsls	r3, r1, #10
 8004dc6:	4621      	mov	r1, r4
 8004dc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004dcc:	4621      	mov	r1, r4
 8004dce:	028a      	lsls	r2, r1, #10
 8004dd0:	4610      	mov	r0, r2
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	61bb      	str	r3, [r7, #24]
 8004dda:	61fa      	str	r2, [r7, #28]
 8004ddc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004de0:	f7fb fa56 	bl	8000290 <__aeabi_uldivmod>
 8004de4:	4602      	mov	r2, r0
 8004de6:	460b      	mov	r3, r1
 8004de8:	4613      	mov	r3, r2
 8004dea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004dec:	4b0b      	ldr	r3, [pc, #44]	; (8004e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	0c1b      	lsrs	r3, r3, #16
 8004df2:	f003 0303 	and.w	r3, r3, #3
 8004df6:	3301      	adds	r3, #1
 8004df8:	005b      	lsls	r3, r3, #1
 8004dfa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004dfc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004dfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e06:	e002      	b.n	8004e0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e08:	4b05      	ldr	r3, [pc, #20]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e0a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3750      	adds	r7, #80	; 0x50
 8004e14:	46bd      	mov	sp, r7
 8004e16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e1a:	bf00      	nop
 8004e1c:	40023800 	.word	0x40023800
 8004e20:	00f42400 	.word	0x00f42400
 8004e24:	007a1200 	.word	0x007a1200

08004e28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e2c:	4b03      	ldr	r3, [pc, #12]	; (8004e3c <HAL_RCC_GetHCLKFreq+0x14>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	20000000 	.word	0x20000000

08004e40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e44:	f7ff fff0 	bl	8004e28 <HAL_RCC_GetHCLKFreq>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	4b05      	ldr	r3, [pc, #20]	; (8004e60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	0a9b      	lsrs	r3, r3, #10
 8004e50:	f003 0307 	and.w	r3, r3, #7
 8004e54:	4903      	ldr	r1, [pc, #12]	; (8004e64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e56:	5ccb      	ldrb	r3, [r1, r3]
 8004e58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	40023800 	.word	0x40023800
 8004e64:	0800dabc 	.word	0x0800dabc

08004e68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e6c:	f7ff ffdc 	bl	8004e28 <HAL_RCC_GetHCLKFreq>
 8004e70:	4602      	mov	r2, r0
 8004e72:	4b05      	ldr	r3, [pc, #20]	; (8004e88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	0b5b      	lsrs	r3, r3, #13
 8004e78:	f003 0307 	and.w	r3, r3, #7
 8004e7c:	4903      	ldr	r1, [pc, #12]	; (8004e8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e7e:	5ccb      	ldrb	r3, [r1, r3]
 8004e80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	40023800 	.word	0x40023800
 8004e8c:	0800dabc 	.word	0x0800dabc

08004e90 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	220f      	movs	r2, #15
 8004e9e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004ea0:	4b12      	ldr	r3, [pc, #72]	; (8004eec <HAL_RCC_GetClockConfig+0x5c>)
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f003 0203 	and.w	r2, r3, #3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004eac:	4b0f      	ldr	r3, [pc, #60]	; (8004eec <HAL_RCC_GetClockConfig+0x5c>)
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004eb8:	4b0c      	ldr	r3, [pc, #48]	; (8004eec <HAL_RCC_GetClockConfig+0x5c>)
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004ec4:	4b09      	ldr	r3, [pc, #36]	; (8004eec <HAL_RCC_GetClockConfig+0x5c>)
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	08db      	lsrs	r3, r3, #3
 8004eca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004ed2:	4b07      	ldr	r3, [pc, #28]	; (8004ef0 <HAL_RCC_GetClockConfig+0x60>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0207 	and.w	r2, r3, #7
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	601a      	str	r2, [r3, #0]
}
 8004ede:	bf00      	nop
 8004ee0:	370c      	adds	r7, #12
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	40023800 	.word	0x40023800
 8004ef0:	40023c00 	.word	0x40023c00

08004ef4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004efc:	2300      	movs	r3, #0
 8004efe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004f00:	2300      	movs	r3, #0
 8004f02:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0301 	and.w	r3, r3, #1
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d105      	bne.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d035      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f1c:	4b62      	ldr	r3, [pc, #392]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f22:	f7fc fe4f 	bl	8001bc4 <HAL_GetTick>
 8004f26:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f28:	e008      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f2a:	f7fc fe4b 	bl	8001bc4 <HAL_GetTick>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	d901      	bls.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e0b0      	b.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f3c:	4b5b      	ldr	r3, [pc, #364]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1f0      	bne.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	019a      	lsls	r2, r3, #6
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	071b      	lsls	r3, r3, #28
 8004f54:	4955      	ldr	r1, [pc, #340]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f5c:	4b52      	ldr	r3, [pc, #328]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004f5e:	2201      	movs	r2, #1
 8004f60:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f62:	f7fc fe2f 	bl	8001bc4 <HAL_GetTick>
 8004f66:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f68:	e008      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f6a:	f7fc fe2b 	bl	8001bc4 <HAL_GetTick>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d901      	bls.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e090      	b.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f7c:	4b4b      	ldr	r3, [pc, #300]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d0f0      	beq.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0302 	and.w	r3, r3, #2
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	f000 8083 	beq.w	800509c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f96:	2300      	movs	r3, #0
 8004f98:	60fb      	str	r3, [r7, #12]
 8004f9a:	4b44      	ldr	r3, [pc, #272]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9e:	4a43      	ldr	r2, [pc, #268]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8004fa6:	4b41      	ldr	r3, [pc, #260]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fae:	60fb      	str	r3, [r7, #12]
 8004fb0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004fb2:	4b3f      	ldr	r3, [pc, #252]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a3e      	ldr	r2, [pc, #248]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fbc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004fbe:	f7fc fe01 	bl	8001bc4 <HAL_GetTick>
 8004fc2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004fc4:	e008      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004fc6:	f7fc fdfd 	bl	8001bc4 <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d901      	bls.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e062      	b.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004fd8:	4b35      	ldr	r3, [pc, #212]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d0f0      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004fe4:	4b31      	ldr	r3, [pc, #196]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fec:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d02f      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ffc:	693a      	ldr	r2, [r7, #16]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d028      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005002:	4b2a      	ldr	r3, [pc, #168]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005006:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800500a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800500c:	4b29      	ldr	r3, [pc, #164]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800500e:	2201      	movs	r2, #1
 8005010:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005012:	4b28      	ldr	r3, [pc, #160]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005014:	2200      	movs	r2, #0
 8005016:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005018:	4a24      	ldr	r2, [pc, #144]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800501e:	4b23      	ldr	r3, [pc, #140]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	2b01      	cmp	r3, #1
 8005028:	d114      	bne.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800502a:	f7fc fdcb 	bl	8001bc4 <HAL_GetTick>
 800502e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005030:	e00a      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005032:	f7fc fdc7 	bl	8001bc4 <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005040:	4293      	cmp	r3, r2
 8005042:	d901      	bls.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e02a      	b.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005048:	4b18      	ldr	r3, [pc, #96]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800504a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800504c:	f003 0302 	and.w	r3, r3, #2
 8005050:	2b00      	cmp	r3, #0
 8005052:	d0ee      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800505c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005060:	d10d      	bne.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005062:	4b12      	ldr	r3, [pc, #72]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005072:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005076:	490d      	ldr	r1, [pc, #52]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005078:	4313      	orrs	r3, r2
 800507a:	608b      	str	r3, [r1, #8]
 800507c:	e005      	b.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800507e:	4b0b      	ldr	r3, [pc, #44]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	4a0a      	ldr	r2, [pc, #40]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005084:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005088:	6093      	str	r3, [r2, #8]
 800508a:	4b08      	ldr	r3, [pc, #32]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800508c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005096:	4905      	ldr	r1, [pc, #20]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005098:	4313      	orrs	r3, r2
 800509a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3718      	adds	r7, #24
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	42470068 	.word	0x42470068
 80050ac:	40023800 	.word	0x40023800
 80050b0:	40007000 	.word	0x40007000
 80050b4:	42470e40 	.word	0x42470e40

080050b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b087      	sub	sp, #28
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80050c0:	2300      	movs	r3, #0
 80050c2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80050c4:	2300      	movs	r3, #0
 80050c6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80050c8:	2300      	movs	r3, #0
 80050ca:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80050cc:	2300      	movs	r3, #0
 80050ce:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d13e      	bne.n	8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80050d6:	4b23      	ldr	r3, [pc, #140]	; (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050de:	60fb      	str	r3, [r7, #12]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d005      	beq.n	80050f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d12f      	bne.n	800514c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80050ec:	4b1e      	ldr	r3, [pc, #120]	; (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80050ee:	617b      	str	r3, [r7, #20]
          break;
 80050f0:	e02f      	b.n	8005152 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80050f2:	4b1c      	ldr	r3, [pc, #112]	; (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050fe:	d108      	bne.n	8005112 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005100:	4b18      	ldr	r3, [pc, #96]	; (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005108:	4a18      	ldr	r2, [pc, #96]	; (800516c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800510a:	fbb2 f3f3 	udiv	r3, r2, r3
 800510e:	613b      	str	r3, [r7, #16]
 8005110:	e007      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005112:	4b14      	ldr	r3, [pc, #80]	; (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800511a:	4a15      	ldr	r2, [pc, #84]	; (8005170 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800511c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005120:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005122:	4b10      	ldr	r3, [pc, #64]	; (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005124:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005128:	099b      	lsrs	r3, r3, #6
 800512a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	fb02 f303 	mul.w	r3, r2, r3
 8005134:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005136:	4b0b      	ldr	r3, [pc, #44]	; (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005138:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800513c:	0f1b      	lsrs	r3, r3, #28
 800513e:	f003 0307 	and.w	r3, r3, #7
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	fbb2 f3f3 	udiv	r3, r2, r3
 8005148:	617b      	str	r3, [r7, #20]
          break;
 800514a:	e002      	b.n	8005152 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800514c:	2300      	movs	r3, #0
 800514e:	617b      	str	r3, [r7, #20]
          break;
 8005150:	bf00      	nop
        }
      }
      break;
 8005152:	bf00      	nop
    }
  }
  return frequency;
 8005154:	697b      	ldr	r3, [r7, #20]
}
 8005156:	4618      	mov	r0, r3
 8005158:	371c      	adds	r7, #28
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	40023800 	.word	0x40023800
 8005168:	00bb8000 	.word	0x00bb8000
 800516c:	007a1200 	.word	0x007a1200
 8005170:	00f42400 	.word	0x00f42400

08005174 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d101      	bne.n	8005186 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e07b      	b.n	800527e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518a:	2b00      	cmp	r3, #0
 800518c:	d108      	bne.n	80051a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005196:	d009      	beq.n	80051ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	61da      	str	r2, [r3, #28]
 800519e:	e005      	b.n	80051ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d106      	bne.n	80051cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f7fb ff5e 	bl	8001088 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2202      	movs	r2, #2
 80051d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80051f4:	431a      	orrs	r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051fe:	431a      	orrs	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	f003 0302 	and.w	r3, r3, #2
 8005208:	431a      	orrs	r2, r3
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	431a      	orrs	r2, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800521c:	431a      	orrs	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	69db      	ldr	r3, [r3, #28]
 8005222:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005226:	431a      	orrs	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a1b      	ldr	r3, [r3, #32]
 800522c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005230:	ea42 0103 	orr.w	r1, r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005238:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	430a      	orrs	r2, r1
 8005242:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	0c1b      	lsrs	r3, r3, #16
 800524a:	f003 0104 	and.w	r1, r3, #4
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005252:	f003 0210 	and.w	r2, r3, #16
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	430a      	orrs	r2, r1
 800525c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	69da      	ldr	r2, [r3, #28]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800526c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3708      	adds	r7, #8
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005286:	b580      	push	{r7, lr}
 8005288:	b082      	sub	sp, #8
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d101      	bne.n	8005298 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e041      	b.n	800531c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d106      	bne.n	80052b2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f7fb ff33 	bl	8001118 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2202      	movs	r2, #2
 80052b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	3304      	adds	r3, #4
 80052c2:	4619      	mov	r1, r3
 80052c4:	4610      	mov	r0, r2
 80052c6:	f000 fce1 	bl	8005c8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3708      	adds	r7, #8
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2b01      	cmp	r3, #1
 8005336:	d001      	beq.n	800533c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e046      	b.n	80053ca <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2202      	movs	r2, #2
 8005340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a23      	ldr	r2, [pc, #140]	; (80053d8 <HAL_TIM_Base_Start+0xb4>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d022      	beq.n	8005394 <HAL_TIM_Base_Start+0x70>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005356:	d01d      	beq.n	8005394 <HAL_TIM_Base_Start+0x70>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a1f      	ldr	r2, [pc, #124]	; (80053dc <HAL_TIM_Base_Start+0xb8>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d018      	beq.n	8005394 <HAL_TIM_Base_Start+0x70>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a1e      	ldr	r2, [pc, #120]	; (80053e0 <HAL_TIM_Base_Start+0xbc>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d013      	beq.n	8005394 <HAL_TIM_Base_Start+0x70>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a1c      	ldr	r2, [pc, #112]	; (80053e4 <HAL_TIM_Base_Start+0xc0>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d00e      	beq.n	8005394 <HAL_TIM_Base_Start+0x70>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a1b      	ldr	r2, [pc, #108]	; (80053e8 <HAL_TIM_Base_Start+0xc4>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d009      	beq.n	8005394 <HAL_TIM_Base_Start+0x70>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a19      	ldr	r2, [pc, #100]	; (80053ec <HAL_TIM_Base_Start+0xc8>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d004      	beq.n	8005394 <HAL_TIM_Base_Start+0x70>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a18      	ldr	r2, [pc, #96]	; (80053f0 <HAL_TIM_Base_Start+0xcc>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d111      	bne.n	80053b8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	f003 0307 	and.w	r3, r3, #7
 800539e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2b06      	cmp	r3, #6
 80053a4:	d010      	beq.n	80053c8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f042 0201 	orr.w	r2, r2, #1
 80053b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053b6:	e007      	b.n	80053c8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f042 0201 	orr.w	r2, r2, #1
 80053c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	40010000 	.word	0x40010000
 80053dc:	40000400 	.word	0x40000400
 80053e0:	40000800 	.word	0x40000800
 80053e4:	40000c00 	.word	0x40000c00
 80053e8:	40010400 	.word	0x40010400
 80053ec:	40014000 	.word	0x40014000
 80053f0:	40001800 	.word	0x40001800

080053f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005402:	b2db      	uxtb	r3, r3
 8005404:	2b01      	cmp	r3, #1
 8005406:	d001      	beq.n	800540c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e04e      	b.n	80054aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2202      	movs	r2, #2
 8005410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68da      	ldr	r2, [r3, #12]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f042 0201 	orr.w	r2, r2, #1
 8005422:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a23      	ldr	r2, [pc, #140]	; (80054b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d022      	beq.n	8005474 <HAL_TIM_Base_Start_IT+0x80>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005436:	d01d      	beq.n	8005474 <HAL_TIM_Base_Start_IT+0x80>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a1f      	ldr	r2, [pc, #124]	; (80054bc <HAL_TIM_Base_Start_IT+0xc8>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d018      	beq.n	8005474 <HAL_TIM_Base_Start_IT+0x80>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a1e      	ldr	r2, [pc, #120]	; (80054c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d013      	beq.n	8005474 <HAL_TIM_Base_Start_IT+0x80>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a1c      	ldr	r2, [pc, #112]	; (80054c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d00e      	beq.n	8005474 <HAL_TIM_Base_Start_IT+0x80>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a1b      	ldr	r2, [pc, #108]	; (80054c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d009      	beq.n	8005474 <HAL_TIM_Base_Start_IT+0x80>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a19      	ldr	r2, [pc, #100]	; (80054cc <HAL_TIM_Base_Start_IT+0xd8>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d004      	beq.n	8005474 <HAL_TIM_Base_Start_IT+0x80>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a18      	ldr	r2, [pc, #96]	; (80054d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d111      	bne.n	8005498 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f003 0307 	and.w	r3, r3, #7
 800547e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2b06      	cmp	r3, #6
 8005484:	d010      	beq.n	80054a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f042 0201 	orr.w	r2, r2, #1
 8005494:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005496:	e007      	b.n	80054a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f042 0201 	orr.w	r2, r2, #1
 80054a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3714      	adds	r7, #20
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop
 80054b8:	40010000 	.word	0x40010000
 80054bc:	40000400 	.word	0x40000400
 80054c0:	40000800 	.word	0x40000800
 80054c4:	40000c00 	.word	0x40000c00
 80054c8:	40010400 	.word	0x40010400
 80054cc:	40014000 	.word	0x40014000
 80054d0:	40001800 	.word	0x40001800

080054d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d101      	bne.n	80054e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e041      	b.n	800556a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d106      	bne.n	8005500 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 f839 	bl	8005572 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2202      	movs	r2, #2
 8005504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	3304      	adds	r3, #4
 8005510:	4619      	mov	r1, r3
 8005512:	4610      	mov	r0, r2
 8005514:	f000 fbba 	bl	8005c8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005568:	2300      	movs	r3, #0
}
 800556a:	4618      	mov	r0, r3
 800556c:	3708      	adds	r7, #8
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}

08005572 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005572:	b480      	push	{r7}
 8005574:	b083      	sub	sp, #12
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800557a:	bf00      	nop
 800557c:	370c      	adds	r7, #12
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
	...

08005588 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d109      	bne.n	80055ac <HAL_TIM_PWM_Start+0x24>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	bf14      	ite	ne
 80055a4:	2301      	movne	r3, #1
 80055a6:	2300      	moveq	r3, #0
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	e022      	b.n	80055f2 <HAL_TIM_PWM_Start+0x6a>
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	2b04      	cmp	r3, #4
 80055b0:	d109      	bne.n	80055c6 <HAL_TIM_PWM_Start+0x3e>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	bf14      	ite	ne
 80055be:	2301      	movne	r3, #1
 80055c0:	2300      	moveq	r3, #0
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	e015      	b.n	80055f2 <HAL_TIM_PWM_Start+0x6a>
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	2b08      	cmp	r3, #8
 80055ca:	d109      	bne.n	80055e0 <HAL_TIM_PWM_Start+0x58>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	bf14      	ite	ne
 80055d8:	2301      	movne	r3, #1
 80055da:	2300      	moveq	r3, #0
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	e008      	b.n	80055f2 <HAL_TIM_PWM_Start+0x6a>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	bf14      	ite	ne
 80055ec:	2301      	movne	r3, #1
 80055ee:	2300      	moveq	r3, #0
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d001      	beq.n	80055fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e07c      	b.n	80056f4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d104      	bne.n	800560a <HAL_TIM_PWM_Start+0x82>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2202      	movs	r2, #2
 8005604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005608:	e013      	b.n	8005632 <HAL_TIM_PWM_Start+0xaa>
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	2b04      	cmp	r3, #4
 800560e:	d104      	bne.n	800561a <HAL_TIM_PWM_Start+0x92>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2202      	movs	r2, #2
 8005614:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005618:	e00b      	b.n	8005632 <HAL_TIM_PWM_Start+0xaa>
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	2b08      	cmp	r3, #8
 800561e:	d104      	bne.n	800562a <HAL_TIM_PWM_Start+0xa2>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2202      	movs	r2, #2
 8005624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005628:	e003      	b.n	8005632 <HAL_TIM_PWM_Start+0xaa>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2202      	movs	r2, #2
 800562e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2201      	movs	r2, #1
 8005638:	6839      	ldr	r1, [r7, #0]
 800563a:	4618      	mov	r0, r3
 800563c:	f000 fe10 	bl	8006260 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a2d      	ldr	r2, [pc, #180]	; (80056fc <HAL_TIM_PWM_Start+0x174>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d004      	beq.n	8005654 <HAL_TIM_PWM_Start+0xcc>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a2c      	ldr	r2, [pc, #176]	; (8005700 <HAL_TIM_PWM_Start+0x178>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d101      	bne.n	8005658 <HAL_TIM_PWM_Start+0xd0>
 8005654:	2301      	movs	r3, #1
 8005656:	e000      	b.n	800565a <HAL_TIM_PWM_Start+0xd2>
 8005658:	2300      	movs	r3, #0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d007      	beq.n	800566e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800566c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a22      	ldr	r2, [pc, #136]	; (80056fc <HAL_TIM_PWM_Start+0x174>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d022      	beq.n	80056be <HAL_TIM_PWM_Start+0x136>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005680:	d01d      	beq.n	80056be <HAL_TIM_PWM_Start+0x136>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a1f      	ldr	r2, [pc, #124]	; (8005704 <HAL_TIM_PWM_Start+0x17c>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d018      	beq.n	80056be <HAL_TIM_PWM_Start+0x136>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a1d      	ldr	r2, [pc, #116]	; (8005708 <HAL_TIM_PWM_Start+0x180>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d013      	beq.n	80056be <HAL_TIM_PWM_Start+0x136>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a1c      	ldr	r2, [pc, #112]	; (800570c <HAL_TIM_PWM_Start+0x184>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d00e      	beq.n	80056be <HAL_TIM_PWM_Start+0x136>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a16      	ldr	r2, [pc, #88]	; (8005700 <HAL_TIM_PWM_Start+0x178>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d009      	beq.n	80056be <HAL_TIM_PWM_Start+0x136>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a18      	ldr	r2, [pc, #96]	; (8005710 <HAL_TIM_PWM_Start+0x188>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d004      	beq.n	80056be <HAL_TIM_PWM_Start+0x136>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a16      	ldr	r2, [pc, #88]	; (8005714 <HAL_TIM_PWM_Start+0x18c>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d111      	bne.n	80056e2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	f003 0307 	and.w	r3, r3, #7
 80056c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2b06      	cmp	r3, #6
 80056ce:	d010      	beq.n	80056f2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f042 0201 	orr.w	r2, r2, #1
 80056de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056e0:	e007      	b.n	80056f2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f042 0201 	orr.w	r2, r2, #1
 80056f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3710      	adds	r7, #16
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	40010000 	.word	0x40010000
 8005700:	40010400 	.word	0x40010400
 8005704:	40000400 	.word	0x40000400
 8005708:	40000800 	.word	0x40000800
 800570c:	40000c00 	.word	0x40000c00
 8005710:	40014000 	.word	0x40014000
 8005714:	40001800 	.word	0x40001800

08005718 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	f003 0302 	and.w	r3, r3, #2
 800572a:	2b02      	cmp	r3, #2
 800572c:	d122      	bne.n	8005774 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	f003 0302 	and.w	r3, r3, #2
 8005738:	2b02      	cmp	r3, #2
 800573a:	d11b      	bne.n	8005774 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f06f 0202 	mvn.w	r2, #2
 8005744:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2201      	movs	r2, #1
 800574a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	f003 0303 	and.w	r3, r3, #3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d003      	beq.n	8005762 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 fa77 	bl	8005c4e <HAL_TIM_IC_CaptureCallback>
 8005760:	e005      	b.n	800576e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 fa69 	bl	8005c3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 fa7a 	bl	8005c62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	f003 0304 	and.w	r3, r3, #4
 800577e:	2b04      	cmp	r3, #4
 8005780:	d122      	bne.n	80057c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	f003 0304 	and.w	r3, r3, #4
 800578c:	2b04      	cmp	r3, #4
 800578e:	d11b      	bne.n	80057c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f06f 0204 	mvn.w	r2, #4
 8005798:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2202      	movs	r2, #2
 800579e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d003      	beq.n	80057b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 fa4d 	bl	8005c4e <HAL_TIM_IC_CaptureCallback>
 80057b4:	e005      	b.n	80057c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 fa3f 	bl	8005c3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 fa50 	bl	8005c62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	f003 0308 	and.w	r3, r3, #8
 80057d2:	2b08      	cmp	r3, #8
 80057d4:	d122      	bne.n	800581c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	f003 0308 	and.w	r3, r3, #8
 80057e0:	2b08      	cmp	r3, #8
 80057e2:	d11b      	bne.n	800581c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f06f 0208 	mvn.w	r2, #8
 80057ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2204      	movs	r2, #4
 80057f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	69db      	ldr	r3, [r3, #28]
 80057fa:	f003 0303 	and.w	r3, r3, #3
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d003      	beq.n	800580a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 fa23 	bl	8005c4e <HAL_TIM_IC_CaptureCallback>
 8005808:	e005      	b.n	8005816 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 fa15 	bl	8005c3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 fa26 	bl	8005c62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	f003 0310 	and.w	r3, r3, #16
 8005826:	2b10      	cmp	r3, #16
 8005828:	d122      	bne.n	8005870 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	f003 0310 	and.w	r3, r3, #16
 8005834:	2b10      	cmp	r3, #16
 8005836:	d11b      	bne.n	8005870 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f06f 0210 	mvn.w	r2, #16
 8005840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2208      	movs	r2, #8
 8005846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	69db      	ldr	r3, [r3, #28]
 800584e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005852:	2b00      	cmp	r3, #0
 8005854:	d003      	beq.n	800585e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 f9f9 	bl	8005c4e <HAL_TIM_IC_CaptureCallback>
 800585c:	e005      	b.n	800586a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 f9eb 	bl	8005c3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 f9fc 	bl	8005c62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	f003 0301 	and.w	r3, r3, #1
 800587a:	2b01      	cmp	r3, #1
 800587c:	d10e      	bne.n	800589c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	f003 0301 	and.w	r3, r3, #1
 8005888:	2b01      	cmp	r3, #1
 800588a:	d107      	bne.n	800589c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f06f 0201 	mvn.w	r2, #1
 8005894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f7fb fadc 	bl	8000e54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058a6:	2b80      	cmp	r3, #128	; 0x80
 80058a8:	d10e      	bne.n	80058c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058b4:	2b80      	cmp	r3, #128	; 0x80
 80058b6:	d107      	bne.n	80058c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80058c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 fd78 	bl	80063b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d2:	2b40      	cmp	r3, #64	; 0x40
 80058d4:	d10e      	bne.n	80058f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e0:	2b40      	cmp	r3, #64	; 0x40
 80058e2:	d107      	bne.n	80058f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80058ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 f9c1 	bl	8005c76 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	f003 0320 	and.w	r3, r3, #32
 80058fe:	2b20      	cmp	r3, #32
 8005900:	d10e      	bne.n	8005920 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	f003 0320 	and.w	r3, r3, #32
 800590c:	2b20      	cmp	r3, #32
 800590e:	d107      	bne.n	8005920 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f06f 0220 	mvn.w	r2, #32
 8005918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 fd42 	bl	80063a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005920:	bf00      	nop
 8005922:	3708      	adds	r7, #8
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b086      	sub	sp, #24
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005934:	2300      	movs	r3, #0
 8005936:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800593e:	2b01      	cmp	r3, #1
 8005940:	d101      	bne.n	8005946 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005942:	2302      	movs	r3, #2
 8005944:	e0ae      	b.n	8005aa4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2201      	movs	r2, #1
 800594a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2b0c      	cmp	r3, #12
 8005952:	f200 809f 	bhi.w	8005a94 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005956:	a201      	add	r2, pc, #4	; (adr r2, 800595c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800595c:	08005991 	.word	0x08005991
 8005960:	08005a95 	.word	0x08005a95
 8005964:	08005a95 	.word	0x08005a95
 8005968:	08005a95 	.word	0x08005a95
 800596c:	080059d1 	.word	0x080059d1
 8005970:	08005a95 	.word	0x08005a95
 8005974:	08005a95 	.word	0x08005a95
 8005978:	08005a95 	.word	0x08005a95
 800597c:	08005a13 	.word	0x08005a13
 8005980:	08005a95 	.word	0x08005a95
 8005984:	08005a95 	.word	0x08005a95
 8005988:	08005a95 	.word	0x08005a95
 800598c:	08005a53 	.word	0x08005a53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68b9      	ldr	r1, [r7, #8]
 8005996:	4618      	mov	r0, r3
 8005998:	f000 fa18 	bl	8005dcc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	699a      	ldr	r2, [r3, #24]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f042 0208 	orr.w	r2, r2, #8
 80059aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	699a      	ldr	r2, [r3, #24]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f022 0204 	bic.w	r2, r2, #4
 80059ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6999      	ldr	r1, [r3, #24]
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	691a      	ldr	r2, [r3, #16]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	430a      	orrs	r2, r1
 80059cc:	619a      	str	r2, [r3, #24]
      break;
 80059ce:	e064      	b.n	8005a9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68b9      	ldr	r1, [r7, #8]
 80059d6:	4618      	mov	r0, r3
 80059d8:	f000 fa68 	bl	8005eac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	699a      	ldr	r2, [r3, #24]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	699a      	ldr	r2, [r3, #24]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	6999      	ldr	r1, [r3, #24]
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	021a      	lsls	r2, r3, #8
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	430a      	orrs	r2, r1
 8005a0e:	619a      	str	r2, [r3, #24]
      break;
 8005a10:	e043      	b.n	8005a9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68b9      	ldr	r1, [r7, #8]
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f000 fabd 	bl	8005f98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	69da      	ldr	r2, [r3, #28]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f042 0208 	orr.w	r2, r2, #8
 8005a2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	69da      	ldr	r2, [r3, #28]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f022 0204 	bic.w	r2, r2, #4
 8005a3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	69d9      	ldr	r1, [r3, #28]
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	691a      	ldr	r2, [r3, #16]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	430a      	orrs	r2, r1
 8005a4e:	61da      	str	r2, [r3, #28]
      break;
 8005a50:	e023      	b.n	8005a9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68b9      	ldr	r1, [r7, #8]
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f000 fb11 	bl	8006080 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	69da      	ldr	r2, [r3, #28]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	69da      	ldr	r2, [r3, #28]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	69d9      	ldr	r1, [r3, #28]
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	021a      	lsls	r2, r3, #8
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	430a      	orrs	r2, r1
 8005a90:	61da      	str	r2, [r3, #28]
      break;
 8005a92:	e002      	b.n	8005a9a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	75fb      	strb	r3, [r7, #23]
      break;
 8005a98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005aa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3718      	adds	r7, #24
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d101      	bne.n	8005ac8 <HAL_TIM_ConfigClockSource+0x1c>
 8005ac4:	2302      	movs	r3, #2
 8005ac6:	e0b4      	b.n	8005c32 <HAL_TIM_ConfigClockSource+0x186>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2202      	movs	r2, #2
 8005ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005ae6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005aee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68ba      	ldr	r2, [r7, #8]
 8005af6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b00:	d03e      	beq.n	8005b80 <HAL_TIM_ConfigClockSource+0xd4>
 8005b02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b06:	f200 8087 	bhi.w	8005c18 <HAL_TIM_ConfigClockSource+0x16c>
 8005b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b0e:	f000 8086 	beq.w	8005c1e <HAL_TIM_ConfigClockSource+0x172>
 8005b12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b16:	d87f      	bhi.n	8005c18 <HAL_TIM_ConfigClockSource+0x16c>
 8005b18:	2b70      	cmp	r3, #112	; 0x70
 8005b1a:	d01a      	beq.n	8005b52 <HAL_TIM_ConfigClockSource+0xa6>
 8005b1c:	2b70      	cmp	r3, #112	; 0x70
 8005b1e:	d87b      	bhi.n	8005c18 <HAL_TIM_ConfigClockSource+0x16c>
 8005b20:	2b60      	cmp	r3, #96	; 0x60
 8005b22:	d050      	beq.n	8005bc6 <HAL_TIM_ConfigClockSource+0x11a>
 8005b24:	2b60      	cmp	r3, #96	; 0x60
 8005b26:	d877      	bhi.n	8005c18 <HAL_TIM_ConfigClockSource+0x16c>
 8005b28:	2b50      	cmp	r3, #80	; 0x50
 8005b2a:	d03c      	beq.n	8005ba6 <HAL_TIM_ConfigClockSource+0xfa>
 8005b2c:	2b50      	cmp	r3, #80	; 0x50
 8005b2e:	d873      	bhi.n	8005c18 <HAL_TIM_ConfigClockSource+0x16c>
 8005b30:	2b40      	cmp	r3, #64	; 0x40
 8005b32:	d058      	beq.n	8005be6 <HAL_TIM_ConfigClockSource+0x13a>
 8005b34:	2b40      	cmp	r3, #64	; 0x40
 8005b36:	d86f      	bhi.n	8005c18 <HAL_TIM_ConfigClockSource+0x16c>
 8005b38:	2b30      	cmp	r3, #48	; 0x30
 8005b3a:	d064      	beq.n	8005c06 <HAL_TIM_ConfigClockSource+0x15a>
 8005b3c:	2b30      	cmp	r3, #48	; 0x30
 8005b3e:	d86b      	bhi.n	8005c18 <HAL_TIM_ConfigClockSource+0x16c>
 8005b40:	2b20      	cmp	r3, #32
 8005b42:	d060      	beq.n	8005c06 <HAL_TIM_ConfigClockSource+0x15a>
 8005b44:	2b20      	cmp	r3, #32
 8005b46:	d867      	bhi.n	8005c18 <HAL_TIM_ConfigClockSource+0x16c>
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d05c      	beq.n	8005c06 <HAL_TIM_ConfigClockSource+0x15a>
 8005b4c:	2b10      	cmp	r3, #16
 8005b4e:	d05a      	beq.n	8005c06 <HAL_TIM_ConfigClockSource+0x15a>
 8005b50:	e062      	b.n	8005c18 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6818      	ldr	r0, [r3, #0]
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	6899      	ldr	r1, [r3, #8]
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	685a      	ldr	r2, [r3, #4]
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	f000 fb5d 	bl	8006220 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68ba      	ldr	r2, [r7, #8]
 8005b7c:	609a      	str	r2, [r3, #8]
      break;
 8005b7e:	e04f      	b.n	8005c20 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6818      	ldr	r0, [r3, #0]
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	6899      	ldr	r1, [r3, #8]
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	685a      	ldr	r2, [r3, #4]
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	f000 fb46 	bl	8006220 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	689a      	ldr	r2, [r3, #8]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ba2:	609a      	str	r2, [r3, #8]
      break;
 8005ba4:	e03c      	b.n	8005c20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6818      	ldr	r0, [r3, #0]
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	6859      	ldr	r1, [r3, #4]
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	f000 faba 	bl	800612c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2150      	movs	r1, #80	; 0x50
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f000 fb13 	bl	80061ea <TIM_ITRx_SetConfig>
      break;
 8005bc4:	e02c      	b.n	8005c20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6818      	ldr	r0, [r3, #0]
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	6859      	ldr	r1, [r3, #4]
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	f000 fad9 	bl	800618a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2160      	movs	r1, #96	; 0x60
 8005bde:	4618      	mov	r0, r3
 8005be0:	f000 fb03 	bl	80061ea <TIM_ITRx_SetConfig>
      break;
 8005be4:	e01c      	b.n	8005c20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6818      	ldr	r0, [r3, #0]
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	6859      	ldr	r1, [r3, #4]
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	f000 fa9a 	bl	800612c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2140      	movs	r1, #64	; 0x40
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f000 faf3 	bl	80061ea <TIM_ITRx_SetConfig>
      break;
 8005c04:	e00c      	b.n	8005c20 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4619      	mov	r1, r3
 8005c10:	4610      	mov	r0, r2
 8005c12:	f000 faea 	bl	80061ea <TIM_ITRx_SetConfig>
      break;
 8005c16:	e003      	b.n	8005c20 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	73fb      	strb	r3, [r7, #15]
      break;
 8005c1c:	e000      	b.n	8005c20 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005c1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	b083      	sub	sp, #12
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c42:	bf00      	nop
 8005c44:	370c      	adds	r7, #12
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr

08005c4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c4e:	b480      	push	{r7}
 8005c50:	b083      	sub	sp, #12
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c56:	bf00      	nop
 8005c58:	370c      	adds	r7, #12
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr

08005c62 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c62:	b480      	push	{r7}
 8005c64:	b083      	sub	sp, #12
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c6a:	bf00      	nop
 8005c6c:	370c      	adds	r7, #12
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr

08005c76 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c76:	b480      	push	{r7}
 8005c78:	b083      	sub	sp, #12
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c7e:	bf00      	nop
 8005c80:	370c      	adds	r7, #12
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr
	...

08005c8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b085      	sub	sp, #20
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a40      	ldr	r2, [pc, #256]	; (8005da0 <TIM_Base_SetConfig+0x114>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d013      	beq.n	8005ccc <TIM_Base_SetConfig+0x40>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005caa:	d00f      	beq.n	8005ccc <TIM_Base_SetConfig+0x40>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a3d      	ldr	r2, [pc, #244]	; (8005da4 <TIM_Base_SetConfig+0x118>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d00b      	beq.n	8005ccc <TIM_Base_SetConfig+0x40>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a3c      	ldr	r2, [pc, #240]	; (8005da8 <TIM_Base_SetConfig+0x11c>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d007      	beq.n	8005ccc <TIM_Base_SetConfig+0x40>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a3b      	ldr	r2, [pc, #236]	; (8005dac <TIM_Base_SetConfig+0x120>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d003      	beq.n	8005ccc <TIM_Base_SetConfig+0x40>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a3a      	ldr	r2, [pc, #232]	; (8005db0 <TIM_Base_SetConfig+0x124>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d108      	bne.n	8005cde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a2f      	ldr	r2, [pc, #188]	; (8005da0 <TIM_Base_SetConfig+0x114>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d02b      	beq.n	8005d3e <TIM_Base_SetConfig+0xb2>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cec:	d027      	beq.n	8005d3e <TIM_Base_SetConfig+0xb2>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a2c      	ldr	r2, [pc, #176]	; (8005da4 <TIM_Base_SetConfig+0x118>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d023      	beq.n	8005d3e <TIM_Base_SetConfig+0xb2>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a2b      	ldr	r2, [pc, #172]	; (8005da8 <TIM_Base_SetConfig+0x11c>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d01f      	beq.n	8005d3e <TIM_Base_SetConfig+0xb2>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a2a      	ldr	r2, [pc, #168]	; (8005dac <TIM_Base_SetConfig+0x120>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d01b      	beq.n	8005d3e <TIM_Base_SetConfig+0xb2>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a29      	ldr	r2, [pc, #164]	; (8005db0 <TIM_Base_SetConfig+0x124>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d017      	beq.n	8005d3e <TIM_Base_SetConfig+0xb2>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a28      	ldr	r2, [pc, #160]	; (8005db4 <TIM_Base_SetConfig+0x128>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d013      	beq.n	8005d3e <TIM_Base_SetConfig+0xb2>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a27      	ldr	r2, [pc, #156]	; (8005db8 <TIM_Base_SetConfig+0x12c>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d00f      	beq.n	8005d3e <TIM_Base_SetConfig+0xb2>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a26      	ldr	r2, [pc, #152]	; (8005dbc <TIM_Base_SetConfig+0x130>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d00b      	beq.n	8005d3e <TIM_Base_SetConfig+0xb2>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a25      	ldr	r2, [pc, #148]	; (8005dc0 <TIM_Base_SetConfig+0x134>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d007      	beq.n	8005d3e <TIM_Base_SetConfig+0xb2>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a24      	ldr	r2, [pc, #144]	; (8005dc4 <TIM_Base_SetConfig+0x138>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d003      	beq.n	8005d3e <TIM_Base_SetConfig+0xb2>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a23      	ldr	r2, [pc, #140]	; (8005dc8 <TIM_Base_SetConfig+0x13c>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d108      	bne.n	8005d50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	695b      	ldr	r3, [r3, #20]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	689a      	ldr	r2, [r3, #8]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a0a      	ldr	r2, [pc, #40]	; (8005da0 <TIM_Base_SetConfig+0x114>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d003      	beq.n	8005d84 <TIM_Base_SetConfig+0xf8>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a0c      	ldr	r2, [pc, #48]	; (8005db0 <TIM_Base_SetConfig+0x124>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d103      	bne.n	8005d8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	691a      	ldr	r2, [r3, #16]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	615a      	str	r2, [r3, #20]
}
 8005d92:	bf00      	nop
 8005d94:	3714      	adds	r7, #20
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	40010000 	.word	0x40010000
 8005da4:	40000400 	.word	0x40000400
 8005da8:	40000800 	.word	0x40000800
 8005dac:	40000c00 	.word	0x40000c00
 8005db0:	40010400 	.word	0x40010400
 8005db4:	40014000 	.word	0x40014000
 8005db8:	40014400 	.word	0x40014400
 8005dbc:	40014800 	.word	0x40014800
 8005dc0:	40001800 	.word	0x40001800
 8005dc4:	40001c00 	.word	0x40001c00
 8005dc8:	40002000 	.word	0x40002000

08005dcc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b087      	sub	sp, #28
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a1b      	ldr	r3, [r3, #32]
 8005dda:	f023 0201 	bic.w	r2, r3, #1
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a1b      	ldr	r3, [r3, #32]
 8005de6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	699b      	ldr	r3, [r3, #24]
 8005df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f023 0303 	bic.w	r3, r3, #3
 8005e02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	f023 0302 	bic.w	r3, r3, #2
 8005e14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a20      	ldr	r2, [pc, #128]	; (8005ea4 <TIM_OC1_SetConfig+0xd8>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d003      	beq.n	8005e30 <TIM_OC1_SetConfig+0x64>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a1f      	ldr	r2, [pc, #124]	; (8005ea8 <TIM_OC1_SetConfig+0xdc>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d10c      	bne.n	8005e4a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	f023 0308 	bic.w	r3, r3, #8
 8005e36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	697a      	ldr	r2, [r7, #20]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	f023 0304 	bic.w	r3, r3, #4
 8005e48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a15      	ldr	r2, [pc, #84]	; (8005ea4 <TIM_OC1_SetConfig+0xd8>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d003      	beq.n	8005e5a <TIM_OC1_SetConfig+0x8e>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a14      	ldr	r2, [pc, #80]	; (8005ea8 <TIM_OC1_SetConfig+0xdc>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d111      	bne.n	8005e7e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	695b      	ldr	r3, [r3, #20]
 8005e6e:	693a      	ldr	r2, [r7, #16]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	699b      	ldr	r3, [r3, #24]
 8005e78:	693a      	ldr	r2, [r7, #16]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	693a      	ldr	r2, [r7, #16]
 8005e82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	685a      	ldr	r2, [r3, #4]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	697a      	ldr	r2, [r7, #20]
 8005e96:	621a      	str	r2, [r3, #32]
}
 8005e98:	bf00      	nop
 8005e9a:	371c      	adds	r7, #28
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr
 8005ea4:	40010000 	.word	0x40010000
 8005ea8:	40010400 	.word	0x40010400

08005eac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b087      	sub	sp, #28
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a1b      	ldr	r3, [r3, #32]
 8005eba:	f023 0210 	bic.w	r2, r3, #16
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a1b      	ldr	r3, [r3, #32]
 8005ec6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	699b      	ldr	r3, [r3, #24]
 8005ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ee2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	021b      	lsls	r3, r3, #8
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	f023 0320 	bic.w	r3, r3, #32
 8005ef6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	011b      	lsls	r3, r3, #4
 8005efe:	697a      	ldr	r2, [r7, #20]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a22      	ldr	r2, [pc, #136]	; (8005f90 <TIM_OC2_SetConfig+0xe4>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d003      	beq.n	8005f14 <TIM_OC2_SetConfig+0x68>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a21      	ldr	r2, [pc, #132]	; (8005f94 <TIM_OC2_SetConfig+0xe8>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d10d      	bne.n	8005f30 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	011b      	lsls	r3, r3, #4
 8005f22:	697a      	ldr	r2, [r7, #20]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a17      	ldr	r2, [pc, #92]	; (8005f90 <TIM_OC2_SetConfig+0xe4>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d003      	beq.n	8005f40 <TIM_OC2_SetConfig+0x94>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a16      	ldr	r2, [pc, #88]	; (8005f94 <TIM_OC2_SetConfig+0xe8>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d113      	bne.n	8005f68 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	695b      	ldr	r3, [r3, #20]
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	693a      	ldr	r2, [r7, #16]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	699b      	ldr	r3, [r3, #24]
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	693a      	ldr	r2, [r7, #16]
 8005f6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	685a      	ldr	r2, [r3, #4]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	621a      	str	r2, [r3, #32]
}
 8005f82:	bf00      	nop
 8005f84:	371c      	adds	r7, #28
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop
 8005f90:	40010000 	.word	0x40010000
 8005f94:	40010400 	.word	0x40010400

08005f98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b087      	sub	sp, #28
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
 8005fa6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a1b      	ldr	r3, [r3, #32]
 8005fb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	69db      	ldr	r3, [r3, #28]
 8005fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f023 0303 	bic.w	r3, r3, #3
 8005fce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fe0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	021b      	lsls	r3, r3, #8
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a21      	ldr	r2, [pc, #132]	; (8006078 <TIM_OC3_SetConfig+0xe0>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d003      	beq.n	8005ffe <TIM_OC3_SetConfig+0x66>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a20      	ldr	r2, [pc, #128]	; (800607c <TIM_OC3_SetConfig+0xe4>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d10d      	bne.n	800601a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006004:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	021b      	lsls	r3, r3, #8
 800600c:	697a      	ldr	r2, [r7, #20]
 800600e:	4313      	orrs	r3, r2
 8006010:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006018:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a16      	ldr	r2, [pc, #88]	; (8006078 <TIM_OC3_SetConfig+0xe0>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d003      	beq.n	800602a <TIM_OC3_SetConfig+0x92>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a15      	ldr	r2, [pc, #84]	; (800607c <TIM_OC3_SetConfig+0xe4>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d113      	bne.n	8006052 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006030:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006038:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	011b      	lsls	r3, r3, #4
 8006040:	693a      	ldr	r2, [r7, #16]
 8006042:	4313      	orrs	r3, r2
 8006044:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	699b      	ldr	r3, [r3, #24]
 800604a:	011b      	lsls	r3, r3, #4
 800604c:	693a      	ldr	r2, [r7, #16]
 800604e:	4313      	orrs	r3, r2
 8006050:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	693a      	ldr	r2, [r7, #16]
 8006056:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	685a      	ldr	r2, [r3, #4]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	697a      	ldr	r2, [r7, #20]
 800606a:	621a      	str	r2, [r3, #32]
}
 800606c:	bf00      	nop
 800606e:	371c      	adds	r7, #28
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr
 8006078:	40010000 	.word	0x40010000
 800607c:	40010400 	.word	0x40010400

08006080 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006080:	b480      	push	{r7}
 8006082:	b087      	sub	sp, #28
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a1b      	ldr	r3, [r3, #32]
 800608e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a1b      	ldr	r3, [r3, #32]
 800609a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	69db      	ldr	r3, [r3, #28]
 80060a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	021b      	lsls	r3, r3, #8
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	031b      	lsls	r3, r3, #12
 80060d2:	693a      	ldr	r2, [r7, #16]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a12      	ldr	r2, [pc, #72]	; (8006124 <TIM_OC4_SetConfig+0xa4>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d003      	beq.n	80060e8 <TIM_OC4_SetConfig+0x68>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a11      	ldr	r2, [pc, #68]	; (8006128 <TIM_OC4_SetConfig+0xa8>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d109      	bne.n	80060fc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	695b      	ldr	r3, [r3, #20]
 80060f4:	019b      	lsls	r3, r3, #6
 80060f6:	697a      	ldr	r2, [r7, #20]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	685a      	ldr	r2, [r3, #4]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	693a      	ldr	r2, [r7, #16]
 8006114:	621a      	str	r2, [r3, #32]
}
 8006116:	bf00      	nop
 8006118:	371c      	adds	r7, #28
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	40010000 	.word	0x40010000
 8006128:	40010400 	.word	0x40010400

0800612c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800612c:	b480      	push	{r7}
 800612e:	b087      	sub	sp, #28
 8006130:	af00      	add	r7, sp, #0
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6a1b      	ldr	r3, [r3, #32]
 800613c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6a1b      	ldr	r3, [r3, #32]
 8006142:	f023 0201 	bic.w	r2, r3, #1
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	699b      	ldr	r3, [r3, #24]
 800614e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006156:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	011b      	lsls	r3, r3, #4
 800615c:	693a      	ldr	r2, [r7, #16]
 800615e:	4313      	orrs	r3, r2
 8006160:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	f023 030a 	bic.w	r3, r3, #10
 8006168:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	4313      	orrs	r3, r2
 8006170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	693a      	ldr	r2, [r7, #16]
 8006176:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	621a      	str	r2, [r3, #32]
}
 800617e:	bf00      	nop
 8006180:	371c      	adds	r7, #28
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr

0800618a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800618a:	b480      	push	{r7}
 800618c:	b087      	sub	sp, #28
 800618e:	af00      	add	r7, sp, #0
 8006190:	60f8      	str	r0, [r7, #12]
 8006192:	60b9      	str	r1, [r7, #8]
 8006194:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	f023 0210 	bic.w	r2, r3, #16
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6a1b      	ldr	r3, [r3, #32]
 80061ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	031b      	lsls	r3, r3, #12
 80061ba:	697a      	ldr	r2, [r7, #20]
 80061bc:	4313      	orrs	r3, r2
 80061be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	011b      	lsls	r3, r3, #4
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	697a      	ldr	r2, [r7, #20]
 80061d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	621a      	str	r2, [r3, #32]
}
 80061de:	bf00      	nop
 80061e0:	371c      	adds	r7, #28
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr

080061ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061ea:	b480      	push	{r7}
 80061ec:	b085      	sub	sp, #20
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
 80061f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006200:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006202:	683a      	ldr	r2, [r7, #0]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	4313      	orrs	r3, r2
 8006208:	f043 0307 	orr.w	r3, r3, #7
 800620c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	609a      	str	r2, [r3, #8]
}
 8006214:	bf00      	nop
 8006216:	3714      	adds	r7, #20
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006220:	b480      	push	{r7}
 8006222:	b087      	sub	sp, #28
 8006224:	af00      	add	r7, sp, #0
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	607a      	str	r2, [r7, #4]
 800622c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800623a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	021a      	lsls	r2, r3, #8
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	431a      	orrs	r2, r3
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	4313      	orrs	r3, r2
 8006248:	697a      	ldr	r2, [r7, #20]
 800624a:	4313      	orrs	r3, r2
 800624c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	609a      	str	r2, [r3, #8]
}
 8006254:	bf00      	nop
 8006256:	371c      	adds	r7, #28
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006260:	b480      	push	{r7}
 8006262:	b087      	sub	sp, #28
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	f003 031f 	and.w	r3, r3, #31
 8006272:	2201      	movs	r2, #1
 8006274:	fa02 f303 	lsl.w	r3, r2, r3
 8006278:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6a1a      	ldr	r2, [r3, #32]
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	43db      	mvns	r3, r3
 8006282:	401a      	ands	r2, r3
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6a1a      	ldr	r2, [r3, #32]
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	f003 031f 	and.w	r3, r3, #31
 8006292:	6879      	ldr	r1, [r7, #4]
 8006294:	fa01 f303 	lsl.w	r3, r1, r3
 8006298:	431a      	orrs	r2, r3
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	621a      	str	r2, [r3, #32]
}
 800629e:	bf00      	nop
 80062a0:	371c      	adds	r7, #28
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr
	...

080062ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b085      	sub	sp, #20
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d101      	bne.n	80062c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062c0:	2302      	movs	r3, #2
 80062c2:	e05a      	b.n	800637a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2202      	movs	r2, #2
 80062d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	68fa      	ldr	r2, [r7, #12]
 80062fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a21      	ldr	r2, [pc, #132]	; (8006388 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d022      	beq.n	800634e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006310:	d01d      	beq.n	800634e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a1d      	ldr	r2, [pc, #116]	; (800638c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d018      	beq.n	800634e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a1b      	ldr	r2, [pc, #108]	; (8006390 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d013      	beq.n	800634e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a1a      	ldr	r2, [pc, #104]	; (8006394 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d00e      	beq.n	800634e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a18      	ldr	r2, [pc, #96]	; (8006398 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d009      	beq.n	800634e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a17      	ldr	r2, [pc, #92]	; (800639c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d004      	beq.n	800634e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a15      	ldr	r2, [pc, #84]	; (80063a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d10c      	bne.n	8006368 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006354:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	68ba      	ldr	r2, [r7, #8]
 800635c:	4313      	orrs	r3, r2
 800635e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68ba      	ldr	r2, [r7, #8]
 8006366:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3714      	adds	r7, #20
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop
 8006388:	40010000 	.word	0x40010000
 800638c:	40000400 	.word	0x40000400
 8006390:	40000800 	.word	0x40000800
 8006394:	40000c00 	.word	0x40000c00
 8006398:	40010400 	.word	0x40010400
 800639c:	40014000 	.word	0x40014000
 80063a0:	40001800 	.word	0x40001800

080063a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063ac:	bf00      	nop
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063c0:	bf00      	nop
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80063cc:	b084      	sub	sp, #16
 80063ce:	b580      	push	{r7, lr}
 80063d0:	b084      	sub	sp, #16
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
 80063d6:	f107 001c 	add.w	r0, r7, #28
 80063da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80063de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d122      	bne.n	800642a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80063f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800640c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800640e:	2b01      	cmp	r3, #1
 8006410:	d105      	bne.n	800641e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 f9c0 	bl	80067a4 <USB_CoreReset>
 8006424:	4603      	mov	r3, r0
 8006426:	73fb      	strb	r3, [r7, #15]
 8006428:	e01a      	b.n	8006460 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 f9b4 	bl	80067a4 <USB_CoreReset>
 800643c:	4603      	mov	r3, r0
 800643e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006440:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006442:	2b00      	cmp	r3, #0
 8006444:	d106      	bne.n	8006454 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800644a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	639a      	str	r2, [r3, #56]	; 0x38
 8006452:	e005      	b.n	8006460 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006458:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006462:	2b01      	cmp	r3, #1
 8006464:	d10b      	bne.n	800647e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	f043 0206 	orr.w	r2, r3, #6
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f043 0220 	orr.w	r2, r3, #32
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800647e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006480:	4618      	mov	r0, r3
 8006482:	3710      	adds	r7, #16
 8006484:	46bd      	mov	sp, r7
 8006486:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800648a:	b004      	add	sp, #16
 800648c:	4770      	bx	lr

0800648e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800648e:	b480      	push	{r7}
 8006490:	b083      	sub	sp, #12
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	f043 0201 	orr.w	r2, r3, #1
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	370c      	adds	r7, #12
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	f023 0201 	bic.w	r2, r3, #1
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	370c      	adds	r7, #12
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr

080064d2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b084      	sub	sp, #16
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
 80064da:	460b      	mov	r3, r1
 80064dc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80064de:	2300      	movs	r3, #0
 80064e0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80064ee:	78fb      	ldrb	r3, [r7, #3]
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d115      	bne.n	8006520 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006500:	2001      	movs	r0, #1
 8006502:	f7fb fb6b 	bl	8001bdc <HAL_Delay>
      ms++;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	3301      	adds	r3, #1
 800650a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 f93a 	bl	8006786 <USB_GetMode>
 8006512:	4603      	mov	r3, r0
 8006514:	2b01      	cmp	r3, #1
 8006516:	d01e      	beq.n	8006556 <USB_SetCurrentMode+0x84>
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2b31      	cmp	r3, #49	; 0x31
 800651c:	d9f0      	bls.n	8006500 <USB_SetCurrentMode+0x2e>
 800651e:	e01a      	b.n	8006556 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006520:	78fb      	ldrb	r3, [r7, #3]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d115      	bne.n	8006552 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006532:	2001      	movs	r0, #1
 8006534:	f7fb fb52 	bl	8001bdc <HAL_Delay>
      ms++;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	3301      	adds	r3, #1
 800653c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 f921 	bl	8006786 <USB_GetMode>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d005      	beq.n	8006556 <USB_SetCurrentMode+0x84>
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2b31      	cmp	r3, #49	; 0x31
 800654e:	d9f0      	bls.n	8006532 <USB_SetCurrentMode+0x60>
 8006550:	e001      	b.n	8006556 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e005      	b.n	8006562 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2b32      	cmp	r3, #50	; 0x32
 800655a:	d101      	bne.n	8006560 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e000      	b.n	8006562 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	3710      	adds	r7, #16
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
	...

0800656c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800656c:	b480      	push	{r7}
 800656e:	b085      	sub	sp, #20
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006576:	2300      	movs	r3, #0
 8006578:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	3301      	adds	r3, #1
 800657e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	4a13      	ldr	r2, [pc, #76]	; (80065d0 <USB_FlushTxFifo+0x64>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d901      	bls.n	800658c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006588:	2303      	movs	r3, #3
 800658a:	e01b      	b.n	80065c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	691b      	ldr	r3, [r3, #16]
 8006590:	2b00      	cmp	r3, #0
 8006592:	daf2      	bge.n	800657a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006594:	2300      	movs	r3, #0
 8006596:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	019b      	lsls	r3, r3, #6
 800659c:	f043 0220 	orr.w	r2, r3, #32
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	3301      	adds	r3, #1
 80065a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	4a08      	ldr	r2, [pc, #32]	; (80065d0 <USB_FlushTxFifo+0x64>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d901      	bls.n	80065b6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80065b2:	2303      	movs	r3, #3
 80065b4:	e006      	b.n	80065c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	f003 0320 	and.w	r3, r3, #32
 80065be:	2b20      	cmp	r3, #32
 80065c0:	d0f0      	beq.n	80065a4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3714      	adds	r7, #20
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr
 80065d0:	00030d40 	.word	0x00030d40

080065d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065dc:	2300      	movs	r3, #0
 80065de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	3301      	adds	r3, #1
 80065e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	4a11      	ldr	r2, [pc, #68]	; (8006630 <USB_FlushRxFifo+0x5c>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d901      	bls.n	80065f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80065ee:	2303      	movs	r3, #3
 80065f0:	e018      	b.n	8006624 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	daf2      	bge.n	80065e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80065fa:	2300      	movs	r3, #0
 80065fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2210      	movs	r2, #16
 8006602:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	3301      	adds	r3, #1
 8006608:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	4a08      	ldr	r2, [pc, #32]	; (8006630 <USB_FlushRxFifo+0x5c>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d901      	bls.n	8006616 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006612:	2303      	movs	r3, #3
 8006614:	e006      	b.n	8006624 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	f003 0310 	and.w	r3, r3, #16
 800661e:	2b10      	cmp	r3, #16
 8006620:	d0f0      	beq.n	8006604 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	3714      	adds	r7, #20
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr
 8006630:	00030d40 	.word	0x00030d40

08006634 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006634:	b480      	push	{r7}
 8006636:	b089      	sub	sp, #36	; 0x24
 8006638:	af00      	add	r7, sp, #0
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	4611      	mov	r1, r2
 8006640:	461a      	mov	r2, r3
 8006642:	460b      	mov	r3, r1
 8006644:	71fb      	strb	r3, [r7, #7]
 8006646:	4613      	mov	r3, r2
 8006648:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006652:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006656:	2b00      	cmp	r3, #0
 8006658:	d123      	bne.n	80066a2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800665a:	88bb      	ldrh	r3, [r7, #4]
 800665c:	3303      	adds	r3, #3
 800665e:	089b      	lsrs	r3, r3, #2
 8006660:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006662:	2300      	movs	r3, #0
 8006664:	61bb      	str	r3, [r7, #24]
 8006666:	e018      	b.n	800669a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006668:	79fb      	ldrb	r3, [r7, #7]
 800666a:	031a      	lsls	r2, r3, #12
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	4413      	add	r3, r2
 8006670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006674:	461a      	mov	r2, r3
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	3301      	adds	r3, #1
 8006680:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	3301      	adds	r3, #1
 8006686:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	3301      	adds	r3, #1
 800668c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	3301      	adds	r3, #1
 8006692:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	3301      	adds	r3, #1
 8006698:	61bb      	str	r3, [r7, #24]
 800669a:	69ba      	ldr	r2, [r7, #24]
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	429a      	cmp	r2, r3
 80066a0:	d3e2      	bcc.n	8006668 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3724      	adds	r7, #36	; 0x24
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b08b      	sub	sp, #44	; 0x2c
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	4613      	mov	r3, r2
 80066bc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80066c6:	88fb      	ldrh	r3, [r7, #6]
 80066c8:	089b      	lsrs	r3, r3, #2
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80066ce:	88fb      	ldrh	r3, [r7, #6]
 80066d0:	f003 0303 	and.w	r3, r3, #3
 80066d4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80066d6:	2300      	movs	r3, #0
 80066d8:	623b      	str	r3, [r7, #32]
 80066da:	e014      	b.n	8006706 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80066dc:	69bb      	ldr	r3, [r7, #24]
 80066de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e6:	601a      	str	r2, [r3, #0]
    pDest++;
 80066e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ea:	3301      	adds	r3, #1
 80066ec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80066ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f0:	3301      	adds	r3, #1
 80066f2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80066f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f6:	3301      	adds	r3, #1
 80066f8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80066fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fc:	3301      	adds	r3, #1
 80066fe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006700:	6a3b      	ldr	r3, [r7, #32]
 8006702:	3301      	adds	r3, #1
 8006704:	623b      	str	r3, [r7, #32]
 8006706:	6a3a      	ldr	r2, [r7, #32]
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	429a      	cmp	r2, r3
 800670c:	d3e6      	bcc.n	80066dc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800670e:	8bfb      	ldrh	r3, [r7, #30]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d01e      	beq.n	8006752 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006714:	2300      	movs	r3, #0
 8006716:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800671e:	461a      	mov	r2, r3
 8006720:	f107 0310 	add.w	r3, r7, #16
 8006724:	6812      	ldr	r2, [r2, #0]
 8006726:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006728:	693a      	ldr	r2, [r7, #16]
 800672a:	6a3b      	ldr	r3, [r7, #32]
 800672c:	b2db      	uxtb	r3, r3
 800672e:	00db      	lsls	r3, r3, #3
 8006730:	fa22 f303 	lsr.w	r3, r2, r3
 8006734:	b2da      	uxtb	r2, r3
 8006736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006738:	701a      	strb	r2, [r3, #0]
      i++;
 800673a:	6a3b      	ldr	r3, [r7, #32]
 800673c:	3301      	adds	r3, #1
 800673e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006742:	3301      	adds	r3, #1
 8006744:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006746:	8bfb      	ldrh	r3, [r7, #30]
 8006748:	3b01      	subs	r3, #1
 800674a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800674c:	8bfb      	ldrh	r3, [r7, #30]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d1ea      	bne.n	8006728 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006754:	4618      	mov	r0, r3
 8006756:	372c      	adds	r7, #44	; 0x2c
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	695b      	ldr	r3, [r3, #20]
 800676c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	699b      	ldr	r3, [r3, #24]
 8006772:	68fa      	ldr	r2, [r7, #12]
 8006774:	4013      	ands	r3, r2
 8006776:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006778:	68fb      	ldr	r3, [r7, #12]
}
 800677a:	4618      	mov	r0, r3
 800677c:	3714      	adds	r7, #20
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr

08006786 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006786:	b480      	push	{r7}
 8006788:	b083      	sub	sp, #12
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	f003 0301 	and.w	r3, r3, #1
}
 8006796:	4618      	mov	r0, r3
 8006798:	370c      	adds	r7, #12
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr
	...

080067a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b085      	sub	sp, #20
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067ac:	2300      	movs	r3, #0
 80067ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	3301      	adds	r3, #1
 80067b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	4a13      	ldr	r2, [pc, #76]	; (8006808 <USB_CoreReset+0x64>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d901      	bls.n	80067c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	e01b      	b.n	80067fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	daf2      	bge.n	80067b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80067ca:	2300      	movs	r3, #0
 80067cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	f043 0201 	orr.w	r2, r3, #1
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	3301      	adds	r3, #1
 80067de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	4a09      	ldr	r2, [pc, #36]	; (8006808 <USB_CoreReset+0x64>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d901      	bls.n	80067ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80067e8:	2303      	movs	r3, #3
 80067ea:	e006      	b.n	80067fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	691b      	ldr	r3, [r3, #16]
 80067f0:	f003 0301 	and.w	r3, r3, #1
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d0f0      	beq.n	80067da <USB_CoreReset+0x36>

  return HAL_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3714      	adds	r7, #20
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	00030d40 	.word	0x00030d40

0800680c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800680c:	b084      	sub	sp, #16
 800680e:	b580      	push	{r7, lr}
 8006810:	b086      	sub	sp, #24
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
 8006816:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800681a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800681e:	2300      	movs	r3, #0
 8006820:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800682c:	461a      	mov	r2, r3
 800682e:	2300      	movs	r3, #0
 8006830:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006836:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006842:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800685a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800685e:	2b00      	cmp	r3, #0
 8006860:	d018      	beq.n	8006894 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006864:	2b01      	cmp	r3, #1
 8006866:	d10a      	bne.n	800687e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006876:	f043 0304 	orr.w	r3, r3, #4
 800687a:	6013      	str	r3, [r2, #0]
 800687c:	e014      	b.n	80068a8 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800688c:	f023 0304 	bic.w	r3, r3, #4
 8006890:	6013      	str	r3, [r2, #0]
 8006892:	e009      	b.n	80068a8 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80068a2:	f023 0304 	bic.w	r3, r3, #4
 80068a6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80068a8:	2110      	movs	r1, #16
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f7ff fe5e 	bl	800656c <USB_FlushTxFifo>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d001      	beq.n	80068ba <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f7ff fe8a 	bl	80065d4 <USB_FlushRxFifo>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d001      	beq.n	80068ca <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80068ca:	2300      	movs	r3, #0
 80068cc:	613b      	str	r3, [r7, #16]
 80068ce:	e015      	b.n	80068fc <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	015a      	lsls	r2, r3, #5
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	4413      	add	r3, r2
 80068d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068dc:	461a      	mov	r2, r3
 80068de:	f04f 33ff 	mov.w	r3, #4294967295
 80068e2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	015a      	lsls	r2, r3, #5
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	4413      	add	r3, r2
 80068ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068f0:	461a      	mov	r2, r3
 80068f2:	2300      	movs	r3, #0
 80068f4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	3301      	adds	r3, #1
 80068fa:	613b      	str	r3, [r7, #16]
 80068fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fe:	693a      	ldr	r2, [r7, #16]
 8006900:	429a      	cmp	r2, r3
 8006902:	d3e5      	bcc.n	80068d0 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f04f 32ff 	mov.w	r2, #4294967295
 8006910:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00b      	beq.n	8006936 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006924:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a13      	ldr	r2, [pc, #76]	; (8006978 <USB_HostInit+0x16c>)
 800692a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4a13      	ldr	r2, [pc, #76]	; (800697c <USB_HostInit+0x170>)
 8006930:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006934:	e009      	b.n	800694a <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2280      	movs	r2, #128	; 0x80
 800693a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4a10      	ldr	r2, [pc, #64]	; (8006980 <USB_HostInit+0x174>)
 8006940:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a0f      	ldr	r2, [pc, #60]	; (8006984 <USB_HostInit+0x178>)
 8006946:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800694a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694c:	2b00      	cmp	r3, #0
 800694e:	d105      	bne.n	800695c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	699b      	ldr	r3, [r3, #24]
 8006954:	f043 0210 	orr.w	r2, r3, #16
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	699a      	ldr	r2, [r3, #24]
 8006960:	4b09      	ldr	r3, [pc, #36]	; (8006988 <USB_HostInit+0x17c>)
 8006962:	4313      	orrs	r3, r2
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006968:	7dfb      	ldrb	r3, [r7, #23]
}
 800696a:	4618      	mov	r0, r3
 800696c:	3718      	adds	r7, #24
 800696e:	46bd      	mov	sp, r7
 8006970:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006974:	b004      	add	sp, #16
 8006976:	4770      	bx	lr
 8006978:	01000200 	.word	0x01000200
 800697c:	00e00300 	.word	0x00e00300
 8006980:	00600080 	.word	0x00600080
 8006984:	004000e0 	.word	0x004000e0
 8006988:	a3200008 	.word	0xa3200008

0800698c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800698c:	b480      	push	{r7}
 800698e:	b085      	sub	sp, #20
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	460b      	mov	r3, r1
 8006996:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	68fa      	ldr	r2, [r7, #12]
 80069a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80069aa:	f023 0303 	bic.w	r3, r3, #3
 80069ae:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	78fb      	ldrb	r3, [r7, #3]
 80069ba:	f003 0303 	and.w	r3, r3, #3
 80069be:	68f9      	ldr	r1, [r7, #12]
 80069c0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80069c4:	4313      	orrs	r3, r2
 80069c6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80069c8:	78fb      	ldrb	r3, [r7, #3]
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d107      	bne.n	80069de <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069d4:	461a      	mov	r2, r3
 80069d6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80069da:	6053      	str	r3, [r2, #4]
 80069dc:	e009      	b.n	80069f2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80069de:	78fb      	ldrb	r3, [r7, #3]
 80069e0:	2b02      	cmp	r3, #2
 80069e2:	d106      	bne.n	80069f2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069ea:	461a      	mov	r2, r3
 80069ec:	f241 7370 	movw	r3, #6000	; 0x1770
 80069f0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80069f2:	2300      	movs	r3, #0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3714      	adds	r7, #20
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006a20:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	68fa      	ldr	r2, [r7, #12]
 8006a26:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006a2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a2e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006a30:	2064      	movs	r0, #100	; 0x64
 8006a32:	f7fb f8d3 	bl	8001bdc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006a3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a42:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006a44:	200a      	movs	r0, #10
 8006a46:	f7fb f8c9 	bl	8001bdc <HAL_Delay>

  return HAL_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3710      	adds	r7, #16
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b085      	sub	sp, #20
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006a64:	2300      	movs	r3, #0
 8006a66:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006a78:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d109      	bne.n	8006a98 <USB_DriveVbus+0x44>
 8006a84:	78fb      	ldrb	r3, [r7, #3]
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d106      	bne.n	8006a98 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006a92:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006a96:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aa2:	d109      	bne.n	8006ab8 <USB_DriveVbus+0x64>
 8006aa4:	78fb      	ldrb	r3, [r7, #3]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d106      	bne.n	8006ab8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006ab2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ab6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3714      	adds	r7, #20
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr

08006ac6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006ac6:	b480      	push	{r7}
 8006ac8:	b085      	sub	sp, #20
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	0c5b      	lsrs	r3, r3, #17
 8006ae4:	f003 0303 	and.w	r3, r3, #3
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3714      	adds	r7, #20
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b085      	sub	sp, #20
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	b29b      	uxth	r3, r3
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3714      	adds	r7, #20
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr
	...

08006b18 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b088      	sub	sp, #32
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	4608      	mov	r0, r1
 8006b22:	4611      	mov	r1, r2
 8006b24:	461a      	mov	r2, r3
 8006b26:	4603      	mov	r3, r0
 8006b28:	70fb      	strb	r3, [r7, #3]
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	70bb      	strb	r3, [r7, #2]
 8006b2e:	4613      	mov	r3, r2
 8006b30:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006b32:	2300      	movs	r3, #0
 8006b34:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006b3a:	78fb      	ldrb	r3, [r7, #3]
 8006b3c:	015a      	lsls	r2, r3, #5
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	4413      	add	r3, r2
 8006b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b46:	461a      	mov	r2, r3
 8006b48:	f04f 33ff 	mov.w	r3, #4294967295
 8006b4c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006b4e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006b52:	2b03      	cmp	r3, #3
 8006b54:	d87e      	bhi.n	8006c54 <USB_HC_Init+0x13c>
 8006b56:	a201      	add	r2, pc, #4	; (adr r2, 8006b5c <USB_HC_Init+0x44>)
 8006b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b5c:	08006b6d 	.word	0x08006b6d
 8006b60:	08006c17 	.word	0x08006c17
 8006b64:	08006b6d 	.word	0x08006b6d
 8006b68:	08006bd9 	.word	0x08006bd9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006b6c:	78fb      	ldrb	r3, [r7, #3]
 8006b6e:	015a      	lsls	r2, r3, #5
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	4413      	add	r3, r2
 8006b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b78:	461a      	mov	r2, r3
 8006b7a:	f240 439d 	movw	r3, #1181	; 0x49d
 8006b7e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006b80:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	da10      	bge.n	8006baa <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006b88:	78fb      	ldrb	r3, [r7, #3]
 8006b8a:	015a      	lsls	r2, r3, #5
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	4413      	add	r3, r2
 8006b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	78fa      	ldrb	r2, [r7, #3]
 8006b98:	0151      	lsls	r1, r2, #5
 8006b9a:	693a      	ldr	r2, [r7, #16]
 8006b9c:	440a      	add	r2, r1
 8006b9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ba2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ba6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006ba8:	e057      	b.n	8006c5a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d051      	beq.n	8006c5a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006bb6:	78fb      	ldrb	r3, [r7, #3]
 8006bb8:	015a      	lsls	r2, r3, #5
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	78fa      	ldrb	r2, [r7, #3]
 8006bc6:	0151      	lsls	r1, r2, #5
 8006bc8:	693a      	ldr	r2, [r7, #16]
 8006bca:	440a      	add	r2, r1
 8006bcc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bd0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006bd4:	60d3      	str	r3, [r2, #12]
      break;
 8006bd6:	e040      	b.n	8006c5a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006bd8:	78fb      	ldrb	r3, [r7, #3]
 8006bda:	015a      	lsls	r2, r3, #5
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	4413      	add	r3, r2
 8006be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006be4:	461a      	mov	r2, r3
 8006be6:	f240 639d 	movw	r3, #1693	; 0x69d
 8006bea:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006bec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	da34      	bge.n	8006c5e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006bf4:	78fb      	ldrb	r3, [r7, #3]
 8006bf6:	015a      	lsls	r2, r3, #5
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	78fa      	ldrb	r2, [r7, #3]
 8006c04:	0151      	lsls	r1, r2, #5
 8006c06:	693a      	ldr	r2, [r7, #16]
 8006c08:	440a      	add	r2, r1
 8006c0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c12:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006c14:	e023      	b.n	8006c5e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006c16:	78fb      	ldrb	r3, [r7, #3]
 8006c18:	015a      	lsls	r2, r3, #5
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c22:	461a      	mov	r2, r3
 8006c24:	f240 2325 	movw	r3, #549	; 0x225
 8006c28:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006c2a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	da17      	bge.n	8006c62 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006c32:	78fb      	ldrb	r3, [r7, #3]
 8006c34:	015a      	lsls	r2, r3, #5
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	4413      	add	r3, r2
 8006c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	78fa      	ldrb	r2, [r7, #3]
 8006c42:	0151      	lsls	r1, r2, #5
 8006c44:	693a      	ldr	r2, [r7, #16]
 8006c46:	440a      	add	r2, r1
 8006c48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c4c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006c50:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006c52:	e006      	b.n	8006c62 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	77fb      	strb	r3, [r7, #31]
      break;
 8006c58:	e004      	b.n	8006c64 <USB_HC_Init+0x14c>
      break;
 8006c5a:	bf00      	nop
 8006c5c:	e002      	b.n	8006c64 <USB_HC_Init+0x14c>
      break;
 8006c5e:	bf00      	nop
 8006c60:	e000      	b.n	8006c64 <USB_HC_Init+0x14c>
      break;
 8006c62:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006c64:	78fb      	ldrb	r3, [r7, #3]
 8006c66:	015a      	lsls	r2, r3, #5
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	78fa      	ldrb	r2, [r7, #3]
 8006c74:	0151      	lsls	r1, r2, #5
 8006c76:	693a      	ldr	r2, [r7, #16]
 8006c78:	440a      	add	r2, r1
 8006c7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c7e:	f043 0302 	orr.w	r3, r3, #2
 8006c82:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c8a:	699a      	ldr	r2, [r3, #24]
 8006c8c:	78fb      	ldrb	r3, [r7, #3]
 8006c8e:	f003 030f 	and.w	r3, r3, #15
 8006c92:	2101      	movs	r1, #1
 8006c94:	fa01 f303 	lsl.w	r3, r1, r3
 8006c98:	6939      	ldr	r1, [r7, #16]
 8006c9a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	699b      	ldr	r3, [r3, #24]
 8006ca6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006cae:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	da03      	bge.n	8006cbe <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006cb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cba:	61bb      	str	r3, [r7, #24]
 8006cbc:	e001      	b.n	8006cc2 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f7ff feff 	bl	8006ac6 <USB_GetHostSpeed>
 8006cc8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006cca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	d106      	bne.n	8006ce0 <USB_HC_Init+0x1c8>
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2b02      	cmp	r3, #2
 8006cd6:	d003      	beq.n	8006ce0 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006cd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006cdc:	617b      	str	r3, [r7, #20]
 8006cde:	e001      	b.n	8006ce4 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006ce4:	787b      	ldrb	r3, [r7, #1]
 8006ce6:	059b      	lsls	r3, r3, #22
 8006ce8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006cec:	78bb      	ldrb	r3, [r7, #2]
 8006cee:	02db      	lsls	r3, r3, #11
 8006cf0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006cf4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006cf6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006cfa:	049b      	lsls	r3, r3, #18
 8006cfc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006d00:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006d02:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006d04:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006d08:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d0e:	78fb      	ldrb	r3, [r7, #3]
 8006d10:	0159      	lsls	r1, r3, #5
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	440b      	add	r3, r1
 8006d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d1a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d20:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006d22:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006d26:	2b03      	cmp	r3, #3
 8006d28:	d003      	beq.n	8006d32 <USB_HC_Init+0x21a>
 8006d2a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d10f      	bne.n	8006d52 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006d32:	78fb      	ldrb	r3, [r7, #3]
 8006d34:	015a      	lsls	r2, r3, #5
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	4413      	add	r3, r2
 8006d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	78fa      	ldrb	r2, [r7, #3]
 8006d42:	0151      	lsls	r1, r2, #5
 8006d44:	693a      	ldr	r2, [r7, #16]
 8006d46:	440a      	add	r2, r1
 8006d48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d50:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006d52:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3720      	adds	r7, #32
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b08c      	sub	sp, #48	; 0x30
 8006d60:	af02      	add	r7, sp, #8
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	60b9      	str	r1, [r7, #8]
 8006d66:	4613      	mov	r3, r2
 8006d68:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	785b      	ldrb	r3, [r3, #1]
 8006d72:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006d74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d78:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d02d      	beq.n	8006de2 <USB_HC_StartXfer+0x86>
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	791b      	ldrb	r3, [r3, #4]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d129      	bne.n	8006de2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006d8e:	79fb      	ldrb	r3, [r7, #7]
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d117      	bne.n	8006dc4 <USB_HC_StartXfer+0x68>
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	79db      	ldrb	r3, [r3, #7]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d003      	beq.n	8006da4 <USB_HC_StartXfer+0x48>
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	79db      	ldrb	r3, [r3, #7]
 8006da0:	2b02      	cmp	r3, #2
 8006da2:	d10f      	bne.n	8006dc4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006da4:	69fb      	ldr	r3, [r7, #28]
 8006da6:	015a      	lsls	r2, r3, #5
 8006da8:	6a3b      	ldr	r3, [r7, #32]
 8006daa:	4413      	add	r3, r2
 8006dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	69fa      	ldr	r2, [r7, #28]
 8006db4:	0151      	lsls	r1, r2, #5
 8006db6:	6a3a      	ldr	r2, [r7, #32]
 8006db8:	440a      	add	r2, r1
 8006dba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dc2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006dc4:	79fb      	ldrb	r3, [r7, #7]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d10b      	bne.n	8006de2 <USB_HC_StartXfer+0x86>
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	795b      	ldrb	r3, [r3, #5]
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d107      	bne.n	8006de2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	785b      	ldrb	r3, [r3, #1]
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	68f8      	ldr	r0, [r7, #12]
 8006dda:	f000 fa0f 	bl	80071fc <USB_DoPing>
      return HAL_OK;
 8006dde:	2300      	movs	r3, #0
 8006de0:	e0f8      	b.n	8006fd4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	695b      	ldr	r3, [r3, #20]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d018      	beq.n	8006e1c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	695b      	ldr	r3, [r3, #20]
 8006dee:	68ba      	ldr	r2, [r7, #8]
 8006df0:	8912      	ldrh	r2, [r2, #8]
 8006df2:	4413      	add	r3, r2
 8006df4:	3b01      	subs	r3, #1
 8006df6:	68ba      	ldr	r2, [r7, #8]
 8006df8:	8912      	ldrh	r2, [r2, #8]
 8006dfa:	fbb3 f3f2 	udiv	r3, r3, r2
 8006dfe:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006e00:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006e02:	8b7b      	ldrh	r3, [r7, #26]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d90b      	bls.n	8006e20 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006e08:	8b7b      	ldrh	r3, [r7, #26]
 8006e0a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006e0c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e0e:	68ba      	ldr	r2, [r7, #8]
 8006e10:	8912      	ldrh	r2, [r2, #8]
 8006e12:	fb03 f202 	mul.w	r2, r3, r2
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	611a      	str	r2, [r3, #16]
 8006e1a:	e001      	b.n	8006e20 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	78db      	ldrb	r3, [r3, #3]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d007      	beq.n	8006e38 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006e28:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e2a:	68ba      	ldr	r2, [r7, #8]
 8006e2c:	8912      	ldrh	r2, [r2, #8]
 8006e2e:	fb03 f202 	mul.w	r2, r3, r2
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	611a      	str	r2, [r3, #16]
 8006e36:	e003      	b.n	8006e40 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	695a      	ldr	r2, [r3, #20]
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	691b      	ldr	r3, [r3, #16]
 8006e44:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006e48:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e4a:	04d9      	lsls	r1, r3, #19
 8006e4c:	4b63      	ldr	r3, [pc, #396]	; (8006fdc <USB_HC_StartXfer+0x280>)
 8006e4e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006e50:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	7a9b      	ldrb	r3, [r3, #10]
 8006e56:	075b      	lsls	r3, r3, #29
 8006e58:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006e5c:	69f9      	ldr	r1, [r7, #28]
 8006e5e:	0148      	lsls	r0, r1, #5
 8006e60:	6a39      	ldr	r1, [r7, #32]
 8006e62:	4401      	add	r1, r0
 8006e64:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006e68:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006e6a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006e6c:	79fb      	ldrb	r3, [r7, #7]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d009      	beq.n	8006e86 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	68d9      	ldr	r1, [r3, #12]
 8006e76:	69fb      	ldr	r3, [r7, #28]
 8006e78:	015a      	lsls	r2, r3, #5
 8006e7a:	6a3b      	ldr	r3, [r7, #32]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e82:	460a      	mov	r2, r1
 8006e84:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006e86:	6a3b      	ldr	r3, [r7, #32]
 8006e88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	f003 0301 	and.w	r3, r3, #1
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	bf0c      	ite	eq
 8006e96:	2301      	moveq	r3, #1
 8006e98:	2300      	movne	r3, #0
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	015a      	lsls	r2, r3, #5
 8006ea2:	6a3b      	ldr	r3, [r7, #32]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	69fa      	ldr	r2, [r7, #28]
 8006eae:	0151      	lsls	r1, r2, #5
 8006eb0:	6a3a      	ldr	r2, [r7, #32]
 8006eb2:	440a      	add	r2, r1
 8006eb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006eb8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006ebc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	015a      	lsls	r2, r3, #5
 8006ec2:	6a3b      	ldr	r3, [r7, #32]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	7e7b      	ldrb	r3, [r7, #25]
 8006ece:	075b      	lsls	r3, r3, #29
 8006ed0:	69f9      	ldr	r1, [r7, #28]
 8006ed2:	0148      	lsls	r0, r1, #5
 8006ed4:	6a39      	ldr	r1, [r7, #32]
 8006ed6:	4401      	add	r1, r0
 8006ed8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006edc:	4313      	orrs	r3, r2
 8006ede:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	015a      	lsls	r2, r3, #5
 8006ee4:	6a3b      	ldr	r3, [r7, #32]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006ef6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	78db      	ldrb	r3, [r3, #3]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d004      	beq.n	8006f0a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f06:	613b      	str	r3, [r7, #16]
 8006f08:	e003      	b.n	8006f12 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f10:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f18:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006f1a:	69fb      	ldr	r3, [r7, #28]
 8006f1c:	015a      	lsls	r2, r3, #5
 8006f1e:	6a3b      	ldr	r3, [r7, #32]
 8006f20:	4413      	add	r3, r2
 8006f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f26:	461a      	mov	r2, r3
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006f2c:	79fb      	ldrb	r3, [r7, #7]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d001      	beq.n	8006f36 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006f32:	2300      	movs	r3, #0
 8006f34:	e04e      	b.n	8006fd4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	78db      	ldrb	r3, [r3, #3]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d149      	bne.n	8006fd2 <USB_HC_StartXfer+0x276>
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	695b      	ldr	r3, [r3, #20]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d045      	beq.n	8006fd2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	79db      	ldrb	r3, [r3, #7]
 8006f4a:	2b03      	cmp	r3, #3
 8006f4c:	d830      	bhi.n	8006fb0 <USB_HC_StartXfer+0x254>
 8006f4e:	a201      	add	r2, pc, #4	; (adr r2, 8006f54 <USB_HC_StartXfer+0x1f8>)
 8006f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f54:	08006f65 	.word	0x08006f65
 8006f58:	08006f89 	.word	0x08006f89
 8006f5c:	08006f65 	.word	0x08006f65
 8006f60:	08006f89 	.word	0x08006f89
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	695b      	ldr	r3, [r3, #20]
 8006f68:	3303      	adds	r3, #3
 8006f6a:	089b      	lsrs	r3, r3, #2
 8006f6c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006f6e:	8afa      	ldrh	r2, [r7, #22]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d91c      	bls.n	8006fb4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	699b      	ldr	r3, [r3, #24]
 8006f7e:	f043 0220 	orr.w	r2, r3, #32
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	619a      	str	r2, [r3, #24]
        }
        break;
 8006f86:	e015      	b.n	8006fb4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	695b      	ldr	r3, [r3, #20]
 8006f8c:	3303      	adds	r3, #3
 8006f8e:	089b      	lsrs	r3, r3, #2
 8006f90:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006f92:	8afa      	ldrh	r2, [r7, #22]
 8006f94:	6a3b      	ldr	r3, [r7, #32]
 8006f96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f9a:	691b      	ldr	r3, [r3, #16]
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d90a      	bls.n	8006fb8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	699b      	ldr	r3, [r3, #24]
 8006fa6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	619a      	str	r2, [r3, #24]
        }
        break;
 8006fae:	e003      	b.n	8006fb8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006fb0:	bf00      	nop
 8006fb2:	e002      	b.n	8006fba <USB_HC_StartXfer+0x25e>
        break;
 8006fb4:	bf00      	nop
 8006fb6:	e000      	b.n	8006fba <USB_HC_StartXfer+0x25e>
        break;
 8006fb8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	68d9      	ldr	r1, [r3, #12]
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	785a      	ldrb	r2, [r3, #1]
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	695b      	ldr	r3, [r3, #20]
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	2000      	movs	r0, #0
 8006fca:	9000      	str	r0, [sp, #0]
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f7ff fb31 	bl	8006634 <USB_WritePacket>
  }

  return HAL_OK;
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3728      	adds	r7, #40	; 0x28
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	1ff80000 	.word	0x1ff80000

08006fe0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b085      	sub	sp, #20
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ff2:	695b      	ldr	r3, [r3, #20]
 8006ff4:	b29b      	uxth	r3, r3
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3714      	adds	r7, #20
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr

08007002 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007002:	b480      	push	{r7}
 8007004:	b089      	sub	sp, #36	; 0x24
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
 800700a:	460b      	mov	r3, r1
 800700c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007012:	78fb      	ldrb	r3, [r7, #3]
 8007014:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007016:	2300      	movs	r3, #0
 8007018:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	015a      	lsls	r2, r3, #5
 800701e:	69fb      	ldr	r3, [r7, #28]
 8007020:	4413      	add	r3, r2
 8007022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	0c9b      	lsrs	r3, r3, #18
 800702a:	f003 0303 	and.w	r3, r3, #3
 800702e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	015a      	lsls	r2, r3, #5
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	4413      	add	r3, r2
 8007038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	0fdb      	lsrs	r3, r3, #31
 8007040:	f003 0301 	and.w	r3, r3, #1
 8007044:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	f003 0320 	and.w	r3, r3, #32
 800704e:	2b20      	cmp	r3, #32
 8007050:	d104      	bne.n	800705c <USB_HC_Halt+0x5a>
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d101      	bne.n	800705c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007058:	2300      	movs	r3, #0
 800705a:	e0c8      	b.n	80071ee <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d002      	beq.n	8007068 <USB_HC_Halt+0x66>
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	2b02      	cmp	r3, #2
 8007066:	d163      	bne.n	8007130 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007068:	69bb      	ldr	r3, [r7, #24]
 800706a:	015a      	lsls	r2, r3, #5
 800706c:	69fb      	ldr	r3, [r7, #28]
 800706e:	4413      	add	r3, r2
 8007070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	69ba      	ldr	r2, [r7, #24]
 8007078:	0151      	lsls	r1, r2, #5
 800707a:	69fa      	ldr	r2, [r7, #28]
 800707c:	440a      	add	r2, r1
 800707e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007082:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007086:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	f003 0320 	and.w	r3, r3, #32
 8007090:	2b00      	cmp	r3, #0
 8007092:	f040 80ab 	bne.w	80071ec <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800709a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d133      	bne.n	800710a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	015a      	lsls	r2, r3, #5
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	4413      	add	r3, r2
 80070aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	69ba      	ldr	r2, [r7, #24]
 80070b2:	0151      	lsls	r1, r2, #5
 80070b4:	69fa      	ldr	r2, [r7, #28]
 80070b6:	440a      	add	r2, r1
 80070b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80070c0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	015a      	lsls	r2, r3, #5
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	4413      	add	r3, r2
 80070ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	69ba      	ldr	r2, [r7, #24]
 80070d2:	0151      	lsls	r1, r2, #5
 80070d4:	69fa      	ldr	r2, [r7, #28]
 80070d6:	440a      	add	r2, r1
 80070d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80070e0:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	3301      	adds	r3, #1
 80070e6:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80070ee:	d81d      	bhi.n	800712c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80070f0:	69bb      	ldr	r3, [r7, #24]
 80070f2:	015a      	lsls	r2, r3, #5
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	4413      	add	r3, r2
 80070f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007102:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007106:	d0ec      	beq.n	80070e2 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007108:	e070      	b.n	80071ec <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	015a      	lsls	r2, r3, #5
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	4413      	add	r3, r2
 8007112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	69ba      	ldr	r2, [r7, #24]
 800711a:	0151      	lsls	r1, r2, #5
 800711c:	69fa      	ldr	r2, [r7, #28]
 800711e:	440a      	add	r2, r1
 8007120:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007124:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007128:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800712a:	e05f      	b.n	80071ec <USB_HC_Halt+0x1ea>
            break;
 800712c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800712e:	e05d      	b.n	80071ec <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007130:	69bb      	ldr	r3, [r7, #24]
 8007132:	015a      	lsls	r2, r3, #5
 8007134:	69fb      	ldr	r3, [r7, #28]
 8007136:	4413      	add	r3, r2
 8007138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	69ba      	ldr	r2, [r7, #24]
 8007140:	0151      	lsls	r1, r2, #5
 8007142:	69fa      	ldr	r2, [r7, #28]
 8007144:	440a      	add	r2, r1
 8007146:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800714a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800714e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007150:	69fb      	ldr	r3, [r7, #28]
 8007152:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007156:	691b      	ldr	r3, [r3, #16]
 8007158:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800715c:	2b00      	cmp	r3, #0
 800715e:	d133      	bne.n	80071c8 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	015a      	lsls	r2, r3, #5
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	4413      	add	r3, r2
 8007168:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	69ba      	ldr	r2, [r7, #24]
 8007170:	0151      	lsls	r1, r2, #5
 8007172:	69fa      	ldr	r2, [r7, #28]
 8007174:	440a      	add	r2, r1
 8007176:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800717a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800717e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	015a      	lsls	r2, r3, #5
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	4413      	add	r3, r2
 8007188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	69ba      	ldr	r2, [r7, #24]
 8007190:	0151      	lsls	r1, r2, #5
 8007192:	69fa      	ldr	r2, [r7, #28]
 8007194:	440a      	add	r2, r1
 8007196:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800719a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800719e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	3301      	adds	r3, #1
 80071a4:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80071ac:	d81d      	bhi.n	80071ea <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	015a      	lsls	r2, r3, #5
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	4413      	add	r3, r2
 80071b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071c4:	d0ec      	beq.n	80071a0 <USB_HC_Halt+0x19e>
 80071c6:	e011      	b.n	80071ec <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	015a      	lsls	r2, r3, #5
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	4413      	add	r3, r2
 80071d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	69ba      	ldr	r2, [r7, #24]
 80071d8:	0151      	lsls	r1, r2, #5
 80071da:	69fa      	ldr	r2, [r7, #28]
 80071dc:	440a      	add	r2, r1
 80071de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80071e6:	6013      	str	r3, [r2, #0]
 80071e8:	e000      	b.n	80071ec <USB_HC_Halt+0x1ea>
          break;
 80071ea:	bf00      	nop
    }
  }

  return HAL_OK;
 80071ec:	2300      	movs	r3, #0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3724      	adds	r7, #36	; 0x24
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr
	...

080071fc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b087      	sub	sp, #28
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	460b      	mov	r3, r1
 8007206:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800720c:	78fb      	ldrb	r3, [r7, #3]
 800720e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007210:	2301      	movs	r3, #1
 8007212:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	04da      	lsls	r2, r3, #19
 8007218:	4b15      	ldr	r3, [pc, #84]	; (8007270 <USB_DoPing+0x74>)
 800721a:	4013      	ands	r3, r2
 800721c:	693a      	ldr	r2, [r7, #16]
 800721e:	0151      	lsls	r1, r2, #5
 8007220:	697a      	ldr	r2, [r7, #20]
 8007222:	440a      	add	r2, r1
 8007224:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007228:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800722c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	015a      	lsls	r2, r3, #5
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	4413      	add	r3, r2
 8007236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007244:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800724c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	015a      	lsls	r2, r3, #5
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	4413      	add	r3, r2
 8007256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800725a:	461a      	mov	r2, r3
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007260:	2300      	movs	r3, #0
}
 8007262:	4618      	mov	r0, r3
 8007264:	371c      	adds	r7, #28
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr
 800726e:	bf00      	nop
 8007270:	1ff80000 	.word	0x1ff80000

08007274 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b088      	sub	sp, #32
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800727c:	2300      	movs	r3, #0
 800727e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007284:	2300      	movs	r3, #0
 8007286:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f7ff f911 	bl	80064b0 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800728e:	2110      	movs	r1, #16
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f7ff f96b 	bl	800656c <USB_FlushTxFifo>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d001      	beq.n	80072a0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800729c:	2301      	movs	r3, #1
 800729e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f7ff f997 	bl	80065d4 <USB_FlushRxFifo>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d001      	beq.n	80072b0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80072b0:	2300      	movs	r3, #0
 80072b2:	61bb      	str	r3, [r7, #24]
 80072b4:	e01f      	b.n	80072f6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	015a      	lsls	r2, r3, #5
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	4413      	add	r3, r2
 80072be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80072cc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80072d4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80072dc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	015a      	lsls	r2, r3, #5
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	4413      	add	r3, r2
 80072e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072ea:	461a      	mov	r2, r3
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	3301      	adds	r3, #1
 80072f4:	61bb      	str	r3, [r7, #24]
 80072f6:	69bb      	ldr	r3, [r7, #24]
 80072f8:	2b0f      	cmp	r3, #15
 80072fa:	d9dc      	bls.n	80072b6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80072fc:	2300      	movs	r3, #0
 80072fe:	61bb      	str	r3, [r7, #24]
 8007300:	e034      	b.n	800736c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	015a      	lsls	r2, r3, #5
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	4413      	add	r3, r2
 800730a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007318:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007320:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007328:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800732a:	69bb      	ldr	r3, [r7, #24]
 800732c:	015a      	lsls	r2, r3, #5
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	4413      	add	r3, r2
 8007332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007336:	461a      	mov	r2, r3
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	3301      	adds	r3, #1
 8007340:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007348:	d80c      	bhi.n	8007364 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	015a      	lsls	r2, r3, #5
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	4413      	add	r3, r2
 8007352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800735c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007360:	d0ec      	beq.n	800733c <USB_StopHost+0xc8>
 8007362:	e000      	b.n	8007366 <USB_StopHost+0xf2>
        break;
 8007364:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007366:	69bb      	ldr	r3, [r7, #24]
 8007368:	3301      	adds	r3, #1
 800736a:	61bb      	str	r3, [r7, #24]
 800736c:	69bb      	ldr	r3, [r7, #24]
 800736e:	2b0f      	cmp	r3, #15
 8007370:	d9c7      	bls.n	8007302 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007378:	461a      	mov	r2, r3
 800737a:	f04f 33ff 	mov.w	r3, #4294967295
 800737e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f04f 32ff 	mov.w	r2, #4294967295
 8007386:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f7ff f880 	bl	800648e <USB_EnableGlobalInt>

  return ret;
 800738e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007390:	4618      	mov	r0, r3
 8007392:	3720      	adds	r7, #32
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007398:	b590      	push	{r4, r7, lr}
 800739a:	b089      	sub	sp, #36	; 0x24
 800739c:	af04      	add	r7, sp, #16
 800739e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80073a0:	2301      	movs	r3, #1
 80073a2:	2202      	movs	r2, #2
 80073a4:	2102      	movs	r1, #2
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 fcb2 	bl	8007d10 <USBH_FindInterface>
 80073ac:	4603      	mov	r3, r0
 80073ae:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80073b0:	7bfb      	ldrb	r3, [r7, #15]
 80073b2:	2bff      	cmp	r3, #255	; 0xff
 80073b4:	d002      	beq.n	80073bc <USBH_CDC_InterfaceInit+0x24>
 80073b6:	7bfb      	ldrb	r3, [r7, #15]
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d901      	bls.n	80073c0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80073bc:	2302      	movs	r3, #2
 80073be:	e13d      	b.n	800763c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80073c0:	7bfb      	ldrb	r3, [r7, #15]
 80073c2:	4619      	mov	r1, r3
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 fc87 	bl	8007cd8 <USBH_SelectInterface>
 80073ca:	4603      	mov	r3, r0
 80073cc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80073ce:	7bbb      	ldrb	r3, [r7, #14]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d001      	beq.n	80073d8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80073d4:	2302      	movs	r3, #2
 80073d6:	e131      	b.n	800763c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80073de:	2050      	movs	r0, #80	; 0x50
 80073e0:	f005 fd86 	bl	800cef0 <malloc>
 80073e4:	4603      	mov	r3, r0
 80073e6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073ee:	69db      	ldr	r3, [r3, #28]
 80073f0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d101      	bne.n	80073fc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80073f8:	2302      	movs	r3, #2
 80073fa:	e11f      	b.n	800763c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80073fc:	2250      	movs	r2, #80	; 0x50
 80073fe:	2100      	movs	r1, #0
 8007400:	68b8      	ldr	r0, [r7, #8]
 8007402:	f005 fe65 	bl	800d0d0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007406:	7bfb      	ldrb	r3, [r7, #15]
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	211a      	movs	r1, #26
 800740c:	fb01 f303 	mul.w	r3, r1, r3
 8007410:	4413      	add	r3, r2
 8007412:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	b25b      	sxtb	r3, r3
 800741a:	2b00      	cmp	r3, #0
 800741c:	da15      	bge.n	800744a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800741e:	7bfb      	ldrb	r3, [r7, #15]
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	211a      	movs	r1, #26
 8007424:	fb01 f303 	mul.w	r3, r1, r3
 8007428:	4413      	add	r3, r2
 800742a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800742e:	781a      	ldrb	r2, [r3, #0]
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007434:	7bfb      	ldrb	r3, [r7, #15]
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	211a      	movs	r1, #26
 800743a:	fb01 f303 	mul.w	r3, r1, r3
 800743e:	4413      	add	r3, r2
 8007440:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007444:	881a      	ldrh	r2, [r3, #0]
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	785b      	ldrb	r3, [r3, #1]
 800744e:	4619      	mov	r1, r3
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f002 f986 	bl	8009762 <USBH_AllocPipe>
 8007456:	4603      	mov	r3, r0
 8007458:	461a      	mov	r2, r3
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	7819      	ldrb	r1, [r3, #0]
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	7858      	ldrb	r0, [r3, #1]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007472:	68ba      	ldr	r2, [r7, #8]
 8007474:	8952      	ldrh	r2, [r2, #10]
 8007476:	9202      	str	r2, [sp, #8]
 8007478:	2203      	movs	r2, #3
 800747a:	9201      	str	r2, [sp, #4]
 800747c:	9300      	str	r3, [sp, #0]
 800747e:	4623      	mov	r3, r4
 8007480:	4602      	mov	r2, r0
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f002 f93e 	bl	8009704 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	2200      	movs	r2, #0
 800748e:	4619      	mov	r1, r3
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f005 fca9 	bl	800cde8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007496:	2300      	movs	r3, #0
 8007498:	2200      	movs	r2, #0
 800749a:	210a      	movs	r1, #10
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 fc37 	bl	8007d10 <USBH_FindInterface>
 80074a2:	4603      	mov	r3, r0
 80074a4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80074a6:	7bfb      	ldrb	r3, [r7, #15]
 80074a8:	2bff      	cmp	r3, #255	; 0xff
 80074aa:	d002      	beq.n	80074b2 <USBH_CDC_InterfaceInit+0x11a>
 80074ac:	7bfb      	ldrb	r3, [r7, #15]
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d901      	bls.n	80074b6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80074b2:	2302      	movs	r3, #2
 80074b4:	e0c2      	b.n	800763c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80074b6:	7bfb      	ldrb	r3, [r7, #15]
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	211a      	movs	r1, #26
 80074bc:	fb01 f303 	mul.w	r3, r1, r3
 80074c0:	4413      	add	r3, r2
 80074c2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	b25b      	sxtb	r3, r3
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	da16      	bge.n	80074fc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80074ce:	7bfb      	ldrb	r3, [r7, #15]
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	211a      	movs	r1, #26
 80074d4:	fb01 f303 	mul.w	r3, r1, r3
 80074d8:	4413      	add	r3, r2
 80074da:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80074de:	781a      	ldrb	r2, [r3, #0]
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80074e4:	7bfb      	ldrb	r3, [r7, #15]
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	211a      	movs	r1, #26
 80074ea:	fb01 f303 	mul.w	r3, r1, r3
 80074ee:	4413      	add	r3, r2
 80074f0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80074f4:	881a      	ldrh	r2, [r3, #0]
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	835a      	strh	r2, [r3, #26]
 80074fa:	e015      	b.n	8007528 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80074fc:	7bfb      	ldrb	r3, [r7, #15]
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	211a      	movs	r1, #26
 8007502:	fb01 f303 	mul.w	r3, r1, r3
 8007506:	4413      	add	r3, r2
 8007508:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800750c:	781a      	ldrb	r2, [r3, #0]
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007512:	7bfb      	ldrb	r3, [r7, #15]
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	211a      	movs	r1, #26
 8007518:	fb01 f303 	mul.w	r3, r1, r3
 800751c:	4413      	add	r3, r2
 800751e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007522:	881a      	ldrh	r2, [r3, #0]
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007528:	7bfb      	ldrb	r3, [r7, #15]
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	211a      	movs	r1, #26
 800752e:	fb01 f303 	mul.w	r3, r1, r3
 8007532:	4413      	add	r3, r2
 8007534:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	b25b      	sxtb	r3, r3
 800753c:	2b00      	cmp	r3, #0
 800753e:	da16      	bge.n	800756e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007540:	7bfb      	ldrb	r3, [r7, #15]
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	211a      	movs	r1, #26
 8007546:	fb01 f303 	mul.w	r3, r1, r3
 800754a:	4413      	add	r3, r2
 800754c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007550:	781a      	ldrb	r2, [r3, #0]
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007556:	7bfb      	ldrb	r3, [r7, #15]
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	211a      	movs	r1, #26
 800755c:	fb01 f303 	mul.w	r3, r1, r3
 8007560:	4413      	add	r3, r2
 8007562:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007566:	881a      	ldrh	r2, [r3, #0]
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	835a      	strh	r2, [r3, #26]
 800756c:	e015      	b.n	800759a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800756e:	7bfb      	ldrb	r3, [r7, #15]
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	211a      	movs	r1, #26
 8007574:	fb01 f303 	mul.w	r3, r1, r3
 8007578:	4413      	add	r3, r2
 800757a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800757e:	781a      	ldrb	r2, [r3, #0]
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007584:	7bfb      	ldrb	r3, [r7, #15]
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	211a      	movs	r1, #26
 800758a:	fb01 f303 	mul.w	r3, r1, r3
 800758e:	4413      	add	r3, r2
 8007590:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007594:	881a      	ldrh	r2, [r3, #0]
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	7b9b      	ldrb	r3, [r3, #14]
 800759e:	4619      	mov	r1, r3
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f002 f8de 	bl	8009762 <USBH_AllocPipe>
 80075a6:	4603      	mov	r3, r0
 80075a8:	461a      	mov	r2, r3
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	7bdb      	ldrb	r3, [r3, #15]
 80075b2:	4619      	mov	r1, r3
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f002 f8d4 	bl	8009762 <USBH_AllocPipe>
 80075ba:	4603      	mov	r3, r0
 80075bc:	461a      	mov	r2, r3
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	7b59      	ldrb	r1, [r3, #13]
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	7b98      	ldrb	r0, [r3, #14]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80075d6:	68ba      	ldr	r2, [r7, #8]
 80075d8:	8b12      	ldrh	r2, [r2, #24]
 80075da:	9202      	str	r2, [sp, #8]
 80075dc:	2202      	movs	r2, #2
 80075de:	9201      	str	r2, [sp, #4]
 80075e0:	9300      	str	r3, [sp, #0]
 80075e2:	4623      	mov	r3, r4
 80075e4:	4602      	mov	r2, r0
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f002 f88c 	bl	8009704 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	7b19      	ldrb	r1, [r3, #12]
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	7bd8      	ldrb	r0, [r3, #15]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007600:	68ba      	ldr	r2, [r7, #8]
 8007602:	8b52      	ldrh	r2, [r2, #26]
 8007604:	9202      	str	r2, [sp, #8]
 8007606:	2202      	movs	r2, #2
 8007608:	9201      	str	r2, [sp, #4]
 800760a:	9300      	str	r3, [sp, #0]
 800760c:	4623      	mov	r3, r4
 800760e:	4602      	mov	r2, r0
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f002 f877 	bl	8009704 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	2200      	movs	r2, #0
 800761a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	7b5b      	ldrb	r3, [r3, #13]
 8007622:	2200      	movs	r2, #0
 8007624:	4619      	mov	r1, r3
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f005 fbde 	bl	800cde8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	7b1b      	ldrb	r3, [r3, #12]
 8007630:	2200      	movs	r2, #0
 8007632:	4619      	mov	r1, r3
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f005 fbd7 	bl	800cde8 <USBH_LL_SetToggle>

  return USBH_OK;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	3714      	adds	r7, #20
 8007640:	46bd      	mov	sp, r7
 8007642:	bd90      	pop	{r4, r7, pc}

08007644 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007652:	69db      	ldr	r3, [r3, #28]
 8007654:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00e      	beq.n	800767c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	4619      	mov	r1, r3
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f002 f86c 	bl	8009742 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	4619      	mov	r1, r3
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f002 f897 	bl	80097a4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2200      	movs	r2, #0
 800767a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	7b1b      	ldrb	r3, [r3, #12]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d00e      	beq.n	80076a2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	7b1b      	ldrb	r3, [r3, #12]
 8007688:	4619      	mov	r1, r3
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f002 f859 	bl	8009742 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	7b1b      	ldrb	r3, [r3, #12]
 8007694:	4619      	mov	r1, r3
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f002 f884 	bl	80097a4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2200      	movs	r2, #0
 80076a0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	7b5b      	ldrb	r3, [r3, #13]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d00e      	beq.n	80076c8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	7b5b      	ldrb	r3, [r3, #13]
 80076ae:	4619      	mov	r1, r3
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f002 f846 	bl	8009742 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	7b5b      	ldrb	r3, [r3, #13]
 80076ba:	4619      	mov	r1, r3
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f002 f871 	bl	80097a4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2200      	movs	r2, #0
 80076c6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076ce:	69db      	ldr	r3, [r3, #28]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d00b      	beq.n	80076ec <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076da:	69db      	ldr	r3, [r3, #28]
 80076dc:	4618      	mov	r0, r3
 80076de:	f005 fc0f 	bl	800cf00 <free>
    phost->pActiveClass->pData = 0U;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076e8:	2200      	movs	r2, #0
 80076ea:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80076ec:	2300      	movs	r3, #0
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3710      	adds	r7, #16
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b084      	sub	sp, #16
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007704:	69db      	ldr	r3, [r3, #28]
 8007706:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	3340      	adds	r3, #64	; 0x40
 800770c:	4619      	mov	r1, r3
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 f8b1 	bl	8007876 <GetLineCoding>
 8007714:	4603      	mov	r3, r0
 8007716:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007718:	7afb      	ldrb	r3, [r7, #11]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d105      	bne.n	800772a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007724:	2102      	movs	r1, #2
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800772a:	7afb      	ldrb	r3, [r7, #11]
}
 800772c:	4618      	mov	r0, r3
 800772e:	3710      	adds	r7, #16
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800773c:	2301      	movs	r3, #1
 800773e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007740:	2300      	movs	r3, #0
 8007742:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800774a:	69db      	ldr	r3, [r3, #28]
 800774c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007754:	2b04      	cmp	r3, #4
 8007756:	d877      	bhi.n	8007848 <USBH_CDC_Process+0x114>
 8007758:	a201      	add	r2, pc, #4	; (adr r2, 8007760 <USBH_CDC_Process+0x2c>)
 800775a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800775e:	bf00      	nop
 8007760:	08007775 	.word	0x08007775
 8007764:	0800777b 	.word	0x0800777b
 8007768:	080077ab 	.word	0x080077ab
 800776c:	0800781f 	.word	0x0800781f
 8007770:	0800782d 	.word	0x0800782d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007774:	2300      	movs	r3, #0
 8007776:	73fb      	strb	r3, [r7, #15]
      break;
 8007778:	e06d      	b.n	8007856 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800777e:	4619      	mov	r1, r3
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 f897 	bl	80078b4 <SetLineCoding>
 8007786:	4603      	mov	r3, r0
 8007788:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800778a:	7bbb      	ldrb	r3, [r7, #14]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d104      	bne.n	800779a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	2202      	movs	r2, #2
 8007794:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007798:	e058      	b.n	800784c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800779a:	7bbb      	ldrb	r3, [r7, #14]
 800779c:	2b01      	cmp	r3, #1
 800779e:	d055      	beq.n	800784c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	2204      	movs	r2, #4
 80077a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80077a8:	e050      	b.n	800784c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	3340      	adds	r3, #64	; 0x40
 80077ae:	4619      	mov	r1, r3
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 f860 	bl	8007876 <GetLineCoding>
 80077b6:	4603      	mov	r3, r0
 80077b8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80077ba:	7bbb      	ldrb	r3, [r7, #14]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d126      	bne.n	800780e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	2200      	movs	r2, #0
 80077c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077d2:	791b      	ldrb	r3, [r3, #4]
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d13b      	bne.n	8007850 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077e2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d133      	bne.n	8007850 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077f2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d12b      	bne.n	8007850 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007800:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007802:	429a      	cmp	r2, r3
 8007804:	d124      	bne.n	8007850 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 f982 	bl	8007b10 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800780c:	e020      	b.n	8007850 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800780e:	7bbb      	ldrb	r3, [r7, #14]
 8007810:	2b01      	cmp	r3, #1
 8007812:	d01d      	beq.n	8007850 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	2204      	movs	r2, #4
 8007818:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800781c:	e018      	b.n	8007850 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 f867 	bl	80078f2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 f8f6 	bl	8007a16 <CDC_ProcessReception>
      break;
 800782a:	e014      	b.n	8007856 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800782c:	2100      	movs	r1, #0
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f001 f957 	bl	8008ae2 <USBH_ClrFeature>
 8007834:	4603      	mov	r3, r0
 8007836:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007838:	7bbb      	ldrb	r3, [r7, #14]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d10a      	bne.n	8007854 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	2200      	movs	r2, #0
 8007842:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007846:	e005      	b.n	8007854 <USBH_CDC_Process+0x120>

    default:
      break;
 8007848:	bf00      	nop
 800784a:	e004      	b.n	8007856 <USBH_CDC_Process+0x122>
      break;
 800784c:	bf00      	nop
 800784e:	e002      	b.n	8007856 <USBH_CDC_Process+0x122>
      break;
 8007850:	bf00      	nop
 8007852:	e000      	b.n	8007856 <USBH_CDC_Process+0x122>
      break;
 8007854:	bf00      	nop

  }

  return status;
 8007856:	7bfb      	ldrb	r3, [r7, #15]
}
 8007858:	4618      	mov	r0, r3
 800785a:	3710      	adds	r7, #16
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007868:	2300      	movs	r3, #0
}
 800786a:	4618      	mov	r0, r3
 800786c:	370c      	adds	r7, #12
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr

08007876 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007876:	b580      	push	{r7, lr}
 8007878:	b082      	sub	sp, #8
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
 800787e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	22a1      	movs	r2, #161	; 0xa1
 8007884:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2221      	movs	r2, #33	; 0x21
 800788a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2207      	movs	r2, #7
 800789c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	2207      	movs	r2, #7
 80078a2:	4619      	mov	r1, r3
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f001 fbeb 	bl	8009080 <USBH_CtlReq>
 80078aa:	4603      	mov	r3, r0
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3708      	adds	r7, #8
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b082      	sub	sp, #8
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2221      	movs	r2, #33	; 0x21
 80078c2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2220      	movs	r2, #32
 80078c8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2200      	movs	r2, #0
 80078ce:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2207      	movs	r2, #7
 80078da:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	2207      	movs	r2, #7
 80078e0:	4619      	mov	r1, r3
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f001 fbcc 	bl	8009080 <USBH_CtlReq>
 80078e8:	4603      	mov	r3, r0
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3708      	adds	r7, #8
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b086      	sub	sp, #24
 80078f6:	af02      	add	r7, sp, #8
 80078f8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007900:	69db      	ldr	r3, [r3, #28]
 8007902:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007904:	2300      	movs	r3, #0
 8007906:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800790e:	2b01      	cmp	r3, #1
 8007910:	d002      	beq.n	8007918 <CDC_ProcessTransmission+0x26>
 8007912:	2b02      	cmp	r3, #2
 8007914:	d023      	beq.n	800795e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007916:	e07a      	b.n	8007a0e <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	8b12      	ldrh	r2, [r2, #24]
 8007920:	4293      	cmp	r3, r2
 8007922:	d90b      	bls.n	800793c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	69d9      	ldr	r1, [r3, #28]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	8b1a      	ldrh	r2, [r3, #24]
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	7b5b      	ldrb	r3, [r3, #13]
 8007930:	2001      	movs	r0, #1
 8007932:	9000      	str	r0, [sp, #0]
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f001 fea2 	bl	800967e <USBH_BulkSendData>
 800793a:	e00b      	b.n	8007954 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8007944:	b29a      	uxth	r2, r3
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	7b5b      	ldrb	r3, [r3, #13]
 800794a:	2001      	movs	r0, #1
 800794c:	9000      	str	r0, [sp, #0]
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f001 fe95 	bl	800967e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2202      	movs	r2, #2
 8007958:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800795c:	e057      	b.n	8007a0e <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	7b5b      	ldrb	r3, [r3, #13]
 8007962:	4619      	mov	r1, r3
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f005 fa15 	bl	800cd94 <USBH_LL_GetURBState>
 800796a:	4603      	mov	r3, r0
 800796c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800796e:	7afb      	ldrb	r3, [r7, #11]
 8007970:	2b01      	cmp	r3, #1
 8007972:	d136      	bne.n	80079e2 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007978:	68fa      	ldr	r2, [r7, #12]
 800797a:	8b12      	ldrh	r2, [r2, #24]
 800797c:	4293      	cmp	r3, r2
 800797e:	d90e      	bls.n	800799e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007984:	68fa      	ldr	r2, [r7, #12]
 8007986:	8b12      	ldrh	r2, [r2, #24]
 8007988:	1a9a      	subs	r2, r3, r2
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	69db      	ldr	r3, [r3, #28]
 8007992:	68fa      	ldr	r2, [r7, #12]
 8007994:	8b12      	ldrh	r2, [r2, #24]
 8007996:	441a      	add	r2, r3
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	61da      	str	r2, [r3, #28]
 800799c:	e002      	b.n	80079a4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2200      	movs	r2, #0
 80079a2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d004      	beq.n	80079b6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2201      	movs	r2, #1
 80079b0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80079b4:	e006      	b.n	80079c4 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 f892 	bl	8007ae8 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2204      	movs	r2, #4
 80079c8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80079d8:	2300      	movs	r3, #0
 80079da:	2200      	movs	r2, #0
 80079dc:	f002 f8f8 	bl	8009bd0 <osMessageQueuePut>
      break;
 80079e0:	e014      	b.n	8007a0c <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 80079e2:	7afb      	ldrb	r3, [r7, #11]
 80079e4:	2b02      	cmp	r3, #2
 80079e6:	d111      	bne.n	8007a0c <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2204      	movs	r2, #4
 80079f4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007a04:	2300      	movs	r3, #0
 8007a06:	2200      	movs	r2, #0
 8007a08:	f002 f8e2 	bl	8009bd0 <osMessageQueuePut>
      break;
 8007a0c:	bf00      	nop
  }
}
 8007a0e:	bf00      	nop
 8007a10:	3710      	adds	r7, #16
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007a16:	b580      	push	{r7, lr}
 8007a18:	b086      	sub	sp, #24
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a24:	69db      	ldr	r3, [r3, #28]
 8007a26:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007a32:	2b03      	cmp	r3, #3
 8007a34:	d002      	beq.n	8007a3c <CDC_ProcessReception+0x26>
 8007a36:	2b04      	cmp	r3, #4
 8007a38:	d00e      	beq.n	8007a58 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007a3a:	e051      	b.n	8007ae0 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	6a19      	ldr	r1, [r3, #32]
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	8b5a      	ldrh	r2, [r3, #26]
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	7b1b      	ldrb	r3, [r3, #12]
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f001 fe3d 	bl	80096c8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	2204      	movs	r2, #4
 8007a52:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007a56:	e043      	b.n	8007ae0 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	7b1b      	ldrb	r3, [r3, #12]
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f005 f998 	bl	800cd94 <USBH_LL_GetURBState>
 8007a64:	4603      	mov	r3, r0
 8007a66:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007a68:	7cfb      	ldrb	r3, [r7, #19]
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d137      	bne.n	8007ade <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	7b1b      	ldrb	r3, [r3, #12]
 8007a72:	4619      	mov	r1, r3
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f005 f8fb 	bl	800cc70 <USBH_LL_GetLastXferSize>
 8007a7a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a80:	68fa      	ldr	r2, [r7, #12]
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d016      	beq.n	8007ab4 <CDC_ProcessReception+0x9e>
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	8b5b      	ldrh	r3, [r3, #26]
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d910      	bls.n	8007ab4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	1ad2      	subs	r2, r2, r3
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	6a1a      	ldr	r2, [r3, #32]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	441a      	add	r2, r3
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	2203      	movs	r2, #3
 8007aae:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8007ab2:	e006      	b.n	8007ac2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 f81d 	bl	8007afc <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2204      	movs	r2, #4
 8007ac6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f002 f879 	bl	8009bd0 <osMessageQueuePut>
      break;
 8007ade:	bf00      	nop
  }
}
 8007ae0:	bf00      	nop
 8007ae2:	3718      	adds	r7, #24
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007af0:	bf00      	nop
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007b04:	bf00      	nop
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b083      	sub	sp, #12
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007b18:	bf00      	nop
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	60f8      	str	r0, [r7, #12]
 8007b2c:	60b9      	str	r1, [r7, #8]
 8007b2e:	4613      	mov	r3, r2
 8007b30:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d101      	bne.n	8007b3c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007b38:	2302      	movs	r3, #2
 8007b3a:	e044      	b.n	8007bc6 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	79fa      	ldrb	r2, [r7, #7]
 8007b40:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2200      	movs	r2, #0
 8007b48:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007b54:	68f8      	ldr	r0, [r7, #12]
 8007b56:	f000 f841 	bl	8007bdc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2200      	movs	r2, #0
 8007b76:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d003      	beq.n	8007b88 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	68ba      	ldr	r2, [r7, #8]
 8007b84:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8007b88:	2200      	movs	r2, #0
 8007b8a:	2104      	movs	r1, #4
 8007b8c:	2010      	movs	r0, #16
 8007b8e:	f001 ffac 	bl	8009aea <osMessageQueueNew>
 8007b92:	4602      	mov	r2, r0
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 8007b9a:	4b0d      	ldr	r3, [pc, #52]	; (8007bd0 <USBH_Init+0xac>)
 8007b9c:	4a0d      	ldr	r2, [pc, #52]	; (8007bd4 <USBH_Init+0xb0>)
 8007b9e:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 8007ba0:	4b0b      	ldr	r3, [pc, #44]	; (8007bd0 <USBH_Init+0xac>)
 8007ba2:	2280      	movs	r2, #128	; 0x80
 8007ba4:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 8007ba6:	4b0a      	ldr	r3, [pc, #40]	; (8007bd0 <USBH_Init+0xac>)
 8007ba8:	2218      	movs	r2, #24
 8007baa:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8007bac:	4a08      	ldr	r2, [pc, #32]	; (8007bd0 <USBH_Init+0xac>)
 8007bae:	68f9      	ldr	r1, [r7, #12]
 8007bb0:	4809      	ldr	r0, [pc, #36]	; (8007bd8 <USBH_Init+0xb4>)
 8007bb2:	f001 fec7 	bl	8009944 <osThreadNew>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007bbe:	68f8      	ldr	r0, [r7, #12]
 8007bc0:	f004 ffa2 	bl	800cb08 <USBH_LL_Init>

  return USBH_OK;
 8007bc4:	2300      	movs	r3, #0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3710      	adds	r7, #16
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	2000028c 	.word	0x2000028c
 8007bd4:	0800da04 	.word	0x0800da04
 8007bd8:	08008859 	.word	0x08008859

08007bdc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b085      	sub	sp, #20
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007be4:	2300      	movs	r3, #0
 8007be6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007be8:	2300      	movs	r3, #0
 8007bea:	60fb      	str	r3, [r7, #12]
 8007bec:	e009      	b.n	8007c02 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	33e0      	adds	r3, #224	; 0xe0
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	4413      	add	r3, r2
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	3301      	adds	r3, #1
 8007c00:	60fb      	str	r3, [r7, #12]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2b0f      	cmp	r3, #15
 8007c06:	d9f2      	bls.n	8007bee <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007c08:	2300      	movs	r3, #0
 8007c0a:	60fb      	str	r3, [r7, #12]
 8007c0c:	e009      	b.n	8007c22 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	4413      	add	r3, r2
 8007c14:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007c18:	2200      	movs	r2, #0
 8007c1a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	3301      	adds	r3, #1
 8007c20:	60fb      	str	r3, [r7, #12]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c28:	d3f1      	bcc.n	8007c0e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2201      	movs	r2, #1
 8007c3a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2201      	movs	r2, #1
 8007c48:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2240      	movs	r2, #64	; 0x40
 8007c4e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2201      	movs	r2, #1
 8007c62:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2200      	movs	r2, #0
 8007c72:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007c76:	2300      	movs	r3, #0
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3714      	adds	r7, #20
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b085      	sub	sp, #20
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d016      	beq.n	8007cc6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d10e      	bne.n	8007cc0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007ca8:	1c59      	adds	r1, r3, #1
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	33de      	adds	r3, #222	; 0xde
 8007cb4:	6839      	ldr	r1, [r7, #0]
 8007cb6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	73fb      	strb	r3, [r7, #15]
 8007cbe:	e004      	b.n	8007cca <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007cc0:	2302      	movs	r3, #2
 8007cc2:	73fb      	strb	r3, [r7, #15]
 8007cc4:	e001      	b.n	8007cca <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007cc6:	2302      	movs	r3, #2
 8007cc8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3714      	adds	r7, #20
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b085      	sub	sp, #20
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007cee:	78fa      	ldrb	r2, [r7, #3]
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d204      	bcs.n	8007cfe <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	78fa      	ldrb	r2, [r7, #3]
 8007cf8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007cfc:	e001      	b.n	8007d02 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007cfe:	2302      	movs	r3, #2
 8007d00:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3714      	adds	r7, #20
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr

08007d10 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b087      	sub	sp, #28
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	4608      	mov	r0, r1
 8007d1a:	4611      	mov	r1, r2
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	4603      	mov	r3, r0
 8007d20:	70fb      	strb	r3, [r7, #3]
 8007d22:	460b      	mov	r3, r1
 8007d24:	70bb      	strb	r3, [r7, #2]
 8007d26:	4613      	mov	r3, r2
 8007d28:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007d38:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007d3a:	e025      	b.n	8007d88 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007d3c:	7dfb      	ldrb	r3, [r7, #23]
 8007d3e:	221a      	movs	r2, #26
 8007d40:	fb02 f303 	mul.w	r3, r2, r3
 8007d44:	3308      	adds	r3, #8
 8007d46:	68fa      	ldr	r2, [r7, #12]
 8007d48:	4413      	add	r3, r2
 8007d4a:	3302      	adds	r3, #2
 8007d4c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	795b      	ldrb	r3, [r3, #5]
 8007d52:	78fa      	ldrb	r2, [r7, #3]
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d002      	beq.n	8007d5e <USBH_FindInterface+0x4e>
 8007d58:	78fb      	ldrb	r3, [r7, #3]
 8007d5a:	2bff      	cmp	r3, #255	; 0xff
 8007d5c:	d111      	bne.n	8007d82 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007d62:	78ba      	ldrb	r2, [r7, #2]
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d002      	beq.n	8007d6e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007d68:	78bb      	ldrb	r3, [r7, #2]
 8007d6a:	2bff      	cmp	r3, #255	; 0xff
 8007d6c:	d109      	bne.n	8007d82 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007d72:	787a      	ldrb	r2, [r7, #1]
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d002      	beq.n	8007d7e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007d78:	787b      	ldrb	r3, [r7, #1]
 8007d7a:	2bff      	cmp	r3, #255	; 0xff
 8007d7c:	d101      	bne.n	8007d82 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007d7e:	7dfb      	ldrb	r3, [r7, #23]
 8007d80:	e006      	b.n	8007d90 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007d82:	7dfb      	ldrb	r3, [r7, #23]
 8007d84:	3301      	adds	r3, #1
 8007d86:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007d88:	7dfb      	ldrb	r3, [r7, #23]
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d9d6      	bls.n	8007d3c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007d8e:	23ff      	movs	r3, #255	; 0xff
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	371c      	adds	r7, #28
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b082      	sub	sp, #8
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f004 feeb 	bl	800cb80 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007daa:	2101      	movs	r1, #1
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f005 f804 	bl	800cdba <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007db2:	2300      	movs	r3, #0
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3708      	adds	r7, #8
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b088      	sub	sp, #32
 8007dc0:	af04      	add	r7, sp, #16
 8007dc2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007dc4:	2302      	movs	r3, #2
 8007dc6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d102      	bne.n	8007dde <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2203      	movs	r2, #3
 8007ddc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	2b0b      	cmp	r3, #11
 8007de6:	f200 8247 	bhi.w	8008278 <USBH_Process+0x4bc>
 8007dea:	a201      	add	r2, pc, #4	; (adr r2, 8007df0 <USBH_Process+0x34>)
 8007dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df0:	08007e21 	.word	0x08007e21
 8007df4:	08007e6f 	.word	0x08007e6f
 8007df8:	08007ef3 	.word	0x08007ef3
 8007dfc:	080081f7 	.word	0x080081f7
 8007e00:	08008279 	.word	0x08008279
 8007e04:	08007fb3 	.word	0x08007fb3
 8007e08:	08008181 	.word	0x08008181
 8007e0c:	08008005 	.word	0x08008005
 8007e10:	08008041 	.word	0x08008041
 8007e14:	0800807b 	.word	0x0800807b
 8007e18:	080080d9 	.word	0x080080d9
 8007e1c:	080081df 	.word	0x080081df
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	f000 8227 	beq.w	800827c <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2201      	movs	r2, #1
 8007e32:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007e34:	20c8      	movs	r0, #200	; 0xc8
 8007e36:	f005 f807 	bl	800ce48 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f004 fefd 	bl	800cc3a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2201      	movs	r2, #1
 8007e54:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007e64:	2300      	movs	r3, #0
 8007e66:	2200      	movs	r2, #0
 8007e68:	f001 feb2 	bl	8009bd0 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8007e6c:	e206      	b.n	800827c <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d107      	bne.n	8007e88 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2202      	movs	r2, #2
 8007e84:	701a      	strb	r2, [r3, #0]
 8007e86:	e025      	b.n	8007ed4 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007e8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e92:	d914      	bls.n	8007ebe <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	b2da      	uxtb	r2, r3
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007eaa:	2b03      	cmp	r3, #3
 8007eac:	d903      	bls.n	8007eb6 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	220d      	movs	r2, #13
 8007eb2:	701a      	strb	r2, [r3, #0]
 8007eb4:	e00e      	b.n	8007ed4 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	701a      	strb	r2, [r3, #0]
 8007ebc:	e00a      	b.n	8007ed4 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007ec4:	f103 020a 	add.w	r2, r3, #10
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007ece:	200a      	movs	r0, #10
 8007ed0:	f004 ffba 	bl	800ce48 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007ee8:	2300      	movs	r3, #0
 8007eea:	2200      	movs	r2, #0
 8007eec:	f001 fe70 	bl	8009bd0 <osMessageQueuePut>
#endif
#endif
      break;
 8007ef0:	e1cb      	b.n	800828a <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d005      	beq.n	8007f08 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f02:	2104      	movs	r1, #4
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007f08:	2064      	movs	r0, #100	; 0x64
 8007f0a:	f004 ff9d 	bl	800ce48 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f004 fe6c 	bl	800cbec <USBH_LL_GetSpeed>
 8007f14:	4603      	mov	r3, r0
 8007f16:	461a      	mov	r2, r3
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2205      	movs	r2, #5
 8007f22:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007f24:	2100      	movs	r1, #0
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f001 fc1b 	bl	8009762 <USBH_AllocPipe>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	461a      	mov	r2, r3
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007f34:	2180      	movs	r1, #128	; 0x80
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f001 fc13 	bl	8009762 <USBH_AllocPipe>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	461a      	mov	r2, r3
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	7919      	ldrb	r1, [r3, #4]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007f58:	b292      	uxth	r2, r2
 8007f5a:	9202      	str	r2, [sp, #8]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	9201      	str	r2, [sp, #4]
 8007f60:	9300      	str	r3, [sp, #0]
 8007f62:	4603      	mov	r3, r0
 8007f64:	2280      	movs	r2, #128	; 0x80
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f001 fbcc 	bl	8009704 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	7959      	ldrb	r1, [r3, #5]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007f80:	b292      	uxth	r2, r2
 8007f82:	9202      	str	r2, [sp, #8]
 8007f84:	2200      	movs	r2, #0
 8007f86:	9201      	str	r2, [sp, #4]
 8007f88:	9300      	str	r3, [sp, #0]
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f001 fbb8 	bl	8009704 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2201      	movs	r2, #1
 8007f98:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007fa8:	2300      	movs	r3, #0
 8007faa:	2200      	movs	r2, #0
 8007fac:	f001 fe10 	bl	8009bd0 <osMessageQueuePut>
#endif
#endif
      break;
 8007fb0:	e16b      	b.n	800828a <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 f96e 	bl	8008294 <USBH_HandleEnum>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007fbc:	7bbb      	ldrb	r3, [r7, #14]
 8007fbe:	b2db      	uxtb	r3, r3
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	f040 815d 	bne.w	8008280 <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d103      	bne.n	8007fe0 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2208      	movs	r2, #8
 8007fdc:	701a      	strb	r2, [r3, #0]
 8007fde:	e002      	b.n	8007fe6 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2207      	movs	r2, #7
 8007fe4:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2205      	movs	r2, #5
 8007fea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	f001 fde7 	bl	8009bd0 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8008002:	e13d      	b.n	8008280 <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800800a:	2b00      	cmp	r3, #0
 800800c:	f000 813a 	beq.w	8008284 <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008016:	2101      	movs	r1, #1
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2208      	movs	r2, #8
 8008020:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2205      	movs	r2, #5
 8008026:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008036:	2300      	movs	r3, #0
 8008038:	2200      	movs	r2, #0
 800803a:	f001 fdc9 	bl	8009bd0 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800803e:	e121      	b.n	8008284 <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008046:	b29b      	uxth	r3, r3
 8008048:	4619      	mov	r1, r3
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 fd02 	bl	8008a54 <USBH_SetCfg>
 8008050:	4603      	mov	r3, r0
 8008052:	2b00      	cmp	r3, #0
 8008054:	d102      	bne.n	800805c <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2209      	movs	r2, #9
 800805a:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008070:	2300      	movs	r3, #0
 8008072:	2200      	movs	r2, #0
 8008074:	f001 fdac 	bl	8009bd0 <osMessageQueuePut>
#endif
#endif
      break;
 8008078:	e107      	b.n	800828a <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8008080:	f003 0320 	and.w	r3, r3, #32
 8008084:	2b00      	cmp	r3, #0
 8008086:	d015      	beq.n	80080b4 <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008088:	2101      	movs	r1, #1
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 fd05 	bl	8008a9a <USBH_SetFeature>
 8008090:	4603      	mov	r3, r0
 8008092:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008094:	7bbb      	ldrb	r3, [r7, #14]
 8008096:	b2db      	uxtb	r3, r3
 8008098:	2b00      	cmp	r3, #0
 800809a:	d103      	bne.n	80080a4 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	220a      	movs	r2, #10
 80080a0:	701a      	strb	r2, [r3, #0]
 80080a2:	e00a      	b.n	80080ba <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 80080a4:	7bbb      	ldrb	r3, [r7, #14]
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	2b03      	cmp	r3, #3
 80080aa:	d106      	bne.n	80080ba <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	220a      	movs	r2, #10
 80080b0:	701a      	strb	r2, [r3, #0]
 80080b2:	e002      	b.n	80080ba <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	220a      	movs	r2, #10
 80080b8:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2201      	movs	r2, #1
 80080be:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80080ce:	2300      	movs	r3, #0
 80080d0:	2200      	movs	r2, #0
 80080d2:	f001 fd7d 	bl	8009bd0 <osMessageQueuePut>
#endif
#endif
      break;
 80080d6:	e0d8      	b.n	800828a <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d03f      	beq.n	8008162 <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80080ea:	2300      	movs	r3, #0
 80080ec:	73fb      	strb	r3, [r7, #15]
 80080ee:	e016      	b.n	800811e <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80080f0:	7bfa      	ldrb	r2, [r7, #15]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	32de      	adds	r2, #222	; 0xde
 80080f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080fa:	791a      	ldrb	r2, [r3, #4]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008102:	429a      	cmp	r2, r3
 8008104:	d108      	bne.n	8008118 <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008106:	7bfa      	ldrb	r2, [r7, #15]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	32de      	adds	r2, #222	; 0xde
 800810c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008116:	e005      	b.n	8008124 <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008118:	7bfb      	ldrb	r3, [r7, #15]
 800811a:	3301      	adds	r3, #1
 800811c:	73fb      	strb	r3, [r7, #15]
 800811e:	7bfb      	ldrb	r3, [r7, #15]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d0e5      	beq.n	80080f0 <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800812a:	2b00      	cmp	r3, #0
 800812c:	d016      	beq.n	800815c <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	4798      	blx	r3
 800813a:	4603      	mov	r3, r0
 800813c:	2b00      	cmp	r3, #0
 800813e:	d109      	bne.n	8008154 <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2206      	movs	r2, #6
 8008144:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800814c:	2103      	movs	r1, #3
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	4798      	blx	r3
 8008152:	e006      	b.n	8008162 <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	220d      	movs	r2, #13
 8008158:	701a      	strb	r2, [r3, #0]
 800815a:	e002      	b.n	8008162 <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	220d      	movs	r2, #13
 8008160:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2205      	movs	r2, #5
 8008166:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008176:	2300      	movs	r3, #0
 8008178:	2200      	movs	r2, #0
 800817a:	f001 fd29 	bl	8009bd0 <osMessageQueuePut>
#endif
#endif
      break;
 800817e:	e084      	b.n	800828a <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008186:	2b00      	cmp	r3, #0
 8008188:	d017      	beq.n	80081ba <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008190:	691b      	ldr	r3, [r3, #16]
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	4798      	blx	r3
 8008196:	4603      	mov	r3, r0
 8008198:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800819a:	7bbb      	ldrb	r3, [r7, #14]
 800819c:	b2db      	uxtb	r3, r3
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d103      	bne.n	80081aa <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	220b      	movs	r2, #11
 80081a6:	701a      	strb	r2, [r3, #0]
 80081a8:	e00a      	b.n	80081c0 <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 80081aa:	7bbb      	ldrb	r3, [r7, #14]
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	2b02      	cmp	r3, #2
 80081b0:	d106      	bne.n	80081c0 <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	220d      	movs	r2, #13
 80081b6:	701a      	strb	r2, [r3, #0]
 80081b8:	e002      	b.n	80081c0 <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	220d      	movs	r2, #13
 80081be:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2205      	movs	r2, #5
 80081c4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80081d4:	2300      	movs	r3, #0
 80081d6:	2200      	movs	r2, #0
 80081d8:	f001 fcfa 	bl	8009bd0 <osMessageQueuePut>
#endif
#endif
      break;
 80081dc:	e055      	b.n	800828a <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d04f      	beq.n	8008288 <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081ee:	695b      	ldr	r3, [r3, #20]
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	4798      	blx	r3
      }
      break;
 80081f4:	e048      	b.n	8008288 <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2200      	movs	r2, #0
 80081fa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f7ff fcec 	bl	8007bdc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800820a:	2b00      	cmp	r3, #0
 800820c:	d009      	beq.n	8008222 <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008214:	68db      	ldr	r3, [r3, #12]
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008228:	2b00      	cmp	r3, #0
 800822a:	d005      	beq.n	8008238 <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008232:	2105      	movs	r1, #5
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800823e:	b2db      	uxtb	r3, r3
 8008240:	2b01      	cmp	r3, #1
 8008242:	d107      	bne.n	8008254 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f7ff fda5 	bl	8007d9c <USBH_Start>
 8008252:	e002      	b.n	800825a <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f004 fc93 	bl	800cb80 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2201      	movs	r2, #1
 800825e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800826e:	2300      	movs	r3, #0
 8008270:	2200      	movs	r2, #0
 8008272:	f001 fcad 	bl	8009bd0 <osMessageQueuePut>
#endif
#endif
      break;
 8008276:	e008      	b.n	800828a <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 8008278:	bf00      	nop
 800827a:	e006      	b.n	800828a <USBH_Process+0x4ce>
      break;
 800827c:	bf00      	nop
 800827e:	e004      	b.n	800828a <USBH_Process+0x4ce>
      break;
 8008280:	bf00      	nop
 8008282:	e002      	b.n	800828a <USBH_Process+0x4ce>
    break;
 8008284:	bf00      	nop
 8008286:	e000      	b.n	800828a <USBH_Process+0x4ce>
      break;
 8008288:	bf00      	nop
  }
  return USBH_OK;
 800828a:	2300      	movs	r3, #0
}
 800828c:	4618      	mov	r0, r3
 800828e:	3710      	adds	r7, #16
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b088      	sub	sp, #32
 8008298:	af04      	add	r7, sp, #16
 800829a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800829c:	2301      	movs	r3, #1
 800829e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80082a0:	2301      	movs	r3, #1
 80082a2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	785b      	ldrb	r3, [r3, #1]
 80082a8:	2b07      	cmp	r3, #7
 80082aa:	f200 8208 	bhi.w	80086be <USBH_HandleEnum+0x42a>
 80082ae:	a201      	add	r2, pc, #4	; (adr r2, 80082b4 <USBH_HandleEnum+0x20>)
 80082b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b4:	080082d5 	.word	0x080082d5
 80082b8:	08008393 	.word	0x08008393
 80082bc:	080083fd 	.word	0x080083fd
 80082c0:	0800848b 	.word	0x0800848b
 80082c4:	080084f5 	.word	0x080084f5
 80082c8:	08008565 	.word	0x08008565
 80082cc:	08008601 	.word	0x08008601
 80082d0:	0800867f 	.word	0x0800867f
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80082d4:	2108      	movs	r1, #8
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 faec 	bl	80088b4 <USBH_Get_DevDesc>
 80082dc:	4603      	mov	r3, r0
 80082de:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80082e0:	7bbb      	ldrb	r3, [r7, #14]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d130      	bne.n	8008348 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2201      	movs	r2, #1
 80082f4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	7919      	ldrb	r1, [r3, #4]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800830a:	b292      	uxth	r2, r2
 800830c:	9202      	str	r2, [sp, #8]
 800830e:	2200      	movs	r2, #0
 8008310:	9201      	str	r2, [sp, #4]
 8008312:	9300      	str	r3, [sp, #0]
 8008314:	4603      	mov	r3, r0
 8008316:	2280      	movs	r2, #128	; 0x80
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f001 f9f3 	bl	8009704 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	7959      	ldrb	r1, [r3, #5]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008332:	b292      	uxth	r2, r2
 8008334:	9202      	str	r2, [sp, #8]
 8008336:	2200      	movs	r2, #0
 8008338:	9201      	str	r2, [sp, #4]
 800833a:	9300      	str	r3, [sp, #0]
 800833c:	4603      	mov	r3, r0
 800833e:	2200      	movs	r2, #0
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f001 f9df 	bl	8009704 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008346:	e1bc      	b.n	80086c2 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008348:	7bbb      	ldrb	r3, [r7, #14]
 800834a:	2b03      	cmp	r3, #3
 800834c:	f040 81b9 	bne.w	80086c2 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008356:	3301      	adds	r3, #1
 8008358:	b2da      	uxtb	r2, r3
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008366:	2b03      	cmp	r3, #3
 8008368:	d903      	bls.n	8008372 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	220d      	movs	r2, #13
 800836e:	701a      	strb	r2, [r3, #0]
      break;
 8008370:	e1a7      	b.n	80086c2 <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	795b      	ldrb	r3, [r3, #5]
 8008376:	4619      	mov	r1, r3
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f001 fa13 	bl	80097a4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	791b      	ldrb	r3, [r3, #4]
 8008382:	4619      	mov	r1, r3
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f001 fa0d 	bl	80097a4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	701a      	strb	r2, [r3, #0]
      break;
 8008390:	e197      	b.n	80086c2 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008392:	2112      	movs	r1, #18
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 fa8d 	bl	80088b4 <USBH_Get_DevDesc>
 800839a:	4603      	mov	r3, r0
 800839c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800839e:	7bbb      	ldrb	r3, [r7, #14]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d103      	bne.n	80083ac <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2202      	movs	r2, #2
 80083a8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80083aa:	e18c      	b.n	80086c6 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80083ac:	7bbb      	ldrb	r3, [r7, #14]
 80083ae:	2b03      	cmp	r3, #3
 80083b0:	f040 8189 	bne.w	80086c6 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80083ba:	3301      	adds	r3, #1
 80083bc:	b2da      	uxtb	r2, r3
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80083ca:	2b03      	cmp	r3, #3
 80083cc:	d903      	bls.n	80083d6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	220d      	movs	r2, #13
 80083d2:	701a      	strb	r2, [r3, #0]
      break;
 80083d4:	e177      	b.n	80086c6 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	795b      	ldrb	r3, [r3, #5]
 80083da:	4619      	mov	r1, r3
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f001 f9e1 	bl	80097a4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	791b      	ldrb	r3, [r3, #4]
 80083e6:	4619      	mov	r1, r3
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f001 f9db 	bl	80097a4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	701a      	strb	r2, [r3, #0]
      break;
 80083fa:	e164      	b.n	80086c6 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80083fc:	2101      	movs	r1, #1
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 fb04 	bl	8008a0c <USBH_SetAddress>
 8008404:	4603      	mov	r3, r0
 8008406:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008408:	7bbb      	ldrb	r3, [r7, #14]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d132      	bne.n	8008474 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800840e:	2002      	movs	r0, #2
 8008410:	f004 fd1a 	bl	800ce48 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2201      	movs	r2, #1
 8008418:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2203      	movs	r2, #3
 8008420:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	7919      	ldrb	r1, [r3, #4]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008436:	b292      	uxth	r2, r2
 8008438:	9202      	str	r2, [sp, #8]
 800843a:	2200      	movs	r2, #0
 800843c:	9201      	str	r2, [sp, #4]
 800843e:	9300      	str	r3, [sp, #0]
 8008440:	4603      	mov	r3, r0
 8008442:	2280      	movs	r2, #128	; 0x80
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f001 f95d 	bl	8009704 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	7959      	ldrb	r1, [r3, #5]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800845a:	687a      	ldr	r2, [r7, #4]
 800845c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800845e:	b292      	uxth	r2, r2
 8008460:	9202      	str	r2, [sp, #8]
 8008462:	2200      	movs	r2, #0
 8008464:	9201      	str	r2, [sp, #4]
 8008466:	9300      	str	r3, [sp, #0]
 8008468:	4603      	mov	r3, r0
 800846a:	2200      	movs	r2, #0
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f001 f949 	bl	8009704 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008472:	e12a      	b.n	80086ca <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008474:	7bbb      	ldrb	r3, [r7, #14]
 8008476:	2b03      	cmp	r3, #3
 8008478:	f040 8127 	bne.w	80086ca <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	220d      	movs	r2, #13
 8008480:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	705a      	strb	r2, [r3, #1]
      break;
 8008488:	e11f      	b.n	80086ca <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800848a:	2109      	movs	r1, #9
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 fa39 	bl	8008904 <USBH_Get_CfgDesc>
 8008492:	4603      	mov	r3, r0
 8008494:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008496:	7bbb      	ldrb	r3, [r7, #14]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d103      	bne.n	80084a4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2204      	movs	r2, #4
 80084a0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80084a2:	e114      	b.n	80086ce <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80084a4:	7bbb      	ldrb	r3, [r7, #14]
 80084a6:	2b03      	cmp	r3, #3
 80084a8:	f040 8111 	bne.w	80086ce <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80084b2:	3301      	adds	r3, #1
 80084b4:	b2da      	uxtb	r2, r3
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80084c2:	2b03      	cmp	r3, #3
 80084c4:	d903      	bls.n	80084ce <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	220d      	movs	r2, #13
 80084ca:	701a      	strb	r2, [r3, #0]
      break;
 80084cc:	e0ff      	b.n	80086ce <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	795b      	ldrb	r3, [r3, #5]
 80084d2:	4619      	mov	r1, r3
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f001 f965 	bl	80097a4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	791b      	ldrb	r3, [r3, #4]
 80084de:	4619      	mov	r1, r3
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f001 f95f 	bl	80097a4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2200      	movs	r2, #0
 80084f0:	701a      	strb	r2, [r3, #0]
      break;
 80084f2:	e0ec      	b.n	80086ce <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80084fa:	4619      	mov	r1, r3
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f000 fa01 	bl	8008904 <USBH_Get_CfgDesc>
 8008502:	4603      	mov	r3, r0
 8008504:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008506:	7bbb      	ldrb	r3, [r7, #14]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d103      	bne.n	8008514 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2205      	movs	r2, #5
 8008510:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008512:	e0de      	b.n	80086d2 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008514:	7bbb      	ldrb	r3, [r7, #14]
 8008516:	2b03      	cmp	r3, #3
 8008518:	f040 80db 	bne.w	80086d2 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008522:	3301      	adds	r3, #1
 8008524:	b2da      	uxtb	r2, r3
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008532:	2b03      	cmp	r3, #3
 8008534:	d903      	bls.n	800853e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	220d      	movs	r2, #13
 800853a:	701a      	strb	r2, [r3, #0]
      break;
 800853c:	e0c9      	b.n	80086d2 <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	795b      	ldrb	r3, [r3, #5]
 8008542:	4619      	mov	r1, r3
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f001 f92d 	bl	80097a4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	791b      	ldrb	r3, [r3, #4]
 800854e:	4619      	mov	r1, r3
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f001 f927 	bl	80097a4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	701a      	strb	r2, [r3, #0]
      break;
 8008562:	e0b6      	b.n	80086d2 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800856a:	2b00      	cmp	r3, #0
 800856c:	d036      	beq.n	80085dc <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800857a:	23ff      	movs	r3, #255	; 0xff
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f000 f9e5 	bl	800894c <USBH_Get_StringDesc>
 8008582:	4603      	mov	r3, r0
 8008584:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008586:	7bbb      	ldrb	r3, [r7, #14]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d111      	bne.n	80085b0 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2206      	movs	r2, #6
 8008590:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2205      	movs	r2, #5
 8008596:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80085a6:	2300      	movs	r3, #0
 80085a8:	2200      	movs	r2, #0
 80085aa:	f001 fb11 	bl	8009bd0 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80085ae:	e092      	b.n	80086d6 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80085b0:	7bbb      	ldrb	r3, [r7, #14]
 80085b2:	2b03      	cmp	r3, #3
 80085b4:	f040 808f 	bne.w	80086d6 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2206      	movs	r2, #6
 80085bc:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2205      	movs	r2, #5
 80085c2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80085d2:	2300      	movs	r3, #0
 80085d4:	2200      	movs	r2, #0
 80085d6:	f001 fafb 	bl	8009bd0 <osMessageQueuePut>
      break;
 80085da:	e07c      	b.n	80086d6 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2206      	movs	r2, #6
 80085e0:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2205      	movs	r2, #5
 80085e6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80085f6:	2300      	movs	r3, #0
 80085f8:	2200      	movs	r2, #0
 80085fa:	f001 fae9 	bl	8009bd0 <osMessageQueuePut>
      break;
 80085fe:	e06a      	b.n	80086d6 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008606:	2b00      	cmp	r3, #0
 8008608:	d027      	beq.n	800865a <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008616:	23ff      	movs	r3, #255	; 0xff
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 f997 	bl	800894c <USBH_Get_StringDesc>
 800861e:	4603      	mov	r3, r0
 8008620:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008622:	7bbb      	ldrb	r3, [r7, #14]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d103      	bne.n	8008630 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2207      	movs	r2, #7
 800862c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800862e:	e054      	b.n	80086da <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008630:	7bbb      	ldrb	r3, [r7, #14]
 8008632:	2b03      	cmp	r3, #3
 8008634:	d151      	bne.n	80086da <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2207      	movs	r2, #7
 800863a:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2205      	movs	r2, #5
 8008640:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008650:	2300      	movs	r3, #0
 8008652:	2200      	movs	r2, #0
 8008654:	f001 fabc 	bl	8009bd0 <osMessageQueuePut>
      break;
 8008658:	e03f      	b.n	80086da <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2207      	movs	r2, #7
 800865e:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2205      	movs	r2, #5
 8008664:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008674:	2300      	movs	r3, #0
 8008676:	2200      	movs	r2, #0
 8008678:	f001 faaa 	bl	8009bd0 <osMessageQueuePut>
      break;
 800867c:	e02d      	b.n	80086da <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008684:	2b00      	cmp	r3, #0
 8008686:	d017      	beq.n	80086b8 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008694:	23ff      	movs	r3, #255	; 0xff
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 f958 	bl	800894c <USBH_Get_StringDesc>
 800869c:	4603      	mov	r3, r0
 800869e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80086a0:	7bbb      	ldrb	r3, [r7, #14]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d102      	bne.n	80086ac <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80086a6:	2300      	movs	r3, #0
 80086a8:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80086aa:	e018      	b.n	80086de <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80086ac:	7bbb      	ldrb	r3, [r7, #14]
 80086ae:	2b03      	cmp	r3, #3
 80086b0:	d115      	bne.n	80086de <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 80086b2:	2300      	movs	r3, #0
 80086b4:	73fb      	strb	r3, [r7, #15]
      break;
 80086b6:	e012      	b.n	80086de <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 80086b8:	2300      	movs	r3, #0
 80086ba:	73fb      	strb	r3, [r7, #15]
      break;
 80086bc:	e00f      	b.n	80086de <USBH_HandleEnum+0x44a>

    default:
      break;
 80086be:	bf00      	nop
 80086c0:	e00e      	b.n	80086e0 <USBH_HandleEnum+0x44c>
      break;
 80086c2:	bf00      	nop
 80086c4:	e00c      	b.n	80086e0 <USBH_HandleEnum+0x44c>
      break;
 80086c6:	bf00      	nop
 80086c8:	e00a      	b.n	80086e0 <USBH_HandleEnum+0x44c>
      break;
 80086ca:	bf00      	nop
 80086cc:	e008      	b.n	80086e0 <USBH_HandleEnum+0x44c>
      break;
 80086ce:	bf00      	nop
 80086d0:	e006      	b.n	80086e0 <USBH_HandleEnum+0x44c>
      break;
 80086d2:	bf00      	nop
 80086d4:	e004      	b.n	80086e0 <USBH_HandleEnum+0x44c>
      break;
 80086d6:	bf00      	nop
 80086d8:	e002      	b.n	80086e0 <USBH_HandleEnum+0x44c>
      break;
 80086da:	bf00      	nop
 80086dc:	e000      	b.n	80086e0 <USBH_HandleEnum+0x44c>
      break;
 80086de:	bf00      	nop
  }
  return Status;
 80086e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3710      	adds	r7, #16
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop

080086ec <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	683a      	ldr	r2, [r7, #0]
 80086fa:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80086fe:	bf00      	nop
 8008700:	370c      	adds	r7, #12
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr

0800870a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800870a:	b580      	push	{r7, lr}
 800870c:	b082      	sub	sp, #8
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008718:	1c5a      	adds	r2, r3, #1
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 f804 	bl	800872e <USBH_HandleSof>
}
 8008726:	bf00      	nop
 8008728:	3708      	adds	r7, #8
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}

0800872e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800872e:	b580      	push	{r7, lr}
 8008730:	b082      	sub	sp, #8
 8008732:	af00      	add	r7, sp, #0
 8008734:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	781b      	ldrb	r3, [r3, #0]
 800873a:	b2db      	uxtb	r3, r3
 800873c:	2b0b      	cmp	r3, #11
 800873e:	d10a      	bne.n	8008756 <USBH_HandleSof+0x28>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008746:	2b00      	cmp	r3, #0
 8008748:	d005      	beq.n	8008756 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008750:	699b      	ldr	r3, [r3, #24]
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	4798      	blx	r3
  }
}
 8008756:	bf00      	nop
 8008758:	3708      	adds	r7, #8
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}

0800875e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800875e:	b580      	push	{r7, lr}
 8008760:	b082      	sub	sp, #8
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2201      	movs	r2, #1
 800876a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2201      	movs	r2, #1
 8008772:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008782:	2300      	movs	r3, #0
 8008784:	2200      	movs	r2, #0
 8008786:	f001 fa23 	bl	8009bd0 <osMessageQueuePut>
#endif
#endif

  return;
 800878a:	bf00      	nop
}
 800878c:	3708      	adds	r7, #8
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}

08008792 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008792:	b480      	push	{r7}
 8008794:	b083      	sub	sp, #12
 8008796:	af00      	add	r7, sp, #0
 8008798:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2200      	movs	r2, #0
 800879e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80087a2:	bf00      	nop
}
 80087a4:	370c      	adds	r7, #12
 80087a6:	46bd      	mov	sp, r7
 80087a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ac:	4770      	bx	lr

080087ae <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80087ae:	b580      	push	{r7, lr}
 80087b0:	b082      	sub	sp, #8
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2201      	movs	r2, #1
 80087ba:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2200      	movs	r2, #0
 80087c2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2200      	movs	r2, #0
 80087ca:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2201      	movs	r2, #1
 80087d2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80087e2:	2300      	movs	r3, #0
 80087e4:	2200      	movs	r2, #0
 80087e6:	f001 f9f3 	bl	8009bd0 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 80087ea:	2300      	movs	r3, #0
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3708      	adds	r7, #8
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2201      	movs	r2, #1
 8008800:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2200      	movs	r2, #0
 8008808:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2200      	movs	r2, #0
 8008810:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f004 f9ce 	bl	800cbb6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	791b      	ldrb	r3, [r3, #4]
 800881e:	4619      	mov	r1, r3
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f000 ffbf 	bl	80097a4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	795b      	ldrb	r3, [r3, #5]
 800882a:	4619      	mov	r1, r3
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 ffb9 	bl	80097a4 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2201      	movs	r2, #1
 8008836:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008846:	2300      	movs	r3, #0
 8008848:	2200      	movs	r2, #0
 800884a:	f001 f9c1 	bl	8009bd0 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800884e:	2300      	movs	r3, #0
}
 8008850:	4618      	mov	r0, r3
 8008852:	3708      	adds	r7, #8
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b084      	sub	sp, #16
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800886c:	f04f 33ff 	mov.w	r3, #4294967295
 8008870:	2200      	movs	r2, #0
 8008872:	f001 fa0d 	bl	8009c90 <osMessageQueueGet>
 8008876:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d1f0      	bne.n	8008860 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f7ff fa9c 	bl	8007dbc <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8008884:	e7ec      	b.n	8008860 <USBH_Process_OS+0x8>

08008886 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8008886:	b580      	push	{r7, lr}
 8008888:	b082      	sub	sp, #8
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2201      	movs	r2, #1
 8008892:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80088a2:	2300      	movs	r3, #0
 80088a4:	2200      	movs	r2, #0
 80088a6:	f001 f993 	bl	8009bd0 <osMessageQueuePut>
#endif

  return USBH_OK;
 80088aa:	2300      	movs	r3, #0
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3708      	adds	r7, #8
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b086      	sub	sp, #24
 80088b8:	af02      	add	r7, sp, #8
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	460b      	mov	r3, r1
 80088be:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80088c6:	78fb      	ldrb	r3, [r7, #3]
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	9300      	str	r3, [sp, #0]
 80088cc:	4613      	mov	r3, r2
 80088ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80088d2:	2100      	movs	r1, #0
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f000 f864 	bl	80089a2 <USBH_GetDescriptor>
 80088da:	4603      	mov	r3, r0
 80088dc:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80088de:	7bfb      	ldrb	r3, [r7, #15]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d10a      	bne.n	80088fa <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f203 3026 	addw	r0, r3, #806	; 0x326
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80088f0:	78fa      	ldrb	r2, [r7, #3]
 80088f2:	b292      	uxth	r2, r2
 80088f4:	4619      	mov	r1, r3
 80088f6:	f000 f919 	bl	8008b2c <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80088fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3710      	adds	r7, #16
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}

08008904 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008904:	b580      	push	{r7, lr}
 8008906:	b086      	sub	sp, #24
 8008908:	af02      	add	r7, sp, #8
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	460b      	mov	r3, r1
 800890e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	331c      	adds	r3, #28
 8008914:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008916:	887b      	ldrh	r3, [r7, #2]
 8008918:	9300      	str	r3, [sp, #0]
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008920:	2100      	movs	r1, #0
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f000 f83d 	bl	80089a2 <USBH_GetDescriptor>
 8008928:	4603      	mov	r3, r0
 800892a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800892c:	7bfb      	ldrb	r3, [r7, #15]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d107      	bne.n	8008942 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008932:	887b      	ldrh	r3, [r7, #2]
 8008934:	461a      	mov	r2, r3
 8008936:	68b9      	ldr	r1, [r7, #8]
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f000 f989 	bl	8008c50 <USBH_ParseCfgDesc>
 800893e:	4603      	mov	r3, r0
 8008940:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008942:	7bfb      	ldrb	r3, [r7, #15]
}
 8008944:	4618      	mov	r0, r3
 8008946:	3710      	adds	r7, #16
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b088      	sub	sp, #32
 8008950:	af02      	add	r7, sp, #8
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	607a      	str	r2, [r7, #4]
 8008956:	461a      	mov	r2, r3
 8008958:	460b      	mov	r3, r1
 800895a:	72fb      	strb	r3, [r7, #11]
 800895c:	4613      	mov	r3, r2
 800895e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8008960:	7afb      	ldrb	r3, [r7, #11]
 8008962:	b29b      	uxth	r3, r3
 8008964:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008968:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008970:	893b      	ldrh	r3, [r7, #8]
 8008972:	9300      	str	r3, [sp, #0]
 8008974:	460b      	mov	r3, r1
 8008976:	2100      	movs	r1, #0
 8008978:	68f8      	ldr	r0, [r7, #12]
 800897a:	f000 f812 	bl	80089a2 <USBH_GetDescriptor>
 800897e:	4603      	mov	r3, r0
 8008980:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008982:	7dfb      	ldrb	r3, [r7, #23]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d107      	bne.n	8008998 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800898e:	893a      	ldrh	r2, [r7, #8]
 8008990:	6879      	ldr	r1, [r7, #4]
 8008992:	4618      	mov	r0, r3
 8008994:	f000 fb26 	bl	8008fe4 <USBH_ParseStringDesc>
  }

  return status;
 8008998:	7dfb      	ldrb	r3, [r7, #23]
}
 800899a:	4618      	mov	r0, r3
 800899c:	3718      	adds	r7, #24
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}

080089a2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80089a2:	b580      	push	{r7, lr}
 80089a4:	b084      	sub	sp, #16
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	60f8      	str	r0, [r7, #12]
 80089aa:	607b      	str	r3, [r7, #4]
 80089ac:	460b      	mov	r3, r1
 80089ae:	72fb      	strb	r3, [r7, #11]
 80089b0:	4613      	mov	r3, r2
 80089b2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	789b      	ldrb	r3, [r3, #2]
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d11c      	bne.n	80089f6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80089bc:	7afb      	ldrb	r3, [r7, #11]
 80089be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80089c2:	b2da      	uxtb	r2, r3
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2206      	movs	r2, #6
 80089cc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	893a      	ldrh	r2, [r7, #8]
 80089d2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80089d4:	893b      	ldrh	r3, [r7, #8]
 80089d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80089da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089de:	d104      	bne.n	80089ea <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f240 4209 	movw	r2, #1033	; 0x409
 80089e6:	829a      	strh	r2, [r3, #20]
 80089e8:	e002      	b.n	80089f0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2200      	movs	r2, #0
 80089ee:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	8b3a      	ldrh	r2, [r7, #24]
 80089f4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80089f6:	8b3b      	ldrh	r3, [r7, #24]
 80089f8:	461a      	mov	r2, r3
 80089fa:	6879      	ldr	r1, [r7, #4]
 80089fc:	68f8      	ldr	r0, [r7, #12]
 80089fe:	f000 fb3f 	bl	8009080 <USBH_CtlReq>
 8008a02:	4603      	mov	r3, r0
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3710      	adds	r7, #16
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b082      	sub	sp, #8
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	460b      	mov	r3, r1
 8008a16:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	789b      	ldrb	r3, [r3, #2]
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d10f      	bne.n	8008a40 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2200      	movs	r2, #0
 8008a24:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2205      	movs	r2, #5
 8008a2a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008a2c:	78fb      	ldrb	r3, [r7, #3]
 8008a2e:	b29a      	uxth	r2, r3
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008a40:	2200      	movs	r2, #0
 8008a42:	2100      	movs	r1, #0
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f000 fb1b 	bl	8009080 <USBH_CtlReq>
 8008a4a:	4603      	mov	r3, r0
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3708      	adds	r7, #8
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b082      	sub	sp, #8
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
 8008a5c:	460b      	mov	r3, r1
 8008a5e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	789b      	ldrb	r3, [r3, #2]
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	d10e      	bne.n	8008a86 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2209      	movs	r2, #9
 8008a72:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	887a      	ldrh	r2, [r7, #2]
 8008a78:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2200      	movs	r2, #0
 8008a84:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008a86:	2200      	movs	r2, #0
 8008a88:	2100      	movs	r1, #0
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 faf8 	bl	8009080 <USBH_CtlReq>
 8008a90:	4603      	mov	r3, r0
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3708      	adds	r7, #8
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}

08008a9a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008a9a:	b580      	push	{r7, lr}
 8008a9c:	b082      	sub	sp, #8
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
 8008aa2:	460b      	mov	r3, r1
 8008aa4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	789b      	ldrb	r3, [r3, #2]
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d10f      	bne.n	8008ace <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2203      	movs	r2, #3
 8008ab8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008aba:	78fb      	ldrb	r3, [r7, #3]
 8008abc:	b29a      	uxth	r2, r3
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2200      	movs	r2, #0
 8008acc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008ace:	2200      	movs	r2, #0
 8008ad0:	2100      	movs	r1, #0
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 fad4 	bl	8009080 <USBH_CtlReq>
 8008ad8:	4603      	mov	r3, r0
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3708      	adds	r7, #8
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}

08008ae2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008ae2:	b580      	push	{r7, lr}
 8008ae4:	b082      	sub	sp, #8
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
 8008aea:	460b      	mov	r3, r1
 8008aec:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	789b      	ldrb	r3, [r3, #2]
 8008af2:	2b01      	cmp	r3, #1
 8008af4:	d10f      	bne.n	8008b16 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2202      	movs	r2, #2
 8008afa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2201      	movs	r2, #1
 8008b00:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2200      	movs	r2, #0
 8008b06:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008b08:	78fb      	ldrb	r3, [r7, #3]
 8008b0a:	b29a      	uxth	r2, r3
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2200      	movs	r2, #0
 8008b14:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8008b16:	2200      	movs	r2, #0
 8008b18:	2100      	movs	r1, #0
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 fab0 	bl	8009080 <USBH_CtlReq>
 8008b20:	4603      	mov	r3, r0
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3708      	adds	r7, #8
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
	...

08008b2c <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b085      	sub	sp, #20
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	60f8      	str	r0, [r7, #12]
 8008b34:	60b9      	str	r1, [r7, #8]
 8008b36:	4613      	mov	r3, r2
 8008b38:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	781a      	ldrb	r2, [r3, #0]
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	785a      	ldrb	r2, [r3, #1]
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	3302      	adds	r3, #2
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	b29a      	uxth	r2, r3
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	3303      	adds	r3, #3
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	021b      	lsls	r3, r3, #8
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	b29a      	uxth	r2, r3
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	791a      	ldrb	r2, [r3, #4]
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	795a      	ldrb	r2, [r3, #5]
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	799a      	ldrb	r2, [r3, #6]
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	79da      	ldrb	r2, [r3, #7]
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	79db      	ldrb	r3, [r3, #7]
 8008b8a:	2b20      	cmp	r3, #32
 8008b8c:	dc0f      	bgt.n	8008bae <USBH_ParseDevDesc+0x82>
 8008b8e:	2b08      	cmp	r3, #8
 8008b90:	db14      	blt.n	8008bbc <USBH_ParseDevDesc+0x90>
 8008b92:	3b08      	subs	r3, #8
 8008b94:	4a2d      	ldr	r2, [pc, #180]	; (8008c4c <USBH_ParseDevDesc+0x120>)
 8008b96:	fa22 f303 	lsr.w	r3, r2, r3
 8008b9a:	f003 0301 	and.w	r3, r3, #1
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	bf14      	ite	ne
 8008ba2:	2301      	movne	r3, #1
 8008ba4:	2300      	moveq	r3, #0
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d102      	bne.n	8008bb2 <USBH_ParseDevDesc+0x86>
 8008bac:	e006      	b.n	8008bbc <USBH_ParseDevDesc+0x90>
 8008bae:	2b40      	cmp	r3, #64	; 0x40
 8008bb0:	d104      	bne.n	8008bbc <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	79da      	ldrb	r2, [r3, #7]
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	71da      	strb	r2, [r3, #7]
      break;
 8008bba:	e003      	b.n	8008bc4 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2240      	movs	r2, #64	; 0x40
 8008bc0:	71da      	strb	r2, [r3, #7]
      break;
 8008bc2:	bf00      	nop
  }

  if (length > 8U)
 8008bc4:	88fb      	ldrh	r3, [r7, #6]
 8008bc6:	2b08      	cmp	r3, #8
 8008bc8:	d939      	bls.n	8008c3e <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	3308      	adds	r3, #8
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	b29a      	uxth	r2, r3
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	3309      	adds	r3, #9
 8008bd6:	781b      	ldrb	r3, [r3, #0]
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	021b      	lsls	r3, r3, #8
 8008bdc:	b29b      	uxth	r3, r3
 8008bde:	4313      	orrs	r3, r2
 8008be0:	b29a      	uxth	r2, r3
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	330a      	adds	r3, #10
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	b29a      	uxth	r2, r3
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	330b      	adds	r3, #11
 8008bf2:	781b      	ldrb	r3, [r3, #0]
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	021b      	lsls	r3, r3, #8
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	b29a      	uxth	r2, r3
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	330c      	adds	r3, #12
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	b29a      	uxth	r2, r3
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	330d      	adds	r3, #13
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	b29b      	uxth	r3, r3
 8008c12:	021b      	lsls	r3, r3, #8
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	4313      	orrs	r3, r2
 8008c18:	b29a      	uxth	r2, r3
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	7b9a      	ldrb	r2, [r3, #14]
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	7bda      	ldrb	r2, [r3, #15]
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	7c1a      	ldrb	r2, [r3, #16]
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	7c5a      	ldrb	r2, [r3, #17]
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	745a      	strb	r2, [r3, #17]
  }
}
 8008c3e:	bf00      	nop
 8008c40:	3714      	adds	r7, #20
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr
 8008c4a:	bf00      	nop
 8008c4c:	01000101 	.word	0x01000101

08008c50 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b08c      	sub	sp, #48	; 0x30
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	60b9      	str	r1, [r7, #8]
 8008c5a:	4613      	mov	r3, r2
 8008c5c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008c64:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008c66:	2300      	movs	r3, #0
 8008c68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008c70:	2300      	movs	r3, #0
 8008c72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8008c76:	2300      	movs	r3, #0
 8008c78:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	781a      	ldrb	r2, [r3, #0]
 8008c84:	6a3b      	ldr	r3, [r7, #32]
 8008c86:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	785a      	ldrb	r2, [r3, #1]
 8008c8c:	6a3b      	ldr	r3, [r7, #32]
 8008c8e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	3302      	adds	r3, #2
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	b29a      	uxth	r2, r3
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	3303      	adds	r3, #3
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	021b      	lsls	r3, r3, #8
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cac:	bf28      	it	cs
 8008cae:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8008cb2:	b29a      	uxth	r2, r3
 8008cb4:	6a3b      	ldr	r3, [r7, #32]
 8008cb6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	791a      	ldrb	r2, [r3, #4]
 8008cbc:	6a3b      	ldr	r3, [r7, #32]
 8008cbe:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	795a      	ldrb	r2, [r3, #5]
 8008cc4:	6a3b      	ldr	r3, [r7, #32]
 8008cc6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	799a      	ldrb	r2, [r3, #6]
 8008ccc:	6a3b      	ldr	r3, [r7, #32]
 8008cce:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	79da      	ldrb	r2, [r3, #7]
 8008cd4:	6a3b      	ldr	r3, [r7, #32]
 8008cd6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	7a1a      	ldrb	r2, [r3, #8]
 8008cdc:	6a3b      	ldr	r3, [r7, #32]
 8008cde:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8008ce0:	6a3b      	ldr	r3, [r7, #32]
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	2b09      	cmp	r3, #9
 8008ce6:	d002      	beq.n	8008cee <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008ce8:	6a3b      	ldr	r3, [r7, #32]
 8008cea:	2209      	movs	r2, #9
 8008cec:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008cee:	88fb      	ldrh	r3, [r7, #6]
 8008cf0:	2b09      	cmp	r3, #9
 8008cf2:	f240 809d 	bls.w	8008e30 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8008cf6:	2309      	movs	r3, #9
 8008cf8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008cfe:	e081      	b.n	8008e04 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008d00:	f107 0316 	add.w	r3, r7, #22
 8008d04:	4619      	mov	r1, r3
 8008d06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d08:	f000 f99f 	bl	800904a <USBH_GetNextDesc>
 8008d0c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d10:	785b      	ldrb	r3, [r3, #1]
 8008d12:	2b04      	cmp	r3, #4
 8008d14:	d176      	bne.n	8008e04 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d18:	781b      	ldrb	r3, [r3, #0]
 8008d1a:	2b09      	cmp	r3, #9
 8008d1c:	d002      	beq.n	8008d24 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d20:	2209      	movs	r2, #9
 8008d22:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008d24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d28:	221a      	movs	r2, #26
 8008d2a:	fb02 f303 	mul.w	r3, r2, r3
 8008d2e:	3308      	adds	r3, #8
 8008d30:	6a3a      	ldr	r2, [r7, #32]
 8008d32:	4413      	add	r3, r2
 8008d34:	3302      	adds	r3, #2
 8008d36:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008d38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d3a:	69f8      	ldr	r0, [r7, #28]
 8008d3c:	f000 f87e 	bl	8008e3c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008d40:	2300      	movs	r3, #0
 8008d42:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008d46:	2300      	movs	r3, #0
 8008d48:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008d4a:	e043      	b.n	8008dd4 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008d4c:	f107 0316 	add.w	r3, r7, #22
 8008d50:	4619      	mov	r1, r3
 8008d52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d54:	f000 f979 	bl	800904a <USBH_GetNextDesc>
 8008d58:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d5c:	785b      	ldrb	r3, [r3, #1]
 8008d5e:	2b05      	cmp	r3, #5
 8008d60:	d138      	bne.n	8008dd4 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8008d62:	69fb      	ldr	r3, [r7, #28]
 8008d64:	795b      	ldrb	r3, [r3, #5]
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d10f      	bne.n	8008d8a <USBH_ParseCfgDesc+0x13a>
 8008d6a:	69fb      	ldr	r3, [r7, #28]
 8008d6c:	799b      	ldrb	r3, [r3, #6]
 8008d6e:	2b02      	cmp	r3, #2
 8008d70:	d10b      	bne.n	8008d8a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008d72:	69fb      	ldr	r3, [r7, #28]
 8008d74:	79db      	ldrb	r3, [r3, #7]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d10f      	bne.n	8008d9a <USBH_ParseCfgDesc+0x14a>
 8008d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	2b09      	cmp	r3, #9
 8008d80:	d00b      	beq.n	8008d9a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8008d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d84:	2209      	movs	r2, #9
 8008d86:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008d88:	e007      	b.n	8008d9a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8008d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	2b07      	cmp	r3, #7
 8008d90:	d004      	beq.n	8008d9c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d94:	2207      	movs	r2, #7
 8008d96:	701a      	strb	r2, [r3, #0]
 8008d98:	e000      	b.n	8008d9c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008d9a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008d9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008da0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008da4:	3201      	adds	r2, #1
 8008da6:	00d2      	lsls	r2, r2, #3
 8008da8:	211a      	movs	r1, #26
 8008daa:	fb01 f303 	mul.w	r3, r1, r3
 8008dae:	4413      	add	r3, r2
 8008db0:	3308      	adds	r3, #8
 8008db2:	6a3a      	ldr	r2, [r7, #32]
 8008db4:	4413      	add	r3, r2
 8008db6:	3304      	adds	r3, #4
 8008db8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008dba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008dbc:	69b9      	ldr	r1, [r7, #24]
 8008dbe:	68f8      	ldr	r0, [r7, #12]
 8008dc0:	f000 f86b 	bl	8008e9a <USBH_ParseEPDesc>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8008dca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008dce:	3301      	adds	r3, #1
 8008dd0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008dd4:	69fb      	ldr	r3, [r7, #28]
 8008dd6:	791b      	ldrb	r3, [r3, #4]
 8008dd8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d204      	bcs.n	8008dea <USBH_ParseCfgDesc+0x19a>
 8008de0:	6a3b      	ldr	r3, [r7, #32]
 8008de2:	885a      	ldrh	r2, [r3, #2]
 8008de4:	8afb      	ldrh	r3, [r7, #22]
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d8b0      	bhi.n	8008d4c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008dea:	69fb      	ldr	r3, [r7, #28]
 8008dec:	791b      	ldrb	r3, [r3, #4]
 8008dee:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d201      	bcs.n	8008dfa <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8008df6:	2303      	movs	r3, #3
 8008df8:	e01c      	b.n	8008e34 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8008dfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008dfe:	3301      	adds	r3, #1
 8008e00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008e04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d805      	bhi.n	8008e18 <USBH_ParseCfgDesc+0x1c8>
 8008e0c:	6a3b      	ldr	r3, [r7, #32]
 8008e0e:	885a      	ldrh	r2, [r3, #2]
 8008e10:	8afb      	ldrh	r3, [r7, #22]
 8008e12:	429a      	cmp	r2, r3
 8008e14:	f63f af74 	bhi.w	8008d00 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008e18:	6a3b      	ldr	r3, [r7, #32]
 8008e1a:	791b      	ldrb	r3, [r3, #4]
 8008e1c:	2b02      	cmp	r3, #2
 8008e1e:	bf28      	it	cs
 8008e20:	2302      	movcs	r3, #2
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d201      	bcs.n	8008e30 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8008e2c:	2303      	movs	r3, #3
 8008e2e:	e001      	b.n	8008e34 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8008e30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3730      	adds	r7, #48	; 0x30
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b083      	sub	sp, #12
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	781a      	ldrb	r2, [r3, #0]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	785a      	ldrb	r2, [r3, #1]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	789a      	ldrb	r2, [r3, #2]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	78da      	ldrb	r2, [r3, #3]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	791a      	ldrb	r2, [r3, #4]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	795a      	ldrb	r2, [r3, #5]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	799a      	ldrb	r2, [r3, #6]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	79da      	ldrb	r2, [r3, #7]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	7a1a      	ldrb	r2, [r3, #8]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	721a      	strb	r2, [r3, #8]
}
 8008e8e:	bf00      	nop
 8008e90:	370c      	adds	r7, #12
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr

08008e9a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8008e9a:	b480      	push	{r7}
 8008e9c:	b087      	sub	sp, #28
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	60f8      	str	r0, [r7, #12]
 8008ea2:	60b9      	str	r1, [r7, #8]
 8008ea4:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	781a      	ldrb	r2, [r3, #0]
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	785a      	ldrb	r2, [r3, #1]
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	789a      	ldrb	r2, [r3, #2]
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	78da      	ldrb	r2, [r3, #3]
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	3304      	adds	r3, #4
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	b29a      	uxth	r2, r3
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	3305      	adds	r3, #5
 8008ed6:	781b      	ldrb	r3, [r3, #0]
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	021b      	lsls	r3, r3, #8
 8008edc:	b29b      	uxth	r3, r3
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	b29a      	uxth	r2, r3
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	799a      	ldrb	r2, [r3, #6]
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	889b      	ldrh	r3, [r3, #4]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d102      	bne.n	8008efc <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8008ef6:	2303      	movs	r3, #3
 8008ef8:	75fb      	strb	r3, [r7, #23]
 8008efa:	e033      	b.n	8008f64 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	889b      	ldrh	r3, [r3, #4]
 8008f00:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008f04:	f023 0307 	bic.w	r3, r3, #7
 8008f08:	b29a      	uxth	r2, r3
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	889b      	ldrh	r3, [r3, #4]
 8008f12:	b21a      	sxth	r2, r3
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	3304      	adds	r3, #4
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	b299      	uxth	r1, r3
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	3305      	adds	r3, #5
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	021b      	lsls	r3, r3, #8
 8008f26:	b29b      	uxth	r3, r3
 8008f28:	430b      	orrs	r3, r1
 8008f2a:	b29b      	uxth	r3, r3
 8008f2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d110      	bne.n	8008f56 <USBH_ParseEPDesc+0xbc>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	3304      	adds	r3, #4
 8008f38:	781b      	ldrb	r3, [r3, #0]
 8008f3a:	b299      	uxth	r1, r3
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	3305      	adds	r3, #5
 8008f40:	781b      	ldrb	r3, [r3, #0]
 8008f42:	b29b      	uxth	r3, r3
 8008f44:	021b      	lsls	r3, r3, #8
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	430b      	orrs	r3, r1
 8008f4a:	b29b      	uxth	r3, r3
 8008f4c:	b21b      	sxth	r3, r3
 8008f4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008f52:	b21b      	sxth	r3, r3
 8008f54:	e001      	b.n	8008f5a <USBH_ParseEPDesc+0xc0>
 8008f56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	b21b      	sxth	r3, r3
 8008f5e:	b29a      	uxth	r2, r3
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d116      	bne.n	8008f9c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	78db      	ldrb	r3, [r3, #3]
 8008f72:	f003 0303 	and.w	r3, r3, #3
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	d005      	beq.n	8008f86 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	78db      	ldrb	r3, [r3, #3]
 8008f7e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008f82:	2b03      	cmp	r3, #3
 8008f84:	d127      	bne.n	8008fd6 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	799b      	ldrb	r3, [r3, #6]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d003      	beq.n	8008f96 <USBH_ParseEPDesc+0xfc>
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	799b      	ldrb	r3, [r3, #6]
 8008f92:	2b10      	cmp	r3, #16
 8008f94:	d91f      	bls.n	8008fd6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008f96:	2303      	movs	r3, #3
 8008f98:	75fb      	strb	r3, [r7, #23]
 8008f9a:	e01c      	b.n	8008fd6 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	78db      	ldrb	r3, [r3, #3]
 8008fa0:	f003 0303 	and.w	r3, r3, #3
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	d10a      	bne.n	8008fbe <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	799b      	ldrb	r3, [r3, #6]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d003      	beq.n	8008fb8 <USBH_ParseEPDesc+0x11e>
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	799b      	ldrb	r3, [r3, #6]
 8008fb4:	2b10      	cmp	r3, #16
 8008fb6:	d90e      	bls.n	8008fd6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008fb8:	2303      	movs	r3, #3
 8008fba:	75fb      	strb	r3, [r7, #23]
 8008fbc:	e00b      	b.n	8008fd6 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	78db      	ldrb	r3, [r3, #3]
 8008fc2:	f003 0303 	and.w	r3, r3, #3
 8008fc6:	2b03      	cmp	r3, #3
 8008fc8:	d105      	bne.n	8008fd6 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	799b      	ldrb	r3, [r3, #6]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d101      	bne.n	8008fd6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008fd2:	2303      	movs	r3, #3
 8008fd4:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8008fd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	371c      	adds	r7, #28
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr

08008fe4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b087      	sub	sp, #28
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	60f8      	str	r0, [r7, #12]
 8008fec:	60b9      	str	r1, [r7, #8]
 8008fee:	4613      	mov	r3, r2
 8008ff0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	2b03      	cmp	r3, #3
 8008ffa:	d120      	bne.n	800903e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	1e9a      	subs	r2, r3, #2
 8009002:	88fb      	ldrh	r3, [r7, #6]
 8009004:	4293      	cmp	r3, r2
 8009006:	bf28      	it	cs
 8009008:	4613      	movcs	r3, r2
 800900a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	3302      	adds	r3, #2
 8009010:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009012:	2300      	movs	r3, #0
 8009014:	82fb      	strh	r3, [r7, #22]
 8009016:	e00b      	b.n	8009030 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009018:	8afb      	ldrh	r3, [r7, #22]
 800901a:	68fa      	ldr	r2, [r7, #12]
 800901c:	4413      	add	r3, r2
 800901e:	781a      	ldrb	r2, [r3, #0]
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	3301      	adds	r3, #1
 8009028:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800902a:	8afb      	ldrh	r3, [r7, #22]
 800902c:	3302      	adds	r3, #2
 800902e:	82fb      	strh	r3, [r7, #22]
 8009030:	8afa      	ldrh	r2, [r7, #22]
 8009032:	8abb      	ldrh	r3, [r7, #20]
 8009034:	429a      	cmp	r2, r3
 8009036:	d3ef      	bcc.n	8009018 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	2200      	movs	r2, #0
 800903c:	701a      	strb	r2, [r3, #0]
  }
}
 800903e:	bf00      	nop
 8009040:	371c      	adds	r7, #28
 8009042:	46bd      	mov	sp, r7
 8009044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009048:	4770      	bx	lr

0800904a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800904a:	b480      	push	{r7}
 800904c:	b085      	sub	sp, #20
 800904e:	af00      	add	r7, sp, #0
 8009050:	6078      	str	r0, [r7, #4]
 8009052:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	881a      	ldrh	r2, [r3, #0]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	b29b      	uxth	r3, r3
 800905e:	4413      	add	r3, r2
 8009060:	b29a      	uxth	r2, r3
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	781b      	ldrb	r3, [r3, #0]
 800906a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	4413      	add	r3, r2
 8009070:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009072:	68fb      	ldr	r3, [r7, #12]
}
 8009074:	4618      	mov	r0, r3
 8009076:	3714      	adds	r7, #20
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr

08009080 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b086      	sub	sp, #24
 8009084:	af00      	add	r7, sp, #0
 8009086:	60f8      	str	r0, [r7, #12]
 8009088:	60b9      	str	r1, [r7, #8]
 800908a:	4613      	mov	r3, r2
 800908c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800908e:	2301      	movs	r3, #1
 8009090:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	789b      	ldrb	r3, [r3, #2]
 8009096:	2b01      	cmp	r3, #1
 8009098:	d002      	beq.n	80090a0 <USBH_CtlReq+0x20>
 800909a:	2b02      	cmp	r3, #2
 800909c:	d01d      	beq.n	80090da <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800909e:	e043      	b.n	8009128 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	68ba      	ldr	r2, [r7, #8]
 80090a4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	88fa      	ldrh	r2, [r7, #6]
 80090aa:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2201      	movs	r2, #1
 80090b0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	2202      	movs	r2, #2
 80090b6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80090b8:	2301      	movs	r3, #1
 80090ba:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	2203      	movs	r2, #3
 80090c0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80090d0:	2300      	movs	r3, #0
 80090d2:	2200      	movs	r2, #0
 80090d4:	f000 fd7c 	bl	8009bd0 <osMessageQueuePut>
      break;
 80090d8:	e026      	b.n	8009128 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 80090da:	68f8      	ldr	r0, [r7, #12]
 80090dc:	f000 f82a 	bl	8009134 <USBH_HandleControl>
 80090e0:	4603      	mov	r3, r0
 80090e2:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80090e4:	7dfb      	ldrb	r3, [r7, #23]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d002      	beq.n	80090f0 <USBH_CtlReq+0x70>
 80090ea:	7dfb      	ldrb	r3, [r7, #23]
 80090ec:	2b03      	cmp	r3, #3
 80090ee:	d106      	bne.n	80090fe <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2201      	movs	r2, #1
 80090f4:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	2200      	movs	r2, #0
 80090fa:	761a      	strb	r2, [r3, #24]
 80090fc:	e005      	b.n	800910a <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 80090fe:	7dfb      	ldrb	r3, [r7, #23]
 8009100:	2b02      	cmp	r3, #2
 8009102:	d102      	bne.n	800910a <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2201      	movs	r2, #1
 8009108:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2203      	movs	r2, #3
 800910e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800911e:	2300      	movs	r3, #0
 8009120:	2200      	movs	r2, #0
 8009122:	f000 fd55 	bl	8009bd0 <osMessageQueuePut>
      break;
 8009126:	bf00      	nop
  }
  return status;
 8009128:	7dfb      	ldrb	r3, [r7, #23]
}
 800912a:	4618      	mov	r0, r3
 800912c:	3718      	adds	r7, #24
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}
	...

08009134 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b086      	sub	sp, #24
 8009138:	af02      	add	r7, sp, #8
 800913a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800913c:	2301      	movs	r3, #1
 800913e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009140:	2300      	movs	r3, #0
 8009142:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	7e1b      	ldrb	r3, [r3, #24]
 8009148:	3b01      	subs	r3, #1
 800914a:	2b0a      	cmp	r3, #10
 800914c:	f200 8229 	bhi.w	80095a2 <USBH_HandleControl+0x46e>
 8009150:	a201      	add	r2, pc, #4	; (adr r2, 8009158 <USBH_HandleControl+0x24>)
 8009152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009156:	bf00      	nop
 8009158:	08009185 	.word	0x08009185
 800915c:	0800919f 	.word	0x0800919f
 8009160:	08009241 	.word	0x08009241
 8009164:	08009267 	.word	0x08009267
 8009168:	080092f3 	.word	0x080092f3
 800916c:	0800931d 	.word	0x0800931d
 8009170:	080093df 	.word	0x080093df
 8009174:	08009401 	.word	0x08009401
 8009178:	08009493 	.word	0x08009493
 800917c:	080094b9 	.word	0x080094b9
 8009180:	0800954b 	.word	0x0800954b
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f103 0110 	add.w	r1, r3, #16
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	795b      	ldrb	r3, [r3, #5]
 800918e:	461a      	mov	r2, r3
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f000 fa17 	bl	80095c4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2202      	movs	r2, #2
 800919a:	761a      	strb	r2, [r3, #24]
      break;
 800919c:	e20c      	b.n	80095b8 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	795b      	ldrb	r3, [r3, #5]
 80091a2:	4619      	mov	r1, r3
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f003 fdf5 	bl	800cd94 <USBH_LL_GetURBState>
 80091aa:	4603      	mov	r3, r0
 80091ac:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80091ae:	7bbb      	ldrb	r3, [r7, #14]
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	d12c      	bne.n	800920e <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	7c1b      	ldrb	r3, [r3, #16]
 80091b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80091bc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	8adb      	ldrh	r3, [r3, #22]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d00a      	beq.n	80091dc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80091c6:	7b7b      	ldrb	r3, [r7, #13]
 80091c8:	2b80      	cmp	r3, #128	; 0x80
 80091ca:	d103      	bne.n	80091d4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2203      	movs	r2, #3
 80091d0:	761a      	strb	r2, [r3, #24]
 80091d2:	e00d      	b.n	80091f0 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2205      	movs	r2, #5
 80091d8:	761a      	strb	r2, [r3, #24]
 80091da:	e009      	b.n	80091f0 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 80091dc:	7b7b      	ldrb	r3, [r7, #13]
 80091de:	2b80      	cmp	r3, #128	; 0x80
 80091e0:	d103      	bne.n	80091ea <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2209      	movs	r2, #9
 80091e6:	761a      	strb	r2, [r3, #24]
 80091e8:	e002      	b.n	80091f0 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2207      	movs	r2, #7
 80091ee:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2203      	movs	r2, #3
 80091f4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009204:	2300      	movs	r3, #0
 8009206:	2200      	movs	r2, #0
 8009208:	f000 fce2 	bl	8009bd0 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800920c:	e1cb      	b.n	80095a6 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800920e:	7bbb      	ldrb	r3, [r7, #14]
 8009210:	2b04      	cmp	r3, #4
 8009212:	d003      	beq.n	800921c <USBH_HandleControl+0xe8>
 8009214:	7bbb      	ldrb	r3, [r7, #14]
 8009216:	2b02      	cmp	r3, #2
 8009218:	f040 81c5 	bne.w	80095a6 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	220b      	movs	r2, #11
 8009220:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2203      	movs	r2, #3
 8009226:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009236:	2300      	movs	r3, #0
 8009238:	2200      	movs	r2, #0
 800923a:	f000 fcc9 	bl	8009bd0 <osMessageQueuePut>
      break;
 800923e:	e1b2      	b.n	80095a6 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009246:	b29a      	uxth	r2, r3
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6899      	ldr	r1, [r3, #8]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	899a      	ldrh	r2, [r3, #12]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	791b      	ldrb	r3, [r3, #4]
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f000 f9f2 	bl	8009642 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2204      	movs	r2, #4
 8009262:	761a      	strb	r2, [r3, #24]
      break;
 8009264:	e1a8      	b.n	80095b8 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	791b      	ldrb	r3, [r3, #4]
 800926a:	4619      	mov	r1, r3
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f003 fd91 	bl	800cd94 <USBH_LL_GetURBState>
 8009272:	4603      	mov	r3, r0
 8009274:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009276:	7bbb      	ldrb	r3, [r7, #14]
 8009278:	2b01      	cmp	r3, #1
 800927a:	d110      	bne.n	800929e <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2209      	movs	r2, #9
 8009280:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2203      	movs	r2, #3
 8009286:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009296:	2300      	movs	r3, #0
 8009298:	2200      	movs	r2, #0
 800929a:	f000 fc99 	bl	8009bd0 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800929e:	7bbb      	ldrb	r3, [r7, #14]
 80092a0:	2b05      	cmp	r3, #5
 80092a2:	d110      	bne.n	80092c6 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80092a4:	2303      	movs	r3, #3
 80092a6:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2203      	movs	r2, #3
 80092ac:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80092bc:	2300      	movs	r3, #0
 80092be:	2200      	movs	r2, #0
 80092c0:	f000 fc86 	bl	8009bd0 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80092c4:	e171      	b.n	80095aa <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 80092c6:	7bbb      	ldrb	r3, [r7, #14]
 80092c8:	2b04      	cmp	r3, #4
 80092ca:	f040 816e 	bne.w	80095aa <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	220b      	movs	r2, #11
 80092d2:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2203      	movs	r2, #3
 80092d8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80092e8:	2300      	movs	r3, #0
 80092ea:	2200      	movs	r2, #0
 80092ec:	f000 fc70 	bl	8009bd0 <osMessageQueuePut>
      break;
 80092f0:	e15b      	b.n	80095aa <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6899      	ldr	r1, [r3, #8]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	899a      	ldrh	r2, [r3, #12]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	795b      	ldrb	r3, [r3, #5]
 80092fe:	2001      	movs	r0, #1
 8009300:	9000      	str	r0, [sp, #0]
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 f978 	bl	80095f8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800930e:	b29a      	uxth	r2, r3
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2206      	movs	r2, #6
 8009318:	761a      	strb	r2, [r3, #24]
      break;
 800931a:	e14d      	b.n	80095b8 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	795b      	ldrb	r3, [r3, #5]
 8009320:	4619      	mov	r1, r3
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f003 fd36 	bl	800cd94 <USBH_LL_GetURBState>
 8009328:	4603      	mov	r3, r0
 800932a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800932c:	7bbb      	ldrb	r3, [r7, #14]
 800932e:	2b01      	cmp	r3, #1
 8009330:	d111      	bne.n	8009356 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2207      	movs	r2, #7
 8009336:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2203      	movs	r2, #3
 800933c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800934c:	2300      	movs	r3, #0
 800934e:	2200      	movs	r2, #0
 8009350:	f000 fc3e 	bl	8009bd0 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009354:	e12b      	b.n	80095ae <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 8009356:	7bbb      	ldrb	r3, [r7, #14]
 8009358:	2b05      	cmp	r3, #5
 800935a:	d113      	bne.n	8009384 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	220c      	movs	r2, #12
 8009360:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009362:	2303      	movs	r3, #3
 8009364:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2203      	movs	r2, #3
 800936a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800937a:	2300      	movs	r3, #0
 800937c:	2200      	movs	r2, #0
 800937e:	f000 fc27 	bl	8009bd0 <osMessageQueuePut>
      break;
 8009382:	e114      	b.n	80095ae <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009384:	7bbb      	ldrb	r3, [r7, #14]
 8009386:	2b02      	cmp	r3, #2
 8009388:	d111      	bne.n	80093ae <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2205      	movs	r2, #5
 800938e:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2203      	movs	r2, #3
 8009394:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80093a4:	2300      	movs	r3, #0
 80093a6:	2200      	movs	r2, #0
 80093a8:	f000 fc12 	bl	8009bd0 <osMessageQueuePut>
      break;
 80093ac:	e0ff      	b.n	80095ae <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 80093ae:	7bbb      	ldrb	r3, [r7, #14]
 80093b0:	2b04      	cmp	r3, #4
 80093b2:	f040 80fc 	bne.w	80095ae <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	220b      	movs	r2, #11
 80093ba:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80093bc:	2302      	movs	r3, #2
 80093be:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2203      	movs	r2, #3
 80093c4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80093d4:	2300      	movs	r3, #0
 80093d6:	2200      	movs	r2, #0
 80093d8:	f000 fbfa 	bl	8009bd0 <osMessageQueuePut>
      break;
 80093dc:	e0e7      	b.n	80095ae <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	791b      	ldrb	r3, [r3, #4]
 80093e2:	2200      	movs	r2, #0
 80093e4:	2100      	movs	r1, #0
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f000 f92b 	bl	8009642 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80093f2:	b29a      	uxth	r2, r3
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2208      	movs	r2, #8
 80093fc:	761a      	strb	r2, [r3, #24]

      break;
 80093fe:	e0db      	b.n	80095b8 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	791b      	ldrb	r3, [r3, #4]
 8009404:	4619      	mov	r1, r3
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f003 fcc4 	bl	800cd94 <USBH_LL_GetURBState>
 800940c:	4603      	mov	r3, r0
 800940e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009410:	7bbb      	ldrb	r3, [r7, #14]
 8009412:	2b01      	cmp	r3, #1
 8009414:	d113      	bne.n	800943e <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	220d      	movs	r2, #13
 800941a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800941c:	2300      	movs	r3, #0
 800941e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2203      	movs	r2, #3
 8009424:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009434:	2300      	movs	r3, #0
 8009436:	2200      	movs	r2, #0
 8009438:	f000 fbca 	bl	8009bd0 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800943c:	e0b9      	b.n	80095b2 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800943e:	7bbb      	ldrb	r3, [r7, #14]
 8009440:	2b04      	cmp	r3, #4
 8009442:	d111      	bne.n	8009468 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	220b      	movs	r2, #11
 8009448:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2203      	movs	r2, #3
 800944e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800945e:	2300      	movs	r3, #0
 8009460:	2200      	movs	r2, #0
 8009462:	f000 fbb5 	bl	8009bd0 <osMessageQueuePut>
      break;
 8009466:	e0a4      	b.n	80095b2 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 8009468:	7bbb      	ldrb	r3, [r7, #14]
 800946a:	2b05      	cmp	r3, #5
 800946c:	f040 80a1 	bne.w	80095b2 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 8009470:	2303      	movs	r3, #3
 8009472:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2203      	movs	r2, #3
 8009478:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009488:	2300      	movs	r3, #0
 800948a:	2200      	movs	r2, #0
 800948c:	f000 fba0 	bl	8009bd0 <osMessageQueuePut>
      break;
 8009490:	e08f      	b.n	80095b2 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	795b      	ldrb	r3, [r3, #5]
 8009496:	2201      	movs	r2, #1
 8009498:	9200      	str	r2, [sp, #0]
 800949a:	2200      	movs	r2, #0
 800949c:	2100      	movs	r1, #0
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 f8aa 	bl	80095f8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80094aa:	b29a      	uxth	r2, r3
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	220a      	movs	r2, #10
 80094b4:	761a      	strb	r2, [r3, #24]
      break;
 80094b6:	e07f      	b.n	80095b8 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	795b      	ldrb	r3, [r3, #5]
 80094bc:	4619      	mov	r1, r3
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f003 fc68 	bl	800cd94 <USBH_LL_GetURBState>
 80094c4:	4603      	mov	r3, r0
 80094c6:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80094c8:	7bbb      	ldrb	r3, [r7, #14]
 80094ca:	2b01      	cmp	r3, #1
 80094cc:	d113      	bne.n	80094f6 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 80094ce:	2300      	movs	r3, #0
 80094d0:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	220d      	movs	r2, #13
 80094d6:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2203      	movs	r2, #3
 80094dc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80094ec:	2300      	movs	r3, #0
 80094ee:	2200      	movs	r2, #0
 80094f0:	f000 fb6e 	bl	8009bd0 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80094f4:	e05f      	b.n	80095b6 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 80094f6:	7bbb      	ldrb	r3, [r7, #14]
 80094f8:	2b02      	cmp	r3, #2
 80094fa:	d111      	bne.n	8009520 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2209      	movs	r2, #9
 8009500:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2203      	movs	r2, #3
 8009506:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009516:	2300      	movs	r3, #0
 8009518:	2200      	movs	r2, #0
 800951a:	f000 fb59 	bl	8009bd0 <osMessageQueuePut>
      break;
 800951e:	e04a      	b.n	80095b6 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8009520:	7bbb      	ldrb	r3, [r7, #14]
 8009522:	2b04      	cmp	r3, #4
 8009524:	d147      	bne.n	80095b6 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	220b      	movs	r2, #11
 800952a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2203      	movs	r2, #3
 8009530:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009540:	2300      	movs	r3, #0
 8009542:	2200      	movs	r2, #0
 8009544:	f000 fb44 	bl	8009bd0 <osMessageQueuePut>
      break;
 8009548:	e035      	b.n	80095b6 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	7e5b      	ldrb	r3, [r3, #25]
 800954e:	3301      	adds	r3, #1
 8009550:	b2da      	uxtb	r2, r3
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	765a      	strb	r2, [r3, #25]
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	7e5b      	ldrb	r3, [r3, #25]
 800955a:	2b02      	cmp	r3, #2
 800955c:	d806      	bhi.n	800956c <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2201      	movs	r2, #1
 8009562:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2201      	movs	r2, #1
 8009568:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800956a:	e025      	b.n	80095b8 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009572:	2106      	movs	r1, #6
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2200      	movs	r2, #0
 800957c:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	795b      	ldrb	r3, [r3, #5]
 8009582:	4619      	mov	r1, r3
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f000 f90d 	bl	80097a4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	791b      	ldrb	r3, [r3, #4]
 800958e:	4619      	mov	r1, r3
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 f907 	bl	80097a4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2200      	movs	r2, #0
 800959a:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800959c:	2302      	movs	r3, #2
 800959e:	73fb      	strb	r3, [r7, #15]
      break;
 80095a0:	e00a      	b.n	80095b8 <USBH_HandleControl+0x484>

    default:
      break;
 80095a2:	bf00      	nop
 80095a4:	e008      	b.n	80095b8 <USBH_HandleControl+0x484>
      break;
 80095a6:	bf00      	nop
 80095a8:	e006      	b.n	80095b8 <USBH_HandleControl+0x484>
      break;
 80095aa:	bf00      	nop
 80095ac:	e004      	b.n	80095b8 <USBH_HandleControl+0x484>
      break;
 80095ae:	bf00      	nop
 80095b0:	e002      	b.n	80095b8 <USBH_HandleControl+0x484>
      break;
 80095b2:	bf00      	nop
 80095b4:	e000      	b.n	80095b8 <USBH_HandleControl+0x484>
      break;
 80095b6:	bf00      	nop
  }

  return status;
 80095b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3710      	adds	r7, #16
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}
 80095c2:	bf00      	nop

080095c4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b088      	sub	sp, #32
 80095c8:	af04      	add	r7, sp, #16
 80095ca:	60f8      	str	r0, [r7, #12]
 80095cc:	60b9      	str	r1, [r7, #8]
 80095ce:	4613      	mov	r3, r2
 80095d0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80095d2:	79f9      	ldrb	r1, [r7, #7]
 80095d4:	2300      	movs	r3, #0
 80095d6:	9303      	str	r3, [sp, #12]
 80095d8:	2308      	movs	r3, #8
 80095da:	9302      	str	r3, [sp, #8]
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	9301      	str	r3, [sp, #4]
 80095e0:	2300      	movs	r3, #0
 80095e2:	9300      	str	r3, [sp, #0]
 80095e4:	2300      	movs	r3, #0
 80095e6:	2200      	movs	r2, #0
 80095e8:	68f8      	ldr	r0, [r7, #12]
 80095ea:	f003 fba2 	bl	800cd32 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80095ee:	2300      	movs	r3, #0
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3710      	adds	r7, #16
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b088      	sub	sp, #32
 80095fc:	af04      	add	r7, sp, #16
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	60b9      	str	r1, [r7, #8]
 8009602:	4611      	mov	r1, r2
 8009604:	461a      	mov	r2, r3
 8009606:	460b      	mov	r3, r1
 8009608:	80fb      	strh	r3, [r7, #6]
 800960a:	4613      	mov	r3, r2
 800960c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009614:	2b00      	cmp	r3, #0
 8009616:	d001      	beq.n	800961c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009618:	2300      	movs	r3, #0
 800961a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800961c:	7979      	ldrb	r1, [r7, #5]
 800961e:	7e3b      	ldrb	r3, [r7, #24]
 8009620:	9303      	str	r3, [sp, #12]
 8009622:	88fb      	ldrh	r3, [r7, #6]
 8009624:	9302      	str	r3, [sp, #8]
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	9301      	str	r3, [sp, #4]
 800962a:	2301      	movs	r3, #1
 800962c:	9300      	str	r3, [sp, #0]
 800962e:	2300      	movs	r3, #0
 8009630:	2200      	movs	r2, #0
 8009632:	68f8      	ldr	r0, [r7, #12]
 8009634:	f003 fb7d 	bl	800cd32 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009638:	2300      	movs	r3, #0
}
 800963a:	4618      	mov	r0, r3
 800963c:	3710      	adds	r7, #16
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}

08009642 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009642:	b580      	push	{r7, lr}
 8009644:	b088      	sub	sp, #32
 8009646:	af04      	add	r7, sp, #16
 8009648:	60f8      	str	r0, [r7, #12]
 800964a:	60b9      	str	r1, [r7, #8]
 800964c:	4611      	mov	r1, r2
 800964e:	461a      	mov	r2, r3
 8009650:	460b      	mov	r3, r1
 8009652:	80fb      	strh	r3, [r7, #6]
 8009654:	4613      	mov	r3, r2
 8009656:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009658:	7979      	ldrb	r1, [r7, #5]
 800965a:	2300      	movs	r3, #0
 800965c:	9303      	str	r3, [sp, #12]
 800965e:	88fb      	ldrh	r3, [r7, #6]
 8009660:	9302      	str	r3, [sp, #8]
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	9301      	str	r3, [sp, #4]
 8009666:	2301      	movs	r3, #1
 8009668:	9300      	str	r3, [sp, #0]
 800966a:	2300      	movs	r3, #0
 800966c:	2201      	movs	r2, #1
 800966e:	68f8      	ldr	r0, [r7, #12]
 8009670:	f003 fb5f 	bl	800cd32 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009674:	2300      	movs	r3, #0

}
 8009676:	4618      	mov	r0, r3
 8009678:	3710      	adds	r7, #16
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}

0800967e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800967e:	b580      	push	{r7, lr}
 8009680:	b088      	sub	sp, #32
 8009682:	af04      	add	r7, sp, #16
 8009684:	60f8      	str	r0, [r7, #12]
 8009686:	60b9      	str	r1, [r7, #8]
 8009688:	4611      	mov	r1, r2
 800968a:	461a      	mov	r2, r3
 800968c:	460b      	mov	r3, r1
 800968e:	80fb      	strh	r3, [r7, #6]
 8009690:	4613      	mov	r3, r2
 8009692:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800969a:	2b00      	cmp	r3, #0
 800969c:	d001      	beq.n	80096a2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800969e:	2300      	movs	r3, #0
 80096a0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80096a2:	7979      	ldrb	r1, [r7, #5]
 80096a4:	7e3b      	ldrb	r3, [r7, #24]
 80096a6:	9303      	str	r3, [sp, #12]
 80096a8:	88fb      	ldrh	r3, [r7, #6]
 80096aa:	9302      	str	r3, [sp, #8]
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	9301      	str	r3, [sp, #4]
 80096b0:	2301      	movs	r3, #1
 80096b2:	9300      	str	r3, [sp, #0]
 80096b4:	2302      	movs	r3, #2
 80096b6:	2200      	movs	r2, #0
 80096b8:	68f8      	ldr	r0, [r7, #12]
 80096ba:	f003 fb3a 	bl	800cd32 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80096be:	2300      	movs	r3, #0
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3710      	adds	r7, #16
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b088      	sub	sp, #32
 80096cc:	af04      	add	r7, sp, #16
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	60b9      	str	r1, [r7, #8]
 80096d2:	4611      	mov	r1, r2
 80096d4:	461a      	mov	r2, r3
 80096d6:	460b      	mov	r3, r1
 80096d8:	80fb      	strh	r3, [r7, #6]
 80096da:	4613      	mov	r3, r2
 80096dc:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80096de:	7979      	ldrb	r1, [r7, #5]
 80096e0:	2300      	movs	r3, #0
 80096e2:	9303      	str	r3, [sp, #12]
 80096e4:	88fb      	ldrh	r3, [r7, #6]
 80096e6:	9302      	str	r3, [sp, #8]
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	9301      	str	r3, [sp, #4]
 80096ec:	2301      	movs	r3, #1
 80096ee:	9300      	str	r3, [sp, #0]
 80096f0:	2302      	movs	r3, #2
 80096f2:	2201      	movs	r2, #1
 80096f4:	68f8      	ldr	r0, [r7, #12]
 80096f6:	f003 fb1c 	bl	800cd32 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80096fa:	2300      	movs	r3, #0
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	3710      	adds	r7, #16
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}

08009704 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b086      	sub	sp, #24
 8009708:	af04      	add	r7, sp, #16
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	4608      	mov	r0, r1
 800970e:	4611      	mov	r1, r2
 8009710:	461a      	mov	r2, r3
 8009712:	4603      	mov	r3, r0
 8009714:	70fb      	strb	r3, [r7, #3]
 8009716:	460b      	mov	r3, r1
 8009718:	70bb      	strb	r3, [r7, #2]
 800971a:	4613      	mov	r3, r2
 800971c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800971e:	7878      	ldrb	r0, [r7, #1]
 8009720:	78ba      	ldrb	r2, [r7, #2]
 8009722:	78f9      	ldrb	r1, [r7, #3]
 8009724:	8b3b      	ldrh	r3, [r7, #24]
 8009726:	9302      	str	r3, [sp, #8]
 8009728:	7d3b      	ldrb	r3, [r7, #20]
 800972a:	9301      	str	r3, [sp, #4]
 800972c:	7c3b      	ldrb	r3, [r7, #16]
 800972e:	9300      	str	r3, [sp, #0]
 8009730:	4603      	mov	r3, r0
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f003 faaf 	bl	800cc96 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009738:	2300      	movs	r3, #0
}
 800973a:	4618      	mov	r0, r3
 800973c:	3708      	adds	r7, #8
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}

08009742 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009742:	b580      	push	{r7, lr}
 8009744:	b082      	sub	sp, #8
 8009746:	af00      	add	r7, sp, #0
 8009748:	6078      	str	r0, [r7, #4]
 800974a:	460b      	mov	r3, r1
 800974c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800974e:	78fb      	ldrb	r3, [r7, #3]
 8009750:	4619      	mov	r1, r3
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f003 face 	bl	800ccf4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009758:	2300      	movs	r3, #0
}
 800975a:	4618      	mov	r0, r3
 800975c:	3708      	adds	r7, #8
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}

08009762 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009762:	b580      	push	{r7, lr}
 8009764:	b084      	sub	sp, #16
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
 800976a:	460b      	mov	r3, r1
 800976c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 f836 	bl	80097e0 <USBH_GetFreePipe>
 8009774:	4603      	mov	r3, r0
 8009776:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009778:	89fb      	ldrh	r3, [r7, #14]
 800977a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800977e:	4293      	cmp	r3, r2
 8009780:	d00a      	beq.n	8009798 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009782:	78fa      	ldrb	r2, [r7, #3]
 8009784:	89fb      	ldrh	r3, [r7, #14]
 8009786:	f003 030f 	and.w	r3, r3, #15
 800978a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800978e:	6879      	ldr	r1, [r7, #4]
 8009790:	33e0      	adds	r3, #224	; 0xe0
 8009792:	009b      	lsls	r3, r3, #2
 8009794:	440b      	add	r3, r1
 8009796:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009798:	89fb      	ldrh	r3, [r7, #14]
 800979a:	b2db      	uxtb	r3, r3
}
 800979c:	4618      	mov	r0, r3
 800979e:	3710      	adds	r7, #16
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}

080097a4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b083      	sub	sp, #12
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
 80097ac:	460b      	mov	r3, r1
 80097ae:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80097b0:	78fb      	ldrb	r3, [r7, #3]
 80097b2:	2b0f      	cmp	r3, #15
 80097b4:	d80d      	bhi.n	80097d2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80097b6:	78fb      	ldrb	r3, [r7, #3]
 80097b8:	687a      	ldr	r2, [r7, #4]
 80097ba:	33e0      	adds	r3, #224	; 0xe0
 80097bc:	009b      	lsls	r3, r3, #2
 80097be:	4413      	add	r3, r2
 80097c0:	685a      	ldr	r2, [r3, #4]
 80097c2:	78fb      	ldrb	r3, [r7, #3]
 80097c4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80097c8:	6879      	ldr	r1, [r7, #4]
 80097ca:	33e0      	adds	r3, #224	; 0xe0
 80097cc:	009b      	lsls	r3, r3, #2
 80097ce:	440b      	add	r3, r1
 80097d0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80097d2:	2300      	movs	r3, #0
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	370c      	adds	r7, #12
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr

080097e0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b085      	sub	sp, #20
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80097e8:	2300      	movs	r3, #0
 80097ea:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80097ec:	2300      	movs	r3, #0
 80097ee:	73fb      	strb	r3, [r7, #15]
 80097f0:	e00f      	b.n	8009812 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80097f2:	7bfb      	ldrb	r3, [r7, #15]
 80097f4:	687a      	ldr	r2, [r7, #4]
 80097f6:	33e0      	adds	r3, #224	; 0xe0
 80097f8:	009b      	lsls	r3, r3, #2
 80097fa:	4413      	add	r3, r2
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009802:	2b00      	cmp	r3, #0
 8009804:	d102      	bne.n	800980c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009806:	7bfb      	ldrb	r3, [r7, #15]
 8009808:	b29b      	uxth	r3, r3
 800980a:	e007      	b.n	800981c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800980c:	7bfb      	ldrb	r3, [r7, #15]
 800980e:	3301      	adds	r3, #1
 8009810:	73fb      	strb	r3, [r7, #15]
 8009812:	7bfb      	ldrb	r3, [r7, #15]
 8009814:	2b0f      	cmp	r3, #15
 8009816:	d9ec      	bls.n	80097f2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009818:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800981c:	4618      	mov	r0, r3
 800981e:	3714      	adds	r7, #20
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr

08009828 <__NVIC_SetPriority>:
{
 8009828:	b480      	push	{r7}
 800982a:	b083      	sub	sp, #12
 800982c:	af00      	add	r7, sp, #0
 800982e:	4603      	mov	r3, r0
 8009830:	6039      	str	r1, [r7, #0]
 8009832:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009838:	2b00      	cmp	r3, #0
 800983a:	db0a      	blt.n	8009852 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	b2da      	uxtb	r2, r3
 8009840:	490c      	ldr	r1, [pc, #48]	; (8009874 <__NVIC_SetPriority+0x4c>)
 8009842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009846:	0112      	lsls	r2, r2, #4
 8009848:	b2d2      	uxtb	r2, r2
 800984a:	440b      	add	r3, r1
 800984c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009850:	e00a      	b.n	8009868 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	b2da      	uxtb	r2, r3
 8009856:	4908      	ldr	r1, [pc, #32]	; (8009878 <__NVIC_SetPriority+0x50>)
 8009858:	79fb      	ldrb	r3, [r7, #7]
 800985a:	f003 030f 	and.w	r3, r3, #15
 800985e:	3b04      	subs	r3, #4
 8009860:	0112      	lsls	r2, r2, #4
 8009862:	b2d2      	uxtb	r2, r2
 8009864:	440b      	add	r3, r1
 8009866:	761a      	strb	r2, [r3, #24]
}
 8009868:	bf00      	nop
 800986a:	370c      	adds	r7, #12
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr
 8009874:	e000e100 	.word	0xe000e100
 8009878:	e000ed00 	.word	0xe000ed00

0800987c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800987c:	b580      	push	{r7, lr}
 800987e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009880:	4b05      	ldr	r3, [pc, #20]	; (8009898 <SysTick_Handler+0x1c>)
 8009882:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009884:	f001 ffc8 	bl	800b818 <xTaskGetSchedulerState>
 8009888:	4603      	mov	r3, r0
 800988a:	2b01      	cmp	r3, #1
 800988c:	d001      	beq.n	8009892 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800988e:	f002 fdb3 	bl	800c3f8 <xPortSysTickHandler>
  }
}
 8009892:	bf00      	nop
 8009894:	bd80      	pop	{r7, pc}
 8009896:	bf00      	nop
 8009898:	e000e010 	.word	0xe000e010

0800989c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800989c:	b580      	push	{r7, lr}
 800989e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80098a0:	2100      	movs	r1, #0
 80098a2:	f06f 0004 	mvn.w	r0, #4
 80098a6:	f7ff ffbf 	bl	8009828 <__NVIC_SetPriority>
#endif
}
 80098aa:	bf00      	nop
 80098ac:	bd80      	pop	{r7, pc}
	...

080098b0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80098b0:	b480      	push	{r7}
 80098b2:	b083      	sub	sp, #12
 80098b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098b6:	f3ef 8305 	mrs	r3, IPSR
 80098ba:	603b      	str	r3, [r7, #0]
  return(result);
 80098bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d003      	beq.n	80098ca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80098c2:	f06f 0305 	mvn.w	r3, #5
 80098c6:	607b      	str	r3, [r7, #4]
 80098c8:	e00c      	b.n	80098e4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80098ca:	4b0a      	ldr	r3, [pc, #40]	; (80098f4 <osKernelInitialize+0x44>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d105      	bne.n	80098de <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80098d2:	4b08      	ldr	r3, [pc, #32]	; (80098f4 <osKernelInitialize+0x44>)
 80098d4:	2201      	movs	r2, #1
 80098d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80098d8:	2300      	movs	r3, #0
 80098da:	607b      	str	r3, [r7, #4]
 80098dc:	e002      	b.n	80098e4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80098de:	f04f 33ff 	mov.w	r3, #4294967295
 80098e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80098e4:	687b      	ldr	r3, [r7, #4]
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	370c      	adds	r7, #12
 80098ea:	46bd      	mov	sp, r7
 80098ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f0:	4770      	bx	lr
 80098f2:	bf00      	nop
 80098f4:	200002b0 	.word	0x200002b0

080098f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b082      	sub	sp, #8
 80098fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098fe:	f3ef 8305 	mrs	r3, IPSR
 8009902:	603b      	str	r3, [r7, #0]
  return(result);
 8009904:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009906:	2b00      	cmp	r3, #0
 8009908:	d003      	beq.n	8009912 <osKernelStart+0x1a>
    stat = osErrorISR;
 800990a:	f06f 0305 	mvn.w	r3, #5
 800990e:	607b      	str	r3, [r7, #4]
 8009910:	e010      	b.n	8009934 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009912:	4b0b      	ldr	r3, [pc, #44]	; (8009940 <osKernelStart+0x48>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	2b01      	cmp	r3, #1
 8009918:	d109      	bne.n	800992e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800991a:	f7ff ffbf 	bl	800989c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800991e:	4b08      	ldr	r3, [pc, #32]	; (8009940 <osKernelStart+0x48>)
 8009920:	2202      	movs	r2, #2
 8009922:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009924:	f001 fae8 	bl	800aef8 <vTaskStartScheduler>
      stat = osOK;
 8009928:	2300      	movs	r3, #0
 800992a:	607b      	str	r3, [r7, #4]
 800992c:	e002      	b.n	8009934 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800992e:	f04f 33ff 	mov.w	r3, #4294967295
 8009932:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009934:	687b      	ldr	r3, [r7, #4]
}
 8009936:	4618      	mov	r0, r3
 8009938:	3708      	adds	r7, #8
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
 800993e:	bf00      	nop
 8009940:	200002b0 	.word	0x200002b0

08009944 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009944:	b580      	push	{r7, lr}
 8009946:	b08e      	sub	sp, #56	; 0x38
 8009948:	af04      	add	r7, sp, #16
 800994a:	60f8      	str	r0, [r7, #12]
 800994c:	60b9      	str	r1, [r7, #8]
 800994e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009950:	2300      	movs	r3, #0
 8009952:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009954:	f3ef 8305 	mrs	r3, IPSR
 8009958:	617b      	str	r3, [r7, #20]
  return(result);
 800995a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800995c:	2b00      	cmp	r3, #0
 800995e:	d17e      	bne.n	8009a5e <osThreadNew+0x11a>
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d07b      	beq.n	8009a5e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009966:	2380      	movs	r3, #128	; 0x80
 8009968:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800996a:	2318      	movs	r3, #24
 800996c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800996e:	2300      	movs	r3, #0
 8009970:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009972:	f04f 33ff 	mov.w	r3, #4294967295
 8009976:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d045      	beq.n	8009a0a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d002      	beq.n	800998c <osThreadNew+0x48>
        name = attr->name;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	699b      	ldr	r3, [r3, #24]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d002      	beq.n	800999a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	699b      	ldr	r3, [r3, #24]
 8009998:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800999a:	69fb      	ldr	r3, [r7, #28]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d008      	beq.n	80099b2 <osThreadNew+0x6e>
 80099a0:	69fb      	ldr	r3, [r7, #28]
 80099a2:	2b38      	cmp	r3, #56	; 0x38
 80099a4:	d805      	bhi.n	80099b2 <osThreadNew+0x6e>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	f003 0301 	and.w	r3, r3, #1
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d001      	beq.n	80099b6 <osThreadNew+0x72>
        return (NULL);
 80099b2:	2300      	movs	r3, #0
 80099b4:	e054      	b.n	8009a60 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	695b      	ldr	r3, [r3, #20]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d003      	beq.n	80099c6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	695b      	ldr	r3, [r3, #20]
 80099c2:	089b      	lsrs	r3, r3, #2
 80099c4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	689b      	ldr	r3, [r3, #8]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d00e      	beq.n	80099ec <osThreadNew+0xa8>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	68db      	ldr	r3, [r3, #12]
 80099d2:	2ba7      	cmp	r3, #167	; 0xa7
 80099d4:	d90a      	bls.n	80099ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d006      	beq.n	80099ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	695b      	ldr	r3, [r3, #20]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d002      	beq.n	80099ec <osThreadNew+0xa8>
        mem = 1;
 80099e6:	2301      	movs	r3, #1
 80099e8:	61bb      	str	r3, [r7, #24]
 80099ea:	e010      	b.n	8009a0e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	689b      	ldr	r3, [r3, #8]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d10c      	bne.n	8009a0e <osThreadNew+0xca>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	68db      	ldr	r3, [r3, #12]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d108      	bne.n	8009a0e <osThreadNew+0xca>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	691b      	ldr	r3, [r3, #16]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d104      	bne.n	8009a0e <osThreadNew+0xca>
          mem = 0;
 8009a04:	2300      	movs	r3, #0
 8009a06:	61bb      	str	r3, [r7, #24]
 8009a08:	e001      	b.n	8009a0e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009a0e:	69bb      	ldr	r3, [r7, #24]
 8009a10:	2b01      	cmp	r3, #1
 8009a12:	d110      	bne.n	8009a36 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009a18:	687a      	ldr	r2, [r7, #4]
 8009a1a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009a1c:	9202      	str	r2, [sp, #8]
 8009a1e:	9301      	str	r3, [sp, #4]
 8009a20:	69fb      	ldr	r3, [r7, #28]
 8009a22:	9300      	str	r3, [sp, #0]
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	6a3a      	ldr	r2, [r7, #32]
 8009a28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a2a:	68f8      	ldr	r0, [r7, #12]
 8009a2c:	f001 f878 	bl	800ab20 <xTaskCreateStatic>
 8009a30:	4603      	mov	r3, r0
 8009a32:	613b      	str	r3, [r7, #16]
 8009a34:	e013      	b.n	8009a5e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009a36:	69bb      	ldr	r3, [r7, #24]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d110      	bne.n	8009a5e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009a3c:	6a3b      	ldr	r3, [r7, #32]
 8009a3e:	b29a      	uxth	r2, r3
 8009a40:	f107 0310 	add.w	r3, r7, #16
 8009a44:	9301      	str	r3, [sp, #4]
 8009a46:	69fb      	ldr	r3, [r7, #28]
 8009a48:	9300      	str	r3, [sp, #0]
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a4e:	68f8      	ldr	r0, [r7, #12]
 8009a50:	f001 f8c3 	bl	800abda <xTaskCreate>
 8009a54:	4603      	mov	r3, r0
 8009a56:	2b01      	cmp	r3, #1
 8009a58:	d001      	beq.n	8009a5e <osThreadNew+0x11a>
            hTask = NULL;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009a5e:	693b      	ldr	r3, [r7, #16]
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	3728      	adds	r7, #40	; 0x28
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}

08009a68 <osThreadGetName>:

const char *osThreadGetName (osThreadId_t thread_id) {
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b086      	sub	sp, #24
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a74:	f3ef 8305 	mrs	r3, IPSR
 8009a78:	60fb      	str	r3, [r7, #12]
  return(result);
 8009a7a:	68fb      	ldr	r3, [r7, #12]
  const char *name;

  if (IS_IRQ() || (hTask == NULL)) {
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d102      	bne.n	8009a86 <osThreadGetName+0x1e>
 8009a80:	693b      	ldr	r3, [r7, #16]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d102      	bne.n	8009a8c <osThreadGetName+0x24>
    name = NULL;
 8009a86:	2300      	movs	r3, #0
 8009a88:	617b      	str	r3, [r7, #20]
 8009a8a:	e003      	b.n	8009a94 <osThreadGetName+0x2c>
  } else {
    name = pcTaskGetName (hTask);
 8009a8c:	6938      	ldr	r0, [r7, #16]
 8009a8e:	f001 fb5f 	bl	800b150 <pcTaskGetName>
 8009a92:	6178      	str	r0, [r7, #20]
  }

  return (name);
 8009a94:	697b      	ldr	r3, [r7, #20]
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3718      	adds	r7, #24
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}

08009a9e <osThreadGetId>:

osThreadId_t osThreadGetId (void) {
 8009a9e:	b580      	push	{r7, lr}
 8009aa0:	b082      	sub	sp, #8
 8009aa2:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8009aa4:	f001 fea8 	bl	800b7f8 <xTaskGetCurrentTaskHandle>
 8009aa8:	6078      	str	r0, [r7, #4]

  return (id);
 8009aaa:	687b      	ldr	r3, [r7, #4]
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3708      	adds	r7, #8
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b084      	sub	sp, #16
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009abc:	f3ef 8305 	mrs	r3, IPSR
 8009ac0:	60bb      	str	r3, [r7, #8]
  return(result);
 8009ac2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d003      	beq.n	8009ad0 <osDelay+0x1c>
    stat = osErrorISR;
 8009ac8:	f06f 0305 	mvn.w	r3, #5
 8009acc:	60fb      	str	r3, [r7, #12]
 8009ace:	e007      	b.n	8009ae0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d002      	beq.n	8009ae0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f001 f9d8 	bl	800ae90 <vTaskDelay>
    }
  }

  return (stat);
 8009ae0:	68fb      	ldr	r3, [r7, #12]
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3710      	adds	r7, #16
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}

08009aea <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009aea:	b580      	push	{r7, lr}
 8009aec:	b08a      	sub	sp, #40	; 0x28
 8009aee:	af02      	add	r7, sp, #8
 8009af0:	60f8      	str	r0, [r7, #12]
 8009af2:	60b9      	str	r1, [r7, #8]
 8009af4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009af6:	2300      	movs	r3, #0
 8009af8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009afa:	f3ef 8305 	mrs	r3, IPSR
 8009afe:	613b      	str	r3, [r7, #16]
  return(result);
 8009b00:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d15f      	bne.n	8009bc6 <osMessageQueueNew+0xdc>
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d05c      	beq.n	8009bc6 <osMessageQueueNew+0xdc>
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d059      	beq.n	8009bc6 <osMessageQueueNew+0xdc>
    mem = -1;
 8009b12:	f04f 33ff 	mov.w	r3, #4294967295
 8009b16:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d029      	beq.n	8009b72 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	689b      	ldr	r3, [r3, #8]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d012      	beq.n	8009b4c <osMessageQueueNew+0x62>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	68db      	ldr	r3, [r3, #12]
 8009b2a:	2b4f      	cmp	r3, #79	; 0x4f
 8009b2c:	d90e      	bls.n	8009b4c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d00a      	beq.n	8009b4c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	695a      	ldr	r2, [r3, #20]
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	68b9      	ldr	r1, [r7, #8]
 8009b3e:	fb01 f303 	mul.w	r3, r1, r3
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d302      	bcc.n	8009b4c <osMessageQueueNew+0x62>
        mem = 1;
 8009b46:	2301      	movs	r3, #1
 8009b48:	61bb      	str	r3, [r7, #24]
 8009b4a:	e014      	b.n	8009b76 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	689b      	ldr	r3, [r3, #8]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d110      	bne.n	8009b76 <osMessageQueueNew+0x8c>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	68db      	ldr	r3, [r3, #12]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d10c      	bne.n	8009b76 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d108      	bne.n	8009b76 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	695b      	ldr	r3, [r3, #20]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d104      	bne.n	8009b76 <osMessageQueueNew+0x8c>
          mem = 0;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	61bb      	str	r3, [r7, #24]
 8009b70:	e001      	b.n	8009b76 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009b72:	2300      	movs	r3, #0
 8009b74:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009b76:	69bb      	ldr	r3, [r7, #24]
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d10b      	bne.n	8009b94 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	691a      	ldr	r2, [r3, #16]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	689b      	ldr	r3, [r3, #8]
 8009b84:	2100      	movs	r1, #0
 8009b86:	9100      	str	r1, [sp, #0]
 8009b88:	68b9      	ldr	r1, [r7, #8]
 8009b8a:	68f8      	ldr	r0, [r7, #12]
 8009b8c:	f000 fa4e 	bl	800a02c <xQueueGenericCreateStatic>
 8009b90:	61f8      	str	r0, [r7, #28]
 8009b92:	e008      	b.n	8009ba6 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009b94:	69bb      	ldr	r3, [r7, #24]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d105      	bne.n	8009ba6 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	68b9      	ldr	r1, [r7, #8]
 8009b9e:	68f8      	ldr	r0, [r7, #12]
 8009ba0:	f000 fabc 	bl	800a11c <xQueueGenericCreate>
 8009ba4:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009ba6:	69fb      	ldr	r3, [r7, #28]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d00c      	beq.n	8009bc6 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d003      	beq.n	8009bba <osMessageQueueNew+0xd0>
        name = attr->name;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	617b      	str	r3, [r7, #20]
 8009bb8:	e001      	b.n	8009bbe <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009bbe:	6979      	ldr	r1, [r7, #20]
 8009bc0:	69f8      	ldr	r0, [r7, #28]
 8009bc2:	f000 ff4f 	bl	800aa64 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009bc6:	69fb      	ldr	r3, [r7, #28]
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3720      	adds	r7, #32
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b088      	sub	sp, #32
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	60f8      	str	r0, [r7, #12]
 8009bd8:	60b9      	str	r1, [r7, #8]
 8009bda:	603b      	str	r3, [r7, #0]
 8009bdc:	4613      	mov	r3, r2
 8009bde:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009be4:	2300      	movs	r3, #0
 8009be6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009be8:	f3ef 8305 	mrs	r3, IPSR
 8009bec:	617b      	str	r3, [r7, #20]
  return(result);
 8009bee:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d028      	beq.n	8009c46 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009bf4:	69bb      	ldr	r3, [r7, #24]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d005      	beq.n	8009c06 <osMessageQueuePut+0x36>
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d002      	beq.n	8009c06 <osMessageQueuePut+0x36>
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d003      	beq.n	8009c0e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8009c06:	f06f 0303 	mvn.w	r3, #3
 8009c0a:	61fb      	str	r3, [r7, #28]
 8009c0c:	e038      	b.n	8009c80 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009c12:	f107 0210 	add.w	r2, r7, #16
 8009c16:	2300      	movs	r3, #0
 8009c18:	68b9      	ldr	r1, [r7, #8]
 8009c1a:	69b8      	ldr	r0, [r7, #24]
 8009c1c:	f000 fbda 	bl	800a3d4 <xQueueGenericSendFromISR>
 8009c20:	4603      	mov	r3, r0
 8009c22:	2b01      	cmp	r3, #1
 8009c24:	d003      	beq.n	8009c2e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8009c26:	f06f 0302 	mvn.w	r3, #2
 8009c2a:	61fb      	str	r3, [r7, #28]
 8009c2c:	e028      	b.n	8009c80 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d025      	beq.n	8009c80 <osMessageQueuePut+0xb0>
 8009c34:	4b15      	ldr	r3, [pc, #84]	; (8009c8c <osMessageQueuePut+0xbc>)
 8009c36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c3a:	601a      	str	r2, [r3, #0]
 8009c3c:	f3bf 8f4f 	dsb	sy
 8009c40:	f3bf 8f6f 	isb	sy
 8009c44:	e01c      	b.n	8009c80 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009c46:	69bb      	ldr	r3, [r7, #24]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d002      	beq.n	8009c52 <osMessageQueuePut+0x82>
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d103      	bne.n	8009c5a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8009c52:	f06f 0303 	mvn.w	r3, #3
 8009c56:	61fb      	str	r3, [r7, #28]
 8009c58:	e012      	b.n	8009c80 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	683a      	ldr	r2, [r7, #0]
 8009c5e:	68b9      	ldr	r1, [r7, #8]
 8009c60:	69b8      	ldr	r0, [r7, #24]
 8009c62:	f000 fab9 	bl	800a1d8 <xQueueGenericSend>
 8009c66:	4603      	mov	r3, r0
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	d009      	beq.n	8009c80 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d003      	beq.n	8009c7a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8009c72:	f06f 0301 	mvn.w	r3, #1
 8009c76:	61fb      	str	r3, [r7, #28]
 8009c78:	e002      	b.n	8009c80 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8009c7a:	f06f 0302 	mvn.w	r3, #2
 8009c7e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009c80:	69fb      	ldr	r3, [r7, #28]
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3720      	adds	r7, #32
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
 8009c8a:	bf00      	nop
 8009c8c:	e000ed04 	.word	0xe000ed04

08009c90 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b088      	sub	sp, #32
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	60f8      	str	r0, [r7, #12]
 8009c98:	60b9      	str	r1, [r7, #8]
 8009c9a:	607a      	str	r2, [r7, #4]
 8009c9c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ca6:	f3ef 8305 	mrs	r3, IPSR
 8009caa:	617b      	str	r3, [r7, #20]
  return(result);
 8009cac:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d028      	beq.n	8009d04 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009cb2:	69bb      	ldr	r3, [r7, #24]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d005      	beq.n	8009cc4 <osMessageQueueGet+0x34>
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d002      	beq.n	8009cc4 <osMessageQueueGet+0x34>
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d003      	beq.n	8009ccc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009cc4:	f06f 0303 	mvn.w	r3, #3
 8009cc8:	61fb      	str	r3, [r7, #28]
 8009cca:	e037      	b.n	8009d3c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8009ccc:	2300      	movs	r3, #0
 8009cce:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009cd0:	f107 0310 	add.w	r3, r7, #16
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	68b9      	ldr	r1, [r7, #8]
 8009cd8:	69b8      	ldr	r0, [r7, #24]
 8009cda:	f000 fcf7 	bl	800a6cc <xQueueReceiveFromISR>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	2b01      	cmp	r3, #1
 8009ce2:	d003      	beq.n	8009cec <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009ce4:	f06f 0302 	mvn.w	r3, #2
 8009ce8:	61fb      	str	r3, [r7, #28]
 8009cea:	e027      	b.n	8009d3c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d024      	beq.n	8009d3c <osMessageQueueGet+0xac>
 8009cf2:	4b15      	ldr	r3, [pc, #84]	; (8009d48 <osMessageQueueGet+0xb8>)
 8009cf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cf8:	601a      	str	r2, [r3, #0]
 8009cfa:	f3bf 8f4f 	dsb	sy
 8009cfe:	f3bf 8f6f 	isb	sy
 8009d02:	e01b      	b.n	8009d3c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009d04:	69bb      	ldr	r3, [r7, #24]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d002      	beq.n	8009d10 <osMessageQueueGet+0x80>
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d103      	bne.n	8009d18 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8009d10:	f06f 0303 	mvn.w	r3, #3
 8009d14:	61fb      	str	r3, [r7, #28]
 8009d16:	e011      	b.n	8009d3c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009d18:	683a      	ldr	r2, [r7, #0]
 8009d1a:	68b9      	ldr	r1, [r7, #8]
 8009d1c:	69b8      	ldr	r0, [r7, #24]
 8009d1e:	f000 fbf5 	bl	800a50c <xQueueReceive>
 8009d22:	4603      	mov	r3, r0
 8009d24:	2b01      	cmp	r3, #1
 8009d26:	d009      	beq.n	8009d3c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d003      	beq.n	8009d36 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8009d2e:	f06f 0301 	mvn.w	r3, #1
 8009d32:	61fb      	str	r3, [r7, #28]
 8009d34:	e002      	b.n	8009d3c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8009d36:	f06f 0302 	mvn.w	r3, #2
 8009d3a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009d3c:	69fb      	ldr	r3, [r7, #28]
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3720      	adds	r7, #32
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}
 8009d46:	bf00      	nop
 8009d48:	e000ed04 	.word	0xe000ed04

08009d4c <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b086      	sub	sp, #24
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d102      	bne.n	8009d64 <osMessageQueueGetCount+0x18>
    count = 0U;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	617b      	str	r3, [r7, #20]
 8009d62:	e00e      	b.n	8009d82 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d64:	f3ef 8305 	mrs	r3, IPSR
 8009d68:	60fb      	str	r3, [r7, #12]
  return(result);
 8009d6a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d004      	beq.n	8009d7a <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8009d70:	6938      	ldr	r0, [r7, #16]
 8009d72:	f000 fd49 	bl	800a808 <uxQueueMessagesWaitingFromISR>
 8009d76:	6178      	str	r0, [r7, #20]
 8009d78:	e003      	b.n	8009d82 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8009d7a:	6938      	ldr	r0, [r7, #16]
 8009d7c:	f000 fd26 	bl	800a7cc <uxQueueMessagesWaiting>
 8009d80:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8009d82:	697b      	ldr	r3, [r7, #20]
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3718      	adds	r7, #24
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}

08009d8c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009d8c:	b480      	push	{r7}
 8009d8e:	b085      	sub	sp, #20
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	60f8      	str	r0, [r7, #12]
 8009d94:	60b9      	str	r1, [r7, #8]
 8009d96:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	4a07      	ldr	r2, [pc, #28]	; (8009db8 <vApplicationGetIdleTaskMemory+0x2c>)
 8009d9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	4a06      	ldr	r2, [pc, #24]	; (8009dbc <vApplicationGetIdleTaskMemory+0x30>)
 8009da2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2280      	movs	r2, #128	; 0x80
 8009da8:	601a      	str	r2, [r3, #0]
}
 8009daa:	bf00      	nop
 8009dac:	3714      	adds	r7, #20
 8009dae:	46bd      	mov	sp, r7
 8009db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db4:	4770      	bx	lr
 8009db6:	bf00      	nop
 8009db8:	200002b4 	.word	0x200002b4
 8009dbc:	2000035c 	.word	0x2000035c

08009dc0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009dc0:	b480      	push	{r7}
 8009dc2:	b085      	sub	sp, #20
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	60f8      	str	r0, [r7, #12]
 8009dc8:	60b9      	str	r1, [r7, #8]
 8009dca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	4a07      	ldr	r2, [pc, #28]	; (8009dec <vApplicationGetTimerTaskMemory+0x2c>)
 8009dd0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	4a06      	ldr	r2, [pc, #24]	; (8009df0 <vApplicationGetTimerTaskMemory+0x30>)
 8009dd6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009dde:	601a      	str	r2, [r3, #0]
}
 8009de0:	bf00      	nop
 8009de2:	3714      	adds	r7, #20
 8009de4:	46bd      	mov	sp, r7
 8009de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dea:	4770      	bx	lr
 8009dec:	2000055c 	.word	0x2000055c
 8009df0:	20000604 	.word	0x20000604

08009df4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009df4:	b480      	push	{r7}
 8009df6:	b083      	sub	sp, #12
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f103 0208 	add.w	r2, r3, #8
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f04f 32ff 	mov.w	r2, #4294967295
 8009e0c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f103 0208 	add.w	r2, r3, #8
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f103 0208 	add.w	r2, r3, #8
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2200      	movs	r2, #0
 8009e26:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009e28:	bf00      	nop
 8009e2a:	370c      	adds	r7, #12
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e32:	4770      	bx	lr

08009e34 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009e34:	b480      	push	{r7}
 8009e36:	b083      	sub	sp, #12
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009e42:	bf00      	nop
 8009e44:	370c      	adds	r7, #12
 8009e46:	46bd      	mov	sp, r7
 8009e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4c:	4770      	bx	lr

08009e4e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e4e:	b480      	push	{r7}
 8009e50:	b085      	sub	sp, #20
 8009e52:	af00      	add	r7, sp, #0
 8009e54:	6078      	str	r0, [r7, #4]
 8009e56:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	68fa      	ldr	r2, [r7, #12]
 8009e62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	689a      	ldr	r2, [r3, #8]
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	689b      	ldr	r3, [r3, #8]
 8009e70:	683a      	ldr	r2, [r7, #0]
 8009e72:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	683a      	ldr	r2, [r7, #0]
 8009e78:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	687a      	ldr	r2, [r7, #4]
 8009e7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	1c5a      	adds	r2, r3, #1
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	601a      	str	r2, [r3, #0]
}
 8009e8a:	bf00      	nop
 8009e8c:	3714      	adds	r7, #20
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e94:	4770      	bx	lr

08009e96 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e96:	b480      	push	{r7}
 8009e98:	b085      	sub	sp, #20
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
 8009e9e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eac:	d103      	bne.n	8009eb6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	691b      	ldr	r3, [r3, #16]
 8009eb2:	60fb      	str	r3, [r7, #12]
 8009eb4:	e00c      	b.n	8009ed0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	3308      	adds	r3, #8
 8009eba:	60fb      	str	r3, [r7, #12]
 8009ebc:	e002      	b.n	8009ec4 <vListInsert+0x2e>
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	60fb      	str	r3, [r7, #12]
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	685b      	ldr	r3, [r3, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	68ba      	ldr	r2, [r7, #8]
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	d2f6      	bcs.n	8009ebe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	685a      	ldr	r2, [r3, #4]
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	683a      	ldr	r2, [r7, #0]
 8009ede:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	68fa      	ldr	r2, [r7, #12]
 8009ee4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	683a      	ldr	r2, [r7, #0]
 8009eea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	687a      	ldr	r2, [r7, #4]
 8009ef0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	1c5a      	adds	r2, r3, #1
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	601a      	str	r2, [r3, #0]
}
 8009efc:	bf00      	nop
 8009efe:	3714      	adds	r7, #20
 8009f00:	46bd      	mov	sp, r7
 8009f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f06:	4770      	bx	lr

08009f08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b085      	sub	sp, #20
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	691b      	ldr	r3, [r3, #16]
 8009f14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	685b      	ldr	r3, [r3, #4]
 8009f1a:	687a      	ldr	r2, [r7, #4]
 8009f1c:	6892      	ldr	r2, [r2, #8]
 8009f1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	689b      	ldr	r3, [r3, #8]
 8009f24:	687a      	ldr	r2, [r7, #4]
 8009f26:	6852      	ldr	r2, [r2, #4]
 8009f28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	685b      	ldr	r3, [r3, #4]
 8009f2e:	687a      	ldr	r2, [r7, #4]
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d103      	bne.n	8009f3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	689a      	ldr	r2, [r3, #8]
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	1e5a      	subs	r2, r3, #1
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3714      	adds	r7, #20
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr

08009f5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b084      	sub	sp, #16
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d10a      	bne.n	8009f86 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f74:	f383 8811 	msr	BASEPRI, r3
 8009f78:	f3bf 8f6f 	isb	sy
 8009f7c:	f3bf 8f4f 	dsb	sy
 8009f80:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009f82:	bf00      	nop
 8009f84:	e7fe      	b.n	8009f84 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009f86:	f002 f9a5 	bl	800c2d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681a      	ldr	r2, [r3, #0]
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f92:	68f9      	ldr	r1, [r7, #12]
 8009f94:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009f96:	fb01 f303 	mul.w	r3, r1, r3
 8009f9a:	441a      	add	r2, r3
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	681a      	ldr	r2, [r3, #0]
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681a      	ldr	r2, [r3, #0]
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fb6:	3b01      	subs	r3, #1
 8009fb8:	68f9      	ldr	r1, [r7, #12]
 8009fba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009fbc:	fb01 f303 	mul.w	r3, r1, r3
 8009fc0:	441a      	add	r2, r3
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	22ff      	movs	r2, #255	; 0xff
 8009fca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	22ff      	movs	r2, #255	; 0xff
 8009fd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d114      	bne.n	800a006 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	691b      	ldr	r3, [r3, #16]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d01a      	beq.n	800a01a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	3310      	adds	r3, #16
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f001 fa43 	bl	800b474 <xTaskRemoveFromEventList>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d012      	beq.n	800a01a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009ff4:	4b0c      	ldr	r3, [pc, #48]	; (800a028 <xQueueGenericReset+0xcc>)
 8009ff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ffa:	601a      	str	r2, [r3, #0]
 8009ffc:	f3bf 8f4f 	dsb	sy
 800a000:	f3bf 8f6f 	isb	sy
 800a004:	e009      	b.n	800a01a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	3310      	adds	r3, #16
 800a00a:	4618      	mov	r0, r3
 800a00c:	f7ff fef2 	bl	8009df4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	3324      	adds	r3, #36	; 0x24
 800a014:	4618      	mov	r0, r3
 800a016:	f7ff feed 	bl	8009df4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a01a:	f002 f98b 	bl	800c334 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a01e:	2301      	movs	r3, #1
}
 800a020:	4618      	mov	r0, r3
 800a022:	3710      	adds	r7, #16
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}
 800a028:	e000ed04 	.word	0xe000ed04

0800a02c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b08e      	sub	sp, #56	; 0x38
 800a030:	af02      	add	r7, sp, #8
 800a032:	60f8      	str	r0, [r7, #12]
 800a034:	60b9      	str	r1, [r7, #8]
 800a036:	607a      	str	r2, [r7, #4]
 800a038:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d10a      	bne.n	800a056 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a044:	f383 8811 	msr	BASEPRI, r3
 800a048:	f3bf 8f6f 	isb	sy
 800a04c:	f3bf 8f4f 	dsb	sy
 800a050:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a052:	bf00      	nop
 800a054:	e7fe      	b.n	800a054 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d10a      	bne.n	800a072 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a060:	f383 8811 	msr	BASEPRI, r3
 800a064:	f3bf 8f6f 	isb	sy
 800a068:	f3bf 8f4f 	dsb	sy
 800a06c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a06e:	bf00      	nop
 800a070:	e7fe      	b.n	800a070 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d002      	beq.n	800a07e <xQueueGenericCreateStatic+0x52>
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d001      	beq.n	800a082 <xQueueGenericCreateStatic+0x56>
 800a07e:	2301      	movs	r3, #1
 800a080:	e000      	b.n	800a084 <xQueueGenericCreateStatic+0x58>
 800a082:	2300      	movs	r3, #0
 800a084:	2b00      	cmp	r3, #0
 800a086:	d10a      	bne.n	800a09e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a08c:	f383 8811 	msr	BASEPRI, r3
 800a090:	f3bf 8f6f 	isb	sy
 800a094:	f3bf 8f4f 	dsb	sy
 800a098:	623b      	str	r3, [r7, #32]
}
 800a09a:	bf00      	nop
 800a09c:	e7fe      	b.n	800a09c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d102      	bne.n	800a0aa <xQueueGenericCreateStatic+0x7e>
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d101      	bne.n	800a0ae <xQueueGenericCreateStatic+0x82>
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	e000      	b.n	800a0b0 <xQueueGenericCreateStatic+0x84>
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d10a      	bne.n	800a0ca <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b8:	f383 8811 	msr	BASEPRI, r3
 800a0bc:	f3bf 8f6f 	isb	sy
 800a0c0:	f3bf 8f4f 	dsb	sy
 800a0c4:	61fb      	str	r3, [r7, #28]
}
 800a0c6:	bf00      	nop
 800a0c8:	e7fe      	b.n	800a0c8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a0ca:	2350      	movs	r3, #80	; 0x50
 800a0cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	2b50      	cmp	r3, #80	; 0x50
 800a0d2:	d00a      	beq.n	800a0ea <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d8:	f383 8811 	msr	BASEPRI, r3
 800a0dc:	f3bf 8f6f 	isb	sy
 800a0e0:	f3bf 8f4f 	dsb	sy
 800a0e4:	61bb      	str	r3, [r7, #24]
}
 800a0e6:	bf00      	nop
 800a0e8:	e7fe      	b.n	800a0e8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a0ea:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d00d      	beq.n	800a112 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0f8:	2201      	movs	r2, #1
 800a0fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a0fe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a104:	9300      	str	r3, [sp, #0]
 800a106:	4613      	mov	r3, r2
 800a108:	687a      	ldr	r2, [r7, #4]
 800a10a:	68b9      	ldr	r1, [r7, #8]
 800a10c:	68f8      	ldr	r0, [r7, #12]
 800a10e:	f000 f83f 	bl	800a190 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a114:	4618      	mov	r0, r3
 800a116:	3730      	adds	r7, #48	; 0x30
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}

0800a11c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b08a      	sub	sp, #40	; 0x28
 800a120:	af02      	add	r7, sp, #8
 800a122:	60f8      	str	r0, [r7, #12]
 800a124:	60b9      	str	r1, [r7, #8]
 800a126:	4613      	mov	r3, r2
 800a128:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d10a      	bne.n	800a146 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a134:	f383 8811 	msr	BASEPRI, r3
 800a138:	f3bf 8f6f 	isb	sy
 800a13c:	f3bf 8f4f 	dsb	sy
 800a140:	613b      	str	r3, [r7, #16]
}
 800a142:	bf00      	nop
 800a144:	e7fe      	b.n	800a144 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	68ba      	ldr	r2, [r7, #8]
 800a14a:	fb02 f303 	mul.w	r3, r2, r3
 800a14e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a150:	69fb      	ldr	r3, [r7, #28]
 800a152:	3350      	adds	r3, #80	; 0x50
 800a154:	4618      	mov	r0, r3
 800a156:	f002 f9df 	bl	800c518 <pvPortMalloc>
 800a15a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a15c:	69bb      	ldr	r3, [r7, #24]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d011      	beq.n	800a186 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a162:	69bb      	ldr	r3, [r7, #24]
 800a164:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	3350      	adds	r3, #80	; 0x50
 800a16a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a16c:	69bb      	ldr	r3, [r7, #24]
 800a16e:	2200      	movs	r2, #0
 800a170:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a174:	79fa      	ldrb	r2, [r7, #7]
 800a176:	69bb      	ldr	r3, [r7, #24]
 800a178:	9300      	str	r3, [sp, #0]
 800a17a:	4613      	mov	r3, r2
 800a17c:	697a      	ldr	r2, [r7, #20]
 800a17e:	68b9      	ldr	r1, [r7, #8]
 800a180:	68f8      	ldr	r0, [r7, #12]
 800a182:	f000 f805 	bl	800a190 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a186:	69bb      	ldr	r3, [r7, #24]
	}
 800a188:	4618      	mov	r0, r3
 800a18a:	3720      	adds	r7, #32
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}

0800a190 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b084      	sub	sp, #16
 800a194:	af00      	add	r7, sp, #0
 800a196:	60f8      	str	r0, [r7, #12]
 800a198:	60b9      	str	r1, [r7, #8]
 800a19a:	607a      	str	r2, [r7, #4]
 800a19c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d103      	bne.n	800a1ac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a1a4:	69bb      	ldr	r3, [r7, #24]
 800a1a6:	69ba      	ldr	r2, [r7, #24]
 800a1a8:	601a      	str	r2, [r3, #0]
 800a1aa:	e002      	b.n	800a1b2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a1ac:	69bb      	ldr	r3, [r7, #24]
 800a1ae:	687a      	ldr	r2, [r7, #4]
 800a1b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a1b2:	69bb      	ldr	r3, [r7, #24]
 800a1b4:	68fa      	ldr	r2, [r7, #12]
 800a1b6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a1b8:	69bb      	ldr	r3, [r7, #24]
 800a1ba:	68ba      	ldr	r2, [r7, #8]
 800a1bc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a1be:	2101      	movs	r1, #1
 800a1c0:	69b8      	ldr	r0, [r7, #24]
 800a1c2:	f7ff fecb 	bl	8009f5c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a1c6:	69bb      	ldr	r3, [r7, #24]
 800a1c8:	78fa      	ldrb	r2, [r7, #3]
 800a1ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a1ce:	bf00      	nop
 800a1d0:	3710      	adds	r7, #16
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}
	...

0800a1d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b08e      	sub	sp, #56	; 0x38
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	60f8      	str	r0, [r7, #12]
 800a1e0:	60b9      	str	r1, [r7, #8]
 800a1e2:	607a      	str	r2, [r7, #4]
 800a1e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d10a      	bne.n	800a20a <xQueueGenericSend+0x32>
	__asm volatile
 800a1f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f8:	f383 8811 	msr	BASEPRI, r3
 800a1fc:	f3bf 8f6f 	isb	sy
 800a200:	f3bf 8f4f 	dsb	sy
 800a204:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a206:	bf00      	nop
 800a208:	e7fe      	b.n	800a208 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d103      	bne.n	800a218 <xQueueGenericSend+0x40>
 800a210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a214:	2b00      	cmp	r3, #0
 800a216:	d101      	bne.n	800a21c <xQueueGenericSend+0x44>
 800a218:	2301      	movs	r3, #1
 800a21a:	e000      	b.n	800a21e <xQueueGenericSend+0x46>
 800a21c:	2300      	movs	r3, #0
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d10a      	bne.n	800a238 <xQueueGenericSend+0x60>
	__asm volatile
 800a222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a226:	f383 8811 	msr	BASEPRI, r3
 800a22a:	f3bf 8f6f 	isb	sy
 800a22e:	f3bf 8f4f 	dsb	sy
 800a232:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a234:	bf00      	nop
 800a236:	e7fe      	b.n	800a236 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	2b02      	cmp	r3, #2
 800a23c:	d103      	bne.n	800a246 <xQueueGenericSend+0x6e>
 800a23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a242:	2b01      	cmp	r3, #1
 800a244:	d101      	bne.n	800a24a <xQueueGenericSend+0x72>
 800a246:	2301      	movs	r3, #1
 800a248:	e000      	b.n	800a24c <xQueueGenericSend+0x74>
 800a24a:	2300      	movs	r3, #0
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d10a      	bne.n	800a266 <xQueueGenericSend+0x8e>
	__asm volatile
 800a250:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a254:	f383 8811 	msr	BASEPRI, r3
 800a258:	f3bf 8f6f 	isb	sy
 800a25c:	f3bf 8f4f 	dsb	sy
 800a260:	623b      	str	r3, [r7, #32]
}
 800a262:	bf00      	nop
 800a264:	e7fe      	b.n	800a264 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a266:	f001 fad7 	bl	800b818 <xTaskGetSchedulerState>
 800a26a:	4603      	mov	r3, r0
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d102      	bne.n	800a276 <xQueueGenericSend+0x9e>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d101      	bne.n	800a27a <xQueueGenericSend+0xa2>
 800a276:	2301      	movs	r3, #1
 800a278:	e000      	b.n	800a27c <xQueueGenericSend+0xa4>
 800a27a:	2300      	movs	r3, #0
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d10a      	bne.n	800a296 <xQueueGenericSend+0xbe>
	__asm volatile
 800a280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a284:	f383 8811 	msr	BASEPRI, r3
 800a288:	f3bf 8f6f 	isb	sy
 800a28c:	f3bf 8f4f 	dsb	sy
 800a290:	61fb      	str	r3, [r7, #28]
}
 800a292:	bf00      	nop
 800a294:	e7fe      	b.n	800a294 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a296:	f002 f81d 	bl	800c2d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a29c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2a2:	429a      	cmp	r2, r3
 800a2a4:	d302      	bcc.n	800a2ac <xQueueGenericSend+0xd4>
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	2b02      	cmp	r3, #2
 800a2aa:	d129      	bne.n	800a300 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a2ac:	683a      	ldr	r2, [r7, #0]
 800a2ae:	68b9      	ldr	r1, [r7, #8]
 800a2b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2b2:	f000 fac7 	bl	800a844 <prvCopyDataToQueue>
 800a2b6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a2b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d010      	beq.n	800a2e2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a2c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c2:	3324      	adds	r3, #36	; 0x24
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f001 f8d5 	bl	800b474 <xTaskRemoveFromEventList>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d013      	beq.n	800a2f8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a2d0:	4b3f      	ldr	r3, [pc, #252]	; (800a3d0 <xQueueGenericSend+0x1f8>)
 800a2d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2d6:	601a      	str	r2, [r3, #0]
 800a2d8:	f3bf 8f4f 	dsb	sy
 800a2dc:	f3bf 8f6f 	isb	sy
 800a2e0:	e00a      	b.n	800a2f8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a2e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d007      	beq.n	800a2f8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a2e8:	4b39      	ldr	r3, [pc, #228]	; (800a3d0 <xQueueGenericSend+0x1f8>)
 800a2ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2ee:	601a      	str	r2, [r3, #0]
 800a2f0:	f3bf 8f4f 	dsb	sy
 800a2f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a2f8:	f002 f81c 	bl	800c334 <vPortExitCritical>
				return pdPASS;
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	e063      	b.n	800a3c8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d103      	bne.n	800a30e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a306:	f002 f815 	bl	800c334 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a30a:	2300      	movs	r3, #0
 800a30c:	e05c      	b.n	800a3c8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a30e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a310:	2b00      	cmp	r3, #0
 800a312:	d106      	bne.n	800a322 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a314:	f107 0314 	add.w	r3, r7, #20
 800a318:	4618      	mov	r0, r3
 800a31a:	f001 f90f 	bl	800b53c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a31e:	2301      	movs	r3, #1
 800a320:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a322:	f002 f807 	bl	800c334 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a326:	f000 fe57 	bl	800afd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a32a:	f001 ffd3 	bl	800c2d4 <vPortEnterCritical>
 800a32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a330:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a334:	b25b      	sxtb	r3, r3
 800a336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a33a:	d103      	bne.n	800a344 <xQueueGenericSend+0x16c>
 800a33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a33e:	2200      	movs	r2, #0
 800a340:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a346:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a34a:	b25b      	sxtb	r3, r3
 800a34c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a350:	d103      	bne.n	800a35a <xQueueGenericSend+0x182>
 800a352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a354:	2200      	movs	r2, #0
 800a356:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a35a:	f001 ffeb 	bl	800c334 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a35e:	1d3a      	adds	r2, r7, #4
 800a360:	f107 0314 	add.w	r3, r7, #20
 800a364:	4611      	mov	r1, r2
 800a366:	4618      	mov	r0, r3
 800a368:	f001 f8fe 	bl	800b568 <xTaskCheckForTimeOut>
 800a36c:	4603      	mov	r3, r0
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d124      	bne.n	800a3bc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a372:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a374:	f000 fb5e 	bl	800aa34 <prvIsQueueFull>
 800a378:	4603      	mov	r3, r0
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d018      	beq.n	800a3b0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a380:	3310      	adds	r3, #16
 800a382:	687a      	ldr	r2, [r7, #4]
 800a384:	4611      	mov	r1, r2
 800a386:	4618      	mov	r0, r3
 800a388:	f001 f824 	bl	800b3d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a38c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a38e:	f000 fae9 	bl	800a964 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a392:	f000 fe2f 	bl	800aff4 <xTaskResumeAll>
 800a396:	4603      	mov	r3, r0
 800a398:	2b00      	cmp	r3, #0
 800a39a:	f47f af7c 	bne.w	800a296 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a39e:	4b0c      	ldr	r3, [pc, #48]	; (800a3d0 <xQueueGenericSend+0x1f8>)
 800a3a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3a4:	601a      	str	r2, [r3, #0]
 800a3a6:	f3bf 8f4f 	dsb	sy
 800a3aa:	f3bf 8f6f 	isb	sy
 800a3ae:	e772      	b.n	800a296 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a3b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3b2:	f000 fad7 	bl	800a964 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a3b6:	f000 fe1d 	bl	800aff4 <xTaskResumeAll>
 800a3ba:	e76c      	b.n	800a296 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a3bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3be:	f000 fad1 	bl	800a964 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a3c2:	f000 fe17 	bl	800aff4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a3c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3738      	adds	r7, #56	; 0x38
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}
 800a3d0:	e000ed04 	.word	0xe000ed04

0800a3d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b090      	sub	sp, #64	; 0x40
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	60f8      	str	r0, [r7, #12]
 800a3dc:	60b9      	str	r1, [r7, #8]
 800a3de:	607a      	str	r2, [r7, #4]
 800a3e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a3e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d10a      	bne.n	800a402 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f0:	f383 8811 	msr	BASEPRI, r3
 800a3f4:	f3bf 8f6f 	isb	sy
 800a3f8:	f3bf 8f4f 	dsb	sy
 800a3fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a3fe:	bf00      	nop
 800a400:	e7fe      	b.n	800a400 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d103      	bne.n	800a410 <xQueueGenericSendFromISR+0x3c>
 800a408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a40a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d101      	bne.n	800a414 <xQueueGenericSendFromISR+0x40>
 800a410:	2301      	movs	r3, #1
 800a412:	e000      	b.n	800a416 <xQueueGenericSendFromISR+0x42>
 800a414:	2300      	movs	r3, #0
 800a416:	2b00      	cmp	r3, #0
 800a418:	d10a      	bne.n	800a430 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a41a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a41e:	f383 8811 	msr	BASEPRI, r3
 800a422:	f3bf 8f6f 	isb	sy
 800a426:	f3bf 8f4f 	dsb	sy
 800a42a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a42c:	bf00      	nop
 800a42e:	e7fe      	b.n	800a42e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	2b02      	cmp	r3, #2
 800a434:	d103      	bne.n	800a43e <xQueueGenericSendFromISR+0x6a>
 800a436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a43a:	2b01      	cmp	r3, #1
 800a43c:	d101      	bne.n	800a442 <xQueueGenericSendFromISR+0x6e>
 800a43e:	2301      	movs	r3, #1
 800a440:	e000      	b.n	800a444 <xQueueGenericSendFromISR+0x70>
 800a442:	2300      	movs	r3, #0
 800a444:	2b00      	cmp	r3, #0
 800a446:	d10a      	bne.n	800a45e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a44c:	f383 8811 	msr	BASEPRI, r3
 800a450:	f3bf 8f6f 	isb	sy
 800a454:	f3bf 8f4f 	dsb	sy
 800a458:	623b      	str	r3, [r7, #32]
}
 800a45a:	bf00      	nop
 800a45c:	e7fe      	b.n	800a45c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a45e:	f002 f81b 	bl	800c498 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a462:	f3ef 8211 	mrs	r2, BASEPRI
 800a466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a46a:	f383 8811 	msr	BASEPRI, r3
 800a46e:	f3bf 8f6f 	isb	sy
 800a472:	f3bf 8f4f 	dsb	sy
 800a476:	61fa      	str	r2, [r7, #28]
 800a478:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a47a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a47c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a480:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a486:	429a      	cmp	r2, r3
 800a488:	d302      	bcc.n	800a490 <xQueueGenericSendFromISR+0xbc>
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	2b02      	cmp	r3, #2
 800a48e:	d12f      	bne.n	800a4f0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a492:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a496:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a49a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a49c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a49e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a4a0:	683a      	ldr	r2, [r7, #0]
 800a4a2:	68b9      	ldr	r1, [r7, #8]
 800a4a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a4a6:	f000 f9cd 	bl	800a844 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a4aa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a4ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4b2:	d112      	bne.n	800a4da <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a4b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d016      	beq.n	800a4ea <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a4bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4be:	3324      	adds	r3, #36	; 0x24
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f000 ffd7 	bl	800b474 <xTaskRemoveFromEventList>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d00e      	beq.n	800a4ea <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d00b      	beq.n	800a4ea <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2201      	movs	r2, #1
 800a4d6:	601a      	str	r2, [r3, #0]
 800a4d8:	e007      	b.n	800a4ea <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a4da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a4de:	3301      	adds	r3, #1
 800a4e0:	b2db      	uxtb	r3, r3
 800a4e2:	b25a      	sxtb	r2, r3
 800a4e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a4ee:	e001      	b.n	800a4f4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4f6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a4fe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a502:	4618      	mov	r0, r3
 800a504:	3740      	adds	r7, #64	; 0x40
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}
	...

0800a50c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b08c      	sub	sp, #48	; 0x30
 800a510:	af00      	add	r7, sp, #0
 800a512:	60f8      	str	r0, [r7, #12]
 800a514:	60b9      	str	r1, [r7, #8]
 800a516:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a518:	2300      	movs	r3, #0
 800a51a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a522:	2b00      	cmp	r3, #0
 800a524:	d10a      	bne.n	800a53c <xQueueReceive+0x30>
	__asm volatile
 800a526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a52a:	f383 8811 	msr	BASEPRI, r3
 800a52e:	f3bf 8f6f 	isb	sy
 800a532:	f3bf 8f4f 	dsb	sy
 800a536:	623b      	str	r3, [r7, #32]
}
 800a538:	bf00      	nop
 800a53a:	e7fe      	b.n	800a53a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d103      	bne.n	800a54a <xQueueReceive+0x3e>
 800a542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a546:	2b00      	cmp	r3, #0
 800a548:	d101      	bne.n	800a54e <xQueueReceive+0x42>
 800a54a:	2301      	movs	r3, #1
 800a54c:	e000      	b.n	800a550 <xQueueReceive+0x44>
 800a54e:	2300      	movs	r3, #0
 800a550:	2b00      	cmp	r3, #0
 800a552:	d10a      	bne.n	800a56a <xQueueReceive+0x5e>
	__asm volatile
 800a554:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a558:	f383 8811 	msr	BASEPRI, r3
 800a55c:	f3bf 8f6f 	isb	sy
 800a560:	f3bf 8f4f 	dsb	sy
 800a564:	61fb      	str	r3, [r7, #28]
}
 800a566:	bf00      	nop
 800a568:	e7fe      	b.n	800a568 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a56a:	f001 f955 	bl	800b818 <xTaskGetSchedulerState>
 800a56e:	4603      	mov	r3, r0
 800a570:	2b00      	cmp	r3, #0
 800a572:	d102      	bne.n	800a57a <xQueueReceive+0x6e>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d101      	bne.n	800a57e <xQueueReceive+0x72>
 800a57a:	2301      	movs	r3, #1
 800a57c:	e000      	b.n	800a580 <xQueueReceive+0x74>
 800a57e:	2300      	movs	r3, #0
 800a580:	2b00      	cmp	r3, #0
 800a582:	d10a      	bne.n	800a59a <xQueueReceive+0x8e>
	__asm volatile
 800a584:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a588:	f383 8811 	msr	BASEPRI, r3
 800a58c:	f3bf 8f6f 	isb	sy
 800a590:	f3bf 8f4f 	dsb	sy
 800a594:	61bb      	str	r3, [r7, #24]
}
 800a596:	bf00      	nop
 800a598:	e7fe      	b.n	800a598 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a59a:	f001 fe9b 	bl	800c2d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5a2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d01f      	beq.n	800a5ea <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a5aa:	68b9      	ldr	r1, [r7, #8]
 800a5ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5ae:	f000 f9b3 	bl	800a918 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a5b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b4:	1e5a      	subs	r2, r3, #1
 800a5b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5b8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a5ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5bc:	691b      	ldr	r3, [r3, #16]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d00f      	beq.n	800a5e2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a5c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5c4:	3310      	adds	r3, #16
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f000 ff54 	bl	800b474 <xTaskRemoveFromEventList>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d007      	beq.n	800a5e2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a5d2:	4b3d      	ldr	r3, [pc, #244]	; (800a6c8 <xQueueReceive+0x1bc>)
 800a5d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5d8:	601a      	str	r2, [r3, #0]
 800a5da:	f3bf 8f4f 	dsb	sy
 800a5de:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a5e2:	f001 fea7 	bl	800c334 <vPortExitCritical>
				return pdPASS;
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	e069      	b.n	800a6be <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d103      	bne.n	800a5f8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a5f0:	f001 fea0 	bl	800c334 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	e062      	b.n	800a6be <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a5f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d106      	bne.n	800a60c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a5fe:	f107 0310 	add.w	r3, r7, #16
 800a602:	4618      	mov	r0, r3
 800a604:	f000 ff9a 	bl	800b53c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a608:	2301      	movs	r3, #1
 800a60a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a60c:	f001 fe92 	bl	800c334 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a610:	f000 fce2 	bl	800afd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a614:	f001 fe5e 	bl	800c2d4 <vPortEnterCritical>
 800a618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a61a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a61e:	b25b      	sxtb	r3, r3
 800a620:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a624:	d103      	bne.n	800a62e <xQueueReceive+0x122>
 800a626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a628:	2200      	movs	r2, #0
 800a62a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a62e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a630:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a634:	b25b      	sxtb	r3, r3
 800a636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a63a:	d103      	bne.n	800a644 <xQueueReceive+0x138>
 800a63c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a63e:	2200      	movs	r2, #0
 800a640:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a644:	f001 fe76 	bl	800c334 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a648:	1d3a      	adds	r2, r7, #4
 800a64a:	f107 0310 	add.w	r3, r7, #16
 800a64e:	4611      	mov	r1, r2
 800a650:	4618      	mov	r0, r3
 800a652:	f000 ff89 	bl	800b568 <xTaskCheckForTimeOut>
 800a656:	4603      	mov	r3, r0
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d123      	bne.n	800a6a4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a65c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a65e:	f000 f9d3 	bl	800aa08 <prvIsQueueEmpty>
 800a662:	4603      	mov	r3, r0
 800a664:	2b00      	cmp	r3, #0
 800a666:	d017      	beq.n	800a698 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a66a:	3324      	adds	r3, #36	; 0x24
 800a66c:	687a      	ldr	r2, [r7, #4]
 800a66e:	4611      	mov	r1, r2
 800a670:	4618      	mov	r0, r3
 800a672:	f000 feaf 	bl	800b3d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a676:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a678:	f000 f974 	bl	800a964 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a67c:	f000 fcba 	bl	800aff4 <xTaskResumeAll>
 800a680:	4603      	mov	r3, r0
 800a682:	2b00      	cmp	r3, #0
 800a684:	d189      	bne.n	800a59a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a686:	4b10      	ldr	r3, [pc, #64]	; (800a6c8 <xQueueReceive+0x1bc>)
 800a688:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a68c:	601a      	str	r2, [r3, #0]
 800a68e:	f3bf 8f4f 	dsb	sy
 800a692:	f3bf 8f6f 	isb	sy
 800a696:	e780      	b.n	800a59a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a698:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a69a:	f000 f963 	bl	800a964 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a69e:	f000 fca9 	bl	800aff4 <xTaskResumeAll>
 800a6a2:	e77a      	b.n	800a59a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a6a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6a6:	f000 f95d 	bl	800a964 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a6aa:	f000 fca3 	bl	800aff4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a6ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6b0:	f000 f9aa 	bl	800aa08 <prvIsQueueEmpty>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	f43f af6f 	beq.w	800a59a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a6bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3730      	adds	r7, #48	; 0x30
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}
 800a6c6:	bf00      	nop
 800a6c8:	e000ed04 	.word	0xe000ed04

0800a6cc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b08e      	sub	sp, #56	; 0x38
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	60f8      	str	r0, [r7, #12]
 800a6d4:	60b9      	str	r1, [r7, #8]
 800a6d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a6dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d10a      	bne.n	800a6f8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e6:	f383 8811 	msr	BASEPRI, r3
 800a6ea:	f3bf 8f6f 	isb	sy
 800a6ee:	f3bf 8f4f 	dsb	sy
 800a6f2:	623b      	str	r3, [r7, #32]
}
 800a6f4:	bf00      	nop
 800a6f6:	e7fe      	b.n	800a6f6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d103      	bne.n	800a706 <xQueueReceiveFromISR+0x3a>
 800a6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a702:	2b00      	cmp	r3, #0
 800a704:	d101      	bne.n	800a70a <xQueueReceiveFromISR+0x3e>
 800a706:	2301      	movs	r3, #1
 800a708:	e000      	b.n	800a70c <xQueueReceiveFromISR+0x40>
 800a70a:	2300      	movs	r3, #0
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d10a      	bne.n	800a726 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a714:	f383 8811 	msr	BASEPRI, r3
 800a718:	f3bf 8f6f 	isb	sy
 800a71c:	f3bf 8f4f 	dsb	sy
 800a720:	61fb      	str	r3, [r7, #28]
}
 800a722:	bf00      	nop
 800a724:	e7fe      	b.n	800a724 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a726:	f001 feb7 	bl	800c498 <vPortValidateInterruptPriority>
	__asm volatile
 800a72a:	f3ef 8211 	mrs	r2, BASEPRI
 800a72e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a732:	f383 8811 	msr	BASEPRI, r3
 800a736:	f3bf 8f6f 	isb	sy
 800a73a:	f3bf 8f4f 	dsb	sy
 800a73e:	61ba      	str	r2, [r7, #24]
 800a740:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a742:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a744:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a74a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a74c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d02f      	beq.n	800a7b2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a754:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a758:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a75c:	68b9      	ldr	r1, [r7, #8]
 800a75e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a760:	f000 f8da 	bl	800a918 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a766:	1e5a      	subs	r2, r3, #1
 800a768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a76a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a76c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a770:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a774:	d112      	bne.n	800a79c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a778:	691b      	ldr	r3, [r3, #16]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d016      	beq.n	800a7ac <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a780:	3310      	adds	r3, #16
 800a782:	4618      	mov	r0, r3
 800a784:	f000 fe76 	bl	800b474 <xTaskRemoveFromEventList>
 800a788:	4603      	mov	r3, r0
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d00e      	beq.n	800a7ac <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d00b      	beq.n	800a7ac <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2201      	movs	r2, #1
 800a798:	601a      	str	r2, [r3, #0]
 800a79a:	e007      	b.n	800a7ac <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a79c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a7a0:	3301      	adds	r3, #1
 800a7a2:	b2db      	uxtb	r3, r3
 800a7a4:	b25a      	sxtb	r2, r3
 800a7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	637b      	str	r3, [r7, #52]	; 0x34
 800a7b0:	e001      	b.n	800a7b6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	637b      	str	r3, [r7, #52]	; 0x34
 800a7b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7b8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	f383 8811 	msr	BASEPRI, r3
}
 800a7c0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a7c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3738      	adds	r7, #56	; 0x38
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}

0800a7cc <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b084      	sub	sp, #16
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d10a      	bne.n	800a7f0 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800a7da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7de:	f383 8811 	msr	BASEPRI, r3
 800a7e2:	f3bf 8f6f 	isb	sy
 800a7e6:	f3bf 8f4f 	dsb	sy
 800a7ea:	60bb      	str	r3, [r7, #8]
}
 800a7ec:	bf00      	nop
 800a7ee:	e7fe      	b.n	800a7ee <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800a7f0:	f001 fd70 	bl	800c2d4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7f8:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800a7fa:	f001 fd9b 	bl	800c334 <vPortExitCritical>

	return uxReturn;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a800:	4618      	mov	r0, r3
 800a802:	3710      	adds	r7, #16
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}

0800a808 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800a808:	b480      	push	{r7}
 800a80a:	b087      	sub	sp, #28
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d10a      	bne.n	800a830 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800a81a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a81e:	f383 8811 	msr	BASEPRI, r3
 800a822:	f3bf 8f6f 	isb	sy
 800a826:	f3bf 8f4f 	dsb	sy
 800a82a:	60fb      	str	r3, [r7, #12]
}
 800a82c:	bf00      	nop
 800a82e:	e7fe      	b.n	800a82e <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a834:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800a836:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a838:	4618      	mov	r0, r3
 800a83a:	371c      	adds	r7, #28
 800a83c:	46bd      	mov	sp, r7
 800a83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a842:	4770      	bx	lr

0800a844 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b086      	sub	sp, #24
 800a848:	af00      	add	r7, sp, #0
 800a84a:	60f8      	str	r0, [r7, #12]
 800a84c:	60b9      	str	r1, [r7, #8]
 800a84e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a850:	2300      	movs	r3, #0
 800a852:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a858:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d10d      	bne.n	800a87e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d14d      	bne.n	800a906 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	689b      	ldr	r3, [r3, #8]
 800a86e:	4618      	mov	r0, r3
 800a870:	f000 fff0 	bl	800b854 <xTaskPriorityDisinherit>
 800a874:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	2200      	movs	r2, #0
 800a87a:	609a      	str	r2, [r3, #8]
 800a87c:	e043      	b.n	800a906 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d119      	bne.n	800a8b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	6858      	ldr	r0, [r3, #4]
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a88c:	461a      	mov	r2, r3
 800a88e:	68b9      	ldr	r1, [r7, #8]
 800a890:	f002 fcc0 	bl	800d214 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	685a      	ldr	r2, [r3, #4]
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a89c:	441a      	add	r2, r3
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	685a      	ldr	r2, [r3, #4]
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	689b      	ldr	r3, [r3, #8]
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	d32b      	bcc.n	800a906 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	681a      	ldr	r2, [r3, #0]
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	605a      	str	r2, [r3, #4]
 800a8b6:	e026      	b.n	800a906 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	68d8      	ldr	r0, [r3, #12]
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8c0:	461a      	mov	r2, r3
 800a8c2:	68b9      	ldr	r1, [r7, #8]
 800a8c4:	f002 fca6 	bl	800d214 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	68da      	ldr	r2, [r3, #12]
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8d0:	425b      	negs	r3, r3
 800a8d2:	441a      	add	r2, r3
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	68da      	ldr	r2, [r3, #12]
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d207      	bcs.n	800a8f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	689a      	ldr	r2, [r3, #8]
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ec:	425b      	negs	r3, r3
 800a8ee:	441a      	add	r2, r3
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2b02      	cmp	r3, #2
 800a8f8:	d105      	bne.n	800a906 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d002      	beq.n	800a906 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	3b01      	subs	r3, #1
 800a904:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	1c5a      	adds	r2, r3, #1
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a90e:	697b      	ldr	r3, [r7, #20]
}
 800a910:	4618      	mov	r0, r3
 800a912:	3718      	adds	r7, #24
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}

0800a918 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b082      	sub	sp, #8
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
 800a920:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a926:	2b00      	cmp	r3, #0
 800a928:	d018      	beq.n	800a95c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	68da      	ldr	r2, [r3, #12]
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a932:	441a      	add	r2, r3
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	68da      	ldr	r2, [r3, #12]
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	689b      	ldr	r3, [r3, #8]
 800a940:	429a      	cmp	r2, r3
 800a942:	d303      	bcc.n	800a94c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681a      	ldr	r2, [r3, #0]
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	68d9      	ldr	r1, [r3, #12]
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a954:	461a      	mov	r2, r3
 800a956:	6838      	ldr	r0, [r7, #0]
 800a958:	f002 fc5c 	bl	800d214 <memcpy>
	}
}
 800a95c:	bf00      	nop
 800a95e:	3708      	adds	r7, #8
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}

0800a964 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b084      	sub	sp, #16
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a96c:	f001 fcb2 	bl	800c2d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a976:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a978:	e011      	b.n	800a99e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d012      	beq.n	800a9a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	3324      	adds	r3, #36	; 0x24
 800a986:	4618      	mov	r0, r3
 800a988:	f000 fd74 	bl	800b474 <xTaskRemoveFromEventList>
 800a98c:	4603      	mov	r3, r0
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d001      	beq.n	800a996 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a992:	f000 fe4b 	bl	800b62c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a996:	7bfb      	ldrb	r3, [r7, #15]
 800a998:	3b01      	subs	r3, #1
 800a99a:	b2db      	uxtb	r3, r3
 800a99c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a99e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	dce9      	bgt.n	800a97a <prvUnlockQueue+0x16>
 800a9a6:	e000      	b.n	800a9aa <prvUnlockQueue+0x46>
					break;
 800a9a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	22ff      	movs	r2, #255	; 0xff
 800a9ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a9b2:	f001 fcbf 	bl	800c334 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a9b6:	f001 fc8d 	bl	800c2d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a9c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a9c2:	e011      	b.n	800a9e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	691b      	ldr	r3, [r3, #16]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d012      	beq.n	800a9f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	3310      	adds	r3, #16
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f000 fd4f 	bl	800b474 <xTaskRemoveFromEventList>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d001      	beq.n	800a9e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a9dc:	f000 fe26 	bl	800b62c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a9e0:	7bbb      	ldrb	r3, [r7, #14]
 800a9e2:	3b01      	subs	r3, #1
 800a9e4:	b2db      	uxtb	r3, r3
 800a9e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a9e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	dce9      	bgt.n	800a9c4 <prvUnlockQueue+0x60>
 800a9f0:	e000      	b.n	800a9f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a9f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	22ff      	movs	r2, #255	; 0xff
 800a9f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a9fc:	f001 fc9a 	bl	800c334 <vPortExitCritical>
}
 800aa00:	bf00      	nop
 800aa02:	3710      	adds	r7, #16
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}

0800aa08 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b084      	sub	sp, #16
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aa10:	f001 fc60 	bl	800c2d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d102      	bne.n	800aa22 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	60fb      	str	r3, [r7, #12]
 800aa20:	e001      	b.n	800aa26 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800aa22:	2300      	movs	r3, #0
 800aa24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aa26:	f001 fc85 	bl	800c334 <vPortExitCritical>

	return xReturn;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3710      	adds	r7, #16
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}

0800aa34 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b084      	sub	sp, #16
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aa3c:	f001 fc4a 	bl	800c2d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa48:	429a      	cmp	r2, r3
 800aa4a:	d102      	bne.n	800aa52 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	60fb      	str	r3, [r7, #12]
 800aa50:	e001      	b.n	800aa56 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800aa52:	2300      	movs	r3, #0
 800aa54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aa56:	f001 fc6d 	bl	800c334 <vPortExitCritical>

	return xReturn;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3710      	adds	r7, #16
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}

0800aa64 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800aa64:	b480      	push	{r7}
 800aa66:	b085      	sub	sp, #20
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
 800aa6c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aa6e:	2300      	movs	r3, #0
 800aa70:	60fb      	str	r3, [r7, #12]
 800aa72:	e014      	b.n	800aa9e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800aa74:	4a0f      	ldr	r2, [pc, #60]	; (800aab4 <vQueueAddToRegistry+0x50>)
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d10b      	bne.n	800aa98 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800aa80:	490c      	ldr	r1, [pc, #48]	; (800aab4 <vQueueAddToRegistry+0x50>)
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	683a      	ldr	r2, [r7, #0]
 800aa86:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800aa8a:	4a0a      	ldr	r2, [pc, #40]	; (800aab4 <vQueueAddToRegistry+0x50>)
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	00db      	lsls	r3, r3, #3
 800aa90:	4413      	add	r3, r2
 800aa92:	687a      	ldr	r2, [r7, #4]
 800aa94:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800aa96:	e006      	b.n	800aaa6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	3301      	adds	r3, #1
 800aa9c:	60fb      	str	r3, [r7, #12]
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	2b07      	cmp	r3, #7
 800aaa2:	d9e7      	bls.n	800aa74 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800aaa4:	bf00      	nop
 800aaa6:	bf00      	nop
 800aaa8:	3714      	adds	r7, #20
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab0:	4770      	bx	lr
 800aab2:	bf00      	nop
 800aab4:	20000a04 	.word	0x20000a04

0800aab8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b086      	sub	sp, #24
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	60f8      	str	r0, [r7, #12]
 800aac0:	60b9      	str	r1, [r7, #8]
 800aac2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800aac8:	f001 fc04 	bl	800c2d4 <vPortEnterCritical>
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aad2:	b25b      	sxtb	r3, r3
 800aad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aad8:	d103      	bne.n	800aae2 <vQueueWaitForMessageRestricted+0x2a>
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	2200      	movs	r2, #0
 800aade:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aae8:	b25b      	sxtb	r3, r3
 800aaea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaee:	d103      	bne.n	800aaf8 <vQueueWaitForMessageRestricted+0x40>
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aaf8:	f001 fc1c 	bl	800c334 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d106      	bne.n	800ab12 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ab04:	697b      	ldr	r3, [r7, #20]
 800ab06:	3324      	adds	r3, #36	; 0x24
 800ab08:	687a      	ldr	r2, [r7, #4]
 800ab0a:	68b9      	ldr	r1, [r7, #8]
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f000 fc85 	bl	800b41c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ab12:	6978      	ldr	r0, [r7, #20]
 800ab14:	f7ff ff26 	bl	800a964 <prvUnlockQueue>
	}
 800ab18:	bf00      	nop
 800ab1a:	3718      	adds	r7, #24
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}

0800ab20 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b08e      	sub	sp, #56	; 0x38
 800ab24:	af04      	add	r7, sp, #16
 800ab26:	60f8      	str	r0, [r7, #12]
 800ab28:	60b9      	str	r1, [r7, #8]
 800ab2a:	607a      	str	r2, [r7, #4]
 800ab2c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ab2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d10a      	bne.n	800ab4a <xTaskCreateStatic+0x2a>
	__asm volatile
 800ab34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab38:	f383 8811 	msr	BASEPRI, r3
 800ab3c:	f3bf 8f6f 	isb	sy
 800ab40:	f3bf 8f4f 	dsb	sy
 800ab44:	623b      	str	r3, [r7, #32]
}
 800ab46:	bf00      	nop
 800ab48:	e7fe      	b.n	800ab48 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ab4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d10a      	bne.n	800ab66 <xTaskCreateStatic+0x46>
	__asm volatile
 800ab50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab54:	f383 8811 	msr	BASEPRI, r3
 800ab58:	f3bf 8f6f 	isb	sy
 800ab5c:	f3bf 8f4f 	dsb	sy
 800ab60:	61fb      	str	r3, [r7, #28]
}
 800ab62:	bf00      	nop
 800ab64:	e7fe      	b.n	800ab64 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ab66:	23a8      	movs	r3, #168	; 0xa8
 800ab68:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ab6a:	693b      	ldr	r3, [r7, #16]
 800ab6c:	2ba8      	cmp	r3, #168	; 0xa8
 800ab6e:	d00a      	beq.n	800ab86 <xTaskCreateStatic+0x66>
	__asm volatile
 800ab70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab74:	f383 8811 	msr	BASEPRI, r3
 800ab78:	f3bf 8f6f 	isb	sy
 800ab7c:	f3bf 8f4f 	dsb	sy
 800ab80:	61bb      	str	r3, [r7, #24]
}
 800ab82:	bf00      	nop
 800ab84:	e7fe      	b.n	800ab84 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ab86:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ab88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d01e      	beq.n	800abcc <xTaskCreateStatic+0xac>
 800ab8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d01b      	beq.n	800abcc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ab94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab96:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ab98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab9c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ab9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aba0:	2202      	movs	r2, #2
 800aba2:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800aba6:	2300      	movs	r3, #0
 800aba8:	9303      	str	r3, [sp, #12]
 800abaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abac:	9302      	str	r3, [sp, #8]
 800abae:	f107 0314 	add.w	r3, r7, #20
 800abb2:	9301      	str	r3, [sp, #4]
 800abb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb6:	9300      	str	r3, [sp, #0]
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	687a      	ldr	r2, [r7, #4]
 800abbc:	68b9      	ldr	r1, [r7, #8]
 800abbe:	68f8      	ldr	r0, [r7, #12]
 800abc0:	f000 f850 	bl	800ac64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800abc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800abc6:	f000 f8f3 	bl	800adb0 <prvAddNewTaskToReadyList>
 800abca:	e001      	b.n	800abd0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800abcc:	2300      	movs	r3, #0
 800abce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800abd0:	697b      	ldr	r3, [r7, #20]
	}
 800abd2:	4618      	mov	r0, r3
 800abd4:	3728      	adds	r7, #40	; 0x28
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}

0800abda <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800abda:	b580      	push	{r7, lr}
 800abdc:	b08c      	sub	sp, #48	; 0x30
 800abde:	af04      	add	r7, sp, #16
 800abe0:	60f8      	str	r0, [r7, #12]
 800abe2:	60b9      	str	r1, [r7, #8]
 800abe4:	603b      	str	r3, [r7, #0]
 800abe6:	4613      	mov	r3, r2
 800abe8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800abea:	88fb      	ldrh	r3, [r7, #6]
 800abec:	009b      	lsls	r3, r3, #2
 800abee:	4618      	mov	r0, r3
 800abf0:	f001 fc92 	bl	800c518 <pvPortMalloc>
 800abf4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d00e      	beq.n	800ac1a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800abfc:	20a8      	movs	r0, #168	; 0xa8
 800abfe:	f001 fc8b 	bl	800c518 <pvPortMalloc>
 800ac02:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ac04:	69fb      	ldr	r3, [r7, #28]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d003      	beq.n	800ac12 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ac0a:	69fb      	ldr	r3, [r7, #28]
 800ac0c:	697a      	ldr	r2, [r7, #20]
 800ac0e:	631a      	str	r2, [r3, #48]	; 0x30
 800ac10:	e005      	b.n	800ac1e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ac12:	6978      	ldr	r0, [r7, #20]
 800ac14:	f001 fd4c 	bl	800c6b0 <vPortFree>
 800ac18:	e001      	b.n	800ac1e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ac1e:	69fb      	ldr	r3, [r7, #28]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d017      	beq.n	800ac54 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ac24:	69fb      	ldr	r3, [r7, #28]
 800ac26:	2200      	movs	r2, #0
 800ac28:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ac2c:	88fa      	ldrh	r2, [r7, #6]
 800ac2e:	2300      	movs	r3, #0
 800ac30:	9303      	str	r3, [sp, #12]
 800ac32:	69fb      	ldr	r3, [r7, #28]
 800ac34:	9302      	str	r3, [sp, #8]
 800ac36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac38:	9301      	str	r3, [sp, #4]
 800ac3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac3c:	9300      	str	r3, [sp, #0]
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	68b9      	ldr	r1, [r7, #8]
 800ac42:	68f8      	ldr	r0, [r7, #12]
 800ac44:	f000 f80e 	bl	800ac64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ac48:	69f8      	ldr	r0, [r7, #28]
 800ac4a:	f000 f8b1 	bl	800adb0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ac4e:	2301      	movs	r3, #1
 800ac50:	61bb      	str	r3, [r7, #24]
 800ac52:	e002      	b.n	800ac5a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ac54:	f04f 33ff 	mov.w	r3, #4294967295
 800ac58:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ac5a:	69bb      	ldr	r3, [r7, #24]
	}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	3720      	adds	r7, #32
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}

0800ac64 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b088      	sub	sp, #32
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	60f8      	str	r0, [r7, #12]
 800ac6c:	60b9      	str	r1, [r7, #8]
 800ac6e:	607a      	str	r2, [r7, #4]
 800ac70:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ac72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac74:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	009b      	lsls	r3, r3, #2
 800ac7a:	461a      	mov	r2, r3
 800ac7c:	21a5      	movs	r1, #165	; 0xa5
 800ac7e:	f002 fa27 	bl	800d0d0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ac82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ac8c:	3b01      	subs	r3, #1
 800ac8e:	009b      	lsls	r3, r3, #2
 800ac90:	4413      	add	r3, r2
 800ac92:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ac94:	69bb      	ldr	r3, [r7, #24]
 800ac96:	f023 0307 	bic.w	r3, r3, #7
 800ac9a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ac9c:	69bb      	ldr	r3, [r7, #24]
 800ac9e:	f003 0307 	and.w	r3, r3, #7
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d00a      	beq.n	800acbc <prvInitialiseNewTask+0x58>
	__asm volatile
 800aca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acaa:	f383 8811 	msr	BASEPRI, r3
 800acae:	f3bf 8f6f 	isb	sy
 800acb2:	f3bf 8f4f 	dsb	sy
 800acb6:	617b      	str	r3, [r7, #20]
}
 800acb8:	bf00      	nop
 800acba:	e7fe      	b.n	800acba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d01f      	beq.n	800ad02 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800acc2:	2300      	movs	r3, #0
 800acc4:	61fb      	str	r3, [r7, #28]
 800acc6:	e012      	b.n	800acee <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800acc8:	68ba      	ldr	r2, [r7, #8]
 800acca:	69fb      	ldr	r3, [r7, #28]
 800accc:	4413      	add	r3, r2
 800acce:	7819      	ldrb	r1, [r3, #0]
 800acd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acd2:	69fb      	ldr	r3, [r7, #28]
 800acd4:	4413      	add	r3, r2
 800acd6:	3334      	adds	r3, #52	; 0x34
 800acd8:	460a      	mov	r2, r1
 800acda:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800acdc:	68ba      	ldr	r2, [r7, #8]
 800acde:	69fb      	ldr	r3, [r7, #28]
 800ace0:	4413      	add	r3, r2
 800ace2:	781b      	ldrb	r3, [r3, #0]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d006      	beq.n	800acf6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ace8:	69fb      	ldr	r3, [r7, #28]
 800acea:	3301      	adds	r3, #1
 800acec:	61fb      	str	r3, [r7, #28]
 800acee:	69fb      	ldr	r3, [r7, #28]
 800acf0:	2b0f      	cmp	r3, #15
 800acf2:	d9e9      	bls.n	800acc8 <prvInitialiseNewTask+0x64>
 800acf4:	e000      	b.n	800acf8 <prvInitialiseNewTask+0x94>
			{
				break;
 800acf6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800acf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acfa:	2200      	movs	r2, #0
 800acfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ad00:	e003      	b.n	800ad0a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ad02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad04:	2200      	movs	r2, #0
 800ad06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ad0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad0c:	2b37      	cmp	r3, #55	; 0x37
 800ad0e:	d901      	bls.n	800ad14 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ad10:	2337      	movs	r3, #55	; 0x37
 800ad12:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ad14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad18:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ad1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad1e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ad20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad22:	2200      	movs	r2, #0
 800ad24:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ad26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad28:	3304      	adds	r3, #4
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f7ff f882 	bl	8009e34 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ad30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad32:	3318      	adds	r3, #24
 800ad34:	4618      	mov	r0, r3
 800ad36:	f7ff f87d 	bl	8009e34 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ad3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad3e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad42:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ad46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad48:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ad4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad4e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ad50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad52:	2200      	movs	r2, #0
 800ad54:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ad58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ad60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad62:	3354      	adds	r3, #84	; 0x54
 800ad64:	224c      	movs	r2, #76	; 0x4c
 800ad66:	2100      	movs	r1, #0
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f002 f9b1 	bl	800d0d0 <memset>
 800ad6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad70:	4a0c      	ldr	r2, [pc, #48]	; (800ada4 <prvInitialiseNewTask+0x140>)
 800ad72:	659a      	str	r2, [r3, #88]	; 0x58
 800ad74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad76:	4a0c      	ldr	r2, [pc, #48]	; (800ada8 <prvInitialiseNewTask+0x144>)
 800ad78:	65da      	str	r2, [r3, #92]	; 0x5c
 800ad7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad7c:	4a0b      	ldr	r2, [pc, #44]	; (800adac <prvInitialiseNewTask+0x148>)
 800ad7e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ad80:	683a      	ldr	r2, [r7, #0]
 800ad82:	68f9      	ldr	r1, [r7, #12]
 800ad84:	69b8      	ldr	r0, [r7, #24]
 800ad86:	f001 f975 	bl	800c074 <pxPortInitialiseStack>
 800ad8a:	4602      	mov	r2, r0
 800ad8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad8e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ad90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d002      	beq.n	800ad9c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ad96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad9a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad9c:	bf00      	nop
 800ad9e:	3720      	adds	r7, #32
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}
 800ada4:	2000538c 	.word	0x2000538c
 800ada8:	200053f4 	.word	0x200053f4
 800adac:	2000545c 	.word	0x2000545c

0800adb0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b082      	sub	sp, #8
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800adb8:	f001 fa8c 	bl	800c2d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800adbc:	4b2d      	ldr	r3, [pc, #180]	; (800ae74 <prvAddNewTaskToReadyList+0xc4>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	3301      	adds	r3, #1
 800adc2:	4a2c      	ldr	r2, [pc, #176]	; (800ae74 <prvAddNewTaskToReadyList+0xc4>)
 800adc4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800adc6:	4b2c      	ldr	r3, [pc, #176]	; (800ae78 <prvAddNewTaskToReadyList+0xc8>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d109      	bne.n	800ade2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800adce:	4a2a      	ldr	r2, [pc, #168]	; (800ae78 <prvAddNewTaskToReadyList+0xc8>)
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800add4:	4b27      	ldr	r3, [pc, #156]	; (800ae74 <prvAddNewTaskToReadyList+0xc4>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	2b01      	cmp	r3, #1
 800adda:	d110      	bne.n	800adfe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800addc:	f000 fc4a 	bl	800b674 <prvInitialiseTaskLists>
 800ade0:	e00d      	b.n	800adfe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ade2:	4b26      	ldr	r3, [pc, #152]	; (800ae7c <prvAddNewTaskToReadyList+0xcc>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d109      	bne.n	800adfe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800adea:	4b23      	ldr	r3, [pc, #140]	; (800ae78 <prvAddNewTaskToReadyList+0xc8>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adf4:	429a      	cmp	r2, r3
 800adf6:	d802      	bhi.n	800adfe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800adf8:	4a1f      	ldr	r2, [pc, #124]	; (800ae78 <prvAddNewTaskToReadyList+0xc8>)
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800adfe:	4b20      	ldr	r3, [pc, #128]	; (800ae80 <prvAddNewTaskToReadyList+0xd0>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	3301      	adds	r3, #1
 800ae04:	4a1e      	ldr	r2, [pc, #120]	; (800ae80 <prvAddNewTaskToReadyList+0xd0>)
 800ae06:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ae08:	4b1d      	ldr	r3, [pc, #116]	; (800ae80 <prvAddNewTaskToReadyList+0xd0>)
 800ae0a:	681a      	ldr	r2, [r3, #0]
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae14:	4b1b      	ldr	r3, [pc, #108]	; (800ae84 <prvAddNewTaskToReadyList+0xd4>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	429a      	cmp	r2, r3
 800ae1a:	d903      	bls.n	800ae24 <prvAddNewTaskToReadyList+0x74>
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae20:	4a18      	ldr	r2, [pc, #96]	; (800ae84 <prvAddNewTaskToReadyList+0xd4>)
 800ae22:	6013      	str	r3, [r2, #0]
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae28:	4613      	mov	r3, r2
 800ae2a:	009b      	lsls	r3, r3, #2
 800ae2c:	4413      	add	r3, r2
 800ae2e:	009b      	lsls	r3, r3, #2
 800ae30:	4a15      	ldr	r2, [pc, #84]	; (800ae88 <prvAddNewTaskToReadyList+0xd8>)
 800ae32:	441a      	add	r2, r3
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	3304      	adds	r3, #4
 800ae38:	4619      	mov	r1, r3
 800ae3a:	4610      	mov	r0, r2
 800ae3c:	f7ff f807 	bl	8009e4e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ae40:	f001 fa78 	bl	800c334 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ae44:	4b0d      	ldr	r3, [pc, #52]	; (800ae7c <prvAddNewTaskToReadyList+0xcc>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d00e      	beq.n	800ae6a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ae4c:	4b0a      	ldr	r3, [pc, #40]	; (800ae78 <prvAddNewTaskToReadyList+0xc8>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae56:	429a      	cmp	r2, r3
 800ae58:	d207      	bcs.n	800ae6a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ae5a:	4b0c      	ldr	r3, [pc, #48]	; (800ae8c <prvAddNewTaskToReadyList+0xdc>)
 800ae5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae60:	601a      	str	r2, [r3, #0]
 800ae62:	f3bf 8f4f 	dsb	sy
 800ae66:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae6a:	bf00      	nop
 800ae6c:	3708      	adds	r7, #8
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}
 800ae72:	bf00      	nop
 800ae74:	20000f18 	.word	0x20000f18
 800ae78:	20000a44 	.word	0x20000a44
 800ae7c:	20000f24 	.word	0x20000f24
 800ae80:	20000f34 	.word	0x20000f34
 800ae84:	20000f20 	.word	0x20000f20
 800ae88:	20000a48 	.word	0x20000a48
 800ae8c:	e000ed04 	.word	0xe000ed04

0800ae90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b084      	sub	sp, #16
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d017      	beq.n	800aed2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800aea2:	4b13      	ldr	r3, [pc, #76]	; (800aef0 <vTaskDelay+0x60>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d00a      	beq.n	800aec0 <vTaskDelay+0x30>
	__asm volatile
 800aeaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeae:	f383 8811 	msr	BASEPRI, r3
 800aeb2:	f3bf 8f6f 	isb	sy
 800aeb6:	f3bf 8f4f 	dsb	sy
 800aeba:	60bb      	str	r3, [r7, #8]
}
 800aebc:	bf00      	nop
 800aebe:	e7fe      	b.n	800aebe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800aec0:	f000 f88a 	bl	800afd8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800aec4:	2100      	movs	r1, #0
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f000 fd32 	bl	800b930 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800aecc:	f000 f892 	bl	800aff4 <xTaskResumeAll>
 800aed0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d107      	bne.n	800aee8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800aed8:	4b06      	ldr	r3, [pc, #24]	; (800aef4 <vTaskDelay+0x64>)
 800aeda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aede:	601a      	str	r2, [r3, #0]
 800aee0:	f3bf 8f4f 	dsb	sy
 800aee4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aee8:	bf00      	nop
 800aeea:	3710      	adds	r7, #16
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}
 800aef0:	20000f40 	.word	0x20000f40
 800aef4:	e000ed04 	.word	0xe000ed04

0800aef8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b08a      	sub	sp, #40	; 0x28
 800aefc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800aefe:	2300      	movs	r3, #0
 800af00:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800af02:	2300      	movs	r3, #0
 800af04:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800af06:	463a      	mov	r2, r7
 800af08:	1d39      	adds	r1, r7, #4
 800af0a:	f107 0308 	add.w	r3, r7, #8
 800af0e:	4618      	mov	r0, r3
 800af10:	f7fe ff3c 	bl	8009d8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800af14:	6839      	ldr	r1, [r7, #0]
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	68ba      	ldr	r2, [r7, #8]
 800af1a:	9202      	str	r2, [sp, #8]
 800af1c:	9301      	str	r3, [sp, #4]
 800af1e:	2300      	movs	r3, #0
 800af20:	9300      	str	r3, [sp, #0]
 800af22:	2300      	movs	r3, #0
 800af24:	460a      	mov	r2, r1
 800af26:	4924      	ldr	r1, [pc, #144]	; (800afb8 <vTaskStartScheduler+0xc0>)
 800af28:	4824      	ldr	r0, [pc, #144]	; (800afbc <vTaskStartScheduler+0xc4>)
 800af2a:	f7ff fdf9 	bl	800ab20 <xTaskCreateStatic>
 800af2e:	4603      	mov	r3, r0
 800af30:	4a23      	ldr	r2, [pc, #140]	; (800afc0 <vTaskStartScheduler+0xc8>)
 800af32:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800af34:	4b22      	ldr	r3, [pc, #136]	; (800afc0 <vTaskStartScheduler+0xc8>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d002      	beq.n	800af42 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800af3c:	2301      	movs	r3, #1
 800af3e:	617b      	str	r3, [r7, #20]
 800af40:	e001      	b.n	800af46 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800af42:	2300      	movs	r3, #0
 800af44:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	2b01      	cmp	r3, #1
 800af4a:	d102      	bne.n	800af52 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800af4c:	f000 fd44 	bl	800b9d8 <xTimerCreateTimerTask>
 800af50:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	2b01      	cmp	r3, #1
 800af56:	d11b      	bne.n	800af90 <vTaskStartScheduler+0x98>
	__asm volatile
 800af58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af5c:	f383 8811 	msr	BASEPRI, r3
 800af60:	f3bf 8f6f 	isb	sy
 800af64:	f3bf 8f4f 	dsb	sy
 800af68:	613b      	str	r3, [r7, #16]
}
 800af6a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800af6c:	4b15      	ldr	r3, [pc, #84]	; (800afc4 <vTaskStartScheduler+0xcc>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	3354      	adds	r3, #84	; 0x54
 800af72:	4a15      	ldr	r2, [pc, #84]	; (800afc8 <vTaskStartScheduler+0xd0>)
 800af74:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800af76:	4b15      	ldr	r3, [pc, #84]	; (800afcc <vTaskStartScheduler+0xd4>)
 800af78:	f04f 32ff 	mov.w	r2, #4294967295
 800af7c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800af7e:	4b14      	ldr	r3, [pc, #80]	; (800afd0 <vTaskStartScheduler+0xd8>)
 800af80:	2201      	movs	r2, #1
 800af82:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800af84:	4b13      	ldr	r3, [pc, #76]	; (800afd4 <vTaskStartScheduler+0xdc>)
 800af86:	2200      	movs	r2, #0
 800af88:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800af8a:	f001 f901 	bl	800c190 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800af8e:	e00e      	b.n	800afae <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af96:	d10a      	bne.n	800afae <vTaskStartScheduler+0xb6>
	__asm volatile
 800af98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af9c:	f383 8811 	msr	BASEPRI, r3
 800afa0:	f3bf 8f6f 	isb	sy
 800afa4:	f3bf 8f4f 	dsb	sy
 800afa8:	60fb      	str	r3, [r7, #12]
}
 800afaa:	bf00      	nop
 800afac:	e7fe      	b.n	800afac <vTaskStartScheduler+0xb4>
}
 800afae:	bf00      	nop
 800afb0:	3718      	adds	r7, #24
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd80      	pop	{r7, pc}
 800afb6:	bf00      	nop
 800afb8:	0800da10 	.word	0x0800da10
 800afbc:	0800b645 	.word	0x0800b645
 800afc0:	20000f3c 	.word	0x20000f3c
 800afc4:	20000a44 	.word	0x20000a44
 800afc8:	2000007c 	.word	0x2000007c
 800afcc:	20000f38 	.word	0x20000f38
 800afd0:	20000f24 	.word	0x20000f24
 800afd4:	20000f1c 	.word	0x20000f1c

0800afd8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800afd8:	b480      	push	{r7}
 800afda:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800afdc:	4b04      	ldr	r3, [pc, #16]	; (800aff0 <vTaskSuspendAll+0x18>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	3301      	adds	r3, #1
 800afe2:	4a03      	ldr	r2, [pc, #12]	; (800aff0 <vTaskSuspendAll+0x18>)
 800afe4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800afe6:	bf00      	nop
 800afe8:	46bd      	mov	sp, r7
 800afea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afee:	4770      	bx	lr
 800aff0:	20000f40 	.word	0x20000f40

0800aff4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b084      	sub	sp, #16
 800aff8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800affa:	2300      	movs	r3, #0
 800affc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800affe:	2300      	movs	r3, #0
 800b000:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b002:	4b42      	ldr	r3, [pc, #264]	; (800b10c <xTaskResumeAll+0x118>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d10a      	bne.n	800b020 <xTaskResumeAll+0x2c>
	__asm volatile
 800b00a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b00e:	f383 8811 	msr	BASEPRI, r3
 800b012:	f3bf 8f6f 	isb	sy
 800b016:	f3bf 8f4f 	dsb	sy
 800b01a:	603b      	str	r3, [r7, #0]
}
 800b01c:	bf00      	nop
 800b01e:	e7fe      	b.n	800b01e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b020:	f001 f958 	bl	800c2d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b024:	4b39      	ldr	r3, [pc, #228]	; (800b10c <xTaskResumeAll+0x118>)
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	3b01      	subs	r3, #1
 800b02a:	4a38      	ldr	r2, [pc, #224]	; (800b10c <xTaskResumeAll+0x118>)
 800b02c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b02e:	4b37      	ldr	r3, [pc, #220]	; (800b10c <xTaskResumeAll+0x118>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d162      	bne.n	800b0fc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b036:	4b36      	ldr	r3, [pc, #216]	; (800b110 <xTaskResumeAll+0x11c>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d05e      	beq.n	800b0fc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b03e:	e02f      	b.n	800b0a0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b040:	4b34      	ldr	r3, [pc, #208]	; (800b114 <xTaskResumeAll+0x120>)
 800b042:	68db      	ldr	r3, [r3, #12]
 800b044:	68db      	ldr	r3, [r3, #12]
 800b046:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	3318      	adds	r3, #24
 800b04c:	4618      	mov	r0, r3
 800b04e:	f7fe ff5b 	bl	8009f08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	3304      	adds	r3, #4
 800b056:	4618      	mov	r0, r3
 800b058:	f7fe ff56 	bl	8009f08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b060:	4b2d      	ldr	r3, [pc, #180]	; (800b118 <xTaskResumeAll+0x124>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	429a      	cmp	r2, r3
 800b066:	d903      	bls.n	800b070 <xTaskResumeAll+0x7c>
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b06c:	4a2a      	ldr	r2, [pc, #168]	; (800b118 <xTaskResumeAll+0x124>)
 800b06e:	6013      	str	r3, [r2, #0]
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b074:	4613      	mov	r3, r2
 800b076:	009b      	lsls	r3, r3, #2
 800b078:	4413      	add	r3, r2
 800b07a:	009b      	lsls	r3, r3, #2
 800b07c:	4a27      	ldr	r2, [pc, #156]	; (800b11c <xTaskResumeAll+0x128>)
 800b07e:	441a      	add	r2, r3
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	3304      	adds	r3, #4
 800b084:	4619      	mov	r1, r3
 800b086:	4610      	mov	r0, r2
 800b088:	f7fe fee1 	bl	8009e4e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b090:	4b23      	ldr	r3, [pc, #140]	; (800b120 <xTaskResumeAll+0x12c>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b096:	429a      	cmp	r2, r3
 800b098:	d302      	bcc.n	800b0a0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b09a:	4b22      	ldr	r3, [pc, #136]	; (800b124 <xTaskResumeAll+0x130>)
 800b09c:	2201      	movs	r2, #1
 800b09e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b0a0:	4b1c      	ldr	r3, [pc, #112]	; (800b114 <xTaskResumeAll+0x120>)
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d1cb      	bne.n	800b040 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d001      	beq.n	800b0b2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b0ae:	f000 fb83 	bl	800b7b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b0b2:	4b1d      	ldr	r3, [pc, #116]	; (800b128 <xTaskResumeAll+0x134>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d010      	beq.n	800b0e0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b0be:	f000 f86b 	bl	800b198 <xTaskIncrementTick>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d002      	beq.n	800b0ce <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b0c8:	4b16      	ldr	r3, [pc, #88]	; (800b124 <xTaskResumeAll+0x130>)
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	3b01      	subs	r3, #1
 800b0d2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d1f1      	bne.n	800b0be <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b0da:	4b13      	ldr	r3, [pc, #76]	; (800b128 <xTaskResumeAll+0x134>)
 800b0dc:	2200      	movs	r2, #0
 800b0de:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b0e0:	4b10      	ldr	r3, [pc, #64]	; (800b124 <xTaskResumeAll+0x130>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d009      	beq.n	800b0fc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b0ec:	4b0f      	ldr	r3, [pc, #60]	; (800b12c <xTaskResumeAll+0x138>)
 800b0ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0f2:	601a      	str	r2, [r3, #0]
 800b0f4:	f3bf 8f4f 	dsb	sy
 800b0f8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b0fc:	f001 f91a 	bl	800c334 <vPortExitCritical>

	return xAlreadyYielded;
 800b100:	68bb      	ldr	r3, [r7, #8]
}
 800b102:	4618      	mov	r0, r3
 800b104:	3710      	adds	r7, #16
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}
 800b10a:	bf00      	nop
 800b10c:	20000f40 	.word	0x20000f40
 800b110:	20000f18 	.word	0x20000f18
 800b114:	20000ed8 	.word	0x20000ed8
 800b118:	20000f20 	.word	0x20000f20
 800b11c:	20000a48 	.word	0x20000a48
 800b120:	20000a44 	.word	0x20000a44
 800b124:	20000f2c 	.word	0x20000f2c
 800b128:	20000f28 	.word	0x20000f28
 800b12c:	e000ed04 	.word	0xe000ed04

0800b130 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b130:	b480      	push	{r7}
 800b132:	b083      	sub	sp, #12
 800b134:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b136:	4b05      	ldr	r3, [pc, #20]	; (800b14c <xTaskGetTickCount+0x1c>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b13c:	687b      	ldr	r3, [r7, #4]
}
 800b13e:	4618      	mov	r0, r3
 800b140:	370c      	adds	r7, #12
 800b142:	46bd      	mov	sp, r7
 800b144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b148:	4770      	bx	lr
 800b14a:	bf00      	nop
 800b14c:	20000f1c 	.word	0x20000f1c

0800b150 <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800b150:	b480      	push	{r7}
 800b152:	b085      	sub	sp, #20
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d102      	bne.n	800b164 <pcTaskGetName+0x14>
 800b15e:	4b0d      	ldr	r3, [pc, #52]	; (800b194 <pcTaskGetName+0x44>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	e000      	b.n	800b166 <pcTaskGetName+0x16>
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d10a      	bne.n	800b184 <pcTaskGetName+0x34>
	__asm volatile
 800b16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b172:	f383 8811 	msr	BASEPRI, r3
 800b176:	f3bf 8f6f 	isb	sy
 800b17a:	f3bf 8f4f 	dsb	sy
 800b17e:	60bb      	str	r3, [r7, #8]
}
 800b180:	bf00      	nop
 800b182:	e7fe      	b.n	800b182 <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	3334      	adds	r3, #52	; 0x34
}
 800b188:	4618      	mov	r0, r3
 800b18a:	3714      	adds	r7, #20
 800b18c:	46bd      	mov	sp, r7
 800b18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b192:	4770      	bx	lr
 800b194:	20000a44 	.word	0x20000a44

0800b198 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b086      	sub	sp, #24
 800b19c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b19e:	2300      	movs	r3, #0
 800b1a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b1a2:	4b4f      	ldr	r3, [pc, #316]	; (800b2e0 <xTaskIncrementTick+0x148>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	f040 808f 	bne.w	800b2ca <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b1ac:	4b4d      	ldr	r3, [pc, #308]	; (800b2e4 <xTaskIncrementTick+0x14c>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	3301      	adds	r3, #1
 800b1b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b1b4:	4a4b      	ldr	r2, [pc, #300]	; (800b2e4 <xTaskIncrementTick+0x14c>)
 800b1b6:	693b      	ldr	r3, [r7, #16]
 800b1b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b1ba:	693b      	ldr	r3, [r7, #16]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d120      	bne.n	800b202 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b1c0:	4b49      	ldr	r3, [pc, #292]	; (800b2e8 <xTaskIncrementTick+0x150>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d00a      	beq.n	800b1e0 <xTaskIncrementTick+0x48>
	__asm volatile
 800b1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ce:	f383 8811 	msr	BASEPRI, r3
 800b1d2:	f3bf 8f6f 	isb	sy
 800b1d6:	f3bf 8f4f 	dsb	sy
 800b1da:	603b      	str	r3, [r7, #0]
}
 800b1dc:	bf00      	nop
 800b1de:	e7fe      	b.n	800b1de <xTaskIncrementTick+0x46>
 800b1e0:	4b41      	ldr	r3, [pc, #260]	; (800b2e8 <xTaskIncrementTick+0x150>)
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	60fb      	str	r3, [r7, #12]
 800b1e6:	4b41      	ldr	r3, [pc, #260]	; (800b2ec <xTaskIncrementTick+0x154>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	4a3f      	ldr	r2, [pc, #252]	; (800b2e8 <xTaskIncrementTick+0x150>)
 800b1ec:	6013      	str	r3, [r2, #0]
 800b1ee:	4a3f      	ldr	r2, [pc, #252]	; (800b2ec <xTaskIncrementTick+0x154>)
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	6013      	str	r3, [r2, #0]
 800b1f4:	4b3e      	ldr	r3, [pc, #248]	; (800b2f0 <xTaskIncrementTick+0x158>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	3301      	adds	r3, #1
 800b1fa:	4a3d      	ldr	r2, [pc, #244]	; (800b2f0 <xTaskIncrementTick+0x158>)
 800b1fc:	6013      	str	r3, [r2, #0]
 800b1fe:	f000 fadb 	bl	800b7b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b202:	4b3c      	ldr	r3, [pc, #240]	; (800b2f4 <xTaskIncrementTick+0x15c>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	693a      	ldr	r2, [r7, #16]
 800b208:	429a      	cmp	r2, r3
 800b20a:	d349      	bcc.n	800b2a0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b20c:	4b36      	ldr	r3, [pc, #216]	; (800b2e8 <xTaskIncrementTick+0x150>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d104      	bne.n	800b220 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b216:	4b37      	ldr	r3, [pc, #220]	; (800b2f4 <xTaskIncrementTick+0x15c>)
 800b218:	f04f 32ff 	mov.w	r2, #4294967295
 800b21c:	601a      	str	r2, [r3, #0]
					break;
 800b21e:	e03f      	b.n	800b2a0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b220:	4b31      	ldr	r3, [pc, #196]	; (800b2e8 <xTaskIncrementTick+0x150>)
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	68db      	ldr	r3, [r3, #12]
 800b226:	68db      	ldr	r3, [r3, #12]
 800b228:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	685b      	ldr	r3, [r3, #4]
 800b22e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b230:	693a      	ldr	r2, [r7, #16]
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	429a      	cmp	r2, r3
 800b236:	d203      	bcs.n	800b240 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b238:	4a2e      	ldr	r2, [pc, #184]	; (800b2f4 <xTaskIncrementTick+0x15c>)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b23e:	e02f      	b.n	800b2a0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	3304      	adds	r3, #4
 800b244:	4618      	mov	r0, r3
 800b246:	f7fe fe5f 	bl	8009f08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d004      	beq.n	800b25c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	3318      	adds	r3, #24
 800b256:	4618      	mov	r0, r3
 800b258:	f7fe fe56 	bl	8009f08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b260:	4b25      	ldr	r3, [pc, #148]	; (800b2f8 <xTaskIncrementTick+0x160>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	429a      	cmp	r2, r3
 800b266:	d903      	bls.n	800b270 <xTaskIncrementTick+0xd8>
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b26c:	4a22      	ldr	r2, [pc, #136]	; (800b2f8 <xTaskIncrementTick+0x160>)
 800b26e:	6013      	str	r3, [r2, #0]
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b274:	4613      	mov	r3, r2
 800b276:	009b      	lsls	r3, r3, #2
 800b278:	4413      	add	r3, r2
 800b27a:	009b      	lsls	r3, r3, #2
 800b27c:	4a1f      	ldr	r2, [pc, #124]	; (800b2fc <xTaskIncrementTick+0x164>)
 800b27e:	441a      	add	r2, r3
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	3304      	adds	r3, #4
 800b284:	4619      	mov	r1, r3
 800b286:	4610      	mov	r0, r2
 800b288:	f7fe fde1 	bl	8009e4e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b290:	4b1b      	ldr	r3, [pc, #108]	; (800b300 <xTaskIncrementTick+0x168>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b296:	429a      	cmp	r2, r3
 800b298:	d3b8      	bcc.n	800b20c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b29a:	2301      	movs	r3, #1
 800b29c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b29e:	e7b5      	b.n	800b20c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b2a0:	4b17      	ldr	r3, [pc, #92]	; (800b300 <xTaskIncrementTick+0x168>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2a6:	4915      	ldr	r1, [pc, #84]	; (800b2fc <xTaskIncrementTick+0x164>)
 800b2a8:	4613      	mov	r3, r2
 800b2aa:	009b      	lsls	r3, r3, #2
 800b2ac:	4413      	add	r3, r2
 800b2ae:	009b      	lsls	r3, r3, #2
 800b2b0:	440b      	add	r3, r1
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	2b01      	cmp	r3, #1
 800b2b6:	d901      	bls.n	800b2bc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b2b8:	2301      	movs	r3, #1
 800b2ba:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b2bc:	4b11      	ldr	r3, [pc, #68]	; (800b304 <xTaskIncrementTick+0x16c>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d007      	beq.n	800b2d4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	617b      	str	r3, [r7, #20]
 800b2c8:	e004      	b.n	800b2d4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b2ca:	4b0f      	ldr	r3, [pc, #60]	; (800b308 <xTaskIncrementTick+0x170>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	3301      	adds	r3, #1
 800b2d0:	4a0d      	ldr	r2, [pc, #52]	; (800b308 <xTaskIncrementTick+0x170>)
 800b2d2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b2d4:	697b      	ldr	r3, [r7, #20]
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	3718      	adds	r7, #24
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}
 800b2de:	bf00      	nop
 800b2e0:	20000f40 	.word	0x20000f40
 800b2e4:	20000f1c 	.word	0x20000f1c
 800b2e8:	20000ed0 	.word	0x20000ed0
 800b2ec:	20000ed4 	.word	0x20000ed4
 800b2f0:	20000f30 	.word	0x20000f30
 800b2f4:	20000f38 	.word	0x20000f38
 800b2f8:	20000f20 	.word	0x20000f20
 800b2fc:	20000a48 	.word	0x20000a48
 800b300:	20000a44 	.word	0x20000a44
 800b304:	20000f2c 	.word	0x20000f2c
 800b308:	20000f28 	.word	0x20000f28

0800b30c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b30c:	b480      	push	{r7}
 800b30e:	b085      	sub	sp, #20
 800b310:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b312:	4b2a      	ldr	r3, [pc, #168]	; (800b3bc <vTaskSwitchContext+0xb0>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d003      	beq.n	800b322 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b31a:	4b29      	ldr	r3, [pc, #164]	; (800b3c0 <vTaskSwitchContext+0xb4>)
 800b31c:	2201      	movs	r2, #1
 800b31e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b320:	e046      	b.n	800b3b0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b322:	4b27      	ldr	r3, [pc, #156]	; (800b3c0 <vTaskSwitchContext+0xb4>)
 800b324:	2200      	movs	r2, #0
 800b326:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b328:	4b26      	ldr	r3, [pc, #152]	; (800b3c4 <vTaskSwitchContext+0xb8>)
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	60fb      	str	r3, [r7, #12]
 800b32e:	e010      	b.n	800b352 <vTaskSwitchContext+0x46>
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d10a      	bne.n	800b34c <vTaskSwitchContext+0x40>
	__asm volatile
 800b336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b33a:	f383 8811 	msr	BASEPRI, r3
 800b33e:	f3bf 8f6f 	isb	sy
 800b342:	f3bf 8f4f 	dsb	sy
 800b346:	607b      	str	r3, [r7, #4]
}
 800b348:	bf00      	nop
 800b34a:	e7fe      	b.n	800b34a <vTaskSwitchContext+0x3e>
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	3b01      	subs	r3, #1
 800b350:	60fb      	str	r3, [r7, #12]
 800b352:	491d      	ldr	r1, [pc, #116]	; (800b3c8 <vTaskSwitchContext+0xbc>)
 800b354:	68fa      	ldr	r2, [r7, #12]
 800b356:	4613      	mov	r3, r2
 800b358:	009b      	lsls	r3, r3, #2
 800b35a:	4413      	add	r3, r2
 800b35c:	009b      	lsls	r3, r3, #2
 800b35e:	440b      	add	r3, r1
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d0e4      	beq.n	800b330 <vTaskSwitchContext+0x24>
 800b366:	68fa      	ldr	r2, [r7, #12]
 800b368:	4613      	mov	r3, r2
 800b36a:	009b      	lsls	r3, r3, #2
 800b36c:	4413      	add	r3, r2
 800b36e:	009b      	lsls	r3, r3, #2
 800b370:	4a15      	ldr	r2, [pc, #84]	; (800b3c8 <vTaskSwitchContext+0xbc>)
 800b372:	4413      	add	r3, r2
 800b374:	60bb      	str	r3, [r7, #8]
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	685b      	ldr	r3, [r3, #4]
 800b37a:	685a      	ldr	r2, [r3, #4]
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	605a      	str	r2, [r3, #4]
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	685a      	ldr	r2, [r3, #4]
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	3308      	adds	r3, #8
 800b388:	429a      	cmp	r2, r3
 800b38a:	d104      	bne.n	800b396 <vTaskSwitchContext+0x8a>
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	685b      	ldr	r3, [r3, #4]
 800b390:	685a      	ldr	r2, [r3, #4]
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	605a      	str	r2, [r3, #4]
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	685b      	ldr	r3, [r3, #4]
 800b39a:	68db      	ldr	r3, [r3, #12]
 800b39c:	4a0b      	ldr	r2, [pc, #44]	; (800b3cc <vTaskSwitchContext+0xc0>)
 800b39e:	6013      	str	r3, [r2, #0]
 800b3a0:	4a08      	ldr	r2, [pc, #32]	; (800b3c4 <vTaskSwitchContext+0xb8>)
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b3a6:	4b09      	ldr	r3, [pc, #36]	; (800b3cc <vTaskSwitchContext+0xc0>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	3354      	adds	r3, #84	; 0x54
 800b3ac:	4a08      	ldr	r2, [pc, #32]	; (800b3d0 <vTaskSwitchContext+0xc4>)
 800b3ae:	6013      	str	r3, [r2, #0]
}
 800b3b0:	bf00      	nop
 800b3b2:	3714      	adds	r7, #20
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ba:	4770      	bx	lr
 800b3bc:	20000f40 	.word	0x20000f40
 800b3c0:	20000f2c 	.word	0x20000f2c
 800b3c4:	20000f20 	.word	0x20000f20
 800b3c8:	20000a48 	.word	0x20000a48
 800b3cc:	20000a44 	.word	0x20000a44
 800b3d0:	2000007c 	.word	0x2000007c

0800b3d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b084      	sub	sp, #16
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
 800b3dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d10a      	bne.n	800b3fa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b3e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e8:	f383 8811 	msr	BASEPRI, r3
 800b3ec:	f3bf 8f6f 	isb	sy
 800b3f0:	f3bf 8f4f 	dsb	sy
 800b3f4:	60fb      	str	r3, [r7, #12]
}
 800b3f6:	bf00      	nop
 800b3f8:	e7fe      	b.n	800b3f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b3fa:	4b07      	ldr	r3, [pc, #28]	; (800b418 <vTaskPlaceOnEventList+0x44>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	3318      	adds	r3, #24
 800b400:	4619      	mov	r1, r3
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f7fe fd47 	bl	8009e96 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b408:	2101      	movs	r1, #1
 800b40a:	6838      	ldr	r0, [r7, #0]
 800b40c:	f000 fa90 	bl	800b930 <prvAddCurrentTaskToDelayedList>
}
 800b410:	bf00      	nop
 800b412:	3710      	adds	r7, #16
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}
 800b418:	20000a44 	.word	0x20000a44

0800b41c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b086      	sub	sp, #24
 800b420:	af00      	add	r7, sp, #0
 800b422:	60f8      	str	r0, [r7, #12]
 800b424:	60b9      	str	r1, [r7, #8]
 800b426:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d10a      	bne.n	800b444 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b432:	f383 8811 	msr	BASEPRI, r3
 800b436:	f3bf 8f6f 	isb	sy
 800b43a:	f3bf 8f4f 	dsb	sy
 800b43e:	617b      	str	r3, [r7, #20]
}
 800b440:	bf00      	nop
 800b442:	e7fe      	b.n	800b442 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b444:	4b0a      	ldr	r3, [pc, #40]	; (800b470 <vTaskPlaceOnEventListRestricted+0x54>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	3318      	adds	r3, #24
 800b44a:	4619      	mov	r1, r3
 800b44c:	68f8      	ldr	r0, [r7, #12]
 800b44e:	f7fe fcfe 	bl	8009e4e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d002      	beq.n	800b45e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b458:	f04f 33ff 	mov.w	r3, #4294967295
 800b45c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b45e:	6879      	ldr	r1, [r7, #4]
 800b460:	68b8      	ldr	r0, [r7, #8]
 800b462:	f000 fa65 	bl	800b930 <prvAddCurrentTaskToDelayedList>
	}
 800b466:	bf00      	nop
 800b468:	3718      	adds	r7, #24
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}
 800b46e:	bf00      	nop
 800b470:	20000a44 	.word	0x20000a44

0800b474 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b086      	sub	sp, #24
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	68db      	ldr	r3, [r3, #12]
 800b480:	68db      	ldr	r3, [r3, #12]
 800b482:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b484:	693b      	ldr	r3, [r7, #16]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d10a      	bne.n	800b4a0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b48a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b48e:	f383 8811 	msr	BASEPRI, r3
 800b492:	f3bf 8f6f 	isb	sy
 800b496:	f3bf 8f4f 	dsb	sy
 800b49a:	60fb      	str	r3, [r7, #12]
}
 800b49c:	bf00      	nop
 800b49e:	e7fe      	b.n	800b49e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b4a0:	693b      	ldr	r3, [r7, #16]
 800b4a2:	3318      	adds	r3, #24
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f7fe fd2f 	bl	8009f08 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b4aa:	4b1e      	ldr	r3, [pc, #120]	; (800b524 <xTaskRemoveFromEventList+0xb0>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d11d      	bne.n	800b4ee <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b4b2:	693b      	ldr	r3, [r7, #16]
 800b4b4:	3304      	adds	r3, #4
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	f7fe fd26 	bl	8009f08 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b4bc:	693b      	ldr	r3, [r7, #16]
 800b4be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4c0:	4b19      	ldr	r3, [pc, #100]	; (800b528 <xTaskRemoveFromEventList+0xb4>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	429a      	cmp	r2, r3
 800b4c6:	d903      	bls.n	800b4d0 <xTaskRemoveFromEventList+0x5c>
 800b4c8:	693b      	ldr	r3, [r7, #16]
 800b4ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4cc:	4a16      	ldr	r2, [pc, #88]	; (800b528 <xTaskRemoveFromEventList+0xb4>)
 800b4ce:	6013      	str	r3, [r2, #0]
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4d4:	4613      	mov	r3, r2
 800b4d6:	009b      	lsls	r3, r3, #2
 800b4d8:	4413      	add	r3, r2
 800b4da:	009b      	lsls	r3, r3, #2
 800b4dc:	4a13      	ldr	r2, [pc, #76]	; (800b52c <xTaskRemoveFromEventList+0xb8>)
 800b4de:	441a      	add	r2, r3
 800b4e0:	693b      	ldr	r3, [r7, #16]
 800b4e2:	3304      	adds	r3, #4
 800b4e4:	4619      	mov	r1, r3
 800b4e6:	4610      	mov	r0, r2
 800b4e8:	f7fe fcb1 	bl	8009e4e <vListInsertEnd>
 800b4ec:	e005      	b.n	800b4fa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b4ee:	693b      	ldr	r3, [r7, #16]
 800b4f0:	3318      	adds	r3, #24
 800b4f2:	4619      	mov	r1, r3
 800b4f4:	480e      	ldr	r0, [pc, #56]	; (800b530 <xTaskRemoveFromEventList+0xbc>)
 800b4f6:	f7fe fcaa 	bl	8009e4e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b4fa:	693b      	ldr	r3, [r7, #16]
 800b4fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4fe:	4b0d      	ldr	r3, [pc, #52]	; (800b534 <xTaskRemoveFromEventList+0xc0>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b504:	429a      	cmp	r2, r3
 800b506:	d905      	bls.n	800b514 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b508:	2301      	movs	r3, #1
 800b50a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b50c:	4b0a      	ldr	r3, [pc, #40]	; (800b538 <xTaskRemoveFromEventList+0xc4>)
 800b50e:	2201      	movs	r2, #1
 800b510:	601a      	str	r2, [r3, #0]
 800b512:	e001      	b.n	800b518 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b514:	2300      	movs	r3, #0
 800b516:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b518:	697b      	ldr	r3, [r7, #20]
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	3718      	adds	r7, #24
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}
 800b522:	bf00      	nop
 800b524:	20000f40 	.word	0x20000f40
 800b528:	20000f20 	.word	0x20000f20
 800b52c:	20000a48 	.word	0x20000a48
 800b530:	20000ed8 	.word	0x20000ed8
 800b534:	20000a44 	.word	0x20000a44
 800b538:	20000f2c 	.word	0x20000f2c

0800b53c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b53c:	b480      	push	{r7}
 800b53e:	b083      	sub	sp, #12
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b544:	4b06      	ldr	r3, [pc, #24]	; (800b560 <vTaskInternalSetTimeOutState+0x24>)
 800b546:	681a      	ldr	r2, [r3, #0]
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b54c:	4b05      	ldr	r3, [pc, #20]	; (800b564 <vTaskInternalSetTimeOutState+0x28>)
 800b54e:	681a      	ldr	r2, [r3, #0]
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	605a      	str	r2, [r3, #4]
}
 800b554:	bf00      	nop
 800b556:	370c      	adds	r7, #12
 800b558:	46bd      	mov	sp, r7
 800b55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55e:	4770      	bx	lr
 800b560:	20000f30 	.word	0x20000f30
 800b564:	20000f1c 	.word	0x20000f1c

0800b568 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b088      	sub	sp, #32
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d10a      	bne.n	800b58e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b57c:	f383 8811 	msr	BASEPRI, r3
 800b580:	f3bf 8f6f 	isb	sy
 800b584:	f3bf 8f4f 	dsb	sy
 800b588:	613b      	str	r3, [r7, #16]
}
 800b58a:	bf00      	nop
 800b58c:	e7fe      	b.n	800b58c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d10a      	bne.n	800b5aa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b594:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b598:	f383 8811 	msr	BASEPRI, r3
 800b59c:	f3bf 8f6f 	isb	sy
 800b5a0:	f3bf 8f4f 	dsb	sy
 800b5a4:	60fb      	str	r3, [r7, #12]
}
 800b5a6:	bf00      	nop
 800b5a8:	e7fe      	b.n	800b5a8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b5aa:	f000 fe93 	bl	800c2d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b5ae:	4b1d      	ldr	r3, [pc, #116]	; (800b624 <xTaskCheckForTimeOut+0xbc>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	685b      	ldr	r3, [r3, #4]
 800b5b8:	69ba      	ldr	r2, [r7, #24]
 800b5ba:	1ad3      	subs	r3, r2, r3
 800b5bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5c6:	d102      	bne.n	800b5ce <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	61fb      	str	r3, [r7, #28]
 800b5cc:	e023      	b.n	800b616 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681a      	ldr	r2, [r3, #0]
 800b5d2:	4b15      	ldr	r3, [pc, #84]	; (800b628 <xTaskCheckForTimeOut+0xc0>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	429a      	cmp	r2, r3
 800b5d8:	d007      	beq.n	800b5ea <xTaskCheckForTimeOut+0x82>
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	685b      	ldr	r3, [r3, #4]
 800b5de:	69ba      	ldr	r2, [r7, #24]
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	d302      	bcc.n	800b5ea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	61fb      	str	r3, [r7, #28]
 800b5e8:	e015      	b.n	800b616 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	697a      	ldr	r2, [r7, #20]
 800b5f0:	429a      	cmp	r2, r3
 800b5f2:	d20b      	bcs.n	800b60c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	681a      	ldr	r2, [r3, #0]
 800b5f8:	697b      	ldr	r3, [r7, #20]
 800b5fa:	1ad2      	subs	r2, r2, r3
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f7ff ff9b 	bl	800b53c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b606:	2300      	movs	r3, #0
 800b608:	61fb      	str	r3, [r7, #28]
 800b60a:	e004      	b.n	800b616 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	2200      	movs	r2, #0
 800b610:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b612:	2301      	movs	r3, #1
 800b614:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b616:	f000 fe8d 	bl	800c334 <vPortExitCritical>

	return xReturn;
 800b61a:	69fb      	ldr	r3, [r7, #28]
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	3720      	adds	r7, #32
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}
 800b624:	20000f1c 	.word	0x20000f1c
 800b628:	20000f30 	.word	0x20000f30

0800b62c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b62c:	b480      	push	{r7}
 800b62e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b630:	4b03      	ldr	r3, [pc, #12]	; (800b640 <vTaskMissedYield+0x14>)
 800b632:	2201      	movs	r2, #1
 800b634:	601a      	str	r2, [r3, #0]
}
 800b636:	bf00      	nop
 800b638:	46bd      	mov	sp, r7
 800b63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63e:	4770      	bx	lr
 800b640:	20000f2c 	.word	0x20000f2c

0800b644 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b082      	sub	sp, #8
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b64c:	f000 f852 	bl	800b6f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b650:	4b06      	ldr	r3, [pc, #24]	; (800b66c <prvIdleTask+0x28>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	2b01      	cmp	r3, #1
 800b656:	d9f9      	bls.n	800b64c <prvIdleTask+0x8>
			{
				taskYIELD();
 800b658:	4b05      	ldr	r3, [pc, #20]	; (800b670 <prvIdleTask+0x2c>)
 800b65a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b65e:	601a      	str	r2, [r3, #0]
 800b660:	f3bf 8f4f 	dsb	sy
 800b664:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b668:	e7f0      	b.n	800b64c <prvIdleTask+0x8>
 800b66a:	bf00      	nop
 800b66c:	20000a48 	.word	0x20000a48
 800b670:	e000ed04 	.word	0xe000ed04

0800b674 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b082      	sub	sp, #8
 800b678:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b67a:	2300      	movs	r3, #0
 800b67c:	607b      	str	r3, [r7, #4]
 800b67e:	e00c      	b.n	800b69a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b680:	687a      	ldr	r2, [r7, #4]
 800b682:	4613      	mov	r3, r2
 800b684:	009b      	lsls	r3, r3, #2
 800b686:	4413      	add	r3, r2
 800b688:	009b      	lsls	r3, r3, #2
 800b68a:	4a12      	ldr	r2, [pc, #72]	; (800b6d4 <prvInitialiseTaskLists+0x60>)
 800b68c:	4413      	add	r3, r2
 800b68e:	4618      	mov	r0, r3
 800b690:	f7fe fbb0 	bl	8009df4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	3301      	adds	r3, #1
 800b698:	607b      	str	r3, [r7, #4]
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2b37      	cmp	r3, #55	; 0x37
 800b69e:	d9ef      	bls.n	800b680 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b6a0:	480d      	ldr	r0, [pc, #52]	; (800b6d8 <prvInitialiseTaskLists+0x64>)
 800b6a2:	f7fe fba7 	bl	8009df4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b6a6:	480d      	ldr	r0, [pc, #52]	; (800b6dc <prvInitialiseTaskLists+0x68>)
 800b6a8:	f7fe fba4 	bl	8009df4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b6ac:	480c      	ldr	r0, [pc, #48]	; (800b6e0 <prvInitialiseTaskLists+0x6c>)
 800b6ae:	f7fe fba1 	bl	8009df4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b6b2:	480c      	ldr	r0, [pc, #48]	; (800b6e4 <prvInitialiseTaskLists+0x70>)
 800b6b4:	f7fe fb9e 	bl	8009df4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b6b8:	480b      	ldr	r0, [pc, #44]	; (800b6e8 <prvInitialiseTaskLists+0x74>)
 800b6ba:	f7fe fb9b 	bl	8009df4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b6be:	4b0b      	ldr	r3, [pc, #44]	; (800b6ec <prvInitialiseTaskLists+0x78>)
 800b6c0:	4a05      	ldr	r2, [pc, #20]	; (800b6d8 <prvInitialiseTaskLists+0x64>)
 800b6c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b6c4:	4b0a      	ldr	r3, [pc, #40]	; (800b6f0 <prvInitialiseTaskLists+0x7c>)
 800b6c6:	4a05      	ldr	r2, [pc, #20]	; (800b6dc <prvInitialiseTaskLists+0x68>)
 800b6c8:	601a      	str	r2, [r3, #0]
}
 800b6ca:	bf00      	nop
 800b6cc:	3708      	adds	r7, #8
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}
 800b6d2:	bf00      	nop
 800b6d4:	20000a48 	.word	0x20000a48
 800b6d8:	20000ea8 	.word	0x20000ea8
 800b6dc:	20000ebc 	.word	0x20000ebc
 800b6e0:	20000ed8 	.word	0x20000ed8
 800b6e4:	20000eec 	.word	0x20000eec
 800b6e8:	20000f04 	.word	0x20000f04
 800b6ec:	20000ed0 	.word	0x20000ed0
 800b6f0:	20000ed4 	.word	0x20000ed4

0800b6f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b082      	sub	sp, #8
 800b6f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b6fa:	e019      	b.n	800b730 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b6fc:	f000 fdea 	bl	800c2d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b700:	4b10      	ldr	r3, [pc, #64]	; (800b744 <prvCheckTasksWaitingTermination+0x50>)
 800b702:	68db      	ldr	r3, [r3, #12]
 800b704:	68db      	ldr	r3, [r3, #12]
 800b706:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	3304      	adds	r3, #4
 800b70c:	4618      	mov	r0, r3
 800b70e:	f7fe fbfb 	bl	8009f08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b712:	4b0d      	ldr	r3, [pc, #52]	; (800b748 <prvCheckTasksWaitingTermination+0x54>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	3b01      	subs	r3, #1
 800b718:	4a0b      	ldr	r2, [pc, #44]	; (800b748 <prvCheckTasksWaitingTermination+0x54>)
 800b71a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b71c:	4b0b      	ldr	r3, [pc, #44]	; (800b74c <prvCheckTasksWaitingTermination+0x58>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	3b01      	subs	r3, #1
 800b722:	4a0a      	ldr	r2, [pc, #40]	; (800b74c <prvCheckTasksWaitingTermination+0x58>)
 800b724:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b726:	f000 fe05 	bl	800c334 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f000 f810 	bl	800b750 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b730:	4b06      	ldr	r3, [pc, #24]	; (800b74c <prvCheckTasksWaitingTermination+0x58>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d1e1      	bne.n	800b6fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b738:	bf00      	nop
 800b73a:	bf00      	nop
 800b73c:	3708      	adds	r7, #8
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}
 800b742:	bf00      	nop
 800b744:	20000eec 	.word	0x20000eec
 800b748:	20000f18 	.word	0x20000f18
 800b74c:	20000f00 	.word	0x20000f00

0800b750 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b750:	b580      	push	{r7, lr}
 800b752:	b084      	sub	sp, #16
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	3354      	adds	r3, #84	; 0x54
 800b75c:	4618      	mov	r0, r3
 800b75e:	f001 fcbf 	bl	800d0e0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d108      	bne.n	800b77e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b770:	4618      	mov	r0, r3
 800b772:	f000 ff9d 	bl	800c6b0 <vPortFree>
				vPortFree( pxTCB );
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	f000 ff9a 	bl	800c6b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b77c:	e018      	b.n	800b7b0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b784:	2b01      	cmp	r3, #1
 800b786:	d103      	bne.n	800b790 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	f000 ff91 	bl	800c6b0 <vPortFree>
	}
 800b78e:	e00f      	b.n	800b7b0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b796:	2b02      	cmp	r3, #2
 800b798:	d00a      	beq.n	800b7b0 <prvDeleteTCB+0x60>
	__asm volatile
 800b79a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b79e:	f383 8811 	msr	BASEPRI, r3
 800b7a2:	f3bf 8f6f 	isb	sy
 800b7a6:	f3bf 8f4f 	dsb	sy
 800b7aa:	60fb      	str	r3, [r7, #12]
}
 800b7ac:	bf00      	nop
 800b7ae:	e7fe      	b.n	800b7ae <prvDeleteTCB+0x5e>
	}
 800b7b0:	bf00      	nop
 800b7b2:	3710      	adds	r7, #16
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd80      	pop	{r7, pc}

0800b7b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	b083      	sub	sp, #12
 800b7bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b7be:	4b0c      	ldr	r3, [pc, #48]	; (800b7f0 <prvResetNextTaskUnblockTime+0x38>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d104      	bne.n	800b7d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b7c8:	4b0a      	ldr	r3, [pc, #40]	; (800b7f4 <prvResetNextTaskUnblockTime+0x3c>)
 800b7ca:	f04f 32ff 	mov.w	r2, #4294967295
 800b7ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b7d0:	e008      	b.n	800b7e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7d2:	4b07      	ldr	r3, [pc, #28]	; (800b7f0 <prvResetNextTaskUnblockTime+0x38>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	68db      	ldr	r3, [r3, #12]
 800b7d8:	68db      	ldr	r3, [r3, #12]
 800b7da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	685b      	ldr	r3, [r3, #4]
 800b7e0:	4a04      	ldr	r2, [pc, #16]	; (800b7f4 <prvResetNextTaskUnblockTime+0x3c>)
 800b7e2:	6013      	str	r3, [r2, #0]
}
 800b7e4:	bf00      	nop
 800b7e6:	370c      	adds	r7, #12
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ee:	4770      	bx	lr
 800b7f0:	20000ed0 	.word	0x20000ed0
 800b7f4:	20000f38 	.word	0x20000f38

0800b7f8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b083      	sub	sp, #12
 800b7fc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800b7fe:	4b05      	ldr	r3, [pc, #20]	; (800b814 <xTaskGetCurrentTaskHandle+0x1c>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	607b      	str	r3, [r7, #4]

		return xReturn;
 800b804:	687b      	ldr	r3, [r7, #4]
	}
 800b806:	4618      	mov	r0, r3
 800b808:	370c      	adds	r7, #12
 800b80a:	46bd      	mov	sp, r7
 800b80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b810:	4770      	bx	lr
 800b812:	bf00      	nop
 800b814:	20000a44 	.word	0x20000a44

0800b818 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b818:	b480      	push	{r7}
 800b81a:	b083      	sub	sp, #12
 800b81c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b81e:	4b0b      	ldr	r3, [pc, #44]	; (800b84c <xTaskGetSchedulerState+0x34>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d102      	bne.n	800b82c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b826:	2301      	movs	r3, #1
 800b828:	607b      	str	r3, [r7, #4]
 800b82a:	e008      	b.n	800b83e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b82c:	4b08      	ldr	r3, [pc, #32]	; (800b850 <xTaskGetSchedulerState+0x38>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d102      	bne.n	800b83a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b834:	2302      	movs	r3, #2
 800b836:	607b      	str	r3, [r7, #4]
 800b838:	e001      	b.n	800b83e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b83a:	2300      	movs	r3, #0
 800b83c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b83e:	687b      	ldr	r3, [r7, #4]
	}
 800b840:	4618      	mov	r0, r3
 800b842:	370c      	adds	r7, #12
 800b844:	46bd      	mov	sp, r7
 800b846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84a:	4770      	bx	lr
 800b84c:	20000f24 	.word	0x20000f24
 800b850:	20000f40 	.word	0x20000f40

0800b854 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b854:	b580      	push	{r7, lr}
 800b856:	b086      	sub	sp, #24
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b860:	2300      	movs	r3, #0
 800b862:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d056      	beq.n	800b918 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b86a:	4b2e      	ldr	r3, [pc, #184]	; (800b924 <xTaskPriorityDisinherit+0xd0>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	693a      	ldr	r2, [r7, #16]
 800b870:	429a      	cmp	r2, r3
 800b872:	d00a      	beq.n	800b88a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b874:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b878:	f383 8811 	msr	BASEPRI, r3
 800b87c:	f3bf 8f6f 	isb	sy
 800b880:	f3bf 8f4f 	dsb	sy
 800b884:	60fb      	str	r3, [r7, #12]
}
 800b886:	bf00      	nop
 800b888:	e7fe      	b.n	800b888 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d10a      	bne.n	800b8a8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b892:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b896:	f383 8811 	msr	BASEPRI, r3
 800b89a:	f3bf 8f6f 	isb	sy
 800b89e:	f3bf 8f4f 	dsb	sy
 800b8a2:	60bb      	str	r3, [r7, #8]
}
 800b8a4:	bf00      	nop
 800b8a6:	e7fe      	b.n	800b8a6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b8a8:	693b      	ldr	r3, [r7, #16]
 800b8aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8ac:	1e5a      	subs	r2, r3, #1
 800b8ae:	693b      	ldr	r3, [r7, #16]
 800b8b0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8ba:	429a      	cmp	r2, r3
 800b8bc:	d02c      	beq.n	800b918 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b8be:	693b      	ldr	r3, [r7, #16]
 800b8c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d128      	bne.n	800b918 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b8c6:	693b      	ldr	r3, [r7, #16]
 800b8c8:	3304      	adds	r3, #4
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f7fe fb1c 	bl	8009f08 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b8d0:	693b      	ldr	r3, [r7, #16]
 800b8d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b8d4:	693b      	ldr	r3, [r7, #16]
 800b8d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8d8:	693b      	ldr	r3, [r7, #16]
 800b8da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8dc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b8e0:	693b      	ldr	r3, [r7, #16]
 800b8e2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b8e4:	693b      	ldr	r3, [r7, #16]
 800b8e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8e8:	4b0f      	ldr	r3, [pc, #60]	; (800b928 <xTaskPriorityDisinherit+0xd4>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	429a      	cmp	r2, r3
 800b8ee:	d903      	bls.n	800b8f8 <xTaskPriorityDisinherit+0xa4>
 800b8f0:	693b      	ldr	r3, [r7, #16]
 800b8f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8f4:	4a0c      	ldr	r2, [pc, #48]	; (800b928 <xTaskPriorityDisinherit+0xd4>)
 800b8f6:	6013      	str	r3, [r2, #0]
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8fc:	4613      	mov	r3, r2
 800b8fe:	009b      	lsls	r3, r3, #2
 800b900:	4413      	add	r3, r2
 800b902:	009b      	lsls	r3, r3, #2
 800b904:	4a09      	ldr	r2, [pc, #36]	; (800b92c <xTaskPriorityDisinherit+0xd8>)
 800b906:	441a      	add	r2, r3
 800b908:	693b      	ldr	r3, [r7, #16]
 800b90a:	3304      	adds	r3, #4
 800b90c:	4619      	mov	r1, r3
 800b90e:	4610      	mov	r0, r2
 800b910:	f7fe fa9d 	bl	8009e4e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b914:	2301      	movs	r3, #1
 800b916:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b918:	697b      	ldr	r3, [r7, #20]
	}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3718      	adds	r7, #24
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}
 800b922:	bf00      	nop
 800b924:	20000a44 	.word	0x20000a44
 800b928:	20000f20 	.word	0x20000f20
 800b92c:	20000a48 	.word	0x20000a48

0800b930 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b084      	sub	sp, #16
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b93a:	4b21      	ldr	r3, [pc, #132]	; (800b9c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b940:	4b20      	ldr	r3, [pc, #128]	; (800b9c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	3304      	adds	r3, #4
 800b946:	4618      	mov	r0, r3
 800b948:	f7fe fade 	bl	8009f08 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b952:	d10a      	bne.n	800b96a <prvAddCurrentTaskToDelayedList+0x3a>
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d007      	beq.n	800b96a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b95a:	4b1a      	ldr	r3, [pc, #104]	; (800b9c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	3304      	adds	r3, #4
 800b960:	4619      	mov	r1, r3
 800b962:	4819      	ldr	r0, [pc, #100]	; (800b9c8 <prvAddCurrentTaskToDelayedList+0x98>)
 800b964:	f7fe fa73 	bl	8009e4e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b968:	e026      	b.n	800b9b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b96a:	68fa      	ldr	r2, [r7, #12]
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	4413      	add	r3, r2
 800b970:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b972:	4b14      	ldr	r3, [pc, #80]	; (800b9c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	68ba      	ldr	r2, [r7, #8]
 800b978:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b97a:	68ba      	ldr	r2, [r7, #8]
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	429a      	cmp	r2, r3
 800b980:	d209      	bcs.n	800b996 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b982:	4b12      	ldr	r3, [pc, #72]	; (800b9cc <prvAddCurrentTaskToDelayedList+0x9c>)
 800b984:	681a      	ldr	r2, [r3, #0]
 800b986:	4b0f      	ldr	r3, [pc, #60]	; (800b9c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	3304      	adds	r3, #4
 800b98c:	4619      	mov	r1, r3
 800b98e:	4610      	mov	r0, r2
 800b990:	f7fe fa81 	bl	8009e96 <vListInsert>
}
 800b994:	e010      	b.n	800b9b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b996:	4b0e      	ldr	r3, [pc, #56]	; (800b9d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b998:	681a      	ldr	r2, [r3, #0]
 800b99a:	4b0a      	ldr	r3, [pc, #40]	; (800b9c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	3304      	adds	r3, #4
 800b9a0:	4619      	mov	r1, r3
 800b9a2:	4610      	mov	r0, r2
 800b9a4:	f7fe fa77 	bl	8009e96 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b9a8:	4b0a      	ldr	r3, [pc, #40]	; (800b9d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	68ba      	ldr	r2, [r7, #8]
 800b9ae:	429a      	cmp	r2, r3
 800b9b0:	d202      	bcs.n	800b9b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b9b2:	4a08      	ldr	r2, [pc, #32]	; (800b9d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b9b4:	68bb      	ldr	r3, [r7, #8]
 800b9b6:	6013      	str	r3, [r2, #0]
}
 800b9b8:	bf00      	nop
 800b9ba:	3710      	adds	r7, #16
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}
 800b9c0:	20000f1c 	.word	0x20000f1c
 800b9c4:	20000a44 	.word	0x20000a44
 800b9c8:	20000f04 	.word	0x20000f04
 800b9cc:	20000ed4 	.word	0x20000ed4
 800b9d0:	20000ed0 	.word	0x20000ed0
 800b9d4:	20000f38 	.word	0x20000f38

0800b9d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b08a      	sub	sp, #40	; 0x28
 800b9dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b9e2:	f000 fb07 	bl	800bff4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b9e6:	4b1c      	ldr	r3, [pc, #112]	; (800ba58 <xTimerCreateTimerTask+0x80>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d021      	beq.n	800ba32 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b9f6:	1d3a      	adds	r2, r7, #4
 800b9f8:	f107 0108 	add.w	r1, r7, #8
 800b9fc:	f107 030c 	add.w	r3, r7, #12
 800ba00:	4618      	mov	r0, r3
 800ba02:	f7fe f9dd 	bl	8009dc0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ba06:	6879      	ldr	r1, [r7, #4]
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	68fa      	ldr	r2, [r7, #12]
 800ba0c:	9202      	str	r2, [sp, #8]
 800ba0e:	9301      	str	r3, [sp, #4]
 800ba10:	2302      	movs	r3, #2
 800ba12:	9300      	str	r3, [sp, #0]
 800ba14:	2300      	movs	r3, #0
 800ba16:	460a      	mov	r2, r1
 800ba18:	4910      	ldr	r1, [pc, #64]	; (800ba5c <xTimerCreateTimerTask+0x84>)
 800ba1a:	4811      	ldr	r0, [pc, #68]	; (800ba60 <xTimerCreateTimerTask+0x88>)
 800ba1c:	f7ff f880 	bl	800ab20 <xTaskCreateStatic>
 800ba20:	4603      	mov	r3, r0
 800ba22:	4a10      	ldr	r2, [pc, #64]	; (800ba64 <xTimerCreateTimerTask+0x8c>)
 800ba24:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ba26:	4b0f      	ldr	r3, [pc, #60]	; (800ba64 <xTimerCreateTimerTask+0x8c>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d001      	beq.n	800ba32 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ba2e:	2301      	movs	r3, #1
 800ba30:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ba32:	697b      	ldr	r3, [r7, #20]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d10a      	bne.n	800ba4e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ba38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba3c:	f383 8811 	msr	BASEPRI, r3
 800ba40:	f3bf 8f6f 	isb	sy
 800ba44:	f3bf 8f4f 	dsb	sy
 800ba48:	613b      	str	r3, [r7, #16]
}
 800ba4a:	bf00      	nop
 800ba4c:	e7fe      	b.n	800ba4c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ba4e:	697b      	ldr	r3, [r7, #20]
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	3718      	adds	r7, #24
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}
 800ba58:	20000f74 	.word	0x20000f74
 800ba5c:	0800da18 	.word	0x0800da18
 800ba60:	0800bb9d 	.word	0x0800bb9d
 800ba64:	20000f78 	.word	0x20000f78

0800ba68 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b08a      	sub	sp, #40	; 0x28
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	60f8      	str	r0, [r7, #12]
 800ba70:	60b9      	str	r1, [r7, #8]
 800ba72:	607a      	str	r2, [r7, #4]
 800ba74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ba76:	2300      	movs	r3, #0
 800ba78:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d10a      	bne.n	800ba96 <xTimerGenericCommand+0x2e>
	__asm volatile
 800ba80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba84:	f383 8811 	msr	BASEPRI, r3
 800ba88:	f3bf 8f6f 	isb	sy
 800ba8c:	f3bf 8f4f 	dsb	sy
 800ba90:	623b      	str	r3, [r7, #32]
}
 800ba92:	bf00      	nop
 800ba94:	e7fe      	b.n	800ba94 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ba96:	4b1a      	ldr	r3, [pc, #104]	; (800bb00 <xTimerGenericCommand+0x98>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d02a      	beq.n	800baf4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	2b05      	cmp	r3, #5
 800baae:	dc18      	bgt.n	800bae2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bab0:	f7ff feb2 	bl	800b818 <xTaskGetSchedulerState>
 800bab4:	4603      	mov	r3, r0
 800bab6:	2b02      	cmp	r3, #2
 800bab8:	d109      	bne.n	800bace <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800baba:	4b11      	ldr	r3, [pc, #68]	; (800bb00 <xTimerGenericCommand+0x98>)
 800babc:	6818      	ldr	r0, [r3, #0]
 800babe:	f107 0110 	add.w	r1, r7, #16
 800bac2:	2300      	movs	r3, #0
 800bac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bac6:	f7fe fb87 	bl	800a1d8 <xQueueGenericSend>
 800baca:	6278      	str	r0, [r7, #36]	; 0x24
 800bacc:	e012      	b.n	800baf4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bace:	4b0c      	ldr	r3, [pc, #48]	; (800bb00 <xTimerGenericCommand+0x98>)
 800bad0:	6818      	ldr	r0, [r3, #0]
 800bad2:	f107 0110 	add.w	r1, r7, #16
 800bad6:	2300      	movs	r3, #0
 800bad8:	2200      	movs	r2, #0
 800bada:	f7fe fb7d 	bl	800a1d8 <xQueueGenericSend>
 800bade:	6278      	str	r0, [r7, #36]	; 0x24
 800bae0:	e008      	b.n	800baf4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bae2:	4b07      	ldr	r3, [pc, #28]	; (800bb00 <xTimerGenericCommand+0x98>)
 800bae4:	6818      	ldr	r0, [r3, #0]
 800bae6:	f107 0110 	add.w	r1, r7, #16
 800baea:	2300      	movs	r3, #0
 800baec:	683a      	ldr	r2, [r7, #0]
 800baee:	f7fe fc71 	bl	800a3d4 <xQueueGenericSendFromISR>
 800baf2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800baf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	3728      	adds	r7, #40	; 0x28
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}
 800bafe:	bf00      	nop
 800bb00:	20000f74 	.word	0x20000f74

0800bb04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b088      	sub	sp, #32
 800bb08:	af02      	add	r7, sp, #8
 800bb0a:	6078      	str	r0, [r7, #4]
 800bb0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb0e:	4b22      	ldr	r3, [pc, #136]	; (800bb98 <prvProcessExpiredTimer+0x94>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	68db      	ldr	r3, [r3, #12]
 800bb14:	68db      	ldr	r3, [r3, #12]
 800bb16:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bb18:	697b      	ldr	r3, [r7, #20]
 800bb1a:	3304      	adds	r3, #4
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	f7fe f9f3 	bl	8009f08 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bb22:	697b      	ldr	r3, [r7, #20]
 800bb24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb28:	f003 0304 	and.w	r3, r3, #4
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d022      	beq.n	800bb76 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bb30:	697b      	ldr	r3, [r7, #20]
 800bb32:	699a      	ldr	r2, [r3, #24]
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	18d1      	adds	r1, r2, r3
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	683a      	ldr	r2, [r7, #0]
 800bb3c:	6978      	ldr	r0, [r7, #20]
 800bb3e:	f000 f8d1 	bl	800bce4 <prvInsertTimerInActiveList>
 800bb42:	4603      	mov	r3, r0
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d01f      	beq.n	800bb88 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bb48:	2300      	movs	r3, #0
 800bb4a:	9300      	str	r3, [sp, #0]
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	687a      	ldr	r2, [r7, #4]
 800bb50:	2100      	movs	r1, #0
 800bb52:	6978      	ldr	r0, [r7, #20]
 800bb54:	f7ff ff88 	bl	800ba68 <xTimerGenericCommand>
 800bb58:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d113      	bne.n	800bb88 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800bb60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb64:	f383 8811 	msr	BASEPRI, r3
 800bb68:	f3bf 8f6f 	isb	sy
 800bb6c:	f3bf 8f4f 	dsb	sy
 800bb70:	60fb      	str	r3, [r7, #12]
}
 800bb72:	bf00      	nop
 800bb74:	e7fe      	b.n	800bb74 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb7c:	f023 0301 	bic.w	r3, r3, #1
 800bb80:	b2da      	uxtb	r2, r3
 800bb82:	697b      	ldr	r3, [r7, #20]
 800bb84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	6a1b      	ldr	r3, [r3, #32]
 800bb8c:	6978      	ldr	r0, [r7, #20]
 800bb8e:	4798      	blx	r3
}
 800bb90:	bf00      	nop
 800bb92:	3718      	adds	r7, #24
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}
 800bb98:	20000f6c 	.word	0x20000f6c

0800bb9c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b084      	sub	sp, #16
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bba4:	f107 0308 	add.w	r3, r7, #8
 800bba8:	4618      	mov	r0, r3
 800bbaa:	f000 f857 	bl	800bc5c <prvGetNextExpireTime>
 800bbae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	4619      	mov	r1, r3
 800bbb4:	68f8      	ldr	r0, [r7, #12]
 800bbb6:	f000 f803 	bl	800bbc0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bbba:	f000 f8d5 	bl	800bd68 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bbbe:	e7f1      	b.n	800bba4 <prvTimerTask+0x8>

0800bbc0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b084      	sub	sp, #16
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bbca:	f7ff fa05 	bl	800afd8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bbce:	f107 0308 	add.w	r3, r7, #8
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f000 f866 	bl	800bca4 <prvSampleTimeNow>
 800bbd8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d130      	bne.n	800bc42 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d10a      	bne.n	800bbfc <prvProcessTimerOrBlockTask+0x3c>
 800bbe6:	687a      	ldr	r2, [r7, #4]
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	429a      	cmp	r2, r3
 800bbec:	d806      	bhi.n	800bbfc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bbee:	f7ff fa01 	bl	800aff4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bbf2:	68f9      	ldr	r1, [r7, #12]
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	f7ff ff85 	bl	800bb04 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bbfa:	e024      	b.n	800bc46 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d008      	beq.n	800bc14 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bc02:	4b13      	ldr	r3, [pc, #76]	; (800bc50 <prvProcessTimerOrBlockTask+0x90>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d101      	bne.n	800bc10 <prvProcessTimerOrBlockTask+0x50>
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	e000      	b.n	800bc12 <prvProcessTimerOrBlockTask+0x52>
 800bc10:	2300      	movs	r3, #0
 800bc12:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bc14:	4b0f      	ldr	r3, [pc, #60]	; (800bc54 <prvProcessTimerOrBlockTask+0x94>)
 800bc16:	6818      	ldr	r0, [r3, #0]
 800bc18:	687a      	ldr	r2, [r7, #4]
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	1ad3      	subs	r3, r2, r3
 800bc1e:	683a      	ldr	r2, [r7, #0]
 800bc20:	4619      	mov	r1, r3
 800bc22:	f7fe ff49 	bl	800aab8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bc26:	f7ff f9e5 	bl	800aff4 <xTaskResumeAll>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d10a      	bne.n	800bc46 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bc30:	4b09      	ldr	r3, [pc, #36]	; (800bc58 <prvProcessTimerOrBlockTask+0x98>)
 800bc32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc36:	601a      	str	r2, [r3, #0]
 800bc38:	f3bf 8f4f 	dsb	sy
 800bc3c:	f3bf 8f6f 	isb	sy
}
 800bc40:	e001      	b.n	800bc46 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bc42:	f7ff f9d7 	bl	800aff4 <xTaskResumeAll>
}
 800bc46:	bf00      	nop
 800bc48:	3710      	adds	r7, #16
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}
 800bc4e:	bf00      	nop
 800bc50:	20000f70 	.word	0x20000f70
 800bc54:	20000f74 	.word	0x20000f74
 800bc58:	e000ed04 	.word	0xe000ed04

0800bc5c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bc5c:	b480      	push	{r7}
 800bc5e:	b085      	sub	sp, #20
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bc64:	4b0e      	ldr	r3, [pc, #56]	; (800bca0 <prvGetNextExpireTime+0x44>)
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d101      	bne.n	800bc72 <prvGetNextExpireTime+0x16>
 800bc6e:	2201      	movs	r2, #1
 800bc70:	e000      	b.n	800bc74 <prvGetNextExpireTime+0x18>
 800bc72:	2200      	movs	r2, #0
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d105      	bne.n	800bc8c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bc80:	4b07      	ldr	r3, [pc, #28]	; (800bca0 <prvGetNextExpireTime+0x44>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	68db      	ldr	r3, [r3, #12]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	60fb      	str	r3, [r7, #12]
 800bc8a:	e001      	b.n	800bc90 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bc90:	68fb      	ldr	r3, [r7, #12]
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	3714      	adds	r7, #20
 800bc96:	46bd      	mov	sp, r7
 800bc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9c:	4770      	bx	lr
 800bc9e:	bf00      	nop
 800bca0:	20000f6c 	.word	0x20000f6c

0800bca4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b084      	sub	sp, #16
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bcac:	f7ff fa40 	bl	800b130 <xTaskGetTickCount>
 800bcb0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bcb2:	4b0b      	ldr	r3, [pc, #44]	; (800bce0 <prvSampleTimeNow+0x3c>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	68fa      	ldr	r2, [r7, #12]
 800bcb8:	429a      	cmp	r2, r3
 800bcba:	d205      	bcs.n	800bcc8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bcbc:	f000 f936 	bl	800bf2c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2201      	movs	r2, #1
 800bcc4:	601a      	str	r2, [r3, #0]
 800bcc6:	e002      	b.n	800bcce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2200      	movs	r2, #0
 800bccc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bcce:	4a04      	ldr	r2, [pc, #16]	; (800bce0 <prvSampleTimeNow+0x3c>)
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3710      	adds	r7, #16
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}
 800bcde:	bf00      	nop
 800bce0:	20000f7c 	.word	0x20000f7c

0800bce4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b086      	sub	sp, #24
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	60f8      	str	r0, [r7, #12]
 800bcec:	60b9      	str	r1, [r7, #8]
 800bcee:	607a      	str	r2, [r7, #4]
 800bcf0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	68ba      	ldr	r2, [r7, #8]
 800bcfa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	68fa      	ldr	r2, [r7, #12]
 800bd00:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bd02:	68ba      	ldr	r2, [r7, #8]
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	429a      	cmp	r2, r3
 800bd08:	d812      	bhi.n	800bd30 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd0a:	687a      	ldr	r2, [r7, #4]
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	1ad2      	subs	r2, r2, r3
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	699b      	ldr	r3, [r3, #24]
 800bd14:	429a      	cmp	r2, r3
 800bd16:	d302      	bcc.n	800bd1e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bd18:	2301      	movs	r3, #1
 800bd1a:	617b      	str	r3, [r7, #20]
 800bd1c:	e01b      	b.n	800bd56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bd1e:	4b10      	ldr	r3, [pc, #64]	; (800bd60 <prvInsertTimerInActiveList+0x7c>)
 800bd20:	681a      	ldr	r2, [r3, #0]
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	3304      	adds	r3, #4
 800bd26:	4619      	mov	r1, r3
 800bd28:	4610      	mov	r0, r2
 800bd2a:	f7fe f8b4 	bl	8009e96 <vListInsert>
 800bd2e:	e012      	b.n	800bd56 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bd30:	687a      	ldr	r2, [r7, #4]
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	429a      	cmp	r2, r3
 800bd36:	d206      	bcs.n	800bd46 <prvInsertTimerInActiveList+0x62>
 800bd38:	68ba      	ldr	r2, [r7, #8]
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	429a      	cmp	r2, r3
 800bd3e:	d302      	bcc.n	800bd46 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bd40:	2301      	movs	r3, #1
 800bd42:	617b      	str	r3, [r7, #20]
 800bd44:	e007      	b.n	800bd56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bd46:	4b07      	ldr	r3, [pc, #28]	; (800bd64 <prvInsertTimerInActiveList+0x80>)
 800bd48:	681a      	ldr	r2, [r3, #0]
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	3304      	adds	r3, #4
 800bd4e:	4619      	mov	r1, r3
 800bd50:	4610      	mov	r0, r2
 800bd52:	f7fe f8a0 	bl	8009e96 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bd56:	697b      	ldr	r3, [r7, #20]
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3718      	adds	r7, #24
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}
 800bd60:	20000f70 	.word	0x20000f70
 800bd64:	20000f6c 	.word	0x20000f6c

0800bd68 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b08e      	sub	sp, #56	; 0x38
 800bd6c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bd6e:	e0ca      	b.n	800bf06 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	da18      	bge.n	800bda8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bd76:	1d3b      	adds	r3, r7, #4
 800bd78:	3304      	adds	r3, #4
 800bd7a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bd7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d10a      	bne.n	800bd98 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bd82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd86:	f383 8811 	msr	BASEPRI, r3
 800bd8a:	f3bf 8f6f 	isb	sy
 800bd8e:	f3bf 8f4f 	dsb	sy
 800bd92:	61fb      	str	r3, [r7, #28]
}
 800bd94:	bf00      	nop
 800bd96:	e7fe      	b.n	800bd96 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bd98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd9e:	6850      	ldr	r0, [r2, #4]
 800bda0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bda2:	6892      	ldr	r2, [r2, #8]
 800bda4:	4611      	mov	r1, r2
 800bda6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	f2c0 80ab 	blt.w	800bf06 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bdb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdb6:	695b      	ldr	r3, [r3, #20]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d004      	beq.n	800bdc6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bdbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdbe:	3304      	adds	r3, #4
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f7fe f8a1 	bl	8009f08 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bdc6:	463b      	mov	r3, r7
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f7ff ff6b 	bl	800bca4 <prvSampleTimeNow>
 800bdce:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2b09      	cmp	r3, #9
 800bdd4:	f200 8096 	bhi.w	800bf04 <prvProcessReceivedCommands+0x19c>
 800bdd8:	a201      	add	r2, pc, #4	; (adr r2, 800bde0 <prvProcessReceivedCommands+0x78>)
 800bdda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdde:	bf00      	nop
 800bde0:	0800be09 	.word	0x0800be09
 800bde4:	0800be09 	.word	0x0800be09
 800bde8:	0800be09 	.word	0x0800be09
 800bdec:	0800be7d 	.word	0x0800be7d
 800bdf0:	0800be91 	.word	0x0800be91
 800bdf4:	0800bedb 	.word	0x0800bedb
 800bdf8:	0800be09 	.word	0x0800be09
 800bdfc:	0800be09 	.word	0x0800be09
 800be00:	0800be7d 	.word	0x0800be7d
 800be04:	0800be91 	.word	0x0800be91
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800be08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be0e:	f043 0301 	orr.w	r3, r3, #1
 800be12:	b2da      	uxtb	r2, r3
 800be14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800be1a:	68ba      	ldr	r2, [r7, #8]
 800be1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be1e:	699b      	ldr	r3, [r3, #24]
 800be20:	18d1      	adds	r1, r2, r3
 800be22:	68bb      	ldr	r3, [r7, #8]
 800be24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be28:	f7ff ff5c 	bl	800bce4 <prvInsertTimerInActiveList>
 800be2c:	4603      	mov	r3, r0
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d069      	beq.n	800bf06 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be34:	6a1b      	ldr	r3, [r3, #32]
 800be36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be38:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800be3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be40:	f003 0304 	and.w	r3, r3, #4
 800be44:	2b00      	cmp	r3, #0
 800be46:	d05e      	beq.n	800bf06 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800be48:	68ba      	ldr	r2, [r7, #8]
 800be4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be4c:	699b      	ldr	r3, [r3, #24]
 800be4e:	441a      	add	r2, r3
 800be50:	2300      	movs	r3, #0
 800be52:	9300      	str	r3, [sp, #0]
 800be54:	2300      	movs	r3, #0
 800be56:	2100      	movs	r1, #0
 800be58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be5a:	f7ff fe05 	bl	800ba68 <xTimerGenericCommand>
 800be5e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800be60:	6a3b      	ldr	r3, [r7, #32]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d14f      	bne.n	800bf06 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800be66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be6a:	f383 8811 	msr	BASEPRI, r3
 800be6e:	f3bf 8f6f 	isb	sy
 800be72:	f3bf 8f4f 	dsb	sy
 800be76:	61bb      	str	r3, [r7, #24]
}
 800be78:	bf00      	nop
 800be7a:	e7fe      	b.n	800be7a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800be7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be82:	f023 0301 	bic.w	r3, r3, #1
 800be86:	b2da      	uxtb	r2, r3
 800be88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800be8e:	e03a      	b.n	800bf06 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800be90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be96:	f043 0301 	orr.w	r3, r3, #1
 800be9a:	b2da      	uxtb	r2, r3
 800be9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bea2:	68ba      	ldr	r2, [r7, #8]
 800bea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bea6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beaa:	699b      	ldr	r3, [r3, #24]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d10a      	bne.n	800bec6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800beb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beb4:	f383 8811 	msr	BASEPRI, r3
 800beb8:	f3bf 8f6f 	isb	sy
 800bebc:	f3bf 8f4f 	dsb	sy
 800bec0:	617b      	str	r3, [r7, #20]
}
 800bec2:	bf00      	nop
 800bec4:	e7fe      	b.n	800bec4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bec8:	699a      	ldr	r2, [r3, #24]
 800beca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800becc:	18d1      	adds	r1, r2, r3
 800bece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bed2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bed4:	f7ff ff06 	bl	800bce4 <prvInsertTimerInActiveList>
					break;
 800bed8:	e015      	b.n	800bf06 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800beda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bedc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bee0:	f003 0302 	and.w	r3, r3, #2
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d103      	bne.n	800bef0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800bee8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800beea:	f000 fbe1 	bl	800c6b0 <vPortFree>
 800beee:	e00a      	b.n	800bf06 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bef2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bef6:	f023 0301 	bic.w	r3, r3, #1
 800befa:	b2da      	uxtb	r2, r3
 800befc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800befe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bf02:	e000      	b.n	800bf06 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800bf04:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bf06:	4b08      	ldr	r3, [pc, #32]	; (800bf28 <prvProcessReceivedCommands+0x1c0>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	1d39      	adds	r1, r7, #4
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f7fe fafc 	bl	800a50c <xQueueReceive>
 800bf14:	4603      	mov	r3, r0
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	f47f af2a 	bne.w	800bd70 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bf1c:	bf00      	nop
 800bf1e:	bf00      	nop
 800bf20:	3730      	adds	r7, #48	; 0x30
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}
 800bf26:	bf00      	nop
 800bf28:	20000f74 	.word	0x20000f74

0800bf2c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b088      	sub	sp, #32
 800bf30:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bf32:	e048      	b.n	800bfc6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bf34:	4b2d      	ldr	r3, [pc, #180]	; (800bfec <prvSwitchTimerLists+0xc0>)
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	68db      	ldr	r3, [r3, #12]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf3e:	4b2b      	ldr	r3, [pc, #172]	; (800bfec <prvSwitchTimerLists+0xc0>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	68db      	ldr	r3, [r3, #12]
 800bf44:	68db      	ldr	r3, [r3, #12]
 800bf46:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	3304      	adds	r3, #4
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	f7fd ffdb 	bl	8009f08 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	6a1b      	ldr	r3, [r3, #32]
 800bf56:	68f8      	ldr	r0, [r7, #12]
 800bf58:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf60:	f003 0304 	and.w	r3, r3, #4
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d02e      	beq.n	800bfc6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	699b      	ldr	r3, [r3, #24]
 800bf6c:	693a      	ldr	r2, [r7, #16]
 800bf6e:	4413      	add	r3, r2
 800bf70:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bf72:	68ba      	ldr	r2, [r7, #8]
 800bf74:	693b      	ldr	r3, [r7, #16]
 800bf76:	429a      	cmp	r2, r3
 800bf78:	d90e      	bls.n	800bf98 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	68ba      	ldr	r2, [r7, #8]
 800bf7e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	68fa      	ldr	r2, [r7, #12]
 800bf84:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bf86:	4b19      	ldr	r3, [pc, #100]	; (800bfec <prvSwitchTimerLists+0xc0>)
 800bf88:	681a      	ldr	r2, [r3, #0]
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	3304      	adds	r3, #4
 800bf8e:	4619      	mov	r1, r3
 800bf90:	4610      	mov	r0, r2
 800bf92:	f7fd ff80 	bl	8009e96 <vListInsert>
 800bf96:	e016      	b.n	800bfc6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bf98:	2300      	movs	r3, #0
 800bf9a:	9300      	str	r3, [sp, #0]
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	693a      	ldr	r2, [r7, #16]
 800bfa0:	2100      	movs	r1, #0
 800bfa2:	68f8      	ldr	r0, [r7, #12]
 800bfa4:	f7ff fd60 	bl	800ba68 <xTimerGenericCommand>
 800bfa8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d10a      	bne.n	800bfc6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800bfb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfb4:	f383 8811 	msr	BASEPRI, r3
 800bfb8:	f3bf 8f6f 	isb	sy
 800bfbc:	f3bf 8f4f 	dsb	sy
 800bfc0:	603b      	str	r3, [r7, #0]
}
 800bfc2:	bf00      	nop
 800bfc4:	e7fe      	b.n	800bfc4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bfc6:	4b09      	ldr	r3, [pc, #36]	; (800bfec <prvSwitchTimerLists+0xc0>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d1b1      	bne.n	800bf34 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bfd0:	4b06      	ldr	r3, [pc, #24]	; (800bfec <prvSwitchTimerLists+0xc0>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bfd6:	4b06      	ldr	r3, [pc, #24]	; (800bff0 <prvSwitchTimerLists+0xc4>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	4a04      	ldr	r2, [pc, #16]	; (800bfec <prvSwitchTimerLists+0xc0>)
 800bfdc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bfde:	4a04      	ldr	r2, [pc, #16]	; (800bff0 <prvSwitchTimerLists+0xc4>)
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	6013      	str	r3, [r2, #0]
}
 800bfe4:	bf00      	nop
 800bfe6:	3718      	adds	r7, #24
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}
 800bfec:	20000f6c 	.word	0x20000f6c
 800bff0:	20000f70 	.word	0x20000f70

0800bff4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b082      	sub	sp, #8
 800bff8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bffa:	f000 f96b 	bl	800c2d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bffe:	4b15      	ldr	r3, [pc, #84]	; (800c054 <prvCheckForValidListAndQueue+0x60>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d120      	bne.n	800c048 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c006:	4814      	ldr	r0, [pc, #80]	; (800c058 <prvCheckForValidListAndQueue+0x64>)
 800c008:	f7fd fef4 	bl	8009df4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c00c:	4813      	ldr	r0, [pc, #76]	; (800c05c <prvCheckForValidListAndQueue+0x68>)
 800c00e:	f7fd fef1 	bl	8009df4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c012:	4b13      	ldr	r3, [pc, #76]	; (800c060 <prvCheckForValidListAndQueue+0x6c>)
 800c014:	4a10      	ldr	r2, [pc, #64]	; (800c058 <prvCheckForValidListAndQueue+0x64>)
 800c016:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c018:	4b12      	ldr	r3, [pc, #72]	; (800c064 <prvCheckForValidListAndQueue+0x70>)
 800c01a:	4a10      	ldr	r2, [pc, #64]	; (800c05c <prvCheckForValidListAndQueue+0x68>)
 800c01c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c01e:	2300      	movs	r3, #0
 800c020:	9300      	str	r3, [sp, #0]
 800c022:	4b11      	ldr	r3, [pc, #68]	; (800c068 <prvCheckForValidListAndQueue+0x74>)
 800c024:	4a11      	ldr	r2, [pc, #68]	; (800c06c <prvCheckForValidListAndQueue+0x78>)
 800c026:	2110      	movs	r1, #16
 800c028:	200a      	movs	r0, #10
 800c02a:	f7fd ffff 	bl	800a02c <xQueueGenericCreateStatic>
 800c02e:	4603      	mov	r3, r0
 800c030:	4a08      	ldr	r2, [pc, #32]	; (800c054 <prvCheckForValidListAndQueue+0x60>)
 800c032:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c034:	4b07      	ldr	r3, [pc, #28]	; (800c054 <prvCheckForValidListAndQueue+0x60>)
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d005      	beq.n	800c048 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c03c:	4b05      	ldr	r3, [pc, #20]	; (800c054 <prvCheckForValidListAndQueue+0x60>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	490b      	ldr	r1, [pc, #44]	; (800c070 <prvCheckForValidListAndQueue+0x7c>)
 800c042:	4618      	mov	r0, r3
 800c044:	f7fe fd0e 	bl	800aa64 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c048:	f000 f974 	bl	800c334 <vPortExitCritical>
}
 800c04c:	bf00      	nop
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}
 800c052:	bf00      	nop
 800c054:	20000f74 	.word	0x20000f74
 800c058:	20000f44 	.word	0x20000f44
 800c05c:	20000f58 	.word	0x20000f58
 800c060:	20000f6c 	.word	0x20000f6c
 800c064:	20000f70 	.word	0x20000f70
 800c068:	20001020 	.word	0x20001020
 800c06c:	20000f80 	.word	0x20000f80
 800c070:	0800da20 	.word	0x0800da20

0800c074 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c074:	b480      	push	{r7}
 800c076:	b085      	sub	sp, #20
 800c078:	af00      	add	r7, sp, #0
 800c07a:	60f8      	str	r0, [r7, #12]
 800c07c:	60b9      	str	r1, [r7, #8]
 800c07e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	3b04      	subs	r3, #4
 800c084:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c08c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	3b04      	subs	r3, #4
 800c092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c094:	68bb      	ldr	r3, [r7, #8]
 800c096:	f023 0201 	bic.w	r2, r3, #1
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	3b04      	subs	r3, #4
 800c0a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c0a4:	4a0c      	ldr	r2, [pc, #48]	; (800c0d8 <pxPortInitialiseStack+0x64>)
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	3b14      	subs	r3, #20
 800c0ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c0b0:	687a      	ldr	r2, [r7, #4]
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	3b04      	subs	r3, #4
 800c0ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	f06f 0202 	mvn.w	r2, #2
 800c0c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	3b20      	subs	r3, #32
 800c0c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3714      	adds	r7, #20
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d6:	4770      	bx	lr
 800c0d8:	0800c0dd 	.word	0x0800c0dd

0800c0dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b085      	sub	sp, #20
 800c0e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c0e6:	4b12      	ldr	r3, [pc, #72]	; (800c130 <prvTaskExitError+0x54>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0ee:	d00a      	beq.n	800c106 <prvTaskExitError+0x2a>
	__asm volatile
 800c0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0f4:	f383 8811 	msr	BASEPRI, r3
 800c0f8:	f3bf 8f6f 	isb	sy
 800c0fc:	f3bf 8f4f 	dsb	sy
 800c100:	60fb      	str	r3, [r7, #12]
}
 800c102:	bf00      	nop
 800c104:	e7fe      	b.n	800c104 <prvTaskExitError+0x28>
	__asm volatile
 800c106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c10a:	f383 8811 	msr	BASEPRI, r3
 800c10e:	f3bf 8f6f 	isb	sy
 800c112:	f3bf 8f4f 	dsb	sy
 800c116:	60bb      	str	r3, [r7, #8]
}
 800c118:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c11a:	bf00      	nop
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d0fc      	beq.n	800c11c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c122:	bf00      	nop
 800c124:	bf00      	nop
 800c126:	3714      	adds	r7, #20
 800c128:	46bd      	mov	sp, r7
 800c12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12e:	4770      	bx	lr
 800c130:	2000002c 	.word	0x2000002c
	...

0800c140 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c140:	4b07      	ldr	r3, [pc, #28]	; (800c160 <pxCurrentTCBConst2>)
 800c142:	6819      	ldr	r1, [r3, #0]
 800c144:	6808      	ldr	r0, [r1, #0]
 800c146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c14a:	f380 8809 	msr	PSP, r0
 800c14e:	f3bf 8f6f 	isb	sy
 800c152:	f04f 0000 	mov.w	r0, #0
 800c156:	f380 8811 	msr	BASEPRI, r0
 800c15a:	4770      	bx	lr
 800c15c:	f3af 8000 	nop.w

0800c160 <pxCurrentTCBConst2>:
 800c160:	20000a44 	.word	0x20000a44
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c164:	bf00      	nop
 800c166:	bf00      	nop

0800c168 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c168:	4808      	ldr	r0, [pc, #32]	; (800c18c <prvPortStartFirstTask+0x24>)
 800c16a:	6800      	ldr	r0, [r0, #0]
 800c16c:	6800      	ldr	r0, [r0, #0]
 800c16e:	f380 8808 	msr	MSP, r0
 800c172:	f04f 0000 	mov.w	r0, #0
 800c176:	f380 8814 	msr	CONTROL, r0
 800c17a:	b662      	cpsie	i
 800c17c:	b661      	cpsie	f
 800c17e:	f3bf 8f4f 	dsb	sy
 800c182:	f3bf 8f6f 	isb	sy
 800c186:	df00      	svc	0
 800c188:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c18a:	bf00      	nop
 800c18c:	e000ed08 	.word	0xe000ed08

0800c190 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b086      	sub	sp, #24
 800c194:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c196:	4b46      	ldr	r3, [pc, #280]	; (800c2b0 <xPortStartScheduler+0x120>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	4a46      	ldr	r2, [pc, #280]	; (800c2b4 <xPortStartScheduler+0x124>)
 800c19c:	4293      	cmp	r3, r2
 800c19e:	d10a      	bne.n	800c1b6 <xPortStartScheduler+0x26>
	__asm volatile
 800c1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1a4:	f383 8811 	msr	BASEPRI, r3
 800c1a8:	f3bf 8f6f 	isb	sy
 800c1ac:	f3bf 8f4f 	dsb	sy
 800c1b0:	613b      	str	r3, [r7, #16]
}
 800c1b2:	bf00      	nop
 800c1b4:	e7fe      	b.n	800c1b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c1b6:	4b3e      	ldr	r3, [pc, #248]	; (800c2b0 <xPortStartScheduler+0x120>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	4a3f      	ldr	r2, [pc, #252]	; (800c2b8 <xPortStartScheduler+0x128>)
 800c1bc:	4293      	cmp	r3, r2
 800c1be:	d10a      	bne.n	800c1d6 <xPortStartScheduler+0x46>
	__asm volatile
 800c1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c4:	f383 8811 	msr	BASEPRI, r3
 800c1c8:	f3bf 8f6f 	isb	sy
 800c1cc:	f3bf 8f4f 	dsb	sy
 800c1d0:	60fb      	str	r3, [r7, #12]
}
 800c1d2:	bf00      	nop
 800c1d4:	e7fe      	b.n	800c1d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c1d6:	4b39      	ldr	r3, [pc, #228]	; (800c2bc <xPortStartScheduler+0x12c>)
 800c1d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c1da:	697b      	ldr	r3, [r7, #20]
 800c1dc:	781b      	ldrb	r3, [r3, #0]
 800c1de:	b2db      	uxtb	r3, r3
 800c1e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c1e2:	697b      	ldr	r3, [r7, #20]
 800c1e4:	22ff      	movs	r2, #255	; 0xff
 800c1e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c1e8:	697b      	ldr	r3, [r7, #20]
 800c1ea:	781b      	ldrb	r3, [r3, #0]
 800c1ec:	b2db      	uxtb	r3, r3
 800c1ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c1f0:	78fb      	ldrb	r3, [r7, #3]
 800c1f2:	b2db      	uxtb	r3, r3
 800c1f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c1f8:	b2da      	uxtb	r2, r3
 800c1fa:	4b31      	ldr	r3, [pc, #196]	; (800c2c0 <xPortStartScheduler+0x130>)
 800c1fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c1fe:	4b31      	ldr	r3, [pc, #196]	; (800c2c4 <xPortStartScheduler+0x134>)
 800c200:	2207      	movs	r2, #7
 800c202:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c204:	e009      	b.n	800c21a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c206:	4b2f      	ldr	r3, [pc, #188]	; (800c2c4 <xPortStartScheduler+0x134>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	3b01      	subs	r3, #1
 800c20c:	4a2d      	ldr	r2, [pc, #180]	; (800c2c4 <xPortStartScheduler+0x134>)
 800c20e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c210:	78fb      	ldrb	r3, [r7, #3]
 800c212:	b2db      	uxtb	r3, r3
 800c214:	005b      	lsls	r3, r3, #1
 800c216:	b2db      	uxtb	r3, r3
 800c218:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c21a:	78fb      	ldrb	r3, [r7, #3]
 800c21c:	b2db      	uxtb	r3, r3
 800c21e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c222:	2b80      	cmp	r3, #128	; 0x80
 800c224:	d0ef      	beq.n	800c206 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c226:	4b27      	ldr	r3, [pc, #156]	; (800c2c4 <xPortStartScheduler+0x134>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	f1c3 0307 	rsb	r3, r3, #7
 800c22e:	2b04      	cmp	r3, #4
 800c230:	d00a      	beq.n	800c248 <xPortStartScheduler+0xb8>
	__asm volatile
 800c232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c236:	f383 8811 	msr	BASEPRI, r3
 800c23a:	f3bf 8f6f 	isb	sy
 800c23e:	f3bf 8f4f 	dsb	sy
 800c242:	60bb      	str	r3, [r7, #8]
}
 800c244:	bf00      	nop
 800c246:	e7fe      	b.n	800c246 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c248:	4b1e      	ldr	r3, [pc, #120]	; (800c2c4 <xPortStartScheduler+0x134>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	021b      	lsls	r3, r3, #8
 800c24e:	4a1d      	ldr	r2, [pc, #116]	; (800c2c4 <xPortStartScheduler+0x134>)
 800c250:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c252:	4b1c      	ldr	r3, [pc, #112]	; (800c2c4 <xPortStartScheduler+0x134>)
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c25a:	4a1a      	ldr	r2, [pc, #104]	; (800c2c4 <xPortStartScheduler+0x134>)
 800c25c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	b2da      	uxtb	r2, r3
 800c262:	697b      	ldr	r3, [r7, #20]
 800c264:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c266:	4b18      	ldr	r3, [pc, #96]	; (800c2c8 <xPortStartScheduler+0x138>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	4a17      	ldr	r2, [pc, #92]	; (800c2c8 <xPortStartScheduler+0x138>)
 800c26c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c270:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c272:	4b15      	ldr	r3, [pc, #84]	; (800c2c8 <xPortStartScheduler+0x138>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	4a14      	ldr	r2, [pc, #80]	; (800c2c8 <xPortStartScheduler+0x138>)
 800c278:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c27c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c27e:	f000 f8dd 	bl	800c43c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c282:	4b12      	ldr	r3, [pc, #72]	; (800c2cc <xPortStartScheduler+0x13c>)
 800c284:	2200      	movs	r2, #0
 800c286:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c288:	f000 f8fc 	bl	800c484 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c28c:	4b10      	ldr	r3, [pc, #64]	; (800c2d0 <xPortStartScheduler+0x140>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	4a0f      	ldr	r2, [pc, #60]	; (800c2d0 <xPortStartScheduler+0x140>)
 800c292:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c296:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c298:	f7ff ff66 	bl	800c168 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c29c:	f7ff f836 	bl	800b30c <vTaskSwitchContext>
	prvTaskExitError();
 800c2a0:	f7ff ff1c 	bl	800c0dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c2a4:	2300      	movs	r3, #0
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3718      	adds	r7, #24
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}
 800c2ae:	bf00      	nop
 800c2b0:	e000ed00 	.word	0xe000ed00
 800c2b4:	410fc271 	.word	0x410fc271
 800c2b8:	410fc270 	.word	0x410fc270
 800c2bc:	e000e400 	.word	0xe000e400
 800c2c0:	20001070 	.word	0x20001070
 800c2c4:	20001074 	.word	0x20001074
 800c2c8:	e000ed20 	.word	0xe000ed20
 800c2cc:	2000002c 	.word	0x2000002c
 800c2d0:	e000ef34 	.word	0xe000ef34

0800c2d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c2d4:	b480      	push	{r7}
 800c2d6:	b083      	sub	sp, #12
 800c2d8:	af00      	add	r7, sp, #0
	__asm volatile
 800c2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2de:	f383 8811 	msr	BASEPRI, r3
 800c2e2:	f3bf 8f6f 	isb	sy
 800c2e6:	f3bf 8f4f 	dsb	sy
 800c2ea:	607b      	str	r3, [r7, #4]
}
 800c2ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c2ee:	4b0f      	ldr	r3, [pc, #60]	; (800c32c <vPortEnterCritical+0x58>)
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	3301      	adds	r3, #1
 800c2f4:	4a0d      	ldr	r2, [pc, #52]	; (800c32c <vPortEnterCritical+0x58>)
 800c2f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c2f8:	4b0c      	ldr	r3, [pc, #48]	; (800c32c <vPortEnterCritical+0x58>)
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	2b01      	cmp	r3, #1
 800c2fe:	d10f      	bne.n	800c320 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c300:	4b0b      	ldr	r3, [pc, #44]	; (800c330 <vPortEnterCritical+0x5c>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	b2db      	uxtb	r3, r3
 800c306:	2b00      	cmp	r3, #0
 800c308:	d00a      	beq.n	800c320 <vPortEnterCritical+0x4c>
	__asm volatile
 800c30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c30e:	f383 8811 	msr	BASEPRI, r3
 800c312:	f3bf 8f6f 	isb	sy
 800c316:	f3bf 8f4f 	dsb	sy
 800c31a:	603b      	str	r3, [r7, #0]
}
 800c31c:	bf00      	nop
 800c31e:	e7fe      	b.n	800c31e <vPortEnterCritical+0x4a>
	}
}
 800c320:	bf00      	nop
 800c322:	370c      	adds	r7, #12
 800c324:	46bd      	mov	sp, r7
 800c326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32a:	4770      	bx	lr
 800c32c:	2000002c 	.word	0x2000002c
 800c330:	e000ed04 	.word	0xe000ed04

0800c334 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c334:	b480      	push	{r7}
 800c336:	b083      	sub	sp, #12
 800c338:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c33a:	4b12      	ldr	r3, [pc, #72]	; (800c384 <vPortExitCritical+0x50>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d10a      	bne.n	800c358 <vPortExitCritical+0x24>
	__asm volatile
 800c342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c346:	f383 8811 	msr	BASEPRI, r3
 800c34a:	f3bf 8f6f 	isb	sy
 800c34e:	f3bf 8f4f 	dsb	sy
 800c352:	607b      	str	r3, [r7, #4]
}
 800c354:	bf00      	nop
 800c356:	e7fe      	b.n	800c356 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c358:	4b0a      	ldr	r3, [pc, #40]	; (800c384 <vPortExitCritical+0x50>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	3b01      	subs	r3, #1
 800c35e:	4a09      	ldr	r2, [pc, #36]	; (800c384 <vPortExitCritical+0x50>)
 800c360:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c362:	4b08      	ldr	r3, [pc, #32]	; (800c384 <vPortExitCritical+0x50>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d105      	bne.n	800c376 <vPortExitCritical+0x42>
 800c36a:	2300      	movs	r3, #0
 800c36c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	f383 8811 	msr	BASEPRI, r3
}
 800c374:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c376:	bf00      	nop
 800c378:	370c      	adds	r7, #12
 800c37a:	46bd      	mov	sp, r7
 800c37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c380:	4770      	bx	lr
 800c382:	bf00      	nop
 800c384:	2000002c 	.word	0x2000002c
	...

0800c390 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c390:	f3ef 8009 	mrs	r0, PSP
 800c394:	f3bf 8f6f 	isb	sy
 800c398:	4b15      	ldr	r3, [pc, #84]	; (800c3f0 <pxCurrentTCBConst>)
 800c39a:	681a      	ldr	r2, [r3, #0]
 800c39c:	f01e 0f10 	tst.w	lr, #16
 800c3a0:	bf08      	it	eq
 800c3a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c3a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3aa:	6010      	str	r0, [r2, #0]
 800c3ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c3b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c3b4:	f380 8811 	msr	BASEPRI, r0
 800c3b8:	f3bf 8f4f 	dsb	sy
 800c3bc:	f3bf 8f6f 	isb	sy
 800c3c0:	f7fe ffa4 	bl	800b30c <vTaskSwitchContext>
 800c3c4:	f04f 0000 	mov.w	r0, #0
 800c3c8:	f380 8811 	msr	BASEPRI, r0
 800c3cc:	bc09      	pop	{r0, r3}
 800c3ce:	6819      	ldr	r1, [r3, #0]
 800c3d0:	6808      	ldr	r0, [r1, #0]
 800c3d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3d6:	f01e 0f10 	tst.w	lr, #16
 800c3da:	bf08      	it	eq
 800c3dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c3e0:	f380 8809 	msr	PSP, r0
 800c3e4:	f3bf 8f6f 	isb	sy
 800c3e8:	4770      	bx	lr
 800c3ea:	bf00      	nop
 800c3ec:	f3af 8000 	nop.w

0800c3f0 <pxCurrentTCBConst>:
 800c3f0:	20000a44 	.word	0x20000a44
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c3f4:	bf00      	nop
 800c3f6:	bf00      	nop

0800c3f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b082      	sub	sp, #8
 800c3fc:	af00      	add	r7, sp, #0
	__asm volatile
 800c3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c402:	f383 8811 	msr	BASEPRI, r3
 800c406:	f3bf 8f6f 	isb	sy
 800c40a:	f3bf 8f4f 	dsb	sy
 800c40e:	607b      	str	r3, [r7, #4]
}
 800c410:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c412:	f7fe fec1 	bl	800b198 <xTaskIncrementTick>
 800c416:	4603      	mov	r3, r0
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d003      	beq.n	800c424 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c41c:	4b06      	ldr	r3, [pc, #24]	; (800c438 <xPortSysTickHandler+0x40>)
 800c41e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c422:	601a      	str	r2, [r3, #0]
 800c424:	2300      	movs	r3, #0
 800c426:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	f383 8811 	msr	BASEPRI, r3
}
 800c42e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c430:	bf00      	nop
 800c432:	3708      	adds	r7, #8
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}
 800c438:	e000ed04 	.word	0xe000ed04

0800c43c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c43c:	b480      	push	{r7}
 800c43e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c440:	4b0b      	ldr	r3, [pc, #44]	; (800c470 <vPortSetupTimerInterrupt+0x34>)
 800c442:	2200      	movs	r2, #0
 800c444:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c446:	4b0b      	ldr	r3, [pc, #44]	; (800c474 <vPortSetupTimerInterrupt+0x38>)
 800c448:	2200      	movs	r2, #0
 800c44a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c44c:	4b0a      	ldr	r3, [pc, #40]	; (800c478 <vPortSetupTimerInterrupt+0x3c>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	4a0a      	ldr	r2, [pc, #40]	; (800c47c <vPortSetupTimerInterrupt+0x40>)
 800c452:	fba2 2303 	umull	r2, r3, r2, r3
 800c456:	099b      	lsrs	r3, r3, #6
 800c458:	4a09      	ldr	r2, [pc, #36]	; (800c480 <vPortSetupTimerInterrupt+0x44>)
 800c45a:	3b01      	subs	r3, #1
 800c45c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c45e:	4b04      	ldr	r3, [pc, #16]	; (800c470 <vPortSetupTimerInterrupt+0x34>)
 800c460:	2207      	movs	r2, #7
 800c462:	601a      	str	r2, [r3, #0]
}
 800c464:	bf00      	nop
 800c466:	46bd      	mov	sp, r7
 800c468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46c:	4770      	bx	lr
 800c46e:	bf00      	nop
 800c470:	e000e010 	.word	0xe000e010
 800c474:	e000e018 	.word	0xe000e018
 800c478:	20000000 	.word	0x20000000
 800c47c:	10624dd3 	.word	0x10624dd3
 800c480:	e000e014 	.word	0xe000e014

0800c484 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c484:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c494 <vPortEnableVFP+0x10>
 800c488:	6801      	ldr	r1, [r0, #0]
 800c48a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c48e:	6001      	str	r1, [r0, #0]
 800c490:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c492:	bf00      	nop
 800c494:	e000ed88 	.word	0xe000ed88

0800c498 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c498:	b480      	push	{r7}
 800c49a:	b085      	sub	sp, #20
 800c49c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c49e:	f3ef 8305 	mrs	r3, IPSR
 800c4a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	2b0f      	cmp	r3, #15
 800c4a8:	d914      	bls.n	800c4d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c4aa:	4a17      	ldr	r2, [pc, #92]	; (800c508 <vPortValidateInterruptPriority+0x70>)
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	4413      	add	r3, r2
 800c4b0:	781b      	ldrb	r3, [r3, #0]
 800c4b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c4b4:	4b15      	ldr	r3, [pc, #84]	; (800c50c <vPortValidateInterruptPriority+0x74>)
 800c4b6:	781b      	ldrb	r3, [r3, #0]
 800c4b8:	7afa      	ldrb	r2, [r7, #11]
 800c4ba:	429a      	cmp	r2, r3
 800c4bc:	d20a      	bcs.n	800c4d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4c2:	f383 8811 	msr	BASEPRI, r3
 800c4c6:	f3bf 8f6f 	isb	sy
 800c4ca:	f3bf 8f4f 	dsb	sy
 800c4ce:	607b      	str	r3, [r7, #4]
}
 800c4d0:	bf00      	nop
 800c4d2:	e7fe      	b.n	800c4d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c4d4:	4b0e      	ldr	r3, [pc, #56]	; (800c510 <vPortValidateInterruptPriority+0x78>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c4dc:	4b0d      	ldr	r3, [pc, #52]	; (800c514 <vPortValidateInterruptPriority+0x7c>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	d90a      	bls.n	800c4fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c4e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e8:	f383 8811 	msr	BASEPRI, r3
 800c4ec:	f3bf 8f6f 	isb	sy
 800c4f0:	f3bf 8f4f 	dsb	sy
 800c4f4:	603b      	str	r3, [r7, #0]
}
 800c4f6:	bf00      	nop
 800c4f8:	e7fe      	b.n	800c4f8 <vPortValidateInterruptPriority+0x60>
	}
 800c4fa:	bf00      	nop
 800c4fc:	3714      	adds	r7, #20
 800c4fe:	46bd      	mov	sp, r7
 800c500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c504:	4770      	bx	lr
 800c506:	bf00      	nop
 800c508:	e000e3f0 	.word	0xe000e3f0
 800c50c:	20001070 	.word	0x20001070
 800c510:	e000ed0c 	.word	0xe000ed0c
 800c514:	20001074 	.word	0x20001074

0800c518 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b08a      	sub	sp, #40	; 0x28
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c520:	2300      	movs	r3, #0
 800c522:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c524:	f7fe fd58 	bl	800afd8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c528:	4b5b      	ldr	r3, [pc, #364]	; (800c698 <pvPortMalloc+0x180>)
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d101      	bne.n	800c534 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c530:	f000 f920 	bl	800c774 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c534:	4b59      	ldr	r3, [pc, #356]	; (800c69c <pvPortMalloc+0x184>)
 800c536:	681a      	ldr	r2, [r3, #0]
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	4013      	ands	r3, r2
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	f040 8093 	bne.w	800c668 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d01d      	beq.n	800c584 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c548:	2208      	movs	r2, #8
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	4413      	add	r3, r2
 800c54e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	f003 0307 	and.w	r3, r3, #7
 800c556:	2b00      	cmp	r3, #0
 800c558:	d014      	beq.n	800c584 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f023 0307 	bic.w	r3, r3, #7
 800c560:	3308      	adds	r3, #8
 800c562:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f003 0307 	and.w	r3, r3, #7
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d00a      	beq.n	800c584 <pvPortMalloc+0x6c>
	__asm volatile
 800c56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c572:	f383 8811 	msr	BASEPRI, r3
 800c576:	f3bf 8f6f 	isb	sy
 800c57a:	f3bf 8f4f 	dsb	sy
 800c57e:	617b      	str	r3, [r7, #20]
}
 800c580:	bf00      	nop
 800c582:	e7fe      	b.n	800c582 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d06e      	beq.n	800c668 <pvPortMalloc+0x150>
 800c58a:	4b45      	ldr	r3, [pc, #276]	; (800c6a0 <pvPortMalloc+0x188>)
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	687a      	ldr	r2, [r7, #4]
 800c590:	429a      	cmp	r2, r3
 800c592:	d869      	bhi.n	800c668 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c594:	4b43      	ldr	r3, [pc, #268]	; (800c6a4 <pvPortMalloc+0x18c>)
 800c596:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c598:	4b42      	ldr	r3, [pc, #264]	; (800c6a4 <pvPortMalloc+0x18c>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c59e:	e004      	b.n	800c5aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ac:	685b      	ldr	r3, [r3, #4]
 800c5ae:	687a      	ldr	r2, [r7, #4]
 800c5b0:	429a      	cmp	r2, r3
 800c5b2:	d903      	bls.n	800c5bc <pvPortMalloc+0xa4>
 800c5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d1f1      	bne.n	800c5a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c5bc:	4b36      	ldr	r3, [pc, #216]	; (800c698 <pvPortMalloc+0x180>)
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d050      	beq.n	800c668 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c5c6:	6a3b      	ldr	r3, [r7, #32]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	2208      	movs	r2, #8
 800c5cc:	4413      	add	r3, r2
 800c5ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5d2:	681a      	ldr	r2, [r3, #0]
 800c5d4:	6a3b      	ldr	r3, [r7, #32]
 800c5d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5da:	685a      	ldr	r2, [r3, #4]
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	1ad2      	subs	r2, r2, r3
 800c5e0:	2308      	movs	r3, #8
 800c5e2:	005b      	lsls	r3, r3, #1
 800c5e4:	429a      	cmp	r2, r3
 800c5e6:	d91f      	bls.n	800c628 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c5e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	4413      	add	r3, r2
 800c5ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c5f0:	69bb      	ldr	r3, [r7, #24]
 800c5f2:	f003 0307 	and.w	r3, r3, #7
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d00a      	beq.n	800c610 <pvPortMalloc+0xf8>
	__asm volatile
 800c5fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5fe:	f383 8811 	msr	BASEPRI, r3
 800c602:	f3bf 8f6f 	isb	sy
 800c606:	f3bf 8f4f 	dsb	sy
 800c60a:	613b      	str	r3, [r7, #16]
}
 800c60c:	bf00      	nop
 800c60e:	e7fe      	b.n	800c60e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c612:	685a      	ldr	r2, [r3, #4]
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	1ad2      	subs	r2, r2, r3
 800c618:	69bb      	ldr	r3, [r7, #24]
 800c61a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c61e:	687a      	ldr	r2, [r7, #4]
 800c620:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c622:	69b8      	ldr	r0, [r7, #24]
 800c624:	f000 f908 	bl	800c838 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c628:	4b1d      	ldr	r3, [pc, #116]	; (800c6a0 <pvPortMalloc+0x188>)
 800c62a:	681a      	ldr	r2, [r3, #0]
 800c62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c62e:	685b      	ldr	r3, [r3, #4]
 800c630:	1ad3      	subs	r3, r2, r3
 800c632:	4a1b      	ldr	r2, [pc, #108]	; (800c6a0 <pvPortMalloc+0x188>)
 800c634:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c636:	4b1a      	ldr	r3, [pc, #104]	; (800c6a0 <pvPortMalloc+0x188>)
 800c638:	681a      	ldr	r2, [r3, #0]
 800c63a:	4b1b      	ldr	r3, [pc, #108]	; (800c6a8 <pvPortMalloc+0x190>)
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	429a      	cmp	r2, r3
 800c640:	d203      	bcs.n	800c64a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c642:	4b17      	ldr	r3, [pc, #92]	; (800c6a0 <pvPortMalloc+0x188>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	4a18      	ldr	r2, [pc, #96]	; (800c6a8 <pvPortMalloc+0x190>)
 800c648:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c64c:	685a      	ldr	r2, [r3, #4]
 800c64e:	4b13      	ldr	r3, [pc, #76]	; (800c69c <pvPortMalloc+0x184>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	431a      	orrs	r2, r3
 800c654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c656:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c65a:	2200      	movs	r2, #0
 800c65c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c65e:	4b13      	ldr	r3, [pc, #76]	; (800c6ac <pvPortMalloc+0x194>)
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	3301      	adds	r3, #1
 800c664:	4a11      	ldr	r2, [pc, #68]	; (800c6ac <pvPortMalloc+0x194>)
 800c666:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c668:	f7fe fcc4 	bl	800aff4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c66c:	69fb      	ldr	r3, [r7, #28]
 800c66e:	f003 0307 	and.w	r3, r3, #7
 800c672:	2b00      	cmp	r3, #0
 800c674:	d00a      	beq.n	800c68c <pvPortMalloc+0x174>
	__asm volatile
 800c676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c67a:	f383 8811 	msr	BASEPRI, r3
 800c67e:	f3bf 8f6f 	isb	sy
 800c682:	f3bf 8f4f 	dsb	sy
 800c686:	60fb      	str	r3, [r7, #12]
}
 800c688:	bf00      	nop
 800c68a:	e7fe      	b.n	800c68a <pvPortMalloc+0x172>
	return pvReturn;
 800c68c:	69fb      	ldr	r3, [r7, #28]
}
 800c68e:	4618      	mov	r0, r3
 800c690:	3728      	adds	r7, #40	; 0x28
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}
 800c696:	bf00      	nop
 800c698:	20004c80 	.word	0x20004c80
 800c69c:	20004c94 	.word	0x20004c94
 800c6a0:	20004c84 	.word	0x20004c84
 800c6a4:	20004c78 	.word	0x20004c78
 800c6a8:	20004c88 	.word	0x20004c88
 800c6ac:	20004c8c 	.word	0x20004c8c

0800c6b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b086      	sub	sp, #24
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d04d      	beq.n	800c75e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c6c2:	2308      	movs	r3, #8
 800c6c4:	425b      	negs	r3, r3
 800c6c6:	697a      	ldr	r2, [r7, #20]
 800c6c8:	4413      	add	r3, r2
 800c6ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c6cc:	697b      	ldr	r3, [r7, #20]
 800c6ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c6d0:	693b      	ldr	r3, [r7, #16]
 800c6d2:	685a      	ldr	r2, [r3, #4]
 800c6d4:	4b24      	ldr	r3, [pc, #144]	; (800c768 <vPortFree+0xb8>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	4013      	ands	r3, r2
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d10a      	bne.n	800c6f4 <vPortFree+0x44>
	__asm volatile
 800c6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6e2:	f383 8811 	msr	BASEPRI, r3
 800c6e6:	f3bf 8f6f 	isb	sy
 800c6ea:	f3bf 8f4f 	dsb	sy
 800c6ee:	60fb      	str	r3, [r7, #12]
}
 800c6f0:	bf00      	nop
 800c6f2:	e7fe      	b.n	800c6f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c6f4:	693b      	ldr	r3, [r7, #16]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d00a      	beq.n	800c712 <vPortFree+0x62>
	__asm volatile
 800c6fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c700:	f383 8811 	msr	BASEPRI, r3
 800c704:	f3bf 8f6f 	isb	sy
 800c708:	f3bf 8f4f 	dsb	sy
 800c70c:	60bb      	str	r3, [r7, #8]
}
 800c70e:	bf00      	nop
 800c710:	e7fe      	b.n	800c710 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c712:	693b      	ldr	r3, [r7, #16]
 800c714:	685a      	ldr	r2, [r3, #4]
 800c716:	4b14      	ldr	r3, [pc, #80]	; (800c768 <vPortFree+0xb8>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	4013      	ands	r3, r2
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d01e      	beq.n	800c75e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c720:	693b      	ldr	r3, [r7, #16]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d11a      	bne.n	800c75e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c728:	693b      	ldr	r3, [r7, #16]
 800c72a:	685a      	ldr	r2, [r3, #4]
 800c72c:	4b0e      	ldr	r3, [pc, #56]	; (800c768 <vPortFree+0xb8>)
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	43db      	mvns	r3, r3
 800c732:	401a      	ands	r2, r3
 800c734:	693b      	ldr	r3, [r7, #16]
 800c736:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c738:	f7fe fc4e 	bl	800afd8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c73c:	693b      	ldr	r3, [r7, #16]
 800c73e:	685a      	ldr	r2, [r3, #4]
 800c740:	4b0a      	ldr	r3, [pc, #40]	; (800c76c <vPortFree+0xbc>)
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	4413      	add	r3, r2
 800c746:	4a09      	ldr	r2, [pc, #36]	; (800c76c <vPortFree+0xbc>)
 800c748:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c74a:	6938      	ldr	r0, [r7, #16]
 800c74c:	f000 f874 	bl	800c838 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c750:	4b07      	ldr	r3, [pc, #28]	; (800c770 <vPortFree+0xc0>)
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	3301      	adds	r3, #1
 800c756:	4a06      	ldr	r2, [pc, #24]	; (800c770 <vPortFree+0xc0>)
 800c758:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c75a:	f7fe fc4b 	bl	800aff4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c75e:	bf00      	nop
 800c760:	3718      	adds	r7, #24
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}
 800c766:	bf00      	nop
 800c768:	20004c94 	.word	0x20004c94
 800c76c:	20004c84 	.word	0x20004c84
 800c770:	20004c90 	.word	0x20004c90

0800c774 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c774:	b480      	push	{r7}
 800c776:	b085      	sub	sp, #20
 800c778:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c77a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c77e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c780:	4b27      	ldr	r3, [pc, #156]	; (800c820 <prvHeapInit+0xac>)
 800c782:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	f003 0307 	and.w	r3, r3, #7
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d00c      	beq.n	800c7a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	3307      	adds	r3, #7
 800c792:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	f023 0307 	bic.w	r3, r3, #7
 800c79a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c79c:	68ba      	ldr	r2, [r7, #8]
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	1ad3      	subs	r3, r2, r3
 800c7a2:	4a1f      	ldr	r2, [pc, #124]	; (800c820 <prvHeapInit+0xac>)
 800c7a4:	4413      	add	r3, r2
 800c7a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c7ac:	4a1d      	ldr	r2, [pc, #116]	; (800c824 <prvHeapInit+0xb0>)
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c7b2:	4b1c      	ldr	r3, [pc, #112]	; (800c824 <prvHeapInit+0xb0>)
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	68ba      	ldr	r2, [r7, #8]
 800c7bc:	4413      	add	r3, r2
 800c7be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c7c0:	2208      	movs	r2, #8
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	1a9b      	subs	r3, r3, r2
 800c7c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	f023 0307 	bic.w	r3, r3, #7
 800c7ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	4a15      	ldr	r2, [pc, #84]	; (800c828 <prvHeapInit+0xb4>)
 800c7d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c7d6:	4b14      	ldr	r3, [pc, #80]	; (800c828 <prvHeapInit+0xb4>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	2200      	movs	r2, #0
 800c7dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c7de:	4b12      	ldr	r3, [pc, #72]	; (800c828 <prvHeapInit+0xb4>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	68fa      	ldr	r2, [r7, #12]
 800c7ee:	1ad2      	subs	r2, r2, r3
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c7f4:	4b0c      	ldr	r3, [pc, #48]	; (800c828 <prvHeapInit+0xb4>)
 800c7f6:	681a      	ldr	r2, [r3, #0]
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	685b      	ldr	r3, [r3, #4]
 800c800:	4a0a      	ldr	r2, [pc, #40]	; (800c82c <prvHeapInit+0xb8>)
 800c802:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	685b      	ldr	r3, [r3, #4]
 800c808:	4a09      	ldr	r2, [pc, #36]	; (800c830 <prvHeapInit+0xbc>)
 800c80a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c80c:	4b09      	ldr	r3, [pc, #36]	; (800c834 <prvHeapInit+0xc0>)
 800c80e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c812:	601a      	str	r2, [r3, #0]
}
 800c814:	bf00      	nop
 800c816:	3714      	adds	r7, #20
 800c818:	46bd      	mov	sp, r7
 800c81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81e:	4770      	bx	lr
 800c820:	20001078 	.word	0x20001078
 800c824:	20004c78 	.word	0x20004c78
 800c828:	20004c80 	.word	0x20004c80
 800c82c:	20004c88 	.word	0x20004c88
 800c830:	20004c84 	.word	0x20004c84
 800c834:	20004c94 	.word	0x20004c94

0800c838 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c838:	b480      	push	{r7}
 800c83a:	b085      	sub	sp, #20
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c840:	4b28      	ldr	r3, [pc, #160]	; (800c8e4 <prvInsertBlockIntoFreeList+0xac>)
 800c842:	60fb      	str	r3, [r7, #12]
 800c844:	e002      	b.n	800c84c <prvInsertBlockIntoFreeList+0x14>
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	60fb      	str	r3, [r7, #12]
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	687a      	ldr	r2, [r7, #4]
 800c852:	429a      	cmp	r2, r3
 800c854:	d8f7      	bhi.n	800c846 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	685b      	ldr	r3, [r3, #4]
 800c85e:	68ba      	ldr	r2, [r7, #8]
 800c860:	4413      	add	r3, r2
 800c862:	687a      	ldr	r2, [r7, #4]
 800c864:	429a      	cmp	r2, r3
 800c866:	d108      	bne.n	800c87a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	685a      	ldr	r2, [r3, #4]
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	685b      	ldr	r3, [r3, #4]
 800c870:	441a      	add	r2, r3
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	685b      	ldr	r3, [r3, #4]
 800c882:	68ba      	ldr	r2, [r7, #8]
 800c884:	441a      	add	r2, r3
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	429a      	cmp	r2, r3
 800c88c:	d118      	bne.n	800c8c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	681a      	ldr	r2, [r3, #0]
 800c892:	4b15      	ldr	r3, [pc, #84]	; (800c8e8 <prvInsertBlockIntoFreeList+0xb0>)
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	429a      	cmp	r2, r3
 800c898:	d00d      	beq.n	800c8b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	685a      	ldr	r2, [r3, #4]
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	685b      	ldr	r3, [r3, #4]
 800c8a4:	441a      	add	r2, r3
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	681a      	ldr	r2, [r3, #0]
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	601a      	str	r2, [r3, #0]
 800c8b4:	e008      	b.n	800c8c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c8b6:	4b0c      	ldr	r3, [pc, #48]	; (800c8e8 <prvInsertBlockIntoFreeList+0xb0>)
 800c8b8:	681a      	ldr	r2, [r3, #0]
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	601a      	str	r2, [r3, #0]
 800c8be:	e003      	b.n	800c8c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	681a      	ldr	r2, [r3, #0]
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c8c8:	68fa      	ldr	r2, [r7, #12]
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	429a      	cmp	r2, r3
 800c8ce:	d002      	beq.n	800c8d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	687a      	ldr	r2, [r7, #4]
 800c8d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c8d6:	bf00      	nop
 800c8d8:	3714      	adds	r7, #20
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e0:	4770      	bx	lr
 800c8e2:	bf00      	nop
 800c8e4:	20004c78 	.word	0x20004c78
 800c8e8:	20004c80 	.word	0x20004c80

0800c8ec <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800c8f0:	2201      	movs	r2, #1
 800c8f2:	490e      	ldr	r1, [pc, #56]	; (800c92c <MX_USB_HOST_Init+0x40>)
 800c8f4:	480e      	ldr	r0, [pc, #56]	; (800c930 <MX_USB_HOST_Init+0x44>)
 800c8f6:	f7fb f915 	bl	8007b24 <USBH_Init>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d001      	beq.n	800c904 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c900:	f7f4 fac8 	bl	8000e94 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800c904:	490b      	ldr	r1, [pc, #44]	; (800c934 <MX_USB_HOST_Init+0x48>)
 800c906:	480a      	ldr	r0, [pc, #40]	; (800c930 <MX_USB_HOST_Init+0x44>)
 800c908:	f7fb f9bc 	bl	8007c84 <USBH_RegisterClass>
 800c90c:	4603      	mov	r3, r0
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d001      	beq.n	800c916 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c912:	f7f4 fabf 	bl	8000e94 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800c916:	4806      	ldr	r0, [pc, #24]	; (800c930 <MX_USB_HOST_Init+0x44>)
 800c918:	f7fb fa40 	bl	8007d9c <USBH_Start>
 800c91c:	4603      	mov	r3, r0
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d001      	beq.n	800c926 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c922:	f7f4 fab7 	bl	8000e94 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c926:	bf00      	nop
 800c928:	bd80      	pop	{r7, pc}
 800c92a:	bf00      	nop
 800c92c:	0800c939 	.word	0x0800c939
 800c930:	20004c98 	.word	0x20004c98
 800c934:	2000000c 	.word	0x2000000c

0800c938 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c938:	b480      	push	{r7}
 800c93a:	b083      	sub	sp, #12
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
 800c940:	460b      	mov	r3, r1
 800c942:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c944:	78fb      	ldrb	r3, [r7, #3]
 800c946:	3b01      	subs	r3, #1
 800c948:	2b04      	cmp	r3, #4
 800c94a:	d819      	bhi.n	800c980 <USBH_UserProcess+0x48>
 800c94c:	a201      	add	r2, pc, #4	; (adr r2, 800c954 <USBH_UserProcess+0x1c>)
 800c94e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c952:	bf00      	nop
 800c954:	0800c981 	.word	0x0800c981
 800c958:	0800c971 	.word	0x0800c971
 800c95c:	0800c981 	.word	0x0800c981
 800c960:	0800c979 	.word	0x0800c979
 800c964:	0800c969 	.word	0x0800c969
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c968:	4b09      	ldr	r3, [pc, #36]	; (800c990 <USBH_UserProcess+0x58>)
 800c96a:	2203      	movs	r2, #3
 800c96c:	701a      	strb	r2, [r3, #0]
  break;
 800c96e:	e008      	b.n	800c982 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c970:	4b07      	ldr	r3, [pc, #28]	; (800c990 <USBH_UserProcess+0x58>)
 800c972:	2202      	movs	r2, #2
 800c974:	701a      	strb	r2, [r3, #0]
  break;
 800c976:	e004      	b.n	800c982 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c978:	4b05      	ldr	r3, [pc, #20]	; (800c990 <USBH_UserProcess+0x58>)
 800c97a:	2201      	movs	r2, #1
 800c97c:	701a      	strb	r2, [r3, #0]
  break;
 800c97e:	e000      	b.n	800c982 <USBH_UserProcess+0x4a>

  default:
  break;
 800c980:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c982:	bf00      	nop
 800c984:	370c      	adds	r7, #12
 800c986:	46bd      	mov	sp, r7
 800c988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98c:	4770      	bx	lr
 800c98e:	bf00      	nop
 800c990:	2000507c 	.word	0x2000507c

0800c994 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b08a      	sub	sp, #40	; 0x28
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c99c:	f107 0314 	add.w	r3, r7, #20
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	601a      	str	r2, [r3, #0]
 800c9a4:	605a      	str	r2, [r3, #4]
 800c9a6:	609a      	str	r2, [r3, #8]
 800c9a8:	60da      	str	r2, [r3, #12]
 800c9aa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c9b4:	d147      	bne.n	800ca46 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	613b      	str	r3, [r7, #16]
 800c9ba:	4b25      	ldr	r3, [pc, #148]	; (800ca50 <HAL_HCD_MspInit+0xbc>)
 800c9bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9be:	4a24      	ldr	r2, [pc, #144]	; (800ca50 <HAL_HCD_MspInit+0xbc>)
 800c9c0:	f043 0301 	orr.w	r3, r3, #1
 800c9c4:	6313      	str	r3, [r2, #48]	; 0x30
 800c9c6:	4b22      	ldr	r3, [pc, #136]	; (800ca50 <HAL_HCD_MspInit+0xbc>)
 800c9c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9ca:	f003 0301 	and.w	r3, r3, #1
 800c9ce:	613b      	str	r3, [r7, #16]
 800c9d0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800c9d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c9d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c9d8:	2300      	movs	r3, #0
 800c9da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c9dc:	2300      	movs	r3, #0
 800c9de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800c9e0:	f107 0314 	add.w	r3, r7, #20
 800c9e4:	4619      	mov	r1, r3
 800c9e6:	481b      	ldr	r0, [pc, #108]	; (800ca54 <HAL_HCD_MspInit+0xc0>)
 800c9e8:	f7f5 f9fe 	bl	8001de8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800c9ec:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800c9f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c9f2:	2302      	movs	r3, #2
 800c9f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c9fe:	230a      	movs	r3, #10
 800ca00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ca02:	f107 0314 	add.w	r3, r7, #20
 800ca06:	4619      	mov	r1, r3
 800ca08:	4812      	ldr	r0, [pc, #72]	; (800ca54 <HAL_HCD_MspInit+0xc0>)
 800ca0a:	f7f5 f9ed 	bl	8001de8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ca0e:	4b10      	ldr	r3, [pc, #64]	; (800ca50 <HAL_HCD_MspInit+0xbc>)
 800ca10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca12:	4a0f      	ldr	r2, [pc, #60]	; (800ca50 <HAL_HCD_MspInit+0xbc>)
 800ca14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca18:	6353      	str	r3, [r2, #52]	; 0x34
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	60fb      	str	r3, [r7, #12]
 800ca1e:	4b0c      	ldr	r3, [pc, #48]	; (800ca50 <HAL_HCD_MspInit+0xbc>)
 800ca20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca22:	4a0b      	ldr	r2, [pc, #44]	; (800ca50 <HAL_HCD_MspInit+0xbc>)
 800ca24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ca28:	6453      	str	r3, [r2, #68]	; 0x44
 800ca2a:	4b09      	ldr	r3, [pc, #36]	; (800ca50 <HAL_HCD_MspInit+0xbc>)
 800ca2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ca32:	60fb      	str	r3, [r7, #12]
 800ca34:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800ca36:	2200      	movs	r2, #0
 800ca38:	2105      	movs	r1, #5
 800ca3a:	2043      	movs	r0, #67	; 0x43
 800ca3c:	f7f5 f9aa 	bl	8001d94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ca40:	2043      	movs	r0, #67	; 0x43
 800ca42:	f7f5 f9c3 	bl	8001dcc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ca46:	bf00      	nop
 800ca48:	3728      	adds	r7, #40	; 0x28
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	bd80      	pop	{r7, pc}
 800ca4e:	bf00      	nop
 800ca50:	40023800 	.word	0x40023800
 800ca54:	40020000 	.word	0x40020000

0800ca58 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b082      	sub	sp, #8
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ca66:	4618      	mov	r0, r3
 800ca68:	f7fb fe4f 	bl	800870a <USBH_LL_IncTimer>
}
 800ca6c:	bf00      	nop
 800ca6e:	3708      	adds	r7, #8
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}

0800ca74 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b082      	sub	sp, #8
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ca82:	4618      	mov	r0, r3
 800ca84:	f7fb fe93 	bl	80087ae <USBH_LL_Connect>
}
 800ca88:	bf00      	nop
 800ca8a:	3708      	adds	r7, #8
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	bd80      	pop	{r7, pc}

0800ca90 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b082      	sub	sp, #8
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ca9e:	4618      	mov	r0, r3
 800caa0:	f7fb fea8 	bl	80087f4 <USBH_LL_Disconnect>
}
 800caa4:	bf00      	nop
 800caa6:	3708      	adds	r7, #8
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bd80      	pop	{r7, pc}

0800caac <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800caac:	b580      	push	{r7, lr}
 800caae:	b082      	sub	sp, #8
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
 800cab4:	460b      	mov	r3, r1
 800cab6:	70fb      	strb	r3, [r7, #3]
 800cab8:	4613      	mov	r3, r2
 800caba:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cac2:	4618      	mov	r0, r3
 800cac4:	f7fb fedf 	bl	8008886 <USBH_LL_NotifyURBChange>
#endif
}
 800cac8:	bf00      	nop
 800caca:	3708      	adds	r7, #8
 800cacc:	46bd      	mov	sp, r7
 800cace:	bd80      	pop	{r7, pc}

0800cad0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b082      	sub	sp, #8
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cade:	4618      	mov	r0, r3
 800cae0:	f7fb fe3d 	bl	800875e <USBH_LL_PortEnabled>
}
 800cae4:	bf00      	nop
 800cae6:	3708      	adds	r7, #8
 800cae8:	46bd      	mov	sp, r7
 800caea:	bd80      	pop	{r7, pc}

0800caec <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b082      	sub	sp, #8
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cafa:	4618      	mov	r0, r3
 800cafc:	f7fb fe49 	bl	8008792 <USBH_LL_PortDisabled>
}
 800cb00:	bf00      	nop
 800cb02:	3708      	adds	r7, #8
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd80      	pop	{r7, pc}

0800cb08 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b082      	sub	sp, #8
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800cb16:	2b01      	cmp	r3, #1
 800cb18:	d12a      	bne.n	800cb70 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800cb1a:	4a18      	ldr	r2, [pc, #96]	; (800cb7c <USBH_LL_Init+0x74>)
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	4a15      	ldr	r2, [pc, #84]	; (800cb7c <USBH_LL_Init+0x74>)
 800cb26:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cb2a:	4b14      	ldr	r3, [pc, #80]	; (800cb7c <USBH_LL_Init+0x74>)
 800cb2c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800cb30:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800cb32:	4b12      	ldr	r3, [pc, #72]	; (800cb7c <USBH_LL_Init+0x74>)
 800cb34:	2208      	movs	r2, #8
 800cb36:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800cb38:	4b10      	ldr	r3, [pc, #64]	; (800cb7c <USBH_LL_Init+0x74>)
 800cb3a:	2201      	movs	r2, #1
 800cb3c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cb3e:	4b0f      	ldr	r3, [pc, #60]	; (800cb7c <USBH_LL_Init+0x74>)
 800cb40:	2200      	movs	r2, #0
 800cb42:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800cb44:	4b0d      	ldr	r3, [pc, #52]	; (800cb7c <USBH_LL_Init+0x74>)
 800cb46:	2202      	movs	r2, #2
 800cb48:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800cb4a:	4b0c      	ldr	r3, [pc, #48]	; (800cb7c <USBH_LL_Init+0x74>)
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800cb50:	480a      	ldr	r0, [pc, #40]	; (800cb7c <USBH_LL_Init+0x74>)
 800cb52:	f7f5 fb16 	bl	8002182 <HAL_HCD_Init>
 800cb56:	4603      	mov	r3, r0
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d001      	beq.n	800cb60 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800cb5c:	f7f4 f99a 	bl	8000e94 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800cb60:	4806      	ldr	r0, [pc, #24]	; (800cb7c <USBH_LL_Init+0x74>)
 800cb62:	f7f5 fefa 	bl	800295a <HAL_HCD_GetCurrentFrame>
 800cb66:	4603      	mov	r3, r0
 800cb68:	4619      	mov	r1, r3
 800cb6a:	6878      	ldr	r0, [r7, #4]
 800cb6c:	f7fb fdbe 	bl	80086ec <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800cb70:	2300      	movs	r3, #0
}
 800cb72:	4618      	mov	r0, r3
 800cb74:	3708      	adds	r7, #8
 800cb76:	46bd      	mov	sp, r7
 800cb78:	bd80      	pop	{r7, pc}
 800cb7a:	bf00      	nop
 800cb7c:	20005080 	.word	0x20005080

0800cb80 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b084      	sub	sp, #16
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb88:	2300      	movs	r3, #0
 800cb8a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cb96:	4618      	mov	r0, r3
 800cb98:	f7f5 fe69 	bl	800286e <HAL_HCD_Start>
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cba0:	7bfb      	ldrb	r3, [r7, #15]
 800cba2:	4618      	mov	r0, r3
 800cba4:	f000 f95c 	bl	800ce60 <USBH_Get_USB_Status>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cbac:	7bbb      	ldrb	r3, [r7, #14]
}
 800cbae:	4618      	mov	r0, r3
 800cbb0:	3710      	adds	r7, #16
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd80      	pop	{r7, pc}

0800cbb6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800cbb6:	b580      	push	{r7, lr}
 800cbb8:	b084      	sub	sp, #16
 800cbba:	af00      	add	r7, sp, #0
 800cbbc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cbcc:	4618      	mov	r0, r3
 800cbce:	f7f5 fe71 	bl	80028b4 <HAL_HCD_Stop>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cbd6:	7bfb      	ldrb	r3, [r7, #15]
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f000 f941 	bl	800ce60 <USBH_Get_USB_Status>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cbe2:	7bbb      	ldrb	r3, [r7, #14]
}
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	3710      	adds	r7, #16
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}

0800cbec <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b084      	sub	sp, #16
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800cbf4:	2301      	movs	r3, #1
 800cbf6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f7f5 feb9 	bl	8002976 <HAL_HCD_GetCurrentSpeed>
 800cc04:	4603      	mov	r3, r0
 800cc06:	2b02      	cmp	r3, #2
 800cc08:	d00c      	beq.n	800cc24 <USBH_LL_GetSpeed+0x38>
 800cc0a:	2b02      	cmp	r3, #2
 800cc0c:	d80d      	bhi.n	800cc2a <USBH_LL_GetSpeed+0x3e>
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d002      	beq.n	800cc18 <USBH_LL_GetSpeed+0x2c>
 800cc12:	2b01      	cmp	r3, #1
 800cc14:	d003      	beq.n	800cc1e <USBH_LL_GetSpeed+0x32>
 800cc16:	e008      	b.n	800cc2a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800cc18:	2300      	movs	r3, #0
 800cc1a:	73fb      	strb	r3, [r7, #15]
    break;
 800cc1c:	e008      	b.n	800cc30 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800cc1e:	2301      	movs	r3, #1
 800cc20:	73fb      	strb	r3, [r7, #15]
    break;
 800cc22:	e005      	b.n	800cc30 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800cc24:	2302      	movs	r3, #2
 800cc26:	73fb      	strb	r3, [r7, #15]
    break;
 800cc28:	e002      	b.n	800cc30 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800cc2a:	2301      	movs	r3, #1
 800cc2c:	73fb      	strb	r3, [r7, #15]
    break;
 800cc2e:	bf00      	nop
  }
  return  speed;
 800cc30:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	3710      	adds	r7, #16
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd80      	pop	{r7, pc}

0800cc3a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800cc3a:	b580      	push	{r7, lr}
 800cc3c:	b084      	sub	sp, #16
 800cc3e:	af00      	add	r7, sp, #0
 800cc40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc42:	2300      	movs	r3, #0
 800cc44:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cc46:	2300      	movs	r3, #0
 800cc48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cc50:	4618      	mov	r0, r3
 800cc52:	f7f5 fe4c 	bl	80028ee <HAL_HCD_ResetPort>
 800cc56:	4603      	mov	r3, r0
 800cc58:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cc5a:	7bfb      	ldrb	r3, [r7, #15]
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	f000 f8ff 	bl	800ce60 <USBH_Get_USB_Status>
 800cc62:	4603      	mov	r3, r0
 800cc64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc66:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc68:	4618      	mov	r0, r3
 800cc6a:	3710      	adds	r7, #16
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}

0800cc70 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b082      	sub	sp, #8
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
 800cc78:	460b      	mov	r3, r1
 800cc7a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cc82:	78fa      	ldrb	r2, [r7, #3]
 800cc84:	4611      	mov	r1, r2
 800cc86:	4618      	mov	r0, r3
 800cc88:	f7f5 fe53 	bl	8002932 <HAL_HCD_HC_GetXferCount>
 800cc8c:	4603      	mov	r3, r0
}
 800cc8e:	4618      	mov	r0, r3
 800cc90:	3708      	adds	r7, #8
 800cc92:	46bd      	mov	sp, r7
 800cc94:	bd80      	pop	{r7, pc}

0800cc96 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800cc96:	b590      	push	{r4, r7, lr}
 800cc98:	b089      	sub	sp, #36	; 0x24
 800cc9a:	af04      	add	r7, sp, #16
 800cc9c:	6078      	str	r0, [r7, #4]
 800cc9e:	4608      	mov	r0, r1
 800cca0:	4611      	mov	r1, r2
 800cca2:	461a      	mov	r2, r3
 800cca4:	4603      	mov	r3, r0
 800cca6:	70fb      	strb	r3, [r7, #3]
 800cca8:	460b      	mov	r3, r1
 800ccaa:	70bb      	strb	r3, [r7, #2]
 800ccac:	4613      	mov	r3, r2
 800ccae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ccbe:	787c      	ldrb	r4, [r7, #1]
 800ccc0:	78ba      	ldrb	r2, [r7, #2]
 800ccc2:	78f9      	ldrb	r1, [r7, #3]
 800ccc4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ccc6:	9302      	str	r3, [sp, #8]
 800ccc8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cccc:	9301      	str	r3, [sp, #4]
 800ccce:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ccd2:	9300      	str	r3, [sp, #0]
 800ccd4:	4623      	mov	r3, r4
 800ccd6:	f7f5 fab6 	bl	8002246 <HAL_HCD_HC_Init>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ccde:	7bfb      	ldrb	r3, [r7, #15]
 800cce0:	4618      	mov	r0, r3
 800cce2:	f000 f8bd 	bl	800ce60 <USBH_Get_USB_Status>
 800cce6:	4603      	mov	r3, r0
 800cce8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ccea:	7bbb      	ldrb	r3, [r7, #14]
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	3714      	adds	r7, #20
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	bd90      	pop	{r4, r7, pc}

0800ccf4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b084      	sub	sp, #16
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
 800ccfc:	460b      	mov	r3, r1
 800ccfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd00:	2300      	movs	r3, #0
 800cd02:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cd04:	2300      	movs	r3, #0
 800cd06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cd0e:	78fa      	ldrb	r2, [r7, #3]
 800cd10:	4611      	mov	r1, r2
 800cd12:	4618      	mov	r0, r3
 800cd14:	f7f5 fb26 	bl	8002364 <HAL_HCD_HC_Halt>
 800cd18:	4603      	mov	r3, r0
 800cd1a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cd1c:	7bfb      	ldrb	r3, [r7, #15]
 800cd1e:	4618      	mov	r0, r3
 800cd20:	f000 f89e 	bl	800ce60 <USBH_Get_USB_Status>
 800cd24:	4603      	mov	r3, r0
 800cd26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd28:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	3710      	adds	r7, #16
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	bd80      	pop	{r7, pc}

0800cd32 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800cd32:	b590      	push	{r4, r7, lr}
 800cd34:	b089      	sub	sp, #36	; 0x24
 800cd36:	af04      	add	r7, sp, #16
 800cd38:	6078      	str	r0, [r7, #4]
 800cd3a:	4608      	mov	r0, r1
 800cd3c:	4611      	mov	r1, r2
 800cd3e:	461a      	mov	r2, r3
 800cd40:	4603      	mov	r3, r0
 800cd42:	70fb      	strb	r3, [r7, #3]
 800cd44:	460b      	mov	r3, r1
 800cd46:	70bb      	strb	r3, [r7, #2]
 800cd48:	4613      	mov	r3, r2
 800cd4a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cd50:	2300      	movs	r3, #0
 800cd52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800cd5a:	787c      	ldrb	r4, [r7, #1]
 800cd5c:	78ba      	ldrb	r2, [r7, #2]
 800cd5e:	78f9      	ldrb	r1, [r7, #3]
 800cd60:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800cd64:	9303      	str	r3, [sp, #12]
 800cd66:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cd68:	9302      	str	r3, [sp, #8]
 800cd6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd6c:	9301      	str	r3, [sp, #4]
 800cd6e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cd72:	9300      	str	r3, [sp, #0]
 800cd74:	4623      	mov	r3, r4
 800cd76:	f7f5 fb19 	bl	80023ac <HAL_HCD_HC_SubmitRequest>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800cd7e:	7bfb      	ldrb	r3, [r7, #15]
 800cd80:	4618      	mov	r0, r3
 800cd82:	f000 f86d 	bl	800ce60 <USBH_Get_USB_Status>
 800cd86:	4603      	mov	r3, r0
 800cd88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd8a:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	3714      	adds	r7, #20
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bd90      	pop	{r4, r7, pc}

0800cd94 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b082      	sub	sp, #8
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
 800cd9c:	460b      	mov	r3, r1
 800cd9e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cda6:	78fa      	ldrb	r2, [r7, #3]
 800cda8:	4611      	mov	r1, r2
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f7f5 fdad 	bl	800290a <HAL_HCD_HC_GetURBState>
 800cdb0:	4603      	mov	r3, r0
}
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	3708      	adds	r7, #8
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}

0800cdba <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800cdba:	b580      	push	{r7, lr}
 800cdbc:	b082      	sub	sp, #8
 800cdbe:	af00      	add	r7, sp, #0
 800cdc0:	6078      	str	r0, [r7, #4]
 800cdc2:	460b      	mov	r3, r1
 800cdc4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800cdcc:	2b01      	cmp	r3, #1
 800cdce:	d103      	bne.n	800cdd8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800cdd0:	78fb      	ldrb	r3, [r7, #3]
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	f000 f870 	bl	800ceb8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800cdd8:	20c8      	movs	r0, #200	; 0xc8
 800cdda:	f7f4 feff 	bl	8001bdc <HAL_Delay>
  return USBH_OK;
 800cdde:	2300      	movs	r3, #0
}
 800cde0:	4618      	mov	r0, r3
 800cde2:	3708      	adds	r7, #8
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bd80      	pop	{r7, pc}

0800cde8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800cde8:	b480      	push	{r7}
 800cdea:	b085      	sub	sp, #20
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
 800cdf0:	460b      	mov	r3, r1
 800cdf2:	70fb      	strb	r3, [r7, #3]
 800cdf4:	4613      	mov	r3, r2
 800cdf6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cdfe:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ce00:	78fb      	ldrb	r3, [r7, #3]
 800ce02:	68fa      	ldr	r2, [r7, #12]
 800ce04:	212c      	movs	r1, #44	; 0x2c
 800ce06:	fb01 f303 	mul.w	r3, r1, r3
 800ce0a:	4413      	add	r3, r2
 800ce0c:	333b      	adds	r3, #59	; 0x3b
 800ce0e:	781b      	ldrb	r3, [r3, #0]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d009      	beq.n	800ce28 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ce14:	78fb      	ldrb	r3, [r7, #3]
 800ce16:	68fa      	ldr	r2, [r7, #12]
 800ce18:	212c      	movs	r1, #44	; 0x2c
 800ce1a:	fb01 f303 	mul.w	r3, r1, r3
 800ce1e:	4413      	add	r3, r2
 800ce20:	3354      	adds	r3, #84	; 0x54
 800ce22:	78ba      	ldrb	r2, [r7, #2]
 800ce24:	701a      	strb	r2, [r3, #0]
 800ce26:	e008      	b.n	800ce3a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800ce28:	78fb      	ldrb	r3, [r7, #3]
 800ce2a:	68fa      	ldr	r2, [r7, #12]
 800ce2c:	212c      	movs	r1, #44	; 0x2c
 800ce2e:	fb01 f303 	mul.w	r3, r1, r3
 800ce32:	4413      	add	r3, r2
 800ce34:	3355      	adds	r3, #85	; 0x55
 800ce36:	78ba      	ldrb	r2, [r7, #2]
 800ce38:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800ce3a:	2300      	movs	r3, #0
}
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	3714      	adds	r7, #20
 800ce40:	46bd      	mov	sp, r7
 800ce42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce46:	4770      	bx	lr

0800ce48 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b082      	sub	sp, #8
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ce50:	6878      	ldr	r0, [r7, #4]
 800ce52:	f7f4 fec3 	bl	8001bdc <HAL_Delay>
}
 800ce56:	bf00      	nop
 800ce58:	3708      	adds	r7, #8
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	bd80      	pop	{r7, pc}
	...

0800ce60 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ce60:	b480      	push	{r7}
 800ce62:	b085      	sub	sp, #20
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	4603      	mov	r3, r0
 800ce68:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ce6e:	79fb      	ldrb	r3, [r7, #7]
 800ce70:	2b03      	cmp	r3, #3
 800ce72:	d817      	bhi.n	800cea4 <USBH_Get_USB_Status+0x44>
 800ce74:	a201      	add	r2, pc, #4	; (adr r2, 800ce7c <USBH_Get_USB_Status+0x1c>)
 800ce76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce7a:	bf00      	nop
 800ce7c:	0800ce8d 	.word	0x0800ce8d
 800ce80:	0800ce93 	.word	0x0800ce93
 800ce84:	0800ce99 	.word	0x0800ce99
 800ce88:	0800ce9f 	.word	0x0800ce9f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	73fb      	strb	r3, [r7, #15]
    break;
 800ce90:	e00b      	b.n	800ceaa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ce92:	2302      	movs	r3, #2
 800ce94:	73fb      	strb	r3, [r7, #15]
    break;
 800ce96:	e008      	b.n	800ceaa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ce98:	2301      	movs	r3, #1
 800ce9a:	73fb      	strb	r3, [r7, #15]
    break;
 800ce9c:	e005      	b.n	800ceaa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ce9e:	2302      	movs	r3, #2
 800cea0:	73fb      	strb	r3, [r7, #15]
    break;
 800cea2:	e002      	b.n	800ceaa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800cea4:	2302      	movs	r3, #2
 800cea6:	73fb      	strb	r3, [r7, #15]
    break;
 800cea8:	bf00      	nop
  }
  return usb_status;
 800ceaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800ceac:	4618      	mov	r0, r3
 800ceae:	3714      	adds	r7, #20
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb6:	4770      	bx	lr

0800ceb8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b084      	sub	sp, #16
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	4603      	mov	r3, r0
 800cec0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800cec2:	79fb      	ldrb	r3, [r7, #7]
 800cec4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800cec6:	79fb      	ldrb	r3, [r7, #7]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d102      	bne.n	800ced2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800cecc:	2300      	movs	r3, #0
 800cece:	73fb      	strb	r3, [r7, #15]
 800ced0:	e001      	b.n	800ced6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800ced2:	2301      	movs	r3, #1
 800ced4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800ced6:	7bfb      	ldrb	r3, [r7, #15]
 800ced8:	461a      	mov	r2, r3
 800ceda:	2101      	movs	r1, #1
 800cedc:	4803      	ldr	r0, [pc, #12]	; (800ceec <MX_DriverVbusFS+0x34>)
 800cede:	f7f5 f937 	bl	8002150 <HAL_GPIO_WritePin>
}
 800cee2:	bf00      	nop
 800cee4:	3710      	adds	r7, #16
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}
 800ceea:	bf00      	nop
 800ceec:	40020800 	.word	0x40020800

0800cef0 <malloc>:
 800cef0:	4b02      	ldr	r3, [pc, #8]	; (800cefc <malloc+0xc>)
 800cef2:	4601      	mov	r1, r0
 800cef4:	6818      	ldr	r0, [r3, #0]
 800cef6:	f000 b82b 	b.w	800cf50 <_malloc_r>
 800cefa:	bf00      	nop
 800cefc:	2000007c 	.word	0x2000007c

0800cf00 <free>:
 800cf00:	4b02      	ldr	r3, [pc, #8]	; (800cf0c <free+0xc>)
 800cf02:	4601      	mov	r1, r0
 800cf04:	6818      	ldr	r0, [r3, #0]
 800cf06:	f000 b993 	b.w	800d230 <_free_r>
 800cf0a:	bf00      	nop
 800cf0c:	2000007c 	.word	0x2000007c

0800cf10 <sbrk_aligned>:
 800cf10:	b570      	push	{r4, r5, r6, lr}
 800cf12:	4e0e      	ldr	r6, [pc, #56]	; (800cf4c <sbrk_aligned+0x3c>)
 800cf14:	460c      	mov	r4, r1
 800cf16:	6831      	ldr	r1, [r6, #0]
 800cf18:	4605      	mov	r5, r0
 800cf1a:	b911      	cbnz	r1, 800cf22 <sbrk_aligned+0x12>
 800cf1c:	f000 f936 	bl	800d18c <_sbrk_r>
 800cf20:	6030      	str	r0, [r6, #0]
 800cf22:	4621      	mov	r1, r4
 800cf24:	4628      	mov	r0, r5
 800cf26:	f000 f931 	bl	800d18c <_sbrk_r>
 800cf2a:	1c43      	adds	r3, r0, #1
 800cf2c:	d00a      	beq.n	800cf44 <sbrk_aligned+0x34>
 800cf2e:	1cc4      	adds	r4, r0, #3
 800cf30:	f024 0403 	bic.w	r4, r4, #3
 800cf34:	42a0      	cmp	r0, r4
 800cf36:	d007      	beq.n	800cf48 <sbrk_aligned+0x38>
 800cf38:	1a21      	subs	r1, r4, r0
 800cf3a:	4628      	mov	r0, r5
 800cf3c:	f000 f926 	bl	800d18c <_sbrk_r>
 800cf40:	3001      	adds	r0, #1
 800cf42:	d101      	bne.n	800cf48 <sbrk_aligned+0x38>
 800cf44:	f04f 34ff 	mov.w	r4, #4294967295
 800cf48:	4620      	mov	r0, r4
 800cf4a:	bd70      	pop	{r4, r5, r6, pc}
 800cf4c:	20005388 	.word	0x20005388

0800cf50 <_malloc_r>:
 800cf50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf54:	1ccd      	adds	r5, r1, #3
 800cf56:	f025 0503 	bic.w	r5, r5, #3
 800cf5a:	3508      	adds	r5, #8
 800cf5c:	2d0c      	cmp	r5, #12
 800cf5e:	bf38      	it	cc
 800cf60:	250c      	movcc	r5, #12
 800cf62:	2d00      	cmp	r5, #0
 800cf64:	4607      	mov	r7, r0
 800cf66:	db01      	blt.n	800cf6c <_malloc_r+0x1c>
 800cf68:	42a9      	cmp	r1, r5
 800cf6a:	d905      	bls.n	800cf78 <_malloc_r+0x28>
 800cf6c:	230c      	movs	r3, #12
 800cf6e:	603b      	str	r3, [r7, #0]
 800cf70:	2600      	movs	r6, #0
 800cf72:	4630      	mov	r0, r6
 800cf74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf78:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d04c <_malloc_r+0xfc>
 800cf7c:	f000 f868 	bl	800d050 <__malloc_lock>
 800cf80:	f8d8 3000 	ldr.w	r3, [r8]
 800cf84:	461c      	mov	r4, r3
 800cf86:	bb5c      	cbnz	r4, 800cfe0 <_malloc_r+0x90>
 800cf88:	4629      	mov	r1, r5
 800cf8a:	4638      	mov	r0, r7
 800cf8c:	f7ff ffc0 	bl	800cf10 <sbrk_aligned>
 800cf90:	1c43      	adds	r3, r0, #1
 800cf92:	4604      	mov	r4, r0
 800cf94:	d155      	bne.n	800d042 <_malloc_r+0xf2>
 800cf96:	f8d8 4000 	ldr.w	r4, [r8]
 800cf9a:	4626      	mov	r6, r4
 800cf9c:	2e00      	cmp	r6, #0
 800cf9e:	d145      	bne.n	800d02c <_malloc_r+0xdc>
 800cfa0:	2c00      	cmp	r4, #0
 800cfa2:	d048      	beq.n	800d036 <_malloc_r+0xe6>
 800cfa4:	6823      	ldr	r3, [r4, #0]
 800cfa6:	4631      	mov	r1, r6
 800cfa8:	4638      	mov	r0, r7
 800cfaa:	eb04 0903 	add.w	r9, r4, r3
 800cfae:	f000 f8ed 	bl	800d18c <_sbrk_r>
 800cfb2:	4581      	cmp	r9, r0
 800cfb4:	d13f      	bne.n	800d036 <_malloc_r+0xe6>
 800cfb6:	6821      	ldr	r1, [r4, #0]
 800cfb8:	1a6d      	subs	r5, r5, r1
 800cfba:	4629      	mov	r1, r5
 800cfbc:	4638      	mov	r0, r7
 800cfbe:	f7ff ffa7 	bl	800cf10 <sbrk_aligned>
 800cfc2:	3001      	adds	r0, #1
 800cfc4:	d037      	beq.n	800d036 <_malloc_r+0xe6>
 800cfc6:	6823      	ldr	r3, [r4, #0]
 800cfc8:	442b      	add	r3, r5
 800cfca:	6023      	str	r3, [r4, #0]
 800cfcc:	f8d8 3000 	ldr.w	r3, [r8]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d038      	beq.n	800d046 <_malloc_r+0xf6>
 800cfd4:	685a      	ldr	r2, [r3, #4]
 800cfd6:	42a2      	cmp	r2, r4
 800cfd8:	d12b      	bne.n	800d032 <_malloc_r+0xe2>
 800cfda:	2200      	movs	r2, #0
 800cfdc:	605a      	str	r2, [r3, #4]
 800cfde:	e00f      	b.n	800d000 <_malloc_r+0xb0>
 800cfe0:	6822      	ldr	r2, [r4, #0]
 800cfe2:	1b52      	subs	r2, r2, r5
 800cfe4:	d41f      	bmi.n	800d026 <_malloc_r+0xd6>
 800cfe6:	2a0b      	cmp	r2, #11
 800cfe8:	d917      	bls.n	800d01a <_malloc_r+0xca>
 800cfea:	1961      	adds	r1, r4, r5
 800cfec:	42a3      	cmp	r3, r4
 800cfee:	6025      	str	r5, [r4, #0]
 800cff0:	bf18      	it	ne
 800cff2:	6059      	strne	r1, [r3, #4]
 800cff4:	6863      	ldr	r3, [r4, #4]
 800cff6:	bf08      	it	eq
 800cff8:	f8c8 1000 	streq.w	r1, [r8]
 800cffc:	5162      	str	r2, [r4, r5]
 800cffe:	604b      	str	r3, [r1, #4]
 800d000:	4638      	mov	r0, r7
 800d002:	f104 060b 	add.w	r6, r4, #11
 800d006:	f000 f829 	bl	800d05c <__malloc_unlock>
 800d00a:	f026 0607 	bic.w	r6, r6, #7
 800d00e:	1d23      	adds	r3, r4, #4
 800d010:	1af2      	subs	r2, r6, r3
 800d012:	d0ae      	beq.n	800cf72 <_malloc_r+0x22>
 800d014:	1b9b      	subs	r3, r3, r6
 800d016:	50a3      	str	r3, [r4, r2]
 800d018:	e7ab      	b.n	800cf72 <_malloc_r+0x22>
 800d01a:	42a3      	cmp	r3, r4
 800d01c:	6862      	ldr	r2, [r4, #4]
 800d01e:	d1dd      	bne.n	800cfdc <_malloc_r+0x8c>
 800d020:	f8c8 2000 	str.w	r2, [r8]
 800d024:	e7ec      	b.n	800d000 <_malloc_r+0xb0>
 800d026:	4623      	mov	r3, r4
 800d028:	6864      	ldr	r4, [r4, #4]
 800d02a:	e7ac      	b.n	800cf86 <_malloc_r+0x36>
 800d02c:	4634      	mov	r4, r6
 800d02e:	6876      	ldr	r6, [r6, #4]
 800d030:	e7b4      	b.n	800cf9c <_malloc_r+0x4c>
 800d032:	4613      	mov	r3, r2
 800d034:	e7cc      	b.n	800cfd0 <_malloc_r+0x80>
 800d036:	230c      	movs	r3, #12
 800d038:	603b      	str	r3, [r7, #0]
 800d03a:	4638      	mov	r0, r7
 800d03c:	f000 f80e 	bl	800d05c <__malloc_unlock>
 800d040:	e797      	b.n	800cf72 <_malloc_r+0x22>
 800d042:	6025      	str	r5, [r4, #0]
 800d044:	e7dc      	b.n	800d000 <_malloc_r+0xb0>
 800d046:	605b      	str	r3, [r3, #4]
 800d048:	deff      	udf	#255	; 0xff
 800d04a:	bf00      	nop
 800d04c:	20005384 	.word	0x20005384

0800d050 <__malloc_lock>:
 800d050:	4801      	ldr	r0, [pc, #4]	; (800d058 <__malloc_lock+0x8>)
 800d052:	f000 b8d5 	b.w	800d200 <__retarget_lock_acquire_recursive>
 800d056:	bf00      	nop
 800d058:	200054c8 	.word	0x200054c8

0800d05c <__malloc_unlock>:
 800d05c:	4801      	ldr	r0, [pc, #4]	; (800d064 <__malloc_unlock+0x8>)
 800d05e:	f000 b8d0 	b.w	800d202 <__retarget_lock_release_recursive>
 800d062:	bf00      	nop
 800d064:	200054c8 	.word	0x200054c8

0800d068 <sniprintf>:
 800d068:	b40c      	push	{r2, r3}
 800d06a:	b530      	push	{r4, r5, lr}
 800d06c:	4b17      	ldr	r3, [pc, #92]	; (800d0cc <sniprintf+0x64>)
 800d06e:	1e0c      	subs	r4, r1, #0
 800d070:	681d      	ldr	r5, [r3, #0]
 800d072:	b09d      	sub	sp, #116	; 0x74
 800d074:	da08      	bge.n	800d088 <sniprintf+0x20>
 800d076:	238b      	movs	r3, #139	; 0x8b
 800d078:	602b      	str	r3, [r5, #0]
 800d07a:	f04f 30ff 	mov.w	r0, #4294967295
 800d07e:	b01d      	add	sp, #116	; 0x74
 800d080:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d084:	b002      	add	sp, #8
 800d086:	4770      	bx	lr
 800d088:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d08c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d090:	bf14      	ite	ne
 800d092:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d096:	4623      	moveq	r3, r4
 800d098:	9304      	str	r3, [sp, #16]
 800d09a:	9307      	str	r3, [sp, #28]
 800d09c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d0a0:	9002      	str	r0, [sp, #8]
 800d0a2:	9006      	str	r0, [sp, #24]
 800d0a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d0a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d0aa:	ab21      	add	r3, sp, #132	; 0x84
 800d0ac:	a902      	add	r1, sp, #8
 800d0ae:	4628      	mov	r0, r5
 800d0b0:	9301      	str	r3, [sp, #4]
 800d0b2:	f000 f963 	bl	800d37c <_svfiprintf_r>
 800d0b6:	1c43      	adds	r3, r0, #1
 800d0b8:	bfbc      	itt	lt
 800d0ba:	238b      	movlt	r3, #139	; 0x8b
 800d0bc:	602b      	strlt	r3, [r5, #0]
 800d0be:	2c00      	cmp	r4, #0
 800d0c0:	d0dd      	beq.n	800d07e <sniprintf+0x16>
 800d0c2:	9b02      	ldr	r3, [sp, #8]
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	701a      	strb	r2, [r3, #0]
 800d0c8:	e7d9      	b.n	800d07e <sniprintf+0x16>
 800d0ca:	bf00      	nop
 800d0cc:	2000007c 	.word	0x2000007c

0800d0d0 <memset>:
 800d0d0:	4402      	add	r2, r0
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	4293      	cmp	r3, r2
 800d0d6:	d100      	bne.n	800d0da <memset+0xa>
 800d0d8:	4770      	bx	lr
 800d0da:	f803 1b01 	strb.w	r1, [r3], #1
 800d0de:	e7f9      	b.n	800d0d4 <memset+0x4>

0800d0e0 <_reclaim_reent>:
 800d0e0:	4b29      	ldr	r3, [pc, #164]	; (800d188 <_reclaim_reent+0xa8>)
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	4283      	cmp	r3, r0
 800d0e6:	b570      	push	{r4, r5, r6, lr}
 800d0e8:	4604      	mov	r4, r0
 800d0ea:	d04b      	beq.n	800d184 <_reclaim_reent+0xa4>
 800d0ec:	69c3      	ldr	r3, [r0, #28]
 800d0ee:	b143      	cbz	r3, 800d102 <_reclaim_reent+0x22>
 800d0f0:	68db      	ldr	r3, [r3, #12]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d144      	bne.n	800d180 <_reclaim_reent+0xa0>
 800d0f6:	69e3      	ldr	r3, [r4, #28]
 800d0f8:	6819      	ldr	r1, [r3, #0]
 800d0fa:	b111      	cbz	r1, 800d102 <_reclaim_reent+0x22>
 800d0fc:	4620      	mov	r0, r4
 800d0fe:	f000 f897 	bl	800d230 <_free_r>
 800d102:	6961      	ldr	r1, [r4, #20]
 800d104:	b111      	cbz	r1, 800d10c <_reclaim_reent+0x2c>
 800d106:	4620      	mov	r0, r4
 800d108:	f000 f892 	bl	800d230 <_free_r>
 800d10c:	69e1      	ldr	r1, [r4, #28]
 800d10e:	b111      	cbz	r1, 800d116 <_reclaim_reent+0x36>
 800d110:	4620      	mov	r0, r4
 800d112:	f000 f88d 	bl	800d230 <_free_r>
 800d116:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d118:	b111      	cbz	r1, 800d120 <_reclaim_reent+0x40>
 800d11a:	4620      	mov	r0, r4
 800d11c:	f000 f888 	bl	800d230 <_free_r>
 800d120:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d122:	b111      	cbz	r1, 800d12a <_reclaim_reent+0x4a>
 800d124:	4620      	mov	r0, r4
 800d126:	f000 f883 	bl	800d230 <_free_r>
 800d12a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d12c:	b111      	cbz	r1, 800d134 <_reclaim_reent+0x54>
 800d12e:	4620      	mov	r0, r4
 800d130:	f000 f87e 	bl	800d230 <_free_r>
 800d134:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d136:	b111      	cbz	r1, 800d13e <_reclaim_reent+0x5e>
 800d138:	4620      	mov	r0, r4
 800d13a:	f000 f879 	bl	800d230 <_free_r>
 800d13e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d140:	b111      	cbz	r1, 800d148 <_reclaim_reent+0x68>
 800d142:	4620      	mov	r0, r4
 800d144:	f000 f874 	bl	800d230 <_free_r>
 800d148:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d14a:	b111      	cbz	r1, 800d152 <_reclaim_reent+0x72>
 800d14c:	4620      	mov	r0, r4
 800d14e:	f000 f86f 	bl	800d230 <_free_r>
 800d152:	6a23      	ldr	r3, [r4, #32]
 800d154:	b1b3      	cbz	r3, 800d184 <_reclaim_reent+0xa4>
 800d156:	4620      	mov	r0, r4
 800d158:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d15c:	4718      	bx	r3
 800d15e:	5949      	ldr	r1, [r1, r5]
 800d160:	b941      	cbnz	r1, 800d174 <_reclaim_reent+0x94>
 800d162:	3504      	adds	r5, #4
 800d164:	69e3      	ldr	r3, [r4, #28]
 800d166:	2d80      	cmp	r5, #128	; 0x80
 800d168:	68d9      	ldr	r1, [r3, #12]
 800d16a:	d1f8      	bne.n	800d15e <_reclaim_reent+0x7e>
 800d16c:	4620      	mov	r0, r4
 800d16e:	f000 f85f 	bl	800d230 <_free_r>
 800d172:	e7c0      	b.n	800d0f6 <_reclaim_reent+0x16>
 800d174:	680e      	ldr	r6, [r1, #0]
 800d176:	4620      	mov	r0, r4
 800d178:	f000 f85a 	bl	800d230 <_free_r>
 800d17c:	4631      	mov	r1, r6
 800d17e:	e7ef      	b.n	800d160 <_reclaim_reent+0x80>
 800d180:	2500      	movs	r5, #0
 800d182:	e7ef      	b.n	800d164 <_reclaim_reent+0x84>
 800d184:	bd70      	pop	{r4, r5, r6, pc}
 800d186:	bf00      	nop
 800d188:	2000007c 	.word	0x2000007c

0800d18c <_sbrk_r>:
 800d18c:	b538      	push	{r3, r4, r5, lr}
 800d18e:	4d06      	ldr	r5, [pc, #24]	; (800d1a8 <_sbrk_r+0x1c>)
 800d190:	2300      	movs	r3, #0
 800d192:	4604      	mov	r4, r0
 800d194:	4608      	mov	r0, r1
 800d196:	602b      	str	r3, [r5, #0]
 800d198:	f7f4 f8de 	bl	8001358 <_sbrk>
 800d19c:	1c43      	adds	r3, r0, #1
 800d19e:	d102      	bne.n	800d1a6 <_sbrk_r+0x1a>
 800d1a0:	682b      	ldr	r3, [r5, #0]
 800d1a2:	b103      	cbz	r3, 800d1a6 <_sbrk_r+0x1a>
 800d1a4:	6023      	str	r3, [r4, #0]
 800d1a6:	bd38      	pop	{r3, r4, r5, pc}
 800d1a8:	200054c4 	.word	0x200054c4

0800d1ac <__errno>:
 800d1ac:	4b01      	ldr	r3, [pc, #4]	; (800d1b4 <__errno+0x8>)
 800d1ae:	6818      	ldr	r0, [r3, #0]
 800d1b0:	4770      	bx	lr
 800d1b2:	bf00      	nop
 800d1b4:	2000007c 	.word	0x2000007c

0800d1b8 <__libc_init_array>:
 800d1b8:	b570      	push	{r4, r5, r6, lr}
 800d1ba:	4d0d      	ldr	r5, [pc, #52]	; (800d1f0 <__libc_init_array+0x38>)
 800d1bc:	4c0d      	ldr	r4, [pc, #52]	; (800d1f4 <__libc_init_array+0x3c>)
 800d1be:	1b64      	subs	r4, r4, r5
 800d1c0:	10a4      	asrs	r4, r4, #2
 800d1c2:	2600      	movs	r6, #0
 800d1c4:	42a6      	cmp	r6, r4
 800d1c6:	d109      	bne.n	800d1dc <__libc_init_array+0x24>
 800d1c8:	4d0b      	ldr	r5, [pc, #44]	; (800d1f8 <__libc_init_array+0x40>)
 800d1ca:	4c0c      	ldr	r4, [pc, #48]	; (800d1fc <__libc_init_array+0x44>)
 800d1cc:	f000 fbb6 	bl	800d93c <_init>
 800d1d0:	1b64      	subs	r4, r4, r5
 800d1d2:	10a4      	asrs	r4, r4, #2
 800d1d4:	2600      	movs	r6, #0
 800d1d6:	42a6      	cmp	r6, r4
 800d1d8:	d105      	bne.n	800d1e6 <__libc_init_array+0x2e>
 800d1da:	bd70      	pop	{r4, r5, r6, pc}
 800d1dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1e0:	4798      	blx	r3
 800d1e2:	3601      	adds	r6, #1
 800d1e4:	e7ee      	b.n	800d1c4 <__libc_init_array+0xc>
 800d1e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1ea:	4798      	blx	r3
 800d1ec:	3601      	adds	r6, #1
 800d1ee:	e7f2      	b.n	800d1d6 <__libc_init_array+0x1e>
 800d1f0:	0800fb00 	.word	0x0800fb00
 800d1f4:	0800fb00 	.word	0x0800fb00
 800d1f8:	0800fb00 	.word	0x0800fb00
 800d1fc:	0800fb04 	.word	0x0800fb04

0800d200 <__retarget_lock_acquire_recursive>:
 800d200:	4770      	bx	lr

0800d202 <__retarget_lock_release_recursive>:
 800d202:	4770      	bx	lr

0800d204 <strcpy>:
 800d204:	4603      	mov	r3, r0
 800d206:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d20a:	f803 2b01 	strb.w	r2, [r3], #1
 800d20e:	2a00      	cmp	r2, #0
 800d210:	d1f9      	bne.n	800d206 <strcpy+0x2>
 800d212:	4770      	bx	lr

0800d214 <memcpy>:
 800d214:	440a      	add	r2, r1
 800d216:	4291      	cmp	r1, r2
 800d218:	f100 33ff 	add.w	r3, r0, #4294967295
 800d21c:	d100      	bne.n	800d220 <memcpy+0xc>
 800d21e:	4770      	bx	lr
 800d220:	b510      	push	{r4, lr}
 800d222:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d226:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d22a:	4291      	cmp	r1, r2
 800d22c:	d1f9      	bne.n	800d222 <memcpy+0xe>
 800d22e:	bd10      	pop	{r4, pc}

0800d230 <_free_r>:
 800d230:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d232:	2900      	cmp	r1, #0
 800d234:	d044      	beq.n	800d2c0 <_free_r+0x90>
 800d236:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d23a:	9001      	str	r0, [sp, #4]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	f1a1 0404 	sub.w	r4, r1, #4
 800d242:	bfb8      	it	lt
 800d244:	18e4      	addlt	r4, r4, r3
 800d246:	f7ff ff03 	bl	800d050 <__malloc_lock>
 800d24a:	4a1e      	ldr	r2, [pc, #120]	; (800d2c4 <_free_r+0x94>)
 800d24c:	9801      	ldr	r0, [sp, #4]
 800d24e:	6813      	ldr	r3, [r2, #0]
 800d250:	b933      	cbnz	r3, 800d260 <_free_r+0x30>
 800d252:	6063      	str	r3, [r4, #4]
 800d254:	6014      	str	r4, [r2, #0]
 800d256:	b003      	add	sp, #12
 800d258:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d25c:	f7ff befe 	b.w	800d05c <__malloc_unlock>
 800d260:	42a3      	cmp	r3, r4
 800d262:	d908      	bls.n	800d276 <_free_r+0x46>
 800d264:	6825      	ldr	r5, [r4, #0]
 800d266:	1961      	adds	r1, r4, r5
 800d268:	428b      	cmp	r3, r1
 800d26a:	bf01      	itttt	eq
 800d26c:	6819      	ldreq	r1, [r3, #0]
 800d26e:	685b      	ldreq	r3, [r3, #4]
 800d270:	1949      	addeq	r1, r1, r5
 800d272:	6021      	streq	r1, [r4, #0]
 800d274:	e7ed      	b.n	800d252 <_free_r+0x22>
 800d276:	461a      	mov	r2, r3
 800d278:	685b      	ldr	r3, [r3, #4]
 800d27a:	b10b      	cbz	r3, 800d280 <_free_r+0x50>
 800d27c:	42a3      	cmp	r3, r4
 800d27e:	d9fa      	bls.n	800d276 <_free_r+0x46>
 800d280:	6811      	ldr	r1, [r2, #0]
 800d282:	1855      	adds	r5, r2, r1
 800d284:	42a5      	cmp	r5, r4
 800d286:	d10b      	bne.n	800d2a0 <_free_r+0x70>
 800d288:	6824      	ldr	r4, [r4, #0]
 800d28a:	4421      	add	r1, r4
 800d28c:	1854      	adds	r4, r2, r1
 800d28e:	42a3      	cmp	r3, r4
 800d290:	6011      	str	r1, [r2, #0]
 800d292:	d1e0      	bne.n	800d256 <_free_r+0x26>
 800d294:	681c      	ldr	r4, [r3, #0]
 800d296:	685b      	ldr	r3, [r3, #4]
 800d298:	6053      	str	r3, [r2, #4]
 800d29a:	440c      	add	r4, r1
 800d29c:	6014      	str	r4, [r2, #0]
 800d29e:	e7da      	b.n	800d256 <_free_r+0x26>
 800d2a0:	d902      	bls.n	800d2a8 <_free_r+0x78>
 800d2a2:	230c      	movs	r3, #12
 800d2a4:	6003      	str	r3, [r0, #0]
 800d2a6:	e7d6      	b.n	800d256 <_free_r+0x26>
 800d2a8:	6825      	ldr	r5, [r4, #0]
 800d2aa:	1961      	adds	r1, r4, r5
 800d2ac:	428b      	cmp	r3, r1
 800d2ae:	bf04      	itt	eq
 800d2b0:	6819      	ldreq	r1, [r3, #0]
 800d2b2:	685b      	ldreq	r3, [r3, #4]
 800d2b4:	6063      	str	r3, [r4, #4]
 800d2b6:	bf04      	itt	eq
 800d2b8:	1949      	addeq	r1, r1, r5
 800d2ba:	6021      	streq	r1, [r4, #0]
 800d2bc:	6054      	str	r4, [r2, #4]
 800d2be:	e7ca      	b.n	800d256 <_free_r+0x26>
 800d2c0:	b003      	add	sp, #12
 800d2c2:	bd30      	pop	{r4, r5, pc}
 800d2c4:	20005384 	.word	0x20005384

0800d2c8 <__ssputs_r>:
 800d2c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2cc:	688e      	ldr	r6, [r1, #8]
 800d2ce:	461f      	mov	r7, r3
 800d2d0:	42be      	cmp	r6, r7
 800d2d2:	680b      	ldr	r3, [r1, #0]
 800d2d4:	4682      	mov	sl, r0
 800d2d6:	460c      	mov	r4, r1
 800d2d8:	4690      	mov	r8, r2
 800d2da:	d82c      	bhi.n	800d336 <__ssputs_r+0x6e>
 800d2dc:	898a      	ldrh	r2, [r1, #12]
 800d2de:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d2e2:	d026      	beq.n	800d332 <__ssputs_r+0x6a>
 800d2e4:	6965      	ldr	r5, [r4, #20]
 800d2e6:	6909      	ldr	r1, [r1, #16]
 800d2e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d2ec:	eba3 0901 	sub.w	r9, r3, r1
 800d2f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d2f4:	1c7b      	adds	r3, r7, #1
 800d2f6:	444b      	add	r3, r9
 800d2f8:	106d      	asrs	r5, r5, #1
 800d2fa:	429d      	cmp	r5, r3
 800d2fc:	bf38      	it	cc
 800d2fe:	461d      	movcc	r5, r3
 800d300:	0553      	lsls	r3, r2, #21
 800d302:	d527      	bpl.n	800d354 <__ssputs_r+0x8c>
 800d304:	4629      	mov	r1, r5
 800d306:	f7ff fe23 	bl	800cf50 <_malloc_r>
 800d30a:	4606      	mov	r6, r0
 800d30c:	b360      	cbz	r0, 800d368 <__ssputs_r+0xa0>
 800d30e:	6921      	ldr	r1, [r4, #16]
 800d310:	464a      	mov	r2, r9
 800d312:	f7ff ff7f 	bl	800d214 <memcpy>
 800d316:	89a3      	ldrh	r3, [r4, #12]
 800d318:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d31c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d320:	81a3      	strh	r3, [r4, #12]
 800d322:	6126      	str	r6, [r4, #16]
 800d324:	6165      	str	r5, [r4, #20]
 800d326:	444e      	add	r6, r9
 800d328:	eba5 0509 	sub.w	r5, r5, r9
 800d32c:	6026      	str	r6, [r4, #0]
 800d32e:	60a5      	str	r5, [r4, #8]
 800d330:	463e      	mov	r6, r7
 800d332:	42be      	cmp	r6, r7
 800d334:	d900      	bls.n	800d338 <__ssputs_r+0x70>
 800d336:	463e      	mov	r6, r7
 800d338:	6820      	ldr	r0, [r4, #0]
 800d33a:	4632      	mov	r2, r6
 800d33c:	4641      	mov	r1, r8
 800d33e:	f000 faab 	bl	800d898 <memmove>
 800d342:	68a3      	ldr	r3, [r4, #8]
 800d344:	1b9b      	subs	r3, r3, r6
 800d346:	60a3      	str	r3, [r4, #8]
 800d348:	6823      	ldr	r3, [r4, #0]
 800d34a:	4433      	add	r3, r6
 800d34c:	6023      	str	r3, [r4, #0]
 800d34e:	2000      	movs	r0, #0
 800d350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d354:	462a      	mov	r2, r5
 800d356:	f000 fab9 	bl	800d8cc <_realloc_r>
 800d35a:	4606      	mov	r6, r0
 800d35c:	2800      	cmp	r0, #0
 800d35e:	d1e0      	bne.n	800d322 <__ssputs_r+0x5a>
 800d360:	6921      	ldr	r1, [r4, #16]
 800d362:	4650      	mov	r0, sl
 800d364:	f7ff ff64 	bl	800d230 <_free_r>
 800d368:	230c      	movs	r3, #12
 800d36a:	f8ca 3000 	str.w	r3, [sl]
 800d36e:	89a3      	ldrh	r3, [r4, #12]
 800d370:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d374:	81a3      	strh	r3, [r4, #12]
 800d376:	f04f 30ff 	mov.w	r0, #4294967295
 800d37a:	e7e9      	b.n	800d350 <__ssputs_r+0x88>

0800d37c <_svfiprintf_r>:
 800d37c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d380:	4698      	mov	r8, r3
 800d382:	898b      	ldrh	r3, [r1, #12]
 800d384:	061b      	lsls	r3, r3, #24
 800d386:	b09d      	sub	sp, #116	; 0x74
 800d388:	4607      	mov	r7, r0
 800d38a:	460d      	mov	r5, r1
 800d38c:	4614      	mov	r4, r2
 800d38e:	d50e      	bpl.n	800d3ae <_svfiprintf_r+0x32>
 800d390:	690b      	ldr	r3, [r1, #16]
 800d392:	b963      	cbnz	r3, 800d3ae <_svfiprintf_r+0x32>
 800d394:	2140      	movs	r1, #64	; 0x40
 800d396:	f7ff fddb 	bl	800cf50 <_malloc_r>
 800d39a:	6028      	str	r0, [r5, #0]
 800d39c:	6128      	str	r0, [r5, #16]
 800d39e:	b920      	cbnz	r0, 800d3aa <_svfiprintf_r+0x2e>
 800d3a0:	230c      	movs	r3, #12
 800d3a2:	603b      	str	r3, [r7, #0]
 800d3a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d3a8:	e0d0      	b.n	800d54c <_svfiprintf_r+0x1d0>
 800d3aa:	2340      	movs	r3, #64	; 0x40
 800d3ac:	616b      	str	r3, [r5, #20]
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	9309      	str	r3, [sp, #36]	; 0x24
 800d3b2:	2320      	movs	r3, #32
 800d3b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d3b8:	f8cd 800c 	str.w	r8, [sp, #12]
 800d3bc:	2330      	movs	r3, #48	; 0x30
 800d3be:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d564 <_svfiprintf_r+0x1e8>
 800d3c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d3c6:	f04f 0901 	mov.w	r9, #1
 800d3ca:	4623      	mov	r3, r4
 800d3cc:	469a      	mov	sl, r3
 800d3ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3d2:	b10a      	cbz	r2, 800d3d8 <_svfiprintf_r+0x5c>
 800d3d4:	2a25      	cmp	r2, #37	; 0x25
 800d3d6:	d1f9      	bne.n	800d3cc <_svfiprintf_r+0x50>
 800d3d8:	ebba 0b04 	subs.w	fp, sl, r4
 800d3dc:	d00b      	beq.n	800d3f6 <_svfiprintf_r+0x7a>
 800d3de:	465b      	mov	r3, fp
 800d3e0:	4622      	mov	r2, r4
 800d3e2:	4629      	mov	r1, r5
 800d3e4:	4638      	mov	r0, r7
 800d3e6:	f7ff ff6f 	bl	800d2c8 <__ssputs_r>
 800d3ea:	3001      	adds	r0, #1
 800d3ec:	f000 80a9 	beq.w	800d542 <_svfiprintf_r+0x1c6>
 800d3f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d3f2:	445a      	add	r2, fp
 800d3f4:	9209      	str	r2, [sp, #36]	; 0x24
 800d3f6:	f89a 3000 	ldrb.w	r3, [sl]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	f000 80a1 	beq.w	800d542 <_svfiprintf_r+0x1c6>
 800d400:	2300      	movs	r3, #0
 800d402:	f04f 32ff 	mov.w	r2, #4294967295
 800d406:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d40a:	f10a 0a01 	add.w	sl, sl, #1
 800d40e:	9304      	str	r3, [sp, #16]
 800d410:	9307      	str	r3, [sp, #28]
 800d412:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d416:	931a      	str	r3, [sp, #104]	; 0x68
 800d418:	4654      	mov	r4, sl
 800d41a:	2205      	movs	r2, #5
 800d41c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d420:	4850      	ldr	r0, [pc, #320]	; (800d564 <_svfiprintf_r+0x1e8>)
 800d422:	f7f2 fee5 	bl	80001f0 <memchr>
 800d426:	9a04      	ldr	r2, [sp, #16]
 800d428:	b9d8      	cbnz	r0, 800d462 <_svfiprintf_r+0xe6>
 800d42a:	06d0      	lsls	r0, r2, #27
 800d42c:	bf44      	itt	mi
 800d42e:	2320      	movmi	r3, #32
 800d430:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d434:	0711      	lsls	r1, r2, #28
 800d436:	bf44      	itt	mi
 800d438:	232b      	movmi	r3, #43	; 0x2b
 800d43a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d43e:	f89a 3000 	ldrb.w	r3, [sl]
 800d442:	2b2a      	cmp	r3, #42	; 0x2a
 800d444:	d015      	beq.n	800d472 <_svfiprintf_r+0xf6>
 800d446:	9a07      	ldr	r2, [sp, #28]
 800d448:	4654      	mov	r4, sl
 800d44a:	2000      	movs	r0, #0
 800d44c:	f04f 0c0a 	mov.w	ip, #10
 800d450:	4621      	mov	r1, r4
 800d452:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d456:	3b30      	subs	r3, #48	; 0x30
 800d458:	2b09      	cmp	r3, #9
 800d45a:	d94d      	bls.n	800d4f8 <_svfiprintf_r+0x17c>
 800d45c:	b1b0      	cbz	r0, 800d48c <_svfiprintf_r+0x110>
 800d45e:	9207      	str	r2, [sp, #28]
 800d460:	e014      	b.n	800d48c <_svfiprintf_r+0x110>
 800d462:	eba0 0308 	sub.w	r3, r0, r8
 800d466:	fa09 f303 	lsl.w	r3, r9, r3
 800d46a:	4313      	orrs	r3, r2
 800d46c:	9304      	str	r3, [sp, #16]
 800d46e:	46a2      	mov	sl, r4
 800d470:	e7d2      	b.n	800d418 <_svfiprintf_r+0x9c>
 800d472:	9b03      	ldr	r3, [sp, #12]
 800d474:	1d19      	adds	r1, r3, #4
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	9103      	str	r1, [sp, #12]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	bfbb      	ittet	lt
 800d47e:	425b      	neglt	r3, r3
 800d480:	f042 0202 	orrlt.w	r2, r2, #2
 800d484:	9307      	strge	r3, [sp, #28]
 800d486:	9307      	strlt	r3, [sp, #28]
 800d488:	bfb8      	it	lt
 800d48a:	9204      	strlt	r2, [sp, #16]
 800d48c:	7823      	ldrb	r3, [r4, #0]
 800d48e:	2b2e      	cmp	r3, #46	; 0x2e
 800d490:	d10c      	bne.n	800d4ac <_svfiprintf_r+0x130>
 800d492:	7863      	ldrb	r3, [r4, #1]
 800d494:	2b2a      	cmp	r3, #42	; 0x2a
 800d496:	d134      	bne.n	800d502 <_svfiprintf_r+0x186>
 800d498:	9b03      	ldr	r3, [sp, #12]
 800d49a:	1d1a      	adds	r2, r3, #4
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	9203      	str	r2, [sp, #12]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	bfb8      	it	lt
 800d4a4:	f04f 33ff 	movlt.w	r3, #4294967295
 800d4a8:	3402      	adds	r4, #2
 800d4aa:	9305      	str	r3, [sp, #20]
 800d4ac:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d574 <_svfiprintf_r+0x1f8>
 800d4b0:	7821      	ldrb	r1, [r4, #0]
 800d4b2:	2203      	movs	r2, #3
 800d4b4:	4650      	mov	r0, sl
 800d4b6:	f7f2 fe9b 	bl	80001f0 <memchr>
 800d4ba:	b138      	cbz	r0, 800d4cc <_svfiprintf_r+0x150>
 800d4bc:	9b04      	ldr	r3, [sp, #16]
 800d4be:	eba0 000a 	sub.w	r0, r0, sl
 800d4c2:	2240      	movs	r2, #64	; 0x40
 800d4c4:	4082      	lsls	r2, r0
 800d4c6:	4313      	orrs	r3, r2
 800d4c8:	3401      	adds	r4, #1
 800d4ca:	9304      	str	r3, [sp, #16]
 800d4cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4d0:	4825      	ldr	r0, [pc, #148]	; (800d568 <_svfiprintf_r+0x1ec>)
 800d4d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d4d6:	2206      	movs	r2, #6
 800d4d8:	f7f2 fe8a 	bl	80001f0 <memchr>
 800d4dc:	2800      	cmp	r0, #0
 800d4de:	d038      	beq.n	800d552 <_svfiprintf_r+0x1d6>
 800d4e0:	4b22      	ldr	r3, [pc, #136]	; (800d56c <_svfiprintf_r+0x1f0>)
 800d4e2:	bb1b      	cbnz	r3, 800d52c <_svfiprintf_r+0x1b0>
 800d4e4:	9b03      	ldr	r3, [sp, #12]
 800d4e6:	3307      	adds	r3, #7
 800d4e8:	f023 0307 	bic.w	r3, r3, #7
 800d4ec:	3308      	adds	r3, #8
 800d4ee:	9303      	str	r3, [sp, #12]
 800d4f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4f2:	4433      	add	r3, r6
 800d4f4:	9309      	str	r3, [sp, #36]	; 0x24
 800d4f6:	e768      	b.n	800d3ca <_svfiprintf_r+0x4e>
 800d4f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800d4fc:	460c      	mov	r4, r1
 800d4fe:	2001      	movs	r0, #1
 800d500:	e7a6      	b.n	800d450 <_svfiprintf_r+0xd4>
 800d502:	2300      	movs	r3, #0
 800d504:	3401      	adds	r4, #1
 800d506:	9305      	str	r3, [sp, #20]
 800d508:	4619      	mov	r1, r3
 800d50a:	f04f 0c0a 	mov.w	ip, #10
 800d50e:	4620      	mov	r0, r4
 800d510:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d514:	3a30      	subs	r2, #48	; 0x30
 800d516:	2a09      	cmp	r2, #9
 800d518:	d903      	bls.n	800d522 <_svfiprintf_r+0x1a6>
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d0c6      	beq.n	800d4ac <_svfiprintf_r+0x130>
 800d51e:	9105      	str	r1, [sp, #20]
 800d520:	e7c4      	b.n	800d4ac <_svfiprintf_r+0x130>
 800d522:	fb0c 2101 	mla	r1, ip, r1, r2
 800d526:	4604      	mov	r4, r0
 800d528:	2301      	movs	r3, #1
 800d52a:	e7f0      	b.n	800d50e <_svfiprintf_r+0x192>
 800d52c:	ab03      	add	r3, sp, #12
 800d52e:	9300      	str	r3, [sp, #0]
 800d530:	462a      	mov	r2, r5
 800d532:	4b0f      	ldr	r3, [pc, #60]	; (800d570 <_svfiprintf_r+0x1f4>)
 800d534:	a904      	add	r1, sp, #16
 800d536:	4638      	mov	r0, r7
 800d538:	f3af 8000 	nop.w
 800d53c:	1c42      	adds	r2, r0, #1
 800d53e:	4606      	mov	r6, r0
 800d540:	d1d6      	bne.n	800d4f0 <_svfiprintf_r+0x174>
 800d542:	89ab      	ldrh	r3, [r5, #12]
 800d544:	065b      	lsls	r3, r3, #25
 800d546:	f53f af2d 	bmi.w	800d3a4 <_svfiprintf_r+0x28>
 800d54a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d54c:	b01d      	add	sp, #116	; 0x74
 800d54e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d552:	ab03      	add	r3, sp, #12
 800d554:	9300      	str	r3, [sp, #0]
 800d556:	462a      	mov	r2, r5
 800d558:	4b05      	ldr	r3, [pc, #20]	; (800d570 <_svfiprintf_r+0x1f4>)
 800d55a:	a904      	add	r1, sp, #16
 800d55c:	4638      	mov	r0, r7
 800d55e:	f000 f879 	bl	800d654 <_printf_i>
 800d562:	e7eb      	b.n	800d53c <_svfiprintf_r+0x1c0>
 800d564:	0800fac4 	.word	0x0800fac4
 800d568:	0800face 	.word	0x0800face
 800d56c:	00000000 	.word	0x00000000
 800d570:	0800d2c9 	.word	0x0800d2c9
 800d574:	0800faca 	.word	0x0800faca

0800d578 <_printf_common>:
 800d578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d57c:	4616      	mov	r6, r2
 800d57e:	4699      	mov	r9, r3
 800d580:	688a      	ldr	r2, [r1, #8]
 800d582:	690b      	ldr	r3, [r1, #16]
 800d584:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d588:	4293      	cmp	r3, r2
 800d58a:	bfb8      	it	lt
 800d58c:	4613      	movlt	r3, r2
 800d58e:	6033      	str	r3, [r6, #0]
 800d590:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d594:	4607      	mov	r7, r0
 800d596:	460c      	mov	r4, r1
 800d598:	b10a      	cbz	r2, 800d59e <_printf_common+0x26>
 800d59a:	3301      	adds	r3, #1
 800d59c:	6033      	str	r3, [r6, #0]
 800d59e:	6823      	ldr	r3, [r4, #0]
 800d5a0:	0699      	lsls	r1, r3, #26
 800d5a2:	bf42      	ittt	mi
 800d5a4:	6833      	ldrmi	r3, [r6, #0]
 800d5a6:	3302      	addmi	r3, #2
 800d5a8:	6033      	strmi	r3, [r6, #0]
 800d5aa:	6825      	ldr	r5, [r4, #0]
 800d5ac:	f015 0506 	ands.w	r5, r5, #6
 800d5b0:	d106      	bne.n	800d5c0 <_printf_common+0x48>
 800d5b2:	f104 0a19 	add.w	sl, r4, #25
 800d5b6:	68e3      	ldr	r3, [r4, #12]
 800d5b8:	6832      	ldr	r2, [r6, #0]
 800d5ba:	1a9b      	subs	r3, r3, r2
 800d5bc:	42ab      	cmp	r3, r5
 800d5be:	dc26      	bgt.n	800d60e <_printf_common+0x96>
 800d5c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d5c4:	1e13      	subs	r3, r2, #0
 800d5c6:	6822      	ldr	r2, [r4, #0]
 800d5c8:	bf18      	it	ne
 800d5ca:	2301      	movne	r3, #1
 800d5cc:	0692      	lsls	r2, r2, #26
 800d5ce:	d42b      	bmi.n	800d628 <_printf_common+0xb0>
 800d5d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d5d4:	4649      	mov	r1, r9
 800d5d6:	4638      	mov	r0, r7
 800d5d8:	47c0      	blx	r8
 800d5da:	3001      	adds	r0, #1
 800d5dc:	d01e      	beq.n	800d61c <_printf_common+0xa4>
 800d5de:	6823      	ldr	r3, [r4, #0]
 800d5e0:	6922      	ldr	r2, [r4, #16]
 800d5e2:	f003 0306 	and.w	r3, r3, #6
 800d5e6:	2b04      	cmp	r3, #4
 800d5e8:	bf02      	ittt	eq
 800d5ea:	68e5      	ldreq	r5, [r4, #12]
 800d5ec:	6833      	ldreq	r3, [r6, #0]
 800d5ee:	1aed      	subeq	r5, r5, r3
 800d5f0:	68a3      	ldr	r3, [r4, #8]
 800d5f2:	bf0c      	ite	eq
 800d5f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d5f8:	2500      	movne	r5, #0
 800d5fa:	4293      	cmp	r3, r2
 800d5fc:	bfc4      	itt	gt
 800d5fe:	1a9b      	subgt	r3, r3, r2
 800d600:	18ed      	addgt	r5, r5, r3
 800d602:	2600      	movs	r6, #0
 800d604:	341a      	adds	r4, #26
 800d606:	42b5      	cmp	r5, r6
 800d608:	d11a      	bne.n	800d640 <_printf_common+0xc8>
 800d60a:	2000      	movs	r0, #0
 800d60c:	e008      	b.n	800d620 <_printf_common+0xa8>
 800d60e:	2301      	movs	r3, #1
 800d610:	4652      	mov	r2, sl
 800d612:	4649      	mov	r1, r9
 800d614:	4638      	mov	r0, r7
 800d616:	47c0      	blx	r8
 800d618:	3001      	adds	r0, #1
 800d61a:	d103      	bne.n	800d624 <_printf_common+0xac>
 800d61c:	f04f 30ff 	mov.w	r0, #4294967295
 800d620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d624:	3501      	adds	r5, #1
 800d626:	e7c6      	b.n	800d5b6 <_printf_common+0x3e>
 800d628:	18e1      	adds	r1, r4, r3
 800d62a:	1c5a      	adds	r2, r3, #1
 800d62c:	2030      	movs	r0, #48	; 0x30
 800d62e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d632:	4422      	add	r2, r4
 800d634:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d638:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d63c:	3302      	adds	r3, #2
 800d63e:	e7c7      	b.n	800d5d0 <_printf_common+0x58>
 800d640:	2301      	movs	r3, #1
 800d642:	4622      	mov	r2, r4
 800d644:	4649      	mov	r1, r9
 800d646:	4638      	mov	r0, r7
 800d648:	47c0      	blx	r8
 800d64a:	3001      	adds	r0, #1
 800d64c:	d0e6      	beq.n	800d61c <_printf_common+0xa4>
 800d64e:	3601      	adds	r6, #1
 800d650:	e7d9      	b.n	800d606 <_printf_common+0x8e>
	...

0800d654 <_printf_i>:
 800d654:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d658:	7e0f      	ldrb	r7, [r1, #24]
 800d65a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d65c:	2f78      	cmp	r7, #120	; 0x78
 800d65e:	4691      	mov	r9, r2
 800d660:	4680      	mov	r8, r0
 800d662:	460c      	mov	r4, r1
 800d664:	469a      	mov	sl, r3
 800d666:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d66a:	d807      	bhi.n	800d67c <_printf_i+0x28>
 800d66c:	2f62      	cmp	r7, #98	; 0x62
 800d66e:	d80a      	bhi.n	800d686 <_printf_i+0x32>
 800d670:	2f00      	cmp	r7, #0
 800d672:	f000 80d4 	beq.w	800d81e <_printf_i+0x1ca>
 800d676:	2f58      	cmp	r7, #88	; 0x58
 800d678:	f000 80c0 	beq.w	800d7fc <_printf_i+0x1a8>
 800d67c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d680:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d684:	e03a      	b.n	800d6fc <_printf_i+0xa8>
 800d686:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d68a:	2b15      	cmp	r3, #21
 800d68c:	d8f6      	bhi.n	800d67c <_printf_i+0x28>
 800d68e:	a101      	add	r1, pc, #4	; (adr r1, 800d694 <_printf_i+0x40>)
 800d690:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d694:	0800d6ed 	.word	0x0800d6ed
 800d698:	0800d701 	.word	0x0800d701
 800d69c:	0800d67d 	.word	0x0800d67d
 800d6a0:	0800d67d 	.word	0x0800d67d
 800d6a4:	0800d67d 	.word	0x0800d67d
 800d6a8:	0800d67d 	.word	0x0800d67d
 800d6ac:	0800d701 	.word	0x0800d701
 800d6b0:	0800d67d 	.word	0x0800d67d
 800d6b4:	0800d67d 	.word	0x0800d67d
 800d6b8:	0800d67d 	.word	0x0800d67d
 800d6bc:	0800d67d 	.word	0x0800d67d
 800d6c0:	0800d805 	.word	0x0800d805
 800d6c4:	0800d72d 	.word	0x0800d72d
 800d6c8:	0800d7bf 	.word	0x0800d7bf
 800d6cc:	0800d67d 	.word	0x0800d67d
 800d6d0:	0800d67d 	.word	0x0800d67d
 800d6d4:	0800d827 	.word	0x0800d827
 800d6d8:	0800d67d 	.word	0x0800d67d
 800d6dc:	0800d72d 	.word	0x0800d72d
 800d6e0:	0800d67d 	.word	0x0800d67d
 800d6e4:	0800d67d 	.word	0x0800d67d
 800d6e8:	0800d7c7 	.word	0x0800d7c7
 800d6ec:	682b      	ldr	r3, [r5, #0]
 800d6ee:	1d1a      	adds	r2, r3, #4
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	602a      	str	r2, [r5, #0]
 800d6f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d6f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d6fc:	2301      	movs	r3, #1
 800d6fe:	e09f      	b.n	800d840 <_printf_i+0x1ec>
 800d700:	6820      	ldr	r0, [r4, #0]
 800d702:	682b      	ldr	r3, [r5, #0]
 800d704:	0607      	lsls	r7, r0, #24
 800d706:	f103 0104 	add.w	r1, r3, #4
 800d70a:	6029      	str	r1, [r5, #0]
 800d70c:	d501      	bpl.n	800d712 <_printf_i+0xbe>
 800d70e:	681e      	ldr	r6, [r3, #0]
 800d710:	e003      	b.n	800d71a <_printf_i+0xc6>
 800d712:	0646      	lsls	r6, r0, #25
 800d714:	d5fb      	bpl.n	800d70e <_printf_i+0xba>
 800d716:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d71a:	2e00      	cmp	r6, #0
 800d71c:	da03      	bge.n	800d726 <_printf_i+0xd2>
 800d71e:	232d      	movs	r3, #45	; 0x2d
 800d720:	4276      	negs	r6, r6
 800d722:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d726:	485a      	ldr	r0, [pc, #360]	; (800d890 <_printf_i+0x23c>)
 800d728:	230a      	movs	r3, #10
 800d72a:	e012      	b.n	800d752 <_printf_i+0xfe>
 800d72c:	682b      	ldr	r3, [r5, #0]
 800d72e:	6820      	ldr	r0, [r4, #0]
 800d730:	1d19      	adds	r1, r3, #4
 800d732:	6029      	str	r1, [r5, #0]
 800d734:	0605      	lsls	r5, r0, #24
 800d736:	d501      	bpl.n	800d73c <_printf_i+0xe8>
 800d738:	681e      	ldr	r6, [r3, #0]
 800d73a:	e002      	b.n	800d742 <_printf_i+0xee>
 800d73c:	0641      	lsls	r1, r0, #25
 800d73e:	d5fb      	bpl.n	800d738 <_printf_i+0xe4>
 800d740:	881e      	ldrh	r6, [r3, #0]
 800d742:	4853      	ldr	r0, [pc, #332]	; (800d890 <_printf_i+0x23c>)
 800d744:	2f6f      	cmp	r7, #111	; 0x6f
 800d746:	bf0c      	ite	eq
 800d748:	2308      	moveq	r3, #8
 800d74a:	230a      	movne	r3, #10
 800d74c:	2100      	movs	r1, #0
 800d74e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d752:	6865      	ldr	r5, [r4, #4]
 800d754:	60a5      	str	r5, [r4, #8]
 800d756:	2d00      	cmp	r5, #0
 800d758:	bfa2      	ittt	ge
 800d75a:	6821      	ldrge	r1, [r4, #0]
 800d75c:	f021 0104 	bicge.w	r1, r1, #4
 800d760:	6021      	strge	r1, [r4, #0]
 800d762:	b90e      	cbnz	r6, 800d768 <_printf_i+0x114>
 800d764:	2d00      	cmp	r5, #0
 800d766:	d04b      	beq.n	800d800 <_printf_i+0x1ac>
 800d768:	4615      	mov	r5, r2
 800d76a:	fbb6 f1f3 	udiv	r1, r6, r3
 800d76e:	fb03 6711 	mls	r7, r3, r1, r6
 800d772:	5dc7      	ldrb	r7, [r0, r7]
 800d774:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d778:	4637      	mov	r7, r6
 800d77a:	42bb      	cmp	r3, r7
 800d77c:	460e      	mov	r6, r1
 800d77e:	d9f4      	bls.n	800d76a <_printf_i+0x116>
 800d780:	2b08      	cmp	r3, #8
 800d782:	d10b      	bne.n	800d79c <_printf_i+0x148>
 800d784:	6823      	ldr	r3, [r4, #0]
 800d786:	07de      	lsls	r6, r3, #31
 800d788:	d508      	bpl.n	800d79c <_printf_i+0x148>
 800d78a:	6923      	ldr	r3, [r4, #16]
 800d78c:	6861      	ldr	r1, [r4, #4]
 800d78e:	4299      	cmp	r1, r3
 800d790:	bfde      	ittt	le
 800d792:	2330      	movle	r3, #48	; 0x30
 800d794:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d798:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d79c:	1b52      	subs	r2, r2, r5
 800d79e:	6122      	str	r2, [r4, #16]
 800d7a0:	f8cd a000 	str.w	sl, [sp]
 800d7a4:	464b      	mov	r3, r9
 800d7a6:	aa03      	add	r2, sp, #12
 800d7a8:	4621      	mov	r1, r4
 800d7aa:	4640      	mov	r0, r8
 800d7ac:	f7ff fee4 	bl	800d578 <_printf_common>
 800d7b0:	3001      	adds	r0, #1
 800d7b2:	d14a      	bne.n	800d84a <_printf_i+0x1f6>
 800d7b4:	f04f 30ff 	mov.w	r0, #4294967295
 800d7b8:	b004      	add	sp, #16
 800d7ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7be:	6823      	ldr	r3, [r4, #0]
 800d7c0:	f043 0320 	orr.w	r3, r3, #32
 800d7c4:	6023      	str	r3, [r4, #0]
 800d7c6:	4833      	ldr	r0, [pc, #204]	; (800d894 <_printf_i+0x240>)
 800d7c8:	2778      	movs	r7, #120	; 0x78
 800d7ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d7ce:	6823      	ldr	r3, [r4, #0]
 800d7d0:	6829      	ldr	r1, [r5, #0]
 800d7d2:	061f      	lsls	r7, r3, #24
 800d7d4:	f851 6b04 	ldr.w	r6, [r1], #4
 800d7d8:	d402      	bmi.n	800d7e0 <_printf_i+0x18c>
 800d7da:	065f      	lsls	r7, r3, #25
 800d7dc:	bf48      	it	mi
 800d7de:	b2b6      	uxthmi	r6, r6
 800d7e0:	07df      	lsls	r7, r3, #31
 800d7e2:	bf48      	it	mi
 800d7e4:	f043 0320 	orrmi.w	r3, r3, #32
 800d7e8:	6029      	str	r1, [r5, #0]
 800d7ea:	bf48      	it	mi
 800d7ec:	6023      	strmi	r3, [r4, #0]
 800d7ee:	b91e      	cbnz	r6, 800d7f8 <_printf_i+0x1a4>
 800d7f0:	6823      	ldr	r3, [r4, #0]
 800d7f2:	f023 0320 	bic.w	r3, r3, #32
 800d7f6:	6023      	str	r3, [r4, #0]
 800d7f8:	2310      	movs	r3, #16
 800d7fa:	e7a7      	b.n	800d74c <_printf_i+0xf8>
 800d7fc:	4824      	ldr	r0, [pc, #144]	; (800d890 <_printf_i+0x23c>)
 800d7fe:	e7e4      	b.n	800d7ca <_printf_i+0x176>
 800d800:	4615      	mov	r5, r2
 800d802:	e7bd      	b.n	800d780 <_printf_i+0x12c>
 800d804:	682b      	ldr	r3, [r5, #0]
 800d806:	6826      	ldr	r6, [r4, #0]
 800d808:	6961      	ldr	r1, [r4, #20]
 800d80a:	1d18      	adds	r0, r3, #4
 800d80c:	6028      	str	r0, [r5, #0]
 800d80e:	0635      	lsls	r5, r6, #24
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	d501      	bpl.n	800d818 <_printf_i+0x1c4>
 800d814:	6019      	str	r1, [r3, #0]
 800d816:	e002      	b.n	800d81e <_printf_i+0x1ca>
 800d818:	0670      	lsls	r0, r6, #25
 800d81a:	d5fb      	bpl.n	800d814 <_printf_i+0x1c0>
 800d81c:	8019      	strh	r1, [r3, #0]
 800d81e:	2300      	movs	r3, #0
 800d820:	6123      	str	r3, [r4, #16]
 800d822:	4615      	mov	r5, r2
 800d824:	e7bc      	b.n	800d7a0 <_printf_i+0x14c>
 800d826:	682b      	ldr	r3, [r5, #0]
 800d828:	1d1a      	adds	r2, r3, #4
 800d82a:	602a      	str	r2, [r5, #0]
 800d82c:	681d      	ldr	r5, [r3, #0]
 800d82e:	6862      	ldr	r2, [r4, #4]
 800d830:	2100      	movs	r1, #0
 800d832:	4628      	mov	r0, r5
 800d834:	f7f2 fcdc 	bl	80001f0 <memchr>
 800d838:	b108      	cbz	r0, 800d83e <_printf_i+0x1ea>
 800d83a:	1b40      	subs	r0, r0, r5
 800d83c:	6060      	str	r0, [r4, #4]
 800d83e:	6863      	ldr	r3, [r4, #4]
 800d840:	6123      	str	r3, [r4, #16]
 800d842:	2300      	movs	r3, #0
 800d844:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d848:	e7aa      	b.n	800d7a0 <_printf_i+0x14c>
 800d84a:	6923      	ldr	r3, [r4, #16]
 800d84c:	462a      	mov	r2, r5
 800d84e:	4649      	mov	r1, r9
 800d850:	4640      	mov	r0, r8
 800d852:	47d0      	blx	sl
 800d854:	3001      	adds	r0, #1
 800d856:	d0ad      	beq.n	800d7b4 <_printf_i+0x160>
 800d858:	6823      	ldr	r3, [r4, #0]
 800d85a:	079b      	lsls	r3, r3, #30
 800d85c:	d413      	bmi.n	800d886 <_printf_i+0x232>
 800d85e:	68e0      	ldr	r0, [r4, #12]
 800d860:	9b03      	ldr	r3, [sp, #12]
 800d862:	4298      	cmp	r0, r3
 800d864:	bfb8      	it	lt
 800d866:	4618      	movlt	r0, r3
 800d868:	e7a6      	b.n	800d7b8 <_printf_i+0x164>
 800d86a:	2301      	movs	r3, #1
 800d86c:	4632      	mov	r2, r6
 800d86e:	4649      	mov	r1, r9
 800d870:	4640      	mov	r0, r8
 800d872:	47d0      	blx	sl
 800d874:	3001      	adds	r0, #1
 800d876:	d09d      	beq.n	800d7b4 <_printf_i+0x160>
 800d878:	3501      	adds	r5, #1
 800d87a:	68e3      	ldr	r3, [r4, #12]
 800d87c:	9903      	ldr	r1, [sp, #12]
 800d87e:	1a5b      	subs	r3, r3, r1
 800d880:	42ab      	cmp	r3, r5
 800d882:	dcf2      	bgt.n	800d86a <_printf_i+0x216>
 800d884:	e7eb      	b.n	800d85e <_printf_i+0x20a>
 800d886:	2500      	movs	r5, #0
 800d888:	f104 0619 	add.w	r6, r4, #25
 800d88c:	e7f5      	b.n	800d87a <_printf_i+0x226>
 800d88e:	bf00      	nop
 800d890:	0800fad5 	.word	0x0800fad5
 800d894:	0800fae6 	.word	0x0800fae6

0800d898 <memmove>:
 800d898:	4288      	cmp	r0, r1
 800d89a:	b510      	push	{r4, lr}
 800d89c:	eb01 0402 	add.w	r4, r1, r2
 800d8a0:	d902      	bls.n	800d8a8 <memmove+0x10>
 800d8a2:	4284      	cmp	r4, r0
 800d8a4:	4623      	mov	r3, r4
 800d8a6:	d807      	bhi.n	800d8b8 <memmove+0x20>
 800d8a8:	1e43      	subs	r3, r0, #1
 800d8aa:	42a1      	cmp	r1, r4
 800d8ac:	d008      	beq.n	800d8c0 <memmove+0x28>
 800d8ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d8b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d8b6:	e7f8      	b.n	800d8aa <memmove+0x12>
 800d8b8:	4402      	add	r2, r0
 800d8ba:	4601      	mov	r1, r0
 800d8bc:	428a      	cmp	r2, r1
 800d8be:	d100      	bne.n	800d8c2 <memmove+0x2a>
 800d8c0:	bd10      	pop	{r4, pc}
 800d8c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d8c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d8ca:	e7f7      	b.n	800d8bc <memmove+0x24>

0800d8cc <_realloc_r>:
 800d8cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8d0:	4680      	mov	r8, r0
 800d8d2:	4614      	mov	r4, r2
 800d8d4:	460e      	mov	r6, r1
 800d8d6:	b921      	cbnz	r1, 800d8e2 <_realloc_r+0x16>
 800d8d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d8dc:	4611      	mov	r1, r2
 800d8de:	f7ff bb37 	b.w	800cf50 <_malloc_r>
 800d8e2:	b92a      	cbnz	r2, 800d8f0 <_realloc_r+0x24>
 800d8e4:	f7ff fca4 	bl	800d230 <_free_r>
 800d8e8:	4625      	mov	r5, r4
 800d8ea:	4628      	mov	r0, r5
 800d8ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8f0:	f000 f81b 	bl	800d92a <_malloc_usable_size_r>
 800d8f4:	4284      	cmp	r4, r0
 800d8f6:	4607      	mov	r7, r0
 800d8f8:	d802      	bhi.n	800d900 <_realloc_r+0x34>
 800d8fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d8fe:	d812      	bhi.n	800d926 <_realloc_r+0x5a>
 800d900:	4621      	mov	r1, r4
 800d902:	4640      	mov	r0, r8
 800d904:	f7ff fb24 	bl	800cf50 <_malloc_r>
 800d908:	4605      	mov	r5, r0
 800d90a:	2800      	cmp	r0, #0
 800d90c:	d0ed      	beq.n	800d8ea <_realloc_r+0x1e>
 800d90e:	42bc      	cmp	r4, r7
 800d910:	4622      	mov	r2, r4
 800d912:	4631      	mov	r1, r6
 800d914:	bf28      	it	cs
 800d916:	463a      	movcs	r2, r7
 800d918:	f7ff fc7c 	bl	800d214 <memcpy>
 800d91c:	4631      	mov	r1, r6
 800d91e:	4640      	mov	r0, r8
 800d920:	f7ff fc86 	bl	800d230 <_free_r>
 800d924:	e7e1      	b.n	800d8ea <_realloc_r+0x1e>
 800d926:	4635      	mov	r5, r6
 800d928:	e7df      	b.n	800d8ea <_realloc_r+0x1e>

0800d92a <_malloc_usable_size_r>:
 800d92a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d92e:	1f18      	subs	r0, r3, #4
 800d930:	2b00      	cmp	r3, #0
 800d932:	bfbc      	itt	lt
 800d934:	580b      	ldrlt	r3, [r1, r0]
 800d936:	18c0      	addlt	r0, r0, r3
 800d938:	4770      	bx	lr
	...

0800d93c <_init>:
 800d93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d93e:	bf00      	nop
 800d940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d942:	bc08      	pop	{r3}
 800d944:	469e      	mov	lr, r3
 800d946:	4770      	bx	lr

0800d948 <_fini>:
 800d948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d94a:	bf00      	nop
 800d94c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d94e:	bc08      	pop	{r3}
 800d950:	469e      	mov	lr, r3
 800d952:	4770      	bx	lr
