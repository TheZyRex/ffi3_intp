
thi-board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800b85c  0800b85c  0001b85c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b8cc  0800b8cc  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800b8cc  0800b8cc  0001b8cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b8d4  0800b8d4  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b8d4  0800b8d4  0001b8d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b8d8  0800b8d8  0001b8d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800b8dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          00005314  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005394  20005394  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   000241d7  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000055ce  00000000  00000000  000442ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001eb8  00000000  00000000  00049898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000017b5  00000000  00000000  0004b750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00006a85  00000000  00000000  0004cf05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00026836  00000000  00000000  0005398a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000deee4  00000000  00000000  0007a1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008598  00000000  00000000  001590a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  0016163c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b844 	.word	0x0800b844

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	0800b844 	.word	0x0800b844

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fcd6 	bl	8000e80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f822 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f954 	bl	8000784 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004dc:	f000 f888 	bl	80005f0 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004e0:	f000 f8b4 	bl	800064c <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e4:	f000 f8e2 	bl	80006ac <MX_SPI1_Init>
  MX_TIM7_Init();
 80004e8:	f000 f916 	bl	8000718 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  /* Enable TIM7 = TIM7->CR1 |= TIM_CR1_CEN */
   HAL_TIM_Base_Start(&htim7);
 80004ec:	4807      	ldr	r0, [pc, #28]	; (800050c <main+0x40>)
 80004ee:	f004 f8e1 	bl	80046b4 <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f2:	f007 fe13 	bl	800811c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blinkyTask */
  blinkyTaskHandle = osThreadNew(BlinkyLEDTask, NULL, &blinkyTask_attributes);
 80004f6:	4a06      	ldr	r2, [pc, #24]	; (8000510 <main+0x44>)
 80004f8:	2100      	movs	r1, #0
 80004fa:	4806      	ldr	r0, [pc, #24]	; (8000514 <main+0x48>)
 80004fc:	f007 fe58 	bl	80081b0 <osThreadNew>
 8000500:	4603      	mov	r3, r0
 8000502:	4a05      	ldr	r2, [pc, #20]	; (8000518 <main+0x4c>)
 8000504:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000506:	f007 fe2d 	bl	8008164 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800050a:	e7fe      	b.n	800050a <main+0x3e>
 800050c:	20000190 	.word	0x20000190
 8000510:	0800b890 	.word	0x0800b890
 8000514:	08000981 	.word	0x08000981
 8000518:	200001d8 	.word	0x200001d8

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b094      	sub	sp, #80	; 0x50
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0320 	add.w	r3, r7, #32
 8000526:	2230      	movs	r2, #48	; 0x30
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f00b f8ec 	bl	800b708 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 030c 	add.w	r3, r7, #12
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	4b28      	ldr	r3, [pc, #160]	; (80005e8 <SystemClock_Config+0xcc>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000548:	4a27      	ldr	r2, [pc, #156]	; (80005e8 <SystemClock_Config+0xcc>)
 800054a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054e:	6413      	str	r3, [r2, #64]	; 0x40
 8000550:	4b25      	ldr	r3, [pc, #148]	; (80005e8 <SystemClock_Config+0xcc>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800055c:	2300      	movs	r3, #0
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	4b22      	ldr	r3, [pc, #136]	; (80005ec <SystemClock_Config+0xd0>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a21      	ldr	r2, [pc, #132]	; (80005ec <SystemClock_Config+0xd0>)
 8000566:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800056a:	6013      	str	r3, [r2, #0]
 800056c:	4b1f      	ldr	r3, [pc, #124]	; (80005ec <SystemClock_Config+0xd0>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000578:	2301      	movs	r3, #1
 800057a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800057c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000580:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000582:	2302      	movs	r3, #2
 8000584:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000586:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800058a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800058c:	2308      	movs	r3, #8
 800058e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000590:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000594:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000596:	2302      	movs	r3, #2
 8000598:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800059a:	2307      	movs	r3, #7
 800059c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059e:	f107 0320 	add.w	r3, r7, #32
 80005a2:	4618      	mov	r0, r3
 80005a4:	f003 f9ea 	bl	800397c <HAL_RCC_OscConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005ae:	f000 fa21 	bl	80009f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b2:	230f      	movs	r3, #15
 80005b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b6:	2302      	movs	r3, #2
 80005b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ca:	f107 030c 	add.w	r3, r7, #12
 80005ce:	2105      	movs	r1, #5
 80005d0:	4618      	mov	r0, r3
 80005d2:	f003 fc4b 	bl	8003e6c <HAL_RCC_ClockConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005dc:	f000 fa0a 	bl	80009f4 <Error_Handler>
  }
}
 80005e0:	bf00      	nop
 80005e2:	3750      	adds	r7, #80	; 0x50
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40007000 	.word	0x40007000

080005f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <MX_I2C1_Init+0x50>)
 80005f6:	4a13      	ldr	r2, [pc, #76]	; (8000644 <MX_I2C1_Init+0x54>)
 80005f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005fa:	4b11      	ldr	r3, [pc, #68]	; (8000640 <MX_I2C1_Init+0x50>)
 80005fc:	4a12      	ldr	r2, [pc, #72]	; (8000648 <MX_I2C1_Init+0x58>)
 80005fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000600:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <MX_I2C1_Init+0x50>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <MX_I2C1_Init+0x50>)
 8000608:	2200      	movs	r2, #0
 800060a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <MX_I2C1_Init+0x50>)
 800060e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000612:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000614:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <MX_I2C1_Init+0x50>)
 8000616:	2200      	movs	r2, #0
 8000618:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <MX_I2C1_Init+0x50>)
 800061c:	2200      	movs	r2, #0
 800061e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000620:	4b07      	ldr	r3, [pc, #28]	; (8000640 <MX_I2C1_Init+0x50>)
 8000622:	2200      	movs	r2, #0
 8000624:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <MX_I2C1_Init+0x50>)
 8000628:	2200      	movs	r2, #0
 800062a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800062c:	4804      	ldr	r0, [pc, #16]	; (8000640 <MX_I2C1_Init+0x50>)
 800062e:	f002 fbc1 	bl	8002db4 <HAL_I2C_Init>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000638:	f000 f9dc 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	2000009c 	.word	0x2000009c
 8000644:	40005400 	.word	0x40005400
 8000648:	000186a0 	.word	0x000186a0

0800064c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000650:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000652:	4a14      	ldr	r2, [pc, #80]	; (80006a4 <MX_I2S3_Init+0x58>)
 8000654:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000656:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000658:	f44f 7200 	mov.w	r2, #512	; 0x200
 800065c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800065e:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000664:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800066a:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <MX_I2S3_Init+0x54>)
 800066c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000670:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000672:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000674:	4a0c      	ldr	r2, [pc, #48]	; (80006a8 <MX_I2S3_Init+0x5c>)
 8000676:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000678:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <MX_I2S3_Init+0x54>)
 800067a:	2200      	movs	r2, #0
 800067c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800067e:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000680:	2200      	movs	r2, #0
 8000682:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000684:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000686:	2200      	movs	r2, #0
 8000688:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800068a:	4805      	ldr	r0, [pc, #20]	; (80006a0 <MX_I2S3_Init+0x54>)
 800068c:	f002 fcd6 	bl	800303c <HAL_I2S_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000696:	f000 f9ad 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	200000f0 	.word	0x200000f0
 80006a4:	40003c00 	.word	0x40003c00
 80006a8:	00017700 	.word	0x00017700

080006ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006b0:	4b17      	ldr	r3, [pc, #92]	; (8000710 <MX_SPI1_Init+0x64>)
 80006b2:	4a18      	ldr	r2, [pc, #96]	; (8000714 <MX_SPI1_Init+0x68>)
 80006b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006b6:	4b16      	ldr	r3, [pc, #88]	; (8000710 <MX_SPI1_Init+0x64>)
 80006b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006be:	4b14      	ldr	r3, [pc, #80]	; (8000710 <MX_SPI1_Init+0x64>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <MX_SPI1_Init+0x64>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_SPI1_Init+0x64>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <MX_SPI1_Init+0x64>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_SPI1_Init+0x64>)
 80006d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006de:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_SPI1_Init+0x64>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006e4:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <MX_SPI1_Init+0x64>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ea:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_SPI1_Init+0x64>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006f0:	4b07      	ldr	r3, [pc, #28]	; (8000710 <MX_SPI1_Init+0x64>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_SPI1_Init+0x64>)
 80006f8:	220a      	movs	r2, #10
 80006fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006fc:	4804      	ldr	r0, [pc, #16]	; (8000710 <MX_SPI1_Init+0x64>)
 80006fe:	f003 ff01 	bl	8004504 <HAL_SPI_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000708:	f000 f974 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000138 	.word	0x20000138
 8000714:	40013000 	.word	0x40013000

08000718 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800071e:	463b      	mov	r3, r7
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000726:	4b15      	ldr	r3, [pc, #84]	; (800077c <MX_TIM7_Init+0x64>)
 8000728:	4a15      	ldr	r2, [pc, #84]	; (8000780 <MX_TIM7_Init+0x68>)
 800072a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 800072c:	4b13      	ldr	r3, [pc, #76]	; (800077c <MX_TIM7_Init+0x64>)
 800072e:	2253      	movs	r2, #83	; 0x53
 8000730:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000732:	4b12      	ldr	r3, [pc, #72]	; (800077c <MX_TIM7_Init+0x64>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8000738:	4b10      	ldr	r3, [pc, #64]	; (800077c <MX_TIM7_Init+0x64>)
 800073a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800073e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000740:	4b0e      	ldr	r3, [pc, #56]	; (800077c <MX_TIM7_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000746:	480d      	ldr	r0, [pc, #52]	; (800077c <MX_TIM7_Init+0x64>)
 8000748:	f003 ff65 	bl	8004616 <HAL_TIM_Base_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000752:	f000 f94f 	bl	80009f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000756:	2300      	movs	r3, #0
 8000758:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4806      	ldr	r0, [pc, #24]	; (800077c <MX_TIM7_Init+0x64>)
 8000764:	f004 f9e8 	bl	8004b38 <HAL_TIMEx_MasterConfigSynchronization>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800076e:	f000 f941 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000190 	.word	0x20000190
 8000780:	40001400 	.word	0x40001400

08000784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08c      	sub	sp, #48	; 0x30
 8000788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078a:	f107 031c 	add.w	r3, r7, #28
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	61bb      	str	r3, [r7, #24]
 800079e:	4b72      	ldr	r3, [pc, #456]	; (8000968 <MX_GPIO_Init+0x1e4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a71      	ldr	r2, [pc, #452]	; (8000968 <MX_GPIO_Init+0x1e4>)
 80007a4:	f043 0310 	orr.w	r3, r3, #16
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b6f      	ldr	r3, [pc, #444]	; (8000968 <MX_GPIO_Init+0x1e4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0310 	and.w	r3, r3, #16
 80007b2:	61bb      	str	r3, [r7, #24]
 80007b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]
 80007ba:	4b6b      	ldr	r3, [pc, #428]	; (8000968 <MX_GPIO_Init+0x1e4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a6a      	ldr	r2, [pc, #424]	; (8000968 <MX_GPIO_Init+0x1e4>)
 80007c0:	f043 0304 	orr.w	r3, r3, #4
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b68      	ldr	r3, [pc, #416]	; (8000968 <MX_GPIO_Init+0x1e4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0304 	and.w	r3, r3, #4
 80007ce:	617b      	str	r3, [r7, #20]
 80007d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
 80007d6:	4b64      	ldr	r3, [pc, #400]	; (8000968 <MX_GPIO_Init+0x1e4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a63      	ldr	r2, [pc, #396]	; (8000968 <MX_GPIO_Init+0x1e4>)
 80007dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b61      	ldr	r3, [pc, #388]	; (8000968 <MX_GPIO_Init+0x1e4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	4b5d      	ldr	r3, [pc, #372]	; (8000968 <MX_GPIO_Init+0x1e4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a5c      	ldr	r2, [pc, #368]	; (8000968 <MX_GPIO_Init+0x1e4>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b5a      	ldr	r3, [pc, #360]	; (8000968 <MX_GPIO_Init+0x1e4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	4b56      	ldr	r3, [pc, #344]	; (8000968 <MX_GPIO_Init+0x1e4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a55      	ldr	r2, [pc, #340]	; (8000968 <MX_GPIO_Init+0x1e4>)
 8000814:	f043 0302 	orr.w	r3, r3, #2
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b53      	ldr	r3, [pc, #332]	; (8000968 <MX_GPIO_Init+0x1e4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0302 	and.w	r3, r3, #2
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	4b4f      	ldr	r3, [pc, #316]	; (8000968 <MX_GPIO_Init+0x1e4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a4e      	ldr	r2, [pc, #312]	; (8000968 <MX_GPIO_Init+0x1e4>)
 8000830:	f043 0308 	orr.w	r3, r3, #8
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b4c      	ldr	r3, [pc, #304]	; (8000968 <MX_GPIO_Init+0x1e4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0308 	and.w	r3, r3, #8
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	2108      	movs	r1, #8
 8000846:	4849      	ldr	r0, [pc, #292]	; (800096c <MX_GPIO_Init+0x1e8>)
 8000848:	f000 fe76 	bl	8001538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800084c:	2201      	movs	r2, #1
 800084e:	2101      	movs	r1, #1
 8000850:	4847      	ldr	r0, [pc, #284]	; (8000970 <MX_GPIO_Init+0x1ec>)
 8000852:	f000 fe71 	bl	8001538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000856:	2200      	movs	r2, #0
 8000858:	f24f 0110 	movw	r1, #61456	; 0xf010
 800085c:	4845      	ldr	r0, [pc, #276]	; (8000974 <MX_GPIO_Init+0x1f0>)
 800085e:	f000 fe6b 	bl	8001538 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000862:	2308      	movs	r3, #8
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000866:	2301      	movs	r3, #1
 8000868:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	2300      	movs	r3, #0
 8000870:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	4619      	mov	r1, r3
 8000878:	483c      	ldr	r0, [pc, #240]	; (800096c <MX_GPIO_Init+0x1e8>)
 800087a:	f000 fca9 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800087e:	2301      	movs	r3, #1
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000882:	2301      	movs	r3, #1
 8000884:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2300      	movs	r3, #0
 800088c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	4619      	mov	r1, r3
 8000894:	4836      	ldr	r0, [pc, #216]	; (8000970 <MX_GPIO_Init+0x1ec>)
 8000896:	f000 fc9b 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800089a:	2308      	movs	r3, #8
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	2302      	movs	r3, #2
 80008a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	2300      	movs	r3, #0
 80008a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008aa:	2305      	movs	r3, #5
 80008ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	4619      	mov	r1, r3
 80008b4:	482e      	ldr	r0, [pc, #184]	; (8000970 <MX_GPIO_Init+0x1ec>)
 80008b6:	f000 fc8b 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ba:	2301      	movs	r3, #1
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008be:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	482a      	ldr	r0, [pc, #168]	; (8000978 <MX_GPIO_Init+0x1f4>)
 80008d0:	f000 fc7e 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008d4:	2304      	movs	r3, #4
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d8:	2300      	movs	r3, #0
 80008da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	4825      	ldr	r0, [pc, #148]	; (800097c <MX_GPIO_Init+0x1f8>)
 80008e8:	f000 fc72 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f2:	2302      	movs	r3, #2
 80008f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008fe:	2305      	movs	r3, #5
 8000900:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	4619      	mov	r1, r3
 8000908:	481c      	ldr	r0, [pc, #112]	; (800097c <MX_GPIO_Init+0x1f8>)
 800090a:	f000 fc61 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800090e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000912:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000914:	2301      	movs	r3, #1
 8000916:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091c:	2300      	movs	r3, #0
 800091e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4619      	mov	r1, r3
 8000926:	4813      	ldr	r0, [pc, #76]	; (8000974 <MX_GPIO_Init+0x1f0>)
 8000928:	f000 fc52 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800092c:	2320      	movs	r3, #32
 800092e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000930:	2300      	movs	r3, #0
 8000932:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000938:	f107 031c 	add.w	r3, r7, #28
 800093c:	4619      	mov	r1, r3
 800093e:	480d      	ldr	r0, [pc, #52]	; (8000974 <MX_GPIO_Init+0x1f0>)
 8000940:	f000 fc46 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000944:	2302      	movs	r3, #2
 8000946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000948:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	4804      	ldr	r0, [pc, #16]	; (800096c <MX_GPIO_Init+0x1e8>)
 800095a:	f000 fc39 	bl	80011d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800095e:	bf00      	nop
 8000960:	3730      	adds	r7, #48	; 0x30
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40023800 	.word	0x40023800
 800096c:	40021000 	.word	0x40021000
 8000970:	40020800 	.word	0x40020800
 8000974:	40020c00 	.word	0x40020c00
 8000978:	40020000 	.word	0x40020000
 800097c:	40020400 	.word	0x40020400

08000980 <BlinkyLEDTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_BlinkyLEDTask */
void BlinkyLEDTask(void *argument)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000988:	f00a fb00 	bl	800af8c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  /* PD13 */
	  if ((ms_counter % 125) == 0)
 800098c:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <BlinkyLEDTask+0x64>)
 800098e:	6819      	ldr	r1, [r3, #0]
 8000990:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <BlinkyLEDTask+0x68>)
 8000992:	fba3 2301 	umull	r2, r3, r3, r1
 8000996:	08da      	lsrs	r2, r3, #3
 8000998:	4613      	mov	r3, r2
 800099a:	015b      	lsls	r3, r3, #5
 800099c:	1a9b      	subs	r3, r3, r2
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	4413      	add	r3, r2
 80009a2:	1aca      	subs	r2, r1, r3
 80009a4:	2a00      	cmp	r2, #0
 80009a6:	d104      	bne.n	80009b2 <BlinkyLEDTask+0x32>
	  {
	    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80009a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ac:	480f      	ldr	r0, [pc, #60]	; (80009ec <BlinkyLEDTask+0x6c>)
 80009ae:	f000 fddc 	bl	800156a <HAL_GPIO_TogglePin>
	  }

	  /* PD12 */
	  if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) != GPIO_PIN_RESET)
 80009b2:	2101      	movs	r1, #1
 80009b4:	480e      	ldr	r0, [pc, #56]	; (80009f0 <BlinkyLEDTask+0x70>)
 80009b6:	f000 fda7 	bl	8001508 <HAL_GPIO_ReadPin>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d009      	beq.n	80009d4 <BlinkyLEDTask+0x54>
	  {
	    HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 80009c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009c4:	4809      	ldr	r0, [pc, #36]	; (80009ec <BlinkyLEDTask+0x6c>)
 80009c6:	f000 fdd0 	bl	800156a <HAL_GPIO_TogglePin>
		osDelay(500);
 80009ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009ce:	f007 fc81 	bl	80082d4 <osDelay>
 80009d2:	e7db      	b.n	800098c <BlinkyLEDTask+0xc>
	  }
	  else
	  {
	    HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80009d4:	2200      	movs	r2, #0
 80009d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009da:	4804      	ldr	r0, [pc, #16]	; (80009ec <BlinkyLEDTask+0x6c>)
 80009dc:	f000 fdac 	bl	8001538 <HAL_GPIO_WritePin>
	  if ((ms_counter % 125) == 0)
 80009e0:	e7d4      	b.n	800098c <BlinkyLEDTask+0xc>
 80009e2:	bf00      	nop
 80009e4:	200001dc 	.word	0x200001dc
 80009e8:	10624dd3 	.word	0x10624dd3
 80009ec:	40020c00 	.word	0x40020c00
 80009f0:	40020000 	.word	0x40020000

080009f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f8:	b672      	cpsid	i
}
 80009fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009fc:	e7fe      	b.n	80009fc <Error_Handler+0x8>
	...

08000a00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	607b      	str	r3, [r7, #4]
 8000a0a:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <HAL_MspInit+0x54>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0e:	4a11      	ldr	r2, [pc, #68]	; (8000a54 <HAL_MspInit+0x54>)
 8000a10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a14:	6453      	str	r3, [r2, #68]	; 0x44
 8000a16:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <HAL_MspInit+0x54>)
 8000a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	603b      	str	r3, [r7, #0]
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <HAL_MspInit+0x54>)
 8000a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2a:	4a0a      	ldr	r2, [pc, #40]	; (8000a54 <HAL_MspInit+0x54>)
 8000a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a30:	6413      	str	r3, [r2, #64]	; 0x40
 8000a32:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <HAL_MspInit+0x54>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3a:	603b      	str	r3, [r7, #0]
 8000a3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	210f      	movs	r1, #15
 8000a42:	f06f 0001 	mvn.w	r0, #1
 8000a46:	f000 fb8c 	bl	8001162 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40023800 	.word	0x40023800

08000a58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08a      	sub	sp, #40	; 0x28
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a19      	ldr	r2, [pc, #100]	; (8000adc <HAL_I2C_MspInit+0x84>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d12c      	bne.n	8000ad4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	613b      	str	r3, [r7, #16]
 8000a7e:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <HAL_I2C_MspInit+0x88>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a17      	ldr	r2, [pc, #92]	; (8000ae0 <HAL_I2C_MspInit+0x88>)
 8000a84:	f043 0302 	orr.w	r3, r3, #2
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <HAL_I2C_MspInit+0x88>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0302 	and.w	r3, r3, #2
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a96:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a9c:	2312      	movs	r3, #18
 8000a9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000aa8:	2304      	movs	r3, #4
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	480c      	ldr	r0, [pc, #48]	; (8000ae4 <HAL_I2C_MspInit+0x8c>)
 8000ab4:	f000 fb8c 	bl	80011d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <HAL_I2C_MspInit+0x88>)
 8000abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac0:	4a07      	ldr	r2, [pc, #28]	; (8000ae0 <HAL_I2C_MspInit+0x88>)
 8000ac2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ac6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac8:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <HAL_I2C_MspInit+0x88>)
 8000aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000acc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ad4:	bf00      	nop
 8000ad6:	3728      	adds	r7, #40	; 0x28
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40005400 	.word	0x40005400
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	40020400 	.word	0x40020400

08000ae8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08e      	sub	sp, #56	; 0x38
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a31      	ldr	r2, [pc, #196]	; (8000bd8 <HAL_I2S_MspInit+0xf0>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d15a      	bne.n	8000bce <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b1c:	23c0      	movs	r3, #192	; 0xc0
 8000b1e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b20:	2302      	movs	r3, #2
 8000b22:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f003 fbab 	bl	8004284 <HAL_RCCEx_PeriphCLKConfig>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b34:	f7ff ff5e 	bl	80009f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b38:	2300      	movs	r3, #0
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	4b27      	ldr	r3, [pc, #156]	; (8000bdc <HAL_I2S_MspInit+0xf4>)
 8000b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b40:	4a26      	ldr	r2, [pc, #152]	; (8000bdc <HAL_I2S_MspInit+0xf4>)
 8000b42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b46:	6413      	str	r3, [r2, #64]	; 0x40
 8000b48:	4b24      	ldr	r3, [pc, #144]	; (8000bdc <HAL_I2S_MspInit+0xf4>)
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b50:	613b      	str	r3, [r7, #16]
 8000b52:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b54:	2300      	movs	r3, #0
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	4b20      	ldr	r3, [pc, #128]	; (8000bdc <HAL_I2S_MspInit+0xf4>)
 8000b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5c:	4a1f      	ldr	r2, [pc, #124]	; (8000bdc <HAL_I2S_MspInit+0xf4>)
 8000b5e:	f043 0301 	orr.w	r3, r3, #1
 8000b62:	6313      	str	r3, [r2, #48]	; 0x30
 8000b64:	4b1d      	ldr	r3, [pc, #116]	; (8000bdc <HAL_I2S_MspInit+0xf4>)
 8000b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b68:	f003 0301 	and.w	r3, r3, #1
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b70:	2300      	movs	r3, #0
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	4b19      	ldr	r3, [pc, #100]	; (8000bdc <HAL_I2S_MspInit+0xf4>)
 8000b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b78:	4a18      	ldr	r2, [pc, #96]	; (8000bdc <HAL_I2S_MspInit+0xf4>)
 8000b7a:	f043 0304 	orr.w	r3, r3, #4
 8000b7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b80:	4b16      	ldr	r3, [pc, #88]	; (8000bdc <HAL_I2S_MspInit+0xf4>)
 8000b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b84:	f003 0304 	and.w	r3, r3, #4
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b8c:	2310      	movs	r3, #16
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b90:	2302      	movs	r3, #2
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b9c:	2306      	movs	r3, #6
 8000b9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	480e      	ldr	r0, [pc, #56]	; (8000be0 <HAL_I2S_MspInit+0xf8>)
 8000ba8:	f000 fb12 	bl	80011d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000bac:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bbe:	2306      	movs	r3, #6
 8000bc0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4806      	ldr	r0, [pc, #24]	; (8000be4 <HAL_I2S_MspInit+0xfc>)
 8000bca:	f000 fb01 	bl	80011d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000bce:	bf00      	nop
 8000bd0:	3738      	adds	r7, #56	; 0x38
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40003c00 	.word	0x40003c00
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40020000 	.word	0x40020000
 8000be4:	40020800 	.word	0x40020800

08000be8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08a      	sub	sp, #40	; 0x28
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a19      	ldr	r2, [pc, #100]	; (8000c6c <HAL_SPI_MspInit+0x84>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d12b      	bne.n	8000c62 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	613b      	str	r3, [r7, #16]
 8000c0e:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <HAL_SPI_MspInit+0x88>)
 8000c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c12:	4a17      	ldr	r2, [pc, #92]	; (8000c70 <HAL_SPI_MspInit+0x88>)
 8000c14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c18:	6453      	str	r3, [r2, #68]	; 0x44
 8000c1a:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <HAL_SPI_MspInit+0x88>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <HAL_SPI_MspInit+0x88>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a10      	ldr	r2, [pc, #64]	; (8000c70 <HAL_SPI_MspInit+0x88>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <HAL_SPI_MspInit+0x88>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c42:	23e0      	movs	r3, #224	; 0xe0
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	2302      	movs	r3, #2
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c52:	2305      	movs	r3, #5
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c56:	f107 0314 	add.w	r3, r7, #20
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4805      	ldr	r0, [pc, #20]	; (8000c74 <HAL_SPI_MspInit+0x8c>)
 8000c5e:	f000 fab7 	bl	80011d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c62:	bf00      	nop
 8000c64:	3728      	adds	r7, #40	; 0x28
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40013000 	.word	0x40013000
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40020000 	.word	0x40020000

08000c78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a0e      	ldr	r2, [pc, #56]	; (8000cc0 <HAL_TIM_Base_MspInit+0x48>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d115      	bne.n	8000cb6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <HAL_TIM_Base_MspInit+0x4c>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	4a0c      	ldr	r2, [pc, #48]	; (8000cc4 <HAL_TIM_Base_MspInit+0x4c>)
 8000c94:	f043 0320 	orr.w	r3, r3, #32
 8000c98:	6413      	str	r3, [r2, #64]	; 0x40
 8000c9a:	4b0a      	ldr	r3, [pc, #40]	; (8000cc4 <HAL_TIM_Base_MspInit+0x4c>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	f003 0320 	and.w	r3, r3, #32
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2105      	movs	r1, #5
 8000caa:	2037      	movs	r0, #55	; 0x37
 8000cac:	f000 fa59 	bl	8001162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000cb0:	2037      	movs	r0, #55	; 0x37
 8000cb2:	f000 fa72 	bl	800119a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000cb6:	bf00      	nop
 8000cb8:	3710      	adds	r7, #16
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40001400 	.word	0x40001400
 8000cc4:	40023800 	.word	0x40023800

08000cc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <NMI_Handler+0x4>

08000cce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd2:	e7fe      	b.n	8000cd2 <HardFault_Handler+0x4>

08000cd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <MemManage_Handler+0x4>

08000cda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cde:	e7fe      	b.n	8000cde <BusFault_Handler+0x4>

08000ce0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <UsageFault_Handler+0x4>

08000ce6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf8:	f000 f914 	bl	8000f24 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000cfc:	f009 f8e2 	bl	8009ec4 <xTaskGetSchedulerState>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d001      	beq.n	8000d0a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000d06:	f009 fec7 	bl	800aa98 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000d14:	4804      	ldr	r0, [pc, #16]	; (8000d28 <TIM7_IRQHandler+0x18>)
 8000d16:	f003 fd35 	bl	8004784 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  ms_counter += 1;
 8000d1a:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <TIM7_IRQHandler+0x1c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	4a02      	ldr	r2, [pc, #8]	; (8000d2c <TIM7_IRQHandler+0x1c>)
 8000d22:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM7_IRQn 1 */
}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000190 	.word	0x20000190
 8000d2c:	200001dc 	.word	0x200001dc

08000d30 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d34:	4802      	ldr	r0, [pc, #8]	; (8000d40 <OTG_FS_IRQHandler+0x10>)
 8000d36:	f000 fe9d 	bl	8001a74 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20004f48 	.word	0x20004f48

08000d44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d4c:	4a14      	ldr	r2, [pc, #80]	; (8000da0 <_sbrk+0x5c>)
 8000d4e:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <_sbrk+0x60>)
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d58:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <_sbrk+0x64>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d102      	bne.n	8000d66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d60:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <_sbrk+0x64>)
 8000d62:	4a12      	ldr	r2, [pc, #72]	; (8000dac <_sbrk+0x68>)
 8000d64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d66:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <_sbrk+0x64>)
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d207      	bcs.n	8000d84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d74:	f00a fce0 	bl	800b738 <__errno>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	220c      	movs	r2, #12
 8000d7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d82:	e009      	b.n	8000d98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d84:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <_sbrk+0x64>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d8a:	4b07      	ldr	r3, [pc, #28]	; (8000da8 <_sbrk+0x64>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4413      	add	r3, r2
 8000d92:	4a05      	ldr	r2, [pc, #20]	; (8000da8 <_sbrk+0x64>)
 8000d94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d96:	68fb      	ldr	r3, [r7, #12]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3718      	adds	r7, #24
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20020000 	.word	0x20020000
 8000da4:	00000400 	.word	0x00000400
 8000da8:	200001e0 	.word	0x200001e0
 8000dac:	20005398 	.word	0x20005398

08000db0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <SystemInit+0x20>)
 8000db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dba:	4a05      	ldr	r2, [pc, #20]	; (8000dd0 <SystemInit+0x20>)
 8000dbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000dd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dd8:	480d      	ldr	r0, [pc, #52]	; (8000e10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dda:	490e      	ldr	r1, [pc, #56]	; (8000e14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ddc:	4a0e      	ldr	r2, [pc, #56]	; (8000e18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de0:	e002      	b.n	8000de8 <LoopCopyDataInit>

08000de2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000de2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000de6:	3304      	adds	r3, #4

08000de8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dec:	d3f9      	bcc.n	8000de2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dee:	4a0b      	ldr	r2, [pc, #44]	; (8000e1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000df0:	4c0b      	ldr	r4, [pc, #44]	; (8000e20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000df2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df4:	e001      	b.n	8000dfa <LoopFillZerobss>

08000df6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000df6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df8:	3204      	adds	r2, #4

08000dfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dfc:	d3fb      	bcc.n	8000df6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dfe:	f7ff ffd7 	bl	8000db0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e02:	f00a fc9f 	bl	800b744 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e06:	f7ff fb61 	bl	80004cc <main>
  bx  lr    
 8000e0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e14:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000e18:	0800b8dc 	.word	0x0800b8dc
  ldr r2, =_sbss
 8000e1c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000e20:	20005394 	.word	0x20005394

08000e24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e24:	e7fe      	b.n	8000e24 <ADC_IRQHandler>
	...

08000e28 <TIM6_DAC_IRQHandler>:
#include "mcpr_timer.h"
#include <stdbool.h>

// IRQ Handler fuer TIM6, welche fuer die delay funktionen genutzt wird
void TIM6_DAC_IRQHandler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
	if (TIM6->SR & TIM_SR_UIF)
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <TIM6_DAC_IRQHandler+0x50>)
 8000e2e:	691b      	ldr	r3, [r3, #16]
 8000e30:	f003 0301 	and.w	r3, r3, #1
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d00c      	beq.n	8000e52 <TIM6_DAC_IRQHandler+0x2a>
	{
		// Resetten des Status Registers ansonsten wird die Service Routine sofort neu ausgeloest
		// gilt fuer alle Interrupts
		TIM6->SR &= ~TIM_SR_UIF;
 8000e38:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <TIM6_DAC_IRQHandler+0x50>)
 8000e3a:	691b      	ldr	r3, [r3, #16]
 8000e3c:	4a0e      	ldr	r2, [pc, #56]	; (8000e78 <TIM6_DAC_IRQHandler+0x50>)
 8000e3e:	f023 0301 	bic.w	r3, r3, #1
 8000e42:	6113      	str	r3, [r2, #16]
		resetCnt++;
 8000e44:	4b0d      	ldr	r3, [pc, #52]	; (8000e7c <TIM6_DAC_IRQHandler+0x54>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <TIM6_DAC_IRQHandler+0x54>)
 8000e50:	701a      	strb	r2, [r3, #0]
	}
	if (resetCnt == 2)
 8000e52:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <TIM6_DAC_IRQHandler+0x54>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d108      	bne.n	8000e6e <TIM6_DAC_IRQHandler+0x46>
	{
		resetCnt = 0;
 8000e5c:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <TIM6_DAC_IRQHandler+0x54>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	701a      	strb	r2, [r3, #0]
		//Beende den Timer
		TIM6->CR1 &= ~TIM_CR1_CEN;
 8000e62:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <TIM6_DAC_IRQHandler+0x50>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a04      	ldr	r2, [pc, #16]	; (8000e78 <TIM6_DAC_IRQHandler+0x50>)
 8000e68:	f023 0301 	bic.w	r3, r3, #1
 8000e6c:	6013      	str	r3, [r2, #0]
	}
}
 8000e6e:	bf00      	nop
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	40001000 	.word	0x40001000
 8000e7c:	200001e4 	.word	0x200001e4

08000e80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e84:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <HAL_Init+0x40>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a0d      	ldr	r2, [pc, #52]	; (8000ec0 <HAL_Init+0x40>)
 8000e8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e90:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <HAL_Init+0x40>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a0a      	ldr	r2, [pc, #40]	; (8000ec0 <HAL_Init+0x40>)
 8000e96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e9c:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <HAL_Init+0x40>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a07      	ldr	r2, [pc, #28]	; (8000ec0 <HAL_Init+0x40>)
 8000ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ea6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea8:	2003      	movs	r0, #3
 8000eaa:	f000 f94f 	bl	800114c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eae:	200f      	movs	r0, #15
 8000eb0:	f000 f808 	bl	8000ec4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb4:	f7ff fda4 	bl	8000a00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40023c00 	.word	0x40023c00

08000ec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ecc:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <HAL_InitTick+0x54>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <HAL_InitTick+0x58>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 f967 	bl	80011b6 <HAL_SYSTICK_Config>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e00e      	b.n	8000f10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2b0f      	cmp	r3, #15
 8000ef6:	d80a      	bhi.n	8000f0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	f04f 30ff 	mov.w	r0, #4294967295
 8000f00:	f000 f92f 	bl	8001162 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f04:	4a06      	ldr	r2, [pc, #24]	; (8000f20 <HAL_InitTick+0x5c>)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	e000      	b.n	8000f10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000000 	.word	0x20000000
 8000f1c:	20000008 	.word	0x20000008
 8000f20:	20000004 	.word	0x20000004

08000f24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <HAL_IncTick+0x20>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <HAL_IncTick+0x24>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4413      	add	r3, r2
 8000f34:	4a04      	ldr	r2, [pc, #16]	; (8000f48 <HAL_IncTick+0x24>)
 8000f36:	6013      	str	r3, [r2, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	20000008 	.word	0x20000008
 8000f48:	200001e8 	.word	0x200001e8

08000f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f50:	4b03      	ldr	r3, [pc, #12]	; (8000f60 <HAL_GetTick+0x14>)
 8000f52:	681b      	ldr	r3, [r3, #0]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	200001e8 	.word	0x200001e8

08000f64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f6c:	f7ff ffee 	bl	8000f4c <HAL_GetTick>
 8000f70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f7c:	d005      	beq.n	8000f8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <HAL_Delay+0x44>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	461a      	mov	r2, r3
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	4413      	add	r3, r2
 8000f88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f8a:	bf00      	nop
 8000f8c:	f7ff ffde 	bl	8000f4c <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d8f7      	bhi.n	8000f8c <HAL_Delay+0x28>
  {
  }
}
 8000f9c:	bf00      	nop
 8000f9e:	bf00      	nop
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000008 	.word	0x20000008

08000fac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fc2:	68ba      	ldr	r2, [r7, #8]
 8000fc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fc8:	4013      	ands	r3, r2
 8000fca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fde:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	60d3      	str	r3, [r2, #12]
}
 8000fe4:	bf00      	nop
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff8:	4b04      	ldr	r3, [pc, #16]	; (800100c <__NVIC_GetPriorityGrouping+0x18>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	0a1b      	lsrs	r3, r3, #8
 8000ffe:	f003 0307 	and.w	r3, r3, #7
}
 8001002:	4618      	mov	r0, r3
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	2b00      	cmp	r3, #0
 8001020:	db0b      	blt.n	800103a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	f003 021f 	and.w	r2, r3, #31
 8001028:	4907      	ldr	r1, [pc, #28]	; (8001048 <__NVIC_EnableIRQ+0x38>)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	095b      	lsrs	r3, r3, #5
 8001030:	2001      	movs	r0, #1
 8001032:	fa00 f202 	lsl.w	r2, r0, r2
 8001036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	e000e100 	.word	0xe000e100

0800104c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	6039      	str	r1, [r7, #0]
 8001056:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105c:	2b00      	cmp	r3, #0
 800105e:	db0a      	blt.n	8001076 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	b2da      	uxtb	r2, r3
 8001064:	490c      	ldr	r1, [pc, #48]	; (8001098 <__NVIC_SetPriority+0x4c>)
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	0112      	lsls	r2, r2, #4
 800106c:	b2d2      	uxtb	r2, r2
 800106e:	440b      	add	r3, r1
 8001070:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001074:	e00a      	b.n	800108c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	b2da      	uxtb	r2, r3
 800107a:	4908      	ldr	r1, [pc, #32]	; (800109c <__NVIC_SetPriority+0x50>)
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	f003 030f 	and.w	r3, r3, #15
 8001082:	3b04      	subs	r3, #4
 8001084:	0112      	lsls	r2, r2, #4
 8001086:	b2d2      	uxtb	r2, r2
 8001088:	440b      	add	r3, r1
 800108a:	761a      	strb	r2, [r3, #24]
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	e000e100 	.word	0xe000e100
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b089      	sub	sp, #36	; 0x24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	f1c3 0307 	rsb	r3, r3, #7
 80010ba:	2b04      	cmp	r3, #4
 80010bc:	bf28      	it	cs
 80010be:	2304      	movcs	r3, #4
 80010c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3304      	adds	r3, #4
 80010c6:	2b06      	cmp	r3, #6
 80010c8:	d902      	bls.n	80010d0 <NVIC_EncodePriority+0x30>
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3b03      	subs	r3, #3
 80010ce:	e000      	b.n	80010d2 <NVIC_EncodePriority+0x32>
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d4:	f04f 32ff 	mov.w	r2, #4294967295
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43da      	mvns	r2, r3
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	401a      	ands	r2, r3
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e8:	f04f 31ff 	mov.w	r1, #4294967295
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	fa01 f303 	lsl.w	r3, r1, r3
 80010f2:	43d9      	mvns	r1, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f8:	4313      	orrs	r3, r2
         );
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3724      	adds	r7, #36	; 0x24
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
	...

08001108 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3b01      	subs	r3, #1
 8001114:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001118:	d301      	bcc.n	800111e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800111a:	2301      	movs	r3, #1
 800111c:	e00f      	b.n	800113e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800111e:	4a0a      	ldr	r2, [pc, #40]	; (8001148 <SysTick_Config+0x40>)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3b01      	subs	r3, #1
 8001124:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001126:	210f      	movs	r1, #15
 8001128:	f04f 30ff 	mov.w	r0, #4294967295
 800112c:	f7ff ff8e 	bl	800104c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <SysTick_Config+0x40>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001136:	4b04      	ldr	r3, [pc, #16]	; (8001148 <SysTick_Config+0x40>)
 8001138:	2207      	movs	r2, #7
 800113a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	e000e010 	.word	0xe000e010

0800114c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff ff29 	bl	8000fac <__NVIC_SetPriorityGrouping>
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001162:	b580      	push	{r7, lr}
 8001164:	b086      	sub	sp, #24
 8001166:	af00      	add	r7, sp, #0
 8001168:	4603      	mov	r3, r0
 800116a:	60b9      	str	r1, [r7, #8]
 800116c:	607a      	str	r2, [r7, #4]
 800116e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001174:	f7ff ff3e 	bl	8000ff4 <__NVIC_GetPriorityGrouping>
 8001178:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	68b9      	ldr	r1, [r7, #8]
 800117e:	6978      	ldr	r0, [r7, #20]
 8001180:	f7ff ff8e 	bl	80010a0 <NVIC_EncodePriority>
 8001184:	4602      	mov	r2, r0
 8001186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800118a:	4611      	mov	r1, r2
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ff5d 	bl	800104c <__NVIC_SetPriority>
}
 8001192:	bf00      	nop
 8001194:	3718      	adds	r7, #24
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	4603      	mov	r3, r0
 80011a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ff31 	bl	8001010 <__NVIC_EnableIRQ>
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff ffa2 	bl	8001108 <SysTick_Config>
 80011c4:	4603      	mov	r3, r0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b089      	sub	sp, #36	; 0x24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011de:	2300      	movs	r3, #0
 80011e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
 80011ea:	e16b      	b.n	80014c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011ec:	2201      	movs	r2, #1
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	697a      	ldr	r2, [r7, #20]
 80011fc:	4013      	ands	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	429a      	cmp	r2, r3
 8001206:	f040 815a 	bne.w	80014be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f003 0303 	and.w	r3, r3, #3
 8001212:	2b01      	cmp	r3, #1
 8001214:	d005      	beq.n	8001222 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800121e:	2b02      	cmp	r3, #2
 8001220:	d130      	bne.n	8001284 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	2203      	movs	r2, #3
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43db      	mvns	r3, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4013      	ands	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	68da      	ldr	r2, [r3, #12]
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4313      	orrs	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001258:	2201      	movs	r2, #1
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	091b      	lsrs	r3, r3, #4
 800126e:	f003 0201 	and.w	r2, r3, #1
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f003 0303 	and.w	r3, r3, #3
 800128c:	2b03      	cmp	r3, #3
 800128e:	d017      	beq.n	80012c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	2203      	movs	r2, #3
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	43db      	mvns	r3, r3
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4013      	ands	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	689a      	ldr	r2, [r3, #8]
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f003 0303 	and.w	r3, r3, #3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d123      	bne.n	8001314 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	08da      	lsrs	r2, r3, #3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3208      	adds	r2, #8
 80012d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	f003 0307 	and.w	r3, r3, #7
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	220f      	movs	r2, #15
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	691a      	ldr	r2, [r3, #16]
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4313      	orrs	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	08da      	lsrs	r2, r3, #3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	3208      	adds	r2, #8
 800130e:	69b9      	ldr	r1, [r7, #24]
 8001310:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	2203      	movs	r2, #3
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f003 0203 	and.w	r2, r3, #3
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4313      	orrs	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001350:	2b00      	cmp	r3, #0
 8001352:	f000 80b4 	beq.w	80014be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	4b60      	ldr	r3, [pc, #384]	; (80014dc <HAL_GPIO_Init+0x30c>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135e:	4a5f      	ldr	r2, [pc, #380]	; (80014dc <HAL_GPIO_Init+0x30c>)
 8001360:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001364:	6453      	str	r3, [r2, #68]	; 0x44
 8001366:	4b5d      	ldr	r3, [pc, #372]	; (80014dc <HAL_GPIO_Init+0x30c>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001372:	4a5b      	ldr	r2, [pc, #364]	; (80014e0 <HAL_GPIO_Init+0x310>)
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	089b      	lsrs	r3, r3, #2
 8001378:	3302      	adds	r3, #2
 800137a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800137e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	f003 0303 	and.w	r3, r3, #3
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	220f      	movs	r2, #15
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43db      	mvns	r3, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4013      	ands	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a52      	ldr	r2, [pc, #328]	; (80014e4 <HAL_GPIO_Init+0x314>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d02b      	beq.n	80013f6 <HAL_GPIO_Init+0x226>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a51      	ldr	r2, [pc, #324]	; (80014e8 <HAL_GPIO_Init+0x318>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d025      	beq.n	80013f2 <HAL_GPIO_Init+0x222>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a50      	ldr	r2, [pc, #320]	; (80014ec <HAL_GPIO_Init+0x31c>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d01f      	beq.n	80013ee <HAL_GPIO_Init+0x21e>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a4f      	ldr	r2, [pc, #316]	; (80014f0 <HAL_GPIO_Init+0x320>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d019      	beq.n	80013ea <HAL_GPIO_Init+0x21a>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a4e      	ldr	r2, [pc, #312]	; (80014f4 <HAL_GPIO_Init+0x324>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d013      	beq.n	80013e6 <HAL_GPIO_Init+0x216>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a4d      	ldr	r2, [pc, #308]	; (80014f8 <HAL_GPIO_Init+0x328>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d00d      	beq.n	80013e2 <HAL_GPIO_Init+0x212>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a4c      	ldr	r2, [pc, #304]	; (80014fc <HAL_GPIO_Init+0x32c>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d007      	beq.n	80013de <HAL_GPIO_Init+0x20e>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a4b      	ldr	r2, [pc, #300]	; (8001500 <HAL_GPIO_Init+0x330>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d101      	bne.n	80013da <HAL_GPIO_Init+0x20a>
 80013d6:	2307      	movs	r3, #7
 80013d8:	e00e      	b.n	80013f8 <HAL_GPIO_Init+0x228>
 80013da:	2308      	movs	r3, #8
 80013dc:	e00c      	b.n	80013f8 <HAL_GPIO_Init+0x228>
 80013de:	2306      	movs	r3, #6
 80013e0:	e00a      	b.n	80013f8 <HAL_GPIO_Init+0x228>
 80013e2:	2305      	movs	r3, #5
 80013e4:	e008      	b.n	80013f8 <HAL_GPIO_Init+0x228>
 80013e6:	2304      	movs	r3, #4
 80013e8:	e006      	b.n	80013f8 <HAL_GPIO_Init+0x228>
 80013ea:	2303      	movs	r3, #3
 80013ec:	e004      	b.n	80013f8 <HAL_GPIO_Init+0x228>
 80013ee:	2302      	movs	r3, #2
 80013f0:	e002      	b.n	80013f8 <HAL_GPIO_Init+0x228>
 80013f2:	2301      	movs	r3, #1
 80013f4:	e000      	b.n	80013f8 <HAL_GPIO_Init+0x228>
 80013f6:	2300      	movs	r3, #0
 80013f8:	69fa      	ldr	r2, [r7, #28]
 80013fa:	f002 0203 	and.w	r2, r2, #3
 80013fe:	0092      	lsls	r2, r2, #2
 8001400:	4093      	lsls	r3, r2
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4313      	orrs	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001408:	4935      	ldr	r1, [pc, #212]	; (80014e0 <HAL_GPIO_Init+0x310>)
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	089b      	lsrs	r3, r3, #2
 800140e:	3302      	adds	r3, #2
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001416:	4b3b      	ldr	r3, [pc, #236]	; (8001504 <HAL_GPIO_Init+0x334>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	43db      	mvns	r3, r3
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	4013      	ands	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d003      	beq.n	800143a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	4313      	orrs	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800143a:	4a32      	ldr	r2, [pc, #200]	; (8001504 <HAL_GPIO_Init+0x334>)
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001440:	4b30      	ldr	r3, [pc, #192]	; (8001504 <HAL_GPIO_Init+0x334>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	43db      	mvns	r3, r3
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4013      	ands	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d003      	beq.n	8001464 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	4313      	orrs	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001464:	4a27      	ldr	r2, [pc, #156]	; (8001504 <HAL_GPIO_Init+0x334>)
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800146a:	4b26      	ldr	r3, [pc, #152]	; (8001504 <HAL_GPIO_Init+0x334>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	43db      	mvns	r3, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4013      	ands	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d003      	beq.n	800148e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	4313      	orrs	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800148e:	4a1d      	ldr	r2, [pc, #116]	; (8001504 <HAL_GPIO_Init+0x334>)
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001494:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <HAL_GPIO_Init+0x334>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	43db      	mvns	r3, r3
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4013      	ands	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d003      	beq.n	80014b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014b8:	4a12      	ldr	r2, [pc, #72]	; (8001504 <HAL_GPIO_Init+0x334>)
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	3301      	adds	r3, #1
 80014c2:	61fb      	str	r3, [r7, #28]
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	2b0f      	cmp	r3, #15
 80014c8:	f67f ae90 	bls.w	80011ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014cc:	bf00      	nop
 80014ce:	bf00      	nop
 80014d0:	3724      	adds	r7, #36	; 0x24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40013800 	.word	0x40013800
 80014e4:	40020000 	.word	0x40020000
 80014e8:	40020400 	.word	0x40020400
 80014ec:	40020800 	.word	0x40020800
 80014f0:	40020c00 	.word	0x40020c00
 80014f4:	40021000 	.word	0x40021000
 80014f8:	40021400 	.word	0x40021400
 80014fc:	40021800 	.word	0x40021800
 8001500:	40021c00 	.word	0x40021c00
 8001504:	40013c00 	.word	0x40013c00

08001508 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	460b      	mov	r3, r1
 8001512:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	691a      	ldr	r2, [r3, #16]
 8001518:	887b      	ldrh	r3, [r7, #2]
 800151a:	4013      	ands	r3, r2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d002      	beq.n	8001526 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001520:	2301      	movs	r3, #1
 8001522:	73fb      	strb	r3, [r7, #15]
 8001524:	e001      	b.n	800152a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001526:	2300      	movs	r3, #0
 8001528:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800152a:	7bfb      	ldrb	r3, [r7, #15]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	460b      	mov	r3, r1
 8001542:	807b      	strh	r3, [r7, #2]
 8001544:	4613      	mov	r3, r2
 8001546:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001548:	787b      	ldrb	r3, [r7, #1]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d003      	beq.n	8001556 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800154e:	887a      	ldrh	r2, [r7, #2]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001554:	e003      	b.n	800155e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001556:	887b      	ldrh	r3, [r7, #2]
 8001558:	041a      	lsls	r2, r3, #16
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	619a      	str	r2, [r3, #24]
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800156a:	b480      	push	{r7}
 800156c:	b085      	sub	sp, #20
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
 8001572:	460b      	mov	r3, r1
 8001574:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	695b      	ldr	r3, [r3, #20]
 800157a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800157c:	887a      	ldrh	r2, [r7, #2]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	4013      	ands	r3, r2
 8001582:	041a      	lsls	r2, r3, #16
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	43d9      	mvns	r1, r3
 8001588:	887b      	ldrh	r3, [r7, #2]
 800158a:	400b      	ands	r3, r1
 800158c:	431a      	orrs	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	619a      	str	r2, [r3, #24]
}
 8001592:	bf00      	nop
 8001594:	3714      	adds	r7, #20
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800159e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a0:	b08f      	sub	sp, #60	; 0x3c
 80015a2:	af0a      	add	r7, sp, #40	; 0x28
 80015a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d101      	bne.n	80015b0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e054      	b.n	800165a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d106      	bne.n	80015d0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f009 fd32 	bl	800b034 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2203      	movs	r2, #3
 80015d4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d102      	bne.n	80015ea <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f003 fba4 	bl	8004d3c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	603b      	str	r3, [r7, #0]
 80015fa:	687e      	ldr	r6, [r7, #4]
 80015fc:	466d      	mov	r5, sp
 80015fe:	f106 0410 	add.w	r4, r6, #16
 8001602:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001604:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001606:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001608:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800160a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800160e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001612:	1d33      	adds	r3, r6, #4
 8001614:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001616:	6838      	ldr	r0, [r7, #0]
 8001618:	f003 fb1e 	bl	8004c58 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2101      	movs	r1, #1
 8001622:	4618      	mov	r0, r3
 8001624:	f003 fb9b 	bl	8004d5e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	603b      	str	r3, [r7, #0]
 800162e:	687e      	ldr	r6, [r7, #4]
 8001630:	466d      	mov	r5, sp
 8001632:	f106 0410 	add.w	r4, r6, #16
 8001636:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001638:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800163a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800163c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800163e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001642:	e885 0003 	stmia.w	r5, {r0, r1}
 8001646:	1d33      	adds	r3, r6, #4
 8001648:	cb0e      	ldmia	r3, {r1, r2, r3}
 800164a:	6838      	ldr	r0, [r7, #0]
 800164c:	f003 fd24 	bl	8005098 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2201      	movs	r2, #1
 8001654:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3714      	adds	r7, #20
 800165e:	46bd      	mov	sp, r7
 8001660:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001662 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001662:	b590      	push	{r4, r7, lr}
 8001664:	b089      	sub	sp, #36	; 0x24
 8001666:	af04      	add	r7, sp, #16
 8001668:	6078      	str	r0, [r7, #4]
 800166a:	4608      	mov	r0, r1
 800166c:	4611      	mov	r1, r2
 800166e:	461a      	mov	r2, r3
 8001670:	4603      	mov	r3, r0
 8001672:	70fb      	strb	r3, [r7, #3]
 8001674:	460b      	mov	r3, r1
 8001676:	70bb      	strb	r3, [r7, #2]
 8001678:	4613      	mov	r3, r2
 800167a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001682:	2b01      	cmp	r3, #1
 8001684:	d101      	bne.n	800168a <HAL_HCD_HC_Init+0x28>
 8001686:	2302      	movs	r3, #2
 8001688:	e076      	b.n	8001778 <HAL_HCD_HC_Init+0x116>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2201      	movs	r2, #1
 800168e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001692:	78fb      	ldrb	r3, [r7, #3]
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	212c      	movs	r1, #44	; 0x2c
 8001698:	fb01 f303 	mul.w	r3, r1, r3
 800169c:	4413      	add	r3, r2
 800169e:	333d      	adds	r3, #61	; 0x3d
 80016a0:	2200      	movs	r2, #0
 80016a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80016a4:	78fb      	ldrb	r3, [r7, #3]
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	212c      	movs	r1, #44	; 0x2c
 80016aa:	fb01 f303 	mul.w	r3, r1, r3
 80016ae:	4413      	add	r3, r2
 80016b0:	3338      	adds	r3, #56	; 0x38
 80016b2:	787a      	ldrb	r2, [r7, #1]
 80016b4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80016b6:	78fb      	ldrb	r3, [r7, #3]
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	212c      	movs	r1, #44	; 0x2c
 80016bc:	fb01 f303 	mul.w	r3, r1, r3
 80016c0:	4413      	add	r3, r2
 80016c2:	3340      	adds	r3, #64	; 0x40
 80016c4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80016c6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80016c8:	78fb      	ldrb	r3, [r7, #3]
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	212c      	movs	r1, #44	; 0x2c
 80016ce:	fb01 f303 	mul.w	r3, r1, r3
 80016d2:	4413      	add	r3, r2
 80016d4:	3339      	adds	r3, #57	; 0x39
 80016d6:	78fa      	ldrb	r2, [r7, #3]
 80016d8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80016da:	78fb      	ldrb	r3, [r7, #3]
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	212c      	movs	r1, #44	; 0x2c
 80016e0:	fb01 f303 	mul.w	r3, r1, r3
 80016e4:	4413      	add	r3, r2
 80016e6:	333f      	adds	r3, #63	; 0x3f
 80016e8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80016ec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80016ee:	78fb      	ldrb	r3, [r7, #3]
 80016f0:	78ba      	ldrb	r2, [r7, #2]
 80016f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80016f6:	b2d0      	uxtb	r0, r2
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	212c      	movs	r1, #44	; 0x2c
 80016fc:	fb01 f303 	mul.w	r3, r1, r3
 8001700:	4413      	add	r3, r2
 8001702:	333a      	adds	r3, #58	; 0x3a
 8001704:	4602      	mov	r2, r0
 8001706:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001708:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800170c:	2b00      	cmp	r3, #0
 800170e:	da09      	bge.n	8001724 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001710:	78fb      	ldrb	r3, [r7, #3]
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	212c      	movs	r1, #44	; 0x2c
 8001716:	fb01 f303 	mul.w	r3, r1, r3
 800171a:	4413      	add	r3, r2
 800171c:	333b      	adds	r3, #59	; 0x3b
 800171e:	2201      	movs	r2, #1
 8001720:	701a      	strb	r2, [r3, #0]
 8001722:	e008      	b.n	8001736 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001724:	78fb      	ldrb	r3, [r7, #3]
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	212c      	movs	r1, #44	; 0x2c
 800172a:	fb01 f303 	mul.w	r3, r1, r3
 800172e:	4413      	add	r3, r2
 8001730:	333b      	adds	r3, #59	; 0x3b
 8001732:	2200      	movs	r2, #0
 8001734:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001736:	78fb      	ldrb	r3, [r7, #3]
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	212c      	movs	r1, #44	; 0x2c
 800173c:	fb01 f303 	mul.w	r3, r1, r3
 8001740:	4413      	add	r3, r2
 8001742:	333c      	adds	r3, #60	; 0x3c
 8001744:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001748:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6818      	ldr	r0, [r3, #0]
 800174e:	787c      	ldrb	r4, [r7, #1]
 8001750:	78ba      	ldrb	r2, [r7, #2]
 8001752:	78f9      	ldrb	r1, [r7, #3]
 8001754:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001756:	9302      	str	r3, [sp, #8]
 8001758:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800175c:	9301      	str	r3, [sp, #4]
 800175e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	4623      	mov	r3, r4
 8001766:	f003 fe1d 	bl	80053a4 <USB_HC_Init>
 800176a:	4603      	mov	r3, r0
 800176c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001776:	7bfb      	ldrb	r3, [r7, #15]
}
 8001778:	4618      	mov	r0, r3
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	bd90      	pop	{r4, r7, pc}

08001780 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	460b      	mov	r3, r1
 800178a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800178c:	2300      	movs	r3, #0
 800178e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001796:	2b01      	cmp	r3, #1
 8001798:	d101      	bne.n	800179e <HAL_HCD_HC_Halt+0x1e>
 800179a:	2302      	movs	r3, #2
 800179c:	e00f      	b.n	80017be <HAL_HCD_HC_Halt+0x3e>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2201      	movs	r2, #1
 80017a2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	78fa      	ldrb	r2, [r7, #3]
 80017ac:	4611      	mov	r1, r2
 80017ae:	4618      	mov	r0, r3
 80017b0:	f004 f86d 	bl	800588e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
	...

080017c8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	4608      	mov	r0, r1
 80017d2:	4611      	mov	r1, r2
 80017d4:	461a      	mov	r2, r3
 80017d6:	4603      	mov	r3, r0
 80017d8:	70fb      	strb	r3, [r7, #3]
 80017da:	460b      	mov	r3, r1
 80017dc:	70bb      	strb	r3, [r7, #2]
 80017de:	4613      	mov	r3, r2
 80017e0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80017e2:	78fb      	ldrb	r3, [r7, #3]
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	212c      	movs	r1, #44	; 0x2c
 80017e8:	fb01 f303 	mul.w	r3, r1, r3
 80017ec:	4413      	add	r3, r2
 80017ee:	333b      	adds	r3, #59	; 0x3b
 80017f0:	78ba      	ldrb	r2, [r7, #2]
 80017f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80017f4:	78fb      	ldrb	r3, [r7, #3]
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	212c      	movs	r1, #44	; 0x2c
 80017fa:	fb01 f303 	mul.w	r3, r1, r3
 80017fe:	4413      	add	r3, r2
 8001800:	333f      	adds	r3, #63	; 0x3f
 8001802:	787a      	ldrb	r2, [r7, #1]
 8001804:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001806:	7c3b      	ldrb	r3, [r7, #16]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d112      	bne.n	8001832 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800180c:	78fb      	ldrb	r3, [r7, #3]
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	212c      	movs	r1, #44	; 0x2c
 8001812:	fb01 f303 	mul.w	r3, r1, r3
 8001816:	4413      	add	r3, r2
 8001818:	3342      	adds	r3, #66	; 0x42
 800181a:	2203      	movs	r2, #3
 800181c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800181e:	78fb      	ldrb	r3, [r7, #3]
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	212c      	movs	r1, #44	; 0x2c
 8001824:	fb01 f303 	mul.w	r3, r1, r3
 8001828:	4413      	add	r3, r2
 800182a:	333d      	adds	r3, #61	; 0x3d
 800182c:	7f3a      	ldrb	r2, [r7, #28]
 800182e:	701a      	strb	r2, [r3, #0]
 8001830:	e008      	b.n	8001844 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001832:	78fb      	ldrb	r3, [r7, #3]
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	212c      	movs	r1, #44	; 0x2c
 8001838:	fb01 f303 	mul.w	r3, r1, r3
 800183c:	4413      	add	r3, r2
 800183e:	3342      	adds	r3, #66	; 0x42
 8001840:	2202      	movs	r2, #2
 8001842:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001844:	787b      	ldrb	r3, [r7, #1]
 8001846:	2b03      	cmp	r3, #3
 8001848:	f200 80c6 	bhi.w	80019d8 <HAL_HCD_HC_SubmitRequest+0x210>
 800184c:	a201      	add	r2, pc, #4	; (adr r2, 8001854 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800184e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001852:	bf00      	nop
 8001854:	08001865 	.word	0x08001865
 8001858:	080019c5 	.word	0x080019c5
 800185c:	080018c9 	.word	0x080018c9
 8001860:	08001947 	.word	0x08001947
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001864:	7c3b      	ldrb	r3, [r7, #16]
 8001866:	2b01      	cmp	r3, #1
 8001868:	f040 80b8 	bne.w	80019dc <HAL_HCD_HC_SubmitRequest+0x214>
 800186c:	78bb      	ldrb	r3, [r7, #2]
 800186e:	2b00      	cmp	r3, #0
 8001870:	f040 80b4 	bne.w	80019dc <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001874:	8b3b      	ldrh	r3, [r7, #24]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d108      	bne.n	800188c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800187a:	78fb      	ldrb	r3, [r7, #3]
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	212c      	movs	r1, #44	; 0x2c
 8001880:	fb01 f303 	mul.w	r3, r1, r3
 8001884:	4413      	add	r3, r2
 8001886:	3355      	adds	r3, #85	; 0x55
 8001888:	2201      	movs	r2, #1
 800188a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800188c:	78fb      	ldrb	r3, [r7, #3]
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	212c      	movs	r1, #44	; 0x2c
 8001892:	fb01 f303 	mul.w	r3, r1, r3
 8001896:	4413      	add	r3, r2
 8001898:	3355      	adds	r3, #85	; 0x55
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d109      	bne.n	80018b4 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018a0:	78fb      	ldrb	r3, [r7, #3]
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	212c      	movs	r1, #44	; 0x2c
 80018a6:	fb01 f303 	mul.w	r3, r1, r3
 80018aa:	4413      	add	r3, r2
 80018ac:	3342      	adds	r3, #66	; 0x42
 80018ae:	2200      	movs	r2, #0
 80018b0:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80018b2:	e093      	b.n	80019dc <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018b4:	78fb      	ldrb	r3, [r7, #3]
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	212c      	movs	r1, #44	; 0x2c
 80018ba:	fb01 f303 	mul.w	r3, r1, r3
 80018be:	4413      	add	r3, r2
 80018c0:	3342      	adds	r3, #66	; 0x42
 80018c2:	2202      	movs	r2, #2
 80018c4:	701a      	strb	r2, [r3, #0]
      break;
 80018c6:	e089      	b.n	80019dc <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80018c8:	78bb      	ldrb	r3, [r7, #2]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d11d      	bne.n	800190a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018ce:	78fb      	ldrb	r3, [r7, #3]
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	212c      	movs	r1, #44	; 0x2c
 80018d4:	fb01 f303 	mul.w	r3, r1, r3
 80018d8:	4413      	add	r3, r2
 80018da:	3355      	adds	r3, #85	; 0x55
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d109      	bne.n	80018f6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018e2:	78fb      	ldrb	r3, [r7, #3]
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	212c      	movs	r1, #44	; 0x2c
 80018e8:	fb01 f303 	mul.w	r3, r1, r3
 80018ec:	4413      	add	r3, r2
 80018ee:	3342      	adds	r3, #66	; 0x42
 80018f0:	2200      	movs	r2, #0
 80018f2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80018f4:	e073      	b.n	80019de <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018f6:	78fb      	ldrb	r3, [r7, #3]
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	212c      	movs	r1, #44	; 0x2c
 80018fc:	fb01 f303 	mul.w	r3, r1, r3
 8001900:	4413      	add	r3, r2
 8001902:	3342      	adds	r3, #66	; 0x42
 8001904:	2202      	movs	r2, #2
 8001906:	701a      	strb	r2, [r3, #0]
      break;
 8001908:	e069      	b.n	80019de <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800190a:	78fb      	ldrb	r3, [r7, #3]
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	212c      	movs	r1, #44	; 0x2c
 8001910:	fb01 f303 	mul.w	r3, r1, r3
 8001914:	4413      	add	r3, r2
 8001916:	3354      	adds	r3, #84	; 0x54
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d109      	bne.n	8001932 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800191e:	78fb      	ldrb	r3, [r7, #3]
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	212c      	movs	r1, #44	; 0x2c
 8001924:	fb01 f303 	mul.w	r3, r1, r3
 8001928:	4413      	add	r3, r2
 800192a:	3342      	adds	r3, #66	; 0x42
 800192c:	2200      	movs	r2, #0
 800192e:	701a      	strb	r2, [r3, #0]
      break;
 8001930:	e055      	b.n	80019de <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001932:	78fb      	ldrb	r3, [r7, #3]
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	212c      	movs	r1, #44	; 0x2c
 8001938:	fb01 f303 	mul.w	r3, r1, r3
 800193c:	4413      	add	r3, r2
 800193e:	3342      	adds	r3, #66	; 0x42
 8001940:	2202      	movs	r2, #2
 8001942:	701a      	strb	r2, [r3, #0]
      break;
 8001944:	e04b      	b.n	80019de <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001946:	78bb      	ldrb	r3, [r7, #2]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d11d      	bne.n	8001988 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800194c:	78fb      	ldrb	r3, [r7, #3]
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	212c      	movs	r1, #44	; 0x2c
 8001952:	fb01 f303 	mul.w	r3, r1, r3
 8001956:	4413      	add	r3, r2
 8001958:	3355      	adds	r3, #85	; 0x55
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d109      	bne.n	8001974 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001960:	78fb      	ldrb	r3, [r7, #3]
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	212c      	movs	r1, #44	; 0x2c
 8001966:	fb01 f303 	mul.w	r3, r1, r3
 800196a:	4413      	add	r3, r2
 800196c:	3342      	adds	r3, #66	; 0x42
 800196e:	2200      	movs	r2, #0
 8001970:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001972:	e034      	b.n	80019de <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001974:	78fb      	ldrb	r3, [r7, #3]
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	212c      	movs	r1, #44	; 0x2c
 800197a:	fb01 f303 	mul.w	r3, r1, r3
 800197e:	4413      	add	r3, r2
 8001980:	3342      	adds	r3, #66	; 0x42
 8001982:	2202      	movs	r2, #2
 8001984:	701a      	strb	r2, [r3, #0]
      break;
 8001986:	e02a      	b.n	80019de <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001988:	78fb      	ldrb	r3, [r7, #3]
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	212c      	movs	r1, #44	; 0x2c
 800198e:	fb01 f303 	mul.w	r3, r1, r3
 8001992:	4413      	add	r3, r2
 8001994:	3354      	adds	r3, #84	; 0x54
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d109      	bne.n	80019b0 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800199c:	78fb      	ldrb	r3, [r7, #3]
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	212c      	movs	r1, #44	; 0x2c
 80019a2:	fb01 f303 	mul.w	r3, r1, r3
 80019a6:	4413      	add	r3, r2
 80019a8:	3342      	adds	r3, #66	; 0x42
 80019aa:	2200      	movs	r2, #0
 80019ac:	701a      	strb	r2, [r3, #0]
      break;
 80019ae:	e016      	b.n	80019de <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019b0:	78fb      	ldrb	r3, [r7, #3]
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	212c      	movs	r1, #44	; 0x2c
 80019b6:	fb01 f303 	mul.w	r3, r1, r3
 80019ba:	4413      	add	r3, r2
 80019bc:	3342      	adds	r3, #66	; 0x42
 80019be:	2202      	movs	r2, #2
 80019c0:	701a      	strb	r2, [r3, #0]
      break;
 80019c2:	e00c      	b.n	80019de <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019c4:	78fb      	ldrb	r3, [r7, #3]
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	212c      	movs	r1, #44	; 0x2c
 80019ca:	fb01 f303 	mul.w	r3, r1, r3
 80019ce:	4413      	add	r3, r2
 80019d0:	3342      	adds	r3, #66	; 0x42
 80019d2:	2200      	movs	r2, #0
 80019d4:	701a      	strb	r2, [r3, #0]
      break;
 80019d6:	e002      	b.n	80019de <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80019d8:	bf00      	nop
 80019da:	e000      	b.n	80019de <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80019dc:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80019de:	78fb      	ldrb	r3, [r7, #3]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	212c      	movs	r1, #44	; 0x2c
 80019e4:	fb01 f303 	mul.w	r3, r1, r3
 80019e8:	4413      	add	r3, r2
 80019ea:	3344      	adds	r3, #68	; 0x44
 80019ec:	697a      	ldr	r2, [r7, #20]
 80019ee:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80019f0:	78fb      	ldrb	r3, [r7, #3]
 80019f2:	8b3a      	ldrh	r2, [r7, #24]
 80019f4:	6879      	ldr	r1, [r7, #4]
 80019f6:	202c      	movs	r0, #44	; 0x2c
 80019f8:	fb00 f303 	mul.w	r3, r0, r3
 80019fc:	440b      	add	r3, r1
 80019fe:	334c      	adds	r3, #76	; 0x4c
 8001a00:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a02:	78fb      	ldrb	r3, [r7, #3]
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	212c      	movs	r1, #44	; 0x2c
 8001a08:	fb01 f303 	mul.w	r3, r1, r3
 8001a0c:	4413      	add	r3, r2
 8001a0e:	3360      	adds	r3, #96	; 0x60
 8001a10:	2200      	movs	r2, #0
 8001a12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001a14:	78fb      	ldrb	r3, [r7, #3]
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	212c      	movs	r1, #44	; 0x2c
 8001a1a:	fb01 f303 	mul.w	r3, r1, r3
 8001a1e:	4413      	add	r3, r2
 8001a20:	3350      	adds	r3, #80	; 0x50
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a26:	78fb      	ldrb	r3, [r7, #3]
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	212c      	movs	r1, #44	; 0x2c
 8001a2c:	fb01 f303 	mul.w	r3, r1, r3
 8001a30:	4413      	add	r3, r2
 8001a32:	3339      	adds	r3, #57	; 0x39
 8001a34:	78fa      	ldrb	r2, [r7, #3]
 8001a36:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001a38:	78fb      	ldrb	r3, [r7, #3]
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	212c      	movs	r1, #44	; 0x2c
 8001a3e:	fb01 f303 	mul.w	r3, r1, r3
 8001a42:	4413      	add	r3, r2
 8001a44:	3361      	adds	r3, #97	; 0x61
 8001a46:	2200      	movs	r2, #0
 8001a48:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6818      	ldr	r0, [r3, #0]
 8001a4e:	78fb      	ldrb	r3, [r7, #3]
 8001a50:	222c      	movs	r2, #44	; 0x2c
 8001a52:	fb02 f303 	mul.w	r3, r2, r3
 8001a56:	3338      	adds	r3, #56	; 0x38
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	18d1      	adds	r1, r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	461a      	mov	r2, r3
 8001a64:	f003 fdc0 	bl	80055e8 <USB_HC_StartXfer>
 8001a68:	4603      	mov	r3, r0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop

08001a74 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f003 fac1 	bl	8005012 <USB_GetMode>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	f040 80f6 	bne.w	8001c84 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f003 faa5 	bl	8004fec <USB_ReadInterrupts>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f000 80ec 	beq.w	8001c82 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f003 fa9c 	bl	8004fec <USB_ReadInterrupts>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001abe:	d104      	bne.n	8001aca <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001ac8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f003 fa8c 	bl	8004fec <USB_ReadInterrupts>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ada:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ade:	d104      	bne.n	8001aea <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ae8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f003 fa7c 	bl	8004fec <USB_ReadInterrupts>
 8001af4:	4603      	mov	r3, r0
 8001af6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001afa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001afe:	d104      	bne.n	8001b0a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b08:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f003 fa6c 	bl	8004fec <USB_ReadInterrupts>
 8001b14:	4603      	mov	r3, r0
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d103      	bne.n	8001b26 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2202      	movs	r2, #2
 8001b24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f003 fa5e 	bl	8004fec <USB_ReadInterrupts>
 8001b30:	4603      	mov	r3, r0
 8001b32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b3a:	d11c      	bne.n	8001b76 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001b44:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10f      	bne.n	8001b76 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001b56:	2110      	movs	r1, #16
 8001b58:	6938      	ldr	r0, [r7, #16]
 8001b5a:	f003 f94d 	bl	8004df8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001b5e:	6938      	ldr	r0, [r7, #16]
 8001b60:	f003 f97e 	bl	8004e60 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2101      	movs	r1, #1
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f003 fb54 	bl	8005218 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f009 fadd 	bl	800b130 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f003 fa36 	bl	8004fec <USB_ReadInterrupts>
 8001b80:	4603      	mov	r3, r0
 8001b82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b86:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b8a:	d102      	bne.n	8001b92 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f001 f89e 	bl	8002cce <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f003 fa28 	bl	8004fec <USB_ReadInterrupts>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	f003 0308 	and.w	r3, r3, #8
 8001ba2:	2b08      	cmp	r3, #8
 8001ba4:	d106      	bne.n	8001bb4 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f009 faa6 	bl	800b0f8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2208      	movs	r2, #8
 8001bb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f003 fa17 	bl	8004fec <USB_ReadInterrupts>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	f003 0310 	and.w	r3, r3, #16
 8001bc4:	2b10      	cmp	r3, #16
 8001bc6:	d101      	bne.n	8001bcc <HAL_HCD_IRQHandler+0x158>
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e000      	b.n	8001bce <HAL_HCD_IRQHandler+0x15a>
 8001bcc:	2300      	movs	r3, #0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d012      	beq.n	8001bf8 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	699a      	ldr	r2, [r3, #24]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f022 0210 	bic.w	r2, r2, #16
 8001be0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 ffa1 	bl	8002b2a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	699a      	ldr	r2, [r3, #24]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f042 0210 	orr.w	r2, r2, #16
 8001bf6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f003 f9f5 	bl	8004fec <USB_ReadInterrupts>
 8001c02:	4603      	mov	r3, r0
 8001c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c0c:	d13a      	bne.n	8001c84 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f003 fe2a 	bl	800586c <USB_HC_ReadInterrupt>
 8001c18:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	617b      	str	r3, [r7, #20]
 8001c1e:	e025      	b.n	8001c6c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	68ba      	ldr	r2, [r7, #8]
 8001c28:	fa22 f303 	lsr.w	r3, r2, r3
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d018      	beq.n	8001c66 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	015a      	lsls	r2, r3, #5
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c4a:	d106      	bne.n	8001c5a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	4619      	mov	r1, r3
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f8ab 	bl	8001dae <HCD_HC_IN_IRQHandler>
 8001c58:	e005      	b.n	8001c66 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	4619      	mov	r1, r3
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 fbf9 	bl	8002458 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	617b      	str	r3, [r7, #20]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d3d4      	bcc.n	8001c20 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c7e:	615a      	str	r2, [r3, #20]
 8001c80:	e000      	b.n	8001c84 <HAL_HCD_IRQHandler+0x210>
      return;
 8001c82:	bf00      	nop
    }
  }
}
 8001c84:	3718      	adds	r7, #24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d101      	bne.n	8001ca0 <HAL_HCD_Start+0x16>
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	e013      	b.n	8001cc8 <HAL_HCD_Start+0x3e>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2101      	movs	r1, #1
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f003 fb16 	bl	80052e0 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f003 f82e 	bl	8004d1a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d101      	bne.n	8001ce6 <HAL_HCD_Stop+0x16>
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	e00d      	b.n	8001d02 <HAL_HCD_Stop+0x32>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f003 ff04 	bl	8005b00 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f003 fab8 	bl	800528c <USB_ResetPort>
 8001d1c:	4603      	mov	r3, r0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	460b      	mov	r3, r1
 8001d30:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d32:	78fb      	ldrb	r3, [r7, #3]
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	212c      	movs	r1, #44	; 0x2c
 8001d38:	fb01 f303 	mul.w	r3, r1, r3
 8001d3c:	4413      	add	r3, r2
 8001d3e:	3360      	adds	r3, #96	; 0x60
 8001d40:	781b      	ldrb	r3, [r3, #0]
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b083      	sub	sp, #12
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
 8001d56:	460b      	mov	r3, r1
 8001d58:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001d5a:	78fb      	ldrb	r3, [r7, #3]
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	212c      	movs	r1, #44	; 0x2c
 8001d60:	fb01 f303 	mul.w	r3, r1, r3
 8001d64:	4413      	add	r3, r2
 8001d66:	3350      	adds	r3, #80	; 0x50
 8001d68:	681b      	ldr	r3, [r3, #0]
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b082      	sub	sp, #8
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f003 fafc 	bl	8005380 <USB_GetCurrentFrame>
 8001d88:	4603      	mov	r3, r0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b082      	sub	sp, #8
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f003 fad7 	bl	8005352 <USB_GetHostSpeed>
 8001da4:	4603      	mov	r3, r0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b086      	sub	sp, #24
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
 8001db6:	460b      	mov	r3, r1
 8001db8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001dc4:	78fb      	ldrb	r3, [r7, #3]
 8001dc6:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	015a      	lsls	r2, r3, #5
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	4413      	add	r3, r2
 8001dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	d11a      	bne.n	8001e14 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	015a      	lsls	r2, r3, #5
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	4413      	add	r3, r2
 8001de6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dea:	461a      	mov	r2, r3
 8001dec:	2304      	movs	r3, #4
 8001dee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	212c      	movs	r1, #44	; 0x2c
 8001df6:	fb01 f303 	mul.w	r3, r1, r3
 8001dfa:	4413      	add	r3, r2
 8001dfc:	3361      	adds	r3, #97	; 0x61
 8001dfe:	2206      	movs	r2, #6
 8001e00:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	b2d2      	uxtb	r2, r2
 8001e0a:	4611      	mov	r1, r2
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f003 fd3e 	bl	800588e <USB_HC_Halt>
 8001e12:	e0af      	b.n	8001f74 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	015a      	lsls	r2, r3, #5
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e2a:	d11b      	bne.n	8001e64 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	015a      	lsls	r2, r3, #5
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	4413      	add	r3, r2
 8001e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e38:	461a      	mov	r2, r3
 8001e3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e3e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	212c      	movs	r1, #44	; 0x2c
 8001e46:	fb01 f303 	mul.w	r3, r1, r3
 8001e4a:	4413      	add	r3, r2
 8001e4c:	3361      	adds	r3, #97	; 0x61
 8001e4e:	2207      	movs	r2, #7
 8001e50:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	b2d2      	uxtb	r2, r2
 8001e5a:	4611      	mov	r1, r2
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f003 fd16 	bl	800588e <USB_HC_Halt>
 8001e62:	e087      	b.n	8001f74 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	015a      	lsls	r2, r3, #5
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 0320 	and.w	r3, r3, #32
 8001e76:	2b20      	cmp	r3, #32
 8001e78:	d109      	bne.n	8001e8e <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	015a      	lsls	r2, r3, #5
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	4413      	add	r3, r2
 8001e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e86:	461a      	mov	r2, r3
 8001e88:	2320      	movs	r3, #32
 8001e8a:	6093      	str	r3, [r2, #8]
 8001e8c:	e072      	b.n	8001f74 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	015a      	lsls	r2, r3, #5
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	4413      	add	r3, r2
 8001e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f003 0308 	and.w	r3, r3, #8
 8001ea0:	2b08      	cmp	r3, #8
 8001ea2:	d11a      	bne.n	8001eda <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	015a      	lsls	r2, r3, #5
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	4413      	add	r3, r2
 8001eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	2308      	movs	r3, #8
 8001eb4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	212c      	movs	r1, #44	; 0x2c
 8001ebc:	fb01 f303 	mul.w	r3, r1, r3
 8001ec0:	4413      	add	r3, r2
 8001ec2:	3361      	adds	r3, #97	; 0x61
 8001ec4:	2205      	movs	r2, #5
 8001ec6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68fa      	ldr	r2, [r7, #12]
 8001ece:	b2d2      	uxtb	r2, r2
 8001ed0:	4611      	mov	r1, r2
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f003 fcdb 	bl	800588e <USB_HC_Halt>
 8001ed8:	e04c      	b.n	8001f74 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	015a      	lsls	r2, r3, #5
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ef0:	d11b      	bne.n	8001f2a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	015a      	lsls	r2, r3, #5
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	4413      	add	r3, r2
 8001efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001efe:	461a      	mov	r2, r3
 8001f00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f04:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	212c      	movs	r1, #44	; 0x2c
 8001f0c:	fb01 f303 	mul.w	r3, r1, r3
 8001f10:	4413      	add	r3, r2
 8001f12:	3361      	adds	r3, #97	; 0x61
 8001f14:	2208      	movs	r2, #8
 8001f16:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	b2d2      	uxtb	r2, r2
 8001f20:	4611      	mov	r1, r2
 8001f22:	4618      	mov	r0, r3
 8001f24:	f003 fcb3 	bl	800588e <USB_HC_Halt>
 8001f28:	e024      	b.n	8001f74 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	015a      	lsls	r2, r3, #5
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	4413      	add	r3, r2
 8001f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f3c:	2b80      	cmp	r3, #128	; 0x80
 8001f3e:	d119      	bne.n	8001f74 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	015a      	lsls	r2, r3, #5
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	4413      	add	r3, r2
 8001f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	2380      	movs	r3, #128	; 0x80
 8001f50:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	212c      	movs	r1, #44	; 0x2c
 8001f58:	fb01 f303 	mul.w	r3, r1, r3
 8001f5c:	4413      	add	r3, r2
 8001f5e:	3361      	adds	r3, #97	; 0x61
 8001f60:	2206      	movs	r2, #6
 8001f62:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	b2d2      	uxtb	r2, r2
 8001f6c:	4611      	mov	r1, r2
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f003 fc8d 	bl	800588e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	015a      	lsls	r2, r3, #5
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f8a:	d112      	bne.n	8001fb2 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	b2d2      	uxtb	r2, r2
 8001f94:	4611      	mov	r1, r2
 8001f96:	4618      	mov	r0, r3
 8001f98:	f003 fc79 	bl	800588e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	015a      	lsls	r2, r3, #5
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa8:	461a      	mov	r2, r3
 8001faa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fae:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001fb0:	e24e      	b.n	8002450 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	015a      	lsls	r2, r3, #5
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	4413      	add	r3, r2
 8001fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f003 0301 	and.w	r3, r3, #1
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	f040 80df 	bne.w	8002188 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d019      	beq.n	8002006 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	212c      	movs	r1, #44	; 0x2c
 8001fd8:	fb01 f303 	mul.w	r3, r1, r3
 8001fdc:	4413      	add	r3, r2
 8001fde:	3348      	adds	r3, #72	; 0x48
 8001fe0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	0159      	lsls	r1, r3, #5
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	440b      	add	r3, r1
 8001fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001ff4:	1ad2      	subs	r2, r2, r3
 8001ff6:	6879      	ldr	r1, [r7, #4]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	202c      	movs	r0, #44	; 0x2c
 8001ffc:	fb00 f303 	mul.w	r3, r0, r3
 8002000:	440b      	add	r3, r1
 8002002:	3350      	adds	r3, #80	; 0x50
 8002004:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	212c      	movs	r1, #44	; 0x2c
 800200c:	fb01 f303 	mul.w	r3, r1, r3
 8002010:	4413      	add	r3, r2
 8002012:	3361      	adds	r3, #97	; 0x61
 8002014:	2201      	movs	r2, #1
 8002016:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	212c      	movs	r1, #44	; 0x2c
 800201e:	fb01 f303 	mul.w	r3, r1, r3
 8002022:	4413      	add	r3, r2
 8002024:	335c      	adds	r3, #92	; 0x5c
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	015a      	lsls	r2, r3, #5
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	4413      	add	r3, r2
 8002032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002036:	461a      	mov	r2, r3
 8002038:	2301      	movs	r3, #1
 800203a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	212c      	movs	r1, #44	; 0x2c
 8002042:	fb01 f303 	mul.w	r3, r1, r3
 8002046:	4413      	add	r3, r2
 8002048:	333f      	adds	r3, #63	; 0x3f
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d009      	beq.n	8002064 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	212c      	movs	r1, #44	; 0x2c
 8002056:	fb01 f303 	mul.w	r3, r1, r3
 800205a:	4413      	add	r3, r2
 800205c:	333f      	adds	r3, #63	; 0x3f
 800205e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002060:	2b02      	cmp	r3, #2
 8002062:	d111      	bne.n	8002088 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	b2d2      	uxtb	r2, r2
 800206c:	4611      	mov	r1, r2
 800206e:	4618      	mov	r0, r3
 8002070:	f003 fc0d 	bl	800588e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	015a      	lsls	r2, r3, #5
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	4413      	add	r3, r2
 800207c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002080:	461a      	mov	r2, r3
 8002082:	2310      	movs	r3, #16
 8002084:	6093      	str	r3, [r2, #8]
 8002086:	e03a      	b.n	80020fe <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	212c      	movs	r1, #44	; 0x2c
 800208e:	fb01 f303 	mul.w	r3, r1, r3
 8002092:	4413      	add	r3, r2
 8002094:	333f      	adds	r3, #63	; 0x3f
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	2b03      	cmp	r3, #3
 800209a:	d009      	beq.n	80020b0 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	212c      	movs	r1, #44	; 0x2c
 80020a2:	fb01 f303 	mul.w	r3, r1, r3
 80020a6:	4413      	add	r3, r2
 80020a8:	333f      	adds	r3, #63	; 0x3f
 80020aa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d126      	bne.n	80020fe <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	015a      	lsls	r2, r3, #5
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	4413      	add	r3, r2
 80020b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	0151      	lsls	r1, r2, #5
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	440a      	add	r2, r1
 80020c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80020ce:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	212c      	movs	r1, #44	; 0x2c
 80020d6:	fb01 f303 	mul.w	r3, r1, r3
 80020da:	4413      	add	r3, r2
 80020dc:	3360      	adds	r3, #96	; 0x60
 80020de:	2201      	movs	r2, #1
 80020e0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	b2d9      	uxtb	r1, r3
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	202c      	movs	r0, #44	; 0x2c
 80020ec:	fb00 f303 	mul.w	r3, r0, r3
 80020f0:	4413      	add	r3, r2
 80020f2:	3360      	adds	r3, #96	; 0x60
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	461a      	mov	r2, r3
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f009 f827 	bl	800b14c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d12b      	bne.n	800215e <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	212c      	movs	r1, #44	; 0x2c
 800210c:	fb01 f303 	mul.w	r3, r1, r3
 8002110:	4413      	add	r3, r2
 8002112:	3348      	adds	r3, #72	; 0x48
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	68fa      	ldr	r2, [r7, #12]
 800211a:	202c      	movs	r0, #44	; 0x2c
 800211c:	fb00 f202 	mul.w	r2, r0, r2
 8002120:	440a      	add	r2, r1
 8002122:	3240      	adds	r2, #64	; 0x40
 8002124:	8812      	ldrh	r2, [r2, #0]
 8002126:	fbb3 f3f2 	udiv	r3, r3, r2
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b00      	cmp	r3, #0
 8002130:	f000 818e 	beq.w	8002450 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	212c      	movs	r1, #44	; 0x2c
 800213a:	fb01 f303 	mul.w	r3, r1, r3
 800213e:	4413      	add	r3, r2
 8002140:	3354      	adds	r3, #84	; 0x54
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	f083 0301 	eor.w	r3, r3, #1
 8002148:	b2d8      	uxtb	r0, r3
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	212c      	movs	r1, #44	; 0x2c
 8002150:	fb01 f303 	mul.w	r3, r1, r3
 8002154:	4413      	add	r3, r2
 8002156:	3354      	adds	r3, #84	; 0x54
 8002158:	4602      	mov	r2, r0
 800215a:	701a      	strb	r2, [r3, #0]
}
 800215c:	e178      	b.n	8002450 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	212c      	movs	r1, #44	; 0x2c
 8002164:	fb01 f303 	mul.w	r3, r1, r3
 8002168:	4413      	add	r3, r2
 800216a:	3354      	adds	r3, #84	; 0x54
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	f083 0301 	eor.w	r3, r3, #1
 8002172:	b2d8      	uxtb	r0, r3
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	212c      	movs	r1, #44	; 0x2c
 800217a:	fb01 f303 	mul.w	r3, r1, r3
 800217e:	4413      	add	r3, r2
 8002180:	3354      	adds	r3, #84	; 0x54
 8002182:	4602      	mov	r2, r0
 8002184:	701a      	strb	r2, [r3, #0]
}
 8002186:	e163      	b.n	8002450 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	015a      	lsls	r2, r3, #5
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	4413      	add	r3, r2
 8002190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b02      	cmp	r3, #2
 800219c:	f040 80f6 	bne.w	800238c <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	212c      	movs	r1, #44	; 0x2c
 80021a6:	fb01 f303 	mul.w	r3, r1, r3
 80021aa:	4413      	add	r3, r2
 80021ac:	3361      	adds	r3, #97	; 0x61
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d109      	bne.n	80021c8 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	212c      	movs	r1, #44	; 0x2c
 80021ba:	fb01 f303 	mul.w	r3, r1, r3
 80021be:	4413      	add	r3, r2
 80021c0:	3360      	adds	r3, #96	; 0x60
 80021c2:	2201      	movs	r2, #1
 80021c4:	701a      	strb	r2, [r3, #0]
 80021c6:	e0c9      	b.n	800235c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	212c      	movs	r1, #44	; 0x2c
 80021ce:	fb01 f303 	mul.w	r3, r1, r3
 80021d2:	4413      	add	r3, r2
 80021d4:	3361      	adds	r3, #97	; 0x61
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b05      	cmp	r3, #5
 80021da:	d109      	bne.n	80021f0 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	212c      	movs	r1, #44	; 0x2c
 80021e2:	fb01 f303 	mul.w	r3, r1, r3
 80021e6:	4413      	add	r3, r2
 80021e8:	3360      	adds	r3, #96	; 0x60
 80021ea:	2205      	movs	r2, #5
 80021ec:	701a      	strb	r2, [r3, #0]
 80021ee:	e0b5      	b.n	800235c <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	212c      	movs	r1, #44	; 0x2c
 80021f6:	fb01 f303 	mul.w	r3, r1, r3
 80021fa:	4413      	add	r3, r2
 80021fc:	3361      	adds	r3, #97	; 0x61
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	2b06      	cmp	r3, #6
 8002202:	d009      	beq.n	8002218 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	212c      	movs	r1, #44	; 0x2c
 800220a:	fb01 f303 	mul.w	r3, r1, r3
 800220e:	4413      	add	r3, r2
 8002210:	3361      	adds	r3, #97	; 0x61
 8002212:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002214:	2b08      	cmp	r3, #8
 8002216:	d150      	bne.n	80022ba <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	212c      	movs	r1, #44	; 0x2c
 800221e:	fb01 f303 	mul.w	r3, r1, r3
 8002222:	4413      	add	r3, r2
 8002224:	335c      	adds	r3, #92	; 0x5c
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	1c5a      	adds	r2, r3, #1
 800222a:	6879      	ldr	r1, [r7, #4]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	202c      	movs	r0, #44	; 0x2c
 8002230:	fb00 f303 	mul.w	r3, r0, r3
 8002234:	440b      	add	r3, r1
 8002236:	335c      	adds	r3, #92	; 0x5c
 8002238:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	212c      	movs	r1, #44	; 0x2c
 8002240:	fb01 f303 	mul.w	r3, r1, r3
 8002244:	4413      	add	r3, r2
 8002246:	335c      	adds	r3, #92	; 0x5c
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2b02      	cmp	r3, #2
 800224c:	d912      	bls.n	8002274 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	212c      	movs	r1, #44	; 0x2c
 8002254:	fb01 f303 	mul.w	r3, r1, r3
 8002258:	4413      	add	r3, r2
 800225a:	335c      	adds	r3, #92	; 0x5c
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	212c      	movs	r1, #44	; 0x2c
 8002266:	fb01 f303 	mul.w	r3, r1, r3
 800226a:	4413      	add	r3, r2
 800226c:	3360      	adds	r3, #96	; 0x60
 800226e:	2204      	movs	r2, #4
 8002270:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002272:	e073      	b.n	800235c <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	212c      	movs	r1, #44	; 0x2c
 800227a:	fb01 f303 	mul.w	r3, r1, r3
 800227e:	4413      	add	r3, r2
 8002280:	3360      	adds	r3, #96	; 0x60
 8002282:	2202      	movs	r2, #2
 8002284:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	015a      	lsls	r2, r3, #5
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	4413      	add	r3, r2
 800228e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800229c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022a4:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	015a      	lsls	r2, r3, #5
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	4413      	add	r3, r2
 80022ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b2:	461a      	mov	r2, r3
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80022b8:	e050      	b.n	800235c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	212c      	movs	r1, #44	; 0x2c
 80022c0:	fb01 f303 	mul.w	r3, r1, r3
 80022c4:	4413      	add	r3, r2
 80022c6:	3361      	adds	r3, #97	; 0x61
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	2b03      	cmp	r3, #3
 80022cc:	d122      	bne.n	8002314 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	212c      	movs	r1, #44	; 0x2c
 80022d4:	fb01 f303 	mul.w	r3, r1, r3
 80022d8:	4413      	add	r3, r2
 80022da:	3360      	adds	r3, #96	; 0x60
 80022dc:	2202      	movs	r2, #2
 80022de:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	015a      	lsls	r2, r3, #5
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	4413      	add	r3, r2
 80022e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80022f6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022fe:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	015a      	lsls	r2, r3, #5
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	4413      	add	r3, r2
 8002308:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800230c:	461a      	mov	r2, r3
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	6013      	str	r3, [r2, #0]
 8002312:	e023      	b.n	800235c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	212c      	movs	r1, #44	; 0x2c
 800231a:	fb01 f303 	mul.w	r3, r1, r3
 800231e:	4413      	add	r3, r2
 8002320:	3361      	adds	r3, #97	; 0x61
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2b07      	cmp	r3, #7
 8002326:	d119      	bne.n	800235c <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	212c      	movs	r1, #44	; 0x2c
 800232e:	fb01 f303 	mul.w	r3, r1, r3
 8002332:	4413      	add	r3, r2
 8002334:	335c      	adds	r3, #92	; 0x5c
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	1c5a      	adds	r2, r3, #1
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	202c      	movs	r0, #44	; 0x2c
 8002340:	fb00 f303 	mul.w	r3, r0, r3
 8002344:	440b      	add	r3, r1
 8002346:	335c      	adds	r3, #92	; 0x5c
 8002348:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	212c      	movs	r1, #44	; 0x2c
 8002350:	fb01 f303 	mul.w	r3, r1, r3
 8002354:	4413      	add	r3, r2
 8002356:	3360      	adds	r3, #96	; 0x60
 8002358:	2204      	movs	r2, #4
 800235a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	015a      	lsls	r2, r3, #5
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	4413      	add	r3, r2
 8002364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002368:	461a      	mov	r2, r3
 800236a:	2302      	movs	r3, #2
 800236c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	b2d9      	uxtb	r1, r3
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	202c      	movs	r0, #44	; 0x2c
 8002378:	fb00 f303 	mul.w	r3, r0, r3
 800237c:	4413      	add	r3, r2
 800237e:	3360      	adds	r3, #96	; 0x60
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	461a      	mov	r2, r3
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f008 fee1 	bl	800b14c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800238a:	e061      	b.n	8002450 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	015a      	lsls	r2, r3, #5
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	4413      	add	r3, r2
 8002394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f003 0310 	and.w	r3, r3, #16
 800239e:	2b10      	cmp	r3, #16
 80023a0:	d156      	bne.n	8002450 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	212c      	movs	r1, #44	; 0x2c
 80023a8:	fb01 f303 	mul.w	r3, r1, r3
 80023ac:	4413      	add	r3, r2
 80023ae:	333f      	adds	r3, #63	; 0x3f
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	2b03      	cmp	r3, #3
 80023b4:	d111      	bne.n	80023da <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	212c      	movs	r1, #44	; 0x2c
 80023bc:	fb01 f303 	mul.w	r3, r1, r3
 80023c0:	4413      	add	r3, r2
 80023c2:	335c      	adds	r3, #92	; 0x5c
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	4611      	mov	r1, r2
 80023d2:	4618      	mov	r0, r3
 80023d4:	f003 fa5b 	bl	800588e <USB_HC_Halt>
 80023d8:	e031      	b.n	800243e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	212c      	movs	r1, #44	; 0x2c
 80023e0:	fb01 f303 	mul.w	r3, r1, r3
 80023e4:	4413      	add	r3, r2
 80023e6:	333f      	adds	r3, #63	; 0x3f
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d009      	beq.n	8002402 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	212c      	movs	r1, #44	; 0x2c
 80023f4:	fb01 f303 	mul.w	r3, r1, r3
 80023f8:	4413      	add	r3, r2
 80023fa:	333f      	adds	r3, #63	; 0x3f
 80023fc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d11d      	bne.n	800243e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	212c      	movs	r1, #44	; 0x2c
 8002408:	fb01 f303 	mul.w	r3, r1, r3
 800240c:	4413      	add	r3, r2
 800240e:	335c      	adds	r3, #92	; 0x5c
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d110      	bne.n	800243e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	212c      	movs	r1, #44	; 0x2c
 8002422:	fb01 f303 	mul.w	r3, r1, r3
 8002426:	4413      	add	r3, r2
 8002428:	3361      	adds	r3, #97	; 0x61
 800242a:	2203      	movs	r2, #3
 800242c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	b2d2      	uxtb	r2, r2
 8002436:	4611      	mov	r1, r2
 8002438:	4618      	mov	r0, r3
 800243a:	f003 fa28 	bl	800588e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	015a      	lsls	r2, r3, #5
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	4413      	add	r3, r2
 8002446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800244a:	461a      	mov	r2, r3
 800244c:	2310      	movs	r3, #16
 800244e:	6093      	str	r3, [r2, #8]
}
 8002450:	bf00      	nop
 8002452:	3718      	adds	r7, #24
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b088      	sub	sp, #32
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	460b      	mov	r3, r1
 8002462:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800246e:	78fb      	ldrb	r3, [r7, #3]
 8002470:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	015a      	lsls	r2, r3, #5
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	4413      	add	r3, r2
 800247a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	2b04      	cmp	r3, #4
 8002486:	d11a      	bne.n	80024be <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	015a      	lsls	r2, r3, #5
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	4413      	add	r3, r2
 8002490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002494:	461a      	mov	r2, r3
 8002496:	2304      	movs	r3, #4
 8002498:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	212c      	movs	r1, #44	; 0x2c
 80024a0:	fb01 f303 	mul.w	r3, r1, r3
 80024a4:	4413      	add	r3, r2
 80024a6:	3361      	adds	r3, #97	; 0x61
 80024a8:	2206      	movs	r2, #6
 80024aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	4611      	mov	r1, r2
 80024b6:	4618      	mov	r0, r3
 80024b8:	f003 f9e9 	bl	800588e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80024bc:	e331      	b.n	8002b22 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	015a      	lsls	r2, r3, #5
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	4413      	add	r3, r2
 80024c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f003 0320 	and.w	r3, r3, #32
 80024d0:	2b20      	cmp	r3, #32
 80024d2:	d12e      	bne.n	8002532 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	015a      	lsls	r2, r3, #5
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	4413      	add	r3, r2
 80024dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e0:	461a      	mov	r2, r3
 80024e2:	2320      	movs	r3, #32
 80024e4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	212c      	movs	r1, #44	; 0x2c
 80024ec:	fb01 f303 	mul.w	r3, r1, r3
 80024f0:	4413      	add	r3, r2
 80024f2:	333d      	adds	r3, #61	; 0x3d
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	f040 8313 	bne.w	8002b22 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	212c      	movs	r1, #44	; 0x2c
 8002502:	fb01 f303 	mul.w	r3, r1, r3
 8002506:	4413      	add	r3, r2
 8002508:	333d      	adds	r3, #61	; 0x3d
 800250a:	2200      	movs	r2, #0
 800250c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	212c      	movs	r1, #44	; 0x2c
 8002514:	fb01 f303 	mul.w	r3, r1, r3
 8002518:	4413      	add	r3, r2
 800251a:	3360      	adds	r3, #96	; 0x60
 800251c:	2202      	movs	r2, #2
 800251e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	697a      	ldr	r2, [r7, #20]
 8002526:	b2d2      	uxtb	r2, r2
 8002528:	4611      	mov	r1, r2
 800252a:	4618      	mov	r0, r3
 800252c:	f003 f9af 	bl	800588e <USB_HC_Halt>
}
 8002530:	e2f7      	b.n	8002b22 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	015a      	lsls	r2, r3, #5
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	4413      	add	r3, r2
 800253a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002544:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002548:	d112      	bne.n	8002570 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	015a      	lsls	r2, r3, #5
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	4413      	add	r3, r2
 8002552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002556:	461a      	mov	r2, r3
 8002558:	f44f 7300 	mov.w	r3, #512	; 0x200
 800255c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	4611      	mov	r1, r2
 8002568:	4618      	mov	r0, r3
 800256a:	f003 f990 	bl	800588e <USB_HC_Halt>
}
 800256e:	e2d8      	b.n	8002b22 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	015a      	lsls	r2, r3, #5
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	4413      	add	r3, r2
 8002578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b01      	cmp	r3, #1
 8002584:	d140      	bne.n	8002608 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	212c      	movs	r1, #44	; 0x2c
 800258c:	fb01 f303 	mul.w	r3, r1, r3
 8002590:	4413      	add	r3, r2
 8002592:	335c      	adds	r3, #92	; 0x5c
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	015a      	lsls	r2, r3, #5
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	4413      	add	r3, r2
 80025a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025aa:	2b40      	cmp	r3, #64	; 0x40
 80025ac:	d111      	bne.n	80025d2 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	212c      	movs	r1, #44	; 0x2c
 80025b4:	fb01 f303 	mul.w	r3, r1, r3
 80025b8:	4413      	add	r3, r2
 80025ba:	333d      	adds	r3, #61	; 0x3d
 80025bc:	2201      	movs	r2, #1
 80025be:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	015a      	lsls	r2, r3, #5
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	4413      	add	r3, r2
 80025c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025cc:	461a      	mov	r2, r3
 80025ce:	2340      	movs	r3, #64	; 0x40
 80025d0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	015a      	lsls	r2, r3, #5
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	4413      	add	r3, r2
 80025da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025de:	461a      	mov	r2, r3
 80025e0:	2301      	movs	r3, #1
 80025e2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	212c      	movs	r1, #44	; 0x2c
 80025ea:	fb01 f303 	mul.w	r3, r1, r3
 80025ee:	4413      	add	r3, r2
 80025f0:	3361      	adds	r3, #97	; 0x61
 80025f2:	2201      	movs	r2, #1
 80025f4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	697a      	ldr	r2, [r7, #20]
 80025fc:	b2d2      	uxtb	r2, r2
 80025fe:	4611      	mov	r1, r2
 8002600:	4618      	mov	r0, r3
 8002602:	f003 f944 	bl	800588e <USB_HC_Halt>
}
 8002606:	e28c      	b.n	8002b22 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	015a      	lsls	r2, r3, #5
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	4413      	add	r3, r2
 8002610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800261a:	2b40      	cmp	r3, #64	; 0x40
 800261c:	d12c      	bne.n	8002678 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	212c      	movs	r1, #44	; 0x2c
 8002624:	fb01 f303 	mul.w	r3, r1, r3
 8002628:	4413      	add	r3, r2
 800262a:	3361      	adds	r3, #97	; 0x61
 800262c:	2204      	movs	r2, #4
 800262e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	212c      	movs	r1, #44	; 0x2c
 8002636:	fb01 f303 	mul.w	r3, r1, r3
 800263a:	4413      	add	r3, r2
 800263c:	333d      	adds	r3, #61	; 0x3d
 800263e:	2201      	movs	r2, #1
 8002640:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	212c      	movs	r1, #44	; 0x2c
 8002648:	fb01 f303 	mul.w	r3, r1, r3
 800264c:	4413      	add	r3, r2
 800264e:	335c      	adds	r3, #92	; 0x5c
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	697a      	ldr	r2, [r7, #20]
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	4611      	mov	r1, r2
 800265e:	4618      	mov	r0, r3
 8002660:	f003 f915 	bl	800588e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	015a      	lsls	r2, r3, #5
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	4413      	add	r3, r2
 800266c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002670:	461a      	mov	r2, r3
 8002672:	2340      	movs	r3, #64	; 0x40
 8002674:	6093      	str	r3, [r2, #8]
}
 8002676:	e254      	b.n	8002b22 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	015a      	lsls	r2, r3, #5
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	4413      	add	r3, r2
 8002680:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f003 0308 	and.w	r3, r3, #8
 800268a:	2b08      	cmp	r3, #8
 800268c:	d11a      	bne.n	80026c4 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	015a      	lsls	r2, r3, #5
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	4413      	add	r3, r2
 8002696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800269a:	461a      	mov	r2, r3
 800269c:	2308      	movs	r3, #8
 800269e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	212c      	movs	r1, #44	; 0x2c
 80026a6:	fb01 f303 	mul.w	r3, r1, r3
 80026aa:	4413      	add	r3, r2
 80026ac:	3361      	adds	r3, #97	; 0x61
 80026ae:	2205      	movs	r2, #5
 80026b0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	b2d2      	uxtb	r2, r2
 80026ba:	4611      	mov	r1, r2
 80026bc:	4618      	mov	r0, r3
 80026be:	f003 f8e6 	bl	800588e <USB_HC_Halt>
}
 80026c2:	e22e      	b.n	8002b22 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	015a      	lsls	r2, r3, #5
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	4413      	add	r3, r2
 80026cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f003 0310 	and.w	r3, r3, #16
 80026d6:	2b10      	cmp	r3, #16
 80026d8:	d140      	bne.n	800275c <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	212c      	movs	r1, #44	; 0x2c
 80026e0:	fb01 f303 	mul.w	r3, r1, r3
 80026e4:	4413      	add	r3, r2
 80026e6:	335c      	adds	r3, #92	; 0x5c
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	212c      	movs	r1, #44	; 0x2c
 80026f2:	fb01 f303 	mul.w	r3, r1, r3
 80026f6:	4413      	add	r3, r2
 80026f8:	3361      	adds	r3, #97	; 0x61
 80026fa:	2203      	movs	r2, #3
 80026fc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	212c      	movs	r1, #44	; 0x2c
 8002704:	fb01 f303 	mul.w	r3, r1, r3
 8002708:	4413      	add	r3, r2
 800270a:	333d      	adds	r3, #61	; 0x3d
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d112      	bne.n	8002738 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	212c      	movs	r1, #44	; 0x2c
 8002718:	fb01 f303 	mul.w	r3, r1, r3
 800271c:	4413      	add	r3, r2
 800271e:	333c      	adds	r3, #60	; 0x3c
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d108      	bne.n	8002738 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	212c      	movs	r1, #44	; 0x2c
 800272c:	fb01 f303 	mul.w	r3, r1, r3
 8002730:	4413      	add	r3, r2
 8002732:	333d      	adds	r3, #61	; 0x3d
 8002734:	2201      	movs	r2, #1
 8002736:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	4611      	mov	r1, r2
 8002742:	4618      	mov	r0, r3
 8002744:	f003 f8a3 	bl	800588e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	015a      	lsls	r2, r3, #5
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	4413      	add	r3, r2
 8002750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002754:	461a      	mov	r2, r3
 8002756:	2310      	movs	r3, #16
 8002758:	6093      	str	r3, [r2, #8]
}
 800275a:	e1e2      	b.n	8002b22 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	015a      	lsls	r2, r3, #5
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	4413      	add	r3, r2
 8002764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800276e:	2b80      	cmp	r3, #128	; 0x80
 8002770:	d164      	bne.n	800283c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d111      	bne.n	800279e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	212c      	movs	r1, #44	; 0x2c
 8002780:	fb01 f303 	mul.w	r3, r1, r3
 8002784:	4413      	add	r3, r2
 8002786:	3361      	adds	r3, #97	; 0x61
 8002788:	2206      	movs	r2, #6
 800278a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	697a      	ldr	r2, [r7, #20]
 8002792:	b2d2      	uxtb	r2, r2
 8002794:	4611      	mov	r1, r2
 8002796:	4618      	mov	r0, r3
 8002798:	f003 f879 	bl	800588e <USB_HC_Halt>
 800279c:	e044      	b.n	8002828 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	212c      	movs	r1, #44	; 0x2c
 80027a4:	fb01 f303 	mul.w	r3, r1, r3
 80027a8:	4413      	add	r3, r2
 80027aa:	335c      	adds	r3, #92	; 0x5c
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	1c5a      	adds	r2, r3, #1
 80027b0:	6879      	ldr	r1, [r7, #4]
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	202c      	movs	r0, #44	; 0x2c
 80027b6:	fb00 f303 	mul.w	r3, r0, r3
 80027ba:	440b      	add	r3, r1
 80027bc:	335c      	adds	r3, #92	; 0x5c
 80027be:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	212c      	movs	r1, #44	; 0x2c
 80027c6:	fb01 f303 	mul.w	r3, r1, r3
 80027ca:	4413      	add	r3, r2
 80027cc:	335c      	adds	r3, #92	; 0x5c
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d920      	bls.n	8002816 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	212c      	movs	r1, #44	; 0x2c
 80027da:	fb01 f303 	mul.w	r3, r1, r3
 80027de:	4413      	add	r3, r2
 80027e0:	335c      	adds	r3, #92	; 0x5c
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	212c      	movs	r1, #44	; 0x2c
 80027ec:	fb01 f303 	mul.w	r3, r1, r3
 80027f0:	4413      	add	r3, r2
 80027f2:	3360      	adds	r3, #96	; 0x60
 80027f4:	2204      	movs	r2, #4
 80027f6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	b2d9      	uxtb	r1, r3
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	202c      	movs	r0, #44	; 0x2c
 8002802:	fb00 f303 	mul.w	r3, r0, r3
 8002806:	4413      	add	r3, r2
 8002808:	3360      	adds	r3, #96	; 0x60
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	461a      	mov	r2, r3
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f008 fc9c 	bl	800b14c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002814:	e008      	b.n	8002828 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	212c      	movs	r1, #44	; 0x2c
 800281c:	fb01 f303 	mul.w	r3, r1, r3
 8002820:	4413      	add	r3, r2
 8002822:	3360      	adds	r3, #96	; 0x60
 8002824:	2202      	movs	r2, #2
 8002826:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	015a      	lsls	r2, r3, #5
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	4413      	add	r3, r2
 8002830:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002834:	461a      	mov	r2, r3
 8002836:	2380      	movs	r3, #128	; 0x80
 8002838:	6093      	str	r3, [r2, #8]
}
 800283a:	e172      	b.n	8002b22 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	015a      	lsls	r2, r3, #5
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	4413      	add	r3, r2
 8002844:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800284e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002852:	d11b      	bne.n	800288c <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	212c      	movs	r1, #44	; 0x2c
 800285a:	fb01 f303 	mul.w	r3, r1, r3
 800285e:	4413      	add	r3, r2
 8002860:	3361      	adds	r3, #97	; 0x61
 8002862:	2208      	movs	r2, #8
 8002864:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	b2d2      	uxtb	r2, r2
 800286e:	4611      	mov	r1, r2
 8002870:	4618      	mov	r0, r3
 8002872:	f003 f80c 	bl	800588e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	015a      	lsls	r2, r3, #5
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	4413      	add	r3, r2
 800287e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002882:	461a      	mov	r2, r3
 8002884:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002888:	6093      	str	r3, [r2, #8]
}
 800288a:	e14a      	b.n	8002b22 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	015a      	lsls	r2, r3, #5
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	4413      	add	r3, r2
 8002894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b02      	cmp	r3, #2
 80028a0:	f040 813f 	bne.w	8002b22 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	212c      	movs	r1, #44	; 0x2c
 80028aa:	fb01 f303 	mul.w	r3, r1, r3
 80028ae:	4413      	add	r3, r2
 80028b0:	3361      	adds	r3, #97	; 0x61
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d17d      	bne.n	80029b4 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	212c      	movs	r1, #44	; 0x2c
 80028be:	fb01 f303 	mul.w	r3, r1, r3
 80028c2:	4413      	add	r3, r2
 80028c4:	3360      	adds	r3, #96	; 0x60
 80028c6:	2201      	movs	r2, #1
 80028c8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	212c      	movs	r1, #44	; 0x2c
 80028d0:	fb01 f303 	mul.w	r3, r1, r3
 80028d4:	4413      	add	r3, r2
 80028d6:	333f      	adds	r3, #63	; 0x3f
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d00a      	beq.n	80028f4 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	212c      	movs	r1, #44	; 0x2c
 80028e4:	fb01 f303 	mul.w	r3, r1, r3
 80028e8:	4413      	add	r3, r2
 80028ea:	333f      	adds	r3, #63	; 0x3f
 80028ec:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80028ee:	2b03      	cmp	r3, #3
 80028f0:	f040 8100 	bne.w	8002af4 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d113      	bne.n	8002924 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	212c      	movs	r1, #44	; 0x2c
 8002902:	fb01 f303 	mul.w	r3, r1, r3
 8002906:	4413      	add	r3, r2
 8002908:	3355      	adds	r3, #85	; 0x55
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	f083 0301 	eor.w	r3, r3, #1
 8002910:	b2d8      	uxtb	r0, r3
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	212c      	movs	r1, #44	; 0x2c
 8002918:	fb01 f303 	mul.w	r3, r1, r3
 800291c:	4413      	add	r3, r2
 800291e:	3355      	adds	r3, #85	; 0x55
 8002920:	4602      	mov	r2, r0
 8002922:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	2b01      	cmp	r3, #1
 800292a:	f040 80e3 	bne.w	8002af4 <HCD_HC_OUT_IRQHandler+0x69c>
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	212c      	movs	r1, #44	; 0x2c
 8002934:	fb01 f303 	mul.w	r3, r1, r3
 8002938:	4413      	add	r3, r2
 800293a:	334c      	adds	r3, #76	; 0x4c
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 80d8 	beq.w	8002af4 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	212c      	movs	r1, #44	; 0x2c
 800294a:	fb01 f303 	mul.w	r3, r1, r3
 800294e:	4413      	add	r3, r2
 8002950:	334c      	adds	r3, #76	; 0x4c
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6879      	ldr	r1, [r7, #4]
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	202c      	movs	r0, #44	; 0x2c
 800295a:	fb00 f202 	mul.w	r2, r0, r2
 800295e:	440a      	add	r2, r1
 8002960:	3240      	adds	r2, #64	; 0x40
 8002962:	8812      	ldrh	r2, [r2, #0]
 8002964:	4413      	add	r3, r2
 8002966:	3b01      	subs	r3, #1
 8002968:	6879      	ldr	r1, [r7, #4]
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	202c      	movs	r0, #44	; 0x2c
 800296e:	fb00 f202 	mul.w	r2, r0, r2
 8002972:	440a      	add	r2, r1
 8002974:	3240      	adds	r2, #64	; 0x40
 8002976:	8812      	ldrh	r2, [r2, #0]
 8002978:	fbb3 f3f2 	udiv	r3, r3, r2
 800297c:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 80b5 	beq.w	8002af4 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	212c      	movs	r1, #44	; 0x2c
 8002990:	fb01 f303 	mul.w	r3, r1, r3
 8002994:	4413      	add	r3, r2
 8002996:	3355      	adds	r3, #85	; 0x55
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	f083 0301 	eor.w	r3, r3, #1
 800299e:	b2d8      	uxtb	r0, r3
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	212c      	movs	r1, #44	; 0x2c
 80029a6:	fb01 f303 	mul.w	r3, r1, r3
 80029aa:	4413      	add	r3, r2
 80029ac:	3355      	adds	r3, #85	; 0x55
 80029ae:	4602      	mov	r2, r0
 80029b0:	701a      	strb	r2, [r3, #0]
 80029b2:	e09f      	b.n	8002af4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	212c      	movs	r1, #44	; 0x2c
 80029ba:	fb01 f303 	mul.w	r3, r1, r3
 80029be:	4413      	add	r3, r2
 80029c0:	3361      	adds	r3, #97	; 0x61
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	2b03      	cmp	r3, #3
 80029c6:	d109      	bne.n	80029dc <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	212c      	movs	r1, #44	; 0x2c
 80029ce:	fb01 f303 	mul.w	r3, r1, r3
 80029d2:	4413      	add	r3, r2
 80029d4:	3360      	adds	r3, #96	; 0x60
 80029d6:	2202      	movs	r2, #2
 80029d8:	701a      	strb	r2, [r3, #0]
 80029da:	e08b      	b.n	8002af4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	212c      	movs	r1, #44	; 0x2c
 80029e2:	fb01 f303 	mul.w	r3, r1, r3
 80029e6:	4413      	add	r3, r2
 80029e8:	3361      	adds	r3, #97	; 0x61
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b04      	cmp	r3, #4
 80029ee:	d109      	bne.n	8002a04 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	212c      	movs	r1, #44	; 0x2c
 80029f6:	fb01 f303 	mul.w	r3, r1, r3
 80029fa:	4413      	add	r3, r2
 80029fc:	3360      	adds	r3, #96	; 0x60
 80029fe:	2202      	movs	r2, #2
 8002a00:	701a      	strb	r2, [r3, #0]
 8002a02:	e077      	b.n	8002af4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	212c      	movs	r1, #44	; 0x2c
 8002a0a:	fb01 f303 	mul.w	r3, r1, r3
 8002a0e:	4413      	add	r3, r2
 8002a10:	3361      	adds	r3, #97	; 0x61
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b05      	cmp	r3, #5
 8002a16:	d109      	bne.n	8002a2c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	212c      	movs	r1, #44	; 0x2c
 8002a1e:	fb01 f303 	mul.w	r3, r1, r3
 8002a22:	4413      	add	r3, r2
 8002a24:	3360      	adds	r3, #96	; 0x60
 8002a26:	2205      	movs	r2, #5
 8002a28:	701a      	strb	r2, [r3, #0]
 8002a2a:	e063      	b.n	8002af4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	212c      	movs	r1, #44	; 0x2c
 8002a32:	fb01 f303 	mul.w	r3, r1, r3
 8002a36:	4413      	add	r3, r2
 8002a38:	3361      	adds	r3, #97	; 0x61
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b06      	cmp	r3, #6
 8002a3e:	d009      	beq.n	8002a54 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	212c      	movs	r1, #44	; 0x2c
 8002a46:	fb01 f303 	mul.w	r3, r1, r3
 8002a4a:	4413      	add	r3, r2
 8002a4c:	3361      	adds	r3, #97	; 0x61
 8002a4e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a50:	2b08      	cmp	r3, #8
 8002a52:	d14f      	bne.n	8002af4 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	212c      	movs	r1, #44	; 0x2c
 8002a5a:	fb01 f303 	mul.w	r3, r1, r3
 8002a5e:	4413      	add	r3, r2
 8002a60:	335c      	adds	r3, #92	; 0x5c
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	1c5a      	adds	r2, r3, #1
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	202c      	movs	r0, #44	; 0x2c
 8002a6c:	fb00 f303 	mul.w	r3, r0, r3
 8002a70:	440b      	add	r3, r1
 8002a72:	335c      	adds	r3, #92	; 0x5c
 8002a74:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	212c      	movs	r1, #44	; 0x2c
 8002a7c:	fb01 f303 	mul.w	r3, r1, r3
 8002a80:	4413      	add	r3, r2
 8002a82:	335c      	adds	r3, #92	; 0x5c
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d912      	bls.n	8002ab0 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	212c      	movs	r1, #44	; 0x2c
 8002a90:	fb01 f303 	mul.w	r3, r1, r3
 8002a94:	4413      	add	r3, r2
 8002a96:	335c      	adds	r3, #92	; 0x5c
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	212c      	movs	r1, #44	; 0x2c
 8002aa2:	fb01 f303 	mul.w	r3, r1, r3
 8002aa6:	4413      	add	r3, r2
 8002aa8:	3360      	adds	r3, #96	; 0x60
 8002aaa:	2204      	movs	r2, #4
 8002aac:	701a      	strb	r2, [r3, #0]
 8002aae:	e021      	b.n	8002af4 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	212c      	movs	r1, #44	; 0x2c
 8002ab6:	fb01 f303 	mul.w	r3, r1, r3
 8002aba:	4413      	add	r3, r2
 8002abc:	3360      	adds	r3, #96	; 0x60
 8002abe:	2202      	movs	r2, #2
 8002ac0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	015a      	lsls	r2, r3, #5
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	4413      	add	r3, r2
 8002aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ad8:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ae0:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	015a      	lsls	r2, r3, #5
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	4413      	add	r3, r2
 8002aea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aee:	461a      	mov	r2, r3
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	015a      	lsls	r2, r3, #5
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	4413      	add	r3, r2
 8002afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b00:	461a      	mov	r2, r3
 8002b02:	2302      	movs	r3, #2
 8002b04:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	b2d9      	uxtb	r1, r3
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	202c      	movs	r0, #44	; 0x2c
 8002b10:	fb00 f303 	mul.w	r3, r0, r3
 8002b14:	4413      	add	r3, r2
 8002b16:	3360      	adds	r3, #96	; 0x60
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f008 fb15 	bl	800b14c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002b22:	bf00      	nop
 8002b24:	3720      	adds	r7, #32
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b08a      	sub	sp, #40	; 0x28
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	f003 030f 	and.w	r3, r3, #15
 8002b4a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	0c5b      	lsrs	r3, r3, #17
 8002b50:	f003 030f 	and.w	r3, r3, #15
 8002b54:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	091b      	lsrs	r3, r3, #4
 8002b5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b5e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d004      	beq.n	8002b70 <HCD_RXQLVL_IRQHandler+0x46>
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	2b05      	cmp	r3, #5
 8002b6a:	f000 80a9 	beq.w	8002cc0 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002b6e:	e0aa      	b.n	8002cc6 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f000 80a6 	beq.w	8002cc4 <HCD_RXQLVL_IRQHandler+0x19a>
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	212c      	movs	r1, #44	; 0x2c
 8002b7e:	fb01 f303 	mul.w	r3, r1, r3
 8002b82:	4413      	add	r3, r2
 8002b84:	3344      	adds	r3, #68	; 0x44
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f000 809b 	beq.w	8002cc4 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	212c      	movs	r1, #44	; 0x2c
 8002b94:	fb01 f303 	mul.w	r3, r1, r3
 8002b98:	4413      	add	r3, r2
 8002b9a:	3350      	adds	r3, #80	; 0x50
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	441a      	add	r2, r3
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	202c      	movs	r0, #44	; 0x2c
 8002ba8:	fb00 f303 	mul.w	r3, r0, r3
 8002bac:	440b      	add	r3, r1
 8002bae:	334c      	adds	r3, #76	; 0x4c
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d87a      	bhi.n	8002cac <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6818      	ldr	r0, [r3, #0]
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	212c      	movs	r1, #44	; 0x2c
 8002bc0:	fb01 f303 	mul.w	r3, r1, r3
 8002bc4:	4413      	add	r3, r2
 8002bc6:	3344      	adds	r3, #68	; 0x44
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	b292      	uxth	r2, r2
 8002bce:	4619      	mov	r1, r3
 8002bd0:	f002 f9b4 	bl	8004f3c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	212c      	movs	r1, #44	; 0x2c
 8002bda:	fb01 f303 	mul.w	r3, r1, r3
 8002bde:	4413      	add	r3, r2
 8002be0:	3344      	adds	r3, #68	; 0x44
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	441a      	add	r2, r3
 8002be8:	6879      	ldr	r1, [r7, #4]
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	202c      	movs	r0, #44	; 0x2c
 8002bee:	fb00 f303 	mul.w	r3, r0, r3
 8002bf2:	440b      	add	r3, r1
 8002bf4:	3344      	adds	r3, #68	; 0x44
 8002bf6:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	212c      	movs	r1, #44	; 0x2c
 8002bfe:	fb01 f303 	mul.w	r3, r1, r3
 8002c02:	4413      	add	r3, r2
 8002c04:	3350      	adds	r3, #80	; 0x50
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	441a      	add	r2, r3
 8002c0c:	6879      	ldr	r1, [r7, #4]
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	202c      	movs	r0, #44	; 0x2c
 8002c12:	fb00 f303 	mul.w	r3, r0, r3
 8002c16:	440b      	add	r3, r1
 8002c18:	3350      	adds	r3, #80	; 0x50
 8002c1a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	015a      	lsls	r2, r3, #5
 8002c20:	6a3b      	ldr	r3, [r7, #32]
 8002c22:	4413      	add	r3, r2
 8002c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	0cdb      	lsrs	r3, r3, #19
 8002c2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c30:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	212c      	movs	r1, #44	; 0x2c
 8002c38:	fb01 f303 	mul.w	r3, r1, r3
 8002c3c:	4413      	add	r3, r2
 8002c3e:	3340      	adds	r3, #64	; 0x40
 8002c40:	881b      	ldrh	r3, [r3, #0]
 8002c42:	461a      	mov	r2, r3
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d13c      	bne.n	8002cc4 <HCD_RXQLVL_IRQHandler+0x19a>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d039      	beq.n	8002cc4 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	015a      	lsls	r2, r3, #5
 8002c54:	6a3b      	ldr	r3, [r7, #32]
 8002c56:	4413      	add	r3, r2
 8002c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c66:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c6e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	015a      	lsls	r2, r3, #5
 8002c74:	6a3b      	ldr	r3, [r7, #32]
 8002c76:	4413      	add	r3, r2
 8002c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	212c      	movs	r1, #44	; 0x2c
 8002c88:	fb01 f303 	mul.w	r3, r1, r3
 8002c8c:	4413      	add	r3, r2
 8002c8e:	3354      	adds	r3, #84	; 0x54
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	f083 0301 	eor.w	r3, r3, #1
 8002c96:	b2d8      	uxtb	r0, r3
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	212c      	movs	r1, #44	; 0x2c
 8002c9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ca2:	4413      	add	r3, r2
 8002ca4:	3354      	adds	r3, #84	; 0x54
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	701a      	strb	r2, [r3, #0]
      break;
 8002caa:	e00b      	b.n	8002cc4 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	212c      	movs	r1, #44	; 0x2c
 8002cb2:	fb01 f303 	mul.w	r3, r1, r3
 8002cb6:	4413      	add	r3, r2
 8002cb8:	3360      	adds	r3, #96	; 0x60
 8002cba:	2204      	movs	r2, #4
 8002cbc:	701a      	strb	r2, [r3, #0]
      break;
 8002cbe:	e001      	b.n	8002cc4 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002cc0:	bf00      	nop
 8002cc2:	e000      	b.n	8002cc6 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002cc4:	bf00      	nop
  }
}
 8002cc6:	bf00      	nop
 8002cc8:	3728      	adds	r7, #40	; 0x28
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b086      	sub	sp, #24
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002cfa:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d10b      	bne.n	8002d1e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d102      	bne.n	8002d16 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f008 f9ff 	bl	800b114 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	f043 0302 	orr.w	r3, r3, #2
 8002d1c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f003 0308 	and.w	r3, r3, #8
 8002d24:	2b08      	cmp	r3, #8
 8002d26:	d132      	bne.n	8002d8e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	f043 0308 	orr.w	r3, r3, #8
 8002d2e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f003 0304 	and.w	r3, r3, #4
 8002d36:	2b04      	cmp	r3, #4
 8002d38:	d126      	bne.n	8002d88 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d113      	bne.n	8002d6a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002d48:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d4c:	d106      	bne.n	8002d5c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2102      	movs	r1, #2
 8002d54:	4618      	mov	r0, r3
 8002d56:	f002 fa5f 	bl	8005218 <USB_InitFSLSPClkSel>
 8002d5a:	e011      	b.n	8002d80 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2101      	movs	r1, #1
 8002d62:	4618      	mov	r0, r3
 8002d64:	f002 fa58 	bl	8005218 <USB_InitFSLSPClkSel>
 8002d68:	e00a      	b.n	8002d80 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d106      	bne.n	8002d80 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d78:	461a      	mov	r2, r3
 8002d7a:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002d7e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f008 f9f5 	bl	800b170 <HAL_HCD_PortEnabled_Callback>
 8002d86:	e002      	b.n	8002d8e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f008 f9ff 	bl	800b18c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f003 0320 	and.w	r3, r3, #32
 8002d94:	2b20      	cmp	r3, #32
 8002d96:	d103      	bne.n	8002da0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	f043 0320 	orr.w	r3, r3, #32
 8002d9e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002da6:	461a      	mov	r2, r3
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	6013      	str	r3, [r2, #0]
}
 8002dac:	bf00      	nop
 8002dae:	3718      	adds	r7, #24
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e12b      	b.n	800301e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d106      	bne.n	8002de0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7fd fe3c 	bl	8000a58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2224      	movs	r2, #36	; 0x24
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 0201 	bic.w	r2, r2, #1
 8002df6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e18:	f001 fa20 	bl	800425c <HAL_RCC_GetPCLK1Freq>
 8002e1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	4a81      	ldr	r2, [pc, #516]	; (8003028 <HAL_I2C_Init+0x274>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d807      	bhi.n	8002e38 <HAL_I2C_Init+0x84>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	4a80      	ldr	r2, [pc, #512]	; (800302c <HAL_I2C_Init+0x278>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	bf94      	ite	ls
 8002e30:	2301      	movls	r3, #1
 8002e32:	2300      	movhi	r3, #0
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	e006      	b.n	8002e46 <HAL_I2C_Init+0x92>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	4a7d      	ldr	r2, [pc, #500]	; (8003030 <HAL_I2C_Init+0x27c>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	bf94      	ite	ls
 8002e40:	2301      	movls	r3, #1
 8002e42:	2300      	movhi	r3, #0
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e0e7      	b.n	800301e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	4a78      	ldr	r2, [pc, #480]	; (8003034 <HAL_I2C_Init+0x280>)
 8002e52:	fba2 2303 	umull	r2, r3, r2, r3
 8002e56:	0c9b      	lsrs	r3, r3, #18
 8002e58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68ba      	ldr	r2, [r7, #8]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	4a6a      	ldr	r2, [pc, #424]	; (8003028 <HAL_I2C_Init+0x274>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d802      	bhi.n	8002e88 <HAL_I2C_Init+0xd4>
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	3301      	adds	r3, #1
 8002e86:	e009      	b.n	8002e9c <HAL_I2C_Init+0xe8>
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e8e:	fb02 f303 	mul.w	r3, r2, r3
 8002e92:	4a69      	ldr	r2, [pc, #420]	; (8003038 <HAL_I2C_Init+0x284>)
 8002e94:	fba2 2303 	umull	r2, r3, r2, r3
 8002e98:	099b      	lsrs	r3, r3, #6
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6812      	ldr	r2, [r2, #0]
 8002ea0:	430b      	orrs	r3, r1
 8002ea2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002eae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	495c      	ldr	r1, [pc, #368]	; (8003028 <HAL_I2C_Init+0x274>)
 8002eb8:	428b      	cmp	r3, r1
 8002eba:	d819      	bhi.n	8002ef0 <HAL_I2C_Init+0x13c>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	1e59      	subs	r1, r3, #1
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002eca:	1c59      	adds	r1, r3, #1
 8002ecc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ed0:	400b      	ands	r3, r1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00a      	beq.n	8002eec <HAL_I2C_Init+0x138>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	1e59      	subs	r1, r3, #1
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eea:	e051      	b.n	8002f90 <HAL_I2C_Init+0x1dc>
 8002eec:	2304      	movs	r3, #4
 8002eee:	e04f      	b.n	8002f90 <HAL_I2C_Init+0x1dc>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d111      	bne.n	8002f1c <HAL_I2C_Init+0x168>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	1e58      	subs	r0, r3, #1
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6859      	ldr	r1, [r3, #4]
 8002f00:	460b      	mov	r3, r1
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	440b      	add	r3, r1
 8002f06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	bf0c      	ite	eq
 8002f14:	2301      	moveq	r3, #1
 8002f16:	2300      	movne	r3, #0
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	e012      	b.n	8002f42 <HAL_I2C_Init+0x18e>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	1e58      	subs	r0, r3, #1
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6859      	ldr	r1, [r3, #4]
 8002f24:	460b      	mov	r3, r1
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	440b      	add	r3, r1
 8002f2a:	0099      	lsls	r1, r3, #2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f32:	3301      	adds	r3, #1
 8002f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	bf0c      	ite	eq
 8002f3c:	2301      	moveq	r3, #1
 8002f3e:	2300      	movne	r3, #0
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <HAL_I2C_Init+0x196>
 8002f46:	2301      	movs	r3, #1
 8002f48:	e022      	b.n	8002f90 <HAL_I2C_Init+0x1dc>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10e      	bne.n	8002f70 <HAL_I2C_Init+0x1bc>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	1e58      	subs	r0, r3, #1
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6859      	ldr	r1, [r3, #4]
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	440b      	add	r3, r1
 8002f60:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f64:	3301      	adds	r3, #1
 8002f66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f6e:	e00f      	b.n	8002f90 <HAL_I2C_Init+0x1dc>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	1e58      	subs	r0, r3, #1
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6859      	ldr	r1, [r3, #4]
 8002f78:	460b      	mov	r3, r1
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	0099      	lsls	r1, r3, #2
 8002f80:	440b      	add	r3, r1
 8002f82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f86:	3301      	adds	r3, #1
 8002f88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f90:	6879      	ldr	r1, [r7, #4]
 8002f92:	6809      	ldr	r1, [r1, #0]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69da      	ldr	r2, [r3, #28]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002fbe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	6911      	ldr	r1, [r2, #16]
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	68d2      	ldr	r2, [r2, #12]
 8002fca:	4311      	orrs	r1, r2
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6812      	ldr	r2, [r2, #0]
 8002fd0:	430b      	orrs	r3, r1
 8002fd2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	695a      	ldr	r2, [r3, #20]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	430a      	orrs	r2, r1
 8002fee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0201 	orr.w	r2, r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2220      	movs	r2, #32
 800300a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	000186a0 	.word	0x000186a0
 800302c:	001e847f 	.word	0x001e847f
 8003030:	003d08ff 	.word	0x003d08ff
 8003034:	431bde83 	.word	0x431bde83
 8003038:	10624dd3 	.word	0x10624dd3

0800303c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b088      	sub	sp, #32
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e128      	b.n	80032a0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d109      	bne.n	800306e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a90      	ldr	r2, [pc, #576]	; (80032a8 <HAL_I2S_Init+0x26c>)
 8003066:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f7fd fd3d 	bl	8000ae8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2202      	movs	r2, #2
 8003072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	69db      	ldr	r3, [r3, #28]
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	6812      	ldr	r2, [r2, #0]
 8003080:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003084:	f023 030f 	bic.w	r3, r3, #15
 8003088:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2202      	movs	r2, #2
 8003090:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	2b02      	cmp	r3, #2
 8003098:	d060      	beq.n	800315c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d102      	bne.n	80030a8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80030a2:	2310      	movs	r3, #16
 80030a4:	617b      	str	r3, [r7, #20]
 80030a6:	e001      	b.n	80030ac <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80030a8:	2320      	movs	r3, #32
 80030aa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	2b20      	cmp	r3, #32
 80030b2:	d802      	bhi.n	80030ba <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80030ba:	2001      	movs	r0, #1
 80030bc:	f001 f9c4 	bl	8004448 <HAL_RCCEx_GetPeriphCLKFreq>
 80030c0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030ca:	d125      	bne.n	8003118 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d010      	beq.n	80030f6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	fbb2 f2f3 	udiv	r2, r2, r3
 80030de:	4613      	mov	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4413      	add	r3, r2
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	461a      	mov	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f0:	3305      	adds	r3, #5
 80030f2:	613b      	str	r3, [r7, #16]
 80030f4:	e01f      	b.n	8003136 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003100:	4613      	mov	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4413      	add	r3, r2
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	461a      	mov	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003112:	3305      	adds	r3, #5
 8003114:	613b      	str	r3, [r7, #16]
 8003116:	e00e      	b.n	8003136 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003120:	4613      	mov	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	461a      	mov	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003132:	3305      	adds	r3, #5
 8003134:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	4a5c      	ldr	r2, [pc, #368]	; (80032ac <HAL_I2S_Init+0x270>)
 800313a:	fba2 2303 	umull	r2, r3, r2, r3
 800313e:	08db      	lsrs	r3, r3, #3
 8003140:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	f003 0301 	and.w	r3, r3, #1
 8003148:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	085b      	lsrs	r3, r3, #1
 8003152:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	021b      	lsls	r3, r3, #8
 8003158:	61bb      	str	r3, [r7, #24]
 800315a:	e003      	b.n	8003164 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800315c:	2302      	movs	r3, #2
 800315e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003160:	2300      	movs	r3, #0
 8003162:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d902      	bls.n	8003170 <HAL_I2S_Init+0x134>
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	2bff      	cmp	r3, #255	; 0xff
 800316e:	d907      	bls.n	8003180 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003174:	f043 0210 	orr.w	r2, r3, #16
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e08f      	b.n	80032a0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	691a      	ldr	r2, [r3, #16]
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	ea42 0103 	orr.w	r1, r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	69fa      	ldr	r2, [r7, #28]
 8003190:	430a      	orrs	r2, r1
 8003192:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800319e:	f023 030f 	bic.w	r3, r3, #15
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	6851      	ldr	r1, [r2, #4]
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	6892      	ldr	r2, [r2, #8]
 80031aa:	4311      	orrs	r1, r2
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	68d2      	ldr	r2, [r2, #12]
 80031b0:	4311      	orrs	r1, r2
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	6992      	ldr	r2, [r2, #24]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	431a      	orrs	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031c2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d161      	bne.n	8003290 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a38      	ldr	r2, [pc, #224]	; (80032b0 <HAL_I2S_Init+0x274>)
 80031d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a37      	ldr	r2, [pc, #220]	; (80032b4 <HAL_I2S_Init+0x278>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d101      	bne.n	80031e0 <HAL_I2S_Init+0x1a4>
 80031dc:	4b36      	ldr	r3, [pc, #216]	; (80032b8 <HAL_I2S_Init+0x27c>)
 80031de:	e001      	b.n	80031e4 <HAL_I2S_Init+0x1a8>
 80031e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	6812      	ldr	r2, [r2, #0]
 80031ea:	4932      	ldr	r1, [pc, #200]	; (80032b4 <HAL_I2S_Init+0x278>)
 80031ec:	428a      	cmp	r2, r1
 80031ee:	d101      	bne.n	80031f4 <HAL_I2S_Init+0x1b8>
 80031f0:	4a31      	ldr	r2, [pc, #196]	; (80032b8 <HAL_I2S_Init+0x27c>)
 80031f2:	e001      	b.n	80031f8 <HAL_I2S_Init+0x1bc>
 80031f4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80031f8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80031fc:	f023 030f 	bic.w	r3, r3, #15
 8003200:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a2b      	ldr	r2, [pc, #172]	; (80032b4 <HAL_I2S_Init+0x278>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d101      	bne.n	8003210 <HAL_I2S_Init+0x1d4>
 800320c:	4b2a      	ldr	r3, [pc, #168]	; (80032b8 <HAL_I2S_Init+0x27c>)
 800320e:	e001      	b.n	8003214 <HAL_I2S_Init+0x1d8>
 8003210:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003214:	2202      	movs	r2, #2
 8003216:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a25      	ldr	r2, [pc, #148]	; (80032b4 <HAL_I2S_Init+0x278>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d101      	bne.n	8003226 <HAL_I2S_Init+0x1ea>
 8003222:	4b25      	ldr	r3, [pc, #148]	; (80032b8 <HAL_I2S_Init+0x27c>)
 8003224:	e001      	b.n	800322a <HAL_I2S_Init+0x1ee>
 8003226:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800322a:	69db      	ldr	r3, [r3, #28]
 800322c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003236:	d003      	beq.n	8003240 <HAL_I2S_Init+0x204>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d103      	bne.n	8003248 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003240:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003244:	613b      	str	r3, [r7, #16]
 8003246:	e001      	b.n	800324c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003248:	2300      	movs	r3, #0
 800324a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003256:	4313      	orrs	r3, r2
 8003258:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003260:	4313      	orrs	r3, r2
 8003262:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800326a:	4313      	orrs	r3, r2
 800326c:	b29a      	uxth	r2, r3
 800326e:	897b      	ldrh	r3, [r7, #10]
 8003270:	4313      	orrs	r3, r2
 8003272:	b29b      	uxth	r3, r3
 8003274:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003278:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a0d      	ldr	r2, [pc, #52]	; (80032b4 <HAL_I2S_Init+0x278>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d101      	bne.n	8003288 <HAL_I2S_Init+0x24c>
 8003284:	4b0c      	ldr	r3, [pc, #48]	; (80032b8 <HAL_I2S_Init+0x27c>)
 8003286:	e001      	b.n	800328c <HAL_I2S_Init+0x250>
 8003288:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800328c:	897a      	ldrh	r2, [r7, #10]
 800328e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3720      	adds	r7, #32
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	080033b3 	.word	0x080033b3
 80032ac:	cccccccd 	.word	0xcccccccd
 80032b0:	080034c9 	.word	0x080034c9
 80032b4:	40003800 	.word	0x40003800
 80032b8:	40003400 	.word	0x40003400

080032bc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003304:	881a      	ldrh	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003310:	1c9a      	adds	r2, r3, #2
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331a:	b29b      	uxth	r3, r3
 800331c:	3b01      	subs	r3, #1
 800331e:	b29a      	uxth	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003328:	b29b      	uxth	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10e      	bne.n	800334c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800333c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7ff ffb8 	bl	80032bc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800334c:	bf00      	nop
 800334e:	3708      	adds	r7, #8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68da      	ldr	r2, [r3, #12]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003366:	b292      	uxth	r2, r2
 8003368:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336e:	1c9a      	adds	r2, r3, #2
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003378:	b29b      	uxth	r3, r3
 800337a:	3b01      	subs	r3, #1
 800337c:	b29a      	uxth	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003386:	b29b      	uxth	r3, r3
 8003388:	2b00      	cmp	r3, #0
 800338a:	d10e      	bne.n	80033aa <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685a      	ldr	r2, [r3, #4]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800339a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f7ff ff93 	bl	80032d0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80033aa:	bf00      	nop
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b086      	sub	sp, #24
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b04      	cmp	r3, #4
 80033cc:	d13a      	bne.n	8003444 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d109      	bne.n	80033ec <I2S_IRQHandler+0x3a>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e2:	2b40      	cmp	r3, #64	; 0x40
 80033e4:	d102      	bne.n	80033ec <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7ff ffb4 	bl	8003354 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f2:	2b40      	cmp	r3, #64	; 0x40
 80033f4:	d126      	bne.n	8003444 <I2S_IRQHandler+0x92>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f003 0320 	and.w	r3, r3, #32
 8003400:	2b20      	cmp	r3, #32
 8003402:	d11f      	bne.n	8003444 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003412:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003414:	2300      	movs	r3, #0
 8003416:	613b      	str	r3, [r7, #16]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	613b      	str	r3, [r7, #16]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	613b      	str	r3, [r7, #16]
 8003428:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003436:	f043 0202 	orr.w	r2, r3, #2
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7ff ff50 	bl	80032e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b03      	cmp	r3, #3
 800344e:	d136      	bne.n	80034be <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b02      	cmp	r3, #2
 8003458:	d109      	bne.n	800346e <I2S_IRQHandler+0xbc>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003464:	2b80      	cmp	r3, #128	; 0x80
 8003466:	d102      	bne.n	800346e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f7ff ff45 	bl	80032f8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	f003 0308 	and.w	r3, r3, #8
 8003474:	2b08      	cmp	r3, #8
 8003476:	d122      	bne.n	80034be <I2S_IRQHandler+0x10c>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f003 0320 	and.w	r3, r3, #32
 8003482:	2b20      	cmp	r3, #32
 8003484:	d11b      	bne.n	80034be <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003494:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003496:	2300      	movs	r3, #0
 8003498:	60fb      	str	r3, [r7, #12]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	60fb      	str	r3, [r7, #12]
 80034a2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b0:	f043 0204 	orr.w	r2, r3, #4
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f7ff ff13 	bl	80032e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80034be:	bf00      	nop
 80034c0:	3718      	adds	r7, #24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
	...

080034c8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b088      	sub	sp, #32
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a92      	ldr	r2, [pc, #584]	; (8003728 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d101      	bne.n	80034e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80034e2:	4b92      	ldr	r3, [pc, #584]	; (800372c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034e4:	e001      	b.n	80034ea <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80034e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a8b      	ldr	r2, [pc, #556]	; (8003728 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d101      	bne.n	8003504 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003500:	4b8a      	ldr	r3, [pc, #552]	; (800372c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003502:	e001      	b.n	8003508 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003504:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003514:	d004      	beq.n	8003520 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	f040 8099 	bne.w	8003652 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b02      	cmp	r3, #2
 8003528:	d107      	bne.n	800353a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003530:	2b00      	cmp	r3, #0
 8003532:	d002      	beq.n	800353a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 f925 	bl	8003784 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	2b01      	cmp	r3, #1
 8003542:	d107      	bne.n	8003554 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800354a:	2b00      	cmp	r3, #0
 800354c:	d002      	beq.n	8003554 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f9c8 	bl	80038e4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800355a:	2b40      	cmp	r3, #64	; 0x40
 800355c:	d13a      	bne.n	80035d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	f003 0320 	and.w	r3, r3, #32
 8003564:	2b00      	cmp	r3, #0
 8003566:	d035      	beq.n	80035d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a6e      	ldr	r2, [pc, #440]	; (8003728 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d101      	bne.n	8003576 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003572:	4b6e      	ldr	r3, [pc, #440]	; (800372c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003574:	e001      	b.n	800357a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003576:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4969      	ldr	r1, [pc, #420]	; (8003728 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003582:	428b      	cmp	r3, r1
 8003584:	d101      	bne.n	800358a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003586:	4b69      	ldr	r3, [pc, #420]	; (800372c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003588:	e001      	b.n	800358e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800358a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800358e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003592:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	685a      	ldr	r2, [r3, #4]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035a2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80035a4:	2300      	movs	r3, #0
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	60fb      	str	r3, [r7, #12]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	60fb      	str	r3, [r7, #12]
 80035b8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c6:	f043 0202 	orr.w	r2, r3, #2
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f7ff fe88 	bl	80032e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	f003 0308 	and.w	r3, r3, #8
 80035da:	2b08      	cmp	r3, #8
 80035dc:	f040 80c3 	bne.w	8003766 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	f003 0320 	and.w	r3, r3, #32
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f000 80bd 	beq.w	8003766 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685a      	ldr	r2, [r3, #4]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035fa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a49      	ldr	r2, [pc, #292]	; (8003728 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d101      	bne.n	800360a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003606:	4b49      	ldr	r3, [pc, #292]	; (800372c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003608:	e001      	b.n	800360e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800360a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4944      	ldr	r1, [pc, #272]	; (8003728 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003616:	428b      	cmp	r3, r1
 8003618:	d101      	bne.n	800361e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800361a:	4b44      	ldr	r3, [pc, #272]	; (800372c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800361c:	e001      	b.n	8003622 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800361e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003622:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003626:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003628:	2300      	movs	r3, #0
 800362a:	60bb      	str	r3, [r7, #8]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	60bb      	str	r3, [r7, #8]
 8003634:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003642:	f043 0204 	orr.w	r2, r3, #4
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7ff fe4a 	bl	80032e4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003650:	e089      	b.n	8003766 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b02      	cmp	r3, #2
 800365a:	d107      	bne.n	800366c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003662:	2b00      	cmp	r3, #0
 8003664:	d002      	beq.n	800366c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f8be 	bl	80037e8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b01      	cmp	r3, #1
 8003674:	d107      	bne.n	8003686 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367c:	2b00      	cmp	r3, #0
 800367e:	d002      	beq.n	8003686 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 f8fd 	bl	8003880 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368c:	2b40      	cmp	r3, #64	; 0x40
 800368e:	d12f      	bne.n	80036f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	f003 0320 	and.w	r3, r3, #32
 8003696:	2b00      	cmp	r3, #0
 8003698:	d02a      	beq.n	80036f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	685a      	ldr	r2, [r3, #4]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036a8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a1e      	ldr	r2, [pc, #120]	; (8003728 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d101      	bne.n	80036b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80036b4:	4b1d      	ldr	r3, [pc, #116]	; (800372c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036b6:	e001      	b.n	80036bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80036b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036bc:	685a      	ldr	r2, [r3, #4]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4919      	ldr	r1, [pc, #100]	; (8003728 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036c4:	428b      	cmp	r3, r1
 80036c6:	d101      	bne.n	80036cc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80036c8:	4b18      	ldr	r3, [pc, #96]	; (800372c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036ca:	e001      	b.n	80036d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80036cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036d4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e2:	f043 0202 	orr.w	r2, r3, #2
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7ff fdfa 	bl	80032e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	f003 0308 	and.w	r3, r3, #8
 80036f6:	2b08      	cmp	r3, #8
 80036f8:	d136      	bne.n	8003768 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	f003 0320 	and.w	r3, r3, #32
 8003700:	2b00      	cmp	r3, #0
 8003702:	d031      	beq.n	8003768 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a07      	ldr	r2, [pc, #28]	; (8003728 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d101      	bne.n	8003712 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800370e:	4b07      	ldr	r3, [pc, #28]	; (800372c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003710:	e001      	b.n	8003716 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003712:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4902      	ldr	r1, [pc, #8]	; (8003728 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800371e:	428b      	cmp	r3, r1
 8003720:	d106      	bne.n	8003730 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003722:	4b02      	ldr	r3, [pc, #8]	; (800372c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003724:	e006      	b.n	8003734 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003726:	bf00      	nop
 8003728:	40003800 	.word	0x40003800
 800372c:	40003400 	.word	0x40003400
 8003730:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003734:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003738:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685a      	ldr	r2, [r3, #4]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003748:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003756:	f043 0204 	orr.w	r2, r3, #4
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f7ff fdc0 	bl	80032e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003764:	e000      	b.n	8003768 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003766:	bf00      	nop
}
 8003768:	bf00      	nop
 800376a:	3720      	adds	r7, #32
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003790:	1c99      	adds	r1, r3, #2
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	6251      	str	r1, [r2, #36]	; 0x24
 8003796:	881a      	ldrh	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	3b01      	subs	r3, #1
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d113      	bne.n	80037de <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037c4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d106      	bne.n	80037de <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f7ff ffc9 	bl	8003770 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037de:	bf00      	nop
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
	...

080037e8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f4:	1c99      	adds	r1, r3, #2
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6251      	str	r1, [r2, #36]	; 0x24
 80037fa:	8819      	ldrh	r1, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a1d      	ldr	r2, [pc, #116]	; (8003878 <I2SEx_TxISR_I2SExt+0x90>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d101      	bne.n	800380a <I2SEx_TxISR_I2SExt+0x22>
 8003806:	4b1d      	ldr	r3, [pc, #116]	; (800387c <I2SEx_TxISR_I2SExt+0x94>)
 8003808:	e001      	b.n	800380e <I2SEx_TxISR_I2SExt+0x26>
 800380a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800380e:	460a      	mov	r2, r1
 8003810:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003816:	b29b      	uxth	r3, r3
 8003818:	3b01      	subs	r3, #1
 800381a:	b29a      	uxth	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003824:	b29b      	uxth	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d121      	bne.n	800386e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a12      	ldr	r2, [pc, #72]	; (8003878 <I2SEx_TxISR_I2SExt+0x90>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d101      	bne.n	8003838 <I2SEx_TxISR_I2SExt+0x50>
 8003834:	4b11      	ldr	r3, [pc, #68]	; (800387c <I2SEx_TxISR_I2SExt+0x94>)
 8003836:	e001      	b.n	800383c <I2SEx_TxISR_I2SExt+0x54>
 8003838:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800383c:	685a      	ldr	r2, [r3, #4]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	490d      	ldr	r1, [pc, #52]	; (8003878 <I2SEx_TxISR_I2SExt+0x90>)
 8003844:	428b      	cmp	r3, r1
 8003846:	d101      	bne.n	800384c <I2SEx_TxISR_I2SExt+0x64>
 8003848:	4b0c      	ldr	r3, [pc, #48]	; (800387c <I2SEx_TxISR_I2SExt+0x94>)
 800384a:	e001      	b.n	8003850 <I2SEx_TxISR_I2SExt+0x68>
 800384c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003850:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003854:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800385a:	b29b      	uxth	r3, r3
 800385c:	2b00      	cmp	r3, #0
 800385e:	d106      	bne.n	800386e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f7ff ff81 	bl	8003770 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800386e:	bf00      	nop
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	40003800 	.word	0x40003800
 800387c:	40003400 	.word	0x40003400

08003880 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68d8      	ldr	r0, [r3, #12]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003892:	1c99      	adds	r1, r3, #2
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003898:	b282      	uxth	r2, r0
 800389a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	3b01      	subs	r3, #1
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d113      	bne.n	80038dc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685a      	ldr	r2, [r3, #4]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038c2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d106      	bne.n	80038dc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f7ff ff4a 	bl	8003770 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038dc:	bf00      	nop
 80038de:	3708      	adds	r7, #8
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a20      	ldr	r2, [pc, #128]	; (8003974 <I2SEx_RxISR_I2SExt+0x90>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d101      	bne.n	80038fa <I2SEx_RxISR_I2SExt+0x16>
 80038f6:	4b20      	ldr	r3, [pc, #128]	; (8003978 <I2SEx_RxISR_I2SExt+0x94>)
 80038f8:	e001      	b.n	80038fe <I2SEx_RxISR_I2SExt+0x1a>
 80038fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038fe:	68d8      	ldr	r0, [r3, #12]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003904:	1c99      	adds	r1, r3, #2
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	62d1      	str	r1, [r2, #44]	; 0x2c
 800390a:	b282      	uxth	r2, r0
 800390c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003912:	b29b      	uxth	r3, r3
 8003914:	3b01      	subs	r3, #1
 8003916:	b29a      	uxth	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003920:	b29b      	uxth	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d121      	bne.n	800396a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a12      	ldr	r2, [pc, #72]	; (8003974 <I2SEx_RxISR_I2SExt+0x90>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d101      	bne.n	8003934 <I2SEx_RxISR_I2SExt+0x50>
 8003930:	4b11      	ldr	r3, [pc, #68]	; (8003978 <I2SEx_RxISR_I2SExt+0x94>)
 8003932:	e001      	b.n	8003938 <I2SEx_RxISR_I2SExt+0x54>
 8003934:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003938:	685a      	ldr	r2, [r3, #4]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	490d      	ldr	r1, [pc, #52]	; (8003974 <I2SEx_RxISR_I2SExt+0x90>)
 8003940:	428b      	cmp	r3, r1
 8003942:	d101      	bne.n	8003948 <I2SEx_RxISR_I2SExt+0x64>
 8003944:	4b0c      	ldr	r3, [pc, #48]	; (8003978 <I2SEx_RxISR_I2SExt+0x94>)
 8003946:	e001      	b.n	800394c <I2SEx_RxISR_I2SExt+0x68>
 8003948:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800394c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003950:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003956:	b29b      	uxth	r3, r3
 8003958:	2b00      	cmp	r3, #0
 800395a:	d106      	bne.n	800396a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f7ff ff03 	bl	8003770 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800396a:	bf00      	nop
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	40003800 	.word	0x40003800
 8003978:	40003400 	.word	0x40003400

0800397c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d101      	bne.n	800398e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e267      	b.n	8003e5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b00      	cmp	r3, #0
 8003998:	d075      	beq.n	8003a86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800399a:	4b88      	ldr	r3, [pc, #544]	; (8003bbc <HAL_RCC_OscConfig+0x240>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f003 030c 	and.w	r3, r3, #12
 80039a2:	2b04      	cmp	r3, #4
 80039a4:	d00c      	beq.n	80039c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039a6:	4b85      	ldr	r3, [pc, #532]	; (8003bbc <HAL_RCC_OscConfig+0x240>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039ae:	2b08      	cmp	r3, #8
 80039b0:	d112      	bne.n	80039d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039b2:	4b82      	ldr	r3, [pc, #520]	; (8003bbc <HAL_RCC_OscConfig+0x240>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039be:	d10b      	bne.n	80039d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039c0:	4b7e      	ldr	r3, [pc, #504]	; (8003bbc <HAL_RCC_OscConfig+0x240>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d05b      	beq.n	8003a84 <HAL_RCC_OscConfig+0x108>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d157      	bne.n	8003a84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e242      	b.n	8003e5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039e0:	d106      	bne.n	80039f0 <HAL_RCC_OscConfig+0x74>
 80039e2:	4b76      	ldr	r3, [pc, #472]	; (8003bbc <HAL_RCC_OscConfig+0x240>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a75      	ldr	r2, [pc, #468]	; (8003bbc <HAL_RCC_OscConfig+0x240>)
 80039e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ec:	6013      	str	r3, [r2, #0]
 80039ee:	e01d      	b.n	8003a2c <HAL_RCC_OscConfig+0xb0>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039f8:	d10c      	bne.n	8003a14 <HAL_RCC_OscConfig+0x98>
 80039fa:	4b70      	ldr	r3, [pc, #448]	; (8003bbc <HAL_RCC_OscConfig+0x240>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a6f      	ldr	r2, [pc, #444]	; (8003bbc <HAL_RCC_OscConfig+0x240>)
 8003a00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a04:	6013      	str	r3, [r2, #0]
 8003a06:	4b6d      	ldr	r3, [pc, #436]	; (8003bbc <HAL_RCC_OscConfig+0x240>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a6c      	ldr	r2, [pc, #432]	; (8003bbc <HAL_RCC_OscConfig+0x240>)
 8003a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a10:	6013      	str	r3, [r2, #0]
 8003a12:	e00b      	b.n	8003a2c <HAL_RCC_OscConfig+0xb0>
 8003a14:	4b69      	ldr	r3, [pc, #420]	; (8003bbc <HAL_RCC_OscConfig+0x240>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a68      	ldr	r2, [pc, #416]	; (8003bbc <HAL_RCC_OscConfig+0x240>)
 8003a1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a1e:	6013      	str	r3, [r2, #0]
 8003a20:	4b66      	ldr	r3, [pc, #408]	; (8003bbc <HAL_RCC_OscConfig+0x240>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a65      	ldr	r2, [pc, #404]	; (8003bbc <HAL_RCC_OscConfig+0x240>)
 8003a26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d013      	beq.n	8003a5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a34:	f7fd fa8a 	bl	8000f4c <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a3c:	f7fd fa86 	bl	8000f4c <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b64      	cmp	r3, #100	; 0x64
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e207      	b.n	8003e5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a4e:	4b5b      	ldr	r3, [pc, #364]	; (8003bbc <HAL_RCC_OscConfig+0x240>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d0f0      	beq.n	8003a3c <HAL_RCC_OscConfig+0xc0>
 8003a5a:	e014      	b.n	8003a86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a5c:	f7fd fa76 	bl	8000f4c <HAL_GetTick>
 8003a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a64:	f7fd fa72 	bl	8000f4c <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b64      	cmp	r3, #100	; 0x64
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e1f3      	b.n	8003e5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a76:	4b51      	ldr	r3, [pc, #324]	; (8003bbc <HAL_RCC_OscConfig+0x240>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1f0      	bne.n	8003a64 <HAL_RCC_OscConfig+0xe8>
 8003a82:	e000      	b.n	8003a86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d063      	beq.n	8003b5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a92:	4b4a      	ldr	r3, [pc, #296]	; (8003bbc <HAL_RCC_OscConfig+0x240>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f003 030c 	and.w	r3, r3, #12
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00b      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a9e:	4b47      	ldr	r3, [pc, #284]	; (8003bbc <HAL_RCC_OscConfig+0x240>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003aa6:	2b08      	cmp	r3, #8
 8003aa8:	d11c      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aaa:	4b44      	ldr	r3, [pc, #272]	; (8003bbc <HAL_RCC_OscConfig+0x240>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d116      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ab6:	4b41      	ldr	r3, [pc, #260]	; (8003bbc <HAL_RCC_OscConfig+0x240>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d005      	beq.n	8003ace <HAL_RCC_OscConfig+0x152>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d001      	beq.n	8003ace <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e1c7      	b.n	8003e5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ace:	4b3b      	ldr	r3, [pc, #236]	; (8003bbc <HAL_RCC_OscConfig+0x240>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	4937      	ldr	r1, [pc, #220]	; (8003bbc <HAL_RCC_OscConfig+0x240>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ae2:	e03a      	b.n	8003b5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d020      	beq.n	8003b2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003aec:	4b34      	ldr	r3, [pc, #208]	; (8003bc0 <HAL_RCC_OscConfig+0x244>)
 8003aee:	2201      	movs	r2, #1
 8003af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af2:	f7fd fa2b 	bl	8000f4c <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003af8:	e008      	b.n	8003b0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003afa:	f7fd fa27 	bl	8000f4c <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e1a8      	b.n	8003e5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b0c:	4b2b      	ldr	r3, [pc, #172]	; (8003bbc <HAL_RCC_OscConfig+0x240>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d0f0      	beq.n	8003afa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b18:	4b28      	ldr	r3, [pc, #160]	; (8003bbc <HAL_RCC_OscConfig+0x240>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	00db      	lsls	r3, r3, #3
 8003b26:	4925      	ldr	r1, [pc, #148]	; (8003bbc <HAL_RCC_OscConfig+0x240>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	600b      	str	r3, [r1, #0]
 8003b2c:	e015      	b.n	8003b5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b2e:	4b24      	ldr	r3, [pc, #144]	; (8003bc0 <HAL_RCC_OscConfig+0x244>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b34:	f7fd fa0a 	bl	8000f4c <HAL_GetTick>
 8003b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b3a:	e008      	b.n	8003b4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b3c:	f7fd fa06 	bl	8000f4c <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e187      	b.n	8003e5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b4e:	4b1b      	ldr	r3, [pc, #108]	; (8003bbc <HAL_RCC_OscConfig+0x240>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1f0      	bne.n	8003b3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0308 	and.w	r3, r3, #8
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d036      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d016      	beq.n	8003b9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b6e:	4b15      	ldr	r3, [pc, #84]	; (8003bc4 <HAL_RCC_OscConfig+0x248>)
 8003b70:	2201      	movs	r2, #1
 8003b72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b74:	f7fd f9ea 	bl	8000f4c <HAL_GetTick>
 8003b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b7a:	e008      	b.n	8003b8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b7c:	f7fd f9e6 	bl	8000f4c <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e167      	b.n	8003e5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b8e:	4b0b      	ldr	r3, [pc, #44]	; (8003bbc <HAL_RCC_OscConfig+0x240>)
 8003b90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d0f0      	beq.n	8003b7c <HAL_RCC_OscConfig+0x200>
 8003b9a:	e01b      	b.n	8003bd4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b9c:	4b09      	ldr	r3, [pc, #36]	; (8003bc4 <HAL_RCC_OscConfig+0x248>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ba2:	f7fd f9d3 	bl	8000f4c <HAL_GetTick>
 8003ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ba8:	e00e      	b.n	8003bc8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003baa:	f7fd f9cf 	bl	8000f4c <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d907      	bls.n	8003bc8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e150      	b.n	8003e5e <HAL_RCC_OscConfig+0x4e2>
 8003bbc:	40023800 	.word	0x40023800
 8003bc0:	42470000 	.word	0x42470000
 8003bc4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bc8:	4b88      	ldr	r3, [pc, #544]	; (8003dec <HAL_RCC_OscConfig+0x470>)
 8003bca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1ea      	bne.n	8003baa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0304 	and.w	r3, r3, #4
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 8097 	beq.w	8003d10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003be2:	2300      	movs	r3, #0
 8003be4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003be6:	4b81      	ldr	r3, [pc, #516]	; (8003dec <HAL_RCC_OscConfig+0x470>)
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10f      	bne.n	8003c12 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	60bb      	str	r3, [r7, #8]
 8003bf6:	4b7d      	ldr	r3, [pc, #500]	; (8003dec <HAL_RCC_OscConfig+0x470>)
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	4a7c      	ldr	r2, [pc, #496]	; (8003dec <HAL_RCC_OscConfig+0x470>)
 8003bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c00:	6413      	str	r3, [r2, #64]	; 0x40
 8003c02:	4b7a      	ldr	r3, [pc, #488]	; (8003dec <HAL_RCC_OscConfig+0x470>)
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c0a:	60bb      	str	r3, [r7, #8]
 8003c0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c12:	4b77      	ldr	r3, [pc, #476]	; (8003df0 <HAL_RCC_OscConfig+0x474>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d118      	bne.n	8003c50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c1e:	4b74      	ldr	r3, [pc, #464]	; (8003df0 <HAL_RCC_OscConfig+0x474>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a73      	ldr	r2, [pc, #460]	; (8003df0 <HAL_RCC_OscConfig+0x474>)
 8003c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c2a:	f7fd f98f 	bl	8000f4c <HAL_GetTick>
 8003c2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c30:	e008      	b.n	8003c44 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c32:	f7fd f98b 	bl	8000f4c <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d901      	bls.n	8003c44 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e10c      	b.n	8003e5e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c44:	4b6a      	ldr	r3, [pc, #424]	; (8003df0 <HAL_RCC_OscConfig+0x474>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d0f0      	beq.n	8003c32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d106      	bne.n	8003c66 <HAL_RCC_OscConfig+0x2ea>
 8003c58:	4b64      	ldr	r3, [pc, #400]	; (8003dec <HAL_RCC_OscConfig+0x470>)
 8003c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c5c:	4a63      	ldr	r2, [pc, #396]	; (8003dec <HAL_RCC_OscConfig+0x470>)
 8003c5e:	f043 0301 	orr.w	r3, r3, #1
 8003c62:	6713      	str	r3, [r2, #112]	; 0x70
 8003c64:	e01c      	b.n	8003ca0 <HAL_RCC_OscConfig+0x324>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	2b05      	cmp	r3, #5
 8003c6c:	d10c      	bne.n	8003c88 <HAL_RCC_OscConfig+0x30c>
 8003c6e:	4b5f      	ldr	r3, [pc, #380]	; (8003dec <HAL_RCC_OscConfig+0x470>)
 8003c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c72:	4a5e      	ldr	r2, [pc, #376]	; (8003dec <HAL_RCC_OscConfig+0x470>)
 8003c74:	f043 0304 	orr.w	r3, r3, #4
 8003c78:	6713      	str	r3, [r2, #112]	; 0x70
 8003c7a:	4b5c      	ldr	r3, [pc, #368]	; (8003dec <HAL_RCC_OscConfig+0x470>)
 8003c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7e:	4a5b      	ldr	r2, [pc, #364]	; (8003dec <HAL_RCC_OscConfig+0x470>)
 8003c80:	f043 0301 	orr.w	r3, r3, #1
 8003c84:	6713      	str	r3, [r2, #112]	; 0x70
 8003c86:	e00b      	b.n	8003ca0 <HAL_RCC_OscConfig+0x324>
 8003c88:	4b58      	ldr	r3, [pc, #352]	; (8003dec <HAL_RCC_OscConfig+0x470>)
 8003c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c8c:	4a57      	ldr	r2, [pc, #348]	; (8003dec <HAL_RCC_OscConfig+0x470>)
 8003c8e:	f023 0301 	bic.w	r3, r3, #1
 8003c92:	6713      	str	r3, [r2, #112]	; 0x70
 8003c94:	4b55      	ldr	r3, [pc, #340]	; (8003dec <HAL_RCC_OscConfig+0x470>)
 8003c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c98:	4a54      	ldr	r2, [pc, #336]	; (8003dec <HAL_RCC_OscConfig+0x470>)
 8003c9a:	f023 0304 	bic.w	r3, r3, #4
 8003c9e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d015      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca8:	f7fd f950 	bl	8000f4c <HAL_GetTick>
 8003cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cae:	e00a      	b.n	8003cc6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cb0:	f7fd f94c 	bl	8000f4c <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e0cb      	b.n	8003e5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cc6:	4b49      	ldr	r3, [pc, #292]	; (8003dec <HAL_RCC_OscConfig+0x470>)
 8003cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0ee      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x334>
 8003cd2:	e014      	b.n	8003cfe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cd4:	f7fd f93a 	bl	8000f4c <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cda:	e00a      	b.n	8003cf2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cdc:	f7fd f936 	bl	8000f4c <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e0b5      	b.n	8003e5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cf2:	4b3e      	ldr	r3, [pc, #248]	; (8003dec <HAL_RCC_OscConfig+0x470>)
 8003cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1ee      	bne.n	8003cdc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cfe:	7dfb      	ldrb	r3, [r7, #23]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d105      	bne.n	8003d10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d04:	4b39      	ldr	r3, [pc, #228]	; (8003dec <HAL_RCC_OscConfig+0x470>)
 8003d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d08:	4a38      	ldr	r2, [pc, #224]	; (8003dec <HAL_RCC_OscConfig+0x470>)
 8003d0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d0e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f000 80a1 	beq.w	8003e5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d1a:	4b34      	ldr	r3, [pc, #208]	; (8003dec <HAL_RCC_OscConfig+0x470>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f003 030c 	and.w	r3, r3, #12
 8003d22:	2b08      	cmp	r3, #8
 8003d24:	d05c      	beq.n	8003de0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d141      	bne.n	8003db2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d2e:	4b31      	ldr	r3, [pc, #196]	; (8003df4 <HAL_RCC_OscConfig+0x478>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d34:	f7fd f90a 	bl	8000f4c <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d3c:	f7fd f906 	bl	8000f4c <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e087      	b.n	8003e5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d4e:	4b27      	ldr	r3, [pc, #156]	; (8003dec <HAL_RCC_OscConfig+0x470>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1f0      	bne.n	8003d3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	69da      	ldr	r2, [r3, #28]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	431a      	orrs	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d68:	019b      	lsls	r3, r3, #6
 8003d6a:	431a      	orrs	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d70:	085b      	lsrs	r3, r3, #1
 8003d72:	3b01      	subs	r3, #1
 8003d74:	041b      	lsls	r3, r3, #16
 8003d76:	431a      	orrs	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7c:	061b      	lsls	r3, r3, #24
 8003d7e:	491b      	ldr	r1, [pc, #108]	; (8003dec <HAL_RCC_OscConfig+0x470>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d84:	4b1b      	ldr	r3, [pc, #108]	; (8003df4 <HAL_RCC_OscConfig+0x478>)
 8003d86:	2201      	movs	r2, #1
 8003d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d8a:	f7fd f8df 	bl	8000f4c <HAL_GetTick>
 8003d8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d90:	e008      	b.n	8003da4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d92:	f7fd f8db 	bl	8000f4c <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d901      	bls.n	8003da4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e05c      	b.n	8003e5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003da4:	4b11      	ldr	r3, [pc, #68]	; (8003dec <HAL_RCC_OscConfig+0x470>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d0f0      	beq.n	8003d92 <HAL_RCC_OscConfig+0x416>
 8003db0:	e054      	b.n	8003e5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003db2:	4b10      	ldr	r3, [pc, #64]	; (8003df4 <HAL_RCC_OscConfig+0x478>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db8:	f7fd f8c8 	bl	8000f4c <HAL_GetTick>
 8003dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dbe:	e008      	b.n	8003dd2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dc0:	f7fd f8c4 	bl	8000f4c <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e045      	b.n	8003e5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dd2:	4b06      	ldr	r3, [pc, #24]	; (8003dec <HAL_RCC_OscConfig+0x470>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1f0      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x444>
 8003dde:	e03d      	b.n	8003e5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d107      	bne.n	8003df8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e038      	b.n	8003e5e <HAL_RCC_OscConfig+0x4e2>
 8003dec:	40023800 	.word	0x40023800
 8003df0:	40007000 	.word	0x40007000
 8003df4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003df8:	4b1b      	ldr	r3, [pc, #108]	; (8003e68 <HAL_RCC_OscConfig+0x4ec>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d028      	beq.n	8003e58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d121      	bne.n	8003e58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d11a      	bne.n	8003e58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e28:	4013      	ands	r3, r2
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d111      	bne.n	8003e58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3e:	085b      	lsrs	r3, r3, #1
 8003e40:	3b01      	subs	r3, #1
 8003e42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d107      	bne.n	8003e58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d001      	beq.n	8003e5c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e000      	b.n	8003e5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3718      	adds	r7, #24
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	40023800 	.word	0x40023800

08003e6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d101      	bne.n	8003e80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e0cc      	b.n	800401a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e80:	4b68      	ldr	r3, [pc, #416]	; (8004024 <HAL_RCC_ClockConfig+0x1b8>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0307 	and.w	r3, r3, #7
 8003e88:	683a      	ldr	r2, [r7, #0]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d90c      	bls.n	8003ea8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e8e:	4b65      	ldr	r3, [pc, #404]	; (8004024 <HAL_RCC_ClockConfig+0x1b8>)
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	b2d2      	uxtb	r2, r2
 8003e94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e96:	4b63      	ldr	r3, [pc, #396]	; (8004024 <HAL_RCC_ClockConfig+0x1b8>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0307 	and.w	r3, r3, #7
 8003e9e:	683a      	ldr	r2, [r7, #0]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d001      	beq.n	8003ea8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e0b8      	b.n	800401a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d020      	beq.n	8003ef6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0304 	and.w	r3, r3, #4
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d005      	beq.n	8003ecc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ec0:	4b59      	ldr	r3, [pc, #356]	; (8004028 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	4a58      	ldr	r2, [pc, #352]	; (8004028 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003eca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0308 	and.w	r3, r3, #8
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d005      	beq.n	8003ee4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ed8:	4b53      	ldr	r3, [pc, #332]	; (8004028 <HAL_RCC_ClockConfig+0x1bc>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	4a52      	ldr	r2, [pc, #328]	; (8004028 <HAL_RCC_ClockConfig+0x1bc>)
 8003ede:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ee2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ee4:	4b50      	ldr	r3, [pc, #320]	; (8004028 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	494d      	ldr	r1, [pc, #308]	; (8004028 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d044      	beq.n	8003f8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d107      	bne.n	8003f1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f0a:	4b47      	ldr	r3, [pc, #284]	; (8004028 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d119      	bne.n	8003f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e07f      	b.n	800401a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d003      	beq.n	8003f2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f26:	2b03      	cmp	r3, #3
 8003f28:	d107      	bne.n	8003f3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f2a:	4b3f      	ldr	r3, [pc, #252]	; (8004028 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d109      	bne.n	8003f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e06f      	b.n	800401a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f3a:	4b3b      	ldr	r3, [pc, #236]	; (8004028 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0302 	and.w	r3, r3, #2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d101      	bne.n	8003f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e067      	b.n	800401a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f4a:	4b37      	ldr	r3, [pc, #220]	; (8004028 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f023 0203 	bic.w	r2, r3, #3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	4934      	ldr	r1, [pc, #208]	; (8004028 <HAL_RCC_ClockConfig+0x1bc>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f5c:	f7fc fff6 	bl	8000f4c <HAL_GetTick>
 8003f60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f62:	e00a      	b.n	8003f7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f64:	f7fc fff2 	bl	8000f4c <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e04f      	b.n	800401a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f7a:	4b2b      	ldr	r3, [pc, #172]	; (8004028 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 020c 	and.w	r2, r3, #12
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d1eb      	bne.n	8003f64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f8c:	4b25      	ldr	r3, [pc, #148]	; (8004024 <HAL_RCC_ClockConfig+0x1b8>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0307 	and.w	r3, r3, #7
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d20c      	bcs.n	8003fb4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f9a:	4b22      	ldr	r3, [pc, #136]	; (8004024 <HAL_RCC_ClockConfig+0x1b8>)
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	b2d2      	uxtb	r2, r2
 8003fa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fa2:	4b20      	ldr	r3, [pc, #128]	; (8004024 <HAL_RCC_ClockConfig+0x1b8>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0307 	and.w	r3, r3, #7
 8003faa:	683a      	ldr	r2, [r7, #0]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d001      	beq.n	8003fb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e032      	b.n	800401a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0304 	and.w	r3, r3, #4
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d008      	beq.n	8003fd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fc0:	4b19      	ldr	r3, [pc, #100]	; (8004028 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	4916      	ldr	r1, [pc, #88]	; (8004028 <HAL_RCC_ClockConfig+0x1bc>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0308 	and.w	r3, r3, #8
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d009      	beq.n	8003ff2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fde:	4b12      	ldr	r3, [pc, #72]	; (8004028 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	00db      	lsls	r3, r3, #3
 8003fec:	490e      	ldr	r1, [pc, #56]	; (8004028 <HAL_RCC_ClockConfig+0x1bc>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ff2:	f000 f821 	bl	8004038 <HAL_RCC_GetSysClockFreq>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	4b0b      	ldr	r3, [pc, #44]	; (8004028 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	091b      	lsrs	r3, r3, #4
 8003ffe:	f003 030f 	and.w	r3, r3, #15
 8004002:	490a      	ldr	r1, [pc, #40]	; (800402c <HAL_RCC_ClockConfig+0x1c0>)
 8004004:	5ccb      	ldrb	r3, [r1, r3]
 8004006:	fa22 f303 	lsr.w	r3, r2, r3
 800400a:	4a09      	ldr	r2, [pc, #36]	; (8004030 <HAL_RCC_ClockConfig+0x1c4>)
 800400c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800400e:	4b09      	ldr	r3, [pc, #36]	; (8004034 <HAL_RCC_ClockConfig+0x1c8>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4618      	mov	r0, r3
 8004014:	f7fc ff56 	bl	8000ec4 <HAL_InitTick>

  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	40023c00 	.word	0x40023c00
 8004028:	40023800 	.word	0x40023800
 800402c:	0800b8b4 	.word	0x0800b8b4
 8004030:	20000000 	.word	0x20000000
 8004034:	20000004 	.word	0x20000004

08004038 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004038:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800403c:	b094      	sub	sp, #80	; 0x50
 800403e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004040:	2300      	movs	r3, #0
 8004042:	647b      	str	r3, [r7, #68]	; 0x44
 8004044:	2300      	movs	r3, #0
 8004046:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004048:	2300      	movs	r3, #0
 800404a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800404c:	2300      	movs	r3, #0
 800404e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004050:	4b79      	ldr	r3, [pc, #484]	; (8004238 <HAL_RCC_GetSysClockFreq+0x200>)
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f003 030c 	and.w	r3, r3, #12
 8004058:	2b08      	cmp	r3, #8
 800405a:	d00d      	beq.n	8004078 <HAL_RCC_GetSysClockFreq+0x40>
 800405c:	2b08      	cmp	r3, #8
 800405e:	f200 80e1 	bhi.w	8004224 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004062:	2b00      	cmp	r3, #0
 8004064:	d002      	beq.n	800406c <HAL_RCC_GetSysClockFreq+0x34>
 8004066:	2b04      	cmp	r3, #4
 8004068:	d003      	beq.n	8004072 <HAL_RCC_GetSysClockFreq+0x3a>
 800406a:	e0db      	b.n	8004224 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800406c:	4b73      	ldr	r3, [pc, #460]	; (800423c <HAL_RCC_GetSysClockFreq+0x204>)
 800406e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004070:	e0db      	b.n	800422a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004072:	4b73      	ldr	r3, [pc, #460]	; (8004240 <HAL_RCC_GetSysClockFreq+0x208>)
 8004074:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004076:	e0d8      	b.n	800422a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004078:	4b6f      	ldr	r3, [pc, #444]	; (8004238 <HAL_RCC_GetSysClockFreq+0x200>)
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004080:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004082:	4b6d      	ldr	r3, [pc, #436]	; (8004238 <HAL_RCC_GetSysClockFreq+0x200>)
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d063      	beq.n	8004156 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800408e:	4b6a      	ldr	r3, [pc, #424]	; (8004238 <HAL_RCC_GetSysClockFreq+0x200>)
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	099b      	lsrs	r3, r3, #6
 8004094:	2200      	movs	r2, #0
 8004096:	63bb      	str	r3, [r7, #56]	; 0x38
 8004098:	63fa      	str	r2, [r7, #60]	; 0x3c
 800409a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800409c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040a0:	633b      	str	r3, [r7, #48]	; 0x30
 80040a2:	2300      	movs	r3, #0
 80040a4:	637b      	str	r3, [r7, #52]	; 0x34
 80040a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80040aa:	4622      	mov	r2, r4
 80040ac:	462b      	mov	r3, r5
 80040ae:	f04f 0000 	mov.w	r0, #0
 80040b2:	f04f 0100 	mov.w	r1, #0
 80040b6:	0159      	lsls	r1, r3, #5
 80040b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040bc:	0150      	lsls	r0, r2, #5
 80040be:	4602      	mov	r2, r0
 80040c0:	460b      	mov	r3, r1
 80040c2:	4621      	mov	r1, r4
 80040c4:	1a51      	subs	r1, r2, r1
 80040c6:	6139      	str	r1, [r7, #16]
 80040c8:	4629      	mov	r1, r5
 80040ca:	eb63 0301 	sbc.w	r3, r3, r1
 80040ce:	617b      	str	r3, [r7, #20]
 80040d0:	f04f 0200 	mov.w	r2, #0
 80040d4:	f04f 0300 	mov.w	r3, #0
 80040d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040dc:	4659      	mov	r1, fp
 80040de:	018b      	lsls	r3, r1, #6
 80040e0:	4651      	mov	r1, sl
 80040e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040e6:	4651      	mov	r1, sl
 80040e8:	018a      	lsls	r2, r1, #6
 80040ea:	4651      	mov	r1, sl
 80040ec:	ebb2 0801 	subs.w	r8, r2, r1
 80040f0:	4659      	mov	r1, fp
 80040f2:	eb63 0901 	sbc.w	r9, r3, r1
 80040f6:	f04f 0200 	mov.w	r2, #0
 80040fa:	f04f 0300 	mov.w	r3, #0
 80040fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004102:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004106:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800410a:	4690      	mov	r8, r2
 800410c:	4699      	mov	r9, r3
 800410e:	4623      	mov	r3, r4
 8004110:	eb18 0303 	adds.w	r3, r8, r3
 8004114:	60bb      	str	r3, [r7, #8]
 8004116:	462b      	mov	r3, r5
 8004118:	eb49 0303 	adc.w	r3, r9, r3
 800411c:	60fb      	str	r3, [r7, #12]
 800411e:	f04f 0200 	mov.w	r2, #0
 8004122:	f04f 0300 	mov.w	r3, #0
 8004126:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800412a:	4629      	mov	r1, r5
 800412c:	024b      	lsls	r3, r1, #9
 800412e:	4621      	mov	r1, r4
 8004130:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004134:	4621      	mov	r1, r4
 8004136:	024a      	lsls	r2, r1, #9
 8004138:	4610      	mov	r0, r2
 800413a:	4619      	mov	r1, r3
 800413c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800413e:	2200      	movs	r2, #0
 8004140:	62bb      	str	r3, [r7, #40]	; 0x28
 8004142:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004144:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004148:	f7fc f842 	bl	80001d0 <__aeabi_uldivmod>
 800414c:	4602      	mov	r2, r0
 800414e:	460b      	mov	r3, r1
 8004150:	4613      	mov	r3, r2
 8004152:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004154:	e058      	b.n	8004208 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004156:	4b38      	ldr	r3, [pc, #224]	; (8004238 <HAL_RCC_GetSysClockFreq+0x200>)
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	099b      	lsrs	r3, r3, #6
 800415c:	2200      	movs	r2, #0
 800415e:	4618      	mov	r0, r3
 8004160:	4611      	mov	r1, r2
 8004162:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004166:	623b      	str	r3, [r7, #32]
 8004168:	2300      	movs	r3, #0
 800416a:	627b      	str	r3, [r7, #36]	; 0x24
 800416c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004170:	4642      	mov	r2, r8
 8004172:	464b      	mov	r3, r9
 8004174:	f04f 0000 	mov.w	r0, #0
 8004178:	f04f 0100 	mov.w	r1, #0
 800417c:	0159      	lsls	r1, r3, #5
 800417e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004182:	0150      	lsls	r0, r2, #5
 8004184:	4602      	mov	r2, r0
 8004186:	460b      	mov	r3, r1
 8004188:	4641      	mov	r1, r8
 800418a:	ebb2 0a01 	subs.w	sl, r2, r1
 800418e:	4649      	mov	r1, r9
 8004190:	eb63 0b01 	sbc.w	fp, r3, r1
 8004194:	f04f 0200 	mov.w	r2, #0
 8004198:	f04f 0300 	mov.w	r3, #0
 800419c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80041a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80041a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80041a8:	ebb2 040a 	subs.w	r4, r2, sl
 80041ac:	eb63 050b 	sbc.w	r5, r3, fp
 80041b0:	f04f 0200 	mov.w	r2, #0
 80041b4:	f04f 0300 	mov.w	r3, #0
 80041b8:	00eb      	lsls	r3, r5, #3
 80041ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041be:	00e2      	lsls	r2, r4, #3
 80041c0:	4614      	mov	r4, r2
 80041c2:	461d      	mov	r5, r3
 80041c4:	4643      	mov	r3, r8
 80041c6:	18e3      	adds	r3, r4, r3
 80041c8:	603b      	str	r3, [r7, #0]
 80041ca:	464b      	mov	r3, r9
 80041cc:	eb45 0303 	adc.w	r3, r5, r3
 80041d0:	607b      	str	r3, [r7, #4]
 80041d2:	f04f 0200 	mov.w	r2, #0
 80041d6:	f04f 0300 	mov.w	r3, #0
 80041da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041de:	4629      	mov	r1, r5
 80041e0:	028b      	lsls	r3, r1, #10
 80041e2:	4621      	mov	r1, r4
 80041e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041e8:	4621      	mov	r1, r4
 80041ea:	028a      	lsls	r2, r1, #10
 80041ec:	4610      	mov	r0, r2
 80041ee:	4619      	mov	r1, r3
 80041f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041f2:	2200      	movs	r2, #0
 80041f4:	61bb      	str	r3, [r7, #24]
 80041f6:	61fa      	str	r2, [r7, #28]
 80041f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041fc:	f7fb ffe8 	bl	80001d0 <__aeabi_uldivmod>
 8004200:	4602      	mov	r2, r0
 8004202:	460b      	mov	r3, r1
 8004204:	4613      	mov	r3, r2
 8004206:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004208:	4b0b      	ldr	r3, [pc, #44]	; (8004238 <HAL_RCC_GetSysClockFreq+0x200>)
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	0c1b      	lsrs	r3, r3, #16
 800420e:	f003 0303 	and.w	r3, r3, #3
 8004212:	3301      	adds	r3, #1
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004218:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800421a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800421c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004220:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004222:	e002      	b.n	800422a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004224:	4b05      	ldr	r3, [pc, #20]	; (800423c <HAL_RCC_GetSysClockFreq+0x204>)
 8004226:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004228:	bf00      	nop
    }
  }
  return sysclockfreq;
 800422a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800422c:	4618      	mov	r0, r3
 800422e:	3750      	adds	r7, #80	; 0x50
 8004230:	46bd      	mov	sp, r7
 8004232:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004236:	bf00      	nop
 8004238:	40023800 	.word	0x40023800
 800423c:	00f42400 	.word	0x00f42400
 8004240:	007a1200 	.word	0x007a1200

08004244 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004244:	b480      	push	{r7}
 8004246:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004248:	4b03      	ldr	r3, [pc, #12]	; (8004258 <HAL_RCC_GetHCLKFreq+0x14>)
 800424a:	681b      	ldr	r3, [r3, #0]
}
 800424c:	4618      	mov	r0, r3
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	20000000 	.word	0x20000000

0800425c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004260:	f7ff fff0 	bl	8004244 <HAL_RCC_GetHCLKFreq>
 8004264:	4602      	mov	r2, r0
 8004266:	4b05      	ldr	r3, [pc, #20]	; (800427c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	0a9b      	lsrs	r3, r3, #10
 800426c:	f003 0307 	and.w	r3, r3, #7
 8004270:	4903      	ldr	r1, [pc, #12]	; (8004280 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004272:	5ccb      	ldrb	r3, [r1, r3]
 8004274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004278:	4618      	mov	r0, r3
 800427a:	bd80      	pop	{r7, pc}
 800427c:	40023800 	.word	0x40023800
 8004280:	0800b8c4 	.word	0x0800b8c4

08004284 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800428c:	2300      	movs	r3, #0
 800428e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004290:	2300      	movs	r3, #0
 8004292:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	2b00      	cmp	r3, #0
 800429e:	d105      	bne.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d035      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80042ac:	4b62      	ldr	r3, [pc, #392]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80042b2:	f7fc fe4b 	bl	8000f4c <HAL_GetTick>
 80042b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042b8:	e008      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80042ba:	f7fc fe47 	bl	8000f4c <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d901      	bls.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e0b0      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042cc:	4b5b      	ldr	r3, [pc, #364]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1f0      	bne.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	019a      	lsls	r2, r3, #6
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	071b      	lsls	r3, r3, #28
 80042e4:	4955      	ldr	r1, [pc, #340]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80042ec:	4b52      	ldr	r3, [pc, #328]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80042ee:	2201      	movs	r2, #1
 80042f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80042f2:	f7fc fe2b 	bl	8000f4c <HAL_GetTick>
 80042f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042f8:	e008      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80042fa:	f7fc fe27 	bl	8000f4c <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	2b02      	cmp	r3, #2
 8004306:	d901      	bls.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e090      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800430c:	4b4b      	ldr	r3, [pc, #300]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d0f0      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0302 	and.w	r3, r3, #2
 8004320:	2b00      	cmp	r3, #0
 8004322:	f000 8083 	beq.w	800442c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004326:	2300      	movs	r3, #0
 8004328:	60fb      	str	r3, [r7, #12]
 800432a:	4b44      	ldr	r3, [pc, #272]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	4a43      	ldr	r2, [pc, #268]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004334:	6413      	str	r3, [r2, #64]	; 0x40
 8004336:	4b41      	ldr	r3, [pc, #260]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800433e:	60fb      	str	r3, [r7, #12]
 8004340:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004342:	4b3f      	ldr	r3, [pc, #252]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a3e      	ldr	r2, [pc, #248]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800434c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800434e:	f7fc fdfd 	bl	8000f4c <HAL_GetTick>
 8004352:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004354:	e008      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004356:	f7fc fdf9 	bl	8000f4c <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	2b02      	cmp	r3, #2
 8004362:	d901      	bls.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e062      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004368:	4b35      	ldr	r3, [pc, #212]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004370:	2b00      	cmp	r3, #0
 8004372:	d0f0      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004374:	4b31      	ldr	r3, [pc, #196]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004378:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800437c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d02f      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	429a      	cmp	r2, r3
 8004390:	d028      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004392:	4b2a      	ldr	r3, [pc, #168]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800439a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800439c:	4b29      	ldr	r3, [pc, #164]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800439e:	2201      	movs	r2, #1
 80043a0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043a2:	4b28      	ldr	r3, [pc, #160]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80043a8:	4a24      	ldr	r2, [pc, #144]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80043ae:	4b23      	ldr	r3, [pc, #140]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d114      	bne.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80043ba:	f7fc fdc7 	bl	8000f4c <HAL_GetTick>
 80043be:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043c0:	e00a      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043c2:	f7fc fdc3 	bl	8000f4c <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d901      	bls.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e02a      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d8:	4b18      	ldr	r3, [pc, #96]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043dc:	f003 0302 	and.w	r3, r3, #2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d0ee      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043f0:	d10d      	bne.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80043f2:	4b12      	ldr	r3, [pc, #72]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004402:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004406:	490d      	ldr	r1, [pc, #52]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004408:	4313      	orrs	r3, r2
 800440a:	608b      	str	r3, [r1, #8]
 800440c:	e005      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800440e:	4b0b      	ldr	r3, [pc, #44]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	4a0a      	ldr	r2, [pc, #40]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004414:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004418:	6093      	str	r3, [r2, #8]
 800441a:	4b08      	ldr	r3, [pc, #32]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800441c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004426:	4905      	ldr	r1, [pc, #20]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004428:	4313      	orrs	r3, r2
 800442a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3718      	adds	r7, #24
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	42470068 	.word	0x42470068
 800443c:	40023800 	.word	0x40023800
 8004440:	40007000 	.word	0x40007000
 8004444:	42470e40 	.word	0x42470e40

08004448 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004448:	b480      	push	{r7}
 800444a:	b087      	sub	sp, #28
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004450:	2300      	movs	r3, #0
 8004452:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004454:	2300      	movs	r3, #0
 8004456:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004458:	2300      	movs	r3, #0
 800445a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800445c:	2300      	movs	r3, #0
 800445e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d13e      	bne.n	80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004466:	4b23      	ldr	r3, [pc, #140]	; (80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800446e:	60fb      	str	r3, [r7, #12]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d005      	beq.n	8004482 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d12f      	bne.n	80044dc <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800447c:	4b1e      	ldr	r3, [pc, #120]	; (80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800447e:	617b      	str	r3, [r7, #20]
          break;
 8004480:	e02f      	b.n	80044e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004482:	4b1c      	ldr	r3, [pc, #112]	; (80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800448a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800448e:	d108      	bne.n	80044a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004490:	4b18      	ldr	r3, [pc, #96]	; (80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004498:	4a18      	ldr	r2, [pc, #96]	; (80044fc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800449a:	fbb2 f3f3 	udiv	r3, r2, r3
 800449e:	613b      	str	r3, [r7, #16]
 80044a0:	e007      	b.n	80044b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80044a2:	4b14      	ldr	r3, [pc, #80]	; (80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044aa:	4a15      	ldr	r2, [pc, #84]	; (8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80044ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b0:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80044b2:	4b10      	ldr	r3, [pc, #64]	; (80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044b8:	099b      	lsrs	r3, r3, #6
 80044ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	fb02 f303 	mul.w	r3, r2, r3
 80044c4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80044c6:	4b0b      	ldr	r3, [pc, #44]	; (80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044cc:	0f1b      	lsrs	r3, r3, #28
 80044ce:	f003 0307 	and.w	r3, r3, #7
 80044d2:	68ba      	ldr	r2, [r7, #8]
 80044d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d8:	617b      	str	r3, [r7, #20]
          break;
 80044da:	e002      	b.n	80044e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80044dc:	2300      	movs	r3, #0
 80044de:	617b      	str	r3, [r7, #20]
          break;
 80044e0:	bf00      	nop
        }
      }
      break;
 80044e2:	bf00      	nop
    }
  }
  return frequency;
 80044e4:	697b      	ldr	r3, [r7, #20]
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	371c      	adds	r7, #28
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	40023800 	.word	0x40023800
 80044f8:	00bb8000 	.word	0x00bb8000
 80044fc:	007a1200 	.word	0x007a1200
 8004500:	00f42400 	.word	0x00f42400

08004504 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e07b      	b.n	800460e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451a:	2b00      	cmp	r3, #0
 800451c:	d108      	bne.n	8004530 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004526:	d009      	beq.n	800453c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	61da      	str	r2, [r3, #28]
 800452e:	e005      	b.n	800453c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d106      	bne.n	800455c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f7fc fb46 	bl	8000be8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2202      	movs	r2, #2
 8004560:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004572:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004584:	431a      	orrs	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800458e:	431a      	orrs	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	f003 0302 	and.w	r3, r3, #2
 8004598:	431a      	orrs	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	431a      	orrs	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045ac:	431a      	orrs	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	69db      	ldr	r3, [r3, #28]
 80045b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045b6:	431a      	orrs	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a1b      	ldr	r3, [r3, #32]
 80045bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c0:	ea42 0103 	orr.w	r1, r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	430a      	orrs	r2, r1
 80045d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	0c1b      	lsrs	r3, r3, #16
 80045da:	f003 0104 	and.w	r1, r3, #4
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e2:	f003 0210 	and.w	r2, r3, #16
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	69da      	ldr	r2, [r3, #28]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3708      	adds	r7, #8
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b082      	sub	sp, #8
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d101      	bne.n	8004628 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e041      	b.n	80046ac <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800462e:	b2db      	uxtb	r3, r3
 8004630:	2b00      	cmp	r3, #0
 8004632:	d106      	bne.n	8004642 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f7fc fb1b 	bl	8000c78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2202      	movs	r2, #2
 8004646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	3304      	adds	r3, #4
 8004652:	4619      	mov	r1, r3
 8004654:	4610      	mov	r0, r2
 8004656:	f000 f9cf 	bl	80049f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2201      	movs	r2, #1
 800468e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2201      	movs	r2, #1
 8004696:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2201      	movs	r2, #1
 800469e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2201      	movs	r2, #1
 80046a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3708      	adds	r7, #8
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d001      	beq.n	80046cc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e046      	b.n	800475a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2202      	movs	r2, #2
 80046d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a23      	ldr	r2, [pc, #140]	; (8004768 <HAL_TIM_Base_Start+0xb4>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d022      	beq.n	8004724 <HAL_TIM_Base_Start+0x70>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046e6:	d01d      	beq.n	8004724 <HAL_TIM_Base_Start+0x70>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a1f      	ldr	r2, [pc, #124]	; (800476c <HAL_TIM_Base_Start+0xb8>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d018      	beq.n	8004724 <HAL_TIM_Base_Start+0x70>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a1e      	ldr	r2, [pc, #120]	; (8004770 <HAL_TIM_Base_Start+0xbc>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d013      	beq.n	8004724 <HAL_TIM_Base_Start+0x70>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a1c      	ldr	r2, [pc, #112]	; (8004774 <HAL_TIM_Base_Start+0xc0>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d00e      	beq.n	8004724 <HAL_TIM_Base_Start+0x70>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a1b      	ldr	r2, [pc, #108]	; (8004778 <HAL_TIM_Base_Start+0xc4>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d009      	beq.n	8004724 <HAL_TIM_Base_Start+0x70>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a19      	ldr	r2, [pc, #100]	; (800477c <HAL_TIM_Base_Start+0xc8>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d004      	beq.n	8004724 <HAL_TIM_Base_Start+0x70>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a18      	ldr	r2, [pc, #96]	; (8004780 <HAL_TIM_Base_Start+0xcc>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d111      	bne.n	8004748 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f003 0307 	and.w	r3, r3, #7
 800472e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2b06      	cmp	r3, #6
 8004734:	d010      	beq.n	8004758 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f042 0201 	orr.w	r2, r2, #1
 8004744:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004746:	e007      	b.n	8004758 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f042 0201 	orr.w	r2, r2, #1
 8004756:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	40010000 	.word	0x40010000
 800476c:	40000400 	.word	0x40000400
 8004770:	40000800 	.word	0x40000800
 8004774:	40000c00 	.word	0x40000c00
 8004778:	40010400 	.word	0x40010400
 800477c:	40014000 	.word	0x40014000
 8004780:	40001800 	.word	0x40001800

08004784 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	f003 0302 	and.w	r3, r3, #2
 8004796:	2b02      	cmp	r3, #2
 8004798:	d122      	bne.n	80047e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d11b      	bne.n	80047e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f06f 0202 	mvn.w	r2, #2
 80047b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2201      	movs	r2, #1
 80047b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	f003 0303 	and.w	r3, r3, #3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d003      	beq.n	80047ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 f8f8 	bl	80049bc <HAL_TIM_IC_CaptureCallback>
 80047cc:	e005      	b.n	80047da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 f8ea 	bl	80049a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 f8fb 	bl	80049d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	f003 0304 	and.w	r3, r3, #4
 80047ea:	2b04      	cmp	r3, #4
 80047ec:	d122      	bne.n	8004834 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	f003 0304 	and.w	r3, r3, #4
 80047f8:	2b04      	cmp	r3, #4
 80047fa:	d11b      	bne.n	8004834 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f06f 0204 	mvn.w	r2, #4
 8004804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2202      	movs	r2, #2
 800480a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004816:	2b00      	cmp	r3, #0
 8004818:	d003      	beq.n	8004822 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 f8ce 	bl	80049bc <HAL_TIM_IC_CaptureCallback>
 8004820:	e005      	b.n	800482e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f8c0 	bl	80049a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 f8d1 	bl	80049d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	f003 0308 	and.w	r3, r3, #8
 800483e:	2b08      	cmp	r3, #8
 8004840:	d122      	bne.n	8004888 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	f003 0308 	and.w	r3, r3, #8
 800484c:	2b08      	cmp	r3, #8
 800484e:	d11b      	bne.n	8004888 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f06f 0208 	mvn.w	r2, #8
 8004858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2204      	movs	r2, #4
 800485e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	f003 0303 	and.w	r3, r3, #3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 f8a4 	bl	80049bc <HAL_TIM_IC_CaptureCallback>
 8004874:	e005      	b.n	8004882 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f896 	bl	80049a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 f8a7 	bl	80049d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	f003 0310 	and.w	r3, r3, #16
 8004892:	2b10      	cmp	r3, #16
 8004894:	d122      	bne.n	80048dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	f003 0310 	and.w	r3, r3, #16
 80048a0:	2b10      	cmp	r3, #16
 80048a2:	d11b      	bne.n	80048dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f06f 0210 	mvn.w	r2, #16
 80048ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2208      	movs	r2, #8
 80048b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d003      	beq.n	80048ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f87a 	bl	80049bc <HAL_TIM_IC_CaptureCallback>
 80048c8:	e005      	b.n	80048d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f86c 	bl	80049a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 f87d 	bl	80049d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d10e      	bne.n	8004908 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	f003 0301 	and.w	r3, r3, #1
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d107      	bne.n	8004908 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f06f 0201 	mvn.w	r2, #1
 8004900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f846 	bl	8004994 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004912:	2b80      	cmp	r3, #128	; 0x80
 8004914:	d10e      	bne.n	8004934 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004920:	2b80      	cmp	r3, #128	; 0x80
 8004922:	d107      	bne.n	8004934 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800492c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 f988 	bl	8004c44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800493e:	2b40      	cmp	r3, #64	; 0x40
 8004940:	d10e      	bne.n	8004960 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800494c:	2b40      	cmp	r3, #64	; 0x40
 800494e:	d107      	bne.n	8004960 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f842 	bl	80049e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	f003 0320 	and.w	r3, r3, #32
 800496a:	2b20      	cmp	r3, #32
 800496c:	d10e      	bne.n	800498c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	f003 0320 	and.w	r3, r3, #32
 8004978:	2b20      	cmp	r3, #32
 800497a:	d107      	bne.n	800498c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f06f 0220 	mvn.w	r2, #32
 8004984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f952 	bl	8004c30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800498c:	bf00      	nop
 800498e:	3708      	adds	r7, #8
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049c4:	bf00      	nop
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049d8:	bf00      	nop
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049ec:	bf00      	nop
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a40      	ldr	r2, [pc, #256]	; (8004b0c <TIM_Base_SetConfig+0x114>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d013      	beq.n	8004a38 <TIM_Base_SetConfig+0x40>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a16:	d00f      	beq.n	8004a38 <TIM_Base_SetConfig+0x40>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a3d      	ldr	r2, [pc, #244]	; (8004b10 <TIM_Base_SetConfig+0x118>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d00b      	beq.n	8004a38 <TIM_Base_SetConfig+0x40>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a3c      	ldr	r2, [pc, #240]	; (8004b14 <TIM_Base_SetConfig+0x11c>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d007      	beq.n	8004a38 <TIM_Base_SetConfig+0x40>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a3b      	ldr	r2, [pc, #236]	; (8004b18 <TIM_Base_SetConfig+0x120>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d003      	beq.n	8004a38 <TIM_Base_SetConfig+0x40>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a3a      	ldr	r2, [pc, #232]	; (8004b1c <TIM_Base_SetConfig+0x124>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d108      	bne.n	8004a4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a2f      	ldr	r2, [pc, #188]	; (8004b0c <TIM_Base_SetConfig+0x114>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d02b      	beq.n	8004aaa <TIM_Base_SetConfig+0xb2>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a58:	d027      	beq.n	8004aaa <TIM_Base_SetConfig+0xb2>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a2c      	ldr	r2, [pc, #176]	; (8004b10 <TIM_Base_SetConfig+0x118>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d023      	beq.n	8004aaa <TIM_Base_SetConfig+0xb2>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a2b      	ldr	r2, [pc, #172]	; (8004b14 <TIM_Base_SetConfig+0x11c>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d01f      	beq.n	8004aaa <TIM_Base_SetConfig+0xb2>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a2a      	ldr	r2, [pc, #168]	; (8004b18 <TIM_Base_SetConfig+0x120>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d01b      	beq.n	8004aaa <TIM_Base_SetConfig+0xb2>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a29      	ldr	r2, [pc, #164]	; (8004b1c <TIM_Base_SetConfig+0x124>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d017      	beq.n	8004aaa <TIM_Base_SetConfig+0xb2>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a28      	ldr	r2, [pc, #160]	; (8004b20 <TIM_Base_SetConfig+0x128>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d013      	beq.n	8004aaa <TIM_Base_SetConfig+0xb2>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a27      	ldr	r2, [pc, #156]	; (8004b24 <TIM_Base_SetConfig+0x12c>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d00f      	beq.n	8004aaa <TIM_Base_SetConfig+0xb2>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a26      	ldr	r2, [pc, #152]	; (8004b28 <TIM_Base_SetConfig+0x130>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d00b      	beq.n	8004aaa <TIM_Base_SetConfig+0xb2>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a25      	ldr	r2, [pc, #148]	; (8004b2c <TIM_Base_SetConfig+0x134>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d007      	beq.n	8004aaa <TIM_Base_SetConfig+0xb2>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a24      	ldr	r2, [pc, #144]	; (8004b30 <TIM_Base_SetConfig+0x138>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d003      	beq.n	8004aaa <TIM_Base_SetConfig+0xb2>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a23      	ldr	r2, [pc, #140]	; (8004b34 <TIM_Base_SetConfig+0x13c>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d108      	bne.n	8004abc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ab0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	689a      	ldr	r2, [r3, #8]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a0a      	ldr	r2, [pc, #40]	; (8004b0c <TIM_Base_SetConfig+0x114>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d003      	beq.n	8004af0 <TIM_Base_SetConfig+0xf8>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a0c      	ldr	r2, [pc, #48]	; (8004b1c <TIM_Base_SetConfig+0x124>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d103      	bne.n	8004af8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	691a      	ldr	r2, [r3, #16]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	615a      	str	r2, [r3, #20]
}
 8004afe:	bf00      	nop
 8004b00:	3714      	adds	r7, #20
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	40010000 	.word	0x40010000
 8004b10:	40000400 	.word	0x40000400
 8004b14:	40000800 	.word	0x40000800
 8004b18:	40000c00 	.word	0x40000c00
 8004b1c:	40010400 	.word	0x40010400
 8004b20:	40014000 	.word	0x40014000
 8004b24:	40014400 	.word	0x40014400
 8004b28:	40014800 	.word	0x40014800
 8004b2c:	40001800 	.word	0x40001800
 8004b30:	40001c00 	.word	0x40001c00
 8004b34:	40002000 	.word	0x40002000

08004b38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d101      	bne.n	8004b50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	e05a      	b.n	8004c06 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a21      	ldr	r2, [pc, #132]	; (8004c14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d022      	beq.n	8004bda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b9c:	d01d      	beq.n	8004bda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a1d      	ldr	r2, [pc, #116]	; (8004c18 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d018      	beq.n	8004bda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a1b      	ldr	r2, [pc, #108]	; (8004c1c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d013      	beq.n	8004bda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a1a      	ldr	r2, [pc, #104]	; (8004c20 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d00e      	beq.n	8004bda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a18      	ldr	r2, [pc, #96]	; (8004c24 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d009      	beq.n	8004bda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a17      	ldr	r2, [pc, #92]	; (8004c28 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d004      	beq.n	8004bda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a15      	ldr	r2, [pc, #84]	; (8004c2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d10c      	bne.n	8004bf4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004be0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	68ba      	ldr	r2, [r7, #8]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68ba      	ldr	r2, [r7, #8]
 8004bf2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3714      	adds	r7, #20
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	40010000 	.word	0x40010000
 8004c18:	40000400 	.word	0x40000400
 8004c1c:	40000800 	.word	0x40000800
 8004c20:	40000c00 	.word	0x40000c00
 8004c24:	40010400 	.word	0x40010400
 8004c28:	40014000 	.word	0x40014000
 8004c2c:	40001800 	.word	0x40001800

08004c30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c38:	bf00      	nop
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c58:	b084      	sub	sp, #16
 8004c5a:	b580      	push	{r7, lr}
 8004c5c:	b084      	sub	sp, #16
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
 8004c62:	f107 001c 	add.w	r0, r7, #28
 8004c66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d122      	bne.n	8004cb6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c74:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004c84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004c98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d105      	bne.n	8004caa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f9c0 	bl	8005030 <USB_CoreReset>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	73fb      	strb	r3, [r7, #15]
 8004cb4:	e01a      	b.n	8004cec <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 f9b4 	bl	8005030 <USB_CoreReset>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004ccc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d106      	bne.n	8004ce0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	639a      	str	r2, [r3, #56]	; 0x38
 8004cde:	e005      	b.n	8004cec <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d10b      	bne.n	8004d0a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f043 0206 	orr.w	r2, r3, #6
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f043 0220 	orr.w	r2, r3, #32
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3710      	adds	r7, #16
 8004d10:	46bd      	mov	sp, r7
 8004d12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d16:	b004      	add	sp, #16
 8004d18:	4770      	bx	lr

08004d1a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b083      	sub	sp, #12
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f043 0201 	orr.w	r2, r3, #1
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	f023 0201 	bic.w	r2, r3, #1
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	370c      	adds	r7, #12
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr

08004d5e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b084      	sub	sp, #16
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
 8004d66:	460b      	mov	r3, r1
 8004d68:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004d7a:	78fb      	ldrb	r3, [r7, #3]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d115      	bne.n	8004dac <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004d8c:	2001      	movs	r0, #1
 8004d8e:	f7fc f8e9 	bl	8000f64 <HAL_Delay>
      ms++;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	3301      	adds	r3, #1
 8004d96:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 f93a 	bl	8005012 <USB_GetMode>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d01e      	beq.n	8004de2 <USB_SetCurrentMode+0x84>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2b31      	cmp	r3, #49	; 0x31
 8004da8:	d9f0      	bls.n	8004d8c <USB_SetCurrentMode+0x2e>
 8004daa:	e01a      	b.n	8004de2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004dac:	78fb      	ldrb	r3, [r7, #3]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d115      	bne.n	8004dde <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004dbe:	2001      	movs	r0, #1
 8004dc0:	f7fc f8d0 	bl	8000f64 <HAL_Delay>
      ms++;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 f921 	bl	8005012 <USB_GetMode>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d005      	beq.n	8004de2 <USB_SetCurrentMode+0x84>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2b31      	cmp	r3, #49	; 0x31
 8004dda:	d9f0      	bls.n	8004dbe <USB_SetCurrentMode+0x60>
 8004ddc:	e001      	b.n	8004de2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e005      	b.n	8004dee <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2b32      	cmp	r3, #50	; 0x32
 8004de6:	d101      	bne.n	8004dec <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e000      	b.n	8004dee <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3710      	adds	r7, #16
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
	...

08004df8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e02:	2300      	movs	r3, #0
 8004e04:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	3301      	adds	r3, #1
 8004e0a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	4a13      	ldr	r2, [pc, #76]	; (8004e5c <USB_FlushTxFifo+0x64>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d901      	bls.n	8004e18 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e01b      	b.n	8004e50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	daf2      	bge.n	8004e06 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004e20:	2300      	movs	r3, #0
 8004e22:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	019b      	lsls	r3, r3, #6
 8004e28:	f043 0220 	orr.w	r2, r3, #32
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	3301      	adds	r3, #1
 8004e34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	4a08      	ldr	r2, [pc, #32]	; (8004e5c <USB_FlushTxFifo+0x64>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d901      	bls.n	8004e42 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e006      	b.n	8004e50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	f003 0320 	and.w	r3, r3, #32
 8004e4a:	2b20      	cmp	r3, #32
 8004e4c:	d0f0      	beq.n	8004e30 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3714      	adds	r7, #20
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr
 8004e5c:	00030d40 	.word	0x00030d40

08004e60 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	3301      	adds	r3, #1
 8004e70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	4a11      	ldr	r2, [pc, #68]	; (8004ebc <USB_FlushRxFifo+0x5c>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d901      	bls.n	8004e7e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e018      	b.n	8004eb0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	daf2      	bge.n	8004e6c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004e86:	2300      	movs	r3, #0
 8004e88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2210      	movs	r2, #16
 8004e8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	3301      	adds	r3, #1
 8004e94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	4a08      	ldr	r2, [pc, #32]	; (8004ebc <USB_FlushRxFifo+0x5c>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d901      	bls.n	8004ea2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e006      	b.n	8004eb0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	f003 0310 	and.w	r3, r3, #16
 8004eaa:	2b10      	cmp	r3, #16
 8004eac:	d0f0      	beq.n	8004e90 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3714      	adds	r7, #20
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr
 8004ebc:	00030d40 	.word	0x00030d40

08004ec0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b089      	sub	sp, #36	; 0x24
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	4611      	mov	r1, r2
 8004ecc:	461a      	mov	r2, r3
 8004ece:	460b      	mov	r3, r1
 8004ed0:	71fb      	strb	r3, [r7, #7]
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004ede:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d123      	bne.n	8004f2e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004ee6:	88bb      	ldrh	r3, [r7, #4]
 8004ee8:	3303      	adds	r3, #3
 8004eea:	089b      	lsrs	r3, r3, #2
 8004eec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004eee:	2300      	movs	r3, #0
 8004ef0:	61bb      	str	r3, [r7, #24]
 8004ef2:	e018      	b.n	8004f26 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004ef4:	79fb      	ldrb	r3, [r7, #7]
 8004ef6:	031a      	lsls	r2, r3, #12
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	4413      	add	r3, r2
 8004efc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f00:	461a      	mov	r2, r3
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	3301      	adds	r3, #1
 8004f12:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	3301      	adds	r3, #1
 8004f18:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	3301      	adds	r3, #1
 8004f24:	61bb      	str	r3, [r7, #24]
 8004f26:	69ba      	ldr	r2, [r7, #24]
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d3e2      	bcc.n	8004ef4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3724      	adds	r7, #36	; 0x24
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b08b      	sub	sp, #44	; 0x2c
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	4613      	mov	r3, r2
 8004f48:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004f52:	88fb      	ldrh	r3, [r7, #6]
 8004f54:	089b      	lsrs	r3, r3, #2
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004f5a:	88fb      	ldrh	r3, [r7, #6]
 8004f5c:	f003 0303 	and.w	r3, r3, #3
 8004f60:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004f62:	2300      	movs	r3, #0
 8004f64:	623b      	str	r3, [r7, #32]
 8004f66:	e014      	b.n	8004f92 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f72:	601a      	str	r2, [r3, #0]
    pDest++;
 8004f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f76:	3301      	adds	r3, #1
 8004f78:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	3301      	adds	r3, #1
 8004f84:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f88:	3301      	adds	r3, #1
 8004f8a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004f8c:	6a3b      	ldr	r3, [r7, #32]
 8004f8e:	3301      	adds	r3, #1
 8004f90:	623b      	str	r3, [r7, #32]
 8004f92:	6a3a      	ldr	r2, [r7, #32]
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d3e6      	bcc.n	8004f68 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004f9a:	8bfb      	ldrh	r3, [r7, #30]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d01e      	beq.n	8004fde <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004faa:	461a      	mov	r2, r3
 8004fac:	f107 0310 	add.w	r3, r7, #16
 8004fb0:	6812      	ldr	r2, [r2, #0]
 8004fb2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	6a3b      	ldr	r3, [r7, #32]
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	00db      	lsls	r3, r3, #3
 8004fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8004fc0:	b2da      	uxtb	r2, r3
 8004fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc4:	701a      	strb	r2, [r3, #0]
      i++;
 8004fc6:	6a3b      	ldr	r3, [r7, #32]
 8004fc8:	3301      	adds	r3, #1
 8004fca:	623b      	str	r3, [r7, #32]
      pDest++;
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fce:	3301      	adds	r3, #1
 8004fd0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004fd2:	8bfb      	ldrh	r3, [r7, #30]
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004fd8:	8bfb      	ldrh	r3, [r7, #30]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1ea      	bne.n	8004fb4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	372c      	adds	r7, #44	; 0x2c
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b085      	sub	sp, #20
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	695b      	ldr	r3, [r3, #20]
 8004ff8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	4013      	ands	r3, r2
 8005002:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005004:	68fb      	ldr	r3, [r7, #12]
}
 8005006:	4618      	mov	r0, r3
 8005008:	3714      	adds	r7, #20
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr

08005012 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005012:	b480      	push	{r7}
 8005014:	b083      	sub	sp, #12
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	f003 0301 	and.w	r3, r3, #1
}
 8005022:	4618      	mov	r0, r3
 8005024:	370c      	adds	r7, #12
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
	...

08005030 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005038:	2300      	movs	r3, #0
 800503a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	3301      	adds	r3, #1
 8005040:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	4a13      	ldr	r2, [pc, #76]	; (8005094 <USB_CoreReset+0x64>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d901      	bls.n	800504e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e01b      	b.n	8005086 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	2b00      	cmp	r3, #0
 8005054:	daf2      	bge.n	800503c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005056:	2300      	movs	r3, #0
 8005058:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	f043 0201 	orr.w	r2, r3, #1
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	3301      	adds	r3, #1
 800506a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	4a09      	ldr	r2, [pc, #36]	; (8005094 <USB_CoreReset+0x64>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d901      	bls.n	8005078 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e006      	b.n	8005086 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	f003 0301 	and.w	r3, r3, #1
 8005080:	2b01      	cmp	r3, #1
 8005082:	d0f0      	beq.n	8005066 <USB_CoreReset+0x36>

  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3714      	adds	r7, #20
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	00030d40 	.word	0x00030d40

08005098 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005098:	b084      	sub	sp, #16
 800509a:	b580      	push	{r7, lr}
 800509c:	b086      	sub	sp, #24
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
 80050a2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80050a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80050aa:	2300      	movs	r3, #0
 80050ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80050b8:	461a      	mov	r2, r3
 80050ba:	2300      	movs	r3, #0
 80050bc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ce:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050da:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d018      	beq.n	8005120 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80050ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d10a      	bne.n	800510a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005102:	f043 0304 	orr.w	r3, r3, #4
 8005106:	6013      	str	r3, [r2, #0]
 8005108:	e014      	b.n	8005134 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005118:	f023 0304 	bic.w	r3, r3, #4
 800511c:	6013      	str	r3, [r2, #0]
 800511e:	e009      	b.n	8005134 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800512e:	f023 0304 	bic.w	r3, r3, #4
 8005132:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005134:	2110      	movs	r1, #16
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f7ff fe5e 	bl	8004df8 <USB_FlushTxFifo>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d001      	beq.n	8005146 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f7ff fe8a 	bl	8004e60 <USB_FlushRxFifo>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d001      	beq.n	8005156 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005156:	2300      	movs	r3, #0
 8005158:	613b      	str	r3, [r7, #16]
 800515a:	e015      	b.n	8005188 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	015a      	lsls	r2, r3, #5
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	4413      	add	r3, r2
 8005164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005168:	461a      	mov	r2, r3
 800516a:	f04f 33ff 	mov.w	r3, #4294967295
 800516e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	015a      	lsls	r2, r3, #5
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	4413      	add	r3, r2
 8005178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800517c:	461a      	mov	r2, r3
 800517e:	2300      	movs	r3, #0
 8005180:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	3301      	adds	r3, #1
 8005186:	613b      	str	r3, [r7, #16]
 8005188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518a:	693a      	ldr	r2, [r7, #16]
 800518c:	429a      	cmp	r2, r3
 800518e:	d3e5      	bcc.n	800515c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f04f 32ff 	mov.w	r2, #4294967295
 800519c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00b      	beq.n	80051c2 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051b0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a13      	ldr	r2, [pc, #76]	; (8005204 <USB_HostInit+0x16c>)
 80051b6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a13      	ldr	r2, [pc, #76]	; (8005208 <USB_HostInit+0x170>)
 80051bc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80051c0:	e009      	b.n	80051d6 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2280      	movs	r2, #128	; 0x80
 80051c6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a10      	ldr	r2, [pc, #64]	; (800520c <USB_HostInit+0x174>)
 80051cc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a0f      	ldr	r2, [pc, #60]	; (8005210 <USB_HostInit+0x178>)
 80051d2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80051d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d105      	bne.n	80051e8 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	f043 0210 	orr.w	r2, r3, #16
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	699a      	ldr	r2, [r3, #24]
 80051ec:	4b09      	ldr	r3, [pc, #36]	; (8005214 <USB_HostInit+0x17c>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80051f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3718      	adds	r7, #24
 80051fa:	46bd      	mov	sp, r7
 80051fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005200:	b004      	add	sp, #16
 8005202:	4770      	bx	lr
 8005204:	01000200 	.word	0x01000200
 8005208:	00e00300 	.word	0x00e00300
 800520c:	00600080 	.word	0x00600080
 8005210:	004000e0 	.word	0x004000e0
 8005214:	a3200008 	.word	0xa3200008

08005218 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	460b      	mov	r3, r1
 8005222:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005236:	f023 0303 	bic.w	r3, r3, #3
 800523a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	78fb      	ldrb	r3, [r7, #3]
 8005246:	f003 0303 	and.w	r3, r3, #3
 800524a:	68f9      	ldr	r1, [r7, #12]
 800524c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005250:	4313      	orrs	r3, r2
 8005252:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005254:	78fb      	ldrb	r3, [r7, #3]
 8005256:	2b01      	cmp	r3, #1
 8005258:	d107      	bne.n	800526a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005260:	461a      	mov	r2, r3
 8005262:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005266:	6053      	str	r3, [r2, #4]
 8005268:	e009      	b.n	800527e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800526a:	78fb      	ldrb	r3, [r7, #3]
 800526c:	2b02      	cmp	r3, #2
 800526e:	d106      	bne.n	800527e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005276:	461a      	mov	r2, r3
 8005278:	f241 7370 	movw	r3, #6000	; 0x1770
 800527c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3714      	adds	r7, #20
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005298:	2300      	movs	r3, #0
 800529a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80052ac:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80052b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052ba:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80052bc:	2064      	movs	r0, #100	; 0x64
 80052be:	f7fb fe51 	bl	8000f64 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80052ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052ce:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80052d0:	200a      	movs	r0, #10
 80052d2:	f7fb fe47 	bl	8000f64 <HAL_Delay>

  return HAL_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3710      	adds	r7, #16
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	460b      	mov	r3, r1
 80052ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80052f0:	2300      	movs	r3, #0
 80052f2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005304:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d109      	bne.n	8005324 <USB_DriveVbus+0x44>
 8005310:	78fb      	ldrb	r3, [r7, #3]
 8005312:	2b01      	cmp	r3, #1
 8005314:	d106      	bne.n	8005324 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800531e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005322:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800532a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800532e:	d109      	bne.n	8005344 <USB_DriveVbus+0x64>
 8005330:	78fb      	ldrb	r3, [r7, #3]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d106      	bne.n	8005344 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800533e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005342:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3714      	adds	r7, #20
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr

08005352 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005352:	b480      	push	{r7}
 8005354:	b085      	sub	sp, #20
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800535e:	2300      	movs	r3, #0
 8005360:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	0c5b      	lsrs	r3, r3, #17
 8005370:	f003 0303 	and.w	r3, r3, #3
}
 8005374:	4618      	mov	r0, r3
 8005376:	3714      	adds	r7, #20
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005380:	b480      	push	{r7}
 8005382:	b085      	sub	sp, #20
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	b29b      	uxth	r3, r3
}
 8005396:	4618      	mov	r0, r3
 8005398:	3714      	adds	r7, #20
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
	...

080053a4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b088      	sub	sp, #32
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	4608      	mov	r0, r1
 80053ae:	4611      	mov	r1, r2
 80053b0:	461a      	mov	r2, r3
 80053b2:	4603      	mov	r3, r0
 80053b4:	70fb      	strb	r3, [r7, #3]
 80053b6:	460b      	mov	r3, r1
 80053b8:	70bb      	strb	r3, [r7, #2]
 80053ba:	4613      	mov	r3, r2
 80053bc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80053be:	2300      	movs	r3, #0
 80053c0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80053c6:	78fb      	ldrb	r3, [r7, #3]
 80053c8:	015a      	lsls	r2, r3, #5
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	4413      	add	r3, r2
 80053ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053d2:	461a      	mov	r2, r3
 80053d4:	f04f 33ff 	mov.w	r3, #4294967295
 80053d8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80053da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80053de:	2b03      	cmp	r3, #3
 80053e0:	d87e      	bhi.n	80054e0 <USB_HC_Init+0x13c>
 80053e2:	a201      	add	r2, pc, #4	; (adr r2, 80053e8 <USB_HC_Init+0x44>)
 80053e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e8:	080053f9 	.word	0x080053f9
 80053ec:	080054a3 	.word	0x080054a3
 80053f0:	080053f9 	.word	0x080053f9
 80053f4:	08005465 	.word	0x08005465
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80053f8:	78fb      	ldrb	r3, [r7, #3]
 80053fa:	015a      	lsls	r2, r3, #5
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	4413      	add	r3, r2
 8005400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005404:	461a      	mov	r2, r3
 8005406:	f240 439d 	movw	r3, #1181	; 0x49d
 800540a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800540c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005410:	2b00      	cmp	r3, #0
 8005412:	da10      	bge.n	8005436 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005414:	78fb      	ldrb	r3, [r7, #3]
 8005416:	015a      	lsls	r2, r3, #5
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	4413      	add	r3, r2
 800541c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	78fa      	ldrb	r2, [r7, #3]
 8005424:	0151      	lsls	r1, r2, #5
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	440a      	add	r2, r1
 800542a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800542e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005432:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005434:	e057      	b.n	80054e6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800543a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800543e:	2b00      	cmp	r3, #0
 8005440:	d051      	beq.n	80054e6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005442:	78fb      	ldrb	r3, [r7, #3]
 8005444:	015a      	lsls	r2, r3, #5
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	4413      	add	r3, r2
 800544a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	78fa      	ldrb	r2, [r7, #3]
 8005452:	0151      	lsls	r1, r2, #5
 8005454:	693a      	ldr	r2, [r7, #16]
 8005456:	440a      	add	r2, r1
 8005458:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800545c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005460:	60d3      	str	r3, [r2, #12]
      break;
 8005462:	e040      	b.n	80054e6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005464:	78fb      	ldrb	r3, [r7, #3]
 8005466:	015a      	lsls	r2, r3, #5
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	4413      	add	r3, r2
 800546c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005470:	461a      	mov	r2, r3
 8005472:	f240 639d 	movw	r3, #1693	; 0x69d
 8005476:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005478:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800547c:	2b00      	cmp	r3, #0
 800547e:	da34      	bge.n	80054ea <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005480:	78fb      	ldrb	r3, [r7, #3]
 8005482:	015a      	lsls	r2, r3, #5
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	4413      	add	r3, r2
 8005488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	78fa      	ldrb	r2, [r7, #3]
 8005490:	0151      	lsls	r1, r2, #5
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	440a      	add	r2, r1
 8005496:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800549a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800549e:	60d3      	str	r3, [r2, #12]
      }

      break;
 80054a0:	e023      	b.n	80054ea <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80054a2:	78fb      	ldrb	r3, [r7, #3]
 80054a4:	015a      	lsls	r2, r3, #5
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	4413      	add	r3, r2
 80054aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ae:	461a      	mov	r2, r3
 80054b0:	f240 2325 	movw	r3, #549	; 0x225
 80054b4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80054b6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	da17      	bge.n	80054ee <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80054be:	78fb      	ldrb	r3, [r7, #3]
 80054c0:	015a      	lsls	r2, r3, #5
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	4413      	add	r3, r2
 80054c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	78fa      	ldrb	r2, [r7, #3]
 80054ce:	0151      	lsls	r1, r2, #5
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	440a      	add	r2, r1
 80054d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054d8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80054dc:	60d3      	str	r3, [r2, #12]
      }
      break;
 80054de:	e006      	b.n	80054ee <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	77fb      	strb	r3, [r7, #31]
      break;
 80054e4:	e004      	b.n	80054f0 <USB_HC_Init+0x14c>
      break;
 80054e6:	bf00      	nop
 80054e8:	e002      	b.n	80054f0 <USB_HC_Init+0x14c>
      break;
 80054ea:	bf00      	nop
 80054ec:	e000      	b.n	80054f0 <USB_HC_Init+0x14c>
      break;
 80054ee:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80054f0:	78fb      	ldrb	r3, [r7, #3]
 80054f2:	015a      	lsls	r2, r3, #5
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	4413      	add	r3, r2
 80054f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	78fa      	ldrb	r2, [r7, #3]
 8005500:	0151      	lsls	r1, r2, #5
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	440a      	add	r2, r1
 8005506:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800550a:	f043 0302 	orr.w	r3, r3, #2
 800550e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005516:	699a      	ldr	r2, [r3, #24]
 8005518:	78fb      	ldrb	r3, [r7, #3]
 800551a:	f003 030f 	and.w	r3, r3, #15
 800551e:	2101      	movs	r1, #1
 8005520:	fa01 f303 	lsl.w	r3, r1, r3
 8005524:	6939      	ldr	r1, [r7, #16]
 8005526:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800552a:	4313      	orrs	r3, r2
 800552c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800553a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800553e:	2b00      	cmp	r3, #0
 8005540:	da03      	bge.n	800554a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005542:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005546:	61bb      	str	r3, [r7, #24]
 8005548:	e001      	b.n	800554e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800554a:	2300      	movs	r3, #0
 800554c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f7ff feff 	bl	8005352 <USB_GetHostSpeed>
 8005554:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005556:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800555a:	2b02      	cmp	r3, #2
 800555c:	d106      	bne.n	800556c <USB_HC_Init+0x1c8>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2b02      	cmp	r3, #2
 8005562:	d003      	beq.n	800556c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005564:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005568:	617b      	str	r3, [r7, #20]
 800556a:	e001      	b.n	8005570 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800556c:	2300      	movs	r3, #0
 800556e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005570:	787b      	ldrb	r3, [r7, #1]
 8005572:	059b      	lsls	r3, r3, #22
 8005574:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005578:	78bb      	ldrb	r3, [r7, #2]
 800557a:	02db      	lsls	r3, r3, #11
 800557c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005580:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005582:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005586:	049b      	lsls	r3, r3, #18
 8005588:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800558c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800558e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005590:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005594:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800559a:	78fb      	ldrb	r3, [r7, #3]
 800559c:	0159      	lsls	r1, r3, #5
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	440b      	add	r3, r1
 80055a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055a6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80055ac:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80055ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80055b2:	2b03      	cmp	r3, #3
 80055b4:	d003      	beq.n	80055be <USB_HC_Init+0x21a>
 80055b6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d10f      	bne.n	80055de <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80055be:	78fb      	ldrb	r3, [r7, #3]
 80055c0:	015a      	lsls	r2, r3, #5
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	4413      	add	r3, r2
 80055c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	78fa      	ldrb	r2, [r7, #3]
 80055ce:	0151      	lsls	r1, r2, #5
 80055d0:	693a      	ldr	r2, [r7, #16]
 80055d2:	440a      	add	r2, r1
 80055d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80055dc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80055de:	7ffb      	ldrb	r3, [r7, #31]
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3720      	adds	r7, #32
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b08c      	sub	sp, #48	; 0x30
 80055ec:	af02      	add	r7, sp, #8
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	4613      	mov	r3, r2
 80055f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	785b      	ldrb	r3, [r3, #1]
 80055fe:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005600:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005604:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800560a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800560e:	2b00      	cmp	r3, #0
 8005610:	d02d      	beq.n	800566e <USB_HC_StartXfer+0x86>
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	791b      	ldrb	r3, [r3, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d129      	bne.n	800566e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800561a:	79fb      	ldrb	r3, [r7, #7]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d117      	bne.n	8005650 <USB_HC_StartXfer+0x68>
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	79db      	ldrb	r3, [r3, #7]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d003      	beq.n	8005630 <USB_HC_StartXfer+0x48>
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	79db      	ldrb	r3, [r3, #7]
 800562c:	2b02      	cmp	r3, #2
 800562e:	d10f      	bne.n	8005650 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	015a      	lsls	r2, r3, #5
 8005634:	6a3b      	ldr	r3, [r7, #32]
 8005636:	4413      	add	r3, r2
 8005638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	69fa      	ldr	r2, [r7, #28]
 8005640:	0151      	lsls	r1, r2, #5
 8005642:	6a3a      	ldr	r2, [r7, #32]
 8005644:	440a      	add	r2, r1
 8005646:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800564a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800564e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005650:	79fb      	ldrb	r3, [r7, #7]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10b      	bne.n	800566e <USB_HC_StartXfer+0x86>
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	795b      	ldrb	r3, [r3, #5]
 800565a:	2b01      	cmp	r3, #1
 800565c:	d107      	bne.n	800566e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	785b      	ldrb	r3, [r3, #1]
 8005662:	4619      	mov	r1, r3
 8005664:	68f8      	ldr	r0, [r7, #12]
 8005666:	f000 fa0f 	bl	8005a88 <USB_DoPing>
      return HAL_OK;
 800566a:	2300      	movs	r3, #0
 800566c:	e0f8      	b.n	8005860 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d018      	beq.n	80056a8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	68ba      	ldr	r2, [r7, #8]
 800567c:	8912      	ldrh	r2, [r2, #8]
 800567e:	4413      	add	r3, r2
 8005680:	3b01      	subs	r3, #1
 8005682:	68ba      	ldr	r2, [r7, #8]
 8005684:	8912      	ldrh	r2, [r2, #8]
 8005686:	fbb3 f3f2 	udiv	r3, r3, r2
 800568a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800568c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800568e:	8b7b      	ldrh	r3, [r7, #26]
 8005690:	429a      	cmp	r2, r3
 8005692:	d90b      	bls.n	80056ac <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005694:	8b7b      	ldrh	r3, [r7, #26]
 8005696:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005698:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800569a:	68ba      	ldr	r2, [r7, #8]
 800569c:	8912      	ldrh	r2, [r2, #8]
 800569e:	fb03 f202 	mul.w	r2, r3, r2
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	611a      	str	r2, [r3, #16]
 80056a6:	e001      	b.n	80056ac <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80056a8:	2301      	movs	r3, #1
 80056aa:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	78db      	ldrb	r3, [r3, #3]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d007      	beq.n	80056c4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80056b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80056b6:	68ba      	ldr	r2, [r7, #8]
 80056b8:	8912      	ldrh	r2, [r2, #8]
 80056ba:	fb03 f202 	mul.w	r2, r3, r2
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	611a      	str	r2, [r3, #16]
 80056c2:	e003      	b.n	80056cc <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	695a      	ldr	r2, [r3, #20]
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80056d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80056d6:	04d9      	lsls	r1, r3, #19
 80056d8:	4b63      	ldr	r3, [pc, #396]	; (8005868 <USB_HC_StartXfer+0x280>)
 80056da:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80056dc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	7a9b      	ldrb	r3, [r3, #10]
 80056e2:	075b      	lsls	r3, r3, #29
 80056e4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80056e8:	69f9      	ldr	r1, [r7, #28]
 80056ea:	0148      	lsls	r0, r1, #5
 80056ec:	6a39      	ldr	r1, [r7, #32]
 80056ee:	4401      	add	r1, r0
 80056f0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80056f4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80056f6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80056f8:	79fb      	ldrb	r3, [r7, #7]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d009      	beq.n	8005712 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	68d9      	ldr	r1, [r3, #12]
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	015a      	lsls	r2, r3, #5
 8005706:	6a3b      	ldr	r3, [r7, #32]
 8005708:	4413      	add	r3, r2
 800570a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800570e:	460a      	mov	r2, r1
 8005710:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005712:	6a3b      	ldr	r3, [r7, #32]
 8005714:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	f003 0301 	and.w	r3, r3, #1
 800571e:	2b00      	cmp	r3, #0
 8005720:	bf0c      	ite	eq
 8005722:	2301      	moveq	r3, #1
 8005724:	2300      	movne	r3, #0
 8005726:	b2db      	uxtb	r3, r3
 8005728:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	015a      	lsls	r2, r3, #5
 800572e:	6a3b      	ldr	r3, [r7, #32]
 8005730:	4413      	add	r3, r2
 8005732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	69fa      	ldr	r2, [r7, #28]
 800573a:	0151      	lsls	r1, r2, #5
 800573c:	6a3a      	ldr	r2, [r7, #32]
 800573e:	440a      	add	r2, r1
 8005740:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005744:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005748:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	015a      	lsls	r2, r3, #5
 800574e:	6a3b      	ldr	r3, [r7, #32]
 8005750:	4413      	add	r3, r2
 8005752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	7e7b      	ldrb	r3, [r7, #25]
 800575a:	075b      	lsls	r3, r3, #29
 800575c:	69f9      	ldr	r1, [r7, #28]
 800575e:	0148      	lsls	r0, r1, #5
 8005760:	6a39      	ldr	r1, [r7, #32]
 8005762:	4401      	add	r1, r0
 8005764:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005768:	4313      	orrs	r3, r2
 800576a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	015a      	lsls	r2, r3, #5
 8005770:	6a3b      	ldr	r3, [r7, #32]
 8005772:	4413      	add	r3, r2
 8005774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005782:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	78db      	ldrb	r3, [r3, #3]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d004      	beq.n	8005796 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005792:	613b      	str	r3, [r7, #16]
 8005794:	e003      	b.n	800579e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800579c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057a4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	015a      	lsls	r2, r3, #5
 80057aa:	6a3b      	ldr	r3, [r7, #32]
 80057ac:	4413      	add	r3, r2
 80057ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057b2:	461a      	mov	r2, r3
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80057b8:	79fb      	ldrb	r3, [r7, #7]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d001      	beq.n	80057c2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80057be:	2300      	movs	r3, #0
 80057c0:	e04e      	b.n	8005860 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	78db      	ldrb	r3, [r3, #3]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d149      	bne.n	800585e <USB_HC_StartXfer+0x276>
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	695b      	ldr	r3, [r3, #20]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d045      	beq.n	800585e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	79db      	ldrb	r3, [r3, #7]
 80057d6:	2b03      	cmp	r3, #3
 80057d8:	d830      	bhi.n	800583c <USB_HC_StartXfer+0x254>
 80057da:	a201      	add	r2, pc, #4	; (adr r2, 80057e0 <USB_HC_StartXfer+0x1f8>)
 80057dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e0:	080057f1 	.word	0x080057f1
 80057e4:	08005815 	.word	0x08005815
 80057e8:	080057f1 	.word	0x080057f1
 80057ec:	08005815 	.word	0x08005815
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	695b      	ldr	r3, [r3, #20]
 80057f4:	3303      	adds	r3, #3
 80057f6:	089b      	lsrs	r3, r3, #2
 80057f8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80057fa:	8afa      	ldrh	r2, [r7, #22]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005800:	b29b      	uxth	r3, r3
 8005802:	429a      	cmp	r2, r3
 8005804:	d91c      	bls.n	8005840 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	f043 0220 	orr.w	r2, r3, #32
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	619a      	str	r2, [r3, #24]
        }
        break;
 8005812:	e015      	b.n	8005840 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	695b      	ldr	r3, [r3, #20]
 8005818:	3303      	adds	r3, #3
 800581a:	089b      	lsrs	r3, r3, #2
 800581c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800581e:	8afa      	ldrh	r2, [r7, #22]
 8005820:	6a3b      	ldr	r3, [r7, #32]
 8005822:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	b29b      	uxth	r3, r3
 800582a:	429a      	cmp	r2, r3
 800582c:	d90a      	bls.n	8005844 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	619a      	str	r2, [r3, #24]
        }
        break;
 800583a:	e003      	b.n	8005844 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800583c:	bf00      	nop
 800583e:	e002      	b.n	8005846 <USB_HC_StartXfer+0x25e>
        break;
 8005840:	bf00      	nop
 8005842:	e000      	b.n	8005846 <USB_HC_StartXfer+0x25e>
        break;
 8005844:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	68d9      	ldr	r1, [r3, #12]
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	785a      	ldrb	r2, [r3, #1]
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	b29b      	uxth	r3, r3
 8005854:	2000      	movs	r0, #0
 8005856:	9000      	str	r0, [sp, #0]
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f7ff fb31 	bl	8004ec0 <USB_WritePacket>
  }

  return HAL_OK;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3728      	adds	r7, #40	; 0x28
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	1ff80000 	.word	0x1ff80000

0800586c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800586c:	b480      	push	{r7}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800587e:	695b      	ldr	r3, [r3, #20]
 8005880:	b29b      	uxth	r3, r3
}
 8005882:	4618      	mov	r0, r3
 8005884:	3714      	adds	r7, #20
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr

0800588e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800588e:	b480      	push	{r7}
 8005890:	b089      	sub	sp, #36	; 0x24
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
 8005896:	460b      	mov	r3, r1
 8005898:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800589e:	78fb      	ldrb	r3, [r7, #3]
 80058a0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80058a2:	2300      	movs	r3, #0
 80058a4:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	015a      	lsls	r2, r3, #5
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	4413      	add	r3, r2
 80058ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	0c9b      	lsrs	r3, r3, #18
 80058b6:	f003 0303 	and.w	r3, r3, #3
 80058ba:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	015a      	lsls	r2, r3, #5
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	4413      	add	r3, r2
 80058c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	0fdb      	lsrs	r3, r3, #31
 80058cc:	f003 0301 	and.w	r3, r3, #1
 80058d0:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f003 0320 	and.w	r3, r3, #32
 80058da:	2b20      	cmp	r3, #32
 80058dc:	d104      	bne.n	80058e8 <USB_HC_Halt+0x5a>
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d101      	bne.n	80058e8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80058e4:	2300      	movs	r3, #0
 80058e6:	e0c8      	b.n	8005a7a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d002      	beq.n	80058f4 <USB_HC_Halt+0x66>
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d163      	bne.n	80059bc <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	015a      	lsls	r2, r3, #5
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	4413      	add	r3, r2
 80058fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	69ba      	ldr	r2, [r7, #24]
 8005904:	0151      	lsls	r1, r2, #5
 8005906:	69fa      	ldr	r2, [r7, #28]
 8005908:	440a      	add	r2, r1
 800590a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800590e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005912:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f003 0320 	and.w	r3, r3, #32
 800591c:	2b00      	cmp	r3, #0
 800591e:	f040 80ab 	bne.w	8005a78 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005926:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d133      	bne.n	8005996 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	015a      	lsls	r2, r3, #5
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	4413      	add	r3, r2
 8005936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	69ba      	ldr	r2, [r7, #24]
 800593e:	0151      	lsls	r1, r2, #5
 8005940:	69fa      	ldr	r2, [r7, #28]
 8005942:	440a      	add	r2, r1
 8005944:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005948:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800594c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	015a      	lsls	r2, r3, #5
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	4413      	add	r3, r2
 8005956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	69ba      	ldr	r2, [r7, #24]
 800595e:	0151      	lsls	r1, r2, #5
 8005960:	69fa      	ldr	r2, [r7, #28]
 8005962:	440a      	add	r2, r1
 8005964:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005968:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800596c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	3301      	adds	r3, #1
 8005972:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800597a:	d81d      	bhi.n	80059b8 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	015a      	lsls	r2, r3, #5
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	4413      	add	r3, r2
 8005984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800598e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005992:	d0ec      	beq.n	800596e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005994:	e070      	b.n	8005a78 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	015a      	lsls	r2, r3, #5
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	4413      	add	r3, r2
 800599e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	69ba      	ldr	r2, [r7, #24]
 80059a6:	0151      	lsls	r1, r2, #5
 80059a8:	69fa      	ldr	r2, [r7, #28]
 80059aa:	440a      	add	r2, r1
 80059ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059b4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80059b6:	e05f      	b.n	8005a78 <USB_HC_Halt+0x1ea>
            break;
 80059b8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80059ba:	e05d      	b.n	8005a78 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	015a      	lsls	r2, r3, #5
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	4413      	add	r3, r2
 80059c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	69ba      	ldr	r2, [r7, #24]
 80059cc:	0151      	lsls	r1, r2, #5
 80059ce:	69fa      	ldr	r2, [r7, #28]
 80059d0:	440a      	add	r2, r1
 80059d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059da:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d133      	bne.n	8005a54 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	015a      	lsls	r2, r3, #5
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	4413      	add	r3, r2
 80059f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	69ba      	ldr	r2, [r7, #24]
 80059fc:	0151      	lsls	r1, r2, #5
 80059fe:	69fa      	ldr	r2, [r7, #28]
 8005a00:	440a      	add	r2, r1
 8005a02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a0a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	015a      	lsls	r2, r3, #5
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	4413      	add	r3, r2
 8005a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	69ba      	ldr	r2, [r7, #24]
 8005a1c:	0151      	lsls	r1, r2, #5
 8005a1e:	69fa      	ldr	r2, [r7, #28]
 8005a20:	440a      	add	r2, r1
 8005a22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a2a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	3301      	adds	r3, #1
 8005a30:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a38:	d81d      	bhi.n	8005a76 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	015a      	lsls	r2, r3, #5
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	4413      	add	r3, r2
 8005a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a50:	d0ec      	beq.n	8005a2c <USB_HC_Halt+0x19e>
 8005a52:	e011      	b.n	8005a78 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	015a      	lsls	r2, r3, #5
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	69ba      	ldr	r2, [r7, #24]
 8005a64:	0151      	lsls	r1, r2, #5
 8005a66:	69fa      	ldr	r2, [r7, #28]
 8005a68:	440a      	add	r2, r1
 8005a6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a72:	6013      	str	r3, [r2, #0]
 8005a74:	e000      	b.n	8005a78 <USB_HC_Halt+0x1ea>
          break;
 8005a76:	bf00      	nop
    }
  }

  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3724      	adds	r7, #36	; 0x24
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
	...

08005a88 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b087      	sub	sp, #28
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	460b      	mov	r3, r1
 8005a92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005a98:	78fb      	ldrb	r3, [r7, #3]
 8005a9a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	04da      	lsls	r2, r3, #19
 8005aa4:	4b15      	ldr	r3, [pc, #84]	; (8005afc <USB_DoPing+0x74>)
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	693a      	ldr	r2, [r7, #16]
 8005aaa:	0151      	lsls	r1, r2, #5
 8005aac:	697a      	ldr	r2, [r7, #20]
 8005aae:	440a      	add	r2, r1
 8005ab0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ab4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ab8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	015a      	lsls	r2, r3, #5
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ad0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ad8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	015a      	lsls	r2, r3, #5
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	371c      	adds	r7, #28
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr
 8005afa:	bf00      	nop
 8005afc:	1ff80000 	.word	0x1ff80000

08005b00 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b088      	sub	sp, #32
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005b10:	2300      	movs	r3, #0
 8005b12:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f7ff f911 	bl	8004d3c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005b1a:	2110      	movs	r1, #16
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f7ff f96b 	bl	8004df8 <USB_FlushTxFifo>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d001      	beq.n	8005b2c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f7ff f997 	bl	8004e60 <USB_FlushRxFifo>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d001      	beq.n	8005b3c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	61bb      	str	r3, [r7, #24]
 8005b40:	e01f      	b.n	8005b82 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	015a      	lsls	r2, r3, #5
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	4413      	add	r3, r2
 8005b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b58:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b60:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b68:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	015a      	lsls	r2, r3, #5
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	4413      	add	r3, r2
 8005b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b76:	461a      	mov	r2, r3
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	3301      	adds	r3, #1
 8005b80:	61bb      	str	r3, [r7, #24]
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	2b0f      	cmp	r3, #15
 8005b86:	d9dc      	bls.n	8005b42 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005b88:	2300      	movs	r3, #0
 8005b8a:	61bb      	str	r3, [r7, #24]
 8005b8c:	e034      	b.n	8005bf8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	015a      	lsls	r2, r3, #5
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	4413      	add	r3, r2
 8005b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ba4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005bac:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005bb4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	015a      	lsls	r2, r3, #5
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	3301      	adds	r3, #1
 8005bcc:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bd4:	d80c      	bhi.n	8005bf0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	015a      	lsls	r2, r3, #5
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	4413      	add	r3, r2
 8005bde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005be8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bec:	d0ec      	beq.n	8005bc8 <USB_StopHost+0xc8>
 8005bee:	e000      	b.n	8005bf2 <USB_StopHost+0xf2>
        break;
 8005bf0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	61bb      	str	r3, [r7, #24]
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	2b0f      	cmp	r3, #15
 8005bfc:	d9c7      	bls.n	8005b8e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c04:	461a      	mov	r2, r3
 8005c06:	f04f 33ff 	mov.w	r3, #4294967295
 8005c0a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c12:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f7ff f880 	bl	8004d1a <USB_EnableGlobalInt>

  return ret;
 8005c1a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3720      	adds	r7, #32
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005c24:	b590      	push	{r4, r7, lr}
 8005c26:	b089      	sub	sp, #36	; 0x24
 8005c28:	af04      	add	r7, sp, #16
 8005c2a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	2202      	movs	r2, #2
 8005c30:	2102      	movs	r1, #2
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 fcb2 	bl	800659c <USBH_FindInterface>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005c3c:	7bfb      	ldrb	r3, [r7, #15]
 8005c3e:	2bff      	cmp	r3, #255	; 0xff
 8005c40:	d002      	beq.n	8005c48 <USBH_CDC_InterfaceInit+0x24>
 8005c42:	7bfb      	ldrb	r3, [r7, #15]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d901      	bls.n	8005c4c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005c48:	2302      	movs	r3, #2
 8005c4a:	e13d      	b.n	8005ec8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005c4c:	7bfb      	ldrb	r3, [r7, #15]
 8005c4e:	4619      	mov	r1, r3
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f000 fc87 	bl	8006564 <USBH_SelectInterface>
 8005c56:	4603      	mov	r3, r0
 8005c58:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005c5a:	7bbb      	ldrb	r3, [r7, #14]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d001      	beq.n	8005c64 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005c60:	2302      	movs	r3, #2
 8005c62:	e131      	b.n	8005ec8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005c6a:	2050      	movs	r0, #80	; 0x50
 8005c6c:	f005 fc90 	bl	800b590 <malloc>
 8005c70:	4603      	mov	r3, r0
 8005c72:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c7a:	69db      	ldr	r3, [r3, #28]
 8005c7c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d101      	bne.n	8005c88 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005c84:	2302      	movs	r3, #2
 8005c86:	e11f      	b.n	8005ec8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005c88:	2250      	movs	r2, #80	; 0x50
 8005c8a:	2100      	movs	r1, #0
 8005c8c:	68b8      	ldr	r0, [r7, #8]
 8005c8e:	f005 fd3b 	bl	800b708 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005c92:	7bfb      	ldrb	r3, [r7, #15]
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	211a      	movs	r1, #26
 8005c98:	fb01 f303 	mul.w	r3, r1, r3
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	b25b      	sxtb	r3, r3
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	da15      	bge.n	8005cd6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005caa:	7bfb      	ldrb	r3, [r7, #15]
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	211a      	movs	r1, #26
 8005cb0:	fb01 f303 	mul.w	r3, r1, r3
 8005cb4:	4413      	add	r3, r2
 8005cb6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005cba:	781a      	ldrb	r2, [r3, #0]
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005cc0:	7bfb      	ldrb	r3, [r7, #15]
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	211a      	movs	r1, #26
 8005cc6:	fb01 f303 	mul.w	r3, r1, r3
 8005cca:	4413      	add	r3, r2
 8005ccc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005cd0:	881a      	ldrh	r2, [r3, #0]
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	785b      	ldrb	r3, [r3, #1]
 8005cda:	4619      	mov	r1, r3
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f002 f986 	bl	8007fee <USBH_AllocPipe>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	7819      	ldrb	r1, [r3, #0]
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	7858      	ldrb	r0, [r3, #1]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005cfe:	68ba      	ldr	r2, [r7, #8]
 8005d00:	8952      	ldrh	r2, [r2, #10]
 8005d02:	9202      	str	r2, [sp, #8]
 8005d04:	2203      	movs	r2, #3
 8005d06:	9201      	str	r2, [sp, #4]
 8005d08:	9300      	str	r3, [sp, #0]
 8005d0a:	4623      	mov	r3, r4
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f002 f93e 	bl	8007f90 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f005 fbb3 	bl	800b488 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005d22:	2300      	movs	r3, #0
 8005d24:	2200      	movs	r2, #0
 8005d26:	210a      	movs	r1, #10
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f000 fc37 	bl	800659c <USBH_FindInterface>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005d32:	7bfb      	ldrb	r3, [r7, #15]
 8005d34:	2bff      	cmp	r3, #255	; 0xff
 8005d36:	d002      	beq.n	8005d3e <USBH_CDC_InterfaceInit+0x11a>
 8005d38:	7bfb      	ldrb	r3, [r7, #15]
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d901      	bls.n	8005d42 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005d3e:	2302      	movs	r3, #2
 8005d40:	e0c2      	b.n	8005ec8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005d42:	7bfb      	ldrb	r3, [r7, #15]
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	211a      	movs	r1, #26
 8005d48:	fb01 f303 	mul.w	r3, r1, r3
 8005d4c:	4413      	add	r3, r2
 8005d4e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	b25b      	sxtb	r3, r3
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	da16      	bge.n	8005d88 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005d5a:	7bfb      	ldrb	r3, [r7, #15]
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	211a      	movs	r1, #26
 8005d60:	fb01 f303 	mul.w	r3, r1, r3
 8005d64:	4413      	add	r3, r2
 8005d66:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005d6a:	781a      	ldrb	r2, [r3, #0]
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005d70:	7bfb      	ldrb	r3, [r7, #15]
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	211a      	movs	r1, #26
 8005d76:	fb01 f303 	mul.w	r3, r1, r3
 8005d7a:	4413      	add	r3, r2
 8005d7c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005d80:	881a      	ldrh	r2, [r3, #0]
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	835a      	strh	r2, [r3, #26]
 8005d86:	e015      	b.n	8005db4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005d88:	7bfb      	ldrb	r3, [r7, #15]
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	211a      	movs	r1, #26
 8005d8e:	fb01 f303 	mul.w	r3, r1, r3
 8005d92:	4413      	add	r3, r2
 8005d94:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005d98:	781a      	ldrb	r2, [r3, #0]
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005d9e:	7bfb      	ldrb	r3, [r7, #15]
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	211a      	movs	r1, #26
 8005da4:	fb01 f303 	mul.w	r3, r1, r3
 8005da8:	4413      	add	r3, r2
 8005daa:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005dae:	881a      	ldrh	r2, [r3, #0]
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005db4:	7bfb      	ldrb	r3, [r7, #15]
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	211a      	movs	r1, #26
 8005dba:	fb01 f303 	mul.w	r3, r1, r3
 8005dbe:	4413      	add	r3, r2
 8005dc0:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	b25b      	sxtb	r3, r3
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	da16      	bge.n	8005dfa <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005dcc:	7bfb      	ldrb	r3, [r7, #15]
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	211a      	movs	r1, #26
 8005dd2:	fb01 f303 	mul.w	r3, r1, r3
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005ddc:	781a      	ldrb	r2, [r3, #0]
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005de2:	7bfb      	ldrb	r3, [r7, #15]
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	211a      	movs	r1, #26
 8005de8:	fb01 f303 	mul.w	r3, r1, r3
 8005dec:	4413      	add	r3, r2
 8005dee:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005df2:	881a      	ldrh	r2, [r3, #0]
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	835a      	strh	r2, [r3, #26]
 8005df8:	e015      	b.n	8005e26 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005dfa:	7bfb      	ldrb	r3, [r7, #15]
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	211a      	movs	r1, #26
 8005e00:	fb01 f303 	mul.w	r3, r1, r3
 8005e04:	4413      	add	r3, r2
 8005e06:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005e0a:	781a      	ldrb	r2, [r3, #0]
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005e10:	7bfb      	ldrb	r3, [r7, #15]
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	211a      	movs	r1, #26
 8005e16:	fb01 f303 	mul.w	r3, r1, r3
 8005e1a:	4413      	add	r3, r2
 8005e1c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005e20:	881a      	ldrh	r2, [r3, #0]
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	7b9b      	ldrb	r3, [r3, #14]
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f002 f8de 	bl	8007fee <USBH_AllocPipe>
 8005e32:	4603      	mov	r3, r0
 8005e34:	461a      	mov	r2, r3
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	7bdb      	ldrb	r3, [r3, #15]
 8005e3e:	4619      	mov	r1, r3
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f002 f8d4 	bl	8007fee <USBH_AllocPipe>
 8005e46:	4603      	mov	r3, r0
 8005e48:	461a      	mov	r2, r3
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	7b59      	ldrb	r1, [r3, #13]
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	7b98      	ldrb	r0, [r3, #14]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005e62:	68ba      	ldr	r2, [r7, #8]
 8005e64:	8b12      	ldrh	r2, [r2, #24]
 8005e66:	9202      	str	r2, [sp, #8]
 8005e68:	2202      	movs	r2, #2
 8005e6a:	9201      	str	r2, [sp, #4]
 8005e6c:	9300      	str	r3, [sp, #0]
 8005e6e:	4623      	mov	r3, r4
 8005e70:	4602      	mov	r2, r0
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f002 f88c 	bl	8007f90 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	7b19      	ldrb	r1, [r3, #12]
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	7bd8      	ldrb	r0, [r3, #15]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005e8c:	68ba      	ldr	r2, [r7, #8]
 8005e8e:	8b52      	ldrh	r2, [r2, #26]
 8005e90:	9202      	str	r2, [sp, #8]
 8005e92:	2202      	movs	r2, #2
 8005e94:	9201      	str	r2, [sp, #4]
 8005e96:	9300      	str	r3, [sp, #0]
 8005e98:	4623      	mov	r3, r4
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f002 f877 	bl	8007f90 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	7b5b      	ldrb	r3, [r3, #13]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f005 fae8 	bl	800b488 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	7b1b      	ldrb	r3, [r3, #12]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f005 fae1 	bl	800b488 <USBH_LL_SetToggle>

  return USBH_OK;
 8005ec6:	2300      	movs	r3, #0
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3714      	adds	r7, #20
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd90      	pop	{r4, r7, pc}

08005ed0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ede:	69db      	ldr	r3, [r3, #28]
 8005ee0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00e      	beq.n	8005f08 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	4619      	mov	r1, r3
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f002 f86c 	bl	8007fce <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	4619      	mov	r1, r3
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f002 f897 	bl	8008030 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	7b1b      	ldrb	r3, [r3, #12]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00e      	beq.n	8005f2e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	7b1b      	ldrb	r3, [r3, #12]
 8005f14:	4619      	mov	r1, r3
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f002 f859 	bl	8007fce <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	7b1b      	ldrb	r3, [r3, #12]
 8005f20:	4619      	mov	r1, r3
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f002 f884 	bl	8008030 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	7b5b      	ldrb	r3, [r3, #13]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00e      	beq.n	8005f54 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	7b5b      	ldrb	r3, [r3, #13]
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f002 f846 	bl	8007fce <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	7b5b      	ldrb	r3, [r3, #13]
 8005f46:	4619      	mov	r1, r3
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f002 f871 	bl	8008030 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f5a:	69db      	ldr	r3, [r3, #28]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00b      	beq.n	8005f78 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f66:	69db      	ldr	r3, [r3, #28]
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f005 fb19 	bl	800b5a0 <free>
    phost->pActiveClass->pData = 0U;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f74:	2200      	movs	r2, #0
 8005f76:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b084      	sub	sp, #16
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f90:	69db      	ldr	r3, [r3, #28]
 8005f92:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	3340      	adds	r3, #64	; 0x40
 8005f98:	4619      	mov	r1, r3
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 f8b1 	bl	8006102 <GetLineCoding>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005fa4:	7afb      	ldrb	r3, [r7, #11]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d105      	bne.n	8005fb6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005fb0:	2102      	movs	r1, #2
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8005fb6:	7afb      	ldrb	r3, [r7, #11]
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3710      	adds	r7, #16
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fd6:	69db      	ldr	r3, [r3, #28]
 8005fd8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005fe0:	2b04      	cmp	r3, #4
 8005fe2:	d877      	bhi.n	80060d4 <USBH_CDC_Process+0x114>
 8005fe4:	a201      	add	r2, pc, #4	; (adr r2, 8005fec <USBH_CDC_Process+0x2c>)
 8005fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fea:	bf00      	nop
 8005fec:	08006001 	.word	0x08006001
 8005ff0:	08006007 	.word	0x08006007
 8005ff4:	08006037 	.word	0x08006037
 8005ff8:	080060ab 	.word	0x080060ab
 8005ffc:	080060b9 	.word	0x080060b9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006000:	2300      	movs	r3, #0
 8006002:	73fb      	strb	r3, [r7, #15]
      break;
 8006004:	e06d      	b.n	80060e2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800600a:	4619      	mov	r1, r3
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 f897 	bl	8006140 <SetLineCoding>
 8006012:	4603      	mov	r3, r0
 8006014:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006016:	7bbb      	ldrb	r3, [r7, #14]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d104      	bne.n	8006026 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	2202      	movs	r2, #2
 8006020:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006024:	e058      	b.n	80060d8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006026:	7bbb      	ldrb	r3, [r7, #14]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d055      	beq.n	80060d8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	2204      	movs	r2, #4
 8006030:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006034:	e050      	b.n	80060d8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	3340      	adds	r3, #64	; 0x40
 800603a:	4619      	mov	r1, r3
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 f860 	bl	8006102 <GetLineCoding>
 8006042:	4603      	mov	r3, r0
 8006044:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006046:	7bbb      	ldrb	r3, [r7, #14]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d126      	bne.n	800609a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	2200      	movs	r2, #0
 8006050:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800605e:	791b      	ldrb	r3, [r3, #4]
 8006060:	429a      	cmp	r2, r3
 8006062:	d13b      	bne.n	80060dc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800606e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006070:	429a      	cmp	r2, r3
 8006072:	d133      	bne.n	80060dc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800607e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006080:	429a      	cmp	r2, r3
 8006082:	d12b      	bne.n	80060dc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800608c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800608e:	429a      	cmp	r2, r3
 8006090:	d124      	bne.n	80060dc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f982 	bl	800639c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006098:	e020      	b.n	80060dc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800609a:	7bbb      	ldrb	r3, [r7, #14]
 800609c:	2b01      	cmp	r3, #1
 800609e:	d01d      	beq.n	80060dc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	2204      	movs	r2, #4
 80060a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80060a8:	e018      	b.n	80060dc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 f867 	bl	800617e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 f8f6 	bl	80062a2 <CDC_ProcessReception>
      break;
 80060b6:	e014      	b.n	80060e2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80060b8:	2100      	movs	r1, #0
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f001 f957 	bl	800736e <USBH_ClrFeature>
 80060c0:	4603      	mov	r3, r0
 80060c2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80060c4:	7bbb      	ldrb	r3, [r7, #14]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d10a      	bne.n	80060e0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80060d2:	e005      	b.n	80060e0 <USBH_CDC_Process+0x120>

    default:
      break;
 80060d4:	bf00      	nop
 80060d6:	e004      	b.n	80060e2 <USBH_CDC_Process+0x122>
      break;
 80060d8:	bf00      	nop
 80060da:	e002      	b.n	80060e2 <USBH_CDC_Process+0x122>
      break;
 80060dc:	bf00      	nop
 80060de:	e000      	b.n	80060e2 <USBH_CDC_Process+0x122>
      break;
 80060e0:	bf00      	nop

  }

  return status;
 80060e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3710      	adds	r7, #16
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr

08006102 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006102:	b580      	push	{r7, lr}
 8006104:	b082      	sub	sp, #8
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
 800610a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	22a1      	movs	r2, #161	; 0xa1
 8006110:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2221      	movs	r2, #33	; 0x21
 8006116:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2207      	movs	r2, #7
 8006128:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	2207      	movs	r2, #7
 800612e:	4619      	mov	r1, r3
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f001 fbeb 	bl	800790c <USBH_CtlReq>
 8006136:	4603      	mov	r3, r0
}
 8006138:	4618      	mov	r0, r3
 800613a:	3708      	adds	r7, #8
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2221      	movs	r2, #33	; 0x21
 800614e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2220      	movs	r2, #32
 8006154:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2207      	movs	r2, #7
 8006166:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	2207      	movs	r2, #7
 800616c:	4619      	mov	r1, r3
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f001 fbcc 	bl	800790c <USBH_CtlReq>
 8006174:	4603      	mov	r3, r0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3708      	adds	r7, #8
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b086      	sub	sp, #24
 8006182:	af02      	add	r7, sp, #8
 8006184:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800618c:	69db      	ldr	r3, [r3, #28]
 800618e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006190:	2300      	movs	r3, #0
 8006192:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800619a:	2b01      	cmp	r3, #1
 800619c:	d002      	beq.n	80061a4 <CDC_ProcessTransmission+0x26>
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d023      	beq.n	80061ea <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80061a2:	e07a      	b.n	800629a <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	8b12      	ldrh	r2, [r2, #24]
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d90b      	bls.n	80061c8 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	69d9      	ldr	r1, [r3, #28]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	8b1a      	ldrh	r2, [r3, #24]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	7b5b      	ldrb	r3, [r3, #13]
 80061bc:	2001      	movs	r0, #1
 80061be:	9000      	str	r0, [sp, #0]
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f001 fea2 	bl	8007f0a <USBH_BulkSendData>
 80061c6:	e00b      	b.n	80061e0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80061d0:	b29a      	uxth	r2, r3
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	7b5b      	ldrb	r3, [r3, #13]
 80061d6:	2001      	movs	r0, #1
 80061d8:	9000      	str	r0, [sp, #0]
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f001 fe95 	bl	8007f0a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2202      	movs	r2, #2
 80061e4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80061e8:	e057      	b.n	800629a <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	7b5b      	ldrb	r3, [r3, #13]
 80061ee:	4619      	mov	r1, r3
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f005 f91f 	bl	800b434 <USBH_LL_GetURBState>
 80061f6:	4603      	mov	r3, r0
 80061f8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80061fa:	7afb      	ldrb	r3, [r7, #11]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d136      	bne.n	800626e <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	8b12      	ldrh	r2, [r2, #24]
 8006208:	4293      	cmp	r3, r2
 800620a:	d90e      	bls.n	800622a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	8b12      	ldrh	r2, [r2, #24]
 8006214:	1a9a      	subs	r2, r3, r2
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	69db      	ldr	r3, [r3, #28]
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	8b12      	ldrh	r2, [r2, #24]
 8006222:	441a      	add	r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	61da      	str	r2, [r3, #28]
 8006228:	e002      	b.n	8006230 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2200      	movs	r2, #0
 800622e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006234:	2b00      	cmp	r3, #0
 8006236:	d004      	beq.n	8006242 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8006240:	e006      	b.n	8006250 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 f892 	bl	8006374 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2204      	movs	r2, #4
 8006254:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006264:	2300      	movs	r3, #0
 8006266:	2200      	movs	r2, #0
 8006268:	f002 f8c2 	bl	80083f0 <osMessageQueuePut>
      break;
 800626c:	e014      	b.n	8006298 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800626e:	7afb      	ldrb	r3, [r7, #11]
 8006270:	2b02      	cmp	r3, #2
 8006272:	d111      	bne.n	8006298 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2204      	movs	r2, #4
 8006280:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006290:	2300      	movs	r3, #0
 8006292:	2200      	movs	r2, #0
 8006294:	f002 f8ac 	bl	80083f0 <osMessageQueuePut>
      break;
 8006298:	bf00      	nop
  }
}
 800629a:	bf00      	nop
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b086      	sub	sp, #24
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062b0:	69db      	ldr	r3, [r3, #28]
 80062b2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80062b4:	2300      	movs	r3, #0
 80062b6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80062be:	2b03      	cmp	r3, #3
 80062c0:	d002      	beq.n	80062c8 <CDC_ProcessReception+0x26>
 80062c2:	2b04      	cmp	r3, #4
 80062c4:	d00e      	beq.n	80062e4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80062c6:	e051      	b.n	800636c <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	6a19      	ldr	r1, [r3, #32]
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	8b5a      	ldrh	r2, [r3, #26]
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	7b1b      	ldrb	r3, [r3, #12]
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f001 fe3d 	bl	8007f54 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	2204      	movs	r2, #4
 80062de:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80062e2:	e043      	b.n	800636c <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	7b1b      	ldrb	r3, [r3, #12]
 80062e8:	4619      	mov	r1, r3
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f005 f8a2 	bl	800b434 <USBH_LL_GetURBState>
 80062f0:	4603      	mov	r3, r0
 80062f2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80062f4:	7cfb      	ldrb	r3, [r7, #19]
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d137      	bne.n	800636a <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	7b1b      	ldrb	r3, [r3, #12]
 80062fe:	4619      	mov	r1, r3
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f005 f805 	bl	800b310 <USBH_LL_GetLastXferSize>
 8006306:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	429a      	cmp	r2, r3
 8006310:	d016      	beq.n	8006340 <CDC_ProcessReception+0x9e>
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	8b5b      	ldrh	r3, [r3, #26]
 8006316:	461a      	mov	r2, r3
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	4293      	cmp	r3, r2
 800631c:	d910      	bls.n	8006340 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	1ad2      	subs	r2, r2, r3
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	6a1a      	ldr	r2, [r3, #32]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	441a      	add	r2, r3
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	2203      	movs	r2, #3
 800633a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800633e:	e006      	b.n	800634e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	2200      	movs	r2, #0
 8006344:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 f81d 	bl	8006388 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2204      	movs	r2, #4
 8006352:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006362:	2300      	movs	r3, #0
 8006364:	2200      	movs	r2, #0
 8006366:	f002 f843 	bl	80083f0 <osMessageQueuePut>
      break;
 800636a:	bf00      	nop
  }
}
 800636c:	bf00      	nop
 800636e:	3718      	adds	r7, #24
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800637c:	bf00      	nop
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006390:	bf00      	nop
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80063a4:	bf00      	nop
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	4613      	mov	r3, r2
 80063bc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d101      	bne.n	80063c8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80063c4:	2302      	movs	r3, #2
 80063c6:	e044      	b.n	8006452 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	79fa      	ldrb	r2, [r7, #7]
 80063cc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	f000 f841 	bl	8006468 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2200      	movs	r2, #0
 8006402:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d003      	beq.n	8006414 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	68ba      	ldr	r2, [r7, #8]
 8006410:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8006414:	2200      	movs	r2, #0
 8006416:	2104      	movs	r1, #4
 8006418:	2010      	movs	r0, #16
 800641a:	f001 ff76 	bl	800830a <osMessageQueueNew>
 800641e:	4602      	mov	r2, r0
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 8006426:	4b0d      	ldr	r3, [pc, #52]	; (800645c <USBH_Init+0xac>)
 8006428:	4a0d      	ldr	r2, [pc, #52]	; (8006460 <USBH_Init+0xb0>)
 800642a:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800642c:	4b0b      	ldr	r3, [pc, #44]	; (800645c <USBH_Init+0xac>)
 800642e:	2280      	movs	r2, #128	; 0x80
 8006430:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 8006432:	4b0a      	ldr	r3, [pc, #40]	; (800645c <USBH_Init+0xac>)
 8006434:	2218      	movs	r2, #24
 8006436:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8006438:	4a08      	ldr	r2, [pc, #32]	; (800645c <USBH_Init+0xac>)
 800643a:	68f9      	ldr	r1, [r7, #12]
 800643c:	4809      	ldr	r0, [pc, #36]	; (8006464 <USBH_Init+0xb4>)
 800643e:	f001 feb7 	bl	80081b0 <osThreadNew>
 8006442:	4602      	mov	r2, r0
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800644a:	68f8      	ldr	r0, [r7, #12]
 800644c:	f004 feac 	bl	800b1a8 <USBH_LL_Init>

  return USBH_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3710      	adds	r7, #16
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	200001ec 	.word	0x200001ec
 8006460:	0800b86c 	.word	0x0800b86c
 8006464:	080070e5 	.word	0x080070e5

08006468 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006470:	2300      	movs	r3, #0
 8006472:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006474:	2300      	movs	r3, #0
 8006476:	60fb      	str	r3, [r7, #12]
 8006478:	e009      	b.n	800648e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	33e0      	adds	r3, #224	; 0xe0
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	4413      	add	r3, r2
 8006484:	2200      	movs	r2, #0
 8006486:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	3301      	adds	r3, #1
 800648c:	60fb      	str	r3, [r7, #12]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2b0f      	cmp	r3, #15
 8006492:	d9f2      	bls.n	800647a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006494:	2300      	movs	r3, #0
 8006496:	60fb      	str	r3, [r7, #12]
 8006498:	e009      	b.n	80064ae <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	4413      	add	r3, r2
 80064a0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80064a4:	2200      	movs	r2, #0
 80064a6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	3301      	adds	r3, #1
 80064ac:	60fb      	str	r3, [r7, #12]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064b4:	d3f1      	bcc.n	800649a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2201      	movs	r2, #1
 80064c6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2240      	movs	r2, #64	; 0x40
 80064da:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2201      	movs	r2, #1
 80064ee:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006502:	2300      	movs	r3, #0
}
 8006504:	4618      	mov	r0, r3
 8006506:	3714      	adds	r7, #20
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006510:	b480      	push	{r7}
 8006512:	b085      	sub	sp, #20
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800651a:	2300      	movs	r3, #0
 800651c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d016      	beq.n	8006552 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800652a:	2b00      	cmp	r3, #0
 800652c:	d10e      	bne.n	800654c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006534:	1c59      	adds	r1, r3, #1
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	33de      	adds	r3, #222	; 0xde
 8006540:	6839      	ldr	r1, [r7, #0]
 8006542:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006546:	2300      	movs	r3, #0
 8006548:	73fb      	strb	r3, [r7, #15]
 800654a:	e004      	b.n	8006556 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800654c:	2302      	movs	r3, #2
 800654e:	73fb      	strb	r3, [r7, #15]
 8006550:	e001      	b.n	8006556 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006552:	2302      	movs	r3, #2
 8006554:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006556:	7bfb      	ldrb	r3, [r7, #15]
}
 8006558:	4618      	mov	r0, r3
 800655a:	3714      	adds	r7, #20
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006564:	b480      	push	{r7}
 8006566:	b085      	sub	sp, #20
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	460b      	mov	r3, r1
 800656e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006570:	2300      	movs	r3, #0
 8006572:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800657a:	78fa      	ldrb	r2, [r7, #3]
 800657c:	429a      	cmp	r2, r3
 800657e:	d204      	bcs.n	800658a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	78fa      	ldrb	r2, [r7, #3]
 8006584:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006588:	e001      	b.n	800658e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800658a:	2302      	movs	r3, #2
 800658c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800658e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006590:	4618      	mov	r0, r3
 8006592:	3714      	adds	r7, #20
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800659c:	b480      	push	{r7}
 800659e:	b087      	sub	sp, #28
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	4608      	mov	r0, r1
 80065a6:	4611      	mov	r1, r2
 80065a8:	461a      	mov	r2, r3
 80065aa:	4603      	mov	r3, r0
 80065ac:	70fb      	strb	r3, [r7, #3]
 80065ae:	460b      	mov	r3, r1
 80065b0:	70bb      	strb	r3, [r7, #2]
 80065b2:	4613      	mov	r3, r2
 80065b4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80065b6:	2300      	movs	r3, #0
 80065b8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80065ba:	2300      	movs	r3, #0
 80065bc:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80065c4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80065c6:	e025      	b.n	8006614 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80065c8:	7dfb      	ldrb	r3, [r7, #23]
 80065ca:	221a      	movs	r2, #26
 80065cc:	fb02 f303 	mul.w	r3, r2, r3
 80065d0:	3308      	adds	r3, #8
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	4413      	add	r3, r2
 80065d6:	3302      	adds	r3, #2
 80065d8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	795b      	ldrb	r3, [r3, #5]
 80065de:	78fa      	ldrb	r2, [r7, #3]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d002      	beq.n	80065ea <USBH_FindInterface+0x4e>
 80065e4:	78fb      	ldrb	r3, [r7, #3]
 80065e6:	2bff      	cmp	r3, #255	; 0xff
 80065e8:	d111      	bne.n	800660e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80065ee:	78ba      	ldrb	r2, [r7, #2]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d002      	beq.n	80065fa <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80065f4:	78bb      	ldrb	r3, [r7, #2]
 80065f6:	2bff      	cmp	r3, #255	; 0xff
 80065f8:	d109      	bne.n	800660e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80065fe:	787a      	ldrb	r2, [r7, #1]
 8006600:	429a      	cmp	r2, r3
 8006602:	d002      	beq.n	800660a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006604:	787b      	ldrb	r3, [r7, #1]
 8006606:	2bff      	cmp	r3, #255	; 0xff
 8006608:	d101      	bne.n	800660e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800660a:	7dfb      	ldrb	r3, [r7, #23]
 800660c:	e006      	b.n	800661c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800660e:	7dfb      	ldrb	r3, [r7, #23]
 8006610:	3301      	adds	r3, #1
 8006612:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006614:	7dfb      	ldrb	r3, [r7, #23]
 8006616:	2b01      	cmp	r3, #1
 8006618:	d9d6      	bls.n	80065c8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800661a:	23ff      	movs	r3, #255	; 0xff
}
 800661c:	4618      	mov	r0, r3
 800661e:	371c      	adds	r7, #28
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f004 fdf5 	bl	800b220 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006636:	2101      	movs	r1, #1
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f004 ff0e 	bl	800b45a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800663e:	2300      	movs	r3, #0
}
 8006640:	4618      	mov	r0, r3
 8006642:	3708      	adds	r7, #8
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b088      	sub	sp, #32
 800664c:	af04      	add	r7, sp, #16
 800664e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006650:	2302      	movs	r3, #2
 8006652:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006654:	2300      	movs	r3, #0
 8006656:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800665e:	b2db      	uxtb	r3, r3
 8006660:	2b01      	cmp	r3, #1
 8006662:	d102      	bne.n	800666a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2203      	movs	r2, #3
 8006668:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	b2db      	uxtb	r3, r3
 8006670:	2b0b      	cmp	r3, #11
 8006672:	f200 8247 	bhi.w	8006b04 <USBH_Process+0x4bc>
 8006676:	a201      	add	r2, pc, #4	; (adr r2, 800667c <USBH_Process+0x34>)
 8006678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800667c:	080066ad 	.word	0x080066ad
 8006680:	080066fb 	.word	0x080066fb
 8006684:	0800677f 	.word	0x0800677f
 8006688:	08006a83 	.word	0x08006a83
 800668c:	08006b05 	.word	0x08006b05
 8006690:	0800683f 	.word	0x0800683f
 8006694:	08006a0d 	.word	0x08006a0d
 8006698:	08006891 	.word	0x08006891
 800669c:	080068cd 	.word	0x080068cd
 80066a0:	08006907 	.word	0x08006907
 80066a4:	08006965 	.word	0x08006965
 80066a8:	08006a6b 	.word	0x08006a6b
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	f000 8227 	beq.w	8006b08 <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2201      	movs	r2, #1
 80066be:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80066c0:	20c8      	movs	r0, #200	; 0xc8
 80066c2:	f004 ff11 	bl	800b4e8 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f004 fe07 	bl	800b2da <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80066f0:	2300      	movs	r3, #0
 80066f2:	2200      	movs	r2, #0
 80066f4:	f001 fe7c 	bl	80083f0 <osMessageQueuePut>
#endif
#endif
      }
      break;
 80066f8:	e206      	b.n	8006b08 <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006700:	2b01      	cmp	r3, #1
 8006702:	d107      	bne.n	8006714 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2202      	movs	r2, #2
 8006710:	701a      	strb	r2, [r3, #0]
 8006712:	e025      	b.n	8006760 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800671a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800671e:	d914      	bls.n	800674a <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006726:	3301      	adds	r3, #1
 8006728:	b2da      	uxtb	r2, r3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006736:	2b03      	cmp	r3, #3
 8006738:	d903      	bls.n	8006742 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	220d      	movs	r2, #13
 800673e:	701a      	strb	r2, [r3, #0]
 8006740:	e00e      	b.n	8006760 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	701a      	strb	r2, [r3, #0]
 8006748:	e00a      	b.n	8006760 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006750:	f103 020a 	add.w	r2, r3, #10
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800675a:	200a      	movs	r0, #10
 800675c:	f004 fec4 	bl	800b4e8 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006774:	2300      	movs	r3, #0
 8006776:	2200      	movs	r2, #0
 8006778:	f001 fe3a 	bl	80083f0 <osMessageQueuePut>
#endif
#endif
      break;
 800677c:	e1cb      	b.n	8006b16 <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006784:	2b00      	cmp	r3, #0
 8006786:	d005      	beq.n	8006794 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800678e:	2104      	movs	r1, #4
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006794:	2064      	movs	r0, #100	; 0x64
 8006796:	f004 fea7 	bl	800b4e8 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f004 fd76 	bl	800b28c <USBH_LL_GetSpeed>
 80067a0:	4603      	mov	r3, r0
 80067a2:	461a      	mov	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2205      	movs	r2, #5
 80067ae:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80067b0:	2100      	movs	r1, #0
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f001 fc1b 	bl	8007fee <USBH_AllocPipe>
 80067b8:	4603      	mov	r3, r0
 80067ba:	461a      	mov	r2, r3
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80067c0:	2180      	movs	r1, #128	; 0x80
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f001 fc13 	bl	8007fee <USBH_AllocPipe>
 80067c8:	4603      	mov	r3, r0
 80067ca:	461a      	mov	r2, r3
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	7919      	ldrb	r1, [r3, #4]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80067e4:	b292      	uxth	r2, r2
 80067e6:	9202      	str	r2, [sp, #8]
 80067e8:	2200      	movs	r2, #0
 80067ea:	9201      	str	r2, [sp, #4]
 80067ec:	9300      	str	r3, [sp, #0]
 80067ee:	4603      	mov	r3, r0
 80067f0:	2280      	movs	r2, #128	; 0x80
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f001 fbcc 	bl	8007f90 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	7959      	ldrb	r1, [r3, #5]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800680c:	b292      	uxth	r2, r2
 800680e:	9202      	str	r2, [sp, #8]
 8006810:	2200      	movs	r2, #0
 8006812:	9201      	str	r2, [sp, #4]
 8006814:	9300      	str	r3, [sp, #0]
 8006816:	4603      	mov	r3, r0
 8006818:	2200      	movs	r2, #0
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f001 fbb8 	bl	8007f90 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006834:	2300      	movs	r3, #0
 8006836:	2200      	movs	r2, #0
 8006838:	f001 fdda 	bl	80083f0 <osMessageQueuePut>
#endif
#endif
      break;
 800683c:	e16b      	b.n	8006b16 <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 f96e 	bl	8006b20 <USBH_HandleEnum>
 8006844:	4603      	mov	r3, r0
 8006846:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006848:	7bbb      	ldrb	r3, [r7, #14]
 800684a:	b2db      	uxtb	r3, r3
 800684c:	2b00      	cmp	r3, #0
 800684e:	f040 815d 	bne.w	8006b0c <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006860:	2b01      	cmp	r3, #1
 8006862:	d103      	bne.n	800686c <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2208      	movs	r2, #8
 8006868:	701a      	strb	r2, [r3, #0]
 800686a:	e002      	b.n	8006872 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2207      	movs	r2, #7
 8006870:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2205      	movs	r2, #5
 8006876:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006886:	2300      	movs	r3, #0
 8006888:	2200      	movs	r2, #0
 800688a:	f001 fdb1 	bl	80083f0 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800688e:	e13d      	b.n	8006b0c <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006896:	2b00      	cmp	r3, #0
 8006898:	f000 813a 	beq.w	8006b10 <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80068a2:	2101      	movs	r1, #1
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2208      	movs	r2, #8
 80068ac:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2205      	movs	r2, #5
 80068b2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80068c2:	2300      	movs	r3, #0
 80068c4:	2200      	movs	r2, #0
 80068c6:	f001 fd93 	bl	80083f0 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 80068ca:	e121      	b.n	8006b10 <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	4619      	mov	r1, r3
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 fd02 	bl	80072e0 <USBH_SetCfg>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d102      	bne.n	80068e8 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2209      	movs	r2, #9
 80068e6:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80068fc:	2300      	movs	r3, #0
 80068fe:	2200      	movs	r2, #0
 8006900:	f001 fd76 	bl	80083f0 <osMessageQueuePut>
#endif
#endif
      break;
 8006904:	e107      	b.n	8006b16 <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800690c:	f003 0320 	and.w	r3, r3, #32
 8006910:	2b00      	cmp	r3, #0
 8006912:	d015      	beq.n	8006940 <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006914:	2101      	movs	r1, #1
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 fd05 	bl	8007326 <USBH_SetFeature>
 800691c:	4603      	mov	r3, r0
 800691e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006920:	7bbb      	ldrb	r3, [r7, #14]
 8006922:	b2db      	uxtb	r3, r3
 8006924:	2b00      	cmp	r3, #0
 8006926:	d103      	bne.n	8006930 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	220a      	movs	r2, #10
 800692c:	701a      	strb	r2, [r3, #0]
 800692e:	e00a      	b.n	8006946 <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 8006930:	7bbb      	ldrb	r3, [r7, #14]
 8006932:	b2db      	uxtb	r3, r3
 8006934:	2b03      	cmp	r3, #3
 8006936:	d106      	bne.n	8006946 <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	220a      	movs	r2, #10
 800693c:	701a      	strb	r2, [r3, #0]
 800693e:	e002      	b.n	8006946 <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	220a      	movs	r2, #10
 8006944:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2201      	movs	r2, #1
 800694a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800695a:	2300      	movs	r3, #0
 800695c:	2200      	movs	r2, #0
 800695e:	f001 fd47 	bl	80083f0 <osMessageQueuePut>
#endif
#endif
      break;
 8006962:	e0d8      	b.n	8006b16 <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800696a:	2b00      	cmp	r3, #0
 800696c:	d03f      	beq.n	80069ee <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006976:	2300      	movs	r3, #0
 8006978:	73fb      	strb	r3, [r7, #15]
 800697a:	e016      	b.n	80069aa <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800697c:	7bfa      	ldrb	r2, [r7, #15]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	32de      	adds	r2, #222	; 0xde
 8006982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006986:	791a      	ldrb	r2, [r3, #4]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800698e:	429a      	cmp	r2, r3
 8006990:	d108      	bne.n	80069a4 <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006992:	7bfa      	ldrb	r2, [r7, #15]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	32de      	adds	r2, #222	; 0xde
 8006998:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80069a2:	e005      	b.n	80069b0 <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80069a4:	7bfb      	ldrb	r3, [r7, #15]
 80069a6:	3301      	adds	r3, #1
 80069a8:	73fb      	strb	r3, [r7, #15]
 80069aa:	7bfb      	ldrb	r3, [r7, #15]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d0e5      	beq.n	800697c <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d016      	beq.n	80069e8 <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	4798      	blx	r3
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d109      	bne.n	80069e0 <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2206      	movs	r2, #6
 80069d0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80069d8:	2103      	movs	r1, #3
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	4798      	blx	r3
 80069de:	e006      	b.n	80069ee <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	220d      	movs	r2, #13
 80069e4:	701a      	strb	r2, [r3, #0]
 80069e6:	e002      	b.n	80069ee <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	220d      	movs	r2, #13
 80069ec:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2205      	movs	r2, #5
 80069f2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006a02:	2300      	movs	r3, #0
 8006a04:	2200      	movs	r2, #0
 8006a06:	f001 fcf3 	bl	80083f0 <osMessageQueuePut>
#endif
#endif
      break;
 8006a0a:	e084      	b.n	8006b16 <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d017      	beq.n	8006a46 <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	4798      	blx	r3
 8006a22:	4603      	mov	r3, r0
 8006a24:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006a26:	7bbb      	ldrb	r3, [r7, #14]
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d103      	bne.n	8006a36 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	220b      	movs	r2, #11
 8006a32:	701a      	strb	r2, [r3, #0]
 8006a34:	e00a      	b.n	8006a4c <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 8006a36:	7bbb      	ldrb	r3, [r7, #14]
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d106      	bne.n	8006a4c <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	220d      	movs	r2, #13
 8006a42:	701a      	strb	r2, [r3, #0]
 8006a44:	e002      	b.n	8006a4c <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	220d      	movs	r2, #13
 8006a4a:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2205      	movs	r2, #5
 8006a50:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006a60:	2300      	movs	r3, #0
 8006a62:	2200      	movs	r2, #0
 8006a64:	f001 fcc4 	bl	80083f0 <osMessageQueuePut>
#endif
#endif
      break;
 8006a68:	e055      	b.n	8006b16 <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d04f      	beq.n	8006b14 <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a7a:	695b      	ldr	r3, [r3, #20]
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	4798      	blx	r3
      }
      break;
 8006a80:	e048      	b.n	8006b14 <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f7ff fcec 	bl	8006468 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d009      	beq.n	8006aae <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d005      	beq.n	8006ac4 <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006abe:	2105      	movs	r1, #5
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d107      	bne.n	8006ae0 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f7ff fda5 	bl	8006628 <USBH_Start>
 8006ade:	e002      	b.n	8006ae6 <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f004 fb9d 	bl	800b220 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2201      	movs	r2, #1
 8006aea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006afa:	2300      	movs	r3, #0
 8006afc:	2200      	movs	r2, #0
 8006afe:	f001 fc77 	bl	80083f0 <osMessageQueuePut>
#endif
#endif
      break;
 8006b02:	e008      	b.n	8006b16 <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 8006b04:	bf00      	nop
 8006b06:	e006      	b.n	8006b16 <USBH_Process+0x4ce>
      break;
 8006b08:	bf00      	nop
 8006b0a:	e004      	b.n	8006b16 <USBH_Process+0x4ce>
      break;
 8006b0c:	bf00      	nop
 8006b0e:	e002      	b.n	8006b16 <USBH_Process+0x4ce>
    break;
 8006b10:	bf00      	nop
 8006b12:	e000      	b.n	8006b16 <USBH_Process+0x4ce>
      break;
 8006b14:	bf00      	nop
  }
  return USBH_OK;
 8006b16:	2300      	movs	r3, #0
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3710      	adds	r7, #16
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b088      	sub	sp, #32
 8006b24:	af04      	add	r7, sp, #16
 8006b26:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	785b      	ldrb	r3, [r3, #1]
 8006b34:	2b07      	cmp	r3, #7
 8006b36:	f200 8208 	bhi.w	8006f4a <USBH_HandleEnum+0x42a>
 8006b3a:	a201      	add	r2, pc, #4	; (adr r2, 8006b40 <USBH_HandleEnum+0x20>)
 8006b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b40:	08006b61 	.word	0x08006b61
 8006b44:	08006c1f 	.word	0x08006c1f
 8006b48:	08006c89 	.word	0x08006c89
 8006b4c:	08006d17 	.word	0x08006d17
 8006b50:	08006d81 	.word	0x08006d81
 8006b54:	08006df1 	.word	0x08006df1
 8006b58:	08006e8d 	.word	0x08006e8d
 8006b5c:	08006f0b 	.word	0x08006f0b
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006b60:	2108      	movs	r1, #8
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 faec 	bl	8007140 <USBH_Get_DevDesc>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006b6c:	7bbb      	ldrb	r3, [r7, #14]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d130      	bne.n	8006bd4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	7919      	ldrb	r1, [r3, #4]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006b96:	b292      	uxth	r2, r2
 8006b98:	9202      	str	r2, [sp, #8]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	9201      	str	r2, [sp, #4]
 8006b9e:	9300      	str	r3, [sp, #0]
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	2280      	movs	r2, #128	; 0x80
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f001 f9f3 	bl	8007f90 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	7959      	ldrb	r1, [r3, #5]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006bbe:	b292      	uxth	r2, r2
 8006bc0:	9202      	str	r2, [sp, #8]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	9201      	str	r2, [sp, #4]
 8006bc6:	9300      	str	r3, [sp, #0]
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2200      	movs	r2, #0
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f001 f9df 	bl	8007f90 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006bd2:	e1bc      	b.n	8006f4e <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006bd4:	7bbb      	ldrb	r3, [r7, #14]
 8006bd6:	2b03      	cmp	r3, #3
 8006bd8:	f040 81b9 	bne.w	8006f4e <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006be2:	3301      	adds	r3, #1
 8006be4:	b2da      	uxtb	r2, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006bf2:	2b03      	cmp	r3, #3
 8006bf4:	d903      	bls.n	8006bfe <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	220d      	movs	r2, #13
 8006bfa:	701a      	strb	r2, [r3, #0]
      break;
 8006bfc:	e1a7      	b.n	8006f4e <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	795b      	ldrb	r3, [r3, #5]
 8006c02:	4619      	mov	r1, r3
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f001 fa13 	bl	8008030 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	791b      	ldrb	r3, [r3, #4]
 8006c0e:	4619      	mov	r1, r3
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f001 fa0d 	bl	8008030 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	701a      	strb	r2, [r3, #0]
      break;
 8006c1c:	e197      	b.n	8006f4e <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006c1e:	2112      	movs	r1, #18
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 fa8d 	bl	8007140 <USBH_Get_DevDesc>
 8006c26:	4603      	mov	r3, r0
 8006c28:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006c2a:	7bbb      	ldrb	r3, [r7, #14]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d103      	bne.n	8006c38 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2202      	movs	r2, #2
 8006c34:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006c36:	e18c      	b.n	8006f52 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006c38:	7bbb      	ldrb	r3, [r7, #14]
 8006c3a:	2b03      	cmp	r3, #3
 8006c3c:	f040 8189 	bne.w	8006f52 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c46:	3301      	adds	r3, #1
 8006c48:	b2da      	uxtb	r2, r3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c56:	2b03      	cmp	r3, #3
 8006c58:	d903      	bls.n	8006c62 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	220d      	movs	r2, #13
 8006c5e:	701a      	strb	r2, [r3, #0]
      break;
 8006c60:	e177      	b.n	8006f52 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	795b      	ldrb	r3, [r3, #5]
 8006c66:	4619      	mov	r1, r3
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f001 f9e1 	bl	8008030 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	791b      	ldrb	r3, [r3, #4]
 8006c72:	4619      	mov	r1, r3
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f001 f9db 	bl	8008030 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	701a      	strb	r2, [r3, #0]
      break;
 8006c86:	e164      	b.n	8006f52 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006c88:	2101      	movs	r1, #1
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 fb04 	bl	8007298 <USBH_SetAddress>
 8006c90:	4603      	mov	r3, r0
 8006c92:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006c94:	7bbb      	ldrb	r3, [r7, #14]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d132      	bne.n	8006d00 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006c9a:	2002      	movs	r0, #2
 8006c9c:	f004 fc24 	bl	800b4e8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2203      	movs	r2, #3
 8006cac:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	7919      	ldrb	r1, [r3, #4]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006cc2:	b292      	uxth	r2, r2
 8006cc4:	9202      	str	r2, [sp, #8]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	9201      	str	r2, [sp, #4]
 8006cca:	9300      	str	r3, [sp, #0]
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2280      	movs	r2, #128	; 0x80
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f001 f95d 	bl	8007f90 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	7959      	ldrb	r1, [r3, #5]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006cea:	b292      	uxth	r2, r2
 8006cec:	9202      	str	r2, [sp, #8]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	9201      	str	r2, [sp, #4]
 8006cf2:	9300      	str	r3, [sp, #0]
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f001 f949 	bl	8007f90 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006cfe:	e12a      	b.n	8006f56 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d00:	7bbb      	ldrb	r3, [r7, #14]
 8006d02:	2b03      	cmp	r3, #3
 8006d04:	f040 8127 	bne.w	8006f56 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	220d      	movs	r2, #13
 8006d0c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	705a      	strb	r2, [r3, #1]
      break;
 8006d14:	e11f      	b.n	8006f56 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006d16:	2109      	movs	r1, #9
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 fa39 	bl	8007190 <USBH_Get_CfgDesc>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006d22:	7bbb      	ldrb	r3, [r7, #14]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d103      	bne.n	8006d30 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2204      	movs	r2, #4
 8006d2c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006d2e:	e114      	b.n	8006f5a <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d30:	7bbb      	ldrb	r3, [r7, #14]
 8006d32:	2b03      	cmp	r3, #3
 8006d34:	f040 8111 	bne.w	8006f5a <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d3e:	3301      	adds	r3, #1
 8006d40:	b2da      	uxtb	r2, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d4e:	2b03      	cmp	r3, #3
 8006d50:	d903      	bls.n	8006d5a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	220d      	movs	r2, #13
 8006d56:	701a      	strb	r2, [r3, #0]
      break;
 8006d58:	e0ff      	b.n	8006f5a <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	795b      	ldrb	r3, [r3, #5]
 8006d5e:	4619      	mov	r1, r3
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f001 f965 	bl	8008030 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	791b      	ldrb	r3, [r3, #4]
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f001 f95f 	bl	8008030 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	701a      	strb	r2, [r3, #0]
      break;
 8006d7e:	e0ec      	b.n	8006f5a <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006d86:	4619      	mov	r1, r3
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 fa01 	bl	8007190 <USBH_Get_CfgDesc>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006d92:	7bbb      	ldrb	r3, [r7, #14]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d103      	bne.n	8006da0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2205      	movs	r2, #5
 8006d9c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006d9e:	e0de      	b.n	8006f5e <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006da0:	7bbb      	ldrb	r3, [r7, #14]
 8006da2:	2b03      	cmp	r3, #3
 8006da4:	f040 80db 	bne.w	8006f5e <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006dae:	3301      	adds	r3, #1
 8006db0:	b2da      	uxtb	r2, r3
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006dbe:	2b03      	cmp	r3, #3
 8006dc0:	d903      	bls.n	8006dca <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	220d      	movs	r2, #13
 8006dc6:	701a      	strb	r2, [r3, #0]
      break;
 8006dc8:	e0c9      	b.n	8006f5e <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	795b      	ldrb	r3, [r3, #5]
 8006dce:	4619      	mov	r1, r3
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f001 f92d 	bl	8008030 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	791b      	ldrb	r3, [r3, #4]
 8006dda:	4619      	mov	r1, r3
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f001 f927 	bl	8008030 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	701a      	strb	r2, [r3, #0]
      break;
 8006dee:	e0b6      	b.n	8006f5e <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d036      	beq.n	8006e68 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006e06:	23ff      	movs	r3, #255	; 0xff
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 f9e5 	bl	80071d8 <USBH_Get_StringDesc>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006e12:	7bbb      	ldrb	r3, [r7, #14]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d111      	bne.n	8006e3c <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2206      	movs	r2, #6
 8006e1c:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2205      	movs	r2, #5
 8006e22:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006e32:	2300      	movs	r3, #0
 8006e34:	2200      	movs	r2, #0
 8006e36:	f001 fadb 	bl	80083f0 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006e3a:	e092      	b.n	8006f62 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e3c:	7bbb      	ldrb	r3, [r7, #14]
 8006e3e:	2b03      	cmp	r3, #3
 8006e40:	f040 808f 	bne.w	8006f62 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2206      	movs	r2, #6
 8006e48:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2205      	movs	r2, #5
 8006e4e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006e5e:	2300      	movs	r3, #0
 8006e60:	2200      	movs	r2, #0
 8006e62:	f001 fac5 	bl	80083f0 <osMessageQueuePut>
      break;
 8006e66:	e07c      	b.n	8006f62 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2206      	movs	r2, #6
 8006e6c:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2205      	movs	r2, #5
 8006e72:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006e82:	2300      	movs	r3, #0
 8006e84:	2200      	movs	r2, #0
 8006e86:	f001 fab3 	bl	80083f0 <osMessageQueuePut>
      break;
 8006e8a:	e06a      	b.n	8006f62 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d027      	beq.n	8006ee6 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006ea2:	23ff      	movs	r3, #255	; 0xff
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 f997 	bl	80071d8 <USBH_Get_StringDesc>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006eae:	7bbb      	ldrb	r3, [r7, #14]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d103      	bne.n	8006ebc <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2207      	movs	r2, #7
 8006eb8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006eba:	e054      	b.n	8006f66 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ebc:	7bbb      	ldrb	r3, [r7, #14]
 8006ebe:	2b03      	cmp	r3, #3
 8006ec0:	d151      	bne.n	8006f66 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2207      	movs	r2, #7
 8006ec6:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2205      	movs	r2, #5
 8006ecc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006edc:	2300      	movs	r3, #0
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f001 fa86 	bl	80083f0 <osMessageQueuePut>
      break;
 8006ee4:	e03f      	b.n	8006f66 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2207      	movs	r2, #7
 8006eea:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2205      	movs	r2, #5
 8006ef0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006f00:	2300      	movs	r3, #0
 8006f02:	2200      	movs	r2, #0
 8006f04:	f001 fa74 	bl	80083f0 <osMessageQueuePut>
      break;
 8006f08:	e02d      	b.n	8006f66 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d017      	beq.n	8006f44 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006f20:	23ff      	movs	r3, #255	; 0xff
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 f958 	bl	80071d8 <USBH_Get_StringDesc>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006f2c:	7bbb      	ldrb	r3, [r7, #14]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d102      	bne.n	8006f38 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006f32:	2300      	movs	r3, #0
 8006f34:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006f36:	e018      	b.n	8006f6a <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f38:	7bbb      	ldrb	r3, [r7, #14]
 8006f3a:	2b03      	cmp	r3, #3
 8006f3c:	d115      	bne.n	8006f6a <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	73fb      	strb	r3, [r7, #15]
      break;
 8006f42:	e012      	b.n	8006f6a <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8006f44:	2300      	movs	r3, #0
 8006f46:	73fb      	strb	r3, [r7, #15]
      break;
 8006f48:	e00f      	b.n	8006f6a <USBH_HandleEnum+0x44a>

    default:
      break;
 8006f4a:	bf00      	nop
 8006f4c:	e00e      	b.n	8006f6c <USBH_HandleEnum+0x44c>
      break;
 8006f4e:	bf00      	nop
 8006f50:	e00c      	b.n	8006f6c <USBH_HandleEnum+0x44c>
      break;
 8006f52:	bf00      	nop
 8006f54:	e00a      	b.n	8006f6c <USBH_HandleEnum+0x44c>
      break;
 8006f56:	bf00      	nop
 8006f58:	e008      	b.n	8006f6c <USBH_HandleEnum+0x44c>
      break;
 8006f5a:	bf00      	nop
 8006f5c:	e006      	b.n	8006f6c <USBH_HandleEnum+0x44c>
      break;
 8006f5e:	bf00      	nop
 8006f60:	e004      	b.n	8006f6c <USBH_HandleEnum+0x44c>
      break;
 8006f62:	bf00      	nop
 8006f64:	e002      	b.n	8006f6c <USBH_HandleEnum+0x44c>
      break;
 8006f66:	bf00      	nop
 8006f68:	e000      	b.n	8006f6c <USBH_HandleEnum+0x44c>
      break;
 8006f6a:	bf00      	nop
  }
  return Status;
 8006f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3710      	adds	r7, #16
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop

08006f78 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	683a      	ldr	r2, [r7, #0]
 8006f86:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006f8a:	bf00      	nop
 8006f8c:	370c      	adds	r7, #12
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr

08006f96 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b082      	sub	sp, #8
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006fa4:	1c5a      	adds	r2, r3, #1
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 f804 	bl	8006fba <USBH_HandleSof>
}
 8006fb2:	bf00      	nop
 8006fb4:	3708      	adds	r7, #8
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}

08006fba <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006fba:	b580      	push	{r7, lr}
 8006fbc:	b082      	sub	sp, #8
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	2b0b      	cmp	r3, #11
 8006fca:	d10a      	bne.n	8006fe2 <USBH_HandleSof+0x28>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d005      	beq.n	8006fe2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fdc:	699b      	ldr	r3, [r3, #24]
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	4798      	blx	r3
  }
}
 8006fe2:	bf00      	nop
 8006fe4:	3708      	adds	r7, #8
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b082      	sub	sp, #8
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800700e:	2300      	movs	r3, #0
 8007010:	2200      	movs	r2, #0
 8007012:	f001 f9ed 	bl	80083f0 <osMessageQueuePut>
#endif
#endif

  return;
 8007016:	bf00      	nop
}
 8007018:	3708      	adds	r7, #8
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}

0800701e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800701e:	b480      	push	{r7}
 8007020:	b083      	sub	sp, #12
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800702e:	bf00      	nop
}
 8007030:	370c      	adds	r7, #12
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr

0800703a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800703a:	b580      	push	{r7, lr}
 800703c:	b082      	sub	sp, #8
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2201      	movs	r2, #1
 8007046:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2201      	movs	r2, #1
 800705e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800706e:	2300      	movs	r3, #0
 8007070:	2200      	movs	r2, #0
 8007072:	f001 f9bd 	bl	80083f0 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8007076:	2300      	movs	r3, #0
}
 8007078:	4618      	mov	r0, r3
 800707a:	3708      	adds	r7, #8
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b082      	sub	sp, #8
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f004 f8d8 	bl	800b256 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	791b      	ldrb	r3, [r3, #4]
 80070aa:	4619      	mov	r1, r3
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 ffbf 	bl	8008030 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	795b      	ldrb	r3, [r3, #5]
 80070b6:	4619      	mov	r1, r3
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 ffb9 	bl	8008030 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2201      	movs	r2, #1
 80070c2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80070d2:	2300      	movs	r3, #0
 80070d4:	2200      	movs	r2, #0
 80070d6:	f001 f98b 	bl	80083f0 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 80070da:	2300      	movs	r3, #0
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3708      	adds	r7, #8
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 80070f8:	f04f 33ff 	mov.w	r3, #4294967295
 80070fc:	2200      	movs	r2, #0
 80070fe:	f001 f9d7 	bl	80084b0 <osMessageQueueGet>
 8007102:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d1f0      	bne.n	80070ec <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f7ff fa9c 	bl	8006648 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007110:	e7ec      	b.n	80070ec <USBH_Process_OS+0x8>

08007112 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b082      	sub	sp, #8
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2201      	movs	r2, #1
 800711e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800712e:	2300      	movs	r3, #0
 8007130:	2200      	movs	r2, #0
 8007132:	f001 f95d 	bl	80083f0 <osMessageQueuePut>
#endif

  return USBH_OK;
 8007136:	2300      	movs	r3, #0
}
 8007138:	4618      	mov	r0, r3
 800713a:	3708      	adds	r7, #8
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b086      	sub	sp, #24
 8007144:	af02      	add	r7, sp, #8
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	460b      	mov	r3, r1
 800714a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007152:	78fb      	ldrb	r3, [r7, #3]
 8007154:	b29b      	uxth	r3, r3
 8007156:	9300      	str	r3, [sp, #0]
 8007158:	4613      	mov	r3, r2
 800715a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800715e:	2100      	movs	r1, #0
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 f864 	bl	800722e <USBH_GetDescriptor>
 8007166:	4603      	mov	r3, r0
 8007168:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800716a:	7bfb      	ldrb	r3, [r7, #15]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d10a      	bne.n	8007186 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800717c:	78fa      	ldrb	r2, [r7, #3]
 800717e:	b292      	uxth	r2, r2
 8007180:	4619      	mov	r1, r3
 8007182:	f000 f919 	bl	80073b8 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007186:	7bfb      	ldrb	r3, [r7, #15]
}
 8007188:	4618      	mov	r0, r3
 800718a:	3710      	adds	r7, #16
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007190:	b580      	push	{r7, lr}
 8007192:	b086      	sub	sp, #24
 8007194:	af02      	add	r7, sp, #8
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	460b      	mov	r3, r1
 800719a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	331c      	adds	r3, #28
 80071a0:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80071a2:	887b      	ldrh	r3, [r7, #2]
 80071a4:	9300      	str	r3, [sp, #0]
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071ac:	2100      	movs	r1, #0
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 f83d 	bl	800722e <USBH_GetDescriptor>
 80071b4:	4603      	mov	r3, r0
 80071b6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80071b8:	7bfb      	ldrb	r3, [r7, #15]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d107      	bne.n	80071ce <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80071be:	887b      	ldrh	r3, [r7, #2]
 80071c0:	461a      	mov	r2, r3
 80071c2:	68b9      	ldr	r1, [r7, #8]
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 f989 	bl	80074dc <USBH_ParseCfgDesc>
 80071ca:	4603      	mov	r3, r0
 80071cc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80071ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3710      	adds	r7, #16
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b088      	sub	sp, #32
 80071dc:	af02      	add	r7, sp, #8
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	607a      	str	r2, [r7, #4]
 80071e2:	461a      	mov	r2, r3
 80071e4:	460b      	mov	r3, r1
 80071e6:	72fb      	strb	r3, [r7, #11]
 80071e8:	4613      	mov	r3, r2
 80071ea:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80071ec:	7afb      	ldrb	r3, [r7, #11]
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80071f4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80071fc:	893b      	ldrh	r3, [r7, #8]
 80071fe:	9300      	str	r3, [sp, #0]
 8007200:	460b      	mov	r3, r1
 8007202:	2100      	movs	r1, #0
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	f000 f812 	bl	800722e <USBH_GetDescriptor>
 800720a:	4603      	mov	r3, r0
 800720c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800720e:	7dfb      	ldrb	r3, [r7, #23]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d107      	bne.n	8007224 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800721a:	893a      	ldrh	r2, [r7, #8]
 800721c:	6879      	ldr	r1, [r7, #4]
 800721e:	4618      	mov	r0, r3
 8007220:	f000 fb26 	bl	8007870 <USBH_ParseStringDesc>
  }

  return status;
 8007224:	7dfb      	ldrb	r3, [r7, #23]
}
 8007226:	4618      	mov	r0, r3
 8007228:	3718      	adds	r7, #24
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800722e:	b580      	push	{r7, lr}
 8007230:	b084      	sub	sp, #16
 8007232:	af00      	add	r7, sp, #0
 8007234:	60f8      	str	r0, [r7, #12]
 8007236:	607b      	str	r3, [r7, #4]
 8007238:	460b      	mov	r3, r1
 800723a:	72fb      	strb	r3, [r7, #11]
 800723c:	4613      	mov	r3, r2
 800723e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	789b      	ldrb	r3, [r3, #2]
 8007244:	2b01      	cmp	r3, #1
 8007246:	d11c      	bne.n	8007282 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007248:	7afb      	ldrb	r3, [r7, #11]
 800724a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800724e:	b2da      	uxtb	r2, r3
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2206      	movs	r2, #6
 8007258:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	893a      	ldrh	r2, [r7, #8]
 800725e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007260:	893b      	ldrh	r3, [r7, #8]
 8007262:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007266:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800726a:	d104      	bne.n	8007276 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f240 4209 	movw	r2, #1033	; 0x409
 8007272:	829a      	strh	r2, [r3, #20]
 8007274:	e002      	b.n	800727c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2200      	movs	r2, #0
 800727a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	8b3a      	ldrh	r2, [r7, #24]
 8007280:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007282:	8b3b      	ldrh	r3, [r7, #24]
 8007284:	461a      	mov	r2, r3
 8007286:	6879      	ldr	r1, [r7, #4]
 8007288:	68f8      	ldr	r0, [r7, #12]
 800728a:	f000 fb3f 	bl	800790c <USBH_CtlReq>
 800728e:	4603      	mov	r3, r0
}
 8007290:	4618      	mov	r0, r3
 8007292:	3710      	adds	r7, #16
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b082      	sub	sp, #8
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	460b      	mov	r3, r1
 80072a2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	789b      	ldrb	r3, [r3, #2]
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d10f      	bne.n	80072cc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2205      	movs	r2, #5
 80072b6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80072b8:	78fb      	ldrb	r3, [r7, #3]
 80072ba:	b29a      	uxth	r2, r3
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80072cc:	2200      	movs	r2, #0
 80072ce:	2100      	movs	r1, #0
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 fb1b 	bl	800790c <USBH_CtlReq>
 80072d6:	4603      	mov	r3, r0
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3708      	adds	r7, #8
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	460b      	mov	r3, r1
 80072ea:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	789b      	ldrb	r3, [r3, #2]
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d10e      	bne.n	8007312 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2200      	movs	r2, #0
 80072f8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2209      	movs	r2, #9
 80072fe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	887a      	ldrh	r2, [r7, #2]
 8007304:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007312:	2200      	movs	r2, #0
 8007314:	2100      	movs	r1, #0
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 faf8 	bl	800790c <USBH_CtlReq>
 800731c:	4603      	mov	r3, r0
}
 800731e:	4618      	mov	r0, r3
 8007320:	3708      	adds	r7, #8
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}

08007326 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007326:	b580      	push	{r7, lr}
 8007328:	b082      	sub	sp, #8
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
 800732e:	460b      	mov	r3, r1
 8007330:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	789b      	ldrb	r3, [r3, #2]
 8007336:	2b01      	cmp	r3, #1
 8007338:	d10f      	bne.n	800735a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2203      	movs	r2, #3
 8007344:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007346:	78fb      	ldrb	r3, [r7, #3]
 8007348:	b29a      	uxth	r2, r3
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2200      	movs	r2, #0
 8007352:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800735a:	2200      	movs	r2, #0
 800735c:	2100      	movs	r1, #0
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 fad4 	bl	800790c <USBH_CtlReq>
 8007364:	4603      	mov	r3, r0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3708      	adds	r7, #8
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b082      	sub	sp, #8
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
 8007376:	460b      	mov	r3, r1
 8007378:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	789b      	ldrb	r3, [r3, #2]
 800737e:	2b01      	cmp	r3, #1
 8007380:	d10f      	bne.n	80073a2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2202      	movs	r2, #2
 8007386:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007394:	78fb      	ldrb	r3, [r7, #3]
 8007396:	b29a      	uxth	r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80073a2:	2200      	movs	r2, #0
 80073a4:	2100      	movs	r1, #0
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 fab0 	bl	800790c <USBH_CtlReq>
 80073ac:	4603      	mov	r3, r0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3708      	adds	r7, #8
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
	...

080073b8 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b085      	sub	sp, #20
 80073bc:	af00      	add	r7, sp, #0
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	60b9      	str	r1, [r7, #8]
 80073c2:	4613      	mov	r3, r2
 80073c4:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	781a      	ldrb	r2, [r3, #0]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	785a      	ldrb	r2, [r3, #1]
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	3302      	adds	r3, #2
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	b29a      	uxth	r2, r3
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	3303      	adds	r3, #3
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	021b      	lsls	r3, r3, #8
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	4313      	orrs	r3, r2
 80073ec:	b29a      	uxth	r2, r3
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	791a      	ldrb	r2, [r3, #4]
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	795a      	ldrb	r2, [r3, #5]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	799a      	ldrb	r2, [r3, #6]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	79da      	ldrb	r2, [r3, #7]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	79db      	ldrb	r3, [r3, #7]
 8007416:	2b20      	cmp	r3, #32
 8007418:	dc0f      	bgt.n	800743a <USBH_ParseDevDesc+0x82>
 800741a:	2b08      	cmp	r3, #8
 800741c:	db14      	blt.n	8007448 <USBH_ParseDevDesc+0x90>
 800741e:	3b08      	subs	r3, #8
 8007420:	4a2d      	ldr	r2, [pc, #180]	; (80074d8 <USBH_ParseDevDesc+0x120>)
 8007422:	fa22 f303 	lsr.w	r3, r2, r3
 8007426:	f003 0301 	and.w	r3, r3, #1
 800742a:	2b00      	cmp	r3, #0
 800742c:	bf14      	ite	ne
 800742e:	2301      	movne	r3, #1
 8007430:	2300      	moveq	r3, #0
 8007432:	b2db      	uxtb	r3, r3
 8007434:	2b00      	cmp	r3, #0
 8007436:	d102      	bne.n	800743e <USBH_ParseDevDesc+0x86>
 8007438:	e006      	b.n	8007448 <USBH_ParseDevDesc+0x90>
 800743a:	2b40      	cmp	r3, #64	; 0x40
 800743c:	d104      	bne.n	8007448 <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	79da      	ldrb	r2, [r3, #7]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	71da      	strb	r2, [r3, #7]
      break;
 8007446:	e003      	b.n	8007450 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2240      	movs	r2, #64	; 0x40
 800744c:	71da      	strb	r2, [r3, #7]
      break;
 800744e:	bf00      	nop
  }

  if (length > 8U)
 8007450:	88fb      	ldrh	r3, [r7, #6]
 8007452:	2b08      	cmp	r3, #8
 8007454:	d939      	bls.n	80074ca <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	3308      	adds	r3, #8
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	b29a      	uxth	r2, r3
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	3309      	adds	r3, #9
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	b29b      	uxth	r3, r3
 8007466:	021b      	lsls	r3, r3, #8
 8007468:	b29b      	uxth	r3, r3
 800746a:	4313      	orrs	r3, r2
 800746c:	b29a      	uxth	r2, r3
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	330a      	adds	r3, #10
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	b29a      	uxth	r2, r3
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	330b      	adds	r3, #11
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	b29b      	uxth	r3, r3
 8007482:	021b      	lsls	r3, r3, #8
 8007484:	b29b      	uxth	r3, r3
 8007486:	4313      	orrs	r3, r2
 8007488:	b29a      	uxth	r2, r3
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	330c      	adds	r3, #12
 8007492:	781b      	ldrb	r3, [r3, #0]
 8007494:	b29a      	uxth	r2, r3
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	330d      	adds	r3, #13
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	b29b      	uxth	r3, r3
 800749e:	021b      	lsls	r3, r3, #8
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	4313      	orrs	r3, r2
 80074a4:	b29a      	uxth	r2, r3
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	7b9a      	ldrb	r2, [r3, #14]
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	7bda      	ldrb	r2, [r3, #15]
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	7c1a      	ldrb	r2, [r3, #16]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	7c5a      	ldrb	r2, [r3, #17]
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	745a      	strb	r2, [r3, #17]
  }
}
 80074ca:	bf00      	nop
 80074cc:	3714      	adds	r7, #20
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr
 80074d6:	bf00      	nop
 80074d8:	01000101 	.word	0x01000101

080074dc <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b08c      	sub	sp, #48	; 0x30
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	60b9      	str	r1, [r7, #8]
 80074e6:	4613      	mov	r3, r2
 80074e8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80074f0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80074f2:	2300      	movs	r3, #0
 80074f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80074fc:	2300      	movs	r3, #0
 80074fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007502:	2300      	movs	r3, #0
 8007504:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	781a      	ldrb	r2, [r3, #0]
 8007510:	6a3b      	ldr	r3, [r7, #32]
 8007512:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	785a      	ldrb	r2, [r3, #1]
 8007518:	6a3b      	ldr	r3, [r7, #32]
 800751a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	3302      	adds	r3, #2
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	b29a      	uxth	r2, r3
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	3303      	adds	r3, #3
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	b29b      	uxth	r3, r3
 800752c:	021b      	lsls	r3, r3, #8
 800752e:	b29b      	uxth	r3, r3
 8007530:	4313      	orrs	r3, r2
 8007532:	b29b      	uxth	r3, r3
 8007534:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007538:	bf28      	it	cs
 800753a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800753e:	b29a      	uxth	r2, r3
 8007540:	6a3b      	ldr	r3, [r7, #32]
 8007542:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	791a      	ldrb	r2, [r3, #4]
 8007548:	6a3b      	ldr	r3, [r7, #32]
 800754a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	795a      	ldrb	r2, [r3, #5]
 8007550:	6a3b      	ldr	r3, [r7, #32]
 8007552:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	799a      	ldrb	r2, [r3, #6]
 8007558:	6a3b      	ldr	r3, [r7, #32]
 800755a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	79da      	ldrb	r2, [r3, #7]
 8007560:	6a3b      	ldr	r3, [r7, #32]
 8007562:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	7a1a      	ldrb	r2, [r3, #8]
 8007568:	6a3b      	ldr	r3, [r7, #32]
 800756a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800756c:	6a3b      	ldr	r3, [r7, #32]
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	2b09      	cmp	r3, #9
 8007572:	d002      	beq.n	800757a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007574:	6a3b      	ldr	r3, [r7, #32]
 8007576:	2209      	movs	r2, #9
 8007578:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800757a:	88fb      	ldrh	r3, [r7, #6]
 800757c:	2b09      	cmp	r3, #9
 800757e:	f240 809d 	bls.w	80076bc <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007582:	2309      	movs	r3, #9
 8007584:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007586:	2300      	movs	r3, #0
 8007588:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800758a:	e081      	b.n	8007690 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800758c:	f107 0316 	add.w	r3, r7, #22
 8007590:	4619      	mov	r1, r3
 8007592:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007594:	f000 f99f 	bl	80078d6 <USBH_GetNextDesc>
 8007598:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800759a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800759c:	785b      	ldrb	r3, [r3, #1]
 800759e:	2b04      	cmp	r3, #4
 80075a0:	d176      	bne.n	8007690 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80075a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	2b09      	cmp	r3, #9
 80075a8:	d002      	beq.n	80075b0 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80075aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ac:	2209      	movs	r2, #9
 80075ae:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80075b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075b4:	221a      	movs	r2, #26
 80075b6:	fb02 f303 	mul.w	r3, r2, r3
 80075ba:	3308      	adds	r3, #8
 80075bc:	6a3a      	ldr	r2, [r7, #32]
 80075be:	4413      	add	r3, r2
 80075c0:	3302      	adds	r3, #2
 80075c2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80075c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075c6:	69f8      	ldr	r0, [r7, #28]
 80075c8:	f000 f87e 	bl	80076c8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80075cc:	2300      	movs	r3, #0
 80075ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80075d2:	2300      	movs	r3, #0
 80075d4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80075d6:	e043      	b.n	8007660 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80075d8:	f107 0316 	add.w	r3, r7, #22
 80075dc:	4619      	mov	r1, r3
 80075de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075e0:	f000 f979 	bl	80078d6 <USBH_GetNextDesc>
 80075e4:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80075e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e8:	785b      	ldrb	r3, [r3, #1]
 80075ea:	2b05      	cmp	r3, #5
 80075ec:	d138      	bne.n	8007660 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 80075ee:	69fb      	ldr	r3, [r7, #28]
 80075f0:	795b      	ldrb	r3, [r3, #5]
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d10f      	bne.n	8007616 <USBH_ParseCfgDesc+0x13a>
 80075f6:	69fb      	ldr	r3, [r7, #28]
 80075f8:	799b      	ldrb	r3, [r3, #6]
 80075fa:	2b02      	cmp	r3, #2
 80075fc:	d10b      	bne.n	8007616 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80075fe:	69fb      	ldr	r3, [r7, #28]
 8007600:	79db      	ldrb	r3, [r3, #7]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d10f      	bne.n	8007626 <USBH_ParseCfgDesc+0x14a>
 8007606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	2b09      	cmp	r3, #9
 800760c:	d00b      	beq.n	8007626 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800760e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007610:	2209      	movs	r2, #9
 8007612:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007614:	e007      	b.n	8007626 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	2b07      	cmp	r3, #7
 800761c:	d004      	beq.n	8007628 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800761e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007620:	2207      	movs	r2, #7
 8007622:	701a      	strb	r2, [r3, #0]
 8007624:	e000      	b.n	8007628 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007626:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800762c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007630:	3201      	adds	r2, #1
 8007632:	00d2      	lsls	r2, r2, #3
 8007634:	211a      	movs	r1, #26
 8007636:	fb01 f303 	mul.w	r3, r1, r3
 800763a:	4413      	add	r3, r2
 800763c:	3308      	adds	r3, #8
 800763e:	6a3a      	ldr	r2, [r7, #32]
 8007640:	4413      	add	r3, r2
 8007642:	3304      	adds	r3, #4
 8007644:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007646:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007648:	69b9      	ldr	r1, [r7, #24]
 800764a:	68f8      	ldr	r0, [r7, #12]
 800764c:	f000 f86b 	bl	8007726 <USBH_ParseEPDesc>
 8007650:	4603      	mov	r3, r0
 8007652:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007656:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800765a:	3301      	adds	r3, #1
 800765c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	791b      	ldrb	r3, [r3, #4]
 8007664:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007668:	429a      	cmp	r2, r3
 800766a:	d204      	bcs.n	8007676 <USBH_ParseCfgDesc+0x19a>
 800766c:	6a3b      	ldr	r3, [r7, #32]
 800766e:	885a      	ldrh	r2, [r3, #2]
 8007670:	8afb      	ldrh	r3, [r7, #22]
 8007672:	429a      	cmp	r2, r3
 8007674:	d8b0      	bhi.n	80075d8 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	791b      	ldrb	r3, [r3, #4]
 800767a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800767e:	429a      	cmp	r2, r3
 8007680:	d201      	bcs.n	8007686 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007682:	2303      	movs	r3, #3
 8007684:	e01c      	b.n	80076c0 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007686:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800768a:	3301      	adds	r3, #1
 800768c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007690:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007694:	2b01      	cmp	r3, #1
 8007696:	d805      	bhi.n	80076a4 <USBH_ParseCfgDesc+0x1c8>
 8007698:	6a3b      	ldr	r3, [r7, #32]
 800769a:	885a      	ldrh	r2, [r3, #2]
 800769c:	8afb      	ldrh	r3, [r7, #22]
 800769e:	429a      	cmp	r2, r3
 80076a0:	f63f af74 	bhi.w	800758c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80076a4:	6a3b      	ldr	r3, [r7, #32]
 80076a6:	791b      	ldrb	r3, [r3, #4]
 80076a8:	2b02      	cmp	r3, #2
 80076aa:	bf28      	it	cs
 80076ac:	2302      	movcs	r3, #2
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d201      	bcs.n	80076bc <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 80076b8:	2303      	movs	r3, #3
 80076ba:	e001      	b.n	80076c0 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 80076bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3730      	adds	r7, #48	; 0x30
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	781a      	ldrb	r2, [r3, #0]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	785a      	ldrb	r2, [r3, #1]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	789a      	ldrb	r2, [r3, #2]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	78da      	ldrb	r2, [r3, #3]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	791a      	ldrb	r2, [r3, #4]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	795a      	ldrb	r2, [r3, #5]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	799a      	ldrb	r2, [r3, #6]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	79da      	ldrb	r2, [r3, #7]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	7a1a      	ldrb	r2, [r3, #8]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	721a      	strb	r2, [r3, #8]
}
 800771a:	bf00      	nop
 800771c:	370c      	adds	r7, #12
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr

08007726 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007726:	b480      	push	{r7}
 8007728:	b087      	sub	sp, #28
 800772a:	af00      	add	r7, sp, #0
 800772c:	60f8      	str	r0, [r7, #12]
 800772e:	60b9      	str	r1, [r7, #8]
 8007730:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007732:	2300      	movs	r3, #0
 8007734:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	781a      	ldrb	r2, [r3, #0]
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	785a      	ldrb	r2, [r3, #1]
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	789a      	ldrb	r2, [r3, #2]
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	78da      	ldrb	r2, [r3, #3]
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	3304      	adds	r3, #4
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	b29a      	uxth	r2, r3
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	3305      	adds	r3, #5
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	b29b      	uxth	r3, r3
 8007766:	021b      	lsls	r3, r3, #8
 8007768:	b29b      	uxth	r3, r3
 800776a:	4313      	orrs	r3, r2
 800776c:	b29a      	uxth	r2, r3
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	799a      	ldrb	r2, [r3, #6]
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	889b      	ldrh	r3, [r3, #4]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d102      	bne.n	8007788 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007782:	2303      	movs	r3, #3
 8007784:	75fb      	strb	r3, [r7, #23]
 8007786:	e033      	b.n	80077f0 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	889b      	ldrh	r3, [r3, #4]
 800778c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007790:	f023 0307 	bic.w	r3, r3, #7
 8007794:	b29a      	uxth	r2, r3
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	889b      	ldrh	r3, [r3, #4]
 800779e:	b21a      	sxth	r2, r3
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	3304      	adds	r3, #4
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	b299      	uxth	r1, r3
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	3305      	adds	r3, #5
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	021b      	lsls	r3, r3, #8
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	430b      	orrs	r3, r1
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d110      	bne.n	80077e2 <USBH_ParseEPDesc+0xbc>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	3304      	adds	r3, #4
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	b299      	uxth	r1, r3
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	3305      	adds	r3, #5
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	021b      	lsls	r3, r3, #8
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	430b      	orrs	r3, r1
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	b21b      	sxth	r3, r3
 80077da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80077de:	b21b      	sxth	r3, r3
 80077e0:	e001      	b.n	80077e6 <USBH_ParseEPDesc+0xc0>
 80077e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077e6:	4313      	orrs	r3, r2
 80077e8:	b21b      	sxth	r3, r3
 80077ea:	b29a      	uxth	r2, r3
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d116      	bne.n	8007828 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	78db      	ldrb	r3, [r3, #3]
 80077fe:	f003 0303 	and.w	r3, r3, #3
 8007802:	2b01      	cmp	r3, #1
 8007804:	d005      	beq.n	8007812 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	78db      	ldrb	r3, [r3, #3]
 800780a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800780e:	2b03      	cmp	r3, #3
 8007810:	d127      	bne.n	8007862 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	799b      	ldrb	r3, [r3, #6]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d003      	beq.n	8007822 <USBH_ParseEPDesc+0xfc>
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	799b      	ldrb	r3, [r3, #6]
 800781e:	2b10      	cmp	r3, #16
 8007820:	d91f      	bls.n	8007862 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007822:	2303      	movs	r3, #3
 8007824:	75fb      	strb	r3, [r7, #23]
 8007826:	e01c      	b.n	8007862 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	78db      	ldrb	r3, [r3, #3]
 800782c:	f003 0303 	and.w	r3, r3, #3
 8007830:	2b01      	cmp	r3, #1
 8007832:	d10a      	bne.n	800784a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	799b      	ldrb	r3, [r3, #6]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d003      	beq.n	8007844 <USBH_ParseEPDesc+0x11e>
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	799b      	ldrb	r3, [r3, #6]
 8007840:	2b10      	cmp	r3, #16
 8007842:	d90e      	bls.n	8007862 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007844:	2303      	movs	r3, #3
 8007846:	75fb      	strb	r3, [r7, #23]
 8007848:	e00b      	b.n	8007862 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	78db      	ldrb	r3, [r3, #3]
 800784e:	f003 0303 	and.w	r3, r3, #3
 8007852:	2b03      	cmp	r3, #3
 8007854:	d105      	bne.n	8007862 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	799b      	ldrb	r3, [r3, #6]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d101      	bne.n	8007862 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800785e:	2303      	movs	r3, #3
 8007860:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8007862:	7dfb      	ldrb	r3, [r7, #23]
}
 8007864:	4618      	mov	r0, r3
 8007866:	371c      	adds	r7, #28
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr

08007870 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007870:	b480      	push	{r7}
 8007872:	b087      	sub	sp, #28
 8007874:	af00      	add	r7, sp, #0
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	60b9      	str	r1, [r7, #8]
 800787a:	4613      	mov	r3, r2
 800787c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	3301      	adds	r3, #1
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	2b03      	cmp	r3, #3
 8007886:	d120      	bne.n	80078ca <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	1e9a      	subs	r2, r3, #2
 800788e:	88fb      	ldrh	r3, [r7, #6]
 8007890:	4293      	cmp	r3, r2
 8007892:	bf28      	it	cs
 8007894:	4613      	movcs	r3, r2
 8007896:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	3302      	adds	r3, #2
 800789c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800789e:	2300      	movs	r3, #0
 80078a0:	82fb      	strh	r3, [r7, #22]
 80078a2:	e00b      	b.n	80078bc <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80078a4:	8afb      	ldrh	r3, [r7, #22]
 80078a6:	68fa      	ldr	r2, [r7, #12]
 80078a8:	4413      	add	r3, r2
 80078aa:	781a      	ldrb	r2, [r3, #0]
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	701a      	strb	r2, [r3, #0]
      pdest++;
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	3301      	adds	r3, #1
 80078b4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80078b6:	8afb      	ldrh	r3, [r7, #22]
 80078b8:	3302      	adds	r3, #2
 80078ba:	82fb      	strh	r3, [r7, #22]
 80078bc:	8afa      	ldrh	r2, [r7, #22]
 80078be:	8abb      	ldrh	r3, [r7, #20]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d3ef      	bcc.n	80078a4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	2200      	movs	r2, #0
 80078c8:	701a      	strb	r2, [r3, #0]
  }
}
 80078ca:	bf00      	nop
 80078cc:	371c      	adds	r7, #28
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr

080078d6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80078d6:	b480      	push	{r7}
 80078d8:	b085      	sub	sp, #20
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
 80078de:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	881a      	ldrh	r2, [r3, #0]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	4413      	add	r3, r2
 80078ec:	b29a      	uxth	r2, r3
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4413      	add	r3, r2
 80078fc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80078fe:	68fb      	ldr	r3, [r7, #12]
}
 8007900:	4618      	mov	r0, r3
 8007902:	3714      	adds	r7, #20
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b086      	sub	sp, #24
 8007910:	af00      	add	r7, sp, #0
 8007912:	60f8      	str	r0, [r7, #12]
 8007914:	60b9      	str	r1, [r7, #8]
 8007916:	4613      	mov	r3, r2
 8007918:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800791a:	2301      	movs	r3, #1
 800791c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	789b      	ldrb	r3, [r3, #2]
 8007922:	2b01      	cmp	r3, #1
 8007924:	d002      	beq.n	800792c <USBH_CtlReq+0x20>
 8007926:	2b02      	cmp	r3, #2
 8007928:	d01d      	beq.n	8007966 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800792a:	e043      	b.n	80079b4 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	68ba      	ldr	r2, [r7, #8]
 8007930:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	88fa      	ldrh	r2, [r7, #6]
 8007936:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2201      	movs	r2, #1
 800793c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2202      	movs	r2, #2
 8007942:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007944:	2301      	movs	r3, #1
 8007946:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2203      	movs	r2, #3
 800794c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800795c:	2300      	movs	r3, #0
 800795e:	2200      	movs	r2, #0
 8007960:	f000 fd46 	bl	80083f0 <osMessageQueuePut>
      break;
 8007964:	e026      	b.n	80079b4 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8007966:	68f8      	ldr	r0, [r7, #12]
 8007968:	f000 f82a 	bl	80079c0 <USBH_HandleControl>
 800796c:	4603      	mov	r3, r0
 800796e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007970:	7dfb      	ldrb	r3, [r7, #23]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d002      	beq.n	800797c <USBH_CtlReq+0x70>
 8007976:	7dfb      	ldrb	r3, [r7, #23]
 8007978:	2b03      	cmp	r3, #3
 800797a:	d106      	bne.n	800798a <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2201      	movs	r2, #1
 8007980:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2200      	movs	r2, #0
 8007986:	761a      	strb	r2, [r3, #24]
 8007988:	e005      	b.n	8007996 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800798a:	7dfb      	ldrb	r3, [r7, #23]
 800798c:	2b02      	cmp	r3, #2
 800798e:	d102      	bne.n	8007996 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2201      	movs	r2, #1
 8007994:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2203      	movs	r2, #3
 800799a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80079aa:	2300      	movs	r3, #0
 80079ac:	2200      	movs	r2, #0
 80079ae:	f000 fd1f 	bl	80083f0 <osMessageQueuePut>
      break;
 80079b2:	bf00      	nop
  }
  return status;
 80079b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3718      	adds	r7, #24
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
	...

080079c0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b086      	sub	sp, #24
 80079c4:	af02      	add	r7, sp, #8
 80079c6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80079c8:	2301      	movs	r3, #1
 80079ca:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80079cc:	2300      	movs	r3, #0
 80079ce:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	7e1b      	ldrb	r3, [r3, #24]
 80079d4:	3b01      	subs	r3, #1
 80079d6:	2b0a      	cmp	r3, #10
 80079d8:	f200 8229 	bhi.w	8007e2e <USBH_HandleControl+0x46e>
 80079dc:	a201      	add	r2, pc, #4	; (adr r2, 80079e4 <USBH_HandleControl+0x24>)
 80079de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e2:	bf00      	nop
 80079e4:	08007a11 	.word	0x08007a11
 80079e8:	08007a2b 	.word	0x08007a2b
 80079ec:	08007acd 	.word	0x08007acd
 80079f0:	08007af3 	.word	0x08007af3
 80079f4:	08007b7f 	.word	0x08007b7f
 80079f8:	08007ba9 	.word	0x08007ba9
 80079fc:	08007c6b 	.word	0x08007c6b
 8007a00:	08007c8d 	.word	0x08007c8d
 8007a04:	08007d1f 	.word	0x08007d1f
 8007a08:	08007d45 	.word	0x08007d45
 8007a0c:	08007dd7 	.word	0x08007dd7
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f103 0110 	add.w	r1, r3, #16
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	795b      	ldrb	r3, [r3, #5]
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 fa17 	bl	8007e50 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2202      	movs	r2, #2
 8007a26:	761a      	strb	r2, [r3, #24]
      break;
 8007a28:	e20c      	b.n	8007e44 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	795b      	ldrb	r3, [r3, #5]
 8007a2e:	4619      	mov	r1, r3
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f003 fcff 	bl	800b434 <USBH_LL_GetURBState>
 8007a36:	4603      	mov	r3, r0
 8007a38:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007a3a:	7bbb      	ldrb	r3, [r7, #14]
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d12c      	bne.n	8007a9a <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	7c1b      	ldrb	r3, [r3, #16]
 8007a44:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007a48:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	8adb      	ldrh	r3, [r3, #22]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d00a      	beq.n	8007a68 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007a52:	7b7b      	ldrb	r3, [r7, #13]
 8007a54:	2b80      	cmp	r3, #128	; 0x80
 8007a56:	d103      	bne.n	8007a60 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2203      	movs	r2, #3
 8007a5c:	761a      	strb	r2, [r3, #24]
 8007a5e:	e00d      	b.n	8007a7c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2205      	movs	r2, #5
 8007a64:	761a      	strb	r2, [r3, #24]
 8007a66:	e009      	b.n	8007a7c <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8007a68:	7b7b      	ldrb	r3, [r7, #13]
 8007a6a:	2b80      	cmp	r3, #128	; 0x80
 8007a6c:	d103      	bne.n	8007a76 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2209      	movs	r2, #9
 8007a72:	761a      	strb	r2, [r3, #24]
 8007a74:	e002      	b.n	8007a7c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2207      	movs	r2, #7
 8007a7a:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2203      	movs	r2, #3
 8007a80:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007a90:	2300      	movs	r3, #0
 8007a92:	2200      	movs	r2, #0
 8007a94:	f000 fcac 	bl	80083f0 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007a98:	e1cb      	b.n	8007e32 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007a9a:	7bbb      	ldrb	r3, [r7, #14]
 8007a9c:	2b04      	cmp	r3, #4
 8007a9e:	d003      	beq.n	8007aa8 <USBH_HandleControl+0xe8>
 8007aa0:	7bbb      	ldrb	r3, [r7, #14]
 8007aa2:	2b02      	cmp	r3, #2
 8007aa4:	f040 81c5 	bne.w	8007e32 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	220b      	movs	r2, #11
 8007aac:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2203      	movs	r2, #3
 8007ab2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f000 fc93 	bl	80083f0 <osMessageQueuePut>
      break;
 8007aca:	e1b2      	b.n	8007e32 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007ad2:	b29a      	uxth	r2, r3
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6899      	ldr	r1, [r3, #8]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	899a      	ldrh	r2, [r3, #12]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	791b      	ldrb	r3, [r3, #4]
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 f9f2 	bl	8007ece <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2204      	movs	r2, #4
 8007aee:	761a      	strb	r2, [r3, #24]
      break;
 8007af0:	e1a8      	b.n	8007e44 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	791b      	ldrb	r3, [r3, #4]
 8007af6:	4619      	mov	r1, r3
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f003 fc9b 	bl	800b434 <USBH_LL_GetURBState>
 8007afe:	4603      	mov	r3, r0
 8007b00:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007b02:	7bbb      	ldrb	r3, [r7, #14]
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d110      	bne.n	8007b2a <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2209      	movs	r2, #9
 8007b0c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2203      	movs	r2, #3
 8007b12:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007b22:	2300      	movs	r3, #0
 8007b24:	2200      	movs	r2, #0
 8007b26:	f000 fc63 	bl	80083f0 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007b2a:	7bbb      	ldrb	r3, [r7, #14]
 8007b2c:	2b05      	cmp	r3, #5
 8007b2e:	d110      	bne.n	8007b52 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007b30:	2303      	movs	r3, #3
 8007b32:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2203      	movs	r2, #3
 8007b38:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007b48:	2300      	movs	r3, #0
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f000 fc50 	bl	80083f0 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007b50:	e171      	b.n	8007e36 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 8007b52:	7bbb      	ldrb	r3, [r7, #14]
 8007b54:	2b04      	cmp	r3, #4
 8007b56:	f040 816e 	bne.w	8007e36 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	220b      	movs	r2, #11
 8007b5e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2203      	movs	r2, #3
 8007b64:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007b74:	2300      	movs	r3, #0
 8007b76:	2200      	movs	r2, #0
 8007b78:	f000 fc3a 	bl	80083f0 <osMessageQueuePut>
      break;
 8007b7c:	e15b      	b.n	8007e36 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6899      	ldr	r1, [r3, #8]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	899a      	ldrh	r2, [r3, #12]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	795b      	ldrb	r3, [r3, #5]
 8007b8a:	2001      	movs	r0, #1
 8007b8c:	9000      	str	r0, [sp, #0]
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 f978 	bl	8007e84 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007b9a:	b29a      	uxth	r2, r3
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2206      	movs	r2, #6
 8007ba4:	761a      	strb	r2, [r3, #24]
      break;
 8007ba6:	e14d      	b.n	8007e44 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	795b      	ldrb	r3, [r3, #5]
 8007bac:	4619      	mov	r1, r3
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f003 fc40 	bl	800b434 <USBH_LL_GetURBState>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007bb8:	7bbb      	ldrb	r3, [r7, #14]
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d111      	bne.n	8007be2 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2207      	movs	r2, #7
 8007bc2:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2203      	movs	r2, #3
 8007bc8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007bd8:	2300      	movs	r3, #0
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f000 fc08 	bl	80083f0 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007be0:	e12b      	b.n	8007e3a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 8007be2:	7bbb      	ldrb	r3, [r7, #14]
 8007be4:	2b05      	cmp	r3, #5
 8007be6:	d113      	bne.n	8007c10 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	220c      	movs	r2, #12
 8007bec:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007bee:	2303      	movs	r3, #3
 8007bf0:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2203      	movs	r2, #3
 8007bf6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007c06:	2300      	movs	r3, #0
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f000 fbf1 	bl	80083f0 <osMessageQueuePut>
      break;
 8007c0e:	e114      	b.n	8007e3a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007c10:	7bbb      	ldrb	r3, [r7, #14]
 8007c12:	2b02      	cmp	r3, #2
 8007c14:	d111      	bne.n	8007c3a <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2205      	movs	r2, #5
 8007c1a:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2203      	movs	r2, #3
 8007c20:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007c30:	2300      	movs	r3, #0
 8007c32:	2200      	movs	r2, #0
 8007c34:	f000 fbdc 	bl	80083f0 <osMessageQueuePut>
      break;
 8007c38:	e0ff      	b.n	8007e3a <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8007c3a:	7bbb      	ldrb	r3, [r7, #14]
 8007c3c:	2b04      	cmp	r3, #4
 8007c3e:	f040 80fc 	bne.w	8007e3a <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	220b      	movs	r2, #11
 8007c46:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007c48:	2302      	movs	r3, #2
 8007c4a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2203      	movs	r2, #3
 8007c50:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007c60:	2300      	movs	r3, #0
 8007c62:	2200      	movs	r2, #0
 8007c64:	f000 fbc4 	bl	80083f0 <osMessageQueuePut>
      break;
 8007c68:	e0e7      	b.n	8007e3a <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	791b      	ldrb	r3, [r3, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	2100      	movs	r1, #0
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 f92b 	bl	8007ece <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007c7e:	b29a      	uxth	r2, r3
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2208      	movs	r2, #8
 8007c88:	761a      	strb	r2, [r3, #24]

      break;
 8007c8a:	e0db      	b.n	8007e44 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	791b      	ldrb	r3, [r3, #4]
 8007c90:	4619      	mov	r1, r3
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f003 fbce 	bl	800b434 <USBH_LL_GetURBState>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007c9c:	7bbb      	ldrb	r3, [r7, #14]
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d113      	bne.n	8007cca <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	220d      	movs	r2, #13
 8007ca6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2203      	movs	r2, #3
 8007cb0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f000 fb94 	bl	80083f0 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007cc8:	e0b9      	b.n	8007e3e <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 8007cca:	7bbb      	ldrb	r3, [r7, #14]
 8007ccc:	2b04      	cmp	r3, #4
 8007cce:	d111      	bne.n	8007cf4 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	220b      	movs	r2, #11
 8007cd4:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2203      	movs	r2, #3
 8007cda:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007cea:	2300      	movs	r3, #0
 8007cec:	2200      	movs	r2, #0
 8007cee:	f000 fb7f 	bl	80083f0 <osMessageQueuePut>
      break;
 8007cf2:	e0a4      	b.n	8007e3e <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 8007cf4:	7bbb      	ldrb	r3, [r7, #14]
 8007cf6:	2b05      	cmp	r3, #5
 8007cf8:	f040 80a1 	bne.w	8007e3e <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 8007cfc:	2303      	movs	r3, #3
 8007cfe:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2203      	movs	r2, #3
 8007d04:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007d14:	2300      	movs	r3, #0
 8007d16:	2200      	movs	r2, #0
 8007d18:	f000 fb6a 	bl	80083f0 <osMessageQueuePut>
      break;
 8007d1c:	e08f      	b.n	8007e3e <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	795b      	ldrb	r3, [r3, #5]
 8007d22:	2201      	movs	r2, #1
 8007d24:	9200      	str	r2, [sp, #0]
 8007d26:	2200      	movs	r2, #0
 8007d28:	2100      	movs	r1, #0
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 f8aa 	bl	8007e84 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007d36:	b29a      	uxth	r2, r3
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	220a      	movs	r2, #10
 8007d40:	761a      	strb	r2, [r3, #24]
      break;
 8007d42:	e07f      	b.n	8007e44 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	795b      	ldrb	r3, [r3, #5]
 8007d48:	4619      	mov	r1, r3
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f003 fb72 	bl	800b434 <USBH_LL_GetURBState>
 8007d50:	4603      	mov	r3, r0
 8007d52:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007d54:	7bbb      	ldrb	r3, [r7, #14]
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d113      	bne.n	8007d82 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	220d      	movs	r2, #13
 8007d62:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2203      	movs	r2, #3
 8007d68:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007d78:	2300      	movs	r3, #0
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	f000 fb38 	bl	80083f0 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007d80:	e05f      	b.n	8007e42 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007d82:	7bbb      	ldrb	r3, [r7, #14]
 8007d84:	2b02      	cmp	r3, #2
 8007d86:	d111      	bne.n	8007dac <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2209      	movs	r2, #9
 8007d8c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2203      	movs	r2, #3
 8007d92:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007da2:	2300      	movs	r3, #0
 8007da4:	2200      	movs	r2, #0
 8007da6:	f000 fb23 	bl	80083f0 <osMessageQueuePut>
      break;
 8007daa:	e04a      	b.n	8007e42 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8007dac:	7bbb      	ldrb	r3, [r7, #14]
 8007dae:	2b04      	cmp	r3, #4
 8007db0:	d147      	bne.n	8007e42 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	220b      	movs	r2, #11
 8007db6:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2203      	movs	r2, #3
 8007dbc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007dcc:	2300      	movs	r3, #0
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f000 fb0e 	bl	80083f0 <osMessageQueuePut>
      break;
 8007dd4:	e035      	b.n	8007e42 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	7e5b      	ldrb	r3, [r3, #25]
 8007dda:	3301      	adds	r3, #1
 8007ddc:	b2da      	uxtb	r2, r3
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	765a      	strb	r2, [r3, #25]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	7e5b      	ldrb	r3, [r3, #25]
 8007de6:	2b02      	cmp	r3, #2
 8007de8:	d806      	bhi.n	8007df8 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2201      	movs	r2, #1
 8007dee:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007df6:	e025      	b.n	8007e44 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007dfe:	2106      	movs	r1, #6
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2200      	movs	r2, #0
 8007e08:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	795b      	ldrb	r3, [r3, #5]
 8007e0e:	4619      	mov	r1, r3
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f000 f90d 	bl	8008030 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	791b      	ldrb	r3, [r3, #4]
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 f907 	bl	8008030 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007e28:	2302      	movs	r3, #2
 8007e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8007e2c:	e00a      	b.n	8007e44 <USBH_HandleControl+0x484>

    default:
      break;
 8007e2e:	bf00      	nop
 8007e30:	e008      	b.n	8007e44 <USBH_HandleControl+0x484>
      break;
 8007e32:	bf00      	nop
 8007e34:	e006      	b.n	8007e44 <USBH_HandleControl+0x484>
      break;
 8007e36:	bf00      	nop
 8007e38:	e004      	b.n	8007e44 <USBH_HandleControl+0x484>
      break;
 8007e3a:	bf00      	nop
 8007e3c:	e002      	b.n	8007e44 <USBH_HandleControl+0x484>
      break;
 8007e3e:	bf00      	nop
 8007e40:	e000      	b.n	8007e44 <USBH_HandleControl+0x484>
      break;
 8007e42:	bf00      	nop
  }

  return status;
 8007e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop

08007e50 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b088      	sub	sp, #32
 8007e54:	af04      	add	r7, sp, #16
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	4613      	mov	r3, r2
 8007e5c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007e5e:	79f9      	ldrb	r1, [r7, #7]
 8007e60:	2300      	movs	r3, #0
 8007e62:	9303      	str	r3, [sp, #12]
 8007e64:	2308      	movs	r3, #8
 8007e66:	9302      	str	r3, [sp, #8]
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	9301      	str	r3, [sp, #4]
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	9300      	str	r3, [sp, #0]
 8007e70:	2300      	movs	r3, #0
 8007e72:	2200      	movs	r2, #0
 8007e74:	68f8      	ldr	r0, [r7, #12]
 8007e76:	f003 faac 	bl	800b3d2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007e7a:	2300      	movs	r3, #0
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3710      	adds	r7, #16
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b088      	sub	sp, #32
 8007e88:	af04      	add	r7, sp, #16
 8007e8a:	60f8      	str	r0, [r7, #12]
 8007e8c:	60b9      	str	r1, [r7, #8]
 8007e8e:	4611      	mov	r1, r2
 8007e90:	461a      	mov	r2, r3
 8007e92:	460b      	mov	r3, r1
 8007e94:	80fb      	strh	r3, [r7, #6]
 8007e96:	4613      	mov	r3, r2
 8007e98:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d001      	beq.n	8007ea8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007ea8:	7979      	ldrb	r1, [r7, #5]
 8007eaa:	7e3b      	ldrb	r3, [r7, #24]
 8007eac:	9303      	str	r3, [sp, #12]
 8007eae:	88fb      	ldrh	r3, [r7, #6]
 8007eb0:	9302      	str	r3, [sp, #8]
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	9301      	str	r3, [sp, #4]
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	9300      	str	r3, [sp, #0]
 8007eba:	2300      	movs	r3, #0
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	68f8      	ldr	r0, [r7, #12]
 8007ec0:	f003 fa87 	bl	800b3d2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007ec4:	2300      	movs	r3, #0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3710      	adds	r7, #16
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}

08007ece <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007ece:	b580      	push	{r7, lr}
 8007ed0:	b088      	sub	sp, #32
 8007ed2:	af04      	add	r7, sp, #16
 8007ed4:	60f8      	str	r0, [r7, #12]
 8007ed6:	60b9      	str	r1, [r7, #8]
 8007ed8:	4611      	mov	r1, r2
 8007eda:	461a      	mov	r2, r3
 8007edc:	460b      	mov	r3, r1
 8007ede:	80fb      	strh	r3, [r7, #6]
 8007ee0:	4613      	mov	r3, r2
 8007ee2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007ee4:	7979      	ldrb	r1, [r7, #5]
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	9303      	str	r3, [sp, #12]
 8007eea:	88fb      	ldrh	r3, [r7, #6]
 8007eec:	9302      	str	r3, [sp, #8]
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	9301      	str	r3, [sp, #4]
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	9300      	str	r3, [sp, #0]
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	2201      	movs	r2, #1
 8007efa:	68f8      	ldr	r0, [r7, #12]
 8007efc:	f003 fa69 	bl	800b3d2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007f00:	2300      	movs	r3, #0

}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3710      	adds	r7, #16
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}

08007f0a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007f0a:	b580      	push	{r7, lr}
 8007f0c:	b088      	sub	sp, #32
 8007f0e:	af04      	add	r7, sp, #16
 8007f10:	60f8      	str	r0, [r7, #12]
 8007f12:	60b9      	str	r1, [r7, #8]
 8007f14:	4611      	mov	r1, r2
 8007f16:	461a      	mov	r2, r3
 8007f18:	460b      	mov	r3, r1
 8007f1a:	80fb      	strh	r3, [r7, #6]
 8007f1c:	4613      	mov	r3, r2
 8007f1e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d001      	beq.n	8007f2e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007f2e:	7979      	ldrb	r1, [r7, #5]
 8007f30:	7e3b      	ldrb	r3, [r7, #24]
 8007f32:	9303      	str	r3, [sp, #12]
 8007f34:	88fb      	ldrh	r3, [r7, #6]
 8007f36:	9302      	str	r3, [sp, #8]
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	9301      	str	r3, [sp, #4]
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	9300      	str	r3, [sp, #0]
 8007f40:	2302      	movs	r3, #2
 8007f42:	2200      	movs	r2, #0
 8007f44:	68f8      	ldr	r0, [r7, #12]
 8007f46:	f003 fa44 	bl	800b3d2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007f4a:	2300      	movs	r3, #0
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3710      	adds	r7, #16
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b088      	sub	sp, #32
 8007f58:	af04      	add	r7, sp, #16
 8007f5a:	60f8      	str	r0, [r7, #12]
 8007f5c:	60b9      	str	r1, [r7, #8]
 8007f5e:	4611      	mov	r1, r2
 8007f60:	461a      	mov	r2, r3
 8007f62:	460b      	mov	r3, r1
 8007f64:	80fb      	strh	r3, [r7, #6]
 8007f66:	4613      	mov	r3, r2
 8007f68:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007f6a:	7979      	ldrb	r1, [r7, #5]
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	9303      	str	r3, [sp, #12]
 8007f70:	88fb      	ldrh	r3, [r7, #6]
 8007f72:	9302      	str	r3, [sp, #8]
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	9301      	str	r3, [sp, #4]
 8007f78:	2301      	movs	r3, #1
 8007f7a:	9300      	str	r3, [sp, #0]
 8007f7c:	2302      	movs	r3, #2
 8007f7e:	2201      	movs	r2, #1
 8007f80:	68f8      	ldr	r0, [r7, #12]
 8007f82:	f003 fa26 	bl	800b3d2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007f86:	2300      	movs	r3, #0
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3710      	adds	r7, #16
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b086      	sub	sp, #24
 8007f94:	af04      	add	r7, sp, #16
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	4608      	mov	r0, r1
 8007f9a:	4611      	mov	r1, r2
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	70fb      	strb	r3, [r7, #3]
 8007fa2:	460b      	mov	r3, r1
 8007fa4:	70bb      	strb	r3, [r7, #2]
 8007fa6:	4613      	mov	r3, r2
 8007fa8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007faa:	7878      	ldrb	r0, [r7, #1]
 8007fac:	78ba      	ldrb	r2, [r7, #2]
 8007fae:	78f9      	ldrb	r1, [r7, #3]
 8007fb0:	8b3b      	ldrh	r3, [r7, #24]
 8007fb2:	9302      	str	r3, [sp, #8]
 8007fb4:	7d3b      	ldrb	r3, [r7, #20]
 8007fb6:	9301      	str	r3, [sp, #4]
 8007fb8:	7c3b      	ldrb	r3, [r7, #16]
 8007fba:	9300      	str	r3, [sp, #0]
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f003 f9b9 	bl	800b336 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007fc4:	2300      	movs	r3, #0
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3708      	adds	r7, #8
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}

08007fce <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007fce:	b580      	push	{r7, lr}
 8007fd0:	b082      	sub	sp, #8
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
 8007fd6:	460b      	mov	r3, r1
 8007fd8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007fda:	78fb      	ldrb	r3, [r7, #3]
 8007fdc:	4619      	mov	r1, r3
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f003 f9d8 	bl	800b394 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007fe4:	2300      	movs	r3, #0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3708      	adds	r7, #8
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}

08007fee <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b084      	sub	sp, #16
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
 8007ff6:	460b      	mov	r3, r1
 8007ff8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 f836 	bl	800806c <USBH_GetFreePipe>
 8008000:	4603      	mov	r3, r0
 8008002:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008004:	89fb      	ldrh	r3, [r7, #14]
 8008006:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800800a:	4293      	cmp	r3, r2
 800800c:	d00a      	beq.n	8008024 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800800e:	78fa      	ldrb	r2, [r7, #3]
 8008010:	89fb      	ldrh	r3, [r7, #14]
 8008012:	f003 030f 	and.w	r3, r3, #15
 8008016:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800801a:	6879      	ldr	r1, [r7, #4]
 800801c:	33e0      	adds	r3, #224	; 0xe0
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	440b      	add	r3, r1
 8008022:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008024:	89fb      	ldrh	r3, [r7, #14]
 8008026:	b2db      	uxtb	r3, r3
}
 8008028:	4618      	mov	r0, r3
 800802a:	3710      	adds	r7, #16
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}

08008030 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	460b      	mov	r3, r1
 800803a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800803c:	78fb      	ldrb	r3, [r7, #3]
 800803e:	2b0f      	cmp	r3, #15
 8008040:	d80d      	bhi.n	800805e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008042:	78fb      	ldrb	r3, [r7, #3]
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	33e0      	adds	r3, #224	; 0xe0
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	4413      	add	r3, r2
 800804c:	685a      	ldr	r2, [r3, #4]
 800804e:	78fb      	ldrb	r3, [r7, #3]
 8008050:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008054:	6879      	ldr	r1, [r7, #4]
 8008056:	33e0      	adds	r3, #224	; 0xe0
 8008058:	009b      	lsls	r3, r3, #2
 800805a:	440b      	add	r3, r1
 800805c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800805e:	2300      	movs	r3, #0
}
 8008060:	4618      	mov	r0, r3
 8008062:	370c      	adds	r7, #12
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800806c:	b480      	push	{r7}
 800806e:	b085      	sub	sp, #20
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008074:	2300      	movs	r3, #0
 8008076:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008078:	2300      	movs	r3, #0
 800807a:	73fb      	strb	r3, [r7, #15]
 800807c:	e00f      	b.n	800809e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800807e:	7bfb      	ldrb	r3, [r7, #15]
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	33e0      	adds	r3, #224	; 0xe0
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	4413      	add	r3, r2
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800808e:	2b00      	cmp	r3, #0
 8008090:	d102      	bne.n	8008098 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008092:	7bfb      	ldrb	r3, [r7, #15]
 8008094:	b29b      	uxth	r3, r3
 8008096:	e007      	b.n	80080a8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008098:	7bfb      	ldrb	r3, [r7, #15]
 800809a:	3301      	adds	r3, #1
 800809c:	73fb      	strb	r3, [r7, #15]
 800809e:	7bfb      	ldrb	r3, [r7, #15]
 80080a0:	2b0f      	cmp	r3, #15
 80080a2:	d9ec      	bls.n	800807e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80080a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3714      	adds	r7, #20
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr

080080b4 <__NVIC_SetPriority>:
{
 80080b4:	b480      	push	{r7}
 80080b6:	b083      	sub	sp, #12
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	4603      	mov	r3, r0
 80080bc:	6039      	str	r1, [r7, #0]
 80080be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80080c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	db0a      	blt.n	80080de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	b2da      	uxtb	r2, r3
 80080cc:	490c      	ldr	r1, [pc, #48]	; (8008100 <__NVIC_SetPriority+0x4c>)
 80080ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080d2:	0112      	lsls	r2, r2, #4
 80080d4:	b2d2      	uxtb	r2, r2
 80080d6:	440b      	add	r3, r1
 80080d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80080dc:	e00a      	b.n	80080f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	b2da      	uxtb	r2, r3
 80080e2:	4908      	ldr	r1, [pc, #32]	; (8008104 <__NVIC_SetPriority+0x50>)
 80080e4:	79fb      	ldrb	r3, [r7, #7]
 80080e6:	f003 030f 	and.w	r3, r3, #15
 80080ea:	3b04      	subs	r3, #4
 80080ec:	0112      	lsls	r2, r2, #4
 80080ee:	b2d2      	uxtb	r2, r2
 80080f0:	440b      	add	r3, r1
 80080f2:	761a      	strb	r2, [r3, #24]
}
 80080f4:	bf00      	nop
 80080f6:	370c      	adds	r7, #12
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr
 8008100:	e000e100 	.word	0xe000e100
 8008104:	e000ed00 	.word	0xe000ed00

08008108 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008108:	b580      	push	{r7, lr}
 800810a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800810c:	2100      	movs	r1, #0
 800810e:	f06f 0004 	mvn.w	r0, #4
 8008112:	f7ff ffcf 	bl	80080b4 <__NVIC_SetPriority>
#endif
}
 8008116:	bf00      	nop
 8008118:	bd80      	pop	{r7, pc}
	...

0800811c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800811c:	b480      	push	{r7}
 800811e:	b083      	sub	sp, #12
 8008120:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008122:	f3ef 8305 	mrs	r3, IPSR
 8008126:	603b      	str	r3, [r7, #0]
  return(result);
 8008128:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800812a:	2b00      	cmp	r3, #0
 800812c:	d003      	beq.n	8008136 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800812e:	f06f 0305 	mvn.w	r3, #5
 8008132:	607b      	str	r3, [r7, #4]
 8008134:	e00c      	b.n	8008150 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008136:	4b0a      	ldr	r3, [pc, #40]	; (8008160 <osKernelInitialize+0x44>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d105      	bne.n	800814a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800813e:	4b08      	ldr	r3, [pc, #32]	; (8008160 <osKernelInitialize+0x44>)
 8008140:	2201      	movs	r2, #1
 8008142:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008144:	2300      	movs	r3, #0
 8008146:	607b      	str	r3, [r7, #4]
 8008148:	e002      	b.n	8008150 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800814a:	f04f 33ff 	mov.w	r3, #4294967295
 800814e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008150:	687b      	ldr	r3, [r7, #4]
}
 8008152:	4618      	mov	r0, r3
 8008154:	370c      	adds	r7, #12
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr
 800815e:	bf00      	nop
 8008160:	20000210 	.word	0x20000210

08008164 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800816a:	f3ef 8305 	mrs	r3, IPSR
 800816e:	603b      	str	r3, [r7, #0]
  return(result);
 8008170:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008172:	2b00      	cmp	r3, #0
 8008174:	d003      	beq.n	800817e <osKernelStart+0x1a>
    stat = osErrorISR;
 8008176:	f06f 0305 	mvn.w	r3, #5
 800817a:	607b      	str	r3, [r7, #4]
 800817c:	e010      	b.n	80081a0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800817e:	4b0b      	ldr	r3, [pc, #44]	; (80081ac <osKernelStart+0x48>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2b01      	cmp	r3, #1
 8008184:	d109      	bne.n	800819a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008186:	f7ff ffbf 	bl	8008108 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800818a:	4b08      	ldr	r3, [pc, #32]	; (80081ac <osKernelStart+0x48>)
 800818c:	2202      	movs	r2, #2
 800818e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008190:	f001 fa50 	bl	8009634 <vTaskStartScheduler>
      stat = osOK;
 8008194:	2300      	movs	r3, #0
 8008196:	607b      	str	r3, [r7, #4]
 8008198:	e002      	b.n	80081a0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800819a:	f04f 33ff 	mov.w	r3, #4294967295
 800819e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80081a0:	687b      	ldr	r3, [r7, #4]
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3708      	adds	r7, #8
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop
 80081ac:	20000210 	.word	0x20000210

080081b0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b08e      	sub	sp, #56	; 0x38
 80081b4:	af04      	add	r7, sp, #16
 80081b6:	60f8      	str	r0, [r7, #12]
 80081b8:	60b9      	str	r1, [r7, #8]
 80081ba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80081bc:	2300      	movs	r3, #0
 80081be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081c0:	f3ef 8305 	mrs	r3, IPSR
 80081c4:	617b      	str	r3, [r7, #20]
  return(result);
 80081c6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d17e      	bne.n	80082ca <osThreadNew+0x11a>
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d07b      	beq.n	80082ca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80081d2:	2380      	movs	r3, #128	; 0x80
 80081d4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80081d6:	2318      	movs	r3, #24
 80081d8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80081da:	2300      	movs	r3, #0
 80081dc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80081de:	f04f 33ff 	mov.w	r3, #4294967295
 80081e2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d045      	beq.n	8008276 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d002      	beq.n	80081f8 <osThreadNew+0x48>
        name = attr->name;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	699b      	ldr	r3, [r3, #24]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d002      	beq.n	8008206 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	699b      	ldr	r3, [r3, #24]
 8008204:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008206:	69fb      	ldr	r3, [r7, #28]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d008      	beq.n	800821e <osThreadNew+0x6e>
 800820c:	69fb      	ldr	r3, [r7, #28]
 800820e:	2b38      	cmp	r3, #56	; 0x38
 8008210:	d805      	bhi.n	800821e <osThreadNew+0x6e>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	f003 0301 	and.w	r3, r3, #1
 800821a:	2b00      	cmp	r3, #0
 800821c:	d001      	beq.n	8008222 <osThreadNew+0x72>
        return (NULL);
 800821e:	2300      	movs	r3, #0
 8008220:	e054      	b.n	80082cc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	695b      	ldr	r3, [r3, #20]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d003      	beq.n	8008232 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	695b      	ldr	r3, [r3, #20]
 800822e:	089b      	lsrs	r3, r3, #2
 8008230:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	689b      	ldr	r3, [r3, #8]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d00e      	beq.n	8008258 <osThreadNew+0xa8>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	68db      	ldr	r3, [r3, #12]
 800823e:	2b5b      	cmp	r3, #91	; 0x5b
 8008240:	d90a      	bls.n	8008258 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008246:	2b00      	cmp	r3, #0
 8008248:	d006      	beq.n	8008258 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	695b      	ldr	r3, [r3, #20]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d002      	beq.n	8008258 <osThreadNew+0xa8>
        mem = 1;
 8008252:	2301      	movs	r3, #1
 8008254:	61bb      	str	r3, [r7, #24]
 8008256:	e010      	b.n	800827a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d10c      	bne.n	800827a <osThreadNew+0xca>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d108      	bne.n	800827a <osThreadNew+0xca>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	691b      	ldr	r3, [r3, #16]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d104      	bne.n	800827a <osThreadNew+0xca>
          mem = 0;
 8008270:	2300      	movs	r3, #0
 8008272:	61bb      	str	r3, [r7, #24]
 8008274:	e001      	b.n	800827a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008276:	2300      	movs	r3, #0
 8008278:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800827a:	69bb      	ldr	r3, [r7, #24]
 800827c:	2b01      	cmp	r3, #1
 800827e:	d110      	bne.n	80082a2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008288:	9202      	str	r2, [sp, #8]
 800828a:	9301      	str	r3, [sp, #4]
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	9300      	str	r3, [sp, #0]
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	6a3a      	ldr	r2, [r7, #32]
 8008294:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008296:	68f8      	ldr	r0, [r7, #12]
 8008298:	f000 fff6 	bl	8009288 <xTaskCreateStatic>
 800829c:	4603      	mov	r3, r0
 800829e:	613b      	str	r3, [r7, #16]
 80082a0:	e013      	b.n	80082ca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80082a2:	69bb      	ldr	r3, [r7, #24]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d110      	bne.n	80082ca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80082a8:	6a3b      	ldr	r3, [r7, #32]
 80082aa:	b29a      	uxth	r2, r3
 80082ac:	f107 0310 	add.w	r3, r7, #16
 80082b0:	9301      	str	r3, [sp, #4]
 80082b2:	69fb      	ldr	r3, [r7, #28]
 80082b4:	9300      	str	r3, [sp, #0]
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80082ba:	68f8      	ldr	r0, [r7, #12]
 80082bc:	f001 f841 	bl	8009342 <xTaskCreate>
 80082c0:	4603      	mov	r3, r0
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d001      	beq.n	80082ca <osThreadNew+0x11a>
            hTask = NULL;
 80082c6:	2300      	movs	r3, #0
 80082c8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80082ca:	693b      	ldr	r3, [r7, #16]
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3728      	adds	r7, #40	; 0x28
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b084      	sub	sp, #16
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082dc:	f3ef 8305 	mrs	r3, IPSR
 80082e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80082e2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d003      	beq.n	80082f0 <osDelay+0x1c>
    stat = osErrorISR;
 80082e8:	f06f 0305 	mvn.w	r3, #5
 80082ec:	60fb      	str	r3, [r7, #12]
 80082ee:	e007      	b.n	8008300 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80082f0:	2300      	movs	r3, #0
 80082f2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d002      	beq.n	8008300 <osDelay+0x2c>
      vTaskDelay(ticks);
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f001 f966 	bl	80095cc <vTaskDelay>
    }
  }

  return (stat);
 8008300:	68fb      	ldr	r3, [r7, #12]
}
 8008302:	4618      	mov	r0, r3
 8008304:	3710      	adds	r7, #16
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}

0800830a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800830a:	b580      	push	{r7, lr}
 800830c:	b08a      	sub	sp, #40	; 0x28
 800830e:	af02      	add	r7, sp, #8
 8008310:	60f8      	str	r0, [r7, #12]
 8008312:	60b9      	str	r1, [r7, #8]
 8008314:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008316:	2300      	movs	r3, #0
 8008318:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800831a:	f3ef 8305 	mrs	r3, IPSR
 800831e:	613b      	str	r3, [r7, #16]
  return(result);
 8008320:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008322:	2b00      	cmp	r3, #0
 8008324:	d15f      	bne.n	80083e6 <osMessageQueueNew+0xdc>
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d05c      	beq.n	80083e6 <osMessageQueueNew+0xdc>
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d059      	beq.n	80083e6 <osMessageQueueNew+0xdc>
    mem = -1;
 8008332:	f04f 33ff 	mov.w	r3, #4294967295
 8008336:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d029      	beq.n	8008392 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d012      	beq.n	800836c <osMessageQueueNew+0x62>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	68db      	ldr	r3, [r3, #12]
 800834a:	2b4f      	cmp	r3, #79	; 0x4f
 800834c:	d90e      	bls.n	800836c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008352:	2b00      	cmp	r3, #0
 8008354:	d00a      	beq.n	800836c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	695a      	ldr	r2, [r3, #20]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	68b9      	ldr	r1, [r7, #8]
 800835e:	fb01 f303 	mul.w	r3, r1, r3
 8008362:	429a      	cmp	r2, r3
 8008364:	d302      	bcc.n	800836c <osMessageQueueNew+0x62>
        mem = 1;
 8008366:	2301      	movs	r3, #1
 8008368:	61bb      	str	r3, [r7, #24]
 800836a:	e014      	b.n	8008396 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	689b      	ldr	r3, [r3, #8]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d110      	bne.n	8008396 <osMessageQueueNew+0x8c>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	68db      	ldr	r3, [r3, #12]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d10c      	bne.n	8008396 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008380:	2b00      	cmp	r3, #0
 8008382:	d108      	bne.n	8008396 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	695b      	ldr	r3, [r3, #20]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d104      	bne.n	8008396 <osMessageQueueNew+0x8c>
          mem = 0;
 800838c:	2300      	movs	r3, #0
 800838e:	61bb      	str	r3, [r7, #24]
 8008390:	e001      	b.n	8008396 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008392:	2300      	movs	r3, #0
 8008394:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008396:	69bb      	ldr	r3, [r7, #24]
 8008398:	2b01      	cmp	r3, #1
 800839a:	d10b      	bne.n	80083b4 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	691a      	ldr	r2, [r3, #16]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	2100      	movs	r1, #0
 80083a6:	9100      	str	r1, [sp, #0]
 80083a8:	68b9      	ldr	r1, [r7, #8]
 80083aa:	68f8      	ldr	r0, [r7, #12]
 80083ac:	f000 fa2e 	bl	800880c <xQueueGenericCreateStatic>
 80083b0:	61f8      	str	r0, [r7, #28]
 80083b2:	e008      	b.n	80083c6 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d105      	bne.n	80083c6 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80083ba:	2200      	movs	r2, #0
 80083bc:	68b9      	ldr	r1, [r7, #8]
 80083be:	68f8      	ldr	r0, [r7, #12]
 80083c0:	f000 fa9c 	bl	80088fc <xQueueGenericCreate>
 80083c4:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80083c6:	69fb      	ldr	r3, [r7, #28]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d00c      	beq.n	80083e6 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d003      	beq.n	80083da <osMessageQueueNew+0xd0>
        name = attr->name;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	617b      	str	r3, [r7, #20]
 80083d8:	e001      	b.n	80083de <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80083da:	2300      	movs	r3, #0
 80083dc:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80083de:	6979      	ldr	r1, [r7, #20]
 80083e0:	69f8      	ldr	r0, [r7, #28]
 80083e2:	f000 fef3 	bl	80091cc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80083e6:	69fb      	ldr	r3, [r7, #28]
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3720      	adds	r7, #32
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b088      	sub	sp, #32
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	60f8      	str	r0, [r7, #12]
 80083f8:	60b9      	str	r1, [r7, #8]
 80083fa:	603b      	str	r3, [r7, #0]
 80083fc:	4613      	mov	r3, r2
 80083fe:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008404:	2300      	movs	r3, #0
 8008406:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008408:	f3ef 8305 	mrs	r3, IPSR
 800840c:	617b      	str	r3, [r7, #20]
  return(result);
 800840e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008410:	2b00      	cmp	r3, #0
 8008412:	d028      	beq.n	8008466 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008414:	69bb      	ldr	r3, [r7, #24]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d005      	beq.n	8008426 <osMessageQueuePut+0x36>
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d002      	beq.n	8008426 <osMessageQueuePut+0x36>
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d003      	beq.n	800842e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8008426:	f06f 0303 	mvn.w	r3, #3
 800842a:	61fb      	str	r3, [r7, #28]
 800842c:	e038      	b.n	80084a0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800842e:	2300      	movs	r3, #0
 8008430:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008432:	f107 0210 	add.w	r2, r7, #16
 8008436:	2300      	movs	r3, #0
 8008438:	68b9      	ldr	r1, [r7, #8]
 800843a:	69b8      	ldr	r0, [r7, #24]
 800843c:	f000 fbba 	bl	8008bb4 <xQueueGenericSendFromISR>
 8008440:	4603      	mov	r3, r0
 8008442:	2b01      	cmp	r3, #1
 8008444:	d003      	beq.n	800844e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8008446:	f06f 0302 	mvn.w	r3, #2
 800844a:	61fb      	str	r3, [r7, #28]
 800844c:	e028      	b.n	80084a0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d025      	beq.n	80084a0 <osMessageQueuePut+0xb0>
 8008454:	4b15      	ldr	r3, [pc, #84]	; (80084ac <osMessageQueuePut+0xbc>)
 8008456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800845a:	601a      	str	r2, [r3, #0]
 800845c:	f3bf 8f4f 	dsb	sy
 8008460:	f3bf 8f6f 	isb	sy
 8008464:	e01c      	b.n	80084a0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008466:	69bb      	ldr	r3, [r7, #24]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d002      	beq.n	8008472 <osMessageQueuePut+0x82>
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d103      	bne.n	800847a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8008472:	f06f 0303 	mvn.w	r3, #3
 8008476:	61fb      	str	r3, [r7, #28]
 8008478:	e012      	b.n	80084a0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800847a:	2300      	movs	r3, #0
 800847c:	683a      	ldr	r2, [r7, #0]
 800847e:	68b9      	ldr	r1, [r7, #8]
 8008480:	69b8      	ldr	r0, [r7, #24]
 8008482:	f000 fa99 	bl	80089b8 <xQueueGenericSend>
 8008486:	4603      	mov	r3, r0
 8008488:	2b01      	cmp	r3, #1
 800848a:	d009      	beq.n	80084a0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d003      	beq.n	800849a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8008492:	f06f 0301 	mvn.w	r3, #1
 8008496:	61fb      	str	r3, [r7, #28]
 8008498:	e002      	b.n	80084a0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800849a:	f06f 0302 	mvn.w	r3, #2
 800849e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80084a0:	69fb      	ldr	r3, [r7, #28]
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3720      	adds	r7, #32
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	e000ed04 	.word	0xe000ed04

080084b0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b088      	sub	sp, #32
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	60f8      	str	r0, [r7, #12]
 80084b8:	60b9      	str	r1, [r7, #8]
 80084ba:	607a      	str	r2, [r7, #4]
 80084bc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80084c2:	2300      	movs	r3, #0
 80084c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084c6:	f3ef 8305 	mrs	r3, IPSR
 80084ca:	617b      	str	r3, [r7, #20]
  return(result);
 80084cc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d028      	beq.n	8008524 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80084d2:	69bb      	ldr	r3, [r7, #24]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d005      	beq.n	80084e4 <osMessageQueueGet+0x34>
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d002      	beq.n	80084e4 <osMessageQueueGet+0x34>
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d003      	beq.n	80084ec <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80084e4:	f06f 0303 	mvn.w	r3, #3
 80084e8:	61fb      	str	r3, [r7, #28]
 80084ea:	e037      	b.n	800855c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80084ec:	2300      	movs	r3, #0
 80084ee:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80084f0:	f107 0310 	add.w	r3, r7, #16
 80084f4:	461a      	mov	r2, r3
 80084f6:	68b9      	ldr	r1, [r7, #8]
 80084f8:	69b8      	ldr	r0, [r7, #24]
 80084fa:	f000 fcd7 	bl	8008eac <xQueueReceiveFromISR>
 80084fe:	4603      	mov	r3, r0
 8008500:	2b01      	cmp	r3, #1
 8008502:	d003      	beq.n	800850c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008504:	f06f 0302 	mvn.w	r3, #2
 8008508:	61fb      	str	r3, [r7, #28]
 800850a:	e027      	b.n	800855c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d024      	beq.n	800855c <osMessageQueueGet+0xac>
 8008512:	4b15      	ldr	r3, [pc, #84]	; (8008568 <osMessageQueueGet+0xb8>)
 8008514:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008518:	601a      	str	r2, [r3, #0]
 800851a:	f3bf 8f4f 	dsb	sy
 800851e:	f3bf 8f6f 	isb	sy
 8008522:	e01b      	b.n	800855c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008524:	69bb      	ldr	r3, [r7, #24]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d002      	beq.n	8008530 <osMessageQueueGet+0x80>
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d103      	bne.n	8008538 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008530:	f06f 0303 	mvn.w	r3, #3
 8008534:	61fb      	str	r3, [r7, #28]
 8008536:	e011      	b.n	800855c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008538:	683a      	ldr	r2, [r7, #0]
 800853a:	68b9      	ldr	r1, [r7, #8]
 800853c:	69b8      	ldr	r0, [r7, #24]
 800853e:	f000 fbd5 	bl	8008cec <xQueueReceive>
 8008542:	4603      	mov	r3, r0
 8008544:	2b01      	cmp	r3, #1
 8008546:	d009      	beq.n	800855c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d003      	beq.n	8008556 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800854e:	f06f 0301 	mvn.w	r3, #1
 8008552:	61fb      	str	r3, [r7, #28]
 8008554:	e002      	b.n	800855c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008556:	f06f 0302 	mvn.w	r3, #2
 800855a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800855c:	69fb      	ldr	r3, [r7, #28]
}
 800855e:	4618      	mov	r0, r3
 8008560:	3720      	adds	r7, #32
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
 8008566:	bf00      	nop
 8008568:	e000ed04 	.word	0xe000ed04

0800856c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800856c:	b480      	push	{r7}
 800856e:	b085      	sub	sp, #20
 8008570:	af00      	add	r7, sp, #0
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	60b9      	str	r1, [r7, #8]
 8008576:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	4a07      	ldr	r2, [pc, #28]	; (8008598 <vApplicationGetIdleTaskMemory+0x2c>)
 800857c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	4a06      	ldr	r2, [pc, #24]	; (800859c <vApplicationGetIdleTaskMemory+0x30>)
 8008582:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2280      	movs	r2, #128	; 0x80
 8008588:	601a      	str	r2, [r3, #0]
}
 800858a:	bf00      	nop
 800858c:	3714      	adds	r7, #20
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr
 8008596:	bf00      	nop
 8008598:	20000214 	.word	0x20000214
 800859c:	20000270 	.word	0x20000270

080085a0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80085a0:	b480      	push	{r7}
 80085a2:	b085      	sub	sp, #20
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	60f8      	str	r0, [r7, #12]
 80085a8:	60b9      	str	r1, [r7, #8]
 80085aa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	4a07      	ldr	r2, [pc, #28]	; (80085cc <vApplicationGetTimerTaskMemory+0x2c>)
 80085b0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	4a06      	ldr	r2, [pc, #24]	; (80085d0 <vApplicationGetTimerTaskMemory+0x30>)
 80085b6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80085be:	601a      	str	r2, [r3, #0]
}
 80085c0:	bf00      	nop
 80085c2:	3714      	adds	r7, #20
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr
 80085cc:	20000470 	.word	0x20000470
 80085d0:	200004cc 	.word	0x200004cc

080085d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80085d4:	b480      	push	{r7}
 80085d6:	b083      	sub	sp, #12
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f103 0208 	add.w	r2, r3, #8
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f04f 32ff 	mov.w	r2, #4294967295
 80085ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f103 0208 	add.w	r2, r3, #8
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f103 0208 	add.w	r2, r3, #8
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2200      	movs	r2, #0
 8008606:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008608:	bf00      	nop
 800860a:	370c      	adds	r7, #12
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr

08008614 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008614:	b480      	push	{r7}
 8008616:	b083      	sub	sp, #12
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2200      	movs	r2, #0
 8008620:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008622:	bf00      	nop
 8008624:	370c      	adds	r7, #12
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr

0800862e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800862e:	b480      	push	{r7}
 8008630:	b085      	sub	sp, #20
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
 8008636:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	68fa      	ldr	r2, [r7, #12]
 8008642:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	689a      	ldr	r2, [r3, #8]
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	683a      	ldr	r2, [r7, #0]
 8008652:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	683a      	ldr	r2, [r7, #0]
 8008658:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	687a      	ldr	r2, [r7, #4]
 800865e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	1c5a      	adds	r2, r3, #1
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	601a      	str	r2, [r3, #0]
}
 800866a:	bf00      	nop
 800866c:	3714      	adds	r7, #20
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr

08008676 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008676:	b480      	push	{r7}
 8008678:	b085      	sub	sp, #20
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
 800867e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800868c:	d103      	bne.n	8008696 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	691b      	ldr	r3, [r3, #16]
 8008692:	60fb      	str	r3, [r7, #12]
 8008694:	e00c      	b.n	80086b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	3308      	adds	r3, #8
 800869a:	60fb      	str	r3, [r7, #12]
 800869c:	e002      	b.n	80086a4 <vListInsert+0x2e>
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	60fb      	str	r3, [r7, #12]
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	68ba      	ldr	r2, [r7, #8]
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d2f6      	bcs.n	800869e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	685a      	ldr	r2, [r3, #4]
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	683a      	ldr	r2, [r7, #0]
 80086be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	68fa      	ldr	r2, [r7, #12]
 80086c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	683a      	ldr	r2, [r7, #0]
 80086ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	1c5a      	adds	r2, r3, #1
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	601a      	str	r2, [r3, #0]
}
 80086dc:	bf00      	nop
 80086de:	3714      	adds	r7, #20
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr

080086e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80086e8:	b480      	push	{r7}
 80086ea:	b085      	sub	sp, #20
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	691b      	ldr	r3, [r3, #16]
 80086f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	687a      	ldr	r2, [r7, #4]
 80086fc:	6892      	ldr	r2, [r2, #8]
 80086fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	689b      	ldr	r3, [r3, #8]
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	6852      	ldr	r2, [r2, #4]
 8008708:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	687a      	ldr	r2, [r7, #4]
 8008710:	429a      	cmp	r2, r3
 8008712:	d103      	bne.n	800871c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	689a      	ldr	r2, [r3, #8]
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2200      	movs	r2, #0
 8008720:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	1e5a      	subs	r2, r3, #1
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
}
 8008730:	4618      	mov	r0, r3
 8008732:	3714      	adds	r7, #20
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr

0800873c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d10a      	bne.n	8008766 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008754:	f383 8811 	msr	BASEPRI, r3
 8008758:	f3bf 8f6f 	isb	sy
 800875c:	f3bf 8f4f 	dsb	sy
 8008760:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008762:	bf00      	nop
 8008764:	e7fe      	b.n	8008764 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008766:	f002 f905 	bl	800a974 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008772:	68f9      	ldr	r1, [r7, #12]
 8008774:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008776:	fb01 f303 	mul.w	r3, r1, r3
 800877a:	441a      	add	r2, r3
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2200      	movs	r2, #0
 8008784:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681a      	ldr	r2, [r3, #0]
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008796:	3b01      	subs	r3, #1
 8008798:	68f9      	ldr	r1, [r7, #12]
 800879a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800879c:	fb01 f303 	mul.w	r3, r1, r3
 80087a0:	441a      	add	r2, r3
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	22ff      	movs	r2, #255	; 0xff
 80087aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	22ff      	movs	r2, #255	; 0xff
 80087b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d114      	bne.n	80087e6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	691b      	ldr	r3, [r3, #16]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d01a      	beq.n	80087fa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	3310      	adds	r3, #16
 80087c8:	4618      	mov	r0, r3
 80087ca:	f001 f9bd 	bl	8009b48 <xTaskRemoveFromEventList>
 80087ce:	4603      	mov	r3, r0
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d012      	beq.n	80087fa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80087d4:	4b0c      	ldr	r3, [pc, #48]	; (8008808 <xQueueGenericReset+0xcc>)
 80087d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087da:	601a      	str	r2, [r3, #0]
 80087dc:	f3bf 8f4f 	dsb	sy
 80087e0:	f3bf 8f6f 	isb	sy
 80087e4:	e009      	b.n	80087fa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	3310      	adds	r3, #16
 80087ea:	4618      	mov	r0, r3
 80087ec:	f7ff fef2 	bl	80085d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	3324      	adds	r3, #36	; 0x24
 80087f4:	4618      	mov	r0, r3
 80087f6:	f7ff feed 	bl	80085d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80087fa:	f002 f8eb 	bl	800a9d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80087fe:	2301      	movs	r3, #1
}
 8008800:	4618      	mov	r0, r3
 8008802:	3710      	adds	r7, #16
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}
 8008808:	e000ed04 	.word	0xe000ed04

0800880c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800880c:	b580      	push	{r7, lr}
 800880e:	b08e      	sub	sp, #56	; 0x38
 8008810:	af02      	add	r7, sp, #8
 8008812:	60f8      	str	r0, [r7, #12]
 8008814:	60b9      	str	r1, [r7, #8]
 8008816:	607a      	str	r2, [r7, #4]
 8008818:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d10a      	bne.n	8008836 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008824:	f383 8811 	msr	BASEPRI, r3
 8008828:	f3bf 8f6f 	isb	sy
 800882c:	f3bf 8f4f 	dsb	sy
 8008830:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008832:	bf00      	nop
 8008834:	e7fe      	b.n	8008834 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d10a      	bne.n	8008852 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800883c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008840:	f383 8811 	msr	BASEPRI, r3
 8008844:	f3bf 8f6f 	isb	sy
 8008848:	f3bf 8f4f 	dsb	sy
 800884c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800884e:	bf00      	nop
 8008850:	e7fe      	b.n	8008850 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d002      	beq.n	800885e <xQueueGenericCreateStatic+0x52>
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d001      	beq.n	8008862 <xQueueGenericCreateStatic+0x56>
 800885e:	2301      	movs	r3, #1
 8008860:	e000      	b.n	8008864 <xQueueGenericCreateStatic+0x58>
 8008862:	2300      	movs	r3, #0
 8008864:	2b00      	cmp	r3, #0
 8008866:	d10a      	bne.n	800887e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800886c:	f383 8811 	msr	BASEPRI, r3
 8008870:	f3bf 8f6f 	isb	sy
 8008874:	f3bf 8f4f 	dsb	sy
 8008878:	623b      	str	r3, [r7, #32]
}
 800887a:	bf00      	nop
 800887c:	e7fe      	b.n	800887c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d102      	bne.n	800888a <xQueueGenericCreateStatic+0x7e>
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d101      	bne.n	800888e <xQueueGenericCreateStatic+0x82>
 800888a:	2301      	movs	r3, #1
 800888c:	e000      	b.n	8008890 <xQueueGenericCreateStatic+0x84>
 800888e:	2300      	movs	r3, #0
 8008890:	2b00      	cmp	r3, #0
 8008892:	d10a      	bne.n	80088aa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008898:	f383 8811 	msr	BASEPRI, r3
 800889c:	f3bf 8f6f 	isb	sy
 80088a0:	f3bf 8f4f 	dsb	sy
 80088a4:	61fb      	str	r3, [r7, #28]
}
 80088a6:	bf00      	nop
 80088a8:	e7fe      	b.n	80088a8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80088aa:	2350      	movs	r3, #80	; 0x50
 80088ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	2b50      	cmp	r3, #80	; 0x50
 80088b2:	d00a      	beq.n	80088ca <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80088b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b8:	f383 8811 	msr	BASEPRI, r3
 80088bc:	f3bf 8f6f 	isb	sy
 80088c0:	f3bf 8f4f 	dsb	sy
 80088c4:	61bb      	str	r3, [r7, #24]
}
 80088c6:	bf00      	nop
 80088c8:	e7fe      	b.n	80088c8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80088ca:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80088d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d00d      	beq.n	80088f2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80088d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d8:	2201      	movs	r2, #1
 80088da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80088de:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80088e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e4:	9300      	str	r3, [sp, #0]
 80088e6:	4613      	mov	r3, r2
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	68b9      	ldr	r1, [r7, #8]
 80088ec:	68f8      	ldr	r0, [r7, #12]
 80088ee:	f000 f83f 	bl	8008970 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80088f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3730      	adds	r7, #48	; 0x30
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b08a      	sub	sp, #40	; 0x28
 8008900:	af02      	add	r7, sp, #8
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	60b9      	str	r1, [r7, #8]
 8008906:	4613      	mov	r3, r2
 8008908:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d10a      	bne.n	8008926 <xQueueGenericCreate+0x2a>
	__asm volatile
 8008910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008914:	f383 8811 	msr	BASEPRI, r3
 8008918:	f3bf 8f6f 	isb	sy
 800891c:	f3bf 8f4f 	dsb	sy
 8008920:	613b      	str	r3, [r7, #16]
}
 8008922:	bf00      	nop
 8008924:	e7fe      	b.n	8008924 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	68ba      	ldr	r2, [r7, #8]
 800892a:	fb02 f303 	mul.w	r3, r2, r3
 800892e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008930:	69fb      	ldr	r3, [r7, #28]
 8008932:	3350      	adds	r3, #80	; 0x50
 8008934:	4618      	mov	r0, r3
 8008936:	f002 f93f 	bl	800abb8 <pvPortMalloc>
 800893a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800893c:	69bb      	ldr	r3, [r7, #24]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d011      	beq.n	8008966 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008942:	69bb      	ldr	r3, [r7, #24]
 8008944:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	3350      	adds	r3, #80	; 0x50
 800894a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800894c:	69bb      	ldr	r3, [r7, #24]
 800894e:	2200      	movs	r2, #0
 8008950:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008954:	79fa      	ldrb	r2, [r7, #7]
 8008956:	69bb      	ldr	r3, [r7, #24]
 8008958:	9300      	str	r3, [sp, #0]
 800895a:	4613      	mov	r3, r2
 800895c:	697a      	ldr	r2, [r7, #20]
 800895e:	68b9      	ldr	r1, [r7, #8]
 8008960:	68f8      	ldr	r0, [r7, #12]
 8008962:	f000 f805 	bl	8008970 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008966:	69bb      	ldr	r3, [r7, #24]
	}
 8008968:	4618      	mov	r0, r3
 800896a:	3720      	adds	r7, #32
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b084      	sub	sp, #16
 8008974:	af00      	add	r7, sp, #0
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	60b9      	str	r1, [r7, #8]
 800897a:	607a      	str	r2, [r7, #4]
 800897c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d103      	bne.n	800898c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008984:	69bb      	ldr	r3, [r7, #24]
 8008986:	69ba      	ldr	r2, [r7, #24]
 8008988:	601a      	str	r2, [r3, #0]
 800898a:	e002      	b.n	8008992 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800898c:	69bb      	ldr	r3, [r7, #24]
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008992:	69bb      	ldr	r3, [r7, #24]
 8008994:	68fa      	ldr	r2, [r7, #12]
 8008996:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008998:	69bb      	ldr	r3, [r7, #24]
 800899a:	68ba      	ldr	r2, [r7, #8]
 800899c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800899e:	2101      	movs	r1, #1
 80089a0:	69b8      	ldr	r0, [r7, #24]
 80089a2:	f7ff fecb 	bl	800873c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80089a6:	69bb      	ldr	r3, [r7, #24]
 80089a8:	78fa      	ldrb	r2, [r7, #3]
 80089aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80089ae:	bf00      	nop
 80089b0:	3710      	adds	r7, #16
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
	...

080089b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b08e      	sub	sp, #56	; 0x38
 80089bc:	af00      	add	r7, sp, #0
 80089be:	60f8      	str	r0, [r7, #12]
 80089c0:	60b9      	str	r1, [r7, #8]
 80089c2:	607a      	str	r2, [r7, #4]
 80089c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80089c6:	2300      	movs	r3, #0
 80089c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80089ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d10a      	bne.n	80089ea <xQueueGenericSend+0x32>
	__asm volatile
 80089d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d8:	f383 8811 	msr	BASEPRI, r3
 80089dc:	f3bf 8f6f 	isb	sy
 80089e0:	f3bf 8f4f 	dsb	sy
 80089e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80089e6:	bf00      	nop
 80089e8:	e7fe      	b.n	80089e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d103      	bne.n	80089f8 <xQueueGenericSend+0x40>
 80089f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d101      	bne.n	80089fc <xQueueGenericSend+0x44>
 80089f8:	2301      	movs	r3, #1
 80089fa:	e000      	b.n	80089fe <xQueueGenericSend+0x46>
 80089fc:	2300      	movs	r3, #0
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d10a      	bne.n	8008a18 <xQueueGenericSend+0x60>
	__asm volatile
 8008a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a06:	f383 8811 	msr	BASEPRI, r3
 8008a0a:	f3bf 8f6f 	isb	sy
 8008a0e:	f3bf 8f4f 	dsb	sy
 8008a12:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008a14:	bf00      	nop
 8008a16:	e7fe      	b.n	8008a16 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	2b02      	cmp	r3, #2
 8008a1c:	d103      	bne.n	8008a26 <xQueueGenericSend+0x6e>
 8008a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	d101      	bne.n	8008a2a <xQueueGenericSend+0x72>
 8008a26:	2301      	movs	r3, #1
 8008a28:	e000      	b.n	8008a2c <xQueueGenericSend+0x74>
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d10a      	bne.n	8008a46 <xQueueGenericSend+0x8e>
	__asm volatile
 8008a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a34:	f383 8811 	msr	BASEPRI, r3
 8008a38:	f3bf 8f6f 	isb	sy
 8008a3c:	f3bf 8f4f 	dsb	sy
 8008a40:	623b      	str	r3, [r7, #32]
}
 8008a42:	bf00      	nop
 8008a44:	e7fe      	b.n	8008a44 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a46:	f001 fa3d 	bl	8009ec4 <xTaskGetSchedulerState>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d102      	bne.n	8008a56 <xQueueGenericSend+0x9e>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d101      	bne.n	8008a5a <xQueueGenericSend+0xa2>
 8008a56:	2301      	movs	r3, #1
 8008a58:	e000      	b.n	8008a5c <xQueueGenericSend+0xa4>
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d10a      	bne.n	8008a76 <xQueueGenericSend+0xbe>
	__asm volatile
 8008a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a64:	f383 8811 	msr	BASEPRI, r3
 8008a68:	f3bf 8f6f 	isb	sy
 8008a6c:	f3bf 8f4f 	dsb	sy
 8008a70:	61fb      	str	r3, [r7, #28]
}
 8008a72:	bf00      	nop
 8008a74:	e7fe      	b.n	8008a74 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008a76:	f001 ff7d 	bl	800a974 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d302      	bcc.n	8008a8c <xQueueGenericSend+0xd4>
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	2b02      	cmp	r3, #2
 8008a8a:	d129      	bne.n	8008ae0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a8c:	683a      	ldr	r2, [r7, #0]
 8008a8e:	68b9      	ldr	r1, [r7, #8]
 8008a90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a92:	f000 fa8b 	bl	8008fac <prvCopyDataToQueue>
 8008a96:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d010      	beq.n	8008ac2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa2:	3324      	adds	r3, #36	; 0x24
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f001 f84f 	bl	8009b48 <xTaskRemoveFromEventList>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d013      	beq.n	8008ad8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008ab0:	4b3f      	ldr	r3, [pc, #252]	; (8008bb0 <xQueueGenericSend+0x1f8>)
 8008ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ab6:	601a      	str	r2, [r3, #0]
 8008ab8:	f3bf 8f4f 	dsb	sy
 8008abc:	f3bf 8f6f 	isb	sy
 8008ac0:	e00a      	b.n	8008ad8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d007      	beq.n	8008ad8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008ac8:	4b39      	ldr	r3, [pc, #228]	; (8008bb0 <xQueueGenericSend+0x1f8>)
 8008aca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ace:	601a      	str	r2, [r3, #0]
 8008ad0:	f3bf 8f4f 	dsb	sy
 8008ad4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008ad8:	f001 ff7c 	bl	800a9d4 <vPortExitCritical>
				return pdPASS;
 8008adc:	2301      	movs	r3, #1
 8008ade:	e063      	b.n	8008ba8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d103      	bne.n	8008aee <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008ae6:	f001 ff75 	bl	800a9d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008aea:	2300      	movs	r3, #0
 8008aec:	e05c      	b.n	8008ba8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d106      	bne.n	8008b02 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008af4:	f107 0314 	add.w	r3, r7, #20
 8008af8:	4618      	mov	r0, r3
 8008afa:	f001 f889 	bl	8009c10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008afe:	2301      	movs	r3, #1
 8008b00:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b02:	f001 ff67 	bl	800a9d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b06:	f000 fdfb 	bl	8009700 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b0a:	f001 ff33 	bl	800a974 <vPortEnterCritical>
 8008b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b14:	b25b      	sxtb	r3, r3
 8008b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b1a:	d103      	bne.n	8008b24 <xQueueGenericSend+0x16c>
 8008b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b1e:	2200      	movs	r2, #0
 8008b20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b2a:	b25b      	sxtb	r3, r3
 8008b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b30:	d103      	bne.n	8008b3a <xQueueGenericSend+0x182>
 8008b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b34:	2200      	movs	r2, #0
 8008b36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b3a:	f001 ff4b 	bl	800a9d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b3e:	1d3a      	adds	r2, r7, #4
 8008b40:	f107 0314 	add.w	r3, r7, #20
 8008b44:	4611      	mov	r1, r2
 8008b46:	4618      	mov	r0, r3
 8008b48:	f001 f878 	bl	8009c3c <xTaskCheckForTimeOut>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d124      	bne.n	8008b9c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008b52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b54:	f000 fb22 	bl	800919c <prvIsQueueFull>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d018      	beq.n	8008b90 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b60:	3310      	adds	r3, #16
 8008b62:	687a      	ldr	r2, [r7, #4]
 8008b64:	4611      	mov	r1, r2
 8008b66:	4618      	mov	r0, r3
 8008b68:	f000 ff9e 	bl	8009aa8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008b6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b6e:	f000 faad 	bl	80090cc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008b72:	f000 fdd3 	bl	800971c <xTaskResumeAll>
 8008b76:	4603      	mov	r3, r0
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	f47f af7c 	bne.w	8008a76 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008b7e:	4b0c      	ldr	r3, [pc, #48]	; (8008bb0 <xQueueGenericSend+0x1f8>)
 8008b80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b84:	601a      	str	r2, [r3, #0]
 8008b86:	f3bf 8f4f 	dsb	sy
 8008b8a:	f3bf 8f6f 	isb	sy
 8008b8e:	e772      	b.n	8008a76 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008b90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b92:	f000 fa9b 	bl	80090cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b96:	f000 fdc1 	bl	800971c <xTaskResumeAll>
 8008b9a:	e76c      	b.n	8008a76 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008b9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b9e:	f000 fa95 	bl	80090cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008ba2:	f000 fdbb 	bl	800971c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008ba6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3738      	adds	r7, #56	; 0x38
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}
 8008bb0:	e000ed04 	.word	0xe000ed04

08008bb4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b090      	sub	sp, #64	; 0x40
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	60b9      	str	r1, [r7, #8]
 8008bbe:	607a      	str	r2, [r7, #4]
 8008bc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d10a      	bne.n	8008be2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd0:	f383 8811 	msr	BASEPRI, r3
 8008bd4:	f3bf 8f6f 	isb	sy
 8008bd8:	f3bf 8f4f 	dsb	sy
 8008bdc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008bde:	bf00      	nop
 8008be0:	e7fe      	b.n	8008be0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d103      	bne.n	8008bf0 <xQueueGenericSendFromISR+0x3c>
 8008be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d101      	bne.n	8008bf4 <xQueueGenericSendFromISR+0x40>
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	e000      	b.n	8008bf6 <xQueueGenericSendFromISR+0x42>
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d10a      	bne.n	8008c10 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bfe:	f383 8811 	msr	BASEPRI, r3
 8008c02:	f3bf 8f6f 	isb	sy
 8008c06:	f3bf 8f4f 	dsb	sy
 8008c0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008c0c:	bf00      	nop
 8008c0e:	e7fe      	b.n	8008c0e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	2b02      	cmp	r3, #2
 8008c14:	d103      	bne.n	8008c1e <xQueueGenericSendFromISR+0x6a>
 8008c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	d101      	bne.n	8008c22 <xQueueGenericSendFromISR+0x6e>
 8008c1e:	2301      	movs	r3, #1
 8008c20:	e000      	b.n	8008c24 <xQueueGenericSendFromISR+0x70>
 8008c22:	2300      	movs	r3, #0
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d10a      	bne.n	8008c3e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c2c:	f383 8811 	msr	BASEPRI, r3
 8008c30:	f3bf 8f6f 	isb	sy
 8008c34:	f3bf 8f4f 	dsb	sy
 8008c38:	623b      	str	r3, [r7, #32]
}
 8008c3a:	bf00      	nop
 8008c3c:	e7fe      	b.n	8008c3c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008c3e:	f001 ff7b 	bl	800ab38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008c42:	f3ef 8211 	mrs	r2, BASEPRI
 8008c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c4a:	f383 8811 	msr	BASEPRI, r3
 8008c4e:	f3bf 8f6f 	isb	sy
 8008c52:	f3bf 8f4f 	dsb	sy
 8008c56:	61fa      	str	r2, [r7, #28]
 8008c58:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008c5a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008c5c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d302      	bcc.n	8008c70 <xQueueGenericSendFromISR+0xbc>
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	2b02      	cmp	r3, #2
 8008c6e:	d12f      	bne.n	8008cd0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c80:	683a      	ldr	r2, [r7, #0]
 8008c82:	68b9      	ldr	r1, [r7, #8]
 8008c84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008c86:	f000 f991 	bl	8008fac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008c8a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c92:	d112      	bne.n	8008cba <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d016      	beq.n	8008cca <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c9e:	3324      	adds	r3, #36	; 0x24
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f000 ff51 	bl	8009b48 <xTaskRemoveFromEventList>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d00e      	beq.n	8008cca <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d00b      	beq.n	8008cca <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	601a      	str	r2, [r3, #0]
 8008cb8:	e007      	b.n	8008cca <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008cba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	b2db      	uxtb	r3, r3
 8008cc2:	b25a      	sxtb	r2, r3
 8008cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008cca:	2301      	movs	r3, #1
 8008ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008cce:	e001      	b.n	8008cd4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cd6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008cde:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3740      	adds	r7, #64	; 0x40
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
	...

08008cec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b08c      	sub	sp, #48	; 0x30
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	60f8      	str	r0, [r7, #12]
 8008cf4:	60b9      	str	r1, [r7, #8]
 8008cf6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d10a      	bne.n	8008d1c <xQueueReceive+0x30>
	__asm volatile
 8008d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d0a:	f383 8811 	msr	BASEPRI, r3
 8008d0e:	f3bf 8f6f 	isb	sy
 8008d12:	f3bf 8f4f 	dsb	sy
 8008d16:	623b      	str	r3, [r7, #32]
}
 8008d18:	bf00      	nop
 8008d1a:	e7fe      	b.n	8008d1a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d103      	bne.n	8008d2a <xQueueReceive+0x3e>
 8008d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d101      	bne.n	8008d2e <xQueueReceive+0x42>
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e000      	b.n	8008d30 <xQueueReceive+0x44>
 8008d2e:	2300      	movs	r3, #0
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d10a      	bne.n	8008d4a <xQueueReceive+0x5e>
	__asm volatile
 8008d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d38:	f383 8811 	msr	BASEPRI, r3
 8008d3c:	f3bf 8f6f 	isb	sy
 8008d40:	f3bf 8f4f 	dsb	sy
 8008d44:	61fb      	str	r3, [r7, #28]
}
 8008d46:	bf00      	nop
 8008d48:	e7fe      	b.n	8008d48 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d4a:	f001 f8bb 	bl	8009ec4 <xTaskGetSchedulerState>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d102      	bne.n	8008d5a <xQueueReceive+0x6e>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d101      	bne.n	8008d5e <xQueueReceive+0x72>
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	e000      	b.n	8008d60 <xQueueReceive+0x74>
 8008d5e:	2300      	movs	r3, #0
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d10a      	bne.n	8008d7a <xQueueReceive+0x8e>
	__asm volatile
 8008d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d68:	f383 8811 	msr	BASEPRI, r3
 8008d6c:	f3bf 8f6f 	isb	sy
 8008d70:	f3bf 8f4f 	dsb	sy
 8008d74:	61bb      	str	r3, [r7, #24]
}
 8008d76:	bf00      	nop
 8008d78:	e7fe      	b.n	8008d78 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d7a:	f001 fdfb 	bl	800a974 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d82:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d01f      	beq.n	8008dca <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008d8a:	68b9      	ldr	r1, [r7, #8]
 8008d8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d8e:	f000 f977 	bl	8009080 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d94:	1e5a      	subs	r2, r3, #1
 8008d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d98:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d9c:	691b      	ldr	r3, [r3, #16]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d00f      	beq.n	8008dc2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da4:	3310      	adds	r3, #16
 8008da6:	4618      	mov	r0, r3
 8008da8:	f000 fece 	bl	8009b48 <xTaskRemoveFromEventList>
 8008dac:	4603      	mov	r3, r0
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d007      	beq.n	8008dc2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008db2:	4b3d      	ldr	r3, [pc, #244]	; (8008ea8 <xQueueReceive+0x1bc>)
 8008db4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008db8:	601a      	str	r2, [r3, #0]
 8008dba:	f3bf 8f4f 	dsb	sy
 8008dbe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008dc2:	f001 fe07 	bl	800a9d4 <vPortExitCritical>
				return pdPASS;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	e069      	b.n	8008e9e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d103      	bne.n	8008dd8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008dd0:	f001 fe00 	bl	800a9d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	e062      	b.n	8008e9e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d106      	bne.n	8008dec <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008dde:	f107 0310 	add.w	r3, r7, #16
 8008de2:	4618      	mov	r0, r3
 8008de4:	f000 ff14 	bl	8009c10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008de8:	2301      	movs	r3, #1
 8008dea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008dec:	f001 fdf2 	bl	800a9d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008df0:	f000 fc86 	bl	8009700 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008df4:	f001 fdbe 	bl	800a974 <vPortEnterCritical>
 8008df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008dfe:	b25b      	sxtb	r3, r3
 8008e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e04:	d103      	bne.n	8008e0e <xQueueReceive+0x122>
 8008e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e08:	2200      	movs	r2, #0
 8008e0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e14:	b25b      	sxtb	r3, r3
 8008e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e1a:	d103      	bne.n	8008e24 <xQueueReceive+0x138>
 8008e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e1e:	2200      	movs	r2, #0
 8008e20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e24:	f001 fdd6 	bl	800a9d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e28:	1d3a      	adds	r2, r7, #4
 8008e2a:	f107 0310 	add.w	r3, r7, #16
 8008e2e:	4611      	mov	r1, r2
 8008e30:	4618      	mov	r0, r3
 8008e32:	f000 ff03 	bl	8009c3c <xTaskCheckForTimeOut>
 8008e36:	4603      	mov	r3, r0
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d123      	bne.n	8008e84 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e3e:	f000 f997 	bl	8009170 <prvIsQueueEmpty>
 8008e42:	4603      	mov	r3, r0
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d017      	beq.n	8008e78 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e4a:	3324      	adds	r3, #36	; 0x24
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	4611      	mov	r1, r2
 8008e50:	4618      	mov	r0, r3
 8008e52:	f000 fe29 	bl	8009aa8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008e56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e58:	f000 f938 	bl	80090cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008e5c:	f000 fc5e 	bl	800971c <xTaskResumeAll>
 8008e60:	4603      	mov	r3, r0
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d189      	bne.n	8008d7a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008e66:	4b10      	ldr	r3, [pc, #64]	; (8008ea8 <xQueueReceive+0x1bc>)
 8008e68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e6c:	601a      	str	r2, [r3, #0]
 8008e6e:	f3bf 8f4f 	dsb	sy
 8008e72:	f3bf 8f6f 	isb	sy
 8008e76:	e780      	b.n	8008d7a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008e78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e7a:	f000 f927 	bl	80090cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e7e:	f000 fc4d 	bl	800971c <xTaskResumeAll>
 8008e82:	e77a      	b.n	8008d7a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008e84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e86:	f000 f921 	bl	80090cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e8a:	f000 fc47 	bl	800971c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e90:	f000 f96e 	bl	8009170 <prvIsQueueEmpty>
 8008e94:	4603      	mov	r3, r0
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	f43f af6f 	beq.w	8008d7a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008e9c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3730      	adds	r7, #48	; 0x30
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
 8008ea6:	bf00      	nop
 8008ea8:	e000ed04 	.word	0xe000ed04

08008eac <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b08e      	sub	sp, #56	; 0x38
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	60f8      	str	r0, [r7, #12]
 8008eb4:	60b9      	str	r1, [r7, #8]
 8008eb6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d10a      	bne.n	8008ed8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8008ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec6:	f383 8811 	msr	BASEPRI, r3
 8008eca:	f3bf 8f6f 	isb	sy
 8008ece:	f3bf 8f4f 	dsb	sy
 8008ed2:	623b      	str	r3, [r7, #32]
}
 8008ed4:	bf00      	nop
 8008ed6:	e7fe      	b.n	8008ed6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d103      	bne.n	8008ee6 <xQueueReceiveFromISR+0x3a>
 8008ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d101      	bne.n	8008eea <xQueueReceiveFromISR+0x3e>
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	e000      	b.n	8008eec <xQueueReceiveFromISR+0x40>
 8008eea:	2300      	movs	r3, #0
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d10a      	bne.n	8008f06 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef4:	f383 8811 	msr	BASEPRI, r3
 8008ef8:	f3bf 8f6f 	isb	sy
 8008efc:	f3bf 8f4f 	dsb	sy
 8008f00:	61fb      	str	r3, [r7, #28]
}
 8008f02:	bf00      	nop
 8008f04:	e7fe      	b.n	8008f04 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008f06:	f001 fe17 	bl	800ab38 <vPortValidateInterruptPriority>
	__asm volatile
 8008f0a:	f3ef 8211 	mrs	r2, BASEPRI
 8008f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f12:	f383 8811 	msr	BASEPRI, r3
 8008f16:	f3bf 8f6f 	isb	sy
 8008f1a:	f3bf 8f4f 	dsb	sy
 8008f1e:	61ba      	str	r2, [r7, #24]
 8008f20:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008f22:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008f24:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f2a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d02f      	beq.n	8008f92 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008f3c:	68b9      	ldr	r1, [r7, #8]
 8008f3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f40:	f000 f89e 	bl	8009080 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f46:	1e5a      	subs	r2, r3, #1
 8008f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f4a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008f4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f54:	d112      	bne.n	8008f7c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f58:	691b      	ldr	r3, [r3, #16]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d016      	beq.n	8008f8c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f60:	3310      	adds	r3, #16
 8008f62:	4618      	mov	r0, r3
 8008f64:	f000 fdf0 	bl	8009b48 <xTaskRemoveFromEventList>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d00e      	beq.n	8008f8c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d00b      	beq.n	8008f8c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2201      	movs	r2, #1
 8008f78:	601a      	str	r2, [r3, #0]
 8008f7a:	e007      	b.n	8008f8c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008f7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f80:	3301      	adds	r3, #1
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	b25a      	sxtb	r2, r3
 8008f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	637b      	str	r3, [r7, #52]	; 0x34
 8008f90:	e001      	b.n	8008f96 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8008f92:	2300      	movs	r3, #0
 8008f94:	637b      	str	r3, [r7, #52]	; 0x34
 8008f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f98:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	f383 8811 	msr	BASEPRI, r3
}
 8008fa0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3738      	adds	r7, #56	; 0x38
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b086      	sub	sp, #24
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	60f8      	str	r0, [r7, #12]
 8008fb4:	60b9      	str	r1, [r7, #8]
 8008fb6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fc0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d10d      	bne.n	8008fe6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d14d      	bne.n	800906e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	689b      	ldr	r3, [r3, #8]
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f000 ff92 	bl	8009f00 <xTaskPriorityDisinherit>
 8008fdc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	609a      	str	r2, [r3, #8]
 8008fe4:	e043      	b.n	800906e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d119      	bne.n	8009020 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	6858      	ldr	r0, [r3, #4]
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ff4:	461a      	mov	r2, r3
 8008ff6:	68b9      	ldr	r1, [r7, #8]
 8008ff8:	f002 fbca 	bl	800b790 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	685a      	ldr	r2, [r3, #4]
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009004:	441a      	add	r2, r3
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	685a      	ldr	r2, [r3, #4]
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	689b      	ldr	r3, [r3, #8]
 8009012:	429a      	cmp	r2, r3
 8009014:	d32b      	bcc.n	800906e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	605a      	str	r2, [r3, #4]
 800901e:	e026      	b.n	800906e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	68d8      	ldr	r0, [r3, #12]
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009028:	461a      	mov	r2, r3
 800902a:	68b9      	ldr	r1, [r7, #8]
 800902c:	f002 fbb0 	bl	800b790 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	68da      	ldr	r2, [r3, #12]
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009038:	425b      	negs	r3, r3
 800903a:	441a      	add	r2, r3
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	68da      	ldr	r2, [r3, #12]
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	429a      	cmp	r2, r3
 800904a:	d207      	bcs.n	800905c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	689a      	ldr	r2, [r3, #8]
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009054:	425b      	negs	r3, r3
 8009056:	441a      	add	r2, r3
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2b02      	cmp	r3, #2
 8009060:	d105      	bne.n	800906e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d002      	beq.n	800906e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	3b01      	subs	r3, #1
 800906c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	1c5a      	adds	r2, r3, #1
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009076:	697b      	ldr	r3, [r7, #20]
}
 8009078:	4618      	mov	r0, r3
 800907a:	3718      	adds	r7, #24
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800908e:	2b00      	cmp	r3, #0
 8009090:	d018      	beq.n	80090c4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	68da      	ldr	r2, [r3, #12]
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800909a:	441a      	add	r2, r3
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	68da      	ldr	r2, [r3, #12]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d303      	bcc.n	80090b4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681a      	ldr	r2, [r3, #0]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	68d9      	ldr	r1, [r3, #12]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090bc:	461a      	mov	r2, r3
 80090be:	6838      	ldr	r0, [r7, #0]
 80090c0:	f002 fb66 	bl	800b790 <memcpy>
	}
}
 80090c4:	bf00      	nop
 80090c6:	3708      	adds	r7, #8
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b084      	sub	sp, #16
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80090d4:	f001 fc4e 	bl	800a974 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80090de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80090e0:	e011      	b.n	8009106 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d012      	beq.n	8009110 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	3324      	adds	r3, #36	; 0x24
 80090ee:	4618      	mov	r0, r3
 80090f0:	f000 fd2a 	bl	8009b48 <xTaskRemoveFromEventList>
 80090f4:	4603      	mov	r3, r0
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d001      	beq.n	80090fe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80090fa:	f000 fe01 	bl	8009d00 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80090fe:	7bfb      	ldrb	r3, [r7, #15]
 8009100:	3b01      	subs	r3, #1
 8009102:	b2db      	uxtb	r3, r3
 8009104:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800910a:	2b00      	cmp	r3, #0
 800910c:	dce9      	bgt.n	80090e2 <prvUnlockQueue+0x16>
 800910e:	e000      	b.n	8009112 <prvUnlockQueue+0x46>
					break;
 8009110:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	22ff      	movs	r2, #255	; 0xff
 8009116:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800911a:	f001 fc5b 	bl	800a9d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800911e:	f001 fc29 	bl	800a974 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009128:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800912a:	e011      	b.n	8009150 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	691b      	ldr	r3, [r3, #16]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d012      	beq.n	800915a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	3310      	adds	r3, #16
 8009138:	4618      	mov	r0, r3
 800913a:	f000 fd05 	bl	8009b48 <xTaskRemoveFromEventList>
 800913e:	4603      	mov	r3, r0
 8009140:	2b00      	cmp	r3, #0
 8009142:	d001      	beq.n	8009148 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009144:	f000 fddc 	bl	8009d00 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009148:	7bbb      	ldrb	r3, [r7, #14]
 800914a:	3b01      	subs	r3, #1
 800914c:	b2db      	uxtb	r3, r3
 800914e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009150:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009154:	2b00      	cmp	r3, #0
 8009156:	dce9      	bgt.n	800912c <prvUnlockQueue+0x60>
 8009158:	e000      	b.n	800915c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800915a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	22ff      	movs	r2, #255	; 0xff
 8009160:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009164:	f001 fc36 	bl	800a9d4 <vPortExitCritical>
}
 8009168:	bf00      	nop
 800916a:	3710      	adds	r7, #16
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009178:	f001 fbfc 	bl	800a974 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009180:	2b00      	cmp	r3, #0
 8009182:	d102      	bne.n	800918a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009184:	2301      	movs	r3, #1
 8009186:	60fb      	str	r3, [r7, #12]
 8009188:	e001      	b.n	800918e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800918a:	2300      	movs	r3, #0
 800918c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800918e:	f001 fc21 	bl	800a9d4 <vPortExitCritical>

	return xReturn;
 8009192:	68fb      	ldr	r3, [r7, #12]
}
 8009194:	4618      	mov	r0, r3
 8009196:	3710      	adds	r7, #16
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}

0800919c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b084      	sub	sp, #16
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80091a4:	f001 fbe6 	bl	800a974 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091b0:	429a      	cmp	r2, r3
 80091b2:	d102      	bne.n	80091ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80091b4:	2301      	movs	r3, #1
 80091b6:	60fb      	str	r3, [r7, #12]
 80091b8:	e001      	b.n	80091be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80091ba:	2300      	movs	r3, #0
 80091bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80091be:	f001 fc09 	bl	800a9d4 <vPortExitCritical>

	return xReturn;
 80091c2:	68fb      	ldr	r3, [r7, #12]
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3710      	adds	r7, #16
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}

080091cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80091cc:	b480      	push	{r7}
 80091ce:	b085      	sub	sp, #20
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80091d6:	2300      	movs	r3, #0
 80091d8:	60fb      	str	r3, [r7, #12]
 80091da:	e014      	b.n	8009206 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80091dc:	4a0f      	ldr	r2, [pc, #60]	; (800921c <vQueueAddToRegistry+0x50>)
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d10b      	bne.n	8009200 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80091e8:	490c      	ldr	r1, [pc, #48]	; (800921c <vQueueAddToRegistry+0x50>)
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	683a      	ldr	r2, [r7, #0]
 80091ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80091f2:	4a0a      	ldr	r2, [pc, #40]	; (800921c <vQueueAddToRegistry+0x50>)
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	00db      	lsls	r3, r3, #3
 80091f8:	4413      	add	r3, r2
 80091fa:	687a      	ldr	r2, [r7, #4]
 80091fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80091fe:	e006      	b.n	800920e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	3301      	adds	r3, #1
 8009204:	60fb      	str	r3, [r7, #12]
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2b07      	cmp	r3, #7
 800920a:	d9e7      	bls.n	80091dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800920c:	bf00      	nop
 800920e:	bf00      	nop
 8009210:	3714      	adds	r7, #20
 8009212:	46bd      	mov	sp, r7
 8009214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009218:	4770      	bx	lr
 800921a:	bf00      	nop
 800921c:	200008cc 	.word	0x200008cc

08009220 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009220:	b580      	push	{r7, lr}
 8009222:	b086      	sub	sp, #24
 8009224:	af00      	add	r7, sp, #0
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	60b9      	str	r1, [r7, #8]
 800922a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009230:	f001 fba0 	bl	800a974 <vPortEnterCritical>
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800923a:	b25b      	sxtb	r3, r3
 800923c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009240:	d103      	bne.n	800924a <vQueueWaitForMessageRestricted+0x2a>
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	2200      	movs	r2, #0
 8009246:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009250:	b25b      	sxtb	r3, r3
 8009252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009256:	d103      	bne.n	8009260 <vQueueWaitForMessageRestricted+0x40>
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	2200      	movs	r2, #0
 800925c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009260:	f001 fbb8 	bl	800a9d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009268:	2b00      	cmp	r3, #0
 800926a:	d106      	bne.n	800927a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	3324      	adds	r3, #36	; 0x24
 8009270:	687a      	ldr	r2, [r7, #4]
 8009272:	68b9      	ldr	r1, [r7, #8]
 8009274:	4618      	mov	r0, r3
 8009276:	f000 fc3b 	bl	8009af0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800927a:	6978      	ldr	r0, [r7, #20]
 800927c:	f7ff ff26 	bl	80090cc <prvUnlockQueue>
	}
 8009280:	bf00      	nop
 8009282:	3718      	adds	r7, #24
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}

08009288 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009288:	b580      	push	{r7, lr}
 800928a:	b08e      	sub	sp, #56	; 0x38
 800928c:	af04      	add	r7, sp, #16
 800928e:	60f8      	str	r0, [r7, #12]
 8009290:	60b9      	str	r1, [r7, #8]
 8009292:	607a      	str	r2, [r7, #4]
 8009294:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009298:	2b00      	cmp	r3, #0
 800929a:	d10a      	bne.n	80092b2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800929c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a0:	f383 8811 	msr	BASEPRI, r3
 80092a4:	f3bf 8f6f 	isb	sy
 80092a8:	f3bf 8f4f 	dsb	sy
 80092ac:	623b      	str	r3, [r7, #32]
}
 80092ae:	bf00      	nop
 80092b0:	e7fe      	b.n	80092b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80092b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d10a      	bne.n	80092ce <xTaskCreateStatic+0x46>
	__asm volatile
 80092b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092bc:	f383 8811 	msr	BASEPRI, r3
 80092c0:	f3bf 8f6f 	isb	sy
 80092c4:	f3bf 8f4f 	dsb	sy
 80092c8:	61fb      	str	r3, [r7, #28]
}
 80092ca:	bf00      	nop
 80092cc:	e7fe      	b.n	80092cc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80092ce:	235c      	movs	r3, #92	; 0x5c
 80092d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	2b5c      	cmp	r3, #92	; 0x5c
 80092d6:	d00a      	beq.n	80092ee <xTaskCreateStatic+0x66>
	__asm volatile
 80092d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092dc:	f383 8811 	msr	BASEPRI, r3
 80092e0:	f3bf 8f6f 	isb	sy
 80092e4:	f3bf 8f4f 	dsb	sy
 80092e8:	61bb      	str	r3, [r7, #24]
}
 80092ea:	bf00      	nop
 80092ec:	e7fe      	b.n	80092ec <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80092ee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80092f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d01e      	beq.n	8009334 <xTaskCreateStatic+0xac>
 80092f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d01b      	beq.n	8009334 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80092fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092fe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009302:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009304:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009308:	2202      	movs	r2, #2
 800930a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800930e:	2300      	movs	r3, #0
 8009310:	9303      	str	r3, [sp, #12]
 8009312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009314:	9302      	str	r3, [sp, #8]
 8009316:	f107 0314 	add.w	r3, r7, #20
 800931a:	9301      	str	r3, [sp, #4]
 800931c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800931e:	9300      	str	r3, [sp, #0]
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	68b9      	ldr	r1, [r7, #8]
 8009326:	68f8      	ldr	r0, [r7, #12]
 8009328:	f000 f850 	bl	80093cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800932c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800932e:	f000 f8dd 	bl	80094ec <prvAddNewTaskToReadyList>
 8009332:	e001      	b.n	8009338 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009334:	2300      	movs	r3, #0
 8009336:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009338:	697b      	ldr	r3, [r7, #20]
	}
 800933a:	4618      	mov	r0, r3
 800933c:	3728      	adds	r7, #40	; 0x28
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}

08009342 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009342:	b580      	push	{r7, lr}
 8009344:	b08c      	sub	sp, #48	; 0x30
 8009346:	af04      	add	r7, sp, #16
 8009348:	60f8      	str	r0, [r7, #12]
 800934a:	60b9      	str	r1, [r7, #8]
 800934c:	603b      	str	r3, [r7, #0]
 800934e:	4613      	mov	r3, r2
 8009350:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009352:	88fb      	ldrh	r3, [r7, #6]
 8009354:	009b      	lsls	r3, r3, #2
 8009356:	4618      	mov	r0, r3
 8009358:	f001 fc2e 	bl	800abb8 <pvPortMalloc>
 800935c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d00e      	beq.n	8009382 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009364:	205c      	movs	r0, #92	; 0x5c
 8009366:	f001 fc27 	bl	800abb8 <pvPortMalloc>
 800936a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800936c:	69fb      	ldr	r3, [r7, #28]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d003      	beq.n	800937a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009372:	69fb      	ldr	r3, [r7, #28]
 8009374:	697a      	ldr	r2, [r7, #20]
 8009376:	631a      	str	r2, [r3, #48]	; 0x30
 8009378:	e005      	b.n	8009386 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800937a:	6978      	ldr	r0, [r7, #20]
 800937c:	f001 fce8 	bl	800ad50 <vPortFree>
 8009380:	e001      	b.n	8009386 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009382:	2300      	movs	r3, #0
 8009384:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009386:	69fb      	ldr	r3, [r7, #28]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d017      	beq.n	80093bc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800938c:	69fb      	ldr	r3, [r7, #28]
 800938e:	2200      	movs	r2, #0
 8009390:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009394:	88fa      	ldrh	r2, [r7, #6]
 8009396:	2300      	movs	r3, #0
 8009398:	9303      	str	r3, [sp, #12]
 800939a:	69fb      	ldr	r3, [r7, #28]
 800939c:	9302      	str	r3, [sp, #8]
 800939e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093a0:	9301      	str	r3, [sp, #4]
 80093a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a4:	9300      	str	r3, [sp, #0]
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	68b9      	ldr	r1, [r7, #8]
 80093aa:	68f8      	ldr	r0, [r7, #12]
 80093ac:	f000 f80e 	bl	80093cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80093b0:	69f8      	ldr	r0, [r7, #28]
 80093b2:	f000 f89b 	bl	80094ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80093b6:	2301      	movs	r3, #1
 80093b8:	61bb      	str	r3, [r7, #24]
 80093ba:	e002      	b.n	80093c2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80093bc:	f04f 33ff 	mov.w	r3, #4294967295
 80093c0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80093c2:	69bb      	ldr	r3, [r7, #24]
	}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3720      	adds	r7, #32
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b088      	sub	sp, #32
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	60f8      	str	r0, [r7, #12]
 80093d4:	60b9      	str	r1, [r7, #8]
 80093d6:	607a      	str	r2, [r7, #4]
 80093d8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80093da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093dc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	009b      	lsls	r3, r3, #2
 80093e2:	461a      	mov	r2, r3
 80093e4:	21a5      	movs	r1, #165	; 0xa5
 80093e6:	f002 f98f 	bl	800b708 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80093ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80093f4:	3b01      	subs	r3, #1
 80093f6:	009b      	lsls	r3, r3, #2
 80093f8:	4413      	add	r3, r2
 80093fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80093fc:	69bb      	ldr	r3, [r7, #24]
 80093fe:	f023 0307 	bic.w	r3, r3, #7
 8009402:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009404:	69bb      	ldr	r3, [r7, #24]
 8009406:	f003 0307 	and.w	r3, r3, #7
 800940a:	2b00      	cmp	r3, #0
 800940c:	d00a      	beq.n	8009424 <prvInitialiseNewTask+0x58>
	__asm volatile
 800940e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009412:	f383 8811 	msr	BASEPRI, r3
 8009416:	f3bf 8f6f 	isb	sy
 800941a:	f3bf 8f4f 	dsb	sy
 800941e:	617b      	str	r3, [r7, #20]
}
 8009420:	bf00      	nop
 8009422:	e7fe      	b.n	8009422 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d01f      	beq.n	800946a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800942a:	2300      	movs	r3, #0
 800942c:	61fb      	str	r3, [r7, #28]
 800942e:	e012      	b.n	8009456 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009430:	68ba      	ldr	r2, [r7, #8]
 8009432:	69fb      	ldr	r3, [r7, #28]
 8009434:	4413      	add	r3, r2
 8009436:	7819      	ldrb	r1, [r3, #0]
 8009438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800943a:	69fb      	ldr	r3, [r7, #28]
 800943c:	4413      	add	r3, r2
 800943e:	3334      	adds	r3, #52	; 0x34
 8009440:	460a      	mov	r2, r1
 8009442:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009444:	68ba      	ldr	r2, [r7, #8]
 8009446:	69fb      	ldr	r3, [r7, #28]
 8009448:	4413      	add	r3, r2
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d006      	beq.n	800945e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009450:	69fb      	ldr	r3, [r7, #28]
 8009452:	3301      	adds	r3, #1
 8009454:	61fb      	str	r3, [r7, #28]
 8009456:	69fb      	ldr	r3, [r7, #28]
 8009458:	2b0f      	cmp	r3, #15
 800945a:	d9e9      	bls.n	8009430 <prvInitialiseNewTask+0x64>
 800945c:	e000      	b.n	8009460 <prvInitialiseNewTask+0x94>
			{
				break;
 800945e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009462:	2200      	movs	r2, #0
 8009464:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009468:	e003      	b.n	8009472 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800946a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800946c:	2200      	movs	r2, #0
 800946e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009474:	2b37      	cmp	r3, #55	; 0x37
 8009476:	d901      	bls.n	800947c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009478:	2337      	movs	r3, #55	; 0x37
 800947a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800947c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800947e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009480:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009484:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009486:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800948a:	2200      	movs	r2, #0
 800948c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800948e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009490:	3304      	adds	r3, #4
 8009492:	4618      	mov	r0, r3
 8009494:	f7ff f8be 	bl	8008614 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800949a:	3318      	adds	r3, #24
 800949c:	4618      	mov	r0, r3
 800949e:	f7ff f8b9 	bl	8008614 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80094a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094a6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094aa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80094ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80094b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094b6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80094b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ba:	2200      	movs	r2, #0
 80094bc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80094be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c0:	2200      	movs	r2, #0
 80094c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80094c6:	683a      	ldr	r2, [r7, #0]
 80094c8:	68f9      	ldr	r1, [r7, #12]
 80094ca:	69b8      	ldr	r0, [r7, #24]
 80094cc:	f001 f928 	bl	800a720 <pxPortInitialiseStack>
 80094d0:	4602      	mov	r2, r0
 80094d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80094d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d002      	beq.n	80094e2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80094dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094e2:	bf00      	nop
 80094e4:	3720      	adds	r7, #32
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}
	...

080094ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b082      	sub	sp, #8
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80094f4:	f001 fa3e 	bl	800a974 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80094f8:	4b2d      	ldr	r3, [pc, #180]	; (80095b0 <prvAddNewTaskToReadyList+0xc4>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	3301      	adds	r3, #1
 80094fe:	4a2c      	ldr	r2, [pc, #176]	; (80095b0 <prvAddNewTaskToReadyList+0xc4>)
 8009500:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009502:	4b2c      	ldr	r3, [pc, #176]	; (80095b4 <prvAddNewTaskToReadyList+0xc8>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d109      	bne.n	800951e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800950a:	4a2a      	ldr	r2, [pc, #168]	; (80095b4 <prvAddNewTaskToReadyList+0xc8>)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009510:	4b27      	ldr	r3, [pc, #156]	; (80095b0 <prvAddNewTaskToReadyList+0xc4>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	2b01      	cmp	r3, #1
 8009516:	d110      	bne.n	800953a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009518:	f000 fc16 	bl	8009d48 <prvInitialiseTaskLists>
 800951c:	e00d      	b.n	800953a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800951e:	4b26      	ldr	r3, [pc, #152]	; (80095b8 <prvAddNewTaskToReadyList+0xcc>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d109      	bne.n	800953a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009526:	4b23      	ldr	r3, [pc, #140]	; (80095b4 <prvAddNewTaskToReadyList+0xc8>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009530:	429a      	cmp	r2, r3
 8009532:	d802      	bhi.n	800953a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009534:	4a1f      	ldr	r2, [pc, #124]	; (80095b4 <prvAddNewTaskToReadyList+0xc8>)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800953a:	4b20      	ldr	r3, [pc, #128]	; (80095bc <prvAddNewTaskToReadyList+0xd0>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	3301      	adds	r3, #1
 8009540:	4a1e      	ldr	r2, [pc, #120]	; (80095bc <prvAddNewTaskToReadyList+0xd0>)
 8009542:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009544:	4b1d      	ldr	r3, [pc, #116]	; (80095bc <prvAddNewTaskToReadyList+0xd0>)
 8009546:	681a      	ldr	r2, [r3, #0]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009550:	4b1b      	ldr	r3, [pc, #108]	; (80095c0 <prvAddNewTaskToReadyList+0xd4>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	429a      	cmp	r2, r3
 8009556:	d903      	bls.n	8009560 <prvAddNewTaskToReadyList+0x74>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800955c:	4a18      	ldr	r2, [pc, #96]	; (80095c0 <prvAddNewTaskToReadyList+0xd4>)
 800955e:	6013      	str	r3, [r2, #0]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009564:	4613      	mov	r3, r2
 8009566:	009b      	lsls	r3, r3, #2
 8009568:	4413      	add	r3, r2
 800956a:	009b      	lsls	r3, r3, #2
 800956c:	4a15      	ldr	r2, [pc, #84]	; (80095c4 <prvAddNewTaskToReadyList+0xd8>)
 800956e:	441a      	add	r2, r3
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	3304      	adds	r3, #4
 8009574:	4619      	mov	r1, r3
 8009576:	4610      	mov	r0, r2
 8009578:	f7ff f859 	bl	800862e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800957c:	f001 fa2a 	bl	800a9d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009580:	4b0d      	ldr	r3, [pc, #52]	; (80095b8 <prvAddNewTaskToReadyList+0xcc>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d00e      	beq.n	80095a6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009588:	4b0a      	ldr	r3, [pc, #40]	; (80095b4 <prvAddNewTaskToReadyList+0xc8>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009592:	429a      	cmp	r2, r3
 8009594:	d207      	bcs.n	80095a6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009596:	4b0c      	ldr	r3, [pc, #48]	; (80095c8 <prvAddNewTaskToReadyList+0xdc>)
 8009598:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800959c:	601a      	str	r2, [r3, #0]
 800959e:	f3bf 8f4f 	dsb	sy
 80095a2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80095a6:	bf00      	nop
 80095a8:	3708      	adds	r7, #8
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop
 80095b0:	20000de0 	.word	0x20000de0
 80095b4:	2000090c 	.word	0x2000090c
 80095b8:	20000dec 	.word	0x20000dec
 80095bc:	20000dfc 	.word	0x20000dfc
 80095c0:	20000de8 	.word	0x20000de8
 80095c4:	20000910 	.word	0x20000910
 80095c8:	e000ed04 	.word	0xe000ed04

080095cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b084      	sub	sp, #16
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80095d4:	2300      	movs	r3, #0
 80095d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d017      	beq.n	800960e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80095de:	4b13      	ldr	r3, [pc, #76]	; (800962c <vTaskDelay+0x60>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d00a      	beq.n	80095fc <vTaskDelay+0x30>
	__asm volatile
 80095e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ea:	f383 8811 	msr	BASEPRI, r3
 80095ee:	f3bf 8f6f 	isb	sy
 80095f2:	f3bf 8f4f 	dsb	sy
 80095f6:	60bb      	str	r3, [r7, #8]
}
 80095f8:	bf00      	nop
 80095fa:	e7fe      	b.n	80095fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80095fc:	f000 f880 	bl	8009700 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009600:	2100      	movs	r1, #0
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f000 fcea 	bl	8009fdc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009608:	f000 f888 	bl	800971c <xTaskResumeAll>
 800960c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d107      	bne.n	8009624 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009614:	4b06      	ldr	r3, [pc, #24]	; (8009630 <vTaskDelay+0x64>)
 8009616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800961a:	601a      	str	r2, [r3, #0]
 800961c:	f3bf 8f4f 	dsb	sy
 8009620:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009624:	bf00      	nop
 8009626:	3710      	adds	r7, #16
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}
 800962c:	20000e08 	.word	0x20000e08
 8009630:	e000ed04 	.word	0xe000ed04

08009634 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b08a      	sub	sp, #40	; 0x28
 8009638:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800963a:	2300      	movs	r3, #0
 800963c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800963e:	2300      	movs	r3, #0
 8009640:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009642:	463a      	mov	r2, r7
 8009644:	1d39      	adds	r1, r7, #4
 8009646:	f107 0308 	add.w	r3, r7, #8
 800964a:	4618      	mov	r0, r3
 800964c:	f7fe ff8e 	bl	800856c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009650:	6839      	ldr	r1, [r7, #0]
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	68ba      	ldr	r2, [r7, #8]
 8009656:	9202      	str	r2, [sp, #8]
 8009658:	9301      	str	r3, [sp, #4]
 800965a:	2300      	movs	r3, #0
 800965c:	9300      	str	r3, [sp, #0]
 800965e:	2300      	movs	r3, #0
 8009660:	460a      	mov	r2, r1
 8009662:	4921      	ldr	r1, [pc, #132]	; (80096e8 <vTaskStartScheduler+0xb4>)
 8009664:	4821      	ldr	r0, [pc, #132]	; (80096ec <vTaskStartScheduler+0xb8>)
 8009666:	f7ff fe0f 	bl	8009288 <xTaskCreateStatic>
 800966a:	4603      	mov	r3, r0
 800966c:	4a20      	ldr	r2, [pc, #128]	; (80096f0 <vTaskStartScheduler+0xbc>)
 800966e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009670:	4b1f      	ldr	r3, [pc, #124]	; (80096f0 <vTaskStartScheduler+0xbc>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d002      	beq.n	800967e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009678:	2301      	movs	r3, #1
 800967a:	617b      	str	r3, [r7, #20]
 800967c:	e001      	b.n	8009682 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800967e:	2300      	movs	r3, #0
 8009680:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	2b01      	cmp	r3, #1
 8009686:	d102      	bne.n	800968e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009688:	f000 fcfc 	bl	800a084 <xTimerCreateTimerTask>
 800968c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	2b01      	cmp	r3, #1
 8009692:	d116      	bne.n	80096c2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8009694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009698:	f383 8811 	msr	BASEPRI, r3
 800969c:	f3bf 8f6f 	isb	sy
 80096a0:	f3bf 8f4f 	dsb	sy
 80096a4:	613b      	str	r3, [r7, #16]
}
 80096a6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80096a8:	4b12      	ldr	r3, [pc, #72]	; (80096f4 <vTaskStartScheduler+0xc0>)
 80096aa:	f04f 32ff 	mov.w	r2, #4294967295
 80096ae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80096b0:	4b11      	ldr	r3, [pc, #68]	; (80096f8 <vTaskStartScheduler+0xc4>)
 80096b2:	2201      	movs	r2, #1
 80096b4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80096b6:	4b11      	ldr	r3, [pc, #68]	; (80096fc <vTaskStartScheduler+0xc8>)
 80096b8:	2200      	movs	r2, #0
 80096ba:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80096bc:	f001 f8b8 	bl	800a830 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80096c0:	e00e      	b.n	80096e0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096c8:	d10a      	bne.n	80096e0 <vTaskStartScheduler+0xac>
	__asm volatile
 80096ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ce:	f383 8811 	msr	BASEPRI, r3
 80096d2:	f3bf 8f6f 	isb	sy
 80096d6:	f3bf 8f4f 	dsb	sy
 80096da:	60fb      	str	r3, [r7, #12]
}
 80096dc:	bf00      	nop
 80096de:	e7fe      	b.n	80096de <vTaskStartScheduler+0xaa>
}
 80096e0:	bf00      	nop
 80096e2:	3718      	adds	r7, #24
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}
 80096e8:	0800b878 	.word	0x0800b878
 80096ec:	08009d19 	.word	0x08009d19
 80096f0:	20000e04 	.word	0x20000e04
 80096f4:	20000e00 	.word	0x20000e00
 80096f8:	20000dec 	.word	0x20000dec
 80096fc:	20000de4 	.word	0x20000de4

08009700 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009700:	b480      	push	{r7}
 8009702:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009704:	4b04      	ldr	r3, [pc, #16]	; (8009718 <vTaskSuspendAll+0x18>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	3301      	adds	r3, #1
 800970a:	4a03      	ldr	r2, [pc, #12]	; (8009718 <vTaskSuspendAll+0x18>)
 800970c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800970e:	bf00      	nop
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr
 8009718:	20000e08 	.word	0x20000e08

0800971c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b084      	sub	sp, #16
 8009720:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009722:	2300      	movs	r3, #0
 8009724:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009726:	2300      	movs	r3, #0
 8009728:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800972a:	4b42      	ldr	r3, [pc, #264]	; (8009834 <xTaskResumeAll+0x118>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d10a      	bne.n	8009748 <xTaskResumeAll+0x2c>
	__asm volatile
 8009732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009736:	f383 8811 	msr	BASEPRI, r3
 800973a:	f3bf 8f6f 	isb	sy
 800973e:	f3bf 8f4f 	dsb	sy
 8009742:	603b      	str	r3, [r7, #0]
}
 8009744:	bf00      	nop
 8009746:	e7fe      	b.n	8009746 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009748:	f001 f914 	bl	800a974 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800974c:	4b39      	ldr	r3, [pc, #228]	; (8009834 <xTaskResumeAll+0x118>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	3b01      	subs	r3, #1
 8009752:	4a38      	ldr	r2, [pc, #224]	; (8009834 <xTaskResumeAll+0x118>)
 8009754:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009756:	4b37      	ldr	r3, [pc, #220]	; (8009834 <xTaskResumeAll+0x118>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d162      	bne.n	8009824 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800975e:	4b36      	ldr	r3, [pc, #216]	; (8009838 <xTaskResumeAll+0x11c>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d05e      	beq.n	8009824 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009766:	e02f      	b.n	80097c8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009768:	4b34      	ldr	r3, [pc, #208]	; (800983c <xTaskResumeAll+0x120>)
 800976a:	68db      	ldr	r3, [r3, #12]
 800976c:	68db      	ldr	r3, [r3, #12]
 800976e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	3318      	adds	r3, #24
 8009774:	4618      	mov	r0, r3
 8009776:	f7fe ffb7 	bl	80086e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	3304      	adds	r3, #4
 800977e:	4618      	mov	r0, r3
 8009780:	f7fe ffb2 	bl	80086e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009788:	4b2d      	ldr	r3, [pc, #180]	; (8009840 <xTaskResumeAll+0x124>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	429a      	cmp	r2, r3
 800978e:	d903      	bls.n	8009798 <xTaskResumeAll+0x7c>
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009794:	4a2a      	ldr	r2, [pc, #168]	; (8009840 <xTaskResumeAll+0x124>)
 8009796:	6013      	str	r3, [r2, #0]
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800979c:	4613      	mov	r3, r2
 800979e:	009b      	lsls	r3, r3, #2
 80097a0:	4413      	add	r3, r2
 80097a2:	009b      	lsls	r3, r3, #2
 80097a4:	4a27      	ldr	r2, [pc, #156]	; (8009844 <xTaskResumeAll+0x128>)
 80097a6:	441a      	add	r2, r3
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	3304      	adds	r3, #4
 80097ac:	4619      	mov	r1, r3
 80097ae:	4610      	mov	r0, r2
 80097b0:	f7fe ff3d 	bl	800862e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097b8:	4b23      	ldr	r3, [pc, #140]	; (8009848 <xTaskResumeAll+0x12c>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097be:	429a      	cmp	r2, r3
 80097c0:	d302      	bcc.n	80097c8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80097c2:	4b22      	ldr	r3, [pc, #136]	; (800984c <xTaskResumeAll+0x130>)
 80097c4:	2201      	movs	r2, #1
 80097c6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80097c8:	4b1c      	ldr	r3, [pc, #112]	; (800983c <xTaskResumeAll+0x120>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d1cb      	bne.n	8009768 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d001      	beq.n	80097da <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80097d6:	f000 fb55 	bl	8009e84 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80097da:	4b1d      	ldr	r3, [pc, #116]	; (8009850 <xTaskResumeAll+0x134>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d010      	beq.n	8009808 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80097e6:	f000 f847 	bl	8009878 <xTaskIncrementTick>
 80097ea:	4603      	mov	r3, r0
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d002      	beq.n	80097f6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80097f0:	4b16      	ldr	r3, [pc, #88]	; (800984c <xTaskResumeAll+0x130>)
 80097f2:	2201      	movs	r2, #1
 80097f4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	3b01      	subs	r3, #1
 80097fa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d1f1      	bne.n	80097e6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009802:	4b13      	ldr	r3, [pc, #76]	; (8009850 <xTaskResumeAll+0x134>)
 8009804:	2200      	movs	r2, #0
 8009806:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009808:	4b10      	ldr	r3, [pc, #64]	; (800984c <xTaskResumeAll+0x130>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d009      	beq.n	8009824 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009810:	2301      	movs	r3, #1
 8009812:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009814:	4b0f      	ldr	r3, [pc, #60]	; (8009854 <xTaskResumeAll+0x138>)
 8009816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800981a:	601a      	str	r2, [r3, #0]
 800981c:	f3bf 8f4f 	dsb	sy
 8009820:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009824:	f001 f8d6 	bl	800a9d4 <vPortExitCritical>

	return xAlreadyYielded;
 8009828:	68bb      	ldr	r3, [r7, #8]
}
 800982a:	4618      	mov	r0, r3
 800982c:	3710      	adds	r7, #16
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}
 8009832:	bf00      	nop
 8009834:	20000e08 	.word	0x20000e08
 8009838:	20000de0 	.word	0x20000de0
 800983c:	20000da0 	.word	0x20000da0
 8009840:	20000de8 	.word	0x20000de8
 8009844:	20000910 	.word	0x20000910
 8009848:	2000090c 	.word	0x2000090c
 800984c:	20000df4 	.word	0x20000df4
 8009850:	20000df0 	.word	0x20000df0
 8009854:	e000ed04 	.word	0xe000ed04

08009858 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009858:	b480      	push	{r7}
 800985a:	b083      	sub	sp, #12
 800985c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800985e:	4b05      	ldr	r3, [pc, #20]	; (8009874 <xTaskGetTickCount+0x1c>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009864:	687b      	ldr	r3, [r7, #4]
}
 8009866:	4618      	mov	r0, r3
 8009868:	370c      	adds	r7, #12
 800986a:	46bd      	mov	sp, r7
 800986c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009870:	4770      	bx	lr
 8009872:	bf00      	nop
 8009874:	20000de4 	.word	0x20000de4

08009878 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b086      	sub	sp, #24
 800987c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800987e:	2300      	movs	r3, #0
 8009880:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009882:	4b4f      	ldr	r3, [pc, #316]	; (80099c0 <xTaskIncrementTick+0x148>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	2b00      	cmp	r3, #0
 8009888:	f040 808f 	bne.w	80099aa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800988c:	4b4d      	ldr	r3, [pc, #308]	; (80099c4 <xTaskIncrementTick+0x14c>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	3301      	adds	r3, #1
 8009892:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009894:	4a4b      	ldr	r2, [pc, #300]	; (80099c4 <xTaskIncrementTick+0x14c>)
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d120      	bne.n	80098e2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80098a0:	4b49      	ldr	r3, [pc, #292]	; (80099c8 <xTaskIncrementTick+0x150>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d00a      	beq.n	80098c0 <xTaskIncrementTick+0x48>
	__asm volatile
 80098aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ae:	f383 8811 	msr	BASEPRI, r3
 80098b2:	f3bf 8f6f 	isb	sy
 80098b6:	f3bf 8f4f 	dsb	sy
 80098ba:	603b      	str	r3, [r7, #0]
}
 80098bc:	bf00      	nop
 80098be:	e7fe      	b.n	80098be <xTaskIncrementTick+0x46>
 80098c0:	4b41      	ldr	r3, [pc, #260]	; (80099c8 <xTaskIncrementTick+0x150>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	60fb      	str	r3, [r7, #12]
 80098c6:	4b41      	ldr	r3, [pc, #260]	; (80099cc <xTaskIncrementTick+0x154>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	4a3f      	ldr	r2, [pc, #252]	; (80099c8 <xTaskIncrementTick+0x150>)
 80098cc:	6013      	str	r3, [r2, #0]
 80098ce:	4a3f      	ldr	r2, [pc, #252]	; (80099cc <xTaskIncrementTick+0x154>)
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	6013      	str	r3, [r2, #0]
 80098d4:	4b3e      	ldr	r3, [pc, #248]	; (80099d0 <xTaskIncrementTick+0x158>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	3301      	adds	r3, #1
 80098da:	4a3d      	ldr	r2, [pc, #244]	; (80099d0 <xTaskIncrementTick+0x158>)
 80098dc:	6013      	str	r3, [r2, #0]
 80098de:	f000 fad1 	bl	8009e84 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80098e2:	4b3c      	ldr	r3, [pc, #240]	; (80099d4 <xTaskIncrementTick+0x15c>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	693a      	ldr	r2, [r7, #16]
 80098e8:	429a      	cmp	r2, r3
 80098ea:	d349      	bcc.n	8009980 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80098ec:	4b36      	ldr	r3, [pc, #216]	; (80099c8 <xTaskIncrementTick+0x150>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d104      	bne.n	8009900 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098f6:	4b37      	ldr	r3, [pc, #220]	; (80099d4 <xTaskIncrementTick+0x15c>)
 80098f8:	f04f 32ff 	mov.w	r2, #4294967295
 80098fc:	601a      	str	r2, [r3, #0]
					break;
 80098fe:	e03f      	b.n	8009980 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009900:	4b31      	ldr	r3, [pc, #196]	; (80099c8 <xTaskIncrementTick+0x150>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	68db      	ldr	r3, [r3, #12]
 8009906:	68db      	ldr	r3, [r3, #12]
 8009908:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009910:	693a      	ldr	r2, [r7, #16]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	429a      	cmp	r2, r3
 8009916:	d203      	bcs.n	8009920 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009918:	4a2e      	ldr	r2, [pc, #184]	; (80099d4 <xTaskIncrementTick+0x15c>)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800991e:	e02f      	b.n	8009980 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	3304      	adds	r3, #4
 8009924:	4618      	mov	r0, r3
 8009926:	f7fe fedf 	bl	80086e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800992e:	2b00      	cmp	r3, #0
 8009930:	d004      	beq.n	800993c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	3318      	adds	r3, #24
 8009936:	4618      	mov	r0, r3
 8009938:	f7fe fed6 	bl	80086e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009940:	4b25      	ldr	r3, [pc, #148]	; (80099d8 <xTaskIncrementTick+0x160>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	429a      	cmp	r2, r3
 8009946:	d903      	bls.n	8009950 <xTaskIncrementTick+0xd8>
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800994c:	4a22      	ldr	r2, [pc, #136]	; (80099d8 <xTaskIncrementTick+0x160>)
 800994e:	6013      	str	r3, [r2, #0]
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009954:	4613      	mov	r3, r2
 8009956:	009b      	lsls	r3, r3, #2
 8009958:	4413      	add	r3, r2
 800995a:	009b      	lsls	r3, r3, #2
 800995c:	4a1f      	ldr	r2, [pc, #124]	; (80099dc <xTaskIncrementTick+0x164>)
 800995e:	441a      	add	r2, r3
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	3304      	adds	r3, #4
 8009964:	4619      	mov	r1, r3
 8009966:	4610      	mov	r0, r2
 8009968:	f7fe fe61 	bl	800862e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009970:	4b1b      	ldr	r3, [pc, #108]	; (80099e0 <xTaskIncrementTick+0x168>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009976:	429a      	cmp	r2, r3
 8009978:	d3b8      	bcc.n	80098ec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800997a:	2301      	movs	r3, #1
 800997c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800997e:	e7b5      	b.n	80098ec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009980:	4b17      	ldr	r3, [pc, #92]	; (80099e0 <xTaskIncrementTick+0x168>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009986:	4915      	ldr	r1, [pc, #84]	; (80099dc <xTaskIncrementTick+0x164>)
 8009988:	4613      	mov	r3, r2
 800998a:	009b      	lsls	r3, r3, #2
 800998c:	4413      	add	r3, r2
 800998e:	009b      	lsls	r3, r3, #2
 8009990:	440b      	add	r3, r1
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	2b01      	cmp	r3, #1
 8009996:	d901      	bls.n	800999c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009998:	2301      	movs	r3, #1
 800999a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800999c:	4b11      	ldr	r3, [pc, #68]	; (80099e4 <xTaskIncrementTick+0x16c>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d007      	beq.n	80099b4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80099a4:	2301      	movs	r3, #1
 80099a6:	617b      	str	r3, [r7, #20]
 80099a8:	e004      	b.n	80099b4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80099aa:	4b0f      	ldr	r3, [pc, #60]	; (80099e8 <xTaskIncrementTick+0x170>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	3301      	adds	r3, #1
 80099b0:	4a0d      	ldr	r2, [pc, #52]	; (80099e8 <xTaskIncrementTick+0x170>)
 80099b2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80099b4:	697b      	ldr	r3, [r7, #20]
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3718      	adds	r7, #24
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
 80099be:	bf00      	nop
 80099c0:	20000e08 	.word	0x20000e08
 80099c4:	20000de4 	.word	0x20000de4
 80099c8:	20000d98 	.word	0x20000d98
 80099cc:	20000d9c 	.word	0x20000d9c
 80099d0:	20000df8 	.word	0x20000df8
 80099d4:	20000e00 	.word	0x20000e00
 80099d8:	20000de8 	.word	0x20000de8
 80099dc:	20000910 	.word	0x20000910
 80099e0:	2000090c 	.word	0x2000090c
 80099e4:	20000df4 	.word	0x20000df4
 80099e8:	20000df0 	.word	0x20000df0

080099ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80099ec:	b480      	push	{r7}
 80099ee:	b085      	sub	sp, #20
 80099f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80099f2:	4b28      	ldr	r3, [pc, #160]	; (8009a94 <vTaskSwitchContext+0xa8>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d003      	beq.n	8009a02 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80099fa:	4b27      	ldr	r3, [pc, #156]	; (8009a98 <vTaskSwitchContext+0xac>)
 80099fc:	2201      	movs	r2, #1
 80099fe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009a00:	e041      	b.n	8009a86 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8009a02:	4b25      	ldr	r3, [pc, #148]	; (8009a98 <vTaskSwitchContext+0xac>)
 8009a04:	2200      	movs	r2, #0
 8009a06:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a08:	4b24      	ldr	r3, [pc, #144]	; (8009a9c <vTaskSwitchContext+0xb0>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	60fb      	str	r3, [r7, #12]
 8009a0e:	e010      	b.n	8009a32 <vTaskSwitchContext+0x46>
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d10a      	bne.n	8009a2c <vTaskSwitchContext+0x40>
	__asm volatile
 8009a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a1a:	f383 8811 	msr	BASEPRI, r3
 8009a1e:	f3bf 8f6f 	isb	sy
 8009a22:	f3bf 8f4f 	dsb	sy
 8009a26:	607b      	str	r3, [r7, #4]
}
 8009a28:	bf00      	nop
 8009a2a:	e7fe      	b.n	8009a2a <vTaskSwitchContext+0x3e>
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	3b01      	subs	r3, #1
 8009a30:	60fb      	str	r3, [r7, #12]
 8009a32:	491b      	ldr	r1, [pc, #108]	; (8009aa0 <vTaskSwitchContext+0xb4>)
 8009a34:	68fa      	ldr	r2, [r7, #12]
 8009a36:	4613      	mov	r3, r2
 8009a38:	009b      	lsls	r3, r3, #2
 8009a3a:	4413      	add	r3, r2
 8009a3c:	009b      	lsls	r3, r3, #2
 8009a3e:	440b      	add	r3, r1
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d0e4      	beq.n	8009a10 <vTaskSwitchContext+0x24>
 8009a46:	68fa      	ldr	r2, [r7, #12]
 8009a48:	4613      	mov	r3, r2
 8009a4a:	009b      	lsls	r3, r3, #2
 8009a4c:	4413      	add	r3, r2
 8009a4e:	009b      	lsls	r3, r3, #2
 8009a50:	4a13      	ldr	r2, [pc, #76]	; (8009aa0 <vTaskSwitchContext+0xb4>)
 8009a52:	4413      	add	r3, r2
 8009a54:	60bb      	str	r3, [r7, #8]
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	685a      	ldr	r2, [r3, #4]
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	605a      	str	r2, [r3, #4]
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	685a      	ldr	r2, [r3, #4]
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	3308      	adds	r3, #8
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d104      	bne.n	8009a76 <vTaskSwitchContext+0x8a>
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	685b      	ldr	r3, [r3, #4]
 8009a70:	685a      	ldr	r2, [r3, #4]
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	605a      	str	r2, [r3, #4]
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	68db      	ldr	r3, [r3, #12]
 8009a7c:	4a09      	ldr	r2, [pc, #36]	; (8009aa4 <vTaskSwitchContext+0xb8>)
 8009a7e:	6013      	str	r3, [r2, #0]
 8009a80:	4a06      	ldr	r2, [pc, #24]	; (8009a9c <vTaskSwitchContext+0xb0>)
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	6013      	str	r3, [r2, #0]
}
 8009a86:	bf00      	nop
 8009a88:	3714      	adds	r7, #20
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a90:	4770      	bx	lr
 8009a92:	bf00      	nop
 8009a94:	20000e08 	.word	0x20000e08
 8009a98:	20000df4 	.word	0x20000df4
 8009a9c:	20000de8 	.word	0x20000de8
 8009aa0:	20000910 	.word	0x20000910
 8009aa4:	2000090c 	.word	0x2000090c

08009aa8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b084      	sub	sp, #16
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d10a      	bne.n	8009ace <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009abc:	f383 8811 	msr	BASEPRI, r3
 8009ac0:	f3bf 8f6f 	isb	sy
 8009ac4:	f3bf 8f4f 	dsb	sy
 8009ac8:	60fb      	str	r3, [r7, #12]
}
 8009aca:	bf00      	nop
 8009acc:	e7fe      	b.n	8009acc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009ace:	4b07      	ldr	r3, [pc, #28]	; (8009aec <vTaskPlaceOnEventList+0x44>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	3318      	adds	r3, #24
 8009ad4:	4619      	mov	r1, r3
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f7fe fdcd 	bl	8008676 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009adc:	2101      	movs	r1, #1
 8009ade:	6838      	ldr	r0, [r7, #0]
 8009ae0:	f000 fa7c 	bl	8009fdc <prvAddCurrentTaskToDelayedList>
}
 8009ae4:	bf00      	nop
 8009ae6:	3710      	adds	r7, #16
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}
 8009aec:	2000090c 	.word	0x2000090c

08009af0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b086      	sub	sp, #24
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	60f8      	str	r0, [r7, #12]
 8009af8:	60b9      	str	r1, [r7, #8]
 8009afa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d10a      	bne.n	8009b18 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b06:	f383 8811 	msr	BASEPRI, r3
 8009b0a:	f3bf 8f6f 	isb	sy
 8009b0e:	f3bf 8f4f 	dsb	sy
 8009b12:	617b      	str	r3, [r7, #20]
}
 8009b14:	bf00      	nop
 8009b16:	e7fe      	b.n	8009b16 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b18:	4b0a      	ldr	r3, [pc, #40]	; (8009b44 <vTaskPlaceOnEventListRestricted+0x54>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	3318      	adds	r3, #24
 8009b1e:	4619      	mov	r1, r3
 8009b20:	68f8      	ldr	r0, [r7, #12]
 8009b22:	f7fe fd84 	bl	800862e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d002      	beq.n	8009b32 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8009b30:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009b32:	6879      	ldr	r1, [r7, #4]
 8009b34:	68b8      	ldr	r0, [r7, #8]
 8009b36:	f000 fa51 	bl	8009fdc <prvAddCurrentTaskToDelayedList>
	}
 8009b3a:	bf00      	nop
 8009b3c:	3718      	adds	r7, #24
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
 8009b42:	bf00      	nop
 8009b44:	2000090c 	.word	0x2000090c

08009b48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b086      	sub	sp, #24
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	68db      	ldr	r3, [r3, #12]
 8009b54:	68db      	ldr	r3, [r3, #12]
 8009b56:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d10a      	bne.n	8009b74 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b62:	f383 8811 	msr	BASEPRI, r3
 8009b66:	f3bf 8f6f 	isb	sy
 8009b6a:	f3bf 8f4f 	dsb	sy
 8009b6e:	60fb      	str	r3, [r7, #12]
}
 8009b70:	bf00      	nop
 8009b72:	e7fe      	b.n	8009b72 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	3318      	adds	r3, #24
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f7fe fdb5 	bl	80086e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b7e:	4b1e      	ldr	r3, [pc, #120]	; (8009bf8 <xTaskRemoveFromEventList+0xb0>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d11d      	bne.n	8009bc2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	3304      	adds	r3, #4
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f7fe fdac 	bl	80086e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b94:	4b19      	ldr	r3, [pc, #100]	; (8009bfc <xTaskRemoveFromEventList+0xb4>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	429a      	cmp	r2, r3
 8009b9a:	d903      	bls.n	8009ba4 <xTaskRemoveFromEventList+0x5c>
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba0:	4a16      	ldr	r2, [pc, #88]	; (8009bfc <xTaskRemoveFromEventList+0xb4>)
 8009ba2:	6013      	str	r3, [r2, #0]
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ba8:	4613      	mov	r3, r2
 8009baa:	009b      	lsls	r3, r3, #2
 8009bac:	4413      	add	r3, r2
 8009bae:	009b      	lsls	r3, r3, #2
 8009bb0:	4a13      	ldr	r2, [pc, #76]	; (8009c00 <xTaskRemoveFromEventList+0xb8>)
 8009bb2:	441a      	add	r2, r3
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	3304      	adds	r3, #4
 8009bb8:	4619      	mov	r1, r3
 8009bba:	4610      	mov	r0, r2
 8009bbc:	f7fe fd37 	bl	800862e <vListInsertEnd>
 8009bc0:	e005      	b.n	8009bce <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	3318      	adds	r3, #24
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	480e      	ldr	r0, [pc, #56]	; (8009c04 <xTaskRemoveFromEventList+0xbc>)
 8009bca:	f7fe fd30 	bl	800862e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bd2:	4b0d      	ldr	r3, [pc, #52]	; (8009c08 <xTaskRemoveFromEventList+0xc0>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	d905      	bls.n	8009be8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009bdc:	2301      	movs	r3, #1
 8009bde:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009be0:	4b0a      	ldr	r3, [pc, #40]	; (8009c0c <xTaskRemoveFromEventList+0xc4>)
 8009be2:	2201      	movs	r2, #1
 8009be4:	601a      	str	r2, [r3, #0]
 8009be6:	e001      	b.n	8009bec <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009be8:	2300      	movs	r3, #0
 8009bea:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009bec:	697b      	ldr	r3, [r7, #20]
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3718      	adds	r7, #24
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}
 8009bf6:	bf00      	nop
 8009bf8:	20000e08 	.word	0x20000e08
 8009bfc:	20000de8 	.word	0x20000de8
 8009c00:	20000910 	.word	0x20000910
 8009c04:	20000da0 	.word	0x20000da0
 8009c08:	2000090c 	.word	0x2000090c
 8009c0c:	20000df4 	.word	0x20000df4

08009c10 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009c10:	b480      	push	{r7}
 8009c12:	b083      	sub	sp, #12
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009c18:	4b06      	ldr	r3, [pc, #24]	; (8009c34 <vTaskInternalSetTimeOutState+0x24>)
 8009c1a:	681a      	ldr	r2, [r3, #0]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009c20:	4b05      	ldr	r3, [pc, #20]	; (8009c38 <vTaskInternalSetTimeOutState+0x28>)
 8009c22:	681a      	ldr	r2, [r3, #0]
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	605a      	str	r2, [r3, #4]
}
 8009c28:	bf00      	nop
 8009c2a:	370c      	adds	r7, #12
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr
 8009c34:	20000df8 	.word	0x20000df8
 8009c38:	20000de4 	.word	0x20000de4

08009c3c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b088      	sub	sp, #32
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d10a      	bne.n	8009c62 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c50:	f383 8811 	msr	BASEPRI, r3
 8009c54:	f3bf 8f6f 	isb	sy
 8009c58:	f3bf 8f4f 	dsb	sy
 8009c5c:	613b      	str	r3, [r7, #16]
}
 8009c5e:	bf00      	nop
 8009c60:	e7fe      	b.n	8009c60 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d10a      	bne.n	8009c7e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c6c:	f383 8811 	msr	BASEPRI, r3
 8009c70:	f3bf 8f6f 	isb	sy
 8009c74:	f3bf 8f4f 	dsb	sy
 8009c78:	60fb      	str	r3, [r7, #12]
}
 8009c7a:	bf00      	nop
 8009c7c:	e7fe      	b.n	8009c7c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009c7e:	f000 fe79 	bl	800a974 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009c82:	4b1d      	ldr	r3, [pc, #116]	; (8009cf8 <xTaskCheckForTimeOut+0xbc>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	69ba      	ldr	r2, [r7, #24]
 8009c8e:	1ad3      	subs	r3, r2, r3
 8009c90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c9a:	d102      	bne.n	8009ca2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	61fb      	str	r3, [r7, #28]
 8009ca0:	e023      	b.n	8009cea <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681a      	ldr	r2, [r3, #0]
 8009ca6:	4b15      	ldr	r3, [pc, #84]	; (8009cfc <xTaskCheckForTimeOut+0xc0>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	429a      	cmp	r2, r3
 8009cac:	d007      	beq.n	8009cbe <xTaskCheckForTimeOut+0x82>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	69ba      	ldr	r2, [r7, #24]
 8009cb4:	429a      	cmp	r2, r3
 8009cb6:	d302      	bcc.n	8009cbe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009cb8:	2301      	movs	r3, #1
 8009cba:	61fb      	str	r3, [r7, #28]
 8009cbc:	e015      	b.n	8009cea <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	697a      	ldr	r2, [r7, #20]
 8009cc4:	429a      	cmp	r2, r3
 8009cc6:	d20b      	bcs.n	8009ce0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	681a      	ldr	r2, [r3, #0]
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	1ad2      	subs	r2, r2, r3
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f7ff ff9b 	bl	8009c10 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	61fb      	str	r3, [r7, #28]
 8009cde:	e004      	b.n	8009cea <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009cea:	f000 fe73 	bl	800a9d4 <vPortExitCritical>

	return xReturn;
 8009cee:	69fb      	ldr	r3, [r7, #28]
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3720      	adds	r7, #32
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}
 8009cf8:	20000de4 	.word	0x20000de4
 8009cfc:	20000df8 	.word	0x20000df8

08009d00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009d00:	b480      	push	{r7}
 8009d02:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009d04:	4b03      	ldr	r3, [pc, #12]	; (8009d14 <vTaskMissedYield+0x14>)
 8009d06:	2201      	movs	r2, #1
 8009d08:	601a      	str	r2, [r3, #0]
}
 8009d0a:	bf00      	nop
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d12:	4770      	bx	lr
 8009d14:	20000df4 	.word	0x20000df4

08009d18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b082      	sub	sp, #8
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009d20:	f000 f852 	bl	8009dc8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009d24:	4b06      	ldr	r3, [pc, #24]	; (8009d40 <prvIdleTask+0x28>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	2b01      	cmp	r3, #1
 8009d2a:	d9f9      	bls.n	8009d20 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009d2c:	4b05      	ldr	r3, [pc, #20]	; (8009d44 <prvIdleTask+0x2c>)
 8009d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d32:	601a      	str	r2, [r3, #0]
 8009d34:	f3bf 8f4f 	dsb	sy
 8009d38:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009d3c:	e7f0      	b.n	8009d20 <prvIdleTask+0x8>
 8009d3e:	bf00      	nop
 8009d40:	20000910 	.word	0x20000910
 8009d44:	e000ed04 	.word	0xe000ed04

08009d48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b082      	sub	sp, #8
 8009d4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009d4e:	2300      	movs	r3, #0
 8009d50:	607b      	str	r3, [r7, #4]
 8009d52:	e00c      	b.n	8009d6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009d54:	687a      	ldr	r2, [r7, #4]
 8009d56:	4613      	mov	r3, r2
 8009d58:	009b      	lsls	r3, r3, #2
 8009d5a:	4413      	add	r3, r2
 8009d5c:	009b      	lsls	r3, r3, #2
 8009d5e:	4a12      	ldr	r2, [pc, #72]	; (8009da8 <prvInitialiseTaskLists+0x60>)
 8009d60:	4413      	add	r3, r2
 8009d62:	4618      	mov	r0, r3
 8009d64:	f7fe fc36 	bl	80085d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	3301      	adds	r3, #1
 8009d6c:	607b      	str	r3, [r7, #4]
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2b37      	cmp	r3, #55	; 0x37
 8009d72:	d9ef      	bls.n	8009d54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009d74:	480d      	ldr	r0, [pc, #52]	; (8009dac <prvInitialiseTaskLists+0x64>)
 8009d76:	f7fe fc2d 	bl	80085d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009d7a:	480d      	ldr	r0, [pc, #52]	; (8009db0 <prvInitialiseTaskLists+0x68>)
 8009d7c:	f7fe fc2a 	bl	80085d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009d80:	480c      	ldr	r0, [pc, #48]	; (8009db4 <prvInitialiseTaskLists+0x6c>)
 8009d82:	f7fe fc27 	bl	80085d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009d86:	480c      	ldr	r0, [pc, #48]	; (8009db8 <prvInitialiseTaskLists+0x70>)
 8009d88:	f7fe fc24 	bl	80085d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009d8c:	480b      	ldr	r0, [pc, #44]	; (8009dbc <prvInitialiseTaskLists+0x74>)
 8009d8e:	f7fe fc21 	bl	80085d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009d92:	4b0b      	ldr	r3, [pc, #44]	; (8009dc0 <prvInitialiseTaskLists+0x78>)
 8009d94:	4a05      	ldr	r2, [pc, #20]	; (8009dac <prvInitialiseTaskLists+0x64>)
 8009d96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009d98:	4b0a      	ldr	r3, [pc, #40]	; (8009dc4 <prvInitialiseTaskLists+0x7c>)
 8009d9a:	4a05      	ldr	r2, [pc, #20]	; (8009db0 <prvInitialiseTaskLists+0x68>)
 8009d9c:	601a      	str	r2, [r3, #0]
}
 8009d9e:	bf00      	nop
 8009da0:	3708      	adds	r7, #8
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
 8009da6:	bf00      	nop
 8009da8:	20000910 	.word	0x20000910
 8009dac:	20000d70 	.word	0x20000d70
 8009db0:	20000d84 	.word	0x20000d84
 8009db4:	20000da0 	.word	0x20000da0
 8009db8:	20000db4 	.word	0x20000db4
 8009dbc:	20000dcc 	.word	0x20000dcc
 8009dc0:	20000d98 	.word	0x20000d98
 8009dc4:	20000d9c 	.word	0x20000d9c

08009dc8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009dce:	e019      	b.n	8009e04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009dd0:	f000 fdd0 	bl	800a974 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009dd4:	4b10      	ldr	r3, [pc, #64]	; (8009e18 <prvCheckTasksWaitingTermination+0x50>)
 8009dd6:	68db      	ldr	r3, [r3, #12]
 8009dd8:	68db      	ldr	r3, [r3, #12]
 8009dda:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	3304      	adds	r3, #4
 8009de0:	4618      	mov	r0, r3
 8009de2:	f7fe fc81 	bl	80086e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009de6:	4b0d      	ldr	r3, [pc, #52]	; (8009e1c <prvCheckTasksWaitingTermination+0x54>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	3b01      	subs	r3, #1
 8009dec:	4a0b      	ldr	r2, [pc, #44]	; (8009e1c <prvCheckTasksWaitingTermination+0x54>)
 8009dee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009df0:	4b0b      	ldr	r3, [pc, #44]	; (8009e20 <prvCheckTasksWaitingTermination+0x58>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	3b01      	subs	r3, #1
 8009df6:	4a0a      	ldr	r2, [pc, #40]	; (8009e20 <prvCheckTasksWaitingTermination+0x58>)
 8009df8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009dfa:	f000 fdeb 	bl	800a9d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f000 f810 	bl	8009e24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e04:	4b06      	ldr	r3, [pc, #24]	; (8009e20 <prvCheckTasksWaitingTermination+0x58>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d1e1      	bne.n	8009dd0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009e0c:	bf00      	nop
 8009e0e:	bf00      	nop
 8009e10:	3708      	adds	r7, #8
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}
 8009e16:	bf00      	nop
 8009e18:	20000db4 	.word	0x20000db4
 8009e1c:	20000de0 	.word	0x20000de0
 8009e20:	20000dc8 	.word	0x20000dc8

08009e24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b084      	sub	sp, #16
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d108      	bne.n	8009e48 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f000 ff88 	bl	800ad50 <vPortFree>
				vPortFree( pxTCB );
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f000 ff85 	bl	800ad50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009e46:	e018      	b.n	8009e7a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009e4e:	2b01      	cmp	r3, #1
 8009e50:	d103      	bne.n	8009e5a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f000 ff7c 	bl	800ad50 <vPortFree>
	}
 8009e58:	e00f      	b.n	8009e7a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009e60:	2b02      	cmp	r3, #2
 8009e62:	d00a      	beq.n	8009e7a <prvDeleteTCB+0x56>
	__asm volatile
 8009e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e68:	f383 8811 	msr	BASEPRI, r3
 8009e6c:	f3bf 8f6f 	isb	sy
 8009e70:	f3bf 8f4f 	dsb	sy
 8009e74:	60fb      	str	r3, [r7, #12]
}
 8009e76:	bf00      	nop
 8009e78:	e7fe      	b.n	8009e78 <prvDeleteTCB+0x54>
	}
 8009e7a:	bf00      	nop
 8009e7c:	3710      	adds	r7, #16
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}
	...

08009e84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009e84:	b480      	push	{r7}
 8009e86:	b083      	sub	sp, #12
 8009e88:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e8a:	4b0c      	ldr	r3, [pc, #48]	; (8009ebc <prvResetNextTaskUnblockTime+0x38>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d104      	bne.n	8009e9e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009e94:	4b0a      	ldr	r3, [pc, #40]	; (8009ec0 <prvResetNextTaskUnblockTime+0x3c>)
 8009e96:	f04f 32ff 	mov.w	r2, #4294967295
 8009e9a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009e9c:	e008      	b.n	8009eb0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e9e:	4b07      	ldr	r3, [pc, #28]	; (8009ebc <prvResetNextTaskUnblockTime+0x38>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	68db      	ldr	r3, [r3, #12]
 8009ea4:	68db      	ldr	r3, [r3, #12]
 8009ea6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	685b      	ldr	r3, [r3, #4]
 8009eac:	4a04      	ldr	r2, [pc, #16]	; (8009ec0 <prvResetNextTaskUnblockTime+0x3c>)
 8009eae:	6013      	str	r3, [r2, #0]
}
 8009eb0:	bf00      	nop
 8009eb2:	370c      	adds	r7, #12
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr
 8009ebc:	20000d98 	.word	0x20000d98
 8009ec0:	20000e00 	.word	0x20000e00

08009ec4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b083      	sub	sp, #12
 8009ec8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009eca:	4b0b      	ldr	r3, [pc, #44]	; (8009ef8 <xTaskGetSchedulerState+0x34>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d102      	bne.n	8009ed8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	607b      	str	r3, [r7, #4]
 8009ed6:	e008      	b.n	8009eea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ed8:	4b08      	ldr	r3, [pc, #32]	; (8009efc <xTaskGetSchedulerState+0x38>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d102      	bne.n	8009ee6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009ee0:	2302      	movs	r3, #2
 8009ee2:	607b      	str	r3, [r7, #4]
 8009ee4:	e001      	b.n	8009eea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009eea:	687b      	ldr	r3, [r7, #4]
	}
 8009eec:	4618      	mov	r0, r3
 8009eee:	370c      	adds	r7, #12
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr
 8009ef8:	20000dec 	.word	0x20000dec
 8009efc:	20000e08 	.word	0x20000e08

08009f00 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b086      	sub	sp, #24
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d056      	beq.n	8009fc4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009f16:	4b2e      	ldr	r3, [pc, #184]	; (8009fd0 <xTaskPriorityDisinherit+0xd0>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	693a      	ldr	r2, [r7, #16]
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	d00a      	beq.n	8009f36 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f24:	f383 8811 	msr	BASEPRI, r3
 8009f28:	f3bf 8f6f 	isb	sy
 8009f2c:	f3bf 8f4f 	dsb	sy
 8009f30:	60fb      	str	r3, [r7, #12]
}
 8009f32:	bf00      	nop
 8009f34:	e7fe      	b.n	8009f34 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d10a      	bne.n	8009f54 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f42:	f383 8811 	msr	BASEPRI, r3
 8009f46:	f3bf 8f6f 	isb	sy
 8009f4a:	f3bf 8f4f 	dsb	sy
 8009f4e:	60bb      	str	r3, [r7, #8]
}
 8009f50:	bf00      	nop
 8009f52:	e7fe      	b.n	8009f52 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f58:	1e5a      	subs	r2, r3, #1
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009f5e:	693b      	ldr	r3, [r7, #16]
 8009f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f66:	429a      	cmp	r2, r3
 8009f68:	d02c      	beq.n	8009fc4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d128      	bne.n	8009fc4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	3304      	adds	r3, #4
 8009f76:	4618      	mov	r0, r3
 8009f78:	f7fe fbb6 	bl	80086e8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f88:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f94:	4b0f      	ldr	r3, [pc, #60]	; (8009fd4 <xTaskPriorityDisinherit+0xd4>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	429a      	cmp	r2, r3
 8009f9a:	d903      	bls.n	8009fa4 <xTaskPriorityDisinherit+0xa4>
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fa0:	4a0c      	ldr	r2, [pc, #48]	; (8009fd4 <xTaskPriorityDisinherit+0xd4>)
 8009fa2:	6013      	str	r3, [r2, #0]
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fa8:	4613      	mov	r3, r2
 8009faa:	009b      	lsls	r3, r3, #2
 8009fac:	4413      	add	r3, r2
 8009fae:	009b      	lsls	r3, r3, #2
 8009fb0:	4a09      	ldr	r2, [pc, #36]	; (8009fd8 <xTaskPriorityDisinherit+0xd8>)
 8009fb2:	441a      	add	r2, r3
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	3304      	adds	r3, #4
 8009fb8:	4619      	mov	r1, r3
 8009fba:	4610      	mov	r0, r2
 8009fbc:	f7fe fb37 	bl	800862e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009fc4:	697b      	ldr	r3, [r7, #20]
	}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3718      	adds	r7, #24
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}
 8009fce:	bf00      	nop
 8009fd0:	2000090c 	.word	0x2000090c
 8009fd4:	20000de8 	.word	0x20000de8
 8009fd8:	20000910 	.word	0x20000910

08009fdc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b084      	sub	sp, #16
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009fe6:	4b21      	ldr	r3, [pc, #132]	; (800a06c <prvAddCurrentTaskToDelayedList+0x90>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009fec:	4b20      	ldr	r3, [pc, #128]	; (800a070 <prvAddCurrentTaskToDelayedList+0x94>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	3304      	adds	r3, #4
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f7fe fb78 	bl	80086e8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ffe:	d10a      	bne.n	800a016 <prvAddCurrentTaskToDelayedList+0x3a>
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d007      	beq.n	800a016 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a006:	4b1a      	ldr	r3, [pc, #104]	; (800a070 <prvAddCurrentTaskToDelayedList+0x94>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	3304      	adds	r3, #4
 800a00c:	4619      	mov	r1, r3
 800a00e:	4819      	ldr	r0, [pc, #100]	; (800a074 <prvAddCurrentTaskToDelayedList+0x98>)
 800a010:	f7fe fb0d 	bl	800862e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a014:	e026      	b.n	800a064 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a016:	68fa      	ldr	r2, [r7, #12]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	4413      	add	r3, r2
 800a01c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a01e:	4b14      	ldr	r3, [pc, #80]	; (800a070 <prvAddCurrentTaskToDelayedList+0x94>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	68ba      	ldr	r2, [r7, #8]
 800a024:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a026:	68ba      	ldr	r2, [r7, #8]
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	429a      	cmp	r2, r3
 800a02c:	d209      	bcs.n	800a042 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a02e:	4b12      	ldr	r3, [pc, #72]	; (800a078 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a030:	681a      	ldr	r2, [r3, #0]
 800a032:	4b0f      	ldr	r3, [pc, #60]	; (800a070 <prvAddCurrentTaskToDelayedList+0x94>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	3304      	adds	r3, #4
 800a038:	4619      	mov	r1, r3
 800a03a:	4610      	mov	r0, r2
 800a03c:	f7fe fb1b 	bl	8008676 <vListInsert>
}
 800a040:	e010      	b.n	800a064 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a042:	4b0e      	ldr	r3, [pc, #56]	; (800a07c <prvAddCurrentTaskToDelayedList+0xa0>)
 800a044:	681a      	ldr	r2, [r3, #0]
 800a046:	4b0a      	ldr	r3, [pc, #40]	; (800a070 <prvAddCurrentTaskToDelayedList+0x94>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	3304      	adds	r3, #4
 800a04c:	4619      	mov	r1, r3
 800a04e:	4610      	mov	r0, r2
 800a050:	f7fe fb11 	bl	8008676 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a054:	4b0a      	ldr	r3, [pc, #40]	; (800a080 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	68ba      	ldr	r2, [r7, #8]
 800a05a:	429a      	cmp	r2, r3
 800a05c:	d202      	bcs.n	800a064 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a05e:	4a08      	ldr	r2, [pc, #32]	; (800a080 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	6013      	str	r3, [r2, #0]
}
 800a064:	bf00      	nop
 800a066:	3710      	adds	r7, #16
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}
 800a06c:	20000de4 	.word	0x20000de4
 800a070:	2000090c 	.word	0x2000090c
 800a074:	20000dcc 	.word	0x20000dcc
 800a078:	20000d9c 	.word	0x20000d9c
 800a07c:	20000d98 	.word	0x20000d98
 800a080:	20000e00 	.word	0x20000e00

0800a084 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b08a      	sub	sp, #40	; 0x28
 800a088:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a08a:	2300      	movs	r3, #0
 800a08c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a08e:	f000 fb07 	bl	800a6a0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a092:	4b1c      	ldr	r3, [pc, #112]	; (800a104 <xTimerCreateTimerTask+0x80>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d021      	beq.n	800a0de <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a09a:	2300      	movs	r3, #0
 800a09c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a0a2:	1d3a      	adds	r2, r7, #4
 800a0a4:	f107 0108 	add.w	r1, r7, #8
 800a0a8:	f107 030c 	add.w	r3, r7, #12
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f7fe fa77 	bl	80085a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a0b2:	6879      	ldr	r1, [r7, #4]
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	68fa      	ldr	r2, [r7, #12]
 800a0b8:	9202      	str	r2, [sp, #8]
 800a0ba:	9301      	str	r3, [sp, #4]
 800a0bc:	2302      	movs	r3, #2
 800a0be:	9300      	str	r3, [sp, #0]
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	460a      	mov	r2, r1
 800a0c4:	4910      	ldr	r1, [pc, #64]	; (800a108 <xTimerCreateTimerTask+0x84>)
 800a0c6:	4811      	ldr	r0, [pc, #68]	; (800a10c <xTimerCreateTimerTask+0x88>)
 800a0c8:	f7ff f8de 	bl	8009288 <xTaskCreateStatic>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	4a10      	ldr	r2, [pc, #64]	; (800a110 <xTimerCreateTimerTask+0x8c>)
 800a0d0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a0d2:	4b0f      	ldr	r3, [pc, #60]	; (800a110 <xTimerCreateTimerTask+0x8c>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d001      	beq.n	800a0de <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a0da:	2301      	movs	r3, #1
 800a0dc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d10a      	bne.n	800a0fa <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e8:	f383 8811 	msr	BASEPRI, r3
 800a0ec:	f3bf 8f6f 	isb	sy
 800a0f0:	f3bf 8f4f 	dsb	sy
 800a0f4:	613b      	str	r3, [r7, #16]
}
 800a0f6:	bf00      	nop
 800a0f8:	e7fe      	b.n	800a0f8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a0fa:	697b      	ldr	r3, [r7, #20]
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3718      	adds	r7, #24
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}
 800a104:	20000e3c 	.word	0x20000e3c
 800a108:	0800b880 	.word	0x0800b880
 800a10c:	0800a249 	.word	0x0800a249
 800a110:	20000e40 	.word	0x20000e40

0800a114 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b08a      	sub	sp, #40	; 0x28
 800a118:	af00      	add	r7, sp, #0
 800a11a:	60f8      	str	r0, [r7, #12]
 800a11c:	60b9      	str	r1, [r7, #8]
 800a11e:	607a      	str	r2, [r7, #4]
 800a120:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a122:	2300      	movs	r3, #0
 800a124:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d10a      	bne.n	800a142 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a130:	f383 8811 	msr	BASEPRI, r3
 800a134:	f3bf 8f6f 	isb	sy
 800a138:	f3bf 8f4f 	dsb	sy
 800a13c:	623b      	str	r3, [r7, #32]
}
 800a13e:	bf00      	nop
 800a140:	e7fe      	b.n	800a140 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a142:	4b1a      	ldr	r3, [pc, #104]	; (800a1ac <xTimerGenericCommand+0x98>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d02a      	beq.n	800a1a0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	2b05      	cmp	r3, #5
 800a15a:	dc18      	bgt.n	800a18e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a15c:	f7ff feb2 	bl	8009ec4 <xTaskGetSchedulerState>
 800a160:	4603      	mov	r3, r0
 800a162:	2b02      	cmp	r3, #2
 800a164:	d109      	bne.n	800a17a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a166:	4b11      	ldr	r3, [pc, #68]	; (800a1ac <xTimerGenericCommand+0x98>)
 800a168:	6818      	ldr	r0, [r3, #0]
 800a16a:	f107 0110 	add.w	r1, r7, #16
 800a16e:	2300      	movs	r3, #0
 800a170:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a172:	f7fe fc21 	bl	80089b8 <xQueueGenericSend>
 800a176:	6278      	str	r0, [r7, #36]	; 0x24
 800a178:	e012      	b.n	800a1a0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a17a:	4b0c      	ldr	r3, [pc, #48]	; (800a1ac <xTimerGenericCommand+0x98>)
 800a17c:	6818      	ldr	r0, [r3, #0]
 800a17e:	f107 0110 	add.w	r1, r7, #16
 800a182:	2300      	movs	r3, #0
 800a184:	2200      	movs	r2, #0
 800a186:	f7fe fc17 	bl	80089b8 <xQueueGenericSend>
 800a18a:	6278      	str	r0, [r7, #36]	; 0x24
 800a18c:	e008      	b.n	800a1a0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a18e:	4b07      	ldr	r3, [pc, #28]	; (800a1ac <xTimerGenericCommand+0x98>)
 800a190:	6818      	ldr	r0, [r3, #0]
 800a192:	f107 0110 	add.w	r1, r7, #16
 800a196:	2300      	movs	r3, #0
 800a198:	683a      	ldr	r2, [r7, #0]
 800a19a:	f7fe fd0b 	bl	8008bb4 <xQueueGenericSendFromISR>
 800a19e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3728      	adds	r7, #40	; 0x28
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}
 800a1aa:	bf00      	nop
 800a1ac:	20000e3c 	.word	0x20000e3c

0800a1b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b088      	sub	sp, #32
 800a1b4:	af02      	add	r7, sp, #8
 800a1b6:	6078      	str	r0, [r7, #4]
 800a1b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1ba:	4b22      	ldr	r3, [pc, #136]	; (800a244 <prvProcessExpiredTimer+0x94>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	68db      	ldr	r3, [r3, #12]
 800a1c0:	68db      	ldr	r3, [r3, #12]
 800a1c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a1c4:	697b      	ldr	r3, [r7, #20]
 800a1c6:	3304      	adds	r3, #4
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f7fe fa8d 	bl	80086e8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1d4:	f003 0304 	and.w	r3, r3, #4
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d022      	beq.n	800a222 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	699a      	ldr	r2, [r3, #24]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	18d1      	adds	r1, r2, r3
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	683a      	ldr	r2, [r7, #0]
 800a1e8:	6978      	ldr	r0, [r7, #20]
 800a1ea:	f000 f8d1 	bl	800a390 <prvInsertTimerInActiveList>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d01f      	beq.n	800a234 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	9300      	str	r3, [sp, #0]
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	687a      	ldr	r2, [r7, #4]
 800a1fc:	2100      	movs	r1, #0
 800a1fe:	6978      	ldr	r0, [r7, #20]
 800a200:	f7ff ff88 	bl	800a114 <xTimerGenericCommand>
 800a204:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d113      	bne.n	800a234 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a210:	f383 8811 	msr	BASEPRI, r3
 800a214:	f3bf 8f6f 	isb	sy
 800a218:	f3bf 8f4f 	dsb	sy
 800a21c:	60fb      	str	r3, [r7, #12]
}
 800a21e:	bf00      	nop
 800a220:	e7fe      	b.n	800a220 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a228:	f023 0301 	bic.w	r3, r3, #1
 800a22c:	b2da      	uxtb	r2, r3
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	6a1b      	ldr	r3, [r3, #32]
 800a238:	6978      	ldr	r0, [r7, #20]
 800a23a:	4798      	blx	r3
}
 800a23c:	bf00      	nop
 800a23e:	3718      	adds	r7, #24
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}
 800a244:	20000e34 	.word	0x20000e34

0800a248 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b084      	sub	sp, #16
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a250:	f107 0308 	add.w	r3, r7, #8
 800a254:	4618      	mov	r0, r3
 800a256:	f000 f857 	bl	800a308 <prvGetNextExpireTime>
 800a25a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	4619      	mov	r1, r3
 800a260:	68f8      	ldr	r0, [r7, #12]
 800a262:	f000 f803 	bl	800a26c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a266:	f000 f8d5 	bl	800a414 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a26a:	e7f1      	b.n	800a250 <prvTimerTask+0x8>

0800a26c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b084      	sub	sp, #16
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a276:	f7ff fa43 	bl	8009700 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a27a:	f107 0308 	add.w	r3, r7, #8
 800a27e:	4618      	mov	r0, r3
 800a280:	f000 f866 	bl	800a350 <prvSampleTimeNow>
 800a284:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d130      	bne.n	800a2ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d10a      	bne.n	800a2a8 <prvProcessTimerOrBlockTask+0x3c>
 800a292:	687a      	ldr	r2, [r7, #4]
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	429a      	cmp	r2, r3
 800a298:	d806      	bhi.n	800a2a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a29a:	f7ff fa3f 	bl	800971c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a29e:	68f9      	ldr	r1, [r7, #12]
 800a2a0:	6878      	ldr	r0, [r7, #4]
 800a2a2:	f7ff ff85 	bl	800a1b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a2a6:	e024      	b.n	800a2f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d008      	beq.n	800a2c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a2ae:	4b13      	ldr	r3, [pc, #76]	; (800a2fc <prvProcessTimerOrBlockTask+0x90>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d101      	bne.n	800a2bc <prvProcessTimerOrBlockTask+0x50>
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	e000      	b.n	800a2be <prvProcessTimerOrBlockTask+0x52>
 800a2bc:	2300      	movs	r3, #0
 800a2be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a2c0:	4b0f      	ldr	r3, [pc, #60]	; (800a300 <prvProcessTimerOrBlockTask+0x94>)
 800a2c2:	6818      	ldr	r0, [r3, #0]
 800a2c4:	687a      	ldr	r2, [r7, #4]
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	1ad3      	subs	r3, r2, r3
 800a2ca:	683a      	ldr	r2, [r7, #0]
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	f7fe ffa7 	bl	8009220 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a2d2:	f7ff fa23 	bl	800971c <xTaskResumeAll>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d10a      	bne.n	800a2f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a2dc:	4b09      	ldr	r3, [pc, #36]	; (800a304 <prvProcessTimerOrBlockTask+0x98>)
 800a2de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2e2:	601a      	str	r2, [r3, #0]
 800a2e4:	f3bf 8f4f 	dsb	sy
 800a2e8:	f3bf 8f6f 	isb	sy
}
 800a2ec:	e001      	b.n	800a2f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a2ee:	f7ff fa15 	bl	800971c <xTaskResumeAll>
}
 800a2f2:	bf00      	nop
 800a2f4:	3710      	adds	r7, #16
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}
 800a2fa:	bf00      	nop
 800a2fc:	20000e38 	.word	0x20000e38
 800a300:	20000e3c 	.word	0x20000e3c
 800a304:	e000ed04 	.word	0xe000ed04

0800a308 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a308:	b480      	push	{r7}
 800a30a:	b085      	sub	sp, #20
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a310:	4b0e      	ldr	r3, [pc, #56]	; (800a34c <prvGetNextExpireTime+0x44>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d101      	bne.n	800a31e <prvGetNextExpireTime+0x16>
 800a31a:	2201      	movs	r2, #1
 800a31c:	e000      	b.n	800a320 <prvGetNextExpireTime+0x18>
 800a31e:	2200      	movs	r2, #0
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d105      	bne.n	800a338 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a32c:	4b07      	ldr	r3, [pc, #28]	; (800a34c <prvGetNextExpireTime+0x44>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	68db      	ldr	r3, [r3, #12]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	60fb      	str	r3, [r7, #12]
 800a336:	e001      	b.n	800a33c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a338:	2300      	movs	r3, #0
 800a33a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a33c:	68fb      	ldr	r3, [r7, #12]
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3714      	adds	r7, #20
 800a342:	46bd      	mov	sp, r7
 800a344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a348:	4770      	bx	lr
 800a34a:	bf00      	nop
 800a34c:	20000e34 	.word	0x20000e34

0800a350 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b084      	sub	sp, #16
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a358:	f7ff fa7e 	bl	8009858 <xTaskGetTickCount>
 800a35c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a35e:	4b0b      	ldr	r3, [pc, #44]	; (800a38c <prvSampleTimeNow+0x3c>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	68fa      	ldr	r2, [r7, #12]
 800a364:	429a      	cmp	r2, r3
 800a366:	d205      	bcs.n	800a374 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a368:	f000 f936 	bl	800a5d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2201      	movs	r2, #1
 800a370:	601a      	str	r2, [r3, #0]
 800a372:	e002      	b.n	800a37a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2200      	movs	r2, #0
 800a378:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a37a:	4a04      	ldr	r2, [pc, #16]	; (800a38c <prvSampleTimeNow+0x3c>)
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a380:	68fb      	ldr	r3, [r7, #12]
}
 800a382:	4618      	mov	r0, r3
 800a384:	3710      	adds	r7, #16
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}
 800a38a:	bf00      	nop
 800a38c:	20000e44 	.word	0x20000e44

0800a390 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b086      	sub	sp, #24
 800a394:	af00      	add	r7, sp, #0
 800a396:	60f8      	str	r0, [r7, #12]
 800a398:	60b9      	str	r1, [r7, #8]
 800a39a:	607a      	str	r2, [r7, #4]
 800a39c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	68ba      	ldr	r2, [r7, #8]
 800a3a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	68fa      	ldr	r2, [r7, #12]
 800a3ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a3ae:	68ba      	ldr	r2, [r7, #8]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	429a      	cmp	r2, r3
 800a3b4:	d812      	bhi.n	800a3dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3b6:	687a      	ldr	r2, [r7, #4]
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	1ad2      	subs	r2, r2, r3
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	699b      	ldr	r3, [r3, #24]
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d302      	bcc.n	800a3ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	617b      	str	r3, [r7, #20]
 800a3c8:	e01b      	b.n	800a402 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a3ca:	4b10      	ldr	r3, [pc, #64]	; (800a40c <prvInsertTimerInActiveList+0x7c>)
 800a3cc:	681a      	ldr	r2, [r3, #0]
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	3304      	adds	r3, #4
 800a3d2:	4619      	mov	r1, r3
 800a3d4:	4610      	mov	r0, r2
 800a3d6:	f7fe f94e 	bl	8008676 <vListInsert>
 800a3da:	e012      	b.n	800a402 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a3dc:	687a      	ldr	r2, [r7, #4]
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	d206      	bcs.n	800a3f2 <prvInsertTimerInActiveList+0x62>
 800a3e4:	68ba      	ldr	r2, [r7, #8]
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	429a      	cmp	r2, r3
 800a3ea:	d302      	bcc.n	800a3f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	617b      	str	r3, [r7, #20]
 800a3f0:	e007      	b.n	800a402 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a3f2:	4b07      	ldr	r3, [pc, #28]	; (800a410 <prvInsertTimerInActiveList+0x80>)
 800a3f4:	681a      	ldr	r2, [r3, #0]
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	3304      	adds	r3, #4
 800a3fa:	4619      	mov	r1, r3
 800a3fc:	4610      	mov	r0, r2
 800a3fe:	f7fe f93a 	bl	8008676 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a402:	697b      	ldr	r3, [r7, #20]
}
 800a404:	4618      	mov	r0, r3
 800a406:	3718      	adds	r7, #24
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}
 800a40c:	20000e38 	.word	0x20000e38
 800a410:	20000e34 	.word	0x20000e34

0800a414 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b08e      	sub	sp, #56	; 0x38
 800a418:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a41a:	e0ca      	b.n	800a5b2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	da18      	bge.n	800a454 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a422:	1d3b      	adds	r3, r7, #4
 800a424:	3304      	adds	r3, #4
 800a426:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d10a      	bne.n	800a444 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a432:	f383 8811 	msr	BASEPRI, r3
 800a436:	f3bf 8f6f 	isb	sy
 800a43a:	f3bf 8f4f 	dsb	sy
 800a43e:	61fb      	str	r3, [r7, #28]
}
 800a440:	bf00      	nop
 800a442:	e7fe      	b.n	800a442 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a44a:	6850      	ldr	r0, [r2, #4]
 800a44c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a44e:	6892      	ldr	r2, [r2, #8]
 800a450:	4611      	mov	r1, r2
 800a452:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2b00      	cmp	r3, #0
 800a458:	f2c0 80ab 	blt.w	800a5b2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a462:	695b      	ldr	r3, [r3, #20]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d004      	beq.n	800a472 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a46a:	3304      	adds	r3, #4
 800a46c:	4618      	mov	r0, r3
 800a46e:	f7fe f93b 	bl	80086e8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a472:	463b      	mov	r3, r7
 800a474:	4618      	mov	r0, r3
 800a476:	f7ff ff6b 	bl	800a350 <prvSampleTimeNow>
 800a47a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2b09      	cmp	r3, #9
 800a480:	f200 8096 	bhi.w	800a5b0 <prvProcessReceivedCommands+0x19c>
 800a484:	a201      	add	r2, pc, #4	; (adr r2, 800a48c <prvProcessReceivedCommands+0x78>)
 800a486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a48a:	bf00      	nop
 800a48c:	0800a4b5 	.word	0x0800a4b5
 800a490:	0800a4b5 	.word	0x0800a4b5
 800a494:	0800a4b5 	.word	0x0800a4b5
 800a498:	0800a529 	.word	0x0800a529
 800a49c:	0800a53d 	.word	0x0800a53d
 800a4a0:	0800a587 	.word	0x0800a587
 800a4a4:	0800a4b5 	.word	0x0800a4b5
 800a4a8:	0800a4b5 	.word	0x0800a4b5
 800a4ac:	0800a529 	.word	0x0800a529
 800a4b0:	0800a53d 	.word	0x0800a53d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4ba:	f043 0301 	orr.w	r3, r3, #1
 800a4be:	b2da      	uxtb	r2, r3
 800a4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a4c6:	68ba      	ldr	r2, [r7, #8]
 800a4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ca:	699b      	ldr	r3, [r3, #24]
 800a4cc:	18d1      	adds	r1, r2, r3
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4d4:	f7ff ff5c 	bl	800a390 <prvInsertTimerInActiveList>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d069      	beq.n	800a5b2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a4de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e0:	6a1b      	ldr	r3, [r3, #32]
 800a4e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4ec:	f003 0304 	and.w	r3, r3, #4
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d05e      	beq.n	800a5b2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a4f4:	68ba      	ldr	r2, [r7, #8]
 800a4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f8:	699b      	ldr	r3, [r3, #24]
 800a4fa:	441a      	add	r2, r3
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	9300      	str	r3, [sp, #0]
 800a500:	2300      	movs	r3, #0
 800a502:	2100      	movs	r1, #0
 800a504:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a506:	f7ff fe05 	bl	800a114 <xTimerGenericCommand>
 800a50a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a50c:	6a3b      	ldr	r3, [r7, #32]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d14f      	bne.n	800a5b2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a512:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a516:	f383 8811 	msr	BASEPRI, r3
 800a51a:	f3bf 8f6f 	isb	sy
 800a51e:	f3bf 8f4f 	dsb	sy
 800a522:	61bb      	str	r3, [r7, #24]
}
 800a524:	bf00      	nop
 800a526:	e7fe      	b.n	800a526 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a52a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a52e:	f023 0301 	bic.w	r3, r3, #1
 800a532:	b2da      	uxtb	r2, r3
 800a534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a536:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a53a:	e03a      	b.n	800a5b2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a53c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a53e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a542:	f043 0301 	orr.w	r3, r3, #1
 800a546:	b2da      	uxtb	r2, r3
 800a548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a54a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a54e:	68ba      	ldr	r2, [r7, #8]
 800a550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a552:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a556:	699b      	ldr	r3, [r3, #24]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d10a      	bne.n	800a572 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a55c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a560:	f383 8811 	msr	BASEPRI, r3
 800a564:	f3bf 8f6f 	isb	sy
 800a568:	f3bf 8f4f 	dsb	sy
 800a56c:	617b      	str	r3, [r7, #20]
}
 800a56e:	bf00      	nop
 800a570:	e7fe      	b.n	800a570 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a574:	699a      	ldr	r2, [r3, #24]
 800a576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a578:	18d1      	adds	r1, r2, r3
 800a57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a57c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a57e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a580:	f7ff ff06 	bl	800a390 <prvInsertTimerInActiveList>
					break;
 800a584:	e015      	b.n	800a5b2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a588:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a58c:	f003 0302 	and.w	r3, r3, #2
 800a590:	2b00      	cmp	r3, #0
 800a592:	d103      	bne.n	800a59c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a594:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a596:	f000 fbdb 	bl	800ad50 <vPortFree>
 800a59a:	e00a      	b.n	800a5b2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a59c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a59e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a5a2:	f023 0301 	bic.w	r3, r3, #1
 800a5a6:	b2da      	uxtb	r2, r3
 800a5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a5ae:	e000      	b.n	800a5b2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800a5b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a5b2:	4b08      	ldr	r3, [pc, #32]	; (800a5d4 <prvProcessReceivedCommands+0x1c0>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	1d39      	adds	r1, r7, #4
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f7fe fb96 	bl	8008cec <xQueueReceive>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	f47f af2a 	bne.w	800a41c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a5c8:	bf00      	nop
 800a5ca:	bf00      	nop
 800a5cc:	3730      	adds	r7, #48	; 0x30
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
 800a5d2:	bf00      	nop
 800a5d4:	20000e3c 	.word	0x20000e3c

0800a5d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b088      	sub	sp, #32
 800a5dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a5de:	e048      	b.n	800a672 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a5e0:	4b2d      	ldr	r3, [pc, #180]	; (800a698 <prvSwitchTimerLists+0xc0>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	68db      	ldr	r3, [r3, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5ea:	4b2b      	ldr	r3, [pc, #172]	; (800a698 <prvSwitchTimerLists+0xc0>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	68db      	ldr	r3, [r3, #12]
 800a5f0:	68db      	ldr	r3, [r3, #12]
 800a5f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	3304      	adds	r3, #4
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f7fe f875 	bl	80086e8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	6a1b      	ldr	r3, [r3, #32]
 800a602:	68f8      	ldr	r0, [r7, #12]
 800a604:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a60c:	f003 0304 	and.w	r3, r3, #4
 800a610:	2b00      	cmp	r3, #0
 800a612:	d02e      	beq.n	800a672 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	699b      	ldr	r3, [r3, #24]
 800a618:	693a      	ldr	r2, [r7, #16]
 800a61a:	4413      	add	r3, r2
 800a61c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a61e:	68ba      	ldr	r2, [r7, #8]
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	429a      	cmp	r2, r3
 800a624:	d90e      	bls.n	800a644 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	68ba      	ldr	r2, [r7, #8]
 800a62a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	68fa      	ldr	r2, [r7, #12]
 800a630:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a632:	4b19      	ldr	r3, [pc, #100]	; (800a698 <prvSwitchTimerLists+0xc0>)
 800a634:	681a      	ldr	r2, [r3, #0]
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	3304      	adds	r3, #4
 800a63a:	4619      	mov	r1, r3
 800a63c:	4610      	mov	r0, r2
 800a63e:	f7fe f81a 	bl	8008676 <vListInsert>
 800a642:	e016      	b.n	800a672 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a644:	2300      	movs	r3, #0
 800a646:	9300      	str	r3, [sp, #0]
 800a648:	2300      	movs	r3, #0
 800a64a:	693a      	ldr	r2, [r7, #16]
 800a64c:	2100      	movs	r1, #0
 800a64e:	68f8      	ldr	r0, [r7, #12]
 800a650:	f7ff fd60 	bl	800a114 <xTimerGenericCommand>
 800a654:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d10a      	bne.n	800a672 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a65c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a660:	f383 8811 	msr	BASEPRI, r3
 800a664:	f3bf 8f6f 	isb	sy
 800a668:	f3bf 8f4f 	dsb	sy
 800a66c:	603b      	str	r3, [r7, #0]
}
 800a66e:	bf00      	nop
 800a670:	e7fe      	b.n	800a670 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a672:	4b09      	ldr	r3, [pc, #36]	; (800a698 <prvSwitchTimerLists+0xc0>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d1b1      	bne.n	800a5e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a67c:	4b06      	ldr	r3, [pc, #24]	; (800a698 <prvSwitchTimerLists+0xc0>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a682:	4b06      	ldr	r3, [pc, #24]	; (800a69c <prvSwitchTimerLists+0xc4>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	4a04      	ldr	r2, [pc, #16]	; (800a698 <prvSwitchTimerLists+0xc0>)
 800a688:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a68a:	4a04      	ldr	r2, [pc, #16]	; (800a69c <prvSwitchTimerLists+0xc4>)
 800a68c:	697b      	ldr	r3, [r7, #20]
 800a68e:	6013      	str	r3, [r2, #0]
}
 800a690:	bf00      	nop
 800a692:	3718      	adds	r7, #24
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}
 800a698:	20000e34 	.word	0x20000e34
 800a69c:	20000e38 	.word	0x20000e38

0800a6a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b082      	sub	sp, #8
 800a6a4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a6a6:	f000 f965 	bl	800a974 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a6aa:	4b15      	ldr	r3, [pc, #84]	; (800a700 <prvCheckForValidListAndQueue+0x60>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d120      	bne.n	800a6f4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a6b2:	4814      	ldr	r0, [pc, #80]	; (800a704 <prvCheckForValidListAndQueue+0x64>)
 800a6b4:	f7fd ff8e 	bl	80085d4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a6b8:	4813      	ldr	r0, [pc, #76]	; (800a708 <prvCheckForValidListAndQueue+0x68>)
 800a6ba:	f7fd ff8b 	bl	80085d4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a6be:	4b13      	ldr	r3, [pc, #76]	; (800a70c <prvCheckForValidListAndQueue+0x6c>)
 800a6c0:	4a10      	ldr	r2, [pc, #64]	; (800a704 <prvCheckForValidListAndQueue+0x64>)
 800a6c2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a6c4:	4b12      	ldr	r3, [pc, #72]	; (800a710 <prvCheckForValidListAndQueue+0x70>)
 800a6c6:	4a10      	ldr	r2, [pc, #64]	; (800a708 <prvCheckForValidListAndQueue+0x68>)
 800a6c8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	9300      	str	r3, [sp, #0]
 800a6ce:	4b11      	ldr	r3, [pc, #68]	; (800a714 <prvCheckForValidListAndQueue+0x74>)
 800a6d0:	4a11      	ldr	r2, [pc, #68]	; (800a718 <prvCheckForValidListAndQueue+0x78>)
 800a6d2:	2110      	movs	r1, #16
 800a6d4:	200a      	movs	r0, #10
 800a6d6:	f7fe f899 	bl	800880c <xQueueGenericCreateStatic>
 800a6da:	4603      	mov	r3, r0
 800a6dc:	4a08      	ldr	r2, [pc, #32]	; (800a700 <prvCheckForValidListAndQueue+0x60>)
 800a6de:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a6e0:	4b07      	ldr	r3, [pc, #28]	; (800a700 <prvCheckForValidListAndQueue+0x60>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d005      	beq.n	800a6f4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a6e8:	4b05      	ldr	r3, [pc, #20]	; (800a700 <prvCheckForValidListAndQueue+0x60>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	490b      	ldr	r1, [pc, #44]	; (800a71c <prvCheckForValidListAndQueue+0x7c>)
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f7fe fd6c 	bl	80091cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a6f4:	f000 f96e 	bl	800a9d4 <vPortExitCritical>
}
 800a6f8:	bf00      	nop
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}
 800a6fe:	bf00      	nop
 800a700:	20000e3c 	.word	0x20000e3c
 800a704:	20000e0c 	.word	0x20000e0c
 800a708:	20000e20 	.word	0x20000e20
 800a70c:	20000e34 	.word	0x20000e34
 800a710:	20000e38 	.word	0x20000e38
 800a714:	20000ee8 	.word	0x20000ee8
 800a718:	20000e48 	.word	0x20000e48
 800a71c:	0800b888 	.word	0x0800b888

0800a720 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a720:	b480      	push	{r7}
 800a722:	b085      	sub	sp, #20
 800a724:	af00      	add	r7, sp, #0
 800a726:	60f8      	str	r0, [r7, #12]
 800a728:	60b9      	str	r1, [r7, #8]
 800a72a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	3b04      	subs	r3, #4
 800a730:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a738:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	3b04      	subs	r3, #4
 800a73e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	f023 0201 	bic.w	r2, r3, #1
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	3b04      	subs	r3, #4
 800a74e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a750:	4a0c      	ldr	r2, [pc, #48]	; (800a784 <pxPortInitialiseStack+0x64>)
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	3b14      	subs	r3, #20
 800a75a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a75c:	687a      	ldr	r2, [r7, #4]
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	3b04      	subs	r3, #4
 800a766:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	f06f 0202 	mvn.w	r2, #2
 800a76e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	3b20      	subs	r3, #32
 800a774:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a776:	68fb      	ldr	r3, [r7, #12]
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3714      	adds	r7, #20
 800a77c:	46bd      	mov	sp, r7
 800a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a782:	4770      	bx	lr
 800a784:	0800a789 	.word	0x0800a789

0800a788 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a788:	b480      	push	{r7}
 800a78a:	b085      	sub	sp, #20
 800a78c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a78e:	2300      	movs	r3, #0
 800a790:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a792:	4b12      	ldr	r3, [pc, #72]	; (800a7dc <prvTaskExitError+0x54>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a79a:	d00a      	beq.n	800a7b2 <prvTaskExitError+0x2a>
	__asm volatile
 800a79c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a0:	f383 8811 	msr	BASEPRI, r3
 800a7a4:	f3bf 8f6f 	isb	sy
 800a7a8:	f3bf 8f4f 	dsb	sy
 800a7ac:	60fb      	str	r3, [r7, #12]
}
 800a7ae:	bf00      	nop
 800a7b0:	e7fe      	b.n	800a7b0 <prvTaskExitError+0x28>
	__asm volatile
 800a7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b6:	f383 8811 	msr	BASEPRI, r3
 800a7ba:	f3bf 8f6f 	isb	sy
 800a7be:	f3bf 8f4f 	dsb	sy
 800a7c2:	60bb      	str	r3, [r7, #8]
}
 800a7c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a7c6:	bf00      	nop
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d0fc      	beq.n	800a7c8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a7ce:	bf00      	nop
 800a7d0:	bf00      	nop
 800a7d2:	3714      	adds	r7, #20
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr
 800a7dc:	2000002c 	.word	0x2000002c

0800a7e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a7e0:	4b07      	ldr	r3, [pc, #28]	; (800a800 <pxCurrentTCBConst2>)
 800a7e2:	6819      	ldr	r1, [r3, #0]
 800a7e4:	6808      	ldr	r0, [r1, #0]
 800a7e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7ea:	f380 8809 	msr	PSP, r0
 800a7ee:	f3bf 8f6f 	isb	sy
 800a7f2:	f04f 0000 	mov.w	r0, #0
 800a7f6:	f380 8811 	msr	BASEPRI, r0
 800a7fa:	4770      	bx	lr
 800a7fc:	f3af 8000 	nop.w

0800a800 <pxCurrentTCBConst2>:
 800a800:	2000090c 	.word	0x2000090c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a804:	bf00      	nop
 800a806:	bf00      	nop

0800a808 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a808:	4808      	ldr	r0, [pc, #32]	; (800a82c <prvPortStartFirstTask+0x24>)
 800a80a:	6800      	ldr	r0, [r0, #0]
 800a80c:	6800      	ldr	r0, [r0, #0]
 800a80e:	f380 8808 	msr	MSP, r0
 800a812:	f04f 0000 	mov.w	r0, #0
 800a816:	f380 8814 	msr	CONTROL, r0
 800a81a:	b662      	cpsie	i
 800a81c:	b661      	cpsie	f
 800a81e:	f3bf 8f4f 	dsb	sy
 800a822:	f3bf 8f6f 	isb	sy
 800a826:	df00      	svc	0
 800a828:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a82a:	bf00      	nop
 800a82c:	e000ed08 	.word	0xe000ed08

0800a830 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b086      	sub	sp, #24
 800a834:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a836:	4b46      	ldr	r3, [pc, #280]	; (800a950 <xPortStartScheduler+0x120>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4a46      	ldr	r2, [pc, #280]	; (800a954 <xPortStartScheduler+0x124>)
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d10a      	bne.n	800a856 <xPortStartScheduler+0x26>
	__asm volatile
 800a840:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a844:	f383 8811 	msr	BASEPRI, r3
 800a848:	f3bf 8f6f 	isb	sy
 800a84c:	f3bf 8f4f 	dsb	sy
 800a850:	613b      	str	r3, [r7, #16]
}
 800a852:	bf00      	nop
 800a854:	e7fe      	b.n	800a854 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a856:	4b3e      	ldr	r3, [pc, #248]	; (800a950 <xPortStartScheduler+0x120>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	4a3f      	ldr	r2, [pc, #252]	; (800a958 <xPortStartScheduler+0x128>)
 800a85c:	4293      	cmp	r3, r2
 800a85e:	d10a      	bne.n	800a876 <xPortStartScheduler+0x46>
	__asm volatile
 800a860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a864:	f383 8811 	msr	BASEPRI, r3
 800a868:	f3bf 8f6f 	isb	sy
 800a86c:	f3bf 8f4f 	dsb	sy
 800a870:	60fb      	str	r3, [r7, #12]
}
 800a872:	bf00      	nop
 800a874:	e7fe      	b.n	800a874 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a876:	4b39      	ldr	r3, [pc, #228]	; (800a95c <xPortStartScheduler+0x12c>)
 800a878:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	781b      	ldrb	r3, [r3, #0]
 800a87e:	b2db      	uxtb	r3, r3
 800a880:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	22ff      	movs	r2, #255	; 0xff
 800a886:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	781b      	ldrb	r3, [r3, #0]
 800a88c:	b2db      	uxtb	r3, r3
 800a88e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a890:	78fb      	ldrb	r3, [r7, #3]
 800a892:	b2db      	uxtb	r3, r3
 800a894:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a898:	b2da      	uxtb	r2, r3
 800a89a:	4b31      	ldr	r3, [pc, #196]	; (800a960 <xPortStartScheduler+0x130>)
 800a89c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a89e:	4b31      	ldr	r3, [pc, #196]	; (800a964 <xPortStartScheduler+0x134>)
 800a8a0:	2207      	movs	r2, #7
 800a8a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a8a4:	e009      	b.n	800a8ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a8a6:	4b2f      	ldr	r3, [pc, #188]	; (800a964 <xPortStartScheduler+0x134>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	3b01      	subs	r3, #1
 800a8ac:	4a2d      	ldr	r2, [pc, #180]	; (800a964 <xPortStartScheduler+0x134>)
 800a8ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a8b0:	78fb      	ldrb	r3, [r7, #3]
 800a8b2:	b2db      	uxtb	r3, r3
 800a8b4:	005b      	lsls	r3, r3, #1
 800a8b6:	b2db      	uxtb	r3, r3
 800a8b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a8ba:	78fb      	ldrb	r3, [r7, #3]
 800a8bc:	b2db      	uxtb	r3, r3
 800a8be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8c2:	2b80      	cmp	r3, #128	; 0x80
 800a8c4:	d0ef      	beq.n	800a8a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a8c6:	4b27      	ldr	r3, [pc, #156]	; (800a964 <xPortStartScheduler+0x134>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f1c3 0307 	rsb	r3, r3, #7
 800a8ce:	2b04      	cmp	r3, #4
 800a8d0:	d00a      	beq.n	800a8e8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a8d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d6:	f383 8811 	msr	BASEPRI, r3
 800a8da:	f3bf 8f6f 	isb	sy
 800a8de:	f3bf 8f4f 	dsb	sy
 800a8e2:	60bb      	str	r3, [r7, #8]
}
 800a8e4:	bf00      	nop
 800a8e6:	e7fe      	b.n	800a8e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a8e8:	4b1e      	ldr	r3, [pc, #120]	; (800a964 <xPortStartScheduler+0x134>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	021b      	lsls	r3, r3, #8
 800a8ee:	4a1d      	ldr	r2, [pc, #116]	; (800a964 <xPortStartScheduler+0x134>)
 800a8f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a8f2:	4b1c      	ldr	r3, [pc, #112]	; (800a964 <xPortStartScheduler+0x134>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a8fa:	4a1a      	ldr	r2, [pc, #104]	; (800a964 <xPortStartScheduler+0x134>)
 800a8fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	b2da      	uxtb	r2, r3
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a906:	4b18      	ldr	r3, [pc, #96]	; (800a968 <xPortStartScheduler+0x138>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	4a17      	ldr	r2, [pc, #92]	; (800a968 <xPortStartScheduler+0x138>)
 800a90c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a910:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a912:	4b15      	ldr	r3, [pc, #84]	; (800a968 <xPortStartScheduler+0x138>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	4a14      	ldr	r2, [pc, #80]	; (800a968 <xPortStartScheduler+0x138>)
 800a918:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a91c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a91e:	f000 f8dd 	bl	800aadc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a922:	4b12      	ldr	r3, [pc, #72]	; (800a96c <xPortStartScheduler+0x13c>)
 800a924:	2200      	movs	r2, #0
 800a926:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a928:	f000 f8fc 	bl	800ab24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a92c:	4b10      	ldr	r3, [pc, #64]	; (800a970 <xPortStartScheduler+0x140>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	4a0f      	ldr	r2, [pc, #60]	; (800a970 <xPortStartScheduler+0x140>)
 800a932:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a936:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a938:	f7ff ff66 	bl	800a808 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a93c:	f7ff f856 	bl	80099ec <vTaskSwitchContext>
	prvTaskExitError();
 800a940:	f7ff ff22 	bl	800a788 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a944:	2300      	movs	r3, #0
}
 800a946:	4618      	mov	r0, r3
 800a948:	3718      	adds	r7, #24
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}
 800a94e:	bf00      	nop
 800a950:	e000ed00 	.word	0xe000ed00
 800a954:	410fc271 	.word	0x410fc271
 800a958:	410fc270 	.word	0x410fc270
 800a95c:	e000e400 	.word	0xe000e400
 800a960:	20000f38 	.word	0x20000f38
 800a964:	20000f3c 	.word	0x20000f3c
 800a968:	e000ed20 	.word	0xe000ed20
 800a96c:	2000002c 	.word	0x2000002c
 800a970:	e000ef34 	.word	0xe000ef34

0800a974 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a974:	b480      	push	{r7}
 800a976:	b083      	sub	sp, #12
 800a978:	af00      	add	r7, sp, #0
	__asm volatile
 800a97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a97e:	f383 8811 	msr	BASEPRI, r3
 800a982:	f3bf 8f6f 	isb	sy
 800a986:	f3bf 8f4f 	dsb	sy
 800a98a:	607b      	str	r3, [r7, #4]
}
 800a98c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a98e:	4b0f      	ldr	r3, [pc, #60]	; (800a9cc <vPortEnterCritical+0x58>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	3301      	adds	r3, #1
 800a994:	4a0d      	ldr	r2, [pc, #52]	; (800a9cc <vPortEnterCritical+0x58>)
 800a996:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a998:	4b0c      	ldr	r3, [pc, #48]	; (800a9cc <vPortEnterCritical+0x58>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	2b01      	cmp	r3, #1
 800a99e:	d10f      	bne.n	800a9c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a9a0:	4b0b      	ldr	r3, [pc, #44]	; (800a9d0 <vPortEnterCritical+0x5c>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	b2db      	uxtb	r3, r3
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d00a      	beq.n	800a9c0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ae:	f383 8811 	msr	BASEPRI, r3
 800a9b2:	f3bf 8f6f 	isb	sy
 800a9b6:	f3bf 8f4f 	dsb	sy
 800a9ba:	603b      	str	r3, [r7, #0]
}
 800a9bc:	bf00      	nop
 800a9be:	e7fe      	b.n	800a9be <vPortEnterCritical+0x4a>
	}
}
 800a9c0:	bf00      	nop
 800a9c2:	370c      	adds	r7, #12
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ca:	4770      	bx	lr
 800a9cc:	2000002c 	.word	0x2000002c
 800a9d0:	e000ed04 	.word	0xe000ed04

0800a9d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b083      	sub	sp, #12
 800a9d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a9da:	4b12      	ldr	r3, [pc, #72]	; (800aa24 <vPortExitCritical+0x50>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d10a      	bne.n	800a9f8 <vPortExitCritical+0x24>
	__asm volatile
 800a9e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9e6:	f383 8811 	msr	BASEPRI, r3
 800a9ea:	f3bf 8f6f 	isb	sy
 800a9ee:	f3bf 8f4f 	dsb	sy
 800a9f2:	607b      	str	r3, [r7, #4]
}
 800a9f4:	bf00      	nop
 800a9f6:	e7fe      	b.n	800a9f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a9f8:	4b0a      	ldr	r3, [pc, #40]	; (800aa24 <vPortExitCritical+0x50>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	3b01      	subs	r3, #1
 800a9fe:	4a09      	ldr	r2, [pc, #36]	; (800aa24 <vPortExitCritical+0x50>)
 800aa00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aa02:	4b08      	ldr	r3, [pc, #32]	; (800aa24 <vPortExitCritical+0x50>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d105      	bne.n	800aa16 <vPortExitCritical+0x42>
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	f383 8811 	msr	BASEPRI, r3
}
 800aa14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800aa16:	bf00      	nop
 800aa18:	370c      	adds	r7, #12
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa20:	4770      	bx	lr
 800aa22:	bf00      	nop
 800aa24:	2000002c 	.word	0x2000002c
	...

0800aa30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aa30:	f3ef 8009 	mrs	r0, PSP
 800aa34:	f3bf 8f6f 	isb	sy
 800aa38:	4b15      	ldr	r3, [pc, #84]	; (800aa90 <pxCurrentTCBConst>)
 800aa3a:	681a      	ldr	r2, [r3, #0]
 800aa3c:	f01e 0f10 	tst.w	lr, #16
 800aa40:	bf08      	it	eq
 800aa42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aa46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa4a:	6010      	str	r0, [r2, #0]
 800aa4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aa50:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aa54:	f380 8811 	msr	BASEPRI, r0
 800aa58:	f3bf 8f4f 	dsb	sy
 800aa5c:	f3bf 8f6f 	isb	sy
 800aa60:	f7fe ffc4 	bl	80099ec <vTaskSwitchContext>
 800aa64:	f04f 0000 	mov.w	r0, #0
 800aa68:	f380 8811 	msr	BASEPRI, r0
 800aa6c:	bc09      	pop	{r0, r3}
 800aa6e:	6819      	ldr	r1, [r3, #0]
 800aa70:	6808      	ldr	r0, [r1, #0]
 800aa72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa76:	f01e 0f10 	tst.w	lr, #16
 800aa7a:	bf08      	it	eq
 800aa7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aa80:	f380 8809 	msr	PSP, r0
 800aa84:	f3bf 8f6f 	isb	sy
 800aa88:	4770      	bx	lr
 800aa8a:	bf00      	nop
 800aa8c:	f3af 8000 	nop.w

0800aa90 <pxCurrentTCBConst>:
 800aa90:	2000090c 	.word	0x2000090c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aa94:	bf00      	nop
 800aa96:	bf00      	nop

0800aa98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b082      	sub	sp, #8
 800aa9c:	af00      	add	r7, sp, #0
	__asm volatile
 800aa9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa2:	f383 8811 	msr	BASEPRI, r3
 800aaa6:	f3bf 8f6f 	isb	sy
 800aaaa:	f3bf 8f4f 	dsb	sy
 800aaae:	607b      	str	r3, [r7, #4]
}
 800aab0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aab2:	f7fe fee1 	bl	8009878 <xTaskIncrementTick>
 800aab6:	4603      	mov	r3, r0
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d003      	beq.n	800aac4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aabc:	4b06      	ldr	r3, [pc, #24]	; (800aad8 <xPortSysTickHandler+0x40>)
 800aabe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aac2:	601a      	str	r2, [r3, #0]
 800aac4:	2300      	movs	r3, #0
 800aac6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	f383 8811 	msr	BASEPRI, r3
}
 800aace:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800aad0:	bf00      	nop
 800aad2:	3708      	adds	r7, #8
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}
 800aad8:	e000ed04 	.word	0xe000ed04

0800aadc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aadc:	b480      	push	{r7}
 800aade:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aae0:	4b0b      	ldr	r3, [pc, #44]	; (800ab10 <vPortSetupTimerInterrupt+0x34>)
 800aae2:	2200      	movs	r2, #0
 800aae4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aae6:	4b0b      	ldr	r3, [pc, #44]	; (800ab14 <vPortSetupTimerInterrupt+0x38>)
 800aae8:	2200      	movs	r2, #0
 800aaea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aaec:	4b0a      	ldr	r3, [pc, #40]	; (800ab18 <vPortSetupTimerInterrupt+0x3c>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	4a0a      	ldr	r2, [pc, #40]	; (800ab1c <vPortSetupTimerInterrupt+0x40>)
 800aaf2:	fba2 2303 	umull	r2, r3, r2, r3
 800aaf6:	099b      	lsrs	r3, r3, #6
 800aaf8:	4a09      	ldr	r2, [pc, #36]	; (800ab20 <vPortSetupTimerInterrupt+0x44>)
 800aafa:	3b01      	subs	r3, #1
 800aafc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aafe:	4b04      	ldr	r3, [pc, #16]	; (800ab10 <vPortSetupTimerInterrupt+0x34>)
 800ab00:	2207      	movs	r2, #7
 800ab02:	601a      	str	r2, [r3, #0]
}
 800ab04:	bf00      	nop
 800ab06:	46bd      	mov	sp, r7
 800ab08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0c:	4770      	bx	lr
 800ab0e:	bf00      	nop
 800ab10:	e000e010 	.word	0xe000e010
 800ab14:	e000e018 	.word	0xe000e018
 800ab18:	20000000 	.word	0x20000000
 800ab1c:	10624dd3 	.word	0x10624dd3
 800ab20:	e000e014 	.word	0xe000e014

0800ab24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ab24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ab34 <vPortEnableVFP+0x10>
 800ab28:	6801      	ldr	r1, [r0, #0]
 800ab2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ab2e:	6001      	str	r1, [r0, #0]
 800ab30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ab32:	bf00      	nop
 800ab34:	e000ed88 	.word	0xe000ed88

0800ab38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ab38:	b480      	push	{r7}
 800ab3a:	b085      	sub	sp, #20
 800ab3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ab3e:	f3ef 8305 	mrs	r3, IPSR
 800ab42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	2b0f      	cmp	r3, #15
 800ab48:	d914      	bls.n	800ab74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ab4a:	4a17      	ldr	r2, [pc, #92]	; (800aba8 <vPortValidateInterruptPriority+0x70>)
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	4413      	add	r3, r2
 800ab50:	781b      	ldrb	r3, [r3, #0]
 800ab52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ab54:	4b15      	ldr	r3, [pc, #84]	; (800abac <vPortValidateInterruptPriority+0x74>)
 800ab56:	781b      	ldrb	r3, [r3, #0]
 800ab58:	7afa      	ldrb	r2, [r7, #11]
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d20a      	bcs.n	800ab74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ab5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab62:	f383 8811 	msr	BASEPRI, r3
 800ab66:	f3bf 8f6f 	isb	sy
 800ab6a:	f3bf 8f4f 	dsb	sy
 800ab6e:	607b      	str	r3, [r7, #4]
}
 800ab70:	bf00      	nop
 800ab72:	e7fe      	b.n	800ab72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ab74:	4b0e      	ldr	r3, [pc, #56]	; (800abb0 <vPortValidateInterruptPriority+0x78>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ab7c:	4b0d      	ldr	r3, [pc, #52]	; (800abb4 <vPortValidateInterruptPriority+0x7c>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	429a      	cmp	r2, r3
 800ab82:	d90a      	bls.n	800ab9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ab84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab88:	f383 8811 	msr	BASEPRI, r3
 800ab8c:	f3bf 8f6f 	isb	sy
 800ab90:	f3bf 8f4f 	dsb	sy
 800ab94:	603b      	str	r3, [r7, #0]
}
 800ab96:	bf00      	nop
 800ab98:	e7fe      	b.n	800ab98 <vPortValidateInterruptPriority+0x60>
	}
 800ab9a:	bf00      	nop
 800ab9c:	3714      	adds	r7, #20
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba4:	4770      	bx	lr
 800aba6:	bf00      	nop
 800aba8:	e000e3f0 	.word	0xe000e3f0
 800abac:	20000f38 	.word	0x20000f38
 800abb0:	e000ed0c 	.word	0xe000ed0c
 800abb4:	20000f3c 	.word	0x20000f3c

0800abb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b08a      	sub	sp, #40	; 0x28
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800abc0:	2300      	movs	r3, #0
 800abc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800abc4:	f7fe fd9c 	bl	8009700 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800abc8:	4b5b      	ldr	r3, [pc, #364]	; (800ad38 <pvPortMalloc+0x180>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d101      	bne.n	800abd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800abd0:	f000 f920 	bl	800ae14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800abd4:	4b59      	ldr	r3, [pc, #356]	; (800ad3c <pvPortMalloc+0x184>)
 800abd6:	681a      	ldr	r2, [r3, #0]
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	4013      	ands	r3, r2
 800abdc:	2b00      	cmp	r3, #0
 800abde:	f040 8093 	bne.w	800ad08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d01d      	beq.n	800ac24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800abe8:	2208      	movs	r2, #8
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	4413      	add	r3, r2
 800abee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f003 0307 	and.w	r3, r3, #7
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d014      	beq.n	800ac24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f023 0307 	bic.w	r3, r3, #7
 800ac00:	3308      	adds	r3, #8
 800ac02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f003 0307 	and.w	r3, r3, #7
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d00a      	beq.n	800ac24 <pvPortMalloc+0x6c>
	__asm volatile
 800ac0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac12:	f383 8811 	msr	BASEPRI, r3
 800ac16:	f3bf 8f6f 	isb	sy
 800ac1a:	f3bf 8f4f 	dsb	sy
 800ac1e:	617b      	str	r3, [r7, #20]
}
 800ac20:	bf00      	nop
 800ac22:	e7fe      	b.n	800ac22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d06e      	beq.n	800ad08 <pvPortMalloc+0x150>
 800ac2a:	4b45      	ldr	r3, [pc, #276]	; (800ad40 <pvPortMalloc+0x188>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	687a      	ldr	r2, [r7, #4]
 800ac30:	429a      	cmp	r2, r3
 800ac32:	d869      	bhi.n	800ad08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ac34:	4b43      	ldr	r3, [pc, #268]	; (800ad44 <pvPortMalloc+0x18c>)
 800ac36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ac38:	4b42      	ldr	r3, [pc, #264]	; (800ad44 <pvPortMalloc+0x18c>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac3e:	e004      	b.n	800ac4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ac40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ac44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	687a      	ldr	r2, [r7, #4]
 800ac50:	429a      	cmp	r2, r3
 800ac52:	d903      	bls.n	800ac5c <pvPortMalloc+0xa4>
 800ac54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d1f1      	bne.n	800ac40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ac5c:	4b36      	ldr	r3, [pc, #216]	; (800ad38 <pvPortMalloc+0x180>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac62:	429a      	cmp	r2, r3
 800ac64:	d050      	beq.n	800ad08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ac66:	6a3b      	ldr	r3, [r7, #32]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	2208      	movs	r2, #8
 800ac6c:	4413      	add	r3, r2
 800ac6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ac70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac72:	681a      	ldr	r2, [r3, #0]
 800ac74:	6a3b      	ldr	r3, [r7, #32]
 800ac76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ac78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac7a:	685a      	ldr	r2, [r3, #4]
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	1ad2      	subs	r2, r2, r3
 800ac80:	2308      	movs	r3, #8
 800ac82:	005b      	lsls	r3, r3, #1
 800ac84:	429a      	cmp	r2, r3
 800ac86:	d91f      	bls.n	800acc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ac88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	4413      	add	r3, r2
 800ac8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac90:	69bb      	ldr	r3, [r7, #24]
 800ac92:	f003 0307 	and.w	r3, r3, #7
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d00a      	beq.n	800acb0 <pvPortMalloc+0xf8>
	__asm volatile
 800ac9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac9e:	f383 8811 	msr	BASEPRI, r3
 800aca2:	f3bf 8f6f 	isb	sy
 800aca6:	f3bf 8f4f 	dsb	sy
 800acaa:	613b      	str	r3, [r7, #16]
}
 800acac:	bf00      	nop
 800acae:	e7fe      	b.n	800acae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800acb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb2:	685a      	ldr	r2, [r3, #4]
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	1ad2      	subs	r2, r2, r3
 800acb8:	69bb      	ldr	r3, [r7, #24]
 800acba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800acbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acbe:	687a      	ldr	r2, [r7, #4]
 800acc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800acc2:	69b8      	ldr	r0, [r7, #24]
 800acc4:	f000 f908 	bl	800aed8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800acc8:	4b1d      	ldr	r3, [pc, #116]	; (800ad40 <pvPortMalloc+0x188>)
 800acca:	681a      	ldr	r2, [r3, #0]
 800accc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acce:	685b      	ldr	r3, [r3, #4]
 800acd0:	1ad3      	subs	r3, r2, r3
 800acd2:	4a1b      	ldr	r2, [pc, #108]	; (800ad40 <pvPortMalloc+0x188>)
 800acd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800acd6:	4b1a      	ldr	r3, [pc, #104]	; (800ad40 <pvPortMalloc+0x188>)
 800acd8:	681a      	ldr	r2, [r3, #0]
 800acda:	4b1b      	ldr	r3, [pc, #108]	; (800ad48 <pvPortMalloc+0x190>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	429a      	cmp	r2, r3
 800ace0:	d203      	bcs.n	800acea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ace2:	4b17      	ldr	r3, [pc, #92]	; (800ad40 <pvPortMalloc+0x188>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	4a18      	ldr	r2, [pc, #96]	; (800ad48 <pvPortMalloc+0x190>)
 800ace8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800acea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acec:	685a      	ldr	r2, [r3, #4]
 800acee:	4b13      	ldr	r3, [pc, #76]	; (800ad3c <pvPortMalloc+0x184>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	431a      	orrs	r2, r3
 800acf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800acf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acfa:	2200      	movs	r2, #0
 800acfc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800acfe:	4b13      	ldr	r3, [pc, #76]	; (800ad4c <pvPortMalloc+0x194>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	3301      	adds	r3, #1
 800ad04:	4a11      	ldr	r2, [pc, #68]	; (800ad4c <pvPortMalloc+0x194>)
 800ad06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ad08:	f7fe fd08 	bl	800971c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad0c:	69fb      	ldr	r3, [r7, #28]
 800ad0e:	f003 0307 	and.w	r3, r3, #7
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d00a      	beq.n	800ad2c <pvPortMalloc+0x174>
	__asm volatile
 800ad16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad1a:	f383 8811 	msr	BASEPRI, r3
 800ad1e:	f3bf 8f6f 	isb	sy
 800ad22:	f3bf 8f4f 	dsb	sy
 800ad26:	60fb      	str	r3, [r7, #12]
}
 800ad28:	bf00      	nop
 800ad2a:	e7fe      	b.n	800ad2a <pvPortMalloc+0x172>
	return pvReturn;
 800ad2c:	69fb      	ldr	r3, [r7, #28]
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	3728      	adds	r7, #40	; 0x28
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}
 800ad36:	bf00      	nop
 800ad38:	20004b48 	.word	0x20004b48
 800ad3c:	20004b5c 	.word	0x20004b5c
 800ad40:	20004b4c 	.word	0x20004b4c
 800ad44:	20004b40 	.word	0x20004b40
 800ad48:	20004b50 	.word	0x20004b50
 800ad4c:	20004b54 	.word	0x20004b54

0800ad50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b086      	sub	sp, #24
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d04d      	beq.n	800adfe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ad62:	2308      	movs	r3, #8
 800ad64:	425b      	negs	r3, r3
 800ad66:	697a      	ldr	r2, [r7, #20]
 800ad68:	4413      	add	r3, r2
 800ad6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	685a      	ldr	r2, [r3, #4]
 800ad74:	4b24      	ldr	r3, [pc, #144]	; (800ae08 <vPortFree+0xb8>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	4013      	ands	r3, r2
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d10a      	bne.n	800ad94 <vPortFree+0x44>
	__asm volatile
 800ad7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad82:	f383 8811 	msr	BASEPRI, r3
 800ad86:	f3bf 8f6f 	isb	sy
 800ad8a:	f3bf 8f4f 	dsb	sy
 800ad8e:	60fb      	str	r3, [r7, #12]
}
 800ad90:	bf00      	nop
 800ad92:	e7fe      	b.n	800ad92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ad94:	693b      	ldr	r3, [r7, #16]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d00a      	beq.n	800adb2 <vPortFree+0x62>
	__asm volatile
 800ad9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada0:	f383 8811 	msr	BASEPRI, r3
 800ada4:	f3bf 8f6f 	isb	sy
 800ada8:	f3bf 8f4f 	dsb	sy
 800adac:	60bb      	str	r3, [r7, #8]
}
 800adae:	bf00      	nop
 800adb0:	e7fe      	b.n	800adb0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	685a      	ldr	r2, [r3, #4]
 800adb6:	4b14      	ldr	r3, [pc, #80]	; (800ae08 <vPortFree+0xb8>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	4013      	ands	r3, r2
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d01e      	beq.n	800adfe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800adc0:	693b      	ldr	r3, [r7, #16]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d11a      	bne.n	800adfe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	685a      	ldr	r2, [r3, #4]
 800adcc:	4b0e      	ldr	r3, [pc, #56]	; (800ae08 <vPortFree+0xb8>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	43db      	mvns	r3, r3
 800add2:	401a      	ands	r2, r3
 800add4:	693b      	ldr	r3, [r7, #16]
 800add6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800add8:	f7fe fc92 	bl	8009700 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800addc:	693b      	ldr	r3, [r7, #16]
 800adde:	685a      	ldr	r2, [r3, #4]
 800ade0:	4b0a      	ldr	r3, [pc, #40]	; (800ae0c <vPortFree+0xbc>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	4413      	add	r3, r2
 800ade6:	4a09      	ldr	r2, [pc, #36]	; (800ae0c <vPortFree+0xbc>)
 800ade8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800adea:	6938      	ldr	r0, [r7, #16]
 800adec:	f000 f874 	bl	800aed8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800adf0:	4b07      	ldr	r3, [pc, #28]	; (800ae10 <vPortFree+0xc0>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	3301      	adds	r3, #1
 800adf6:	4a06      	ldr	r2, [pc, #24]	; (800ae10 <vPortFree+0xc0>)
 800adf8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800adfa:	f7fe fc8f 	bl	800971c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800adfe:	bf00      	nop
 800ae00:	3718      	adds	r7, #24
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}
 800ae06:	bf00      	nop
 800ae08:	20004b5c 	.word	0x20004b5c
 800ae0c:	20004b4c 	.word	0x20004b4c
 800ae10:	20004b58 	.word	0x20004b58

0800ae14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ae14:	b480      	push	{r7}
 800ae16:	b085      	sub	sp, #20
 800ae18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ae1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ae1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ae20:	4b27      	ldr	r3, [pc, #156]	; (800aec0 <prvHeapInit+0xac>)
 800ae22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f003 0307 	and.w	r3, r3, #7
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d00c      	beq.n	800ae48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	3307      	adds	r3, #7
 800ae32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	f023 0307 	bic.w	r3, r3, #7
 800ae3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ae3c:	68ba      	ldr	r2, [r7, #8]
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	1ad3      	subs	r3, r2, r3
 800ae42:	4a1f      	ldr	r2, [pc, #124]	; (800aec0 <prvHeapInit+0xac>)
 800ae44:	4413      	add	r3, r2
 800ae46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ae4c:	4a1d      	ldr	r2, [pc, #116]	; (800aec4 <prvHeapInit+0xb0>)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ae52:	4b1c      	ldr	r3, [pc, #112]	; (800aec4 <prvHeapInit+0xb0>)
 800ae54:	2200      	movs	r2, #0
 800ae56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	68ba      	ldr	r2, [r7, #8]
 800ae5c:	4413      	add	r3, r2
 800ae5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ae60:	2208      	movs	r2, #8
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	1a9b      	subs	r3, r3, r2
 800ae66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	f023 0307 	bic.w	r3, r3, #7
 800ae6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	4a15      	ldr	r2, [pc, #84]	; (800aec8 <prvHeapInit+0xb4>)
 800ae74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ae76:	4b14      	ldr	r3, [pc, #80]	; (800aec8 <prvHeapInit+0xb4>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ae7e:	4b12      	ldr	r3, [pc, #72]	; (800aec8 <prvHeapInit+0xb4>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	2200      	movs	r2, #0
 800ae84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	68fa      	ldr	r2, [r7, #12]
 800ae8e:	1ad2      	subs	r2, r2, r3
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ae94:	4b0c      	ldr	r3, [pc, #48]	; (800aec8 <prvHeapInit+0xb4>)
 800ae96:	681a      	ldr	r2, [r3, #0]
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	685b      	ldr	r3, [r3, #4]
 800aea0:	4a0a      	ldr	r2, [pc, #40]	; (800aecc <prvHeapInit+0xb8>)
 800aea2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	685b      	ldr	r3, [r3, #4]
 800aea8:	4a09      	ldr	r2, [pc, #36]	; (800aed0 <prvHeapInit+0xbc>)
 800aeaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aeac:	4b09      	ldr	r3, [pc, #36]	; (800aed4 <prvHeapInit+0xc0>)
 800aeae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800aeb2:	601a      	str	r2, [r3, #0]
}
 800aeb4:	bf00      	nop
 800aeb6:	3714      	adds	r7, #20
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebe:	4770      	bx	lr
 800aec0:	20000f40 	.word	0x20000f40
 800aec4:	20004b40 	.word	0x20004b40
 800aec8:	20004b48 	.word	0x20004b48
 800aecc:	20004b50 	.word	0x20004b50
 800aed0:	20004b4c 	.word	0x20004b4c
 800aed4:	20004b5c 	.word	0x20004b5c

0800aed8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aed8:	b480      	push	{r7}
 800aeda:	b085      	sub	sp, #20
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aee0:	4b28      	ldr	r3, [pc, #160]	; (800af84 <prvInsertBlockIntoFreeList+0xac>)
 800aee2:	60fb      	str	r3, [r7, #12]
 800aee4:	e002      	b.n	800aeec <prvInsertBlockIntoFreeList+0x14>
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	60fb      	str	r3, [r7, #12]
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	687a      	ldr	r2, [r7, #4]
 800aef2:	429a      	cmp	r2, r3
 800aef4:	d8f7      	bhi.n	800aee6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	685b      	ldr	r3, [r3, #4]
 800aefe:	68ba      	ldr	r2, [r7, #8]
 800af00:	4413      	add	r3, r2
 800af02:	687a      	ldr	r2, [r7, #4]
 800af04:	429a      	cmp	r2, r3
 800af06:	d108      	bne.n	800af1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	685a      	ldr	r2, [r3, #4]
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	685b      	ldr	r3, [r3, #4]
 800af10:	441a      	add	r2, r3
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	685b      	ldr	r3, [r3, #4]
 800af22:	68ba      	ldr	r2, [r7, #8]
 800af24:	441a      	add	r2, r3
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	429a      	cmp	r2, r3
 800af2c:	d118      	bne.n	800af60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	681a      	ldr	r2, [r3, #0]
 800af32:	4b15      	ldr	r3, [pc, #84]	; (800af88 <prvInsertBlockIntoFreeList+0xb0>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	429a      	cmp	r2, r3
 800af38:	d00d      	beq.n	800af56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	685a      	ldr	r2, [r3, #4]
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	685b      	ldr	r3, [r3, #4]
 800af44:	441a      	add	r2, r3
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	681a      	ldr	r2, [r3, #0]
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	601a      	str	r2, [r3, #0]
 800af54:	e008      	b.n	800af68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800af56:	4b0c      	ldr	r3, [pc, #48]	; (800af88 <prvInsertBlockIntoFreeList+0xb0>)
 800af58:	681a      	ldr	r2, [r3, #0]
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	601a      	str	r2, [r3, #0]
 800af5e:	e003      	b.n	800af68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	681a      	ldr	r2, [r3, #0]
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800af68:	68fa      	ldr	r2, [r7, #12]
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	429a      	cmp	r2, r3
 800af6e:	d002      	beq.n	800af76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	687a      	ldr	r2, [r7, #4]
 800af74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af76:	bf00      	nop
 800af78:	3714      	adds	r7, #20
 800af7a:	46bd      	mov	sp, r7
 800af7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af80:	4770      	bx	lr
 800af82:	bf00      	nop
 800af84:	20004b40 	.word	0x20004b40
 800af88:	20004b48 	.word	0x20004b48

0800af8c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800af90:	2201      	movs	r2, #1
 800af92:	490e      	ldr	r1, [pc, #56]	; (800afcc <MX_USB_HOST_Init+0x40>)
 800af94:	480e      	ldr	r0, [pc, #56]	; (800afd0 <MX_USB_HOST_Init+0x44>)
 800af96:	f7fb fa0b 	bl	80063b0 <USBH_Init>
 800af9a:	4603      	mov	r3, r0
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d001      	beq.n	800afa4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800afa0:	f7f5 fd28 	bl	80009f4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800afa4:	490b      	ldr	r1, [pc, #44]	; (800afd4 <MX_USB_HOST_Init+0x48>)
 800afa6:	480a      	ldr	r0, [pc, #40]	; (800afd0 <MX_USB_HOST_Init+0x44>)
 800afa8:	f7fb fab2 	bl	8006510 <USBH_RegisterClass>
 800afac:	4603      	mov	r3, r0
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d001      	beq.n	800afb6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800afb2:	f7f5 fd1f 	bl	80009f4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800afb6:	4806      	ldr	r0, [pc, #24]	; (800afd0 <MX_USB_HOST_Init+0x44>)
 800afb8:	f7fb fb36 	bl	8006628 <USBH_Start>
 800afbc:	4603      	mov	r3, r0
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d001      	beq.n	800afc6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800afc2:	f7f5 fd17 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800afc6:	bf00      	nop
 800afc8:	bd80      	pop	{r7, pc}
 800afca:	bf00      	nop
 800afcc:	0800afd9 	.word	0x0800afd9
 800afd0:	20004b60 	.word	0x20004b60
 800afd4:	2000000c 	.word	0x2000000c

0800afd8 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800afd8:	b480      	push	{r7}
 800afda:	b083      	sub	sp, #12
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
 800afe0:	460b      	mov	r3, r1
 800afe2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800afe4:	78fb      	ldrb	r3, [r7, #3]
 800afe6:	3b01      	subs	r3, #1
 800afe8:	2b04      	cmp	r3, #4
 800afea:	d819      	bhi.n	800b020 <USBH_UserProcess+0x48>
 800afec:	a201      	add	r2, pc, #4	; (adr r2, 800aff4 <USBH_UserProcess+0x1c>)
 800afee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aff2:	bf00      	nop
 800aff4:	0800b021 	.word	0x0800b021
 800aff8:	0800b011 	.word	0x0800b011
 800affc:	0800b021 	.word	0x0800b021
 800b000:	0800b019 	.word	0x0800b019
 800b004:	0800b009 	.word	0x0800b009
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b008:	4b09      	ldr	r3, [pc, #36]	; (800b030 <USBH_UserProcess+0x58>)
 800b00a:	2203      	movs	r2, #3
 800b00c:	701a      	strb	r2, [r3, #0]
  break;
 800b00e:	e008      	b.n	800b022 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b010:	4b07      	ldr	r3, [pc, #28]	; (800b030 <USBH_UserProcess+0x58>)
 800b012:	2202      	movs	r2, #2
 800b014:	701a      	strb	r2, [r3, #0]
  break;
 800b016:	e004      	b.n	800b022 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b018:	4b05      	ldr	r3, [pc, #20]	; (800b030 <USBH_UserProcess+0x58>)
 800b01a:	2201      	movs	r2, #1
 800b01c:	701a      	strb	r2, [r3, #0]
  break;
 800b01e:	e000      	b.n	800b022 <USBH_UserProcess+0x4a>

  default:
  break;
 800b020:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b022:	bf00      	nop
 800b024:	370c      	adds	r7, #12
 800b026:	46bd      	mov	sp, r7
 800b028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02c:	4770      	bx	lr
 800b02e:	bf00      	nop
 800b030:	20004f44 	.word	0x20004f44

0800b034 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b08a      	sub	sp, #40	; 0x28
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b03c:	f107 0314 	add.w	r3, r7, #20
 800b040:	2200      	movs	r2, #0
 800b042:	601a      	str	r2, [r3, #0]
 800b044:	605a      	str	r2, [r3, #4]
 800b046:	609a      	str	r2, [r3, #8]
 800b048:	60da      	str	r2, [r3, #12]
 800b04a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b054:	d147      	bne.n	800b0e6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b056:	2300      	movs	r3, #0
 800b058:	613b      	str	r3, [r7, #16]
 800b05a:	4b25      	ldr	r3, [pc, #148]	; (800b0f0 <HAL_HCD_MspInit+0xbc>)
 800b05c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b05e:	4a24      	ldr	r2, [pc, #144]	; (800b0f0 <HAL_HCD_MspInit+0xbc>)
 800b060:	f043 0301 	orr.w	r3, r3, #1
 800b064:	6313      	str	r3, [r2, #48]	; 0x30
 800b066:	4b22      	ldr	r3, [pc, #136]	; (800b0f0 <HAL_HCD_MspInit+0xbc>)
 800b068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b06a:	f003 0301 	and.w	r3, r3, #1
 800b06e:	613b      	str	r3, [r7, #16]
 800b070:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b072:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b076:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b078:	2300      	movs	r3, #0
 800b07a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b07c:	2300      	movs	r3, #0
 800b07e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b080:	f107 0314 	add.w	r3, r7, #20
 800b084:	4619      	mov	r1, r3
 800b086:	481b      	ldr	r0, [pc, #108]	; (800b0f4 <HAL_HCD_MspInit+0xc0>)
 800b088:	f7f6 f8a2 	bl	80011d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b08c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800b090:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b092:	2302      	movs	r3, #2
 800b094:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b096:	2300      	movs	r3, #0
 800b098:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b09a:	2300      	movs	r3, #0
 800b09c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b09e:	230a      	movs	r3, #10
 800b0a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b0a2:	f107 0314 	add.w	r3, r7, #20
 800b0a6:	4619      	mov	r1, r3
 800b0a8:	4812      	ldr	r0, [pc, #72]	; (800b0f4 <HAL_HCD_MspInit+0xc0>)
 800b0aa:	f7f6 f891 	bl	80011d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b0ae:	4b10      	ldr	r3, [pc, #64]	; (800b0f0 <HAL_HCD_MspInit+0xbc>)
 800b0b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0b2:	4a0f      	ldr	r2, [pc, #60]	; (800b0f0 <HAL_HCD_MspInit+0xbc>)
 800b0b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0b8:	6353      	str	r3, [r2, #52]	; 0x34
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	60fb      	str	r3, [r7, #12]
 800b0be:	4b0c      	ldr	r3, [pc, #48]	; (800b0f0 <HAL_HCD_MspInit+0xbc>)
 800b0c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0c2:	4a0b      	ldr	r2, [pc, #44]	; (800b0f0 <HAL_HCD_MspInit+0xbc>)
 800b0c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b0c8:	6453      	str	r3, [r2, #68]	; 0x44
 800b0ca:	4b09      	ldr	r3, [pc, #36]	; (800b0f0 <HAL_HCD_MspInit+0xbc>)
 800b0cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b0d2:	60fb      	str	r3, [r7, #12]
 800b0d4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	2105      	movs	r1, #5
 800b0da:	2043      	movs	r0, #67	; 0x43
 800b0dc:	f7f6 f841 	bl	8001162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b0e0:	2043      	movs	r0, #67	; 0x43
 800b0e2:	f7f6 f85a 	bl	800119a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b0e6:	bf00      	nop
 800b0e8:	3728      	adds	r7, #40	; 0x28
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}
 800b0ee:	bf00      	nop
 800b0f0:	40023800 	.word	0x40023800
 800b0f4:	40020000 	.word	0x40020000

0800b0f8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b082      	sub	sp, #8
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b106:	4618      	mov	r0, r3
 800b108:	f7fb ff45 	bl	8006f96 <USBH_LL_IncTimer>
}
 800b10c:	bf00      	nop
 800b10e:	3708      	adds	r7, #8
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}

0800b114 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b082      	sub	sp, #8
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b122:	4618      	mov	r0, r3
 800b124:	f7fb ff89 	bl	800703a <USBH_LL_Connect>
}
 800b128:	bf00      	nop
 800b12a:	3708      	adds	r7, #8
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}

0800b130 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b082      	sub	sp, #8
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b13e:	4618      	mov	r0, r3
 800b140:	f7fb ff9e 	bl	8007080 <USBH_LL_Disconnect>
}
 800b144:	bf00      	nop
 800b146:	3708      	adds	r7, #8
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}

0800b14c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b082      	sub	sp, #8
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	460b      	mov	r3, r1
 800b156:	70fb      	strb	r3, [r7, #3]
 800b158:	4613      	mov	r3, r2
 800b15a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b162:	4618      	mov	r0, r3
 800b164:	f7fb ffd5 	bl	8007112 <USBH_LL_NotifyURBChange>
#endif
}
 800b168:	bf00      	nop
 800b16a:	3708      	adds	r7, #8
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}

0800b170 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b082      	sub	sp, #8
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b17e:	4618      	mov	r0, r3
 800b180:	f7fb ff33 	bl	8006fea <USBH_LL_PortEnabled>
}
 800b184:	bf00      	nop
 800b186:	3708      	adds	r7, #8
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}

0800b18c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b082      	sub	sp, #8
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b19a:	4618      	mov	r0, r3
 800b19c:	f7fb ff3f 	bl	800701e <USBH_LL_PortDisabled>
}
 800b1a0:	bf00      	nop
 800b1a2:	3708      	adds	r7, #8
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}

0800b1a8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b082      	sub	sp, #8
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b1b6:	2b01      	cmp	r3, #1
 800b1b8:	d12a      	bne.n	800b210 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b1ba:	4a18      	ldr	r2, [pc, #96]	; (800b21c <USBH_LL_Init+0x74>)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	4a15      	ldr	r2, [pc, #84]	; (800b21c <USBH_LL_Init+0x74>)
 800b1c6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b1ca:	4b14      	ldr	r3, [pc, #80]	; (800b21c <USBH_LL_Init+0x74>)
 800b1cc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b1d0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b1d2:	4b12      	ldr	r3, [pc, #72]	; (800b21c <USBH_LL_Init+0x74>)
 800b1d4:	2208      	movs	r2, #8
 800b1d6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b1d8:	4b10      	ldr	r3, [pc, #64]	; (800b21c <USBH_LL_Init+0x74>)
 800b1da:	2201      	movs	r2, #1
 800b1dc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b1de:	4b0f      	ldr	r3, [pc, #60]	; (800b21c <USBH_LL_Init+0x74>)
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b1e4:	4b0d      	ldr	r3, [pc, #52]	; (800b21c <USBH_LL_Init+0x74>)
 800b1e6:	2202      	movs	r2, #2
 800b1e8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b1ea:	4b0c      	ldr	r3, [pc, #48]	; (800b21c <USBH_LL_Init+0x74>)
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b1f0:	480a      	ldr	r0, [pc, #40]	; (800b21c <USBH_LL_Init+0x74>)
 800b1f2:	f7f6 f9d4 	bl	800159e <HAL_HCD_Init>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d001      	beq.n	800b200 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b1fc:	f7f5 fbfa 	bl	80009f4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b200:	4806      	ldr	r0, [pc, #24]	; (800b21c <USBH_LL_Init+0x74>)
 800b202:	f7f6 fdb8 	bl	8001d76 <HAL_HCD_GetCurrentFrame>
 800b206:	4603      	mov	r3, r0
 800b208:	4619      	mov	r1, r3
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f7fb feb4 	bl	8006f78 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b210:	2300      	movs	r3, #0
}
 800b212:	4618      	mov	r0, r3
 800b214:	3708      	adds	r7, #8
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}
 800b21a:	bf00      	nop
 800b21c:	20004f48 	.word	0x20004f48

0800b220 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b084      	sub	sp, #16
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b228:	2300      	movs	r3, #0
 800b22a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b22c:	2300      	movs	r3, #0
 800b22e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b236:	4618      	mov	r0, r3
 800b238:	f7f6 fd27 	bl	8001c8a <HAL_HCD_Start>
 800b23c:	4603      	mov	r3, r0
 800b23e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b240:	7bfb      	ldrb	r3, [r7, #15]
 800b242:	4618      	mov	r0, r3
 800b244:	f000 f95c 	bl	800b500 <USBH_Get_USB_Status>
 800b248:	4603      	mov	r3, r0
 800b24a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b24c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b24e:	4618      	mov	r0, r3
 800b250:	3710      	adds	r7, #16
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}

0800b256 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b256:	b580      	push	{r7, lr}
 800b258:	b084      	sub	sp, #16
 800b25a:	af00      	add	r7, sp, #0
 800b25c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b25e:	2300      	movs	r3, #0
 800b260:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b262:	2300      	movs	r3, #0
 800b264:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b26c:	4618      	mov	r0, r3
 800b26e:	f7f6 fd2f 	bl	8001cd0 <HAL_HCD_Stop>
 800b272:	4603      	mov	r3, r0
 800b274:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b276:	7bfb      	ldrb	r3, [r7, #15]
 800b278:	4618      	mov	r0, r3
 800b27a:	f000 f941 	bl	800b500 <USBH_Get_USB_Status>
 800b27e:	4603      	mov	r3, r0
 800b280:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b282:	7bbb      	ldrb	r3, [r7, #14]
}
 800b284:	4618      	mov	r0, r3
 800b286:	3710      	adds	r7, #16
 800b288:	46bd      	mov	sp, r7
 800b28a:	bd80      	pop	{r7, pc}

0800b28c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b084      	sub	sp, #16
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b294:	2301      	movs	r3, #1
 800b296:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f7f6 fd77 	bl	8001d92 <HAL_HCD_GetCurrentSpeed>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	2b02      	cmp	r3, #2
 800b2a8:	d00c      	beq.n	800b2c4 <USBH_LL_GetSpeed+0x38>
 800b2aa:	2b02      	cmp	r3, #2
 800b2ac:	d80d      	bhi.n	800b2ca <USBH_LL_GetSpeed+0x3e>
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d002      	beq.n	800b2b8 <USBH_LL_GetSpeed+0x2c>
 800b2b2:	2b01      	cmp	r3, #1
 800b2b4:	d003      	beq.n	800b2be <USBH_LL_GetSpeed+0x32>
 800b2b6:	e008      	b.n	800b2ca <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	73fb      	strb	r3, [r7, #15]
    break;
 800b2bc:	e008      	b.n	800b2d0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b2be:	2301      	movs	r3, #1
 800b2c0:	73fb      	strb	r3, [r7, #15]
    break;
 800b2c2:	e005      	b.n	800b2d0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b2c4:	2302      	movs	r3, #2
 800b2c6:	73fb      	strb	r3, [r7, #15]
    break;
 800b2c8:	e002      	b.n	800b2d0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	73fb      	strb	r3, [r7, #15]
    break;
 800b2ce:	bf00      	nop
  }
  return  speed;
 800b2d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3710      	adds	r7, #16
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}

0800b2da <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b2da:	b580      	push	{r7, lr}
 800b2dc:	b084      	sub	sp, #16
 800b2de:	af00      	add	r7, sp, #0
 800b2e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f7f6 fd0a 	bl	8001d0a <HAL_HCD_ResetPort>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b2fa:	7bfb      	ldrb	r3, [r7, #15]
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f000 f8ff 	bl	800b500 <USBH_Get_USB_Status>
 800b302:	4603      	mov	r3, r0
 800b304:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b306:	7bbb      	ldrb	r3, [r7, #14]
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3710      	adds	r7, #16
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b082      	sub	sp, #8
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	460b      	mov	r3, r1
 800b31a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b322:	78fa      	ldrb	r2, [r7, #3]
 800b324:	4611      	mov	r1, r2
 800b326:	4618      	mov	r0, r3
 800b328:	f7f6 fd11 	bl	8001d4e <HAL_HCD_HC_GetXferCount>
 800b32c:	4603      	mov	r3, r0
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3708      	adds	r7, #8
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}

0800b336 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b336:	b590      	push	{r4, r7, lr}
 800b338:	b089      	sub	sp, #36	; 0x24
 800b33a:	af04      	add	r7, sp, #16
 800b33c:	6078      	str	r0, [r7, #4]
 800b33e:	4608      	mov	r0, r1
 800b340:	4611      	mov	r1, r2
 800b342:	461a      	mov	r2, r3
 800b344:	4603      	mov	r3, r0
 800b346:	70fb      	strb	r3, [r7, #3]
 800b348:	460b      	mov	r3, r1
 800b34a:	70bb      	strb	r3, [r7, #2]
 800b34c:	4613      	mov	r3, r2
 800b34e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b350:	2300      	movs	r3, #0
 800b352:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b354:	2300      	movs	r3, #0
 800b356:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b35e:	787c      	ldrb	r4, [r7, #1]
 800b360:	78ba      	ldrb	r2, [r7, #2]
 800b362:	78f9      	ldrb	r1, [r7, #3]
 800b364:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b366:	9302      	str	r3, [sp, #8]
 800b368:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b36c:	9301      	str	r3, [sp, #4]
 800b36e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b372:	9300      	str	r3, [sp, #0]
 800b374:	4623      	mov	r3, r4
 800b376:	f7f6 f974 	bl	8001662 <HAL_HCD_HC_Init>
 800b37a:	4603      	mov	r3, r0
 800b37c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b37e:	7bfb      	ldrb	r3, [r7, #15]
 800b380:	4618      	mov	r0, r3
 800b382:	f000 f8bd 	bl	800b500 <USBH_Get_USB_Status>
 800b386:	4603      	mov	r3, r0
 800b388:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b38a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	3714      	adds	r7, #20
 800b390:	46bd      	mov	sp, r7
 800b392:	bd90      	pop	{r4, r7, pc}

0800b394 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b084      	sub	sp, #16
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
 800b39c:	460b      	mov	r3, r1
 800b39e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b3ae:	78fa      	ldrb	r2, [r7, #3]
 800b3b0:	4611      	mov	r1, r2
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f7f6 f9e4 	bl	8001780 <HAL_HCD_HC_Halt>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b3bc:	7bfb      	ldrb	r3, [r7, #15]
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f000 f89e 	bl	800b500 <USBH_Get_USB_Status>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	3710      	adds	r7, #16
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd80      	pop	{r7, pc}

0800b3d2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b3d2:	b590      	push	{r4, r7, lr}
 800b3d4:	b089      	sub	sp, #36	; 0x24
 800b3d6:	af04      	add	r7, sp, #16
 800b3d8:	6078      	str	r0, [r7, #4]
 800b3da:	4608      	mov	r0, r1
 800b3dc:	4611      	mov	r1, r2
 800b3de:	461a      	mov	r2, r3
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	70fb      	strb	r3, [r7, #3]
 800b3e4:	460b      	mov	r3, r1
 800b3e6:	70bb      	strb	r3, [r7, #2]
 800b3e8:	4613      	mov	r3, r2
 800b3ea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b3fa:	787c      	ldrb	r4, [r7, #1]
 800b3fc:	78ba      	ldrb	r2, [r7, #2]
 800b3fe:	78f9      	ldrb	r1, [r7, #3]
 800b400:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b404:	9303      	str	r3, [sp, #12]
 800b406:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b408:	9302      	str	r3, [sp, #8]
 800b40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b40c:	9301      	str	r3, [sp, #4]
 800b40e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b412:	9300      	str	r3, [sp, #0]
 800b414:	4623      	mov	r3, r4
 800b416:	f7f6 f9d7 	bl	80017c8 <HAL_HCD_HC_SubmitRequest>
 800b41a:	4603      	mov	r3, r0
 800b41c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b41e:	7bfb      	ldrb	r3, [r7, #15]
 800b420:	4618      	mov	r0, r3
 800b422:	f000 f86d 	bl	800b500 <USBH_Get_USB_Status>
 800b426:	4603      	mov	r3, r0
 800b428:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b42a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	3714      	adds	r7, #20
 800b430:	46bd      	mov	sp, r7
 800b432:	bd90      	pop	{r4, r7, pc}

0800b434 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b082      	sub	sp, #8
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
 800b43c:	460b      	mov	r3, r1
 800b43e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b446:	78fa      	ldrb	r2, [r7, #3]
 800b448:	4611      	mov	r1, r2
 800b44a:	4618      	mov	r0, r3
 800b44c:	f7f6 fc6b 	bl	8001d26 <HAL_HCD_HC_GetURBState>
 800b450:	4603      	mov	r3, r0
}
 800b452:	4618      	mov	r0, r3
 800b454:	3708      	adds	r7, #8
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}

0800b45a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b45a:	b580      	push	{r7, lr}
 800b45c:	b082      	sub	sp, #8
 800b45e:	af00      	add	r7, sp, #0
 800b460:	6078      	str	r0, [r7, #4]
 800b462:	460b      	mov	r3, r1
 800b464:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b46c:	2b01      	cmp	r3, #1
 800b46e:	d103      	bne.n	800b478 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b470:	78fb      	ldrb	r3, [r7, #3]
 800b472:	4618      	mov	r0, r3
 800b474:	f000 f870 	bl	800b558 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b478:	20c8      	movs	r0, #200	; 0xc8
 800b47a:	f7f5 fd73 	bl	8000f64 <HAL_Delay>
  return USBH_OK;
 800b47e:	2300      	movs	r3, #0
}
 800b480:	4618      	mov	r0, r3
 800b482:	3708      	adds	r7, #8
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}

0800b488 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b488:	b480      	push	{r7}
 800b48a:	b085      	sub	sp, #20
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
 800b490:	460b      	mov	r3, r1
 800b492:	70fb      	strb	r3, [r7, #3]
 800b494:	4613      	mov	r3, r2
 800b496:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b49e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b4a0:	78fb      	ldrb	r3, [r7, #3]
 800b4a2:	68fa      	ldr	r2, [r7, #12]
 800b4a4:	212c      	movs	r1, #44	; 0x2c
 800b4a6:	fb01 f303 	mul.w	r3, r1, r3
 800b4aa:	4413      	add	r3, r2
 800b4ac:	333b      	adds	r3, #59	; 0x3b
 800b4ae:	781b      	ldrb	r3, [r3, #0]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d009      	beq.n	800b4c8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b4b4:	78fb      	ldrb	r3, [r7, #3]
 800b4b6:	68fa      	ldr	r2, [r7, #12]
 800b4b8:	212c      	movs	r1, #44	; 0x2c
 800b4ba:	fb01 f303 	mul.w	r3, r1, r3
 800b4be:	4413      	add	r3, r2
 800b4c0:	3354      	adds	r3, #84	; 0x54
 800b4c2:	78ba      	ldrb	r2, [r7, #2]
 800b4c4:	701a      	strb	r2, [r3, #0]
 800b4c6:	e008      	b.n	800b4da <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b4c8:	78fb      	ldrb	r3, [r7, #3]
 800b4ca:	68fa      	ldr	r2, [r7, #12]
 800b4cc:	212c      	movs	r1, #44	; 0x2c
 800b4ce:	fb01 f303 	mul.w	r3, r1, r3
 800b4d2:	4413      	add	r3, r2
 800b4d4:	3355      	adds	r3, #85	; 0x55
 800b4d6:	78ba      	ldrb	r2, [r7, #2]
 800b4d8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b4da:	2300      	movs	r3, #0
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	3714      	adds	r7, #20
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e6:	4770      	bx	lr

0800b4e8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b082      	sub	sp, #8
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f7f5 fd37 	bl	8000f64 <HAL_Delay>
}
 800b4f6:	bf00      	nop
 800b4f8:	3708      	adds	r7, #8
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}
	...

0800b500 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b500:	b480      	push	{r7}
 800b502:	b085      	sub	sp, #20
 800b504:	af00      	add	r7, sp, #0
 800b506:	4603      	mov	r3, r0
 800b508:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b50a:	2300      	movs	r3, #0
 800b50c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b50e:	79fb      	ldrb	r3, [r7, #7]
 800b510:	2b03      	cmp	r3, #3
 800b512:	d817      	bhi.n	800b544 <USBH_Get_USB_Status+0x44>
 800b514:	a201      	add	r2, pc, #4	; (adr r2, 800b51c <USBH_Get_USB_Status+0x1c>)
 800b516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b51a:	bf00      	nop
 800b51c:	0800b52d 	.word	0x0800b52d
 800b520:	0800b533 	.word	0x0800b533
 800b524:	0800b539 	.word	0x0800b539
 800b528:	0800b53f 	.word	0x0800b53f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b52c:	2300      	movs	r3, #0
 800b52e:	73fb      	strb	r3, [r7, #15]
    break;
 800b530:	e00b      	b.n	800b54a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b532:	2302      	movs	r3, #2
 800b534:	73fb      	strb	r3, [r7, #15]
    break;
 800b536:	e008      	b.n	800b54a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b538:	2301      	movs	r3, #1
 800b53a:	73fb      	strb	r3, [r7, #15]
    break;
 800b53c:	e005      	b.n	800b54a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b53e:	2302      	movs	r3, #2
 800b540:	73fb      	strb	r3, [r7, #15]
    break;
 800b542:	e002      	b.n	800b54a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b544:	2302      	movs	r3, #2
 800b546:	73fb      	strb	r3, [r7, #15]
    break;
 800b548:	bf00      	nop
  }
  return usb_status;
 800b54a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	3714      	adds	r7, #20
 800b550:	46bd      	mov	sp, r7
 800b552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b556:	4770      	bx	lr

0800b558 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b084      	sub	sp, #16
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	4603      	mov	r3, r0
 800b560:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b562:	79fb      	ldrb	r3, [r7, #7]
 800b564:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b566:	79fb      	ldrb	r3, [r7, #7]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d102      	bne.n	800b572 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b56c:	2300      	movs	r3, #0
 800b56e:	73fb      	strb	r3, [r7, #15]
 800b570:	e001      	b.n	800b576 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b572:	2301      	movs	r3, #1
 800b574:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b576:	7bfb      	ldrb	r3, [r7, #15]
 800b578:	461a      	mov	r2, r3
 800b57a:	2101      	movs	r1, #1
 800b57c:	4803      	ldr	r0, [pc, #12]	; (800b58c <MX_DriverVbusFS+0x34>)
 800b57e:	f7f5 ffdb 	bl	8001538 <HAL_GPIO_WritePin>
}
 800b582:	bf00      	nop
 800b584:	3710      	adds	r7, #16
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}
 800b58a:	bf00      	nop
 800b58c:	40020800 	.word	0x40020800

0800b590 <malloc>:
 800b590:	4b02      	ldr	r3, [pc, #8]	; (800b59c <malloc+0xc>)
 800b592:	4601      	mov	r1, r0
 800b594:	6818      	ldr	r0, [r3, #0]
 800b596:	f000 b82b 	b.w	800b5f0 <_malloc_r>
 800b59a:	bf00      	nop
 800b59c:	2000007c 	.word	0x2000007c

0800b5a0 <free>:
 800b5a0:	4b02      	ldr	r3, [pc, #8]	; (800b5ac <free+0xc>)
 800b5a2:	4601      	mov	r1, r0
 800b5a4:	6818      	ldr	r0, [r3, #0]
 800b5a6:	f000 b901 	b.w	800b7ac <_free_r>
 800b5aa:	bf00      	nop
 800b5ac:	2000007c 	.word	0x2000007c

0800b5b0 <sbrk_aligned>:
 800b5b0:	b570      	push	{r4, r5, r6, lr}
 800b5b2:	4e0e      	ldr	r6, [pc, #56]	; (800b5ec <sbrk_aligned+0x3c>)
 800b5b4:	460c      	mov	r4, r1
 800b5b6:	6831      	ldr	r1, [r6, #0]
 800b5b8:	4605      	mov	r5, r0
 800b5ba:	b911      	cbnz	r1, 800b5c2 <sbrk_aligned+0x12>
 800b5bc:	f000 f8ac 	bl	800b718 <_sbrk_r>
 800b5c0:	6030      	str	r0, [r6, #0]
 800b5c2:	4621      	mov	r1, r4
 800b5c4:	4628      	mov	r0, r5
 800b5c6:	f000 f8a7 	bl	800b718 <_sbrk_r>
 800b5ca:	1c43      	adds	r3, r0, #1
 800b5cc:	d00a      	beq.n	800b5e4 <sbrk_aligned+0x34>
 800b5ce:	1cc4      	adds	r4, r0, #3
 800b5d0:	f024 0403 	bic.w	r4, r4, #3
 800b5d4:	42a0      	cmp	r0, r4
 800b5d6:	d007      	beq.n	800b5e8 <sbrk_aligned+0x38>
 800b5d8:	1a21      	subs	r1, r4, r0
 800b5da:	4628      	mov	r0, r5
 800b5dc:	f000 f89c 	bl	800b718 <_sbrk_r>
 800b5e0:	3001      	adds	r0, #1
 800b5e2:	d101      	bne.n	800b5e8 <sbrk_aligned+0x38>
 800b5e4:	f04f 34ff 	mov.w	r4, #4294967295
 800b5e8:	4620      	mov	r0, r4
 800b5ea:	bd70      	pop	{r4, r5, r6, pc}
 800b5ec:	20005250 	.word	0x20005250

0800b5f0 <_malloc_r>:
 800b5f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5f4:	1ccd      	adds	r5, r1, #3
 800b5f6:	f025 0503 	bic.w	r5, r5, #3
 800b5fa:	3508      	adds	r5, #8
 800b5fc:	2d0c      	cmp	r5, #12
 800b5fe:	bf38      	it	cc
 800b600:	250c      	movcc	r5, #12
 800b602:	2d00      	cmp	r5, #0
 800b604:	4607      	mov	r7, r0
 800b606:	db01      	blt.n	800b60c <_malloc_r+0x1c>
 800b608:	42a9      	cmp	r1, r5
 800b60a:	d905      	bls.n	800b618 <_malloc_r+0x28>
 800b60c:	230c      	movs	r3, #12
 800b60e:	603b      	str	r3, [r7, #0]
 800b610:	2600      	movs	r6, #0
 800b612:	4630      	mov	r0, r6
 800b614:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b618:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b6ec <_malloc_r+0xfc>
 800b61c:	f000 f868 	bl	800b6f0 <__malloc_lock>
 800b620:	f8d8 3000 	ldr.w	r3, [r8]
 800b624:	461c      	mov	r4, r3
 800b626:	bb5c      	cbnz	r4, 800b680 <_malloc_r+0x90>
 800b628:	4629      	mov	r1, r5
 800b62a:	4638      	mov	r0, r7
 800b62c:	f7ff ffc0 	bl	800b5b0 <sbrk_aligned>
 800b630:	1c43      	adds	r3, r0, #1
 800b632:	4604      	mov	r4, r0
 800b634:	d155      	bne.n	800b6e2 <_malloc_r+0xf2>
 800b636:	f8d8 4000 	ldr.w	r4, [r8]
 800b63a:	4626      	mov	r6, r4
 800b63c:	2e00      	cmp	r6, #0
 800b63e:	d145      	bne.n	800b6cc <_malloc_r+0xdc>
 800b640:	2c00      	cmp	r4, #0
 800b642:	d048      	beq.n	800b6d6 <_malloc_r+0xe6>
 800b644:	6823      	ldr	r3, [r4, #0]
 800b646:	4631      	mov	r1, r6
 800b648:	4638      	mov	r0, r7
 800b64a:	eb04 0903 	add.w	r9, r4, r3
 800b64e:	f000 f863 	bl	800b718 <_sbrk_r>
 800b652:	4581      	cmp	r9, r0
 800b654:	d13f      	bne.n	800b6d6 <_malloc_r+0xe6>
 800b656:	6821      	ldr	r1, [r4, #0]
 800b658:	1a6d      	subs	r5, r5, r1
 800b65a:	4629      	mov	r1, r5
 800b65c:	4638      	mov	r0, r7
 800b65e:	f7ff ffa7 	bl	800b5b0 <sbrk_aligned>
 800b662:	3001      	adds	r0, #1
 800b664:	d037      	beq.n	800b6d6 <_malloc_r+0xe6>
 800b666:	6823      	ldr	r3, [r4, #0]
 800b668:	442b      	add	r3, r5
 800b66a:	6023      	str	r3, [r4, #0]
 800b66c:	f8d8 3000 	ldr.w	r3, [r8]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d038      	beq.n	800b6e6 <_malloc_r+0xf6>
 800b674:	685a      	ldr	r2, [r3, #4]
 800b676:	42a2      	cmp	r2, r4
 800b678:	d12b      	bne.n	800b6d2 <_malloc_r+0xe2>
 800b67a:	2200      	movs	r2, #0
 800b67c:	605a      	str	r2, [r3, #4]
 800b67e:	e00f      	b.n	800b6a0 <_malloc_r+0xb0>
 800b680:	6822      	ldr	r2, [r4, #0]
 800b682:	1b52      	subs	r2, r2, r5
 800b684:	d41f      	bmi.n	800b6c6 <_malloc_r+0xd6>
 800b686:	2a0b      	cmp	r2, #11
 800b688:	d917      	bls.n	800b6ba <_malloc_r+0xca>
 800b68a:	1961      	adds	r1, r4, r5
 800b68c:	42a3      	cmp	r3, r4
 800b68e:	6025      	str	r5, [r4, #0]
 800b690:	bf18      	it	ne
 800b692:	6059      	strne	r1, [r3, #4]
 800b694:	6863      	ldr	r3, [r4, #4]
 800b696:	bf08      	it	eq
 800b698:	f8c8 1000 	streq.w	r1, [r8]
 800b69c:	5162      	str	r2, [r4, r5]
 800b69e:	604b      	str	r3, [r1, #4]
 800b6a0:	4638      	mov	r0, r7
 800b6a2:	f104 060b 	add.w	r6, r4, #11
 800b6a6:	f000 f829 	bl	800b6fc <__malloc_unlock>
 800b6aa:	f026 0607 	bic.w	r6, r6, #7
 800b6ae:	1d23      	adds	r3, r4, #4
 800b6b0:	1af2      	subs	r2, r6, r3
 800b6b2:	d0ae      	beq.n	800b612 <_malloc_r+0x22>
 800b6b4:	1b9b      	subs	r3, r3, r6
 800b6b6:	50a3      	str	r3, [r4, r2]
 800b6b8:	e7ab      	b.n	800b612 <_malloc_r+0x22>
 800b6ba:	42a3      	cmp	r3, r4
 800b6bc:	6862      	ldr	r2, [r4, #4]
 800b6be:	d1dd      	bne.n	800b67c <_malloc_r+0x8c>
 800b6c0:	f8c8 2000 	str.w	r2, [r8]
 800b6c4:	e7ec      	b.n	800b6a0 <_malloc_r+0xb0>
 800b6c6:	4623      	mov	r3, r4
 800b6c8:	6864      	ldr	r4, [r4, #4]
 800b6ca:	e7ac      	b.n	800b626 <_malloc_r+0x36>
 800b6cc:	4634      	mov	r4, r6
 800b6ce:	6876      	ldr	r6, [r6, #4]
 800b6d0:	e7b4      	b.n	800b63c <_malloc_r+0x4c>
 800b6d2:	4613      	mov	r3, r2
 800b6d4:	e7cc      	b.n	800b670 <_malloc_r+0x80>
 800b6d6:	230c      	movs	r3, #12
 800b6d8:	603b      	str	r3, [r7, #0]
 800b6da:	4638      	mov	r0, r7
 800b6dc:	f000 f80e 	bl	800b6fc <__malloc_unlock>
 800b6e0:	e797      	b.n	800b612 <_malloc_r+0x22>
 800b6e2:	6025      	str	r5, [r4, #0]
 800b6e4:	e7dc      	b.n	800b6a0 <_malloc_r+0xb0>
 800b6e6:	605b      	str	r3, [r3, #4]
 800b6e8:	deff      	udf	#255	; 0xff
 800b6ea:	bf00      	nop
 800b6ec:	2000524c 	.word	0x2000524c

0800b6f0 <__malloc_lock>:
 800b6f0:	4801      	ldr	r0, [pc, #4]	; (800b6f8 <__malloc_lock+0x8>)
 800b6f2:	f000 b84b 	b.w	800b78c <__retarget_lock_acquire_recursive>
 800b6f6:	bf00      	nop
 800b6f8:	20005390 	.word	0x20005390

0800b6fc <__malloc_unlock>:
 800b6fc:	4801      	ldr	r0, [pc, #4]	; (800b704 <__malloc_unlock+0x8>)
 800b6fe:	f000 b846 	b.w	800b78e <__retarget_lock_release_recursive>
 800b702:	bf00      	nop
 800b704:	20005390 	.word	0x20005390

0800b708 <memset>:
 800b708:	4402      	add	r2, r0
 800b70a:	4603      	mov	r3, r0
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d100      	bne.n	800b712 <memset+0xa>
 800b710:	4770      	bx	lr
 800b712:	f803 1b01 	strb.w	r1, [r3], #1
 800b716:	e7f9      	b.n	800b70c <memset+0x4>

0800b718 <_sbrk_r>:
 800b718:	b538      	push	{r3, r4, r5, lr}
 800b71a:	4d06      	ldr	r5, [pc, #24]	; (800b734 <_sbrk_r+0x1c>)
 800b71c:	2300      	movs	r3, #0
 800b71e:	4604      	mov	r4, r0
 800b720:	4608      	mov	r0, r1
 800b722:	602b      	str	r3, [r5, #0]
 800b724:	f7f5 fb0e 	bl	8000d44 <_sbrk>
 800b728:	1c43      	adds	r3, r0, #1
 800b72a:	d102      	bne.n	800b732 <_sbrk_r+0x1a>
 800b72c:	682b      	ldr	r3, [r5, #0]
 800b72e:	b103      	cbz	r3, 800b732 <_sbrk_r+0x1a>
 800b730:	6023      	str	r3, [r4, #0]
 800b732:	bd38      	pop	{r3, r4, r5, pc}
 800b734:	2000538c 	.word	0x2000538c

0800b738 <__errno>:
 800b738:	4b01      	ldr	r3, [pc, #4]	; (800b740 <__errno+0x8>)
 800b73a:	6818      	ldr	r0, [r3, #0]
 800b73c:	4770      	bx	lr
 800b73e:	bf00      	nop
 800b740:	2000007c 	.word	0x2000007c

0800b744 <__libc_init_array>:
 800b744:	b570      	push	{r4, r5, r6, lr}
 800b746:	4d0d      	ldr	r5, [pc, #52]	; (800b77c <__libc_init_array+0x38>)
 800b748:	4c0d      	ldr	r4, [pc, #52]	; (800b780 <__libc_init_array+0x3c>)
 800b74a:	1b64      	subs	r4, r4, r5
 800b74c:	10a4      	asrs	r4, r4, #2
 800b74e:	2600      	movs	r6, #0
 800b750:	42a6      	cmp	r6, r4
 800b752:	d109      	bne.n	800b768 <__libc_init_array+0x24>
 800b754:	4d0b      	ldr	r5, [pc, #44]	; (800b784 <__libc_init_array+0x40>)
 800b756:	4c0c      	ldr	r4, [pc, #48]	; (800b788 <__libc_init_array+0x44>)
 800b758:	f000 f874 	bl	800b844 <_init>
 800b75c:	1b64      	subs	r4, r4, r5
 800b75e:	10a4      	asrs	r4, r4, #2
 800b760:	2600      	movs	r6, #0
 800b762:	42a6      	cmp	r6, r4
 800b764:	d105      	bne.n	800b772 <__libc_init_array+0x2e>
 800b766:	bd70      	pop	{r4, r5, r6, pc}
 800b768:	f855 3b04 	ldr.w	r3, [r5], #4
 800b76c:	4798      	blx	r3
 800b76e:	3601      	adds	r6, #1
 800b770:	e7ee      	b.n	800b750 <__libc_init_array+0xc>
 800b772:	f855 3b04 	ldr.w	r3, [r5], #4
 800b776:	4798      	blx	r3
 800b778:	3601      	adds	r6, #1
 800b77a:	e7f2      	b.n	800b762 <__libc_init_array+0x1e>
 800b77c:	0800b8d4 	.word	0x0800b8d4
 800b780:	0800b8d4 	.word	0x0800b8d4
 800b784:	0800b8d4 	.word	0x0800b8d4
 800b788:	0800b8d8 	.word	0x0800b8d8

0800b78c <__retarget_lock_acquire_recursive>:
 800b78c:	4770      	bx	lr

0800b78e <__retarget_lock_release_recursive>:
 800b78e:	4770      	bx	lr

0800b790 <memcpy>:
 800b790:	440a      	add	r2, r1
 800b792:	4291      	cmp	r1, r2
 800b794:	f100 33ff 	add.w	r3, r0, #4294967295
 800b798:	d100      	bne.n	800b79c <memcpy+0xc>
 800b79a:	4770      	bx	lr
 800b79c:	b510      	push	{r4, lr}
 800b79e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b7a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b7a6:	4291      	cmp	r1, r2
 800b7a8:	d1f9      	bne.n	800b79e <memcpy+0xe>
 800b7aa:	bd10      	pop	{r4, pc}

0800b7ac <_free_r>:
 800b7ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b7ae:	2900      	cmp	r1, #0
 800b7b0:	d044      	beq.n	800b83c <_free_r+0x90>
 800b7b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7b6:	9001      	str	r0, [sp, #4]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	f1a1 0404 	sub.w	r4, r1, #4
 800b7be:	bfb8      	it	lt
 800b7c0:	18e4      	addlt	r4, r4, r3
 800b7c2:	f7ff ff95 	bl	800b6f0 <__malloc_lock>
 800b7c6:	4a1e      	ldr	r2, [pc, #120]	; (800b840 <_free_r+0x94>)
 800b7c8:	9801      	ldr	r0, [sp, #4]
 800b7ca:	6813      	ldr	r3, [r2, #0]
 800b7cc:	b933      	cbnz	r3, 800b7dc <_free_r+0x30>
 800b7ce:	6063      	str	r3, [r4, #4]
 800b7d0:	6014      	str	r4, [r2, #0]
 800b7d2:	b003      	add	sp, #12
 800b7d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b7d8:	f7ff bf90 	b.w	800b6fc <__malloc_unlock>
 800b7dc:	42a3      	cmp	r3, r4
 800b7de:	d908      	bls.n	800b7f2 <_free_r+0x46>
 800b7e0:	6825      	ldr	r5, [r4, #0]
 800b7e2:	1961      	adds	r1, r4, r5
 800b7e4:	428b      	cmp	r3, r1
 800b7e6:	bf01      	itttt	eq
 800b7e8:	6819      	ldreq	r1, [r3, #0]
 800b7ea:	685b      	ldreq	r3, [r3, #4]
 800b7ec:	1949      	addeq	r1, r1, r5
 800b7ee:	6021      	streq	r1, [r4, #0]
 800b7f0:	e7ed      	b.n	800b7ce <_free_r+0x22>
 800b7f2:	461a      	mov	r2, r3
 800b7f4:	685b      	ldr	r3, [r3, #4]
 800b7f6:	b10b      	cbz	r3, 800b7fc <_free_r+0x50>
 800b7f8:	42a3      	cmp	r3, r4
 800b7fa:	d9fa      	bls.n	800b7f2 <_free_r+0x46>
 800b7fc:	6811      	ldr	r1, [r2, #0]
 800b7fe:	1855      	adds	r5, r2, r1
 800b800:	42a5      	cmp	r5, r4
 800b802:	d10b      	bne.n	800b81c <_free_r+0x70>
 800b804:	6824      	ldr	r4, [r4, #0]
 800b806:	4421      	add	r1, r4
 800b808:	1854      	adds	r4, r2, r1
 800b80a:	42a3      	cmp	r3, r4
 800b80c:	6011      	str	r1, [r2, #0]
 800b80e:	d1e0      	bne.n	800b7d2 <_free_r+0x26>
 800b810:	681c      	ldr	r4, [r3, #0]
 800b812:	685b      	ldr	r3, [r3, #4]
 800b814:	6053      	str	r3, [r2, #4]
 800b816:	440c      	add	r4, r1
 800b818:	6014      	str	r4, [r2, #0]
 800b81a:	e7da      	b.n	800b7d2 <_free_r+0x26>
 800b81c:	d902      	bls.n	800b824 <_free_r+0x78>
 800b81e:	230c      	movs	r3, #12
 800b820:	6003      	str	r3, [r0, #0]
 800b822:	e7d6      	b.n	800b7d2 <_free_r+0x26>
 800b824:	6825      	ldr	r5, [r4, #0]
 800b826:	1961      	adds	r1, r4, r5
 800b828:	428b      	cmp	r3, r1
 800b82a:	bf04      	itt	eq
 800b82c:	6819      	ldreq	r1, [r3, #0]
 800b82e:	685b      	ldreq	r3, [r3, #4]
 800b830:	6063      	str	r3, [r4, #4]
 800b832:	bf04      	itt	eq
 800b834:	1949      	addeq	r1, r1, r5
 800b836:	6021      	streq	r1, [r4, #0]
 800b838:	6054      	str	r4, [r2, #4]
 800b83a:	e7ca      	b.n	800b7d2 <_free_r+0x26>
 800b83c:	b003      	add	sp, #12
 800b83e:	bd30      	pop	{r4, r5, pc}
 800b840:	2000524c 	.word	0x2000524c

0800b844 <_init>:
 800b844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b846:	bf00      	nop
 800b848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b84a:	bc08      	pop	{r3}
 800b84c:	469e      	mov	lr, r3
 800b84e:	4770      	bx	lr

0800b850 <_fini>:
 800b850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b852:	bf00      	nop
 800b854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b856:	bc08      	pop	{r3}
 800b858:	469e      	mov	lr, r3
 800b85a:	4770      	bx	lr
