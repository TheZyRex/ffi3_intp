
nucleo-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fc8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080061a8  080061a8  000161a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006218  08006218  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006218  08006218  00016218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006220  08006220  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006220  08006220  00016220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006224  08006224  00016224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006228  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f10  20000010  08006238  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004f20  08006238  00024f20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ac97  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003940  00000000  00000000  0003ad1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001730  00000000  00000000  0003e660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001210  00000000  00000000  0003fd90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000035c1  00000000  00000000  00040fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019fe8  00000000  00000000  00044561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9f96  00000000  00000000  0005e549  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000636c  00000000  00000000  001384e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0013e84c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000010 	.word	0x20000010
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006190 	.word	0x08006190

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000014 	.word	0x20000014
 800021c:	08006190 	.word	0x08006190

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b970 	b.w	8000518 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	460f      	mov	r7, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d965      	bls.n	8000332 <__udivmoddi4+0xe2>
 8000266:	fab2 f382 	clz	r3, r2
 800026a:	b143      	cbz	r3, 800027e <__udivmoddi4+0x2e>
 800026c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000270:	f1c3 0220 	rsb	r2, r3, #32
 8000274:	409f      	lsls	r7, r3
 8000276:	fa20 f202 	lsr.w	r2, r0, r2
 800027a:	4317      	orrs	r7, r2
 800027c:	409c      	lsls	r4, r3
 800027e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000282:	fa1f f58c 	uxth.w	r5, ip
 8000286:	fbb7 f1fe 	udiv	r1, r7, lr
 800028a:	0c22      	lsrs	r2, r4, #16
 800028c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000290:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000294:	fb01 f005 	mul.w	r0, r1, r5
 8000298:	4290      	cmp	r0, r2
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029c:	eb1c 0202 	adds.w	r2, ip, r2
 80002a0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002a4:	f080 811c 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002a8:	4290      	cmp	r0, r2
 80002aa:	f240 8119 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002ae:	3902      	subs	r1, #2
 80002b0:	4462      	add	r2, ip
 80002b2:	1a12      	subs	r2, r2, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002c2:	fb00 f505 	mul.w	r5, r0, r5
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	d90a      	bls.n	80002e0 <__udivmoddi4+0x90>
 80002ca:	eb1c 0404 	adds.w	r4, ip, r4
 80002ce:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d2:	f080 8107 	bcs.w	80004e4 <__udivmoddi4+0x294>
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	f240 8104 	bls.w	80004e4 <__udivmoddi4+0x294>
 80002dc:	4464      	add	r4, ip
 80002de:	3802      	subs	r0, #2
 80002e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e4:	1b64      	subs	r4, r4, r5
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11e      	cbz	r6, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40dc      	lsrs	r4, r3
 80002ec:	2300      	movs	r3, #0
 80002ee:	e9c6 4300 	strd	r4, r3, [r6]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d908      	bls.n	800030c <__udivmoddi4+0xbc>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80ed 	beq.w	80004da <__udivmoddi4+0x28a>
 8000300:	2100      	movs	r1, #0
 8000302:	e9c6 0500 	strd	r0, r5, [r6]
 8000306:	4608      	mov	r0, r1
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	fab3 f183 	clz	r1, r3
 8000310:	2900      	cmp	r1, #0
 8000312:	d149      	bne.n	80003a8 <__udivmoddi4+0x158>
 8000314:	42ab      	cmp	r3, r5
 8000316:	d302      	bcc.n	800031e <__udivmoddi4+0xce>
 8000318:	4282      	cmp	r2, r0
 800031a:	f200 80f8 	bhi.w	800050e <__udivmoddi4+0x2be>
 800031e:	1a84      	subs	r4, r0, r2
 8000320:	eb65 0203 	sbc.w	r2, r5, r3
 8000324:	2001      	movs	r0, #1
 8000326:	4617      	mov	r7, r2
 8000328:	2e00      	cmp	r6, #0
 800032a:	d0e2      	beq.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	e9c6 4700 	strd	r4, r7, [r6]
 8000330:	e7df      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000332:	b902      	cbnz	r2, 8000336 <__udivmoddi4+0xe6>
 8000334:	deff      	udf	#255	; 0xff
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	2b00      	cmp	r3, #0
 800033c:	f040 8090 	bne.w	8000460 <__udivmoddi4+0x210>
 8000340:	1a8a      	subs	r2, r1, r2
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2101      	movs	r1, #1
 800034c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000350:	fb07 2015 	mls	r0, r7, r5, r2
 8000354:	0c22      	lsrs	r2, r4, #16
 8000356:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800035a:	fb0e f005 	mul.w	r0, lr, r5
 800035e:	4290      	cmp	r0, r2
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x124>
 8000362:	eb1c 0202 	adds.w	r2, ip, r2
 8000366:	f105 38ff 	add.w	r8, r5, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4290      	cmp	r0, r2
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2b8>
 8000372:	4645      	mov	r5, r8
 8000374:	1a12      	subs	r2, r2, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb2 f0f7 	udiv	r0, r2, r7
 800037c:	fb07 2210 	mls	r2, r7, r0, r2
 8000380:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x14e>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 32ff 	add.w	r2, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x14c>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2c2>
 800039c:	4610      	mov	r0, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003a6:	e79f      	b.n	80002e8 <__udivmoddi4+0x98>
 80003a8:	f1c1 0720 	rsb	r7, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ba:	fa20 f307 	lsr.w	r3, r0, r7
 80003be:	40fd      	lsrs	r5, r7
 80003c0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c4:	4323      	orrs	r3, r4
 80003c6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	fb09 5518 	mls	r5, r9, r8, r5
 80003d2:	0c1c      	lsrs	r4, r3, #16
 80003d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d8:	fb08 f50e 	mul.w	r5, r8, lr
 80003dc:	42a5      	cmp	r5, r4
 80003de:	fa02 f201 	lsl.w	r2, r2, r1
 80003e2:	fa00 f001 	lsl.w	r0, r0, r1
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2b4>
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2b4>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4464      	add	r4, ip
 8000400:	1b64      	subs	r4, r4, r5
 8000402:	b29d      	uxth	r5, r3
 8000404:	fbb4 f3f9 	udiv	r3, r4, r9
 8000408:	fb09 4413 	mls	r4, r9, r3, r4
 800040c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000410:	fb03 fe0e 	mul.w	lr, r3, lr
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2ac>
 8000422:	45a6      	cmp	lr, r4
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2ac>
 8000426:	3b02      	subs	r3, #2
 8000428:	4464      	add	r4, ip
 800042a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800042e:	fba3 9502 	umull	r9, r5, r3, r2
 8000432:	eba4 040e 	sub.w	r4, r4, lr
 8000436:	42ac      	cmp	r4, r5
 8000438:	46c8      	mov	r8, r9
 800043a:	46ae      	mov	lr, r5
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x29c>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x298>
 8000440:	b156      	cbz	r6, 8000458 <__udivmoddi4+0x208>
 8000442:	ebb0 0208 	subs.w	r2, r0, r8
 8000446:	eb64 040e 	sbc.w	r4, r4, lr
 800044a:	fa04 f707 	lsl.w	r7, r4, r7
 800044e:	40ca      	lsrs	r2, r1
 8000450:	40cc      	lsrs	r4, r1
 8000452:	4317      	orrs	r7, r2
 8000454:	e9c6 7400 	strd	r7, r4, [r6]
 8000458:	4618      	mov	r0, r3
 800045a:	2100      	movs	r1, #0
 800045c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000460:	f1c3 0120 	rsb	r1, r3, #32
 8000464:	fa02 fc03 	lsl.w	ip, r2, r3
 8000468:	fa20 f201 	lsr.w	r2, r0, r1
 800046c:	fa25 f101 	lsr.w	r1, r5, r1
 8000470:	409d      	lsls	r5, r3
 8000472:	432a      	orrs	r2, r5
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000480:	fb07 1510 	mls	r5, r7, r0, r1
 8000484:	0c11      	lsrs	r1, r2, #16
 8000486:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800048a:	fb00 f50e 	mul.w	r5, r0, lr
 800048e:	428d      	cmp	r5, r1
 8000490:	fa04 f403 	lsl.w	r4, r4, r3
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x258>
 8000496:	eb1c 0101 	adds.w	r1, ip, r1
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004a0:	428d      	cmp	r5, r1
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1b49      	subs	r1, r1, r5
 80004aa:	b292      	uxth	r2, r2
 80004ac:	fbb1 f5f7 	udiv	r5, r1, r7
 80004b0:	fb07 1115 	mls	r1, r7, r5, r1
 80004b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b8:	fb05 f10e 	mul.w	r1, r5, lr
 80004bc:	4291      	cmp	r1, r2
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x282>
 80004c0:	eb1c 0202 	adds.w	r2, ip, r2
 80004c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 80004ca:	4291      	cmp	r1, r2
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 80004ce:	3d02      	subs	r5, #2
 80004d0:	4462      	add	r2, ip
 80004d2:	1a52      	subs	r2, r2, r1
 80004d4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0xfc>
 80004da:	4631      	mov	r1, r6
 80004dc:	4630      	mov	r0, r6
 80004de:	e708      	b.n	80002f2 <__udivmoddi4+0xa2>
 80004e0:	4639      	mov	r1, r7
 80004e2:	e6e6      	b.n	80002b2 <__udivmoddi4+0x62>
 80004e4:	4610      	mov	r0, r2
 80004e6:	e6fb      	b.n	80002e0 <__udivmoddi4+0x90>
 80004e8:	4548      	cmp	r0, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004f4:	3b01      	subs	r3, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f8:	4645      	mov	r5, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x282>
 80004fc:	462b      	mov	r3, r5
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1da>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x258>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000508:	3d02      	subs	r5, #2
 800050a:	4462      	add	r2, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x124>
 800050e:	4608      	mov	r0, r1
 8000510:	e70a      	b.n	8000328 <__udivmoddi4+0xd8>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x14e>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f000 fb8a 	bl	8000c38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f820 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f000 f922 	bl	8000770 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800052c:	f000 f8c6 	bl	80006bc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000530:	f000 f8ee 	bl	8000710 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM7_Init();
 8000534:	f000 f884 	bl	8000640 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  /* Enable TIM7 = TIM7->CR1 |= TIM_CR1_CEN */
  HAL_TIM_Base_Start(&htim7);
 8000538:	4807      	ldr	r0, [pc, #28]	; (8000558 <main+0x3c>)
 800053a:	f001 ffcd 	bl	80024d8 <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800053e:	f003 f89f 	bl	8003680 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blinkyTask */
  blinkyTaskHandle = osThreadNew(BlinkyLEDTask, NULL, &blinkyTask_attributes);
 8000542:	4a06      	ldr	r2, [pc, #24]	; (800055c <main+0x40>)
 8000544:	2100      	movs	r1, #0
 8000546:	4806      	ldr	r0, [pc, #24]	; (8000560 <main+0x44>)
 8000548:	f003 f8e4 	bl	8003714 <osThreadNew>
 800054c:	4603      	mov	r3, r0
 800054e:	4a05      	ldr	r2, [pc, #20]	; (8000564 <main+0x48>)
 8000550:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000552:	f003 f8b9 	bl	80036c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000556:	e7fe      	b.n	8000556 <main+0x3a>
 8000558:	2000002c 	.word	0x2000002c
 800055c:	080061dc 	.word	0x080061dc
 8000560:	080008cd 	.word	0x080008cd
 8000564:	200005c4 	.word	0x200005c4

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b094      	sub	sp, #80	; 0x50
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 031c 	add.w	r3, r7, #28
 8000572:	2234      	movs	r2, #52	; 0x34
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f005 fdd0 	bl	800611c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	f107 0308 	add.w	r3, r7, #8
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800058c:	2300      	movs	r3, #0
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	4b29      	ldr	r3, [pc, #164]	; (8000638 <SystemClock_Config+0xd0>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000594:	4a28      	ldr	r2, [pc, #160]	; (8000638 <SystemClock_Config+0xd0>)
 8000596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059a:	6413      	str	r3, [r2, #64]	; 0x40
 800059c:	4b26      	ldr	r3, [pc, #152]	; (8000638 <SystemClock_Config+0xd0>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a8:	2300      	movs	r3, #0
 80005aa:	603b      	str	r3, [r7, #0]
 80005ac:	4b23      	ldr	r3, [pc, #140]	; (800063c <SystemClock_Config+0xd4>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a22      	ldr	r2, [pc, #136]	; (800063c <SystemClock_Config+0xd4>)
 80005b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005b6:	6013      	str	r3, [r2, #0]
 80005b8:	4b20      	ldr	r3, [pc, #128]	; (800063c <SystemClock_Config+0xd4>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005c0:	603b      	str	r3, [r7, #0]
 80005c2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c4:	2301      	movs	r3, #1
 80005c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005c8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005cc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ce:	2302      	movs	r3, #2
 80005d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005d8:	2308      	movs	r3, #8
 80005da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 384;
 80005dc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80005e0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005e2:	2304      	movs	r3, #4
 80005e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80005e6:	2308      	movs	r3, #8
 80005e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005ea:	2302      	movs	r3, #2
 80005ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ee:	f107 031c 	add.w	r3, r7, #28
 80005f2:	4618      	mov	r0, r3
 80005f4:	f001 fc9c 	bl	8001f30 <HAL_RCC_OscConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005fe:	f000 f99b 	bl	8000938 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000602:	230f      	movs	r3, #15
 8000604:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000606:	2302      	movs	r3, #2
 8000608:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800060e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000612:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000618:	f107 0308 	add.w	r3, r7, #8
 800061c:	2103      	movs	r1, #3
 800061e:	4618      	mov	r0, r3
 8000620:	f000 ffda 	bl	80015d8 <HAL_RCC_ClockConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800062a:	f000 f985 	bl	8000938 <Error_Handler>
  }
}
 800062e:	bf00      	nop
 8000630:	3750      	adds	r7, #80	; 0x50
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40023800 	.word	0x40023800
 800063c:	40007000 	.word	0x40007000

08000640 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000646:	463b      	mov	r3, r7
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800064e:	4b19      	ldr	r3, [pc, #100]	; (80006b4 <MX_TIM7_Init+0x74>)
 8000650:	4a19      	ldr	r2, [pc, #100]	; (80006b8 <MX_TIM7_Init+0x78>)
 8000652:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 99;
 8000654:	4b17      	ldr	r3, [pc, #92]	; (80006b4 <MX_TIM7_Init+0x74>)
 8000656:	2263      	movs	r2, #99	; 0x63
 8000658:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800065a:	4b16      	ldr	r3, [pc, #88]	; (80006b4 <MX_TIM7_Init+0x74>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8000660:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <MX_TIM7_Init+0x74>)
 8000662:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000666:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000668:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <MX_TIM7_Init+0x74>)
 800066a:	2200      	movs	r2, #0
 800066c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800066e:	4811      	ldr	r0, [pc, #68]	; (80006b4 <MX_TIM7_Init+0x74>)
 8000670:	f001 fee2 	bl	8002438 <HAL_TIM_Base_Init>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800067a:	f000 f95d 	bl	8000938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800067e:	2300      	movs	r3, #0
 8000680:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000682:	2300      	movs	r3, #0
 8000684:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000686:	463b      	mov	r3, r7
 8000688:	4619      	mov	r1, r3
 800068a:	480a      	ldr	r0, [pc, #40]	; (80006b4 <MX_TIM7_Init+0x74>)
 800068c:	f002 f966 	bl	800295c <HAL_TIMEx_MasterConfigSynchronization>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000696:	f000 f94f 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* enable the Update Interrupt Event */
  __HAL_TIM_ENABLE_IT(&htim7, TIM_IT_UPDATE);
 800069a:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MX_TIM7_Init+0x74>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	68da      	ldr	r2, [r3, #12]
 80006a0:	4b04      	ldr	r3, [pc, #16]	; (80006b4 <MX_TIM7_Init+0x74>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f042 0201 	orr.w	r2, r2, #1
 80006a8:	60da      	str	r2, [r3, #12]

  /* USER CODE END TIM7_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	2000002c 	.word	0x2000002c
 80006b8:	40001400 	.word	0x40001400

080006bc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006c0:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_USART3_UART_Init+0x4c>)
 80006c2:	4a12      	ldr	r2, [pc, #72]	; (800070c <MX_USART3_UART_Init+0x50>)
 80006c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006c6:	4b10      	ldr	r3, [pc, #64]	; (8000708 <MX_USART3_UART_Init+0x4c>)
 80006c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <MX_USART3_UART_Init+0x4c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MX_USART3_UART_Init+0x4c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006da:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <MX_USART3_UART_Init+0x4c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006e0:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_USART3_UART_Init+0x4c>)
 80006e2:	220c      	movs	r2, #12
 80006e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <MX_USART3_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_USART3_UART_Init+0x4c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <MX_USART3_UART_Init+0x4c>)
 80006f4:	f002 f9c2 	bl	8002a7c <HAL_UART_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80006fe:	f000 f91b 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000074 	.word	0x20000074
 800070c:	40004800 	.word	0x40004800

08000710 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000714:	4b15      	ldr	r3, [pc, #84]	; (800076c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000716:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800071a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800071c:	4b13      	ldr	r3, [pc, #76]	; (800076c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800071e:	2206      	movs	r2, #6
 8000720:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000722:	4b12      	ldr	r3, [pc, #72]	; (800076c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000724:	2202      	movs	r2, #2
 8000726:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000728:	4b10      	ldr	r3, [pc, #64]	; (800076c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800072a:	2200      	movs	r2, #0
 800072c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800072e:	4b0f      	ldr	r3, [pc, #60]	; (800076c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000730:	2202      	movs	r2, #2
 8000732:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000734:	4b0d      	ldr	r3, [pc, #52]	; (800076c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000736:	2201      	movs	r2, #1
 8000738:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800073a:	4b0c      	ldr	r3, [pc, #48]	; (800076c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800073c:	2200      	movs	r2, #0
 800073e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000740:	4b0a      	ldr	r3, [pc, #40]	; (800076c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000742:	2200      	movs	r2, #0
 8000744:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000748:	2201      	movs	r2, #1
 800074a:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800074c:	4b07      	ldr	r3, [pc, #28]	; (800076c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800074e:	2201      	movs	r2, #1
 8000750:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000752:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000754:	2200      	movs	r2, #0
 8000756:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000758:	4804      	ldr	r0, [pc, #16]	; (800076c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800075a:	f000 fdf4 	bl	8001346 <HAL_PCD_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 8000764:	f000 f8e8 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}
 800076c:	200000b8 	.word	0x200000b8

08000770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08c      	sub	sp, #48	; 0x30
 8000774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000776:	f107 031c 	add.w	r3, r7, #28
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
 8000784:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	61bb      	str	r3, [r7, #24]
 800078a:	4b4c      	ldr	r3, [pc, #304]	; (80008bc <MX_GPIO_Init+0x14c>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a4b      	ldr	r2, [pc, #300]	; (80008bc <MX_GPIO_Init+0x14c>)
 8000790:	f043 0304 	orr.w	r3, r3, #4
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b49      	ldr	r3, [pc, #292]	; (80008bc <MX_GPIO_Init+0x14c>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0304 	and.w	r3, r3, #4
 800079e:	61bb      	str	r3, [r7, #24]
 80007a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
 80007a6:	4b45      	ldr	r3, [pc, #276]	; (80008bc <MX_GPIO_Init+0x14c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a44      	ldr	r2, [pc, #272]	; (80008bc <MX_GPIO_Init+0x14c>)
 80007ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b42      	ldr	r3, [pc, #264]	; (80008bc <MX_GPIO_Init+0x14c>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ba:	617b      	str	r3, [r7, #20]
 80007bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	613b      	str	r3, [r7, #16]
 80007c2:	4b3e      	ldr	r3, [pc, #248]	; (80008bc <MX_GPIO_Init+0x14c>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a3d      	ldr	r2, [pc, #244]	; (80008bc <MX_GPIO_Init+0x14c>)
 80007c8:	f043 0302 	orr.w	r3, r3, #2
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b3b      	ldr	r3, [pc, #236]	; (80008bc <MX_GPIO_Init+0x14c>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0302 	and.w	r3, r3, #2
 80007d6:	613b      	str	r3, [r7, #16]
 80007d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	4b37      	ldr	r3, [pc, #220]	; (80008bc <MX_GPIO_Init+0x14c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a36      	ldr	r2, [pc, #216]	; (80008bc <MX_GPIO_Init+0x14c>)
 80007e4:	f043 0308 	orr.w	r3, r3, #8
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b34      	ldr	r3, [pc, #208]	; (80008bc <MX_GPIO_Init+0x14c>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0308 	and.w	r3, r3, #8
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	4b30      	ldr	r3, [pc, #192]	; (80008bc <MX_GPIO_Init+0x14c>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a2f      	ldr	r2, [pc, #188]	; (80008bc <MX_GPIO_Init+0x14c>)
 8000800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b2d      	ldr	r3, [pc, #180]	; (80008bc <MX_GPIO_Init+0x14c>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	4b29      	ldr	r3, [pc, #164]	; (80008bc <MX_GPIO_Init+0x14c>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a28      	ldr	r2, [pc, #160]	; (80008bc <MX_GPIO_Init+0x14c>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b26      	ldr	r3, [pc, #152]	; (80008bc <MX_GPIO_Init+0x14c>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	f244 0181 	movw	r1, #16513	; 0x4081
 8000834:	4822      	ldr	r0, [pc, #136]	; (80008c0 <MX_GPIO_Init+0x150>)
 8000836:	f000 fd53 	bl	80012e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	2140      	movs	r1, #64	; 0x40
 800083e:	4821      	ldr	r0, [pc, #132]	; (80008c4 <MX_GPIO_Init+0x154>)
 8000840:	f000 fd4e 	bl	80012e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000844:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800084a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800084e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000854:	f107 031c 	add.w	r3, r7, #28
 8000858:	4619      	mov	r1, r3
 800085a:	481b      	ldr	r0, [pc, #108]	; (80008c8 <MX_GPIO_Init+0x158>)
 800085c:	f000 fb94 	bl	8000f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000860:	f244 0381 	movw	r3, #16513	; 0x4081
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000866:	2301      	movs	r3, #1
 8000868:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	2300      	movs	r3, #0
 8000870:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	4619      	mov	r1, r3
 8000878:	4811      	ldr	r0, [pc, #68]	; (80008c0 <MX_GPIO_Init+0x150>)
 800087a:	f000 fb85 	bl	8000f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800087e:	2340      	movs	r3, #64	; 0x40
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000882:	2301      	movs	r3, #1
 8000884:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2300      	movs	r3, #0
 800088c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	4619      	mov	r1, r3
 8000894:	480b      	ldr	r0, [pc, #44]	; (80008c4 <MX_GPIO_Init+0x154>)
 8000896:	f000 fb77 	bl	8000f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800089a:	2380      	movs	r3, #128	; 0x80
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800089e:	2300      	movs	r3, #0
 80008a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	4805      	ldr	r0, [pc, #20]	; (80008c4 <MX_GPIO_Init+0x154>)
 80008ae:	f000 fb6b 	bl	8000f88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008b2:	bf00      	nop
 80008b4:	3730      	adds	r7, #48	; 0x30
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40020400 	.word	0x40020400
 80008c4:	40021800 	.word	0x40021800
 80008c8:	40020800 	.word	0x40020800

080008cc <BlinkyLEDTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_BlinkyLEDTask */
void BlinkyLEDTask(void *argument)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for (;;)
  {

	if ((ms_counter % 125) == 0)
 80008d4:	4b14      	ldr	r3, [pc, #80]	; (8000928 <BlinkyLEDTask+0x5c>)
 80008d6:	6819      	ldr	r1, [r3, #0]
 80008d8:	4b14      	ldr	r3, [pc, #80]	; (800092c <BlinkyLEDTask+0x60>)
 80008da:	fba3 2301 	umull	r2, r3, r3, r1
 80008de:	08da      	lsrs	r2, r3, #3
 80008e0:	4613      	mov	r3, r2
 80008e2:	015b      	lsls	r3, r3, #5
 80008e4:	1a9b      	subs	r3, r3, r2
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	4413      	add	r3, r2
 80008ea:	1aca      	subs	r2, r1, r3
 80008ec:	2a00      	cmp	r2, #0
 80008ee:	d103      	bne.n	80008f8 <BlinkyLEDTask+0x2c>
	{
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80008f0:	2180      	movs	r1, #128	; 0x80
 80008f2:	480f      	ldr	r0, [pc, #60]	; (8000930 <BlinkyLEDTask+0x64>)
 80008f4:	f000 fd0d 	bl	8001312 <HAL_GPIO_TogglePin>
	}

	if (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) != GPIO_PIN_RESET)
 80008f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008fc:	480d      	ldr	r0, [pc, #52]	; (8000934 <BlinkyLEDTask+0x68>)
 80008fe:	f000 fcd7 	bl	80012b0 <HAL_GPIO_ReadPin>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d008      	beq.n	800091a <BlinkyLEDTask+0x4e>
		// osTimerStart(blinkySWTimerHandle, 500);
      //}
      /* SWTimer sets a flag every 500ms */
      // if (blinkyTrigger)
      // {
        HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000908:	2101      	movs	r1, #1
 800090a:	4809      	ldr	r0, [pc, #36]	; (8000930 <BlinkyLEDTask+0x64>)
 800090c:	f000 fd01 	bl	8001312 <HAL_GPIO_TogglePin>
        osDelay(500);
 8000910:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000914:	f002 ff90 	bl	8003838 <osDelay>
 8000918:	e7dc      	b.n	80008d4 <BlinkyLEDTask+0x8>
      //if (osTimerIsRunning(blinkySWTimerHandle))
      //{
      //  osTimerStop(blinkySWTimerHandle);
      //}
      //blinkyTrigger = true;
      HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	2101      	movs	r1, #1
 800091e:	4804      	ldr	r0, [pc, #16]	; (8000930 <BlinkyLEDTask+0x64>)
 8000920:	f000 fcde 	bl	80012e0 <HAL_GPIO_WritePin>
	if ((ms_counter % 125) == 0)
 8000924:	e7d6      	b.n	80008d4 <BlinkyLEDTask+0x8>
 8000926:	bf00      	nop
 8000928:	200005c8 	.word	0x200005c8
 800092c:	10624dd3 	.word	0x10624dd3
 8000930:	40020400 	.word	0x40020400
 8000934:	40020800 	.word	0x40020800

08000938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800093c:	b672      	cpsid	i
}
 800093e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000940:	e7fe      	b.n	8000940 <Error_Handler+0x8>
	...

08000944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	4b12      	ldr	r3, [pc, #72]	; (8000998 <HAL_MspInit+0x54>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000952:	4a11      	ldr	r2, [pc, #68]	; (8000998 <HAL_MspInit+0x54>)
 8000954:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000958:	6453      	str	r3, [r2, #68]	; 0x44
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <HAL_MspInit+0x54>)
 800095c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	603b      	str	r3, [r7, #0]
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <HAL_MspInit+0x54>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096e:	4a0a      	ldr	r2, [pc, #40]	; (8000998 <HAL_MspInit+0x54>)
 8000970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000974:	6413      	str	r3, [r2, #64]	; 0x40
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <HAL_MspInit+0x54>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000982:	2200      	movs	r2, #0
 8000984:	210f      	movs	r1, #15
 8000986:	f06f 0001 	mvn.w	r0, #1
 800098a:	f000 fac6 	bl	8000f1a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800

0800099c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a0e      	ldr	r2, [pc, #56]	; (80009e4 <HAL_TIM_Base_MspInit+0x48>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d115      	bne.n	80009da <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	4b0d      	ldr	r3, [pc, #52]	; (80009e8 <HAL_TIM_Base_MspInit+0x4c>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b6:	4a0c      	ldr	r2, [pc, #48]	; (80009e8 <HAL_TIM_Base_MspInit+0x4c>)
 80009b8:	f043 0320 	orr.w	r3, r3, #32
 80009bc:	6413      	str	r3, [r2, #64]	; 0x40
 80009be:	4b0a      	ldr	r3, [pc, #40]	; (80009e8 <HAL_TIM_Base_MspInit+0x4c>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c2:	f003 0320 	and.w	r3, r3, #32
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2105      	movs	r1, #5
 80009ce:	2037      	movs	r0, #55	; 0x37
 80009d0:	f000 faa3 	bl	8000f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80009d4:	2037      	movs	r0, #55	; 0x37
 80009d6:	f000 fabc 	bl	8000f52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80009da:	bf00      	nop
 80009dc:	3710      	adds	r7, #16
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40001400 	.word	0x40001400
 80009e8:	40023800 	.word	0x40023800

080009ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08a      	sub	sp, #40	; 0x28
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a19      	ldr	r2, [pc, #100]	; (8000a70 <HAL_UART_MspInit+0x84>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d12c      	bne.n	8000a68 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	613b      	str	r3, [r7, #16]
 8000a12:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <HAL_UART_MspInit+0x88>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	4a17      	ldr	r2, [pc, #92]	; (8000a74 <HAL_UART_MspInit+0x88>)
 8000a18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1e:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <HAL_UART_MspInit+0x88>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <HAL_UART_MspInit+0x88>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a10      	ldr	r2, [pc, #64]	; (8000a74 <HAL_UART_MspInit+0x88>)
 8000a34:	f043 0308 	orr.w	r3, r3, #8
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <HAL_UART_MspInit+0x88>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f003 0308 	and.w	r3, r3, #8
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a54:	2303      	movs	r3, #3
 8000a56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a58:	2307      	movs	r3, #7
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4619      	mov	r1, r3
 8000a62:	4805      	ldr	r0, [pc, #20]	; (8000a78 <HAL_UART_MspInit+0x8c>)
 8000a64:	f000 fa90 	bl	8000f88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a68:	bf00      	nop
 8000a6a:	3728      	adds	r7, #40	; 0x28
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40004800 	.word	0x40004800
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40020c00 	.word	0x40020c00

08000a7c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b0a0      	sub	sp, #128	; 0x80
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	2258      	movs	r2, #88	; 0x58
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f005 fb3d 	bl	800611c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000aaa:	d14d      	bne.n	8000b48 <HAL_PCD_MspInit+0xcc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000aac:	2320      	movs	r3, #32
 8000aae:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f000 ffad 	bl	8001a18 <HAL_RCCEx_PeriphCLKConfig>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 8000ac4:	f7ff ff38 	bl	8000938 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac8:	2300      	movs	r3, #0
 8000aca:	613b      	str	r3, [r7, #16]
 8000acc:	4b20      	ldr	r3, [pc, #128]	; (8000b50 <HAL_PCD_MspInit+0xd4>)
 8000ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad0:	4a1f      	ldr	r2, [pc, #124]	; (8000b50 <HAL_PCD_MspInit+0xd4>)
 8000ad2:	f043 0301 	orr.w	r3, r3, #1
 8000ad6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad8:	4b1d      	ldr	r3, [pc, #116]	; (8000b50 <HAL_PCD_MspInit+0xd4>)
 8000ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000adc:	f003 0301 	and.w	r3, r3, #1
 8000ae0:	613b      	str	r3, [r7, #16]
 8000ae2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ae4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000ae8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aea:	2302      	movs	r3, #2
 8000aec:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af2:	2303      	movs	r3, #3
 8000af4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000af6:	230a      	movs	r3, #10
 8000af8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000afe:	4619      	mov	r1, r3
 8000b00:	4814      	ldr	r0, [pc, #80]	; (8000b54 <HAL_PCD_MspInit+0xd8>)
 8000b02:	f000 fa41 	bl	8000f88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b0a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b14:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b18:	4619      	mov	r1, r3
 8000b1a:	480e      	ldr	r0, [pc, #56]	; (8000b54 <HAL_PCD_MspInit+0xd8>)
 8000b1c:	f000 fa34 	bl	8000f88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000b20:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <HAL_PCD_MspInit+0xd4>)
 8000b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b24:	4a0a      	ldr	r2, [pc, #40]	; (8000b50 <HAL_PCD_MspInit+0xd4>)
 8000b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b2a:	6353      	str	r3, [r2, #52]	; 0x34
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <HAL_PCD_MspInit+0xd4>)
 8000b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b34:	4a06      	ldr	r2, [pc, #24]	; (8000b50 <HAL_PCD_MspInit+0xd4>)
 8000b36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b3a:	6453      	str	r3, [r2, #68]	; 0x44
 8000b3c:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <HAL_PCD_MspInit+0xd4>)
 8000b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000b48:	bf00      	nop
 8000b4a:	3780      	adds	r7, #128	; 0x80
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40020000 	.word	0x40020000

08000b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <NMI_Handler+0x4>

08000b5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <HardFault_Handler+0x4>

08000b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <MemManage_Handler+0x4>

08000b6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <BusFault_Handler+0x4>

08000b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <UsageFault_Handler+0x4>

08000b76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b88:	f000 f8a8 	bl	8000cdc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b8c:	f004 fa62 	bl	8005054 <xTaskGetSchedulerState>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d001      	beq.n	8000b9a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b96:	f005 f847 	bl	8005c28 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
	...

08000ba0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000ba4:	4804      	ldr	r0, [pc, #16]	; (8000bb8 <TIM7_IRQHandler+0x18>)
 8000ba6:	f001 fcff 	bl	80025a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  ms_counter += 1;
 8000baa:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <TIM7_IRQHandler+0x1c>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	4a02      	ldr	r2, [pc, #8]	; (8000bbc <TIM7_IRQHandler+0x1c>)
 8000bb2:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM7_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	2000002c 	.word	0x2000002c
 8000bbc:	200005c8 	.word	0x200005c8

08000bc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <SystemInit+0x20>)
 8000bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bca:	4a05      	ldr	r2, [pc, #20]	; (8000be0 <SystemInit+0x20>)
 8000bcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000be4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000be8:	480d      	ldr	r0, [pc, #52]	; (8000c20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bea:	490e      	ldr	r1, [pc, #56]	; (8000c24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bec:	4a0e      	ldr	r2, [pc, #56]	; (8000c28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf0:	e002      	b.n	8000bf8 <LoopCopyDataInit>

08000bf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf6:	3304      	adds	r3, #4

08000bf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bfc:	d3f9      	bcc.n	8000bf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bfe:	4a0b      	ldr	r2, [pc, #44]	; (8000c2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c00:	4c0b      	ldr	r4, [pc, #44]	; (8000c30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c04:	e001      	b.n	8000c0a <LoopFillZerobss>

08000c06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c08:	3204      	adds	r2, #4

08000c0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c0c:	d3fb      	bcc.n	8000c06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c0e:	f7ff ffd7 	bl	8000bc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c12:	f005 fa8b 	bl	800612c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c16:	f7ff fc81 	bl	800051c <main>
  bx  lr    
 8000c1a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000c1c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000c20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c24:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000c28:	08006228 	.word	0x08006228
  ldr r2, =_sbss
 8000c2c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c30:	20004f20 	.word	0x20004f20

08000c34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c34:	e7fe      	b.n	8000c34 <ADC_IRQHandler>
	...

08000c38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c3c:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <HAL_Init+0x40>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a0d      	ldr	r2, [pc, #52]	; (8000c78 <HAL_Init+0x40>)
 8000c42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c48:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <HAL_Init+0x40>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a0a      	ldr	r2, [pc, #40]	; (8000c78 <HAL_Init+0x40>)
 8000c4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c54:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <HAL_Init+0x40>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a07      	ldr	r2, [pc, #28]	; (8000c78 <HAL_Init+0x40>)
 8000c5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c60:	2003      	movs	r0, #3
 8000c62:	f000 f94f 	bl	8000f04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c66:	200f      	movs	r0, #15
 8000c68:	f000 f808 	bl	8000c7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c6c:	f7ff fe6a 	bl	8000944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40023c00 	.word	0x40023c00

08000c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c84:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <HAL_InitTick+0x54>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <HAL_InitTick+0x58>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 f967 	bl	8000f6e <HAL_SYSTICK_Config>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e00e      	b.n	8000cc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2b0f      	cmp	r3, #15
 8000cae:	d80a      	bhi.n	8000cc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	6879      	ldr	r1, [r7, #4]
 8000cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb8:	f000 f92f 	bl	8000f1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cbc:	4a06      	ldr	r2, [pc, #24]	; (8000cd8 <HAL_InitTick+0x5c>)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e000      	b.n	8000cc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000000 	.word	0x20000000
 8000cd4:	20000008 	.word	0x20000008
 8000cd8:	20000004 	.word	0x20000004

08000cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_IncTick+0x20>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_IncTick+0x24>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4413      	add	r3, r2
 8000cec:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <HAL_IncTick+0x24>)
 8000cee:	6013      	str	r3, [r2, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	20000008 	.word	0x20000008
 8000d00:	200005cc 	.word	0x200005cc

08000d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return uwTick;
 8000d08:	4b03      	ldr	r3, [pc, #12]	; (8000d18 <HAL_GetTick+0x14>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	200005cc 	.word	0x200005cc

08000d1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d24:	f7ff ffee 	bl	8000d04 <HAL_GetTick>
 8000d28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d34:	d005      	beq.n	8000d42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d36:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <HAL_Delay+0x44>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	4413      	add	r3, r2
 8000d40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d42:	bf00      	nop
 8000d44:	f7ff ffde 	bl	8000d04 <HAL_GetTick>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d8f7      	bhi.n	8000d44 <HAL_Delay+0x28>
  {
  }
}
 8000d54:	bf00      	nop
 8000d56:	bf00      	nop
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000008 	.word	0x20000008

08000d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d74:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d7a:	68ba      	ldr	r2, [r7, #8]
 8000d7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d80:	4013      	ands	r3, r2
 8000d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d96:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	60d3      	str	r3, [r2, #12]
}
 8000d9c:	bf00      	nop
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db0:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	0a1b      	lsrs	r3, r3, #8
 8000db6:	f003 0307 	and.w	r3, r3, #7
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	db0b      	blt.n	8000df2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	f003 021f 	and.w	r2, r3, #31
 8000de0:	4907      	ldr	r1, [pc, #28]	; (8000e00 <__NVIC_EnableIRQ+0x38>)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	095b      	lsrs	r3, r3, #5
 8000de8:	2001      	movs	r0, #1
 8000dea:	fa00 f202 	lsl.w	r2, r0, r2
 8000dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000e100 	.word	0xe000e100

08000e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	6039      	str	r1, [r7, #0]
 8000e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	db0a      	blt.n	8000e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	490c      	ldr	r1, [pc, #48]	; (8000e50 <__NVIC_SetPriority+0x4c>)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	0112      	lsls	r2, r2, #4
 8000e24:	b2d2      	uxtb	r2, r2
 8000e26:	440b      	add	r3, r1
 8000e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e2c:	e00a      	b.n	8000e44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	4908      	ldr	r1, [pc, #32]	; (8000e54 <__NVIC_SetPriority+0x50>)
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	f003 030f 	and.w	r3, r3, #15
 8000e3a:	3b04      	subs	r3, #4
 8000e3c:	0112      	lsls	r2, r2, #4
 8000e3e:	b2d2      	uxtb	r2, r2
 8000e40:	440b      	add	r3, r1
 8000e42:	761a      	strb	r2, [r3, #24]
}
 8000e44:	bf00      	nop
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000e100 	.word	0xe000e100
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b089      	sub	sp, #36	; 0x24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	f1c3 0307 	rsb	r3, r3, #7
 8000e72:	2b04      	cmp	r3, #4
 8000e74:	bf28      	it	cs
 8000e76:	2304      	movcs	r3, #4
 8000e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	3304      	adds	r3, #4
 8000e7e:	2b06      	cmp	r3, #6
 8000e80:	d902      	bls.n	8000e88 <NVIC_EncodePriority+0x30>
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	3b03      	subs	r3, #3
 8000e86:	e000      	b.n	8000e8a <NVIC_EncodePriority+0x32>
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43da      	mvns	r2, r3
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	401a      	ands	r2, r3
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eaa:	43d9      	mvns	r1, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb0:	4313      	orrs	r3, r2
         );
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3724      	adds	r7, #36	; 0x24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
	...

08000ec0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ed0:	d301      	bcc.n	8000ed6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e00f      	b.n	8000ef6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ed6:	4a0a      	ldr	r2, [pc, #40]	; (8000f00 <SysTick_Config+0x40>)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3b01      	subs	r3, #1
 8000edc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ede:	210f      	movs	r1, #15
 8000ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee4:	f7ff ff8e 	bl	8000e04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee8:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <SysTick_Config+0x40>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eee:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <SysTick_Config+0x40>)
 8000ef0:	2207      	movs	r2, #7
 8000ef2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	e000e010 	.word	0xe000e010

08000f04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f7ff ff29 	bl	8000d64 <__NVIC_SetPriorityGrouping>
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b086      	sub	sp, #24
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	4603      	mov	r3, r0
 8000f22:	60b9      	str	r1, [r7, #8]
 8000f24:	607a      	str	r2, [r7, #4]
 8000f26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f2c:	f7ff ff3e 	bl	8000dac <__NVIC_GetPriorityGrouping>
 8000f30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	68b9      	ldr	r1, [r7, #8]
 8000f36:	6978      	ldr	r0, [r7, #20]
 8000f38:	f7ff ff8e 	bl	8000e58 <NVIC_EncodePriority>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f42:	4611      	mov	r1, r2
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff ff5d 	bl	8000e04 <__NVIC_SetPriority>
}
 8000f4a:	bf00      	nop
 8000f4c:	3718      	adds	r7, #24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	4603      	mov	r3, r0
 8000f5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff ff31 	bl	8000dc8 <__NVIC_EnableIRQ>
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f7ff ffa2 	bl	8000ec0 <SysTick_Config>
 8000f7c:	4603      	mov	r3, r0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b089      	sub	sp, #36	; 0x24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f92:	2300      	movs	r3, #0
 8000f94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f96:	2300      	movs	r3, #0
 8000f98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61fb      	str	r3, [r7, #28]
 8000fa2:	e165      	b.n	8001270 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	697a      	ldr	r2, [r7, #20]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	f040 8154 	bne.w	800126a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f003 0303 	and.w	r3, r3, #3
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d005      	beq.n	8000fda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d130      	bne.n	800103c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	2203      	movs	r2, #3
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	68da      	ldr	r2, [r3, #12]
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4313      	orrs	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001010:	2201      	movs	r2, #1
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	091b      	lsrs	r3, r3, #4
 8001026:	f003 0201 	and.w	r2, r3, #1
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4313      	orrs	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 0303 	and.w	r3, r3, #3
 8001044:	2b03      	cmp	r3, #3
 8001046:	d017      	beq.n	8001078 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	2203      	movs	r2, #3
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	689a      	ldr	r2, [r3, #8]
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 0303 	and.w	r3, r3, #3
 8001080:	2b02      	cmp	r3, #2
 8001082:	d123      	bne.n	80010cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	08da      	lsrs	r2, r3, #3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3208      	adds	r2, #8
 800108c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001090:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	f003 0307 	and.w	r3, r3, #7
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	220f      	movs	r2, #15
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4013      	ands	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	691a      	ldr	r2, [r3, #16]
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	08da      	lsrs	r2, r3, #3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	3208      	adds	r2, #8
 80010c6:	69b9      	ldr	r1, [r7, #24]
 80010c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	2203      	movs	r2, #3
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f003 0203 	and.w	r2, r3, #3
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001108:	2b00      	cmp	r3, #0
 800110a:	f000 80ae 	beq.w	800126a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	4b5d      	ldr	r3, [pc, #372]	; (8001288 <HAL_GPIO_Init+0x300>)
 8001114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001116:	4a5c      	ldr	r2, [pc, #368]	; (8001288 <HAL_GPIO_Init+0x300>)
 8001118:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800111c:	6453      	str	r3, [r2, #68]	; 0x44
 800111e:	4b5a      	ldr	r3, [pc, #360]	; (8001288 <HAL_GPIO_Init+0x300>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001122:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800112a:	4a58      	ldr	r2, [pc, #352]	; (800128c <HAL_GPIO_Init+0x304>)
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	089b      	lsrs	r3, r3, #2
 8001130:	3302      	adds	r3, #2
 8001132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001136:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	f003 0303 	and.w	r3, r3, #3
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	220f      	movs	r2, #15
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4013      	ands	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a4f      	ldr	r2, [pc, #316]	; (8001290 <HAL_GPIO_Init+0x308>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d025      	beq.n	80011a2 <HAL_GPIO_Init+0x21a>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a4e      	ldr	r2, [pc, #312]	; (8001294 <HAL_GPIO_Init+0x30c>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d01f      	beq.n	800119e <HAL_GPIO_Init+0x216>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a4d      	ldr	r2, [pc, #308]	; (8001298 <HAL_GPIO_Init+0x310>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d019      	beq.n	800119a <HAL_GPIO_Init+0x212>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a4c      	ldr	r2, [pc, #304]	; (800129c <HAL_GPIO_Init+0x314>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d013      	beq.n	8001196 <HAL_GPIO_Init+0x20e>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a4b      	ldr	r2, [pc, #300]	; (80012a0 <HAL_GPIO_Init+0x318>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d00d      	beq.n	8001192 <HAL_GPIO_Init+0x20a>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a4a      	ldr	r2, [pc, #296]	; (80012a4 <HAL_GPIO_Init+0x31c>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d007      	beq.n	800118e <HAL_GPIO_Init+0x206>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a49      	ldr	r2, [pc, #292]	; (80012a8 <HAL_GPIO_Init+0x320>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d101      	bne.n	800118a <HAL_GPIO_Init+0x202>
 8001186:	2306      	movs	r3, #6
 8001188:	e00c      	b.n	80011a4 <HAL_GPIO_Init+0x21c>
 800118a:	2307      	movs	r3, #7
 800118c:	e00a      	b.n	80011a4 <HAL_GPIO_Init+0x21c>
 800118e:	2305      	movs	r3, #5
 8001190:	e008      	b.n	80011a4 <HAL_GPIO_Init+0x21c>
 8001192:	2304      	movs	r3, #4
 8001194:	e006      	b.n	80011a4 <HAL_GPIO_Init+0x21c>
 8001196:	2303      	movs	r3, #3
 8001198:	e004      	b.n	80011a4 <HAL_GPIO_Init+0x21c>
 800119a:	2302      	movs	r3, #2
 800119c:	e002      	b.n	80011a4 <HAL_GPIO_Init+0x21c>
 800119e:	2301      	movs	r3, #1
 80011a0:	e000      	b.n	80011a4 <HAL_GPIO_Init+0x21c>
 80011a2:	2300      	movs	r3, #0
 80011a4:	69fa      	ldr	r2, [r7, #28]
 80011a6:	f002 0203 	and.w	r2, r2, #3
 80011aa:	0092      	lsls	r2, r2, #2
 80011ac:	4093      	lsls	r3, r2
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011b4:	4935      	ldr	r1, [pc, #212]	; (800128c <HAL_GPIO_Init+0x304>)
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	089b      	lsrs	r3, r3, #2
 80011ba:	3302      	adds	r3, #2
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011c2:	4b3a      	ldr	r3, [pc, #232]	; (80012ac <HAL_GPIO_Init+0x324>)
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	43db      	mvns	r3, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4013      	ands	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d003      	beq.n	80011e6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011e6:	4a31      	ldr	r2, [pc, #196]	; (80012ac <HAL_GPIO_Init+0x324>)
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011ec:	4b2f      	ldr	r3, [pc, #188]	; (80012ac <HAL_GPIO_Init+0x324>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d003      	beq.n	8001210 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	4313      	orrs	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001210:	4a26      	ldr	r2, [pc, #152]	; (80012ac <HAL_GPIO_Init+0x324>)
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001216:	4b25      	ldr	r3, [pc, #148]	; (80012ac <HAL_GPIO_Init+0x324>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	43db      	mvns	r3, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4013      	ands	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800123a:	4a1c      	ldr	r2, [pc, #112]	; (80012ac <HAL_GPIO_Init+0x324>)
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001240:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <HAL_GPIO_Init+0x324>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	43db      	mvns	r3, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4013      	ands	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d003      	beq.n	8001264 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	4313      	orrs	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001264:	4a11      	ldr	r2, [pc, #68]	; (80012ac <HAL_GPIO_Init+0x324>)
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3301      	adds	r3, #1
 800126e:	61fb      	str	r3, [r7, #28]
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	2b0f      	cmp	r3, #15
 8001274:	f67f ae96 	bls.w	8000fa4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001278:	bf00      	nop
 800127a:	bf00      	nop
 800127c:	3724      	adds	r7, #36	; 0x24
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	40023800 	.word	0x40023800
 800128c:	40013800 	.word	0x40013800
 8001290:	40020000 	.word	0x40020000
 8001294:	40020400 	.word	0x40020400
 8001298:	40020800 	.word	0x40020800
 800129c:	40020c00 	.word	0x40020c00
 80012a0:	40021000 	.word	0x40021000
 80012a4:	40021400 	.word	0x40021400
 80012a8:	40021800 	.word	0x40021800
 80012ac:	40013c00 	.word	0x40013c00

080012b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	460b      	mov	r3, r1
 80012ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	691a      	ldr	r2, [r3, #16]
 80012c0:	887b      	ldrh	r3, [r7, #2]
 80012c2:	4013      	ands	r3, r2
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d002      	beq.n	80012ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012c8:	2301      	movs	r3, #1
 80012ca:	73fb      	strb	r3, [r7, #15]
 80012cc:	e001      	b.n	80012d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012ce:	2300      	movs	r3, #0
 80012d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	460b      	mov	r3, r1
 80012ea:	807b      	strh	r3, [r7, #2]
 80012ec:	4613      	mov	r3, r2
 80012ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012f0:	787b      	ldrb	r3, [r7, #1]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012f6:	887a      	ldrh	r2, [r7, #2]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012fc:	e003      	b.n	8001306 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012fe:	887b      	ldrh	r3, [r7, #2]
 8001300:	041a      	lsls	r2, r3, #16
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	619a      	str	r2, [r3, #24]
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001312:	b480      	push	{r7}
 8001314:	b085      	sub	sp, #20
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
 800131a:	460b      	mov	r3, r1
 800131c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	695b      	ldr	r3, [r3, #20]
 8001322:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001324:	887a      	ldrh	r2, [r7, #2]
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	4013      	ands	r3, r2
 800132a:	041a      	lsls	r2, r3, #16
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	43d9      	mvns	r1, r3
 8001330:	887b      	ldrh	r3, [r7, #2]
 8001332:	400b      	ands	r3, r1
 8001334:	431a      	orrs	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	619a      	str	r2, [r3, #24]
}
 800133a:	bf00      	nop
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001346:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001348:	b08f      	sub	sp, #60	; 0x3c
 800134a:	af0a      	add	r7, sp, #40	; 0x28
 800134c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d101      	bne.n	8001358 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	e116      	b.n	8001586 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	d106      	bne.n	8001378 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff fb82 	bl	8000a7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2203      	movs	r2, #3
 800137c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001388:	2b00      	cmp	r3, #0
 800138a:	d102      	bne.n	8001392 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f001 fea3 	bl	80030e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	603b      	str	r3, [r7, #0]
 80013a2:	687e      	ldr	r6, [r7, #4]
 80013a4:	466d      	mov	r5, sp
 80013a6:	f106 0410 	add.w	r4, r6, #16
 80013aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80013ba:	1d33      	adds	r3, r6, #4
 80013bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013be:	6838      	ldr	r0, [r7, #0]
 80013c0:	f001 fe2e 	bl	8003020 <USB_CoreInit>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d005      	beq.n	80013d6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2202      	movs	r2, #2
 80013ce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e0d7      	b.n	8001586 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2100      	movs	r1, #0
 80013dc:	4618      	mov	r0, r3
 80013de:	f001 fe91 	bl	8003104 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013e2:	2300      	movs	r3, #0
 80013e4:	73fb      	strb	r3, [r7, #15]
 80013e6:	e04a      	b.n	800147e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013e8:	7bfa      	ldrb	r2, [r7, #15]
 80013ea:	6879      	ldr	r1, [r7, #4]
 80013ec:	4613      	mov	r3, r2
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	4413      	add	r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	440b      	add	r3, r1
 80013f6:	333d      	adds	r3, #61	; 0x3d
 80013f8:	2201      	movs	r2, #1
 80013fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013fc:	7bfa      	ldrb	r2, [r7, #15]
 80013fe:	6879      	ldr	r1, [r7, #4]
 8001400:	4613      	mov	r3, r2
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	4413      	add	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	440b      	add	r3, r1
 800140a:	333c      	adds	r3, #60	; 0x3c
 800140c:	7bfa      	ldrb	r2, [r7, #15]
 800140e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001410:	7bfa      	ldrb	r2, [r7, #15]
 8001412:	7bfb      	ldrb	r3, [r7, #15]
 8001414:	b298      	uxth	r0, r3
 8001416:	6879      	ldr	r1, [r7, #4]
 8001418:	4613      	mov	r3, r2
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	4413      	add	r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	440b      	add	r3, r1
 8001422:	3344      	adds	r3, #68	; 0x44
 8001424:	4602      	mov	r2, r0
 8001426:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001428:	7bfa      	ldrb	r2, [r7, #15]
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	4613      	mov	r3, r2
 800142e:	00db      	lsls	r3, r3, #3
 8001430:	4413      	add	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	440b      	add	r3, r1
 8001436:	3340      	adds	r3, #64	; 0x40
 8001438:	2200      	movs	r2, #0
 800143a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800143c:	7bfa      	ldrb	r2, [r7, #15]
 800143e:	6879      	ldr	r1, [r7, #4]
 8001440:	4613      	mov	r3, r2
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	4413      	add	r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	440b      	add	r3, r1
 800144a:	3348      	adds	r3, #72	; 0x48
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001450:	7bfa      	ldrb	r2, [r7, #15]
 8001452:	6879      	ldr	r1, [r7, #4]
 8001454:	4613      	mov	r3, r2
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	4413      	add	r3, r2
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	440b      	add	r3, r1
 800145e:	334c      	adds	r3, #76	; 0x4c
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001464:	7bfa      	ldrb	r2, [r7, #15]
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	4613      	mov	r3, r2
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	4413      	add	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	440b      	add	r3, r1
 8001472:	3354      	adds	r3, #84	; 0x54
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001478:	7bfb      	ldrb	r3, [r7, #15]
 800147a:	3301      	adds	r3, #1
 800147c:	73fb      	strb	r3, [r7, #15]
 800147e:	7bfa      	ldrb	r2, [r7, #15]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	429a      	cmp	r2, r3
 8001486:	d3af      	bcc.n	80013e8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001488:	2300      	movs	r3, #0
 800148a:	73fb      	strb	r3, [r7, #15]
 800148c:	e044      	b.n	8001518 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800148e:	7bfa      	ldrb	r2, [r7, #15]
 8001490:	6879      	ldr	r1, [r7, #4]
 8001492:	4613      	mov	r3, r2
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	4413      	add	r3, r2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	440b      	add	r3, r1
 800149c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80014a0:	2200      	movs	r2, #0
 80014a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80014a4:	7bfa      	ldrb	r2, [r7, #15]
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	4613      	mov	r3, r2
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	4413      	add	r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	440b      	add	r3, r1
 80014b2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80014b6:	7bfa      	ldrb	r2, [r7, #15]
 80014b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80014ba:	7bfa      	ldrb	r2, [r7, #15]
 80014bc:	6879      	ldr	r1, [r7, #4]
 80014be:	4613      	mov	r3, r2
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	4413      	add	r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	440b      	add	r3, r1
 80014c8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80014cc:	2200      	movs	r2, #0
 80014ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014d0:	7bfa      	ldrb	r2, [r7, #15]
 80014d2:	6879      	ldr	r1, [r7, #4]
 80014d4:	4613      	mov	r3, r2
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	4413      	add	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	440b      	add	r3, r1
 80014de:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014e6:	7bfa      	ldrb	r2, [r7, #15]
 80014e8:	6879      	ldr	r1, [r7, #4]
 80014ea:	4613      	mov	r3, r2
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	4413      	add	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	440b      	add	r3, r1
 80014f4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014fc:	7bfa      	ldrb	r2, [r7, #15]
 80014fe:	6879      	ldr	r1, [r7, #4]
 8001500:	4613      	mov	r3, r2
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	4413      	add	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	440b      	add	r3, r1
 800150a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001512:	7bfb      	ldrb	r3, [r7, #15]
 8001514:	3301      	adds	r3, #1
 8001516:	73fb      	strb	r3, [r7, #15]
 8001518:	7bfa      	ldrb	r2, [r7, #15]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	429a      	cmp	r2, r3
 8001520:	d3b5      	bcc.n	800148e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	687e      	ldr	r6, [r7, #4]
 800152a:	466d      	mov	r5, sp
 800152c:	f106 0410 	add.w	r4, r6, #16
 8001530:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001532:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001534:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001536:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001538:	e894 0003 	ldmia.w	r4, {r0, r1}
 800153c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001540:	1d33      	adds	r3, r6, #4
 8001542:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001544:	6838      	ldr	r0, [r7, #0]
 8001546:	f001 fe29 	bl	800319c <USB_DevInit>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d005      	beq.n	800155c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2202      	movs	r2, #2
 8001554:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e014      	b.n	8001586 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2201      	movs	r2, #1
 8001568:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001570:	2b01      	cmp	r3, #1
 8001572:	d102      	bne.n	800157a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f000 f80a 	bl	800158e <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f001 ffe7 	bl	8003552 <USB_DevDisconnect>

  return HAL_OK;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3714      	adds	r7, #20
 800158a:	46bd      	mov	sp, r7
 800158c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800158e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800158e:	b480      	push	{r7}
 8001590:	b085      	sub	sp, #20
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c0:	f043 0303 	orr.w	r3, r3, #3
 80015c4:	68fa      	ldr	r2, [r7, #12]
 80015c6:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3714      	adds	r7, #20
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
	...

080015d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d101      	bne.n	80015ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e0cc      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015ec:	4b68      	ldr	r3, [pc, #416]	; (8001790 <HAL_RCC_ClockConfig+0x1b8>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0307 	and.w	r3, r3, #7
 80015f4:	683a      	ldr	r2, [r7, #0]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d90c      	bls.n	8001614 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015fa:	4b65      	ldr	r3, [pc, #404]	; (8001790 <HAL_RCC_ClockConfig+0x1b8>)
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	b2d2      	uxtb	r2, r2
 8001600:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001602:	4b63      	ldr	r3, [pc, #396]	; (8001790 <HAL_RCC_ClockConfig+0x1b8>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	683a      	ldr	r2, [r7, #0]
 800160c:	429a      	cmp	r2, r3
 800160e:	d001      	beq.n	8001614 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e0b8      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d020      	beq.n	8001662 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0304 	and.w	r3, r3, #4
 8001628:	2b00      	cmp	r3, #0
 800162a:	d005      	beq.n	8001638 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800162c:	4b59      	ldr	r3, [pc, #356]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	4a58      	ldr	r2, [pc, #352]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 8001632:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001636:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0308 	and.w	r3, r3, #8
 8001640:	2b00      	cmp	r3, #0
 8001642:	d005      	beq.n	8001650 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001644:	4b53      	ldr	r3, [pc, #332]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	4a52      	ldr	r2, [pc, #328]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 800164a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800164e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001650:	4b50      	ldr	r3, [pc, #320]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	494d      	ldr	r1, [pc, #308]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	4313      	orrs	r3, r2
 8001660:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	2b00      	cmp	r3, #0
 800166c:	d044      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d107      	bne.n	8001686 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001676:	4b47      	ldr	r3, [pc, #284]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d119      	bne.n	80016b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e07f      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b02      	cmp	r3, #2
 800168c:	d003      	beq.n	8001696 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001692:	2b03      	cmp	r3, #3
 8001694:	d107      	bne.n	80016a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001696:	4b3f      	ldr	r3, [pc, #252]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d109      	bne.n	80016b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e06f      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a6:	4b3b      	ldr	r3, [pc, #236]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d101      	bne.n	80016b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e067      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016b6:	4b37      	ldr	r3, [pc, #220]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f023 0203 	bic.w	r2, r3, #3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	4934      	ldr	r1, [pc, #208]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 80016c4:	4313      	orrs	r3, r2
 80016c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016c8:	f7ff fb1c 	bl	8000d04 <HAL_GetTick>
 80016cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ce:	e00a      	b.n	80016e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016d0:	f7ff fb18 	bl	8000d04 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	f241 3288 	movw	r2, #5000	; 0x1388
 80016de:	4293      	cmp	r3, r2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e04f      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016e6:	4b2b      	ldr	r3, [pc, #172]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f003 020c 	and.w	r2, r3, #12
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d1eb      	bne.n	80016d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016f8:	4b25      	ldr	r3, [pc, #148]	; (8001790 <HAL_RCC_ClockConfig+0x1b8>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0307 	and.w	r3, r3, #7
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	429a      	cmp	r2, r3
 8001704:	d20c      	bcs.n	8001720 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001706:	4b22      	ldr	r3, [pc, #136]	; (8001790 <HAL_RCC_ClockConfig+0x1b8>)
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	b2d2      	uxtb	r2, r2
 800170c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800170e:	4b20      	ldr	r3, [pc, #128]	; (8001790 <HAL_RCC_ClockConfig+0x1b8>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	683a      	ldr	r2, [r7, #0]
 8001718:	429a      	cmp	r2, r3
 800171a:	d001      	beq.n	8001720 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e032      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0304 	and.w	r3, r3, #4
 8001728:	2b00      	cmp	r3, #0
 800172a:	d008      	beq.n	800173e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800172c:	4b19      	ldr	r3, [pc, #100]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	4916      	ldr	r1, [pc, #88]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 800173a:	4313      	orrs	r3, r2
 800173c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0308 	and.w	r3, r3, #8
 8001746:	2b00      	cmp	r3, #0
 8001748:	d009      	beq.n	800175e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800174a:	4b12      	ldr	r3, [pc, #72]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	00db      	lsls	r3, r3, #3
 8001758:	490e      	ldr	r1, [pc, #56]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 800175a:	4313      	orrs	r3, r2
 800175c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800175e:	f000 f821 	bl	80017a4 <HAL_RCC_GetSysClockFreq>
 8001762:	4602      	mov	r2, r0
 8001764:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	091b      	lsrs	r3, r3, #4
 800176a:	f003 030f 	and.w	r3, r3, #15
 800176e:	490a      	ldr	r1, [pc, #40]	; (8001798 <HAL_RCC_ClockConfig+0x1c0>)
 8001770:	5ccb      	ldrb	r3, [r1, r3]
 8001772:	fa22 f303 	lsr.w	r3, r2, r3
 8001776:	4a09      	ldr	r2, [pc, #36]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 8001778:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <HAL_RCC_ClockConfig+0x1c8>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff fa7c 	bl	8000c7c <HAL_InitTick>

  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40023c00 	.word	0x40023c00
 8001794:	40023800 	.word	0x40023800
 8001798:	08006200 	.word	0x08006200
 800179c:	20000000 	.word	0x20000000
 80017a0:	20000004 	.word	0x20000004

080017a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017a8:	b094      	sub	sp, #80	; 0x50
 80017aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017ac:	2300      	movs	r3, #0
 80017ae:	647b      	str	r3, [r7, #68]	; 0x44
 80017b0:	2300      	movs	r3, #0
 80017b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80017b4:	2300      	movs	r3, #0
 80017b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80017b8:	2300      	movs	r3, #0
 80017ba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017bc:	4b79      	ldr	r3, [pc, #484]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f003 030c 	and.w	r3, r3, #12
 80017c4:	2b08      	cmp	r3, #8
 80017c6:	d00d      	beq.n	80017e4 <HAL_RCC_GetSysClockFreq+0x40>
 80017c8:	2b08      	cmp	r3, #8
 80017ca:	f200 80e1 	bhi.w	8001990 <HAL_RCC_GetSysClockFreq+0x1ec>
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d002      	beq.n	80017d8 <HAL_RCC_GetSysClockFreq+0x34>
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	d003      	beq.n	80017de <HAL_RCC_GetSysClockFreq+0x3a>
 80017d6:	e0db      	b.n	8001990 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017d8:	4b73      	ldr	r3, [pc, #460]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80017da:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80017dc:	e0db      	b.n	8001996 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017de:	4b73      	ldr	r3, [pc, #460]	; (80019ac <HAL_RCC_GetSysClockFreq+0x208>)
 80017e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80017e2:	e0d8      	b.n	8001996 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017e4:	4b6f      	ldr	r3, [pc, #444]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017ec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017ee:	4b6d      	ldr	r3, [pc, #436]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d063      	beq.n	80018c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017fa:	4b6a      	ldr	r3, [pc, #424]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	099b      	lsrs	r3, r3, #6
 8001800:	2200      	movs	r2, #0
 8001802:	63bb      	str	r3, [r7, #56]	; 0x38
 8001804:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001808:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800180c:	633b      	str	r3, [r7, #48]	; 0x30
 800180e:	2300      	movs	r3, #0
 8001810:	637b      	str	r3, [r7, #52]	; 0x34
 8001812:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001816:	4622      	mov	r2, r4
 8001818:	462b      	mov	r3, r5
 800181a:	f04f 0000 	mov.w	r0, #0
 800181e:	f04f 0100 	mov.w	r1, #0
 8001822:	0159      	lsls	r1, r3, #5
 8001824:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001828:	0150      	lsls	r0, r2, #5
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	4621      	mov	r1, r4
 8001830:	1a51      	subs	r1, r2, r1
 8001832:	6139      	str	r1, [r7, #16]
 8001834:	4629      	mov	r1, r5
 8001836:	eb63 0301 	sbc.w	r3, r3, r1
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	f04f 0200 	mov.w	r2, #0
 8001840:	f04f 0300 	mov.w	r3, #0
 8001844:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001848:	4659      	mov	r1, fp
 800184a:	018b      	lsls	r3, r1, #6
 800184c:	4651      	mov	r1, sl
 800184e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001852:	4651      	mov	r1, sl
 8001854:	018a      	lsls	r2, r1, #6
 8001856:	4651      	mov	r1, sl
 8001858:	ebb2 0801 	subs.w	r8, r2, r1
 800185c:	4659      	mov	r1, fp
 800185e:	eb63 0901 	sbc.w	r9, r3, r1
 8001862:	f04f 0200 	mov.w	r2, #0
 8001866:	f04f 0300 	mov.w	r3, #0
 800186a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800186e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001872:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001876:	4690      	mov	r8, r2
 8001878:	4699      	mov	r9, r3
 800187a:	4623      	mov	r3, r4
 800187c:	eb18 0303 	adds.w	r3, r8, r3
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	462b      	mov	r3, r5
 8001884:	eb49 0303 	adc.w	r3, r9, r3
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	f04f 0200 	mov.w	r2, #0
 800188e:	f04f 0300 	mov.w	r3, #0
 8001892:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001896:	4629      	mov	r1, r5
 8001898:	024b      	lsls	r3, r1, #9
 800189a:	4621      	mov	r1, r4
 800189c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018a0:	4621      	mov	r1, r4
 80018a2:	024a      	lsls	r2, r1, #9
 80018a4:	4610      	mov	r0, r2
 80018a6:	4619      	mov	r1, r3
 80018a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018aa:	2200      	movs	r2, #0
 80018ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80018ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80018b4:	f7fe fcb4 	bl	8000220 <__aeabi_uldivmod>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	4613      	mov	r3, r2
 80018be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018c0:	e058      	b.n	8001974 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018c2:	4b38      	ldr	r3, [pc, #224]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	099b      	lsrs	r3, r3, #6
 80018c8:	2200      	movs	r2, #0
 80018ca:	4618      	mov	r0, r3
 80018cc:	4611      	mov	r1, r2
 80018ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80018d2:	623b      	str	r3, [r7, #32]
 80018d4:	2300      	movs	r3, #0
 80018d6:	627b      	str	r3, [r7, #36]	; 0x24
 80018d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80018dc:	4642      	mov	r2, r8
 80018de:	464b      	mov	r3, r9
 80018e0:	f04f 0000 	mov.w	r0, #0
 80018e4:	f04f 0100 	mov.w	r1, #0
 80018e8:	0159      	lsls	r1, r3, #5
 80018ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018ee:	0150      	lsls	r0, r2, #5
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	4641      	mov	r1, r8
 80018f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80018fa:	4649      	mov	r1, r9
 80018fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001900:	f04f 0200 	mov.w	r2, #0
 8001904:	f04f 0300 	mov.w	r3, #0
 8001908:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800190c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001910:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001914:	ebb2 040a 	subs.w	r4, r2, sl
 8001918:	eb63 050b 	sbc.w	r5, r3, fp
 800191c:	f04f 0200 	mov.w	r2, #0
 8001920:	f04f 0300 	mov.w	r3, #0
 8001924:	00eb      	lsls	r3, r5, #3
 8001926:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800192a:	00e2      	lsls	r2, r4, #3
 800192c:	4614      	mov	r4, r2
 800192e:	461d      	mov	r5, r3
 8001930:	4643      	mov	r3, r8
 8001932:	18e3      	adds	r3, r4, r3
 8001934:	603b      	str	r3, [r7, #0]
 8001936:	464b      	mov	r3, r9
 8001938:	eb45 0303 	adc.w	r3, r5, r3
 800193c:	607b      	str	r3, [r7, #4]
 800193e:	f04f 0200 	mov.w	r2, #0
 8001942:	f04f 0300 	mov.w	r3, #0
 8001946:	e9d7 4500 	ldrd	r4, r5, [r7]
 800194a:	4629      	mov	r1, r5
 800194c:	028b      	lsls	r3, r1, #10
 800194e:	4621      	mov	r1, r4
 8001950:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001954:	4621      	mov	r1, r4
 8001956:	028a      	lsls	r2, r1, #10
 8001958:	4610      	mov	r0, r2
 800195a:	4619      	mov	r1, r3
 800195c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800195e:	2200      	movs	r2, #0
 8001960:	61bb      	str	r3, [r7, #24]
 8001962:	61fa      	str	r2, [r7, #28]
 8001964:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001968:	f7fe fc5a 	bl	8000220 <__aeabi_uldivmod>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	4613      	mov	r3, r2
 8001972:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001974:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	0c1b      	lsrs	r3, r3, #16
 800197a:	f003 0303 	and.w	r3, r3, #3
 800197e:	3301      	adds	r3, #1
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001984:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001988:	fbb2 f3f3 	udiv	r3, r2, r3
 800198c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800198e:	e002      	b.n	8001996 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001990:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001992:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001994:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001996:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001998:	4618      	mov	r0, r3
 800199a:	3750      	adds	r7, #80	; 0x50
 800199c:	46bd      	mov	sp, r7
 800199e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019a2:	bf00      	nop
 80019a4:	40023800 	.word	0x40023800
 80019a8:	00f42400 	.word	0x00f42400
 80019ac:	007a1200 	.word	0x007a1200

080019b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019b4:	4b03      	ldr	r3, [pc, #12]	; (80019c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80019b6:	681b      	ldr	r3, [r3, #0]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	20000000 	.word	0x20000000

080019c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019cc:	f7ff fff0 	bl	80019b0 <HAL_RCC_GetHCLKFreq>
 80019d0:	4602      	mov	r2, r0
 80019d2:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	0a9b      	lsrs	r3, r3, #10
 80019d8:	f003 0307 	and.w	r3, r3, #7
 80019dc:	4903      	ldr	r1, [pc, #12]	; (80019ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80019de:	5ccb      	ldrb	r3, [r1, r3]
 80019e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40023800 	.word	0x40023800
 80019ec:	08006210 	.word	0x08006210

080019f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019f4:	f7ff ffdc 	bl	80019b0 <HAL_RCC_GetHCLKFreq>
 80019f8:	4602      	mov	r2, r0
 80019fa:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	0b5b      	lsrs	r3, r3, #13
 8001a00:	f003 0307 	and.w	r3, r3, #7
 8001a04:	4903      	ldr	r1, [pc, #12]	; (8001a14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a06:	5ccb      	ldrb	r3, [r1, r3]
 8001a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40023800 	.word	0x40023800
 8001a14:	08006210 	.word	0x08006210

08001a18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b088      	sub	sp, #32
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a20:	2300      	movs	r3, #0
 8001a22:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d010      	beq.n	8001a5e <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001a3c:	4b7a      	ldr	r3, [pc, #488]	; (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001a3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a42:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	4977      	ldr	r1, [pc, #476]	; (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d101      	bne.n	8001a5e <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d010      	beq.n	8001a8c <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001a6a:	4b6f      	ldr	r3, [pc, #444]	; (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001a6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a70:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a1b      	ldr	r3, [r3, #32]
 8001a78:	496b      	ldr	r1, [pc, #428]	; (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d101      	bne.n	8001a8c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d022      	beq.n	8001ade <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8001a98:	4b63      	ldr	r3, [pc, #396]	; (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001a9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aa6:	4960      	ldr	r1, [pc, #384]	; (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d101      	bne.n	8001aba <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001abe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ac2:	d10c      	bne.n	8001ade <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8001ac4:	4b58      	ldr	r3, [pc, #352]	; (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001ac6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001aca:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	021b      	lsls	r3, r3, #8
 8001ad6:	4954      	ldr	r1, [pc, #336]	; (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d022      	beq.n	8001b30 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8001aea:	4b4f      	ldr	r3, [pc, #316]	; (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001aec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001af0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af8:	494b      	ldr	r1, [pc, #300]	; (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d101      	bne.n	8001b0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b10:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001b14:	d10c      	bne.n	8001b30 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8001b16:	4b44      	ldr	r3, [pc, #272]	; (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001b18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b1c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	695b      	ldr	r3, [r3, #20]
 8001b24:	3b01      	subs	r3, #1
 8001b26:	021b      	lsls	r3, r3, #8
 8001b28:	493f      	ldr	r1, [pc, #252]	; (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0308 	and.w	r3, r3, #8
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f000 808a 	beq.w	8001c52 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	4b39      	ldr	r3, [pc, #228]	; (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b46:	4a38      	ldr	r2, [pc, #224]	; (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b4e:	4b36      	ldr	r3, [pc, #216]	; (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001b5a:	4b34      	ldr	r3, [pc, #208]	; (8001c2c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a33      	ldr	r2, [pc, #204]	; (8001c2c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8001b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b64:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001b66:	f7ff f8cd 	bl	8000d04 <HAL_GetTick>
 8001b6a:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001b6c:	e008      	b.n	8001b80 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001b6e:	f7ff f8c9 	bl	8000d04 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e1d1      	b.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001b80:	4b2a      	ldr	r3, [pc, #168]	; (8001c2c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d0f0      	beq.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b8c:	4b26      	ldr	r3, [pc, #152]	; (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b94:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d02f      	beq.n	8001bfc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ba4:	697a      	ldr	r2, [r7, #20]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d028      	beq.n	8001bfc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001baa:	4b1f      	ldr	r3, [pc, #124]	; (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bb2:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001bb4:	4b1e      	ldr	r3, [pc, #120]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001bba:	4b1d      	ldr	r3, [pc, #116]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001bc0:	4a19      	ldr	r2, [pc, #100]	; (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001bc6:	4b18      	ldr	r3, [pc, #96]	; (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d114      	bne.n	8001bfc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001bd2:	f7ff f897 	bl	8000d04 <HAL_GetTick>
 8001bd6:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd8:	e00a      	b.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bda:	f7ff f893 	bl	8000d04 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e199      	b.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bf0:	4b0d      	ldr	r3, [pc, #52]	; (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d0ee      	beq.n	8001bda <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001c08:	d114      	bne.n	8001c34 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8001c0a:	4b07      	ldr	r3, [pc, #28]	; (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c16:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001c1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c1e:	4902      	ldr	r1, [pc, #8]	; (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	608b      	str	r3, [r1, #8]
 8001c24:	e00c      	b.n	8001c40 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8001c26:	bf00      	nop
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	40007000 	.word	0x40007000
 8001c30:	42470e40 	.word	0x42470e40
 8001c34:	4b89      	ldr	r3, [pc, #548]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	4a88      	ldr	r2, [pc, #544]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001c3a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001c3e:	6093      	str	r3, [r2, #8]
 8001c40:	4b86      	ldr	r3, [pc, #536]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001c42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c4c:	4983      	ldr	r1, [pc, #524]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0304 	and.w	r3, r3, #4
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d004      	beq.n	8001c68 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8001c64:	4b7e      	ldr	r3, [pc, #504]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8001c66:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0310 	and.w	r3, r3, #16
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d00a      	beq.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001c74:	4b79      	ldr	r3, [pc, #484]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001c76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c7a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c82:	4976      	ldr	r1, [pc, #472]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001c84:	4313      	orrs	r3, r2
 8001c86:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0320 	and.w	r3, r3, #32
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d011      	beq.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001c96:	4b71      	ldr	r3, [pc, #452]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001c98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c9c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca4:	496d      	ldr	r1, [pc, #436]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001cb4:	d101      	bne.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d00a      	beq.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001cc6:	4b65      	ldr	r3, [pc, #404]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001cc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ccc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd4:	4961      	ldr	r1, [pc, #388]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d004      	beq.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2b80      	cmp	r3, #128	; 0x80
 8001ce8:	f040 80c6 	bne.w	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001cec:	4b5d      	ldr	r3, [pc, #372]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001cf2:	f7ff f807 	bl	8000d04 <HAL_GetTick>
 8001cf6:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001cf8:	e008      	b.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001cfa:	f7ff f803 	bl	8000d04 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e10b      	b.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001d0c:	4b53      	ldr	r3, [pc, #332]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1f0      	bne.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8001d18:	4a53      	ldr	r2, [pc, #332]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d1e:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d003      	beq.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	69db      	ldr	r3, [r3, #28]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d023      	beq.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d003      	beq.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a1b      	ldr	r3, [r3, #32]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d019      	beq.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d004      	beq.n	8001d5e <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d5c:	d00e      	beq.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d019      	beq.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d115      	bne.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x386>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d7a:	d110      	bne.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685a      	ldr	r2, [r3, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	019b      	lsls	r3, r3, #6
 8001d86:	431a      	orrs	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	061b      	lsls	r3, r3, #24
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	071b      	lsls	r3, r3, #28
 8001d96:	4931      	ldr	r1, [pc, #196]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d009      	beq.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d026      	beq.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d122      	bne.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001dc6:	4b25      	ldr	r3, [pc, #148]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001dc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001dcc:	0e1b      	lsrs	r3, r3, #24
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685a      	ldr	r2, [r3, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	019b      	lsls	r3, r3, #6
 8001dde:	431a      	orrs	r2, r3
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	061b      	lsls	r3, r3, #24
 8001de4:	431a      	orrs	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	071b      	lsls	r3, r3, #28
 8001dec:	491b      	ldr	r1, [pc, #108]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8001df4:	4b19      	ldr	r3, [pc, #100]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001df6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dfa:	f023 021f 	bic.w	r2, r3, #31
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	3b01      	subs	r3, #1
 8001e04:	4915      	ldr	r1, [pc, #84]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d010      	beq.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685a      	ldr	r2, [r3, #4]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	019b      	lsls	r3, r3, #6
 8001e22:	431a      	orrs	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	061b      	lsls	r3, r3, #24
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	071b      	lsls	r3, r3, #28
 8001e32:	490a      	ldr	r1, [pc, #40]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001e34:	4313      	orrs	r3, r2
 8001e36:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001e3a:	4b0a      	ldr	r3, [pc, #40]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e40:	f7fe ff60 	bl	8000d04 <HAL_GetTick>
 8001e44:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e46:	e011      	b.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001e48:	f7fe ff5c 	bl	8000d04 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d90a      	bls.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e064      	b.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8001e5a:	bf00      	nop
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	424711e0 	.word	0x424711e0
 8001e64:	42470068 	.word	0x42470068
 8001e68:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e6c:	4b2f      	ldr	r3, [pc, #188]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d0e7      	beq.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d00a      	beq.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001e84:	4b29      	ldr	r3, [pc, #164]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001e86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e8a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e92:	4926      	ldr	r1, [pc, #152]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00a      	beq.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001ea6:	4b21      	ldr	r3, [pc, #132]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001ea8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001eac:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb4:	491d      	ldr	r1, [pc, #116]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d00a      	beq.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8001ec8:	4b18      	ldr	r3, [pc, #96]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001eca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ece:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed6:	4915      	ldr	r1, [pc, #84]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00a      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8001eea:	4b10      	ldr	r3, [pc, #64]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001eec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ef0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef8:	490c      	ldr	r1, [pc, #48]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d00a      	beq.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f0c:	4b07      	ldr	r3, [pc, #28]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001f0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f12:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1a:	4904      	ldr	r1, [pc, #16]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3720      	adds	r7, #32
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40023800 	.word	0x40023800

08001f30 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e273      	b.n	800242a <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d075      	beq.n	800203a <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001f4e:	4b88      	ldr	r3, [pc, #544]	; (8002170 <HAL_RCC_OscConfig+0x240>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 030c 	and.w	r3, r3, #12
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	d00c      	beq.n	8001f74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f5a:	4b85      	ldr	r3, [pc, #532]	; (8002170 <HAL_RCC_OscConfig+0x240>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001f62:	2b08      	cmp	r3, #8
 8001f64:	d112      	bne.n	8001f8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f66:	4b82      	ldr	r3, [pc, #520]	; (8002170 <HAL_RCC_OscConfig+0x240>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f72:	d10b      	bne.n	8001f8c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f74:	4b7e      	ldr	r3, [pc, #504]	; (8002170 <HAL_RCC_OscConfig+0x240>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d05b      	beq.n	8002038 <HAL_RCC_OscConfig+0x108>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d157      	bne.n	8002038 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e24e      	b.n	800242a <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f94:	d106      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x74>
 8001f96:	4b76      	ldr	r3, [pc, #472]	; (8002170 <HAL_RCC_OscConfig+0x240>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a75      	ldr	r2, [pc, #468]	; (8002170 <HAL_RCC_OscConfig+0x240>)
 8001f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fa0:	6013      	str	r3, [r2, #0]
 8001fa2:	e01d      	b.n	8001fe0 <HAL_RCC_OscConfig+0xb0>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fac:	d10c      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x98>
 8001fae:	4b70      	ldr	r3, [pc, #448]	; (8002170 <HAL_RCC_OscConfig+0x240>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a6f      	ldr	r2, [pc, #444]	; (8002170 <HAL_RCC_OscConfig+0x240>)
 8001fb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fb8:	6013      	str	r3, [r2, #0]
 8001fba:	4b6d      	ldr	r3, [pc, #436]	; (8002170 <HAL_RCC_OscConfig+0x240>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a6c      	ldr	r2, [pc, #432]	; (8002170 <HAL_RCC_OscConfig+0x240>)
 8001fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fc4:	6013      	str	r3, [r2, #0]
 8001fc6:	e00b      	b.n	8001fe0 <HAL_RCC_OscConfig+0xb0>
 8001fc8:	4b69      	ldr	r3, [pc, #420]	; (8002170 <HAL_RCC_OscConfig+0x240>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a68      	ldr	r2, [pc, #416]	; (8002170 <HAL_RCC_OscConfig+0x240>)
 8001fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fd2:	6013      	str	r3, [r2, #0]
 8001fd4:	4b66      	ldr	r3, [pc, #408]	; (8002170 <HAL_RCC_OscConfig+0x240>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a65      	ldr	r2, [pc, #404]	; (8002170 <HAL_RCC_OscConfig+0x240>)
 8001fda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d013      	beq.n	8002010 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe8:	f7fe fe8c 	bl	8000d04 <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ff0:	f7fe fe88 	bl	8000d04 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b64      	cmp	r3, #100	; 0x64
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e213      	b.n	800242a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002002:	4b5b      	ldr	r3, [pc, #364]	; (8002170 <HAL_RCC_OscConfig+0x240>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d0f0      	beq.n	8001ff0 <HAL_RCC_OscConfig+0xc0>
 800200e:	e014      	b.n	800203a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002010:	f7fe fe78 	bl	8000d04 <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002018:	f7fe fe74 	bl	8000d04 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b64      	cmp	r3, #100	; 0x64
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e1ff      	b.n	800242a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800202a:	4b51      	ldr	r3, [pc, #324]	; (8002170 <HAL_RCC_OscConfig+0x240>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1f0      	bne.n	8002018 <HAL_RCC_OscConfig+0xe8>
 8002036:	e000      	b.n	800203a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002038:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d063      	beq.n	800210e <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002046:	4b4a      	ldr	r3, [pc, #296]	; (8002170 <HAL_RCC_OscConfig+0x240>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f003 030c 	and.w	r3, r3, #12
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00b      	beq.n	800206a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002052:	4b47      	ldr	r3, [pc, #284]	; (8002170 <HAL_RCC_OscConfig+0x240>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800205a:	2b08      	cmp	r3, #8
 800205c:	d11c      	bne.n	8002098 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800205e:	4b44      	ldr	r3, [pc, #272]	; (8002170 <HAL_RCC_OscConfig+0x240>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d116      	bne.n	8002098 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800206a:	4b41      	ldr	r3, [pc, #260]	; (8002170 <HAL_RCC_OscConfig+0x240>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d005      	beq.n	8002082 <HAL_RCC_OscConfig+0x152>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d001      	beq.n	8002082 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e1d3      	b.n	800242a <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002082:	4b3b      	ldr	r3, [pc, #236]	; (8002170 <HAL_RCC_OscConfig+0x240>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	4937      	ldr	r1, [pc, #220]	; (8002170 <HAL_RCC_OscConfig+0x240>)
 8002092:	4313      	orrs	r3, r2
 8002094:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002096:	e03a      	b.n	800210e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d020      	beq.n	80020e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020a0:	4b34      	ldr	r3, [pc, #208]	; (8002174 <HAL_RCC_OscConfig+0x244>)
 80020a2:	2201      	movs	r2, #1
 80020a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a6:	f7fe fe2d 	bl	8000d04 <HAL_GetTick>
 80020aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ac:	e008      	b.n	80020c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020ae:	f7fe fe29 	bl	8000d04 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e1b4      	b.n	800242a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c0:	4b2b      	ldr	r3, [pc, #172]	; (8002170 <HAL_RCC_OscConfig+0x240>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d0f0      	beq.n	80020ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020cc:	4b28      	ldr	r3, [pc, #160]	; (8002170 <HAL_RCC_OscConfig+0x240>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	4925      	ldr	r1, [pc, #148]	; (8002170 <HAL_RCC_OscConfig+0x240>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	600b      	str	r3, [r1, #0]
 80020e0:	e015      	b.n	800210e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020e2:	4b24      	ldr	r3, [pc, #144]	; (8002174 <HAL_RCC_OscConfig+0x244>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e8:	f7fe fe0c 	bl	8000d04 <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020f0:	f7fe fe08 	bl	8000d04 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e193      	b.n	800242a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002102:	4b1b      	ldr	r3, [pc, #108]	; (8002170 <HAL_RCC_OscConfig+0x240>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1f0      	bne.n	80020f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0308 	and.w	r3, r3, #8
 8002116:	2b00      	cmp	r3, #0
 8002118:	d036      	beq.n	8002188 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d016      	beq.n	8002150 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002122:	4b15      	ldr	r3, [pc, #84]	; (8002178 <HAL_RCC_OscConfig+0x248>)
 8002124:	2201      	movs	r2, #1
 8002126:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002128:	f7fe fdec 	bl	8000d04 <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002130:	f7fe fde8 	bl	8000d04 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e173      	b.n	800242a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002142:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <HAL_RCC_OscConfig+0x240>)
 8002144:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d0f0      	beq.n	8002130 <HAL_RCC_OscConfig+0x200>
 800214e:	e01b      	b.n	8002188 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002150:	4b09      	ldr	r3, [pc, #36]	; (8002178 <HAL_RCC_OscConfig+0x248>)
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002156:	f7fe fdd5 	bl	8000d04 <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800215c:	e00e      	b.n	800217c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800215e:	f7fe fdd1 	bl	8000d04 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d907      	bls.n	800217c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e15c      	b.n	800242a <HAL_RCC_OscConfig+0x4fa>
 8002170:	40023800 	.word	0x40023800
 8002174:	42470000 	.word	0x42470000
 8002178:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800217c:	4b8a      	ldr	r3, [pc, #552]	; (80023a8 <HAL_RCC_OscConfig+0x478>)
 800217e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d1ea      	bne.n	800215e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0304 	and.w	r3, r3, #4
 8002190:	2b00      	cmp	r3, #0
 8002192:	f000 8097 	beq.w	80022c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002196:	2300      	movs	r3, #0
 8002198:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800219a:	4b83      	ldr	r3, [pc, #524]	; (80023a8 <HAL_RCC_OscConfig+0x478>)
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10f      	bne.n	80021c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	60bb      	str	r3, [r7, #8]
 80021aa:	4b7f      	ldr	r3, [pc, #508]	; (80023a8 <HAL_RCC_OscConfig+0x478>)
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	4a7e      	ldr	r2, [pc, #504]	; (80023a8 <HAL_RCC_OscConfig+0x478>)
 80021b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b4:	6413      	str	r3, [r2, #64]	; 0x40
 80021b6:	4b7c      	ldr	r3, [pc, #496]	; (80023a8 <HAL_RCC_OscConfig+0x478>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021be:	60bb      	str	r3, [r7, #8]
 80021c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021c2:	2301      	movs	r3, #1
 80021c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c6:	4b79      	ldr	r3, [pc, #484]	; (80023ac <HAL_RCC_OscConfig+0x47c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d118      	bne.n	8002204 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021d2:	4b76      	ldr	r3, [pc, #472]	; (80023ac <HAL_RCC_OscConfig+0x47c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a75      	ldr	r2, [pc, #468]	; (80023ac <HAL_RCC_OscConfig+0x47c>)
 80021d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021de:	f7fe fd91 	bl	8000d04 <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e4:	e008      	b.n	80021f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021e6:	f7fe fd8d 	bl	8000d04 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e118      	b.n	800242a <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f8:	4b6c      	ldr	r3, [pc, #432]	; (80023ac <HAL_RCC_OscConfig+0x47c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0f0      	beq.n	80021e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d106      	bne.n	800221a <HAL_RCC_OscConfig+0x2ea>
 800220c:	4b66      	ldr	r3, [pc, #408]	; (80023a8 <HAL_RCC_OscConfig+0x478>)
 800220e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002210:	4a65      	ldr	r2, [pc, #404]	; (80023a8 <HAL_RCC_OscConfig+0x478>)
 8002212:	f043 0301 	orr.w	r3, r3, #1
 8002216:	6713      	str	r3, [r2, #112]	; 0x70
 8002218:	e01c      	b.n	8002254 <HAL_RCC_OscConfig+0x324>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	2b05      	cmp	r3, #5
 8002220:	d10c      	bne.n	800223c <HAL_RCC_OscConfig+0x30c>
 8002222:	4b61      	ldr	r3, [pc, #388]	; (80023a8 <HAL_RCC_OscConfig+0x478>)
 8002224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002226:	4a60      	ldr	r2, [pc, #384]	; (80023a8 <HAL_RCC_OscConfig+0x478>)
 8002228:	f043 0304 	orr.w	r3, r3, #4
 800222c:	6713      	str	r3, [r2, #112]	; 0x70
 800222e:	4b5e      	ldr	r3, [pc, #376]	; (80023a8 <HAL_RCC_OscConfig+0x478>)
 8002230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002232:	4a5d      	ldr	r2, [pc, #372]	; (80023a8 <HAL_RCC_OscConfig+0x478>)
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	6713      	str	r3, [r2, #112]	; 0x70
 800223a:	e00b      	b.n	8002254 <HAL_RCC_OscConfig+0x324>
 800223c:	4b5a      	ldr	r3, [pc, #360]	; (80023a8 <HAL_RCC_OscConfig+0x478>)
 800223e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002240:	4a59      	ldr	r2, [pc, #356]	; (80023a8 <HAL_RCC_OscConfig+0x478>)
 8002242:	f023 0301 	bic.w	r3, r3, #1
 8002246:	6713      	str	r3, [r2, #112]	; 0x70
 8002248:	4b57      	ldr	r3, [pc, #348]	; (80023a8 <HAL_RCC_OscConfig+0x478>)
 800224a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224c:	4a56      	ldr	r2, [pc, #344]	; (80023a8 <HAL_RCC_OscConfig+0x478>)
 800224e:	f023 0304 	bic.w	r3, r3, #4
 8002252:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d015      	beq.n	8002288 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800225c:	f7fe fd52 	bl	8000d04 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002262:	e00a      	b.n	800227a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002264:	f7fe fd4e 	bl	8000d04 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002272:	4293      	cmp	r3, r2
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e0d7      	b.n	800242a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800227a:	4b4b      	ldr	r3, [pc, #300]	; (80023a8 <HAL_RCC_OscConfig+0x478>)
 800227c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d0ee      	beq.n	8002264 <HAL_RCC_OscConfig+0x334>
 8002286:	e014      	b.n	80022b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002288:	f7fe fd3c 	bl	8000d04 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800228e:	e00a      	b.n	80022a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002290:	f7fe fd38 	bl	8000d04 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	f241 3288 	movw	r2, #5000	; 0x1388
 800229e:	4293      	cmp	r3, r2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e0c1      	b.n	800242a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022a6:	4b40      	ldr	r3, [pc, #256]	; (80023a8 <HAL_RCC_OscConfig+0x478>)
 80022a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1ee      	bne.n	8002290 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022b2:	7dfb      	ldrb	r3, [r7, #23]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d105      	bne.n	80022c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022b8:	4b3b      	ldr	r3, [pc, #236]	; (80023a8 <HAL_RCC_OscConfig+0x478>)
 80022ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022bc:	4a3a      	ldr	r2, [pc, #232]	; (80023a8 <HAL_RCC_OscConfig+0x478>)
 80022be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 80ad 	beq.w	8002428 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022ce:	4b36      	ldr	r3, [pc, #216]	; (80023a8 <HAL_RCC_OscConfig+0x478>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 030c 	and.w	r3, r3, #12
 80022d6:	2b08      	cmp	r3, #8
 80022d8:	d060      	beq.n	800239c <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d145      	bne.n	800236e <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e2:	4b33      	ldr	r3, [pc, #204]	; (80023b0 <HAL_RCC_OscConfig+0x480>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e8:	f7fe fd0c 	bl	8000d04 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022f0:	f7fe fd08 	bl	8000d04 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e093      	b.n	800242a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002302:	4b29      	ldr	r3, [pc, #164]	; (80023a8 <HAL_RCC_OscConfig+0x478>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f0      	bne.n	80022f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69da      	ldr	r2, [r3, #28]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a1b      	ldr	r3, [r3, #32]
 8002316:	431a      	orrs	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231c:	019b      	lsls	r3, r3, #6
 800231e:	431a      	orrs	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002324:	085b      	lsrs	r3, r3, #1
 8002326:	3b01      	subs	r3, #1
 8002328:	041b      	lsls	r3, r3, #16
 800232a:	431a      	orrs	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002330:	061b      	lsls	r3, r3, #24
 8002332:	431a      	orrs	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002338:	071b      	lsls	r3, r3, #28
 800233a:	491b      	ldr	r1, [pc, #108]	; (80023a8 <HAL_RCC_OscConfig+0x478>)
 800233c:	4313      	orrs	r3, r2
 800233e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002340:	4b1b      	ldr	r3, [pc, #108]	; (80023b0 <HAL_RCC_OscConfig+0x480>)
 8002342:	2201      	movs	r2, #1
 8002344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002346:	f7fe fcdd 	bl	8000d04 <HAL_GetTick>
 800234a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800234c:	e008      	b.n	8002360 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800234e:	f7fe fcd9 	bl	8000d04 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e064      	b.n	800242a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002360:	4b11      	ldr	r3, [pc, #68]	; (80023a8 <HAL_RCC_OscConfig+0x478>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0f0      	beq.n	800234e <HAL_RCC_OscConfig+0x41e>
 800236c:	e05c      	b.n	8002428 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800236e:	4b10      	ldr	r3, [pc, #64]	; (80023b0 <HAL_RCC_OscConfig+0x480>)
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002374:	f7fe fcc6 	bl	8000d04 <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800237c:	f7fe fcc2 	bl	8000d04 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e04d      	b.n	800242a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800238e:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <HAL_RCC_OscConfig+0x478>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1f0      	bne.n	800237c <HAL_RCC_OscConfig+0x44c>
 800239a:	e045      	b.n	8002428 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d107      	bne.n	80023b4 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e040      	b.n	800242a <HAL_RCC_OscConfig+0x4fa>
 80023a8:	40023800 	.word	0x40023800
 80023ac:	40007000 	.word	0x40007000
 80023b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023b4:	4b1f      	ldr	r3, [pc, #124]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d030      	beq.n	8002424 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d129      	bne.n	8002424 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023da:	429a      	cmp	r2, r3
 80023dc:	d122      	bne.n	8002424 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023e4:	4013      	ands	r3, r2
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d119      	bne.n	8002424 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fa:	085b      	lsrs	r3, r3, #1
 80023fc:	3b01      	subs	r3, #1
 80023fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002400:	429a      	cmp	r2, r3
 8002402:	d10f      	bne.n	8002424 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002410:	429a      	cmp	r2, r3
 8002412:	d107      	bne.n	8002424 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002420:	429a      	cmp	r2, r3
 8002422:	d001      	beq.n	8002428 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e000      	b.n	800242a <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	40023800 	.word	0x40023800

08002438 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e041      	b.n	80024ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d106      	bne.n	8002464 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f7fe fa9c 	bl	800099c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2202      	movs	r2, #2
 8002468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	3304      	adds	r3, #4
 8002474:	4619      	mov	r1, r3
 8002476:	4610      	mov	r0, r2
 8002478:	f000 f9d0 	bl	800281c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
	...

080024d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d001      	beq.n	80024f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e046      	b.n	800257e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2202      	movs	r2, #2
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a23      	ldr	r2, [pc, #140]	; (800258c <HAL_TIM_Base_Start+0xb4>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d022      	beq.n	8002548 <HAL_TIM_Base_Start+0x70>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800250a:	d01d      	beq.n	8002548 <HAL_TIM_Base_Start+0x70>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a1f      	ldr	r2, [pc, #124]	; (8002590 <HAL_TIM_Base_Start+0xb8>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d018      	beq.n	8002548 <HAL_TIM_Base_Start+0x70>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a1e      	ldr	r2, [pc, #120]	; (8002594 <HAL_TIM_Base_Start+0xbc>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d013      	beq.n	8002548 <HAL_TIM_Base_Start+0x70>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a1c      	ldr	r2, [pc, #112]	; (8002598 <HAL_TIM_Base_Start+0xc0>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d00e      	beq.n	8002548 <HAL_TIM_Base_Start+0x70>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a1b      	ldr	r2, [pc, #108]	; (800259c <HAL_TIM_Base_Start+0xc4>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d009      	beq.n	8002548 <HAL_TIM_Base_Start+0x70>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a19      	ldr	r2, [pc, #100]	; (80025a0 <HAL_TIM_Base_Start+0xc8>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d004      	beq.n	8002548 <HAL_TIM_Base_Start+0x70>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a18      	ldr	r2, [pc, #96]	; (80025a4 <HAL_TIM_Base_Start+0xcc>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d111      	bne.n	800256c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2b06      	cmp	r3, #6
 8002558:	d010      	beq.n	800257c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f042 0201 	orr.w	r2, r2, #1
 8002568:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800256a:	e007      	b.n	800257c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f042 0201 	orr.w	r2, r2, #1
 800257a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3714      	adds	r7, #20
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	40010000 	.word	0x40010000
 8002590:	40000400 	.word	0x40000400
 8002594:	40000800 	.word	0x40000800
 8002598:	40000c00 	.word	0x40000c00
 800259c:	40010400 	.word	0x40010400
 80025a0:	40014000 	.word	0x40014000
 80025a4:	40001800 	.word	0x40001800

080025a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d122      	bne.n	8002604 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d11b      	bne.n	8002604 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f06f 0202 	mvn.w	r2, #2
 80025d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2201      	movs	r2, #1
 80025da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	f003 0303 	and.w	r3, r3, #3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 f8f8 	bl	80027e0 <HAL_TIM_IC_CaptureCallback>
 80025f0:	e005      	b.n	80025fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 f8ea 	bl	80027cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 f8fb 	bl	80027f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	f003 0304 	and.w	r3, r3, #4
 800260e:	2b04      	cmp	r3, #4
 8002610:	d122      	bne.n	8002658 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	f003 0304 	and.w	r3, r3, #4
 800261c:	2b04      	cmp	r3, #4
 800261e:	d11b      	bne.n	8002658 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f06f 0204 	mvn.w	r2, #4
 8002628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2202      	movs	r2, #2
 800262e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 f8ce 	bl	80027e0 <HAL_TIM_IC_CaptureCallback>
 8002644:	e005      	b.n	8002652 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f8c0 	bl	80027cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 f8d1 	bl	80027f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	f003 0308 	and.w	r3, r3, #8
 8002662:	2b08      	cmp	r3, #8
 8002664:	d122      	bne.n	80026ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	f003 0308 	and.w	r3, r3, #8
 8002670:	2b08      	cmp	r3, #8
 8002672:	d11b      	bne.n	80026ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f06f 0208 	mvn.w	r2, #8
 800267c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2204      	movs	r2, #4
 8002682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f8a4 	bl	80027e0 <HAL_TIM_IC_CaptureCallback>
 8002698:	e005      	b.n	80026a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f896 	bl	80027cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 f8a7 	bl	80027f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	f003 0310 	and.w	r3, r3, #16
 80026b6:	2b10      	cmp	r3, #16
 80026b8:	d122      	bne.n	8002700 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	f003 0310 	and.w	r3, r3, #16
 80026c4:	2b10      	cmp	r3, #16
 80026c6:	d11b      	bne.n	8002700 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f06f 0210 	mvn.w	r2, #16
 80026d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2208      	movs	r2, #8
 80026d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d003      	beq.n	80026ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f87a 	bl	80027e0 <HAL_TIM_IC_CaptureCallback>
 80026ec:	e005      	b.n	80026fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 f86c 	bl	80027cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 f87d 	bl	80027f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b01      	cmp	r3, #1
 800270c:	d10e      	bne.n	800272c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	2b01      	cmp	r3, #1
 800271a:	d107      	bne.n	800272c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f06f 0201 	mvn.w	r2, #1
 8002724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 f846 	bl	80027b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002736:	2b80      	cmp	r3, #128	; 0x80
 8002738:	d10e      	bne.n	8002758 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002744:	2b80      	cmp	r3, #128	; 0x80
 8002746:	d107      	bne.n	8002758 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 f988 	bl	8002a68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002762:	2b40      	cmp	r3, #64	; 0x40
 8002764:	d10e      	bne.n	8002784 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002770:	2b40      	cmp	r3, #64	; 0x40
 8002772:	d107      	bne.n	8002784 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800277c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 f842 	bl	8002808 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	f003 0320 	and.w	r3, r3, #32
 800278e:	2b20      	cmp	r3, #32
 8002790:	d10e      	bne.n	80027b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	f003 0320 	and.w	r3, r3, #32
 800279c:	2b20      	cmp	r3, #32
 800279e:	d107      	bne.n	80027b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f06f 0220 	mvn.w	r2, #32
 80027a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 f952 	bl	8002a54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027b0:	bf00      	nop
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a40      	ldr	r2, [pc, #256]	; (8002930 <TIM_Base_SetConfig+0x114>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d013      	beq.n	800285c <TIM_Base_SetConfig+0x40>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800283a:	d00f      	beq.n	800285c <TIM_Base_SetConfig+0x40>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a3d      	ldr	r2, [pc, #244]	; (8002934 <TIM_Base_SetConfig+0x118>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d00b      	beq.n	800285c <TIM_Base_SetConfig+0x40>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a3c      	ldr	r2, [pc, #240]	; (8002938 <TIM_Base_SetConfig+0x11c>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d007      	beq.n	800285c <TIM_Base_SetConfig+0x40>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a3b      	ldr	r2, [pc, #236]	; (800293c <TIM_Base_SetConfig+0x120>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d003      	beq.n	800285c <TIM_Base_SetConfig+0x40>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a3a      	ldr	r2, [pc, #232]	; (8002940 <TIM_Base_SetConfig+0x124>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d108      	bne.n	800286e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002862:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	4313      	orrs	r3, r2
 800286c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a2f      	ldr	r2, [pc, #188]	; (8002930 <TIM_Base_SetConfig+0x114>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d02b      	beq.n	80028ce <TIM_Base_SetConfig+0xb2>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800287c:	d027      	beq.n	80028ce <TIM_Base_SetConfig+0xb2>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a2c      	ldr	r2, [pc, #176]	; (8002934 <TIM_Base_SetConfig+0x118>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d023      	beq.n	80028ce <TIM_Base_SetConfig+0xb2>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a2b      	ldr	r2, [pc, #172]	; (8002938 <TIM_Base_SetConfig+0x11c>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d01f      	beq.n	80028ce <TIM_Base_SetConfig+0xb2>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a2a      	ldr	r2, [pc, #168]	; (800293c <TIM_Base_SetConfig+0x120>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d01b      	beq.n	80028ce <TIM_Base_SetConfig+0xb2>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a29      	ldr	r2, [pc, #164]	; (8002940 <TIM_Base_SetConfig+0x124>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d017      	beq.n	80028ce <TIM_Base_SetConfig+0xb2>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a28      	ldr	r2, [pc, #160]	; (8002944 <TIM_Base_SetConfig+0x128>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d013      	beq.n	80028ce <TIM_Base_SetConfig+0xb2>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a27      	ldr	r2, [pc, #156]	; (8002948 <TIM_Base_SetConfig+0x12c>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d00f      	beq.n	80028ce <TIM_Base_SetConfig+0xb2>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a26      	ldr	r2, [pc, #152]	; (800294c <TIM_Base_SetConfig+0x130>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d00b      	beq.n	80028ce <TIM_Base_SetConfig+0xb2>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a25      	ldr	r2, [pc, #148]	; (8002950 <TIM_Base_SetConfig+0x134>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d007      	beq.n	80028ce <TIM_Base_SetConfig+0xb2>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a24      	ldr	r2, [pc, #144]	; (8002954 <TIM_Base_SetConfig+0x138>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d003      	beq.n	80028ce <TIM_Base_SetConfig+0xb2>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a23      	ldr	r2, [pc, #140]	; (8002958 <TIM_Base_SetConfig+0x13c>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d108      	bne.n	80028e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	4313      	orrs	r3, r2
 80028de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a0a      	ldr	r2, [pc, #40]	; (8002930 <TIM_Base_SetConfig+0x114>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d003      	beq.n	8002914 <TIM_Base_SetConfig+0xf8>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a0c      	ldr	r2, [pc, #48]	; (8002940 <TIM_Base_SetConfig+0x124>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d103      	bne.n	800291c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	691a      	ldr	r2, [r3, #16]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	615a      	str	r2, [r3, #20]
}
 8002922:	bf00      	nop
 8002924:	3714      	adds	r7, #20
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	40010000 	.word	0x40010000
 8002934:	40000400 	.word	0x40000400
 8002938:	40000800 	.word	0x40000800
 800293c:	40000c00 	.word	0x40000c00
 8002940:	40010400 	.word	0x40010400
 8002944:	40014000 	.word	0x40014000
 8002948:	40014400 	.word	0x40014400
 800294c:	40014800 	.word	0x40014800
 8002950:	40001800 	.word	0x40001800
 8002954:	40001c00 	.word	0x40001c00
 8002958:	40002000 	.word	0x40002000

0800295c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800296c:	2b01      	cmp	r3, #1
 800296e:	d101      	bne.n	8002974 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002970:	2302      	movs	r3, #2
 8002972:	e05a      	b.n	8002a2a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2202      	movs	r2, #2
 8002980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800299a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a21      	ldr	r2, [pc, #132]	; (8002a38 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d022      	beq.n	80029fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029c0:	d01d      	beq.n	80029fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a1d      	ldr	r2, [pc, #116]	; (8002a3c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d018      	beq.n	80029fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a1b      	ldr	r2, [pc, #108]	; (8002a40 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d013      	beq.n	80029fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a1a      	ldr	r2, [pc, #104]	; (8002a44 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d00e      	beq.n	80029fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a18      	ldr	r2, [pc, #96]	; (8002a48 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d009      	beq.n	80029fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a17      	ldr	r2, [pc, #92]	; (8002a4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d004      	beq.n	80029fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a15      	ldr	r2, [pc, #84]	; (8002a50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d10c      	bne.n	8002a18 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68ba      	ldr	r2, [r7, #8]
 8002a16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3714      	adds	r7, #20
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	40010000 	.word	0x40010000
 8002a3c:	40000400 	.word	0x40000400
 8002a40:	40000800 	.word	0x40000800
 8002a44:	40000c00 	.word	0x40000c00
 8002a48:	40010400 	.word	0x40010400
 8002a4c:	40014000 	.word	0x40014000
 8002a50:	40001800 	.word	0x40001800

08002a54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a5c:	bf00      	nop
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e03f      	b.n	8002b0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d106      	bne.n	8002aa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f7fd ffa2 	bl	80009ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2224      	movs	r2, #36	; 0x24
 8002aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68da      	ldr	r2, [r3, #12]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002abe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f000 f829 	bl	8002b18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	691a      	ldr	r2, [r3, #16]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ad4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	695a      	ldr	r2, [r3, #20]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ae4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68da      	ldr	r2, [r3, #12]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002af4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2220      	movs	r2, #32
 8002b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2220      	movs	r2, #32
 8002b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
	...

08002b18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b1c:	b0c0      	sub	sp, #256	; 0x100
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b34:	68d9      	ldr	r1, [r3, #12]
 8002b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	ea40 0301 	orr.w	r3, r0, r1
 8002b40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	431a      	orrs	r2, r3
 8002b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b5c:	69db      	ldr	r3, [r3, #28]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002b70:	f021 010c 	bic.w	r1, r1, #12
 8002b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002b7e:	430b      	orrs	r3, r1
 8002b80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b92:	6999      	ldr	r1, [r3, #24]
 8002b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	ea40 0301 	orr.w	r3, r0, r1
 8002b9e:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8002ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	4b95      	ldr	r3, [pc, #596]	; (8002dfc <UART_SetConfig+0x2e4>)
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d011      	beq.n	8002bd0 <UART_SetConfig+0xb8>
 8002bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	4b93      	ldr	r3, [pc, #588]	; (8002e00 <UART_SetConfig+0x2e8>)
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d00b      	beq.n	8002bd0 <UART_SetConfig+0xb8>
 8002bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	4b91      	ldr	r3, [pc, #580]	; (8002e04 <UART_SetConfig+0x2ec>)
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d005      	beq.n	8002bd0 <UART_SetConfig+0xb8>
 8002bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	4b8f      	ldr	r3, [pc, #572]	; (8002e08 <UART_SetConfig+0x2f0>)
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d104      	bne.n	8002bda <UART_SetConfig+0xc2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002bd0:	f7fe ff0e 	bl	80019f0 <HAL_RCC_GetPCLK2Freq>
 8002bd4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002bd8:	e003      	b.n	8002be2 <UART_SetConfig+0xca>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002bda:	f7fe fef5 	bl	80019c8 <HAL_RCC_GetPCLK1Freq>
 8002bde:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002be6:	69db      	ldr	r3, [r3, #28]
 8002be8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bec:	f040 8110 	bne.w	8002e10 <UART_SetConfig+0x2f8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002bf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002bfa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002bfe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002c02:	4622      	mov	r2, r4
 8002c04:	462b      	mov	r3, r5
 8002c06:	1891      	adds	r1, r2, r2
 8002c08:	65b9      	str	r1, [r7, #88]	; 0x58
 8002c0a:	415b      	adcs	r3, r3
 8002c0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002c12:	4621      	mov	r1, r4
 8002c14:	eb12 0801 	adds.w	r8, r2, r1
 8002c18:	4629      	mov	r1, r5
 8002c1a:	eb43 0901 	adc.w	r9, r3, r1
 8002c1e:	f04f 0200 	mov.w	r2, #0
 8002c22:	f04f 0300 	mov.w	r3, #0
 8002c26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c32:	4690      	mov	r8, r2
 8002c34:	4699      	mov	r9, r3
 8002c36:	4623      	mov	r3, r4
 8002c38:	eb18 0303 	adds.w	r3, r8, r3
 8002c3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002c40:	462b      	mov	r3, r5
 8002c42:	eb49 0303 	adc.w	r3, r9, r3
 8002c46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002c56:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002c5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002c5e:	460b      	mov	r3, r1
 8002c60:	18db      	adds	r3, r3, r3
 8002c62:	653b      	str	r3, [r7, #80]	; 0x50
 8002c64:	4613      	mov	r3, r2
 8002c66:	eb42 0303 	adc.w	r3, r2, r3
 8002c6a:	657b      	str	r3, [r7, #84]	; 0x54
 8002c6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002c70:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002c74:	f7fd fad4 	bl	8000220 <__aeabi_uldivmod>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	4b63      	ldr	r3, [pc, #396]	; (8002e0c <UART_SetConfig+0x2f4>)
 8002c7e:	fba3 2302 	umull	r2, r3, r3, r2
 8002c82:	095b      	lsrs	r3, r3, #5
 8002c84:	011c      	lsls	r4, r3, #4
 8002c86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c90:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002c94:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002c98:	4642      	mov	r2, r8
 8002c9a:	464b      	mov	r3, r9
 8002c9c:	1891      	adds	r1, r2, r2
 8002c9e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002ca0:	415b      	adcs	r3, r3
 8002ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ca4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002ca8:	4641      	mov	r1, r8
 8002caa:	eb12 0a01 	adds.w	sl, r2, r1
 8002cae:	4649      	mov	r1, r9
 8002cb0:	eb43 0b01 	adc.w	fp, r3, r1
 8002cb4:	f04f 0200 	mov.w	r2, #0
 8002cb8:	f04f 0300 	mov.w	r3, #0
 8002cbc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002cc0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002cc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002cc8:	4692      	mov	sl, r2
 8002cca:	469b      	mov	fp, r3
 8002ccc:	4643      	mov	r3, r8
 8002cce:	eb1a 0303 	adds.w	r3, sl, r3
 8002cd2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002cd6:	464b      	mov	r3, r9
 8002cd8:	eb4b 0303 	adc.w	r3, fp, r3
 8002cdc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002cec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002cf0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	18db      	adds	r3, r3, r3
 8002cf8:	643b      	str	r3, [r7, #64]	; 0x40
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	eb42 0303 	adc.w	r3, r2, r3
 8002d00:	647b      	str	r3, [r7, #68]	; 0x44
 8002d02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002d06:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002d0a:	f7fd fa89 	bl	8000220 <__aeabi_uldivmod>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	460b      	mov	r3, r1
 8002d12:	4611      	mov	r1, r2
 8002d14:	4b3d      	ldr	r3, [pc, #244]	; (8002e0c <UART_SetConfig+0x2f4>)
 8002d16:	fba3 2301 	umull	r2, r3, r3, r1
 8002d1a:	095b      	lsrs	r3, r3, #5
 8002d1c:	2264      	movs	r2, #100	; 0x64
 8002d1e:	fb02 f303 	mul.w	r3, r2, r3
 8002d22:	1acb      	subs	r3, r1, r3
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002d2a:	4b38      	ldr	r3, [pc, #224]	; (8002e0c <UART_SetConfig+0x2f4>)
 8002d2c:	fba3 2302 	umull	r2, r3, r3, r2
 8002d30:	095b      	lsrs	r3, r3, #5
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d38:	441c      	add	r4, r3
 8002d3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d44:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002d48:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002d4c:	4642      	mov	r2, r8
 8002d4e:	464b      	mov	r3, r9
 8002d50:	1891      	adds	r1, r2, r2
 8002d52:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d54:	415b      	adcs	r3, r3
 8002d56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d5c:	4641      	mov	r1, r8
 8002d5e:	1851      	adds	r1, r2, r1
 8002d60:	6339      	str	r1, [r7, #48]	; 0x30
 8002d62:	4649      	mov	r1, r9
 8002d64:	414b      	adcs	r3, r1
 8002d66:	637b      	str	r3, [r7, #52]	; 0x34
 8002d68:	f04f 0200 	mov.w	r2, #0
 8002d6c:	f04f 0300 	mov.w	r3, #0
 8002d70:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002d74:	4659      	mov	r1, fp
 8002d76:	00cb      	lsls	r3, r1, #3
 8002d78:	4651      	mov	r1, sl
 8002d7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d7e:	4651      	mov	r1, sl
 8002d80:	00ca      	lsls	r2, r1, #3
 8002d82:	4610      	mov	r0, r2
 8002d84:	4619      	mov	r1, r3
 8002d86:	4603      	mov	r3, r0
 8002d88:	4642      	mov	r2, r8
 8002d8a:	189b      	adds	r3, r3, r2
 8002d8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d90:	464b      	mov	r3, r9
 8002d92:	460a      	mov	r2, r1
 8002d94:	eb42 0303 	adc.w	r3, r2, r3
 8002d98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002da8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002dac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002db0:	460b      	mov	r3, r1
 8002db2:	18db      	adds	r3, r3, r3
 8002db4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002db6:	4613      	mov	r3, r2
 8002db8:	eb42 0303 	adc.w	r3, r2, r3
 8002dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002dc2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002dc6:	f7fd fa2b 	bl	8000220 <__aeabi_uldivmod>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	460b      	mov	r3, r1
 8002dce:	4b0f      	ldr	r3, [pc, #60]	; (8002e0c <UART_SetConfig+0x2f4>)
 8002dd0:	fba3 1302 	umull	r1, r3, r3, r2
 8002dd4:	095b      	lsrs	r3, r3, #5
 8002dd6:	2164      	movs	r1, #100	; 0x64
 8002dd8:	fb01 f303 	mul.w	r3, r1, r3
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	3332      	adds	r3, #50	; 0x32
 8002de2:	4a0a      	ldr	r2, [pc, #40]	; (8002e0c <UART_SetConfig+0x2f4>)
 8002de4:	fba2 2303 	umull	r2, r3, r2, r3
 8002de8:	095b      	lsrs	r3, r3, #5
 8002dea:	f003 0207 	and.w	r2, r3, #7
 8002dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4422      	add	r2, r4
 8002df6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002df8:	e10a      	b.n	8003010 <UART_SetConfig+0x4f8>
 8002dfa:	bf00      	nop
 8002dfc:	40011000 	.word	0x40011000
 8002e00:	40011400 	.word	0x40011400
 8002e04:	40011800 	.word	0x40011800
 8002e08:	40011c00 	.word	0x40011c00
 8002e0c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e14:	2200      	movs	r2, #0
 8002e16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002e1a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002e1e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002e22:	4642      	mov	r2, r8
 8002e24:	464b      	mov	r3, r9
 8002e26:	1891      	adds	r1, r2, r2
 8002e28:	6239      	str	r1, [r7, #32]
 8002e2a:	415b      	adcs	r3, r3
 8002e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e32:	4641      	mov	r1, r8
 8002e34:	1854      	adds	r4, r2, r1
 8002e36:	4649      	mov	r1, r9
 8002e38:	eb43 0501 	adc.w	r5, r3, r1
 8002e3c:	f04f 0200 	mov.w	r2, #0
 8002e40:	f04f 0300 	mov.w	r3, #0
 8002e44:	00eb      	lsls	r3, r5, #3
 8002e46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e4a:	00e2      	lsls	r2, r4, #3
 8002e4c:	4614      	mov	r4, r2
 8002e4e:	461d      	mov	r5, r3
 8002e50:	4643      	mov	r3, r8
 8002e52:	18e3      	adds	r3, r4, r3
 8002e54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e58:	464b      	mov	r3, r9
 8002e5a:	eb45 0303 	adc.w	r3, r5, r3
 8002e5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e6e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e72:	f04f 0200 	mov.w	r2, #0
 8002e76:	f04f 0300 	mov.w	r3, #0
 8002e7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e7e:	4629      	mov	r1, r5
 8002e80:	008b      	lsls	r3, r1, #2
 8002e82:	4621      	mov	r1, r4
 8002e84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e88:	4621      	mov	r1, r4
 8002e8a:	008a      	lsls	r2, r1, #2
 8002e8c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002e90:	f7fd f9c6 	bl	8000220 <__aeabi_uldivmod>
 8002e94:	4602      	mov	r2, r0
 8002e96:	460b      	mov	r3, r1
 8002e98:	4b60      	ldr	r3, [pc, #384]	; (800301c <UART_SetConfig+0x504>)
 8002e9a:	fba3 2302 	umull	r2, r3, r3, r2
 8002e9e:	095b      	lsrs	r3, r3, #5
 8002ea0:	011c      	lsls	r4, r3, #4
 8002ea2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002eac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002eb0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002eb4:	4642      	mov	r2, r8
 8002eb6:	464b      	mov	r3, r9
 8002eb8:	1891      	adds	r1, r2, r2
 8002eba:	61b9      	str	r1, [r7, #24]
 8002ebc:	415b      	adcs	r3, r3
 8002ebe:	61fb      	str	r3, [r7, #28]
 8002ec0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ec4:	4641      	mov	r1, r8
 8002ec6:	1851      	adds	r1, r2, r1
 8002ec8:	6139      	str	r1, [r7, #16]
 8002eca:	4649      	mov	r1, r9
 8002ecc:	414b      	adcs	r3, r1
 8002ece:	617b      	str	r3, [r7, #20]
 8002ed0:	f04f 0200 	mov.w	r2, #0
 8002ed4:	f04f 0300 	mov.w	r3, #0
 8002ed8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002edc:	4659      	mov	r1, fp
 8002ede:	00cb      	lsls	r3, r1, #3
 8002ee0:	4651      	mov	r1, sl
 8002ee2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ee6:	4651      	mov	r1, sl
 8002ee8:	00ca      	lsls	r2, r1, #3
 8002eea:	4610      	mov	r0, r2
 8002eec:	4619      	mov	r1, r3
 8002eee:	4603      	mov	r3, r0
 8002ef0:	4642      	mov	r2, r8
 8002ef2:	189b      	adds	r3, r3, r2
 8002ef4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ef8:	464b      	mov	r3, r9
 8002efa:	460a      	mov	r2, r1
 8002efc:	eb42 0303 	adc.w	r3, r2, r3
 8002f00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f0e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002f10:	f04f 0200 	mov.w	r2, #0
 8002f14:	f04f 0300 	mov.w	r3, #0
 8002f18:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002f1c:	4649      	mov	r1, r9
 8002f1e:	008b      	lsls	r3, r1, #2
 8002f20:	4641      	mov	r1, r8
 8002f22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f26:	4641      	mov	r1, r8
 8002f28:	008a      	lsls	r2, r1, #2
 8002f2a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002f2e:	f7fd f977 	bl	8000220 <__aeabi_uldivmod>
 8002f32:	4602      	mov	r2, r0
 8002f34:	460b      	mov	r3, r1
 8002f36:	4611      	mov	r1, r2
 8002f38:	4b38      	ldr	r3, [pc, #224]	; (800301c <UART_SetConfig+0x504>)
 8002f3a:	fba3 2301 	umull	r2, r3, r3, r1
 8002f3e:	095b      	lsrs	r3, r3, #5
 8002f40:	2264      	movs	r2, #100	; 0x64
 8002f42:	fb02 f303 	mul.w	r3, r2, r3
 8002f46:	1acb      	subs	r3, r1, r3
 8002f48:	011b      	lsls	r3, r3, #4
 8002f4a:	3332      	adds	r3, #50	; 0x32
 8002f4c:	4a33      	ldr	r2, [pc, #204]	; (800301c <UART_SetConfig+0x504>)
 8002f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f52:	095b      	lsrs	r3, r3, #5
 8002f54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f58:	441c      	add	r4, r3
 8002f5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f5e:	2200      	movs	r2, #0
 8002f60:	673b      	str	r3, [r7, #112]	; 0x70
 8002f62:	677a      	str	r2, [r7, #116]	; 0x74
 8002f64:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002f68:	4642      	mov	r2, r8
 8002f6a:	464b      	mov	r3, r9
 8002f6c:	1891      	adds	r1, r2, r2
 8002f6e:	60b9      	str	r1, [r7, #8]
 8002f70:	415b      	adcs	r3, r3
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f78:	4641      	mov	r1, r8
 8002f7a:	1851      	adds	r1, r2, r1
 8002f7c:	6039      	str	r1, [r7, #0]
 8002f7e:	4649      	mov	r1, r9
 8002f80:	414b      	adcs	r3, r1
 8002f82:	607b      	str	r3, [r7, #4]
 8002f84:	f04f 0200 	mov.w	r2, #0
 8002f88:	f04f 0300 	mov.w	r3, #0
 8002f8c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f90:	4659      	mov	r1, fp
 8002f92:	00cb      	lsls	r3, r1, #3
 8002f94:	4651      	mov	r1, sl
 8002f96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f9a:	4651      	mov	r1, sl
 8002f9c:	00ca      	lsls	r2, r1, #3
 8002f9e:	4610      	mov	r0, r2
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	4642      	mov	r2, r8
 8002fa6:	189b      	adds	r3, r3, r2
 8002fa8:	66bb      	str	r3, [r7, #104]	; 0x68
 8002faa:	464b      	mov	r3, r9
 8002fac:	460a      	mov	r2, r1
 8002fae:	eb42 0303 	adc.w	r3, r2, r3
 8002fb2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	663b      	str	r3, [r7, #96]	; 0x60
 8002fbe:	667a      	str	r2, [r7, #100]	; 0x64
 8002fc0:	f04f 0200 	mov.w	r2, #0
 8002fc4:	f04f 0300 	mov.w	r3, #0
 8002fc8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002fcc:	4649      	mov	r1, r9
 8002fce:	008b      	lsls	r3, r1, #2
 8002fd0:	4641      	mov	r1, r8
 8002fd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fd6:	4641      	mov	r1, r8
 8002fd8:	008a      	lsls	r2, r1, #2
 8002fda:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002fde:	f7fd f91f 	bl	8000220 <__aeabi_uldivmod>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	4b0d      	ldr	r3, [pc, #52]	; (800301c <UART_SetConfig+0x504>)
 8002fe8:	fba3 1302 	umull	r1, r3, r3, r2
 8002fec:	095b      	lsrs	r3, r3, #5
 8002fee:	2164      	movs	r1, #100	; 0x64
 8002ff0:	fb01 f303 	mul.w	r3, r1, r3
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	011b      	lsls	r3, r3, #4
 8002ff8:	3332      	adds	r3, #50	; 0x32
 8002ffa:	4a08      	ldr	r2, [pc, #32]	; (800301c <UART_SetConfig+0x504>)
 8002ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8003000:	095b      	lsrs	r3, r3, #5
 8003002:	f003 020f 	and.w	r2, r3, #15
 8003006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4422      	add	r2, r4
 800300e:	609a      	str	r2, [r3, #8]
}
 8003010:	bf00      	nop
 8003012:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003016:	46bd      	mov	sp, r7
 8003018:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800301c:	51eb851f 	.word	0x51eb851f

08003020 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003020:	b084      	sub	sp, #16
 8003022:	b580      	push	{r7, lr}
 8003024:	b084      	sub	sp, #16
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
 800302a:	f107 001c 	add.w	r0, r7, #28
 800302e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003034:	2b01      	cmp	r3, #1
 8003036:	d122      	bne.n	800307e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800304c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003062:	2b01      	cmp	r3, #1
 8003064:	d105      	bne.n	8003072 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 fa9c 	bl	80035b0 <USB_CoreReset>
 8003078:	4603      	mov	r3, r0
 800307a:	73fb      	strb	r3, [r7, #15]
 800307c:	e01a      	b.n	80030b4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 fa90 	bl	80035b0 <USB_CoreReset>
 8003090:	4603      	mov	r3, r0
 8003092:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003096:	2b00      	cmp	r3, #0
 8003098:	d106      	bne.n	80030a8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	639a      	str	r2, [r3, #56]	; 0x38
 80030a6:	e005      	b.n	80030b4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80030b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d10b      	bne.n	80030d2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f043 0206 	orr.w	r2, r3, #6
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f043 0220 	orr.w	r2, r3, #32
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80030d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80030de:	b004      	add	sp, #16
 80030e0:	4770      	bx	lr

080030e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f023 0201 	bic.w	r2, r3, #1
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	460b      	mov	r3, r1
 800310e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003110:	2300      	movs	r3, #0
 8003112:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003120:	78fb      	ldrb	r3, [r7, #3]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d115      	bne.n	8003152 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003132:	2001      	movs	r0, #1
 8003134:	f7fd fdf2 	bl	8000d1c <HAL_Delay>
      ms++;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	3301      	adds	r3, #1
 800313c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 fa28 	bl	8003594 <USB_GetMode>
 8003144:	4603      	mov	r3, r0
 8003146:	2b01      	cmp	r3, #1
 8003148:	d01e      	beq.n	8003188 <USB_SetCurrentMode+0x84>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2b31      	cmp	r3, #49	; 0x31
 800314e:	d9f0      	bls.n	8003132 <USB_SetCurrentMode+0x2e>
 8003150:	e01a      	b.n	8003188 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003152:	78fb      	ldrb	r3, [r7, #3]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d115      	bne.n	8003184 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003164:	2001      	movs	r0, #1
 8003166:	f7fd fdd9 	bl	8000d1c <HAL_Delay>
      ms++;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	3301      	adds	r3, #1
 800316e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 fa0f 	bl	8003594 <USB_GetMode>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d005      	beq.n	8003188 <USB_SetCurrentMode+0x84>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2b31      	cmp	r3, #49	; 0x31
 8003180:	d9f0      	bls.n	8003164 <USB_SetCurrentMode+0x60>
 8003182:	e001      	b.n	8003188 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e005      	b.n	8003194 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2b32      	cmp	r3, #50	; 0x32
 800318c:	d101      	bne.n	8003192 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e000      	b.n	8003194 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3710      	adds	r7, #16
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800319c:	b084      	sub	sp, #16
 800319e:	b580      	push	{r7, lr}
 80031a0:	b086      	sub	sp, #24
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
 80031a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80031aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80031ae:	2300      	movs	r3, #0
 80031b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80031b6:	2300      	movs	r3, #0
 80031b8:	613b      	str	r3, [r7, #16]
 80031ba:	e009      	b.n	80031d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	3340      	adds	r3, #64	; 0x40
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	4413      	add	r3, r2
 80031c6:	2200      	movs	r2, #0
 80031c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	3301      	adds	r3, #1
 80031ce:	613b      	str	r3, [r7, #16]
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	2b0e      	cmp	r3, #14
 80031d4:	d9f2      	bls.n	80031bc <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80031d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d11c      	bne.n	8003216 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031ea:	f043 0302 	orr.w	r3, r3, #2
 80031ee:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	e005      	b.n	8003222 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003228:	461a      	mov	r2, r3
 800322a:	2300      	movs	r3, #0
 800322c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003234:	4619      	mov	r1, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800323c:	461a      	mov	r2, r3
 800323e:	680b      	ldr	r3, [r1, #0]
 8003240:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003244:	2b01      	cmp	r3, #1
 8003246:	d10c      	bne.n	8003262 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800324a:	2b00      	cmp	r3, #0
 800324c:	d104      	bne.n	8003258 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800324e:	2100      	movs	r1, #0
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 f965 	bl	8003520 <USB_SetDevSpeed>
 8003256:	e008      	b.n	800326a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003258:	2101      	movs	r1, #1
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f960 	bl	8003520 <USB_SetDevSpeed>
 8003260:	e003      	b.n	800326a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003262:	2103      	movs	r1, #3
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f000 f95b 	bl	8003520 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800326a:	2110      	movs	r1, #16
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f000 f8f3 	bl	8003458 <USB_FlushTxFifo>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f000 f91f 	bl	80034c0 <USB_FlushRxFifo>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d001      	beq.n	800328c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003292:	461a      	mov	r2, r3
 8003294:	2300      	movs	r3, #0
 8003296:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800329e:	461a      	mov	r2, r3
 80032a0:	2300      	movs	r3, #0
 80032a2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032aa:	461a      	mov	r2, r3
 80032ac:	2300      	movs	r3, #0
 80032ae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80032b0:	2300      	movs	r3, #0
 80032b2:	613b      	str	r3, [r7, #16]
 80032b4:	e043      	b.n	800333e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	015a      	lsls	r2, r3, #5
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	4413      	add	r3, r2
 80032be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80032c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032cc:	d118      	bne.n	8003300 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d10a      	bne.n	80032ea <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	015a      	lsls	r2, r3, #5
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	4413      	add	r3, r2
 80032dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032e0:	461a      	mov	r2, r3
 80032e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80032e6:	6013      	str	r3, [r2, #0]
 80032e8:	e013      	b.n	8003312 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	015a      	lsls	r2, r3, #5
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	4413      	add	r3, r2
 80032f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032f6:	461a      	mov	r2, r3
 80032f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80032fc:	6013      	str	r3, [r2, #0]
 80032fe:	e008      	b.n	8003312 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	015a      	lsls	r2, r3, #5
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	4413      	add	r3, r2
 8003308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800330c:	461a      	mov	r2, r3
 800330e:	2300      	movs	r3, #0
 8003310:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	015a      	lsls	r2, r3, #5
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	4413      	add	r3, r2
 800331a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800331e:	461a      	mov	r2, r3
 8003320:	2300      	movs	r3, #0
 8003322:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	015a      	lsls	r2, r3, #5
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4413      	add	r3, r2
 800332c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003330:	461a      	mov	r2, r3
 8003332:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003336:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	3301      	adds	r3, #1
 800333c:	613b      	str	r3, [r7, #16]
 800333e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	429a      	cmp	r2, r3
 8003344:	d3b7      	bcc.n	80032b6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003346:	2300      	movs	r3, #0
 8003348:	613b      	str	r3, [r7, #16]
 800334a:	e043      	b.n	80033d4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	015a      	lsls	r2, r3, #5
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	4413      	add	r3, r2
 8003354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800335e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003362:	d118      	bne.n	8003396 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d10a      	bne.n	8003380 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	015a      	lsls	r2, r3, #5
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	4413      	add	r3, r2
 8003372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003376:	461a      	mov	r2, r3
 8003378:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800337c:	6013      	str	r3, [r2, #0]
 800337e:	e013      	b.n	80033a8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	015a      	lsls	r2, r3, #5
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	4413      	add	r3, r2
 8003388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800338c:	461a      	mov	r2, r3
 800338e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003392:	6013      	str	r3, [r2, #0]
 8003394:	e008      	b.n	80033a8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	015a      	lsls	r2, r3, #5
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4413      	add	r3, r2
 800339e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033a2:	461a      	mov	r2, r3
 80033a4:	2300      	movs	r3, #0
 80033a6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	015a      	lsls	r2, r3, #5
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	4413      	add	r3, r2
 80033b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033b4:	461a      	mov	r2, r3
 80033b6:	2300      	movs	r3, #0
 80033b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	015a      	lsls	r2, r3, #5
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	4413      	add	r3, r2
 80033c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033c6:	461a      	mov	r2, r3
 80033c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80033cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	3301      	adds	r3, #1
 80033d2:	613b      	str	r3, [r7, #16]
 80033d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d3b7      	bcc.n	800334c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033ee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80033fc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80033fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003400:	2b00      	cmp	r3, #0
 8003402:	d105      	bne.n	8003410 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	f043 0210 	orr.w	r2, r3, #16
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	699a      	ldr	r2, [r3, #24]
 8003414:	4b0f      	ldr	r3, [pc, #60]	; (8003454 <USB_DevInit+0x2b8>)
 8003416:	4313      	orrs	r3, r2
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800341c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800341e:	2b00      	cmp	r3, #0
 8003420:	d005      	beq.n	800342e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	f043 0208 	orr.w	r2, r3, #8
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800342e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003430:	2b01      	cmp	r3, #1
 8003432:	d107      	bne.n	8003444 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800343c:	f043 0304 	orr.w	r3, r3, #4
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003444:	7dfb      	ldrb	r3, [r7, #23]
}
 8003446:	4618      	mov	r0, r3
 8003448:	3718      	adds	r7, #24
 800344a:	46bd      	mov	sp, r7
 800344c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003450:	b004      	add	sp, #16
 8003452:	4770      	bx	lr
 8003454:	803c3800 	.word	0x803c3800

08003458 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003462:	2300      	movs	r3, #0
 8003464:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	3301      	adds	r3, #1
 800346a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	4a13      	ldr	r2, [pc, #76]	; (80034bc <USB_FlushTxFifo+0x64>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d901      	bls.n	8003478 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e01b      	b.n	80034b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	2b00      	cmp	r3, #0
 800347e:	daf2      	bge.n	8003466 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003480:	2300      	movs	r3, #0
 8003482:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	019b      	lsls	r3, r3, #6
 8003488:	f043 0220 	orr.w	r2, r3, #32
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	3301      	adds	r3, #1
 8003494:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	4a08      	ldr	r2, [pc, #32]	; (80034bc <USB_FlushTxFifo+0x64>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d901      	bls.n	80034a2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e006      	b.n	80034b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	f003 0320 	and.w	r3, r3, #32
 80034aa:	2b20      	cmp	r3, #32
 80034ac:	d0f0      	beq.n	8003490 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr
 80034bc:	00030d40 	.word	0x00030d40

080034c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80034c8:	2300      	movs	r3, #0
 80034ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	3301      	adds	r3, #1
 80034d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	4a11      	ldr	r2, [pc, #68]	; (800351c <USB_FlushRxFifo+0x5c>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d901      	bls.n	80034de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e018      	b.n	8003510 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	daf2      	bge.n	80034cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80034e6:	2300      	movs	r3, #0
 80034e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2210      	movs	r2, #16
 80034ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	3301      	adds	r3, #1
 80034f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	4a08      	ldr	r2, [pc, #32]	; (800351c <USB_FlushRxFifo+0x5c>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d901      	bls.n	8003502 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e006      	b.n	8003510 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	f003 0310 	and.w	r3, r3, #16
 800350a:	2b10      	cmp	r3, #16
 800350c:	d0f0      	beq.n	80034f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3714      	adds	r7, #20
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr
 800351c:	00030d40 	.word	0x00030d40

08003520 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	460b      	mov	r3, r1
 800352a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	78fb      	ldrb	r3, [r7, #3]
 800353a:	68f9      	ldr	r1, [r7, #12]
 800353c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003540:	4313      	orrs	r3, r2
 8003542:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3714      	adds	r7, #20
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003552:	b480      	push	{r7}
 8003554:	b085      	sub	sp, #20
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800356c:	f023 0303 	bic.w	r3, r3, #3
 8003570:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003580:	f043 0302 	orr.w	r3, r3, #2
 8003584:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3714      	adds	r7, #20
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	f003 0301 	and.w	r3, r3, #1
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80035b8:	2300      	movs	r3, #0
 80035ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	3301      	adds	r3, #1
 80035c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	4a13      	ldr	r2, [pc, #76]	; (8003614 <USB_CoreReset+0x64>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d901      	bls.n	80035ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e01b      	b.n	8003606 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	daf2      	bge.n	80035bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80035d6:	2300      	movs	r3, #0
 80035d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	f043 0201 	orr.w	r2, r3, #1
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	3301      	adds	r3, #1
 80035ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4a09      	ldr	r2, [pc, #36]	; (8003614 <USB_CoreReset+0x64>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d901      	bls.n	80035f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e006      	b.n	8003606 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	2b01      	cmp	r3, #1
 8003602:	d0f0      	beq.n	80035e6 <USB_CoreReset+0x36>

  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3714      	adds	r7, #20
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	00030d40 	.word	0x00030d40

08003618 <__NVIC_SetPriority>:
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	4603      	mov	r3, r0
 8003620:	6039      	str	r1, [r7, #0]
 8003622:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003628:	2b00      	cmp	r3, #0
 800362a:	db0a      	blt.n	8003642 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	b2da      	uxtb	r2, r3
 8003630:	490c      	ldr	r1, [pc, #48]	; (8003664 <__NVIC_SetPriority+0x4c>)
 8003632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003636:	0112      	lsls	r2, r2, #4
 8003638:	b2d2      	uxtb	r2, r2
 800363a:	440b      	add	r3, r1
 800363c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003640:	e00a      	b.n	8003658 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	b2da      	uxtb	r2, r3
 8003646:	4908      	ldr	r1, [pc, #32]	; (8003668 <__NVIC_SetPriority+0x50>)
 8003648:	79fb      	ldrb	r3, [r7, #7]
 800364a:	f003 030f 	and.w	r3, r3, #15
 800364e:	3b04      	subs	r3, #4
 8003650:	0112      	lsls	r2, r2, #4
 8003652:	b2d2      	uxtb	r2, r2
 8003654:	440b      	add	r3, r1
 8003656:	761a      	strb	r2, [r3, #24]
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	e000e100 	.word	0xe000e100
 8003668:	e000ed00 	.word	0xe000ed00

0800366c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003670:	2100      	movs	r1, #0
 8003672:	f06f 0004 	mvn.w	r0, #4
 8003676:	f7ff ffcf 	bl	8003618 <__NVIC_SetPriority>
#endif
}
 800367a:	bf00      	nop
 800367c:	bd80      	pop	{r7, pc}
	...

08003680 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003686:	f3ef 8305 	mrs	r3, IPSR
 800368a:	603b      	str	r3, [r7, #0]
  return(result);
 800368c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003692:	f06f 0305 	mvn.w	r3, #5
 8003696:	607b      	str	r3, [r7, #4]
 8003698:	e00c      	b.n	80036b4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800369a:	4b0a      	ldr	r3, [pc, #40]	; (80036c4 <osKernelInitialize+0x44>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d105      	bne.n	80036ae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80036a2:	4b08      	ldr	r3, [pc, #32]	; (80036c4 <osKernelInitialize+0x44>)
 80036a4:	2201      	movs	r2, #1
 80036a6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80036a8:	2300      	movs	r3, #0
 80036aa:	607b      	str	r3, [r7, #4]
 80036ac:	e002      	b.n	80036b4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80036ae:	f04f 33ff 	mov.w	r3, #4294967295
 80036b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80036b4:	687b      	ldr	r3, [r7, #4]
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	200005d0 	.word	0x200005d0

080036c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036ce:	f3ef 8305 	mrs	r3, IPSR
 80036d2:	603b      	str	r3, [r7, #0]
  return(result);
 80036d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80036da:	f06f 0305 	mvn.w	r3, #5
 80036de:	607b      	str	r3, [r7, #4]
 80036e0:	e010      	b.n	8003704 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80036e2:	4b0b      	ldr	r3, [pc, #44]	; (8003710 <osKernelStart+0x48>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d109      	bne.n	80036fe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80036ea:	f7ff ffbf 	bl	800366c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80036ee:	4b08      	ldr	r3, [pc, #32]	; (8003710 <osKernelStart+0x48>)
 80036f0:	2202      	movs	r2, #2
 80036f2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80036f4:	f001 f866 	bl	80047c4 <vTaskStartScheduler>
      stat = osOK;
 80036f8:	2300      	movs	r3, #0
 80036fa:	607b      	str	r3, [r7, #4]
 80036fc:	e002      	b.n	8003704 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80036fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003702:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003704:	687b      	ldr	r3, [r7, #4]
}
 8003706:	4618      	mov	r0, r3
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	200005d0 	.word	0x200005d0

08003714 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003714:	b580      	push	{r7, lr}
 8003716:	b08e      	sub	sp, #56	; 0x38
 8003718:	af04      	add	r7, sp, #16
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003720:	2300      	movs	r3, #0
 8003722:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003724:	f3ef 8305 	mrs	r3, IPSR
 8003728:	617b      	str	r3, [r7, #20]
  return(result);
 800372a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800372c:	2b00      	cmp	r3, #0
 800372e:	d17e      	bne.n	800382e <osThreadNew+0x11a>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d07b      	beq.n	800382e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003736:	2380      	movs	r3, #128	; 0x80
 8003738:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800373a:	2318      	movs	r3, #24
 800373c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800373e:	2300      	movs	r3, #0
 8003740:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003742:	f04f 33ff 	mov.w	r3, #4294967295
 8003746:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d045      	beq.n	80037da <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d002      	beq.n	800375c <osThreadNew+0x48>
        name = attr->name;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d002      	beq.n	800376a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d008      	beq.n	8003782 <osThreadNew+0x6e>
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	2b38      	cmp	r3, #56	; 0x38
 8003774:	d805      	bhi.n	8003782 <osThreadNew+0x6e>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <osThreadNew+0x72>
        return (NULL);
 8003782:	2300      	movs	r3, #0
 8003784:	e054      	b.n	8003830 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d003      	beq.n	8003796 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	089b      	lsrs	r3, r3, #2
 8003794:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00e      	beq.n	80037bc <osThreadNew+0xa8>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	2b5b      	cmp	r3, #91	; 0x5b
 80037a4:	d90a      	bls.n	80037bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d006      	beq.n	80037bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d002      	beq.n	80037bc <osThreadNew+0xa8>
        mem = 1;
 80037b6:	2301      	movs	r3, #1
 80037b8:	61bb      	str	r3, [r7, #24]
 80037ba:	e010      	b.n	80037de <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d10c      	bne.n	80037de <osThreadNew+0xca>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d108      	bne.n	80037de <osThreadNew+0xca>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d104      	bne.n	80037de <osThreadNew+0xca>
          mem = 0;
 80037d4:	2300      	movs	r3, #0
 80037d6:	61bb      	str	r3, [r7, #24]
 80037d8:	e001      	b.n	80037de <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80037da:	2300      	movs	r3, #0
 80037dc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d110      	bne.n	8003806 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80037ec:	9202      	str	r2, [sp, #8]
 80037ee:	9301      	str	r3, [sp, #4]
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	9300      	str	r3, [sp, #0]
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	6a3a      	ldr	r2, [r7, #32]
 80037f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f000 fe0c 	bl	8004418 <xTaskCreateStatic>
 8003800:	4603      	mov	r3, r0
 8003802:	613b      	str	r3, [r7, #16]
 8003804:	e013      	b.n	800382e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d110      	bne.n	800382e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	b29a      	uxth	r2, r3
 8003810:	f107 0310 	add.w	r3, r7, #16
 8003814:	9301      	str	r3, [sp, #4]
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f000 fe57 	bl	80044d2 <xTaskCreate>
 8003824:	4603      	mov	r3, r0
 8003826:	2b01      	cmp	r3, #1
 8003828:	d001      	beq.n	800382e <osThreadNew+0x11a>
            hTask = NULL;
 800382a:	2300      	movs	r3, #0
 800382c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800382e:	693b      	ldr	r3, [r7, #16]
}
 8003830:	4618      	mov	r0, r3
 8003832:	3728      	adds	r7, #40	; 0x28
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003840:	f3ef 8305 	mrs	r3, IPSR
 8003844:	60bb      	str	r3, [r7, #8]
  return(result);
 8003846:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003848:	2b00      	cmp	r3, #0
 800384a:	d003      	beq.n	8003854 <osDelay+0x1c>
    stat = osErrorISR;
 800384c:	f06f 0305 	mvn.w	r3, #5
 8003850:	60fb      	str	r3, [r7, #12]
 8003852:	e007      	b.n	8003864 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003854:	2300      	movs	r3, #0
 8003856:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d002      	beq.n	8003864 <osDelay+0x2c>
      vTaskDelay(ticks);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 ff7c 	bl	800475c <vTaskDelay>
    }
  }

  return (stat);
 8003864:	68fb      	ldr	r3, [r7, #12]
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
	...

08003870 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	4a07      	ldr	r2, [pc, #28]	; (800389c <vApplicationGetIdleTaskMemory+0x2c>)
 8003880:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	4a06      	ldr	r2, [pc, #24]	; (80038a0 <vApplicationGetIdleTaskMemory+0x30>)
 8003886:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2280      	movs	r2, #128	; 0x80
 800388c:	601a      	str	r2, [r3, #0]
}
 800388e:	bf00      	nop
 8003890:	3714      	adds	r7, #20
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	200005d4 	.word	0x200005d4
 80038a0:	20000630 	.word	0x20000630

080038a4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	4a07      	ldr	r2, [pc, #28]	; (80038d0 <vApplicationGetTimerTaskMemory+0x2c>)
 80038b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	4a06      	ldr	r2, [pc, #24]	; (80038d4 <vApplicationGetTimerTaskMemory+0x30>)
 80038ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038c2:	601a      	str	r2, [r3, #0]
}
 80038c4:	bf00      	nop
 80038c6:	3714      	adds	r7, #20
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr
 80038d0:	20000830 	.word	0x20000830
 80038d4:	2000088c 	.word	0x2000088c

080038d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f103 0208 	add.w	r2, r3, #8
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f04f 32ff 	mov.w	r2, #4294967295
 80038f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f103 0208 	add.w	r2, r3, #8
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f103 0208 	add.w	r2, r3, #8
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003926:	bf00      	nop
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr

08003932 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003932:	b480      	push	{r7}
 8003934:	b085      	sub	sp, #20
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
 800393a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	689a      	ldr	r2, [r3, #8]
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	683a      	ldr	r2, [r7, #0]
 8003956:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	683a      	ldr	r2, [r7, #0]
 800395c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	1c5a      	adds	r2, r3, #1
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	601a      	str	r2, [r3, #0]
}
 800396e:	bf00      	nop
 8003970:	3714      	adds	r7, #20
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr

0800397a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800397a:	b480      	push	{r7}
 800397c:	b085      	sub	sp, #20
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
 8003982:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003990:	d103      	bne.n	800399a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	60fb      	str	r3, [r7, #12]
 8003998:	e00c      	b.n	80039b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	3308      	adds	r3, #8
 800399e:	60fb      	str	r3, [r7, #12]
 80039a0:	e002      	b.n	80039a8 <vListInsert+0x2e>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	60fb      	str	r3, [r7, #12]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68ba      	ldr	r2, [r7, #8]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d2f6      	bcs.n	80039a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	685a      	ldr	r2, [r3, #4]
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	683a      	ldr	r2, [r7, #0]
 80039c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	1c5a      	adds	r2, r3, #1
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	601a      	str	r2, [r3, #0]
}
 80039e0:	bf00      	nop
 80039e2:	3714      	adds	r7, #20
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	6892      	ldr	r2, [r2, #8]
 8003a02:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	6852      	ldr	r2, [r2, #4]
 8003a0c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d103      	bne.n	8003a20 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689a      	ldr	r2, [r3, #8]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	1e5a      	subs	r2, r3, #1
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3714      	adds	r7, #20
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d10a      	bne.n	8003a6a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a58:	f383 8811 	msr	BASEPRI, r3
 8003a5c:	f3bf 8f6f 	isb	sy
 8003a60:	f3bf 8f4f 	dsb	sy
 8003a64:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003a66:	bf00      	nop
 8003a68:	e7fe      	b.n	8003a68 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003a6a:	f002 f84b 	bl	8005b04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a76:	68f9      	ldr	r1, [r7, #12]
 8003a78:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003a7a:	fb01 f303 	mul.w	r3, r1, r3
 8003a7e:	441a      	add	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	68f9      	ldr	r1, [r7, #12]
 8003a9e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003aa0:	fb01 f303 	mul.w	r3, r1, r3
 8003aa4:	441a      	add	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	22ff      	movs	r2, #255	; 0xff
 8003aae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	22ff      	movs	r2, #255	; 0xff
 8003ab6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d114      	bne.n	8003aea <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d01a      	beq.n	8003afe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	3310      	adds	r3, #16
 8003acc:	4618      	mov	r0, r3
 8003ace:	f001 f903 	bl	8004cd8 <xTaskRemoveFromEventList>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d012      	beq.n	8003afe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003ad8:	4b0c      	ldr	r3, [pc, #48]	; (8003b0c <xQueueGenericReset+0xcc>)
 8003ada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ade:	601a      	str	r2, [r3, #0]
 8003ae0:	f3bf 8f4f 	dsb	sy
 8003ae4:	f3bf 8f6f 	isb	sy
 8003ae8:	e009      	b.n	8003afe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	3310      	adds	r3, #16
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7ff fef2 	bl	80038d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	3324      	adds	r3, #36	; 0x24
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7ff feed 	bl	80038d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003afe:	f002 f831 	bl	8005b64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003b02:	2301      	movs	r3, #1
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3710      	adds	r7, #16
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	e000ed04 	.word	0xe000ed04

08003b10 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b08e      	sub	sp, #56	; 0x38
 8003b14:	af02      	add	r7, sp, #8
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
 8003b1c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10a      	bne.n	8003b3a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b28:	f383 8811 	msr	BASEPRI, r3
 8003b2c:	f3bf 8f6f 	isb	sy
 8003b30:	f3bf 8f4f 	dsb	sy
 8003b34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003b36:	bf00      	nop
 8003b38:	e7fe      	b.n	8003b38 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d10a      	bne.n	8003b56 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b44:	f383 8811 	msr	BASEPRI, r3
 8003b48:	f3bf 8f6f 	isb	sy
 8003b4c:	f3bf 8f4f 	dsb	sy
 8003b50:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003b52:	bf00      	nop
 8003b54:	e7fe      	b.n	8003b54 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d002      	beq.n	8003b62 <xQueueGenericCreateStatic+0x52>
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <xQueueGenericCreateStatic+0x56>
 8003b62:	2301      	movs	r3, #1
 8003b64:	e000      	b.n	8003b68 <xQueueGenericCreateStatic+0x58>
 8003b66:	2300      	movs	r3, #0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d10a      	bne.n	8003b82 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b70:	f383 8811 	msr	BASEPRI, r3
 8003b74:	f3bf 8f6f 	isb	sy
 8003b78:	f3bf 8f4f 	dsb	sy
 8003b7c:	623b      	str	r3, [r7, #32]
}
 8003b7e:	bf00      	nop
 8003b80:	e7fe      	b.n	8003b80 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d102      	bne.n	8003b8e <xQueueGenericCreateStatic+0x7e>
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <xQueueGenericCreateStatic+0x82>
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e000      	b.n	8003b94 <xQueueGenericCreateStatic+0x84>
 8003b92:	2300      	movs	r3, #0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10a      	bne.n	8003bae <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9c:	f383 8811 	msr	BASEPRI, r3
 8003ba0:	f3bf 8f6f 	isb	sy
 8003ba4:	f3bf 8f4f 	dsb	sy
 8003ba8:	61fb      	str	r3, [r7, #28]
}
 8003baa:	bf00      	nop
 8003bac:	e7fe      	b.n	8003bac <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003bae:	2350      	movs	r3, #80	; 0x50
 8003bb0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	2b50      	cmp	r3, #80	; 0x50
 8003bb6:	d00a      	beq.n	8003bce <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bbc:	f383 8811 	msr	BASEPRI, r3
 8003bc0:	f3bf 8f6f 	isb	sy
 8003bc4:	f3bf 8f4f 	dsb	sy
 8003bc8:	61bb      	str	r3, [r7, #24]
}
 8003bca:	bf00      	nop
 8003bcc:	e7fe      	b.n	8003bcc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003bce:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00d      	beq.n	8003bf6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003be2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	4613      	mov	r3, r2
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	68b9      	ldr	r1, [r7, #8]
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f000 f805 	bl	8003c00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3730      	adds	r7, #48	; 0x30
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
 8003c0c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d103      	bne.n	8003c1c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	601a      	str	r2, [r3, #0]
 8003c1a:	e002      	b.n	8003c22 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003c2e:	2101      	movs	r1, #1
 8003c30:	69b8      	ldr	r0, [r7, #24]
 8003c32:	f7ff ff05 	bl	8003a40 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	78fa      	ldrb	r2, [r7, #3]
 8003c3a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003c3e:	bf00      	nop
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
	...

08003c48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b08e      	sub	sp, #56	; 0x38
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
 8003c54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003c56:	2300      	movs	r3, #0
 8003c58:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d10a      	bne.n	8003c7a <xQueueGenericSend+0x32>
	__asm volatile
 8003c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c68:	f383 8811 	msr	BASEPRI, r3
 8003c6c:	f3bf 8f6f 	isb	sy
 8003c70:	f3bf 8f4f 	dsb	sy
 8003c74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003c76:	bf00      	nop
 8003c78:	e7fe      	b.n	8003c78 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d103      	bne.n	8003c88 <xQueueGenericSend+0x40>
 8003c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d101      	bne.n	8003c8c <xQueueGenericSend+0x44>
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e000      	b.n	8003c8e <xQueueGenericSend+0x46>
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10a      	bne.n	8003ca8 <xQueueGenericSend+0x60>
	__asm volatile
 8003c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c96:	f383 8811 	msr	BASEPRI, r3
 8003c9a:	f3bf 8f6f 	isb	sy
 8003c9e:	f3bf 8f4f 	dsb	sy
 8003ca2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003ca4:	bf00      	nop
 8003ca6:	e7fe      	b.n	8003ca6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d103      	bne.n	8003cb6 <xQueueGenericSend+0x6e>
 8003cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d101      	bne.n	8003cba <xQueueGenericSend+0x72>
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e000      	b.n	8003cbc <xQueueGenericSend+0x74>
 8003cba:	2300      	movs	r3, #0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10a      	bne.n	8003cd6 <xQueueGenericSend+0x8e>
	__asm volatile
 8003cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc4:	f383 8811 	msr	BASEPRI, r3
 8003cc8:	f3bf 8f6f 	isb	sy
 8003ccc:	f3bf 8f4f 	dsb	sy
 8003cd0:	623b      	str	r3, [r7, #32]
}
 8003cd2:	bf00      	nop
 8003cd4:	e7fe      	b.n	8003cd4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003cd6:	f001 f9bd 	bl	8005054 <xTaskGetSchedulerState>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d102      	bne.n	8003ce6 <xQueueGenericSend+0x9e>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <xQueueGenericSend+0xa2>
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e000      	b.n	8003cec <xQueueGenericSend+0xa4>
 8003cea:	2300      	movs	r3, #0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d10a      	bne.n	8003d06 <xQueueGenericSend+0xbe>
	__asm volatile
 8003cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf4:	f383 8811 	msr	BASEPRI, r3
 8003cf8:	f3bf 8f6f 	isb	sy
 8003cfc:	f3bf 8f4f 	dsb	sy
 8003d00:	61fb      	str	r3, [r7, #28]
}
 8003d02:	bf00      	nop
 8003d04:	e7fe      	b.n	8003d04 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d06:	f001 fefd 	bl	8005b04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d302      	bcc.n	8003d1c <xQueueGenericSend+0xd4>
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d129      	bne.n	8003d70 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	68b9      	ldr	r1, [r7, #8]
 8003d20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d22:	f000 fa0b 	bl	800413c <prvCopyDataToQueue>
 8003d26:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d010      	beq.n	8003d52 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d32:	3324      	adds	r3, #36	; 0x24
 8003d34:	4618      	mov	r0, r3
 8003d36:	f000 ffcf 	bl	8004cd8 <xTaskRemoveFromEventList>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d013      	beq.n	8003d68 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003d40:	4b3f      	ldr	r3, [pc, #252]	; (8003e40 <xQueueGenericSend+0x1f8>)
 8003d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d46:	601a      	str	r2, [r3, #0]
 8003d48:	f3bf 8f4f 	dsb	sy
 8003d4c:	f3bf 8f6f 	isb	sy
 8003d50:	e00a      	b.n	8003d68 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d007      	beq.n	8003d68 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003d58:	4b39      	ldr	r3, [pc, #228]	; (8003e40 <xQueueGenericSend+0x1f8>)
 8003d5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d5e:	601a      	str	r2, [r3, #0]
 8003d60:	f3bf 8f4f 	dsb	sy
 8003d64:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003d68:	f001 fefc 	bl	8005b64 <vPortExitCritical>
				return pdPASS;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e063      	b.n	8003e38 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d103      	bne.n	8003d7e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d76:	f001 fef5 	bl	8005b64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	e05c      	b.n	8003e38 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d106      	bne.n	8003d92 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d84:	f107 0314 	add.w	r3, r7, #20
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f001 f809 	bl	8004da0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d92:	f001 fee7 	bl	8005b64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d96:	f000 fd7b 	bl	8004890 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d9a:	f001 feb3 	bl	8005b04 <vPortEnterCritical>
 8003d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003da4:	b25b      	sxtb	r3, r3
 8003da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003daa:	d103      	bne.n	8003db4 <xQueueGenericSend+0x16c>
 8003dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003dba:	b25b      	sxtb	r3, r3
 8003dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc0:	d103      	bne.n	8003dca <xQueueGenericSend+0x182>
 8003dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003dca:	f001 fecb 	bl	8005b64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003dce:	1d3a      	adds	r2, r7, #4
 8003dd0:	f107 0314 	add.w	r3, r7, #20
 8003dd4:	4611      	mov	r1, r2
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f000 fff8 	bl	8004dcc <xTaskCheckForTimeOut>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d124      	bne.n	8003e2c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003de2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003de4:	f000 faa2 	bl	800432c <prvIsQueueFull>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d018      	beq.n	8003e20 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df0:	3310      	adds	r3, #16
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	4611      	mov	r1, r2
 8003df6:	4618      	mov	r0, r3
 8003df8:	f000 ff1e 	bl	8004c38 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003dfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003dfe:	f000 fa2d 	bl	800425c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003e02:	f000 fd53 	bl	80048ac <xTaskResumeAll>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f47f af7c 	bne.w	8003d06 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003e0e:	4b0c      	ldr	r3, [pc, #48]	; (8003e40 <xQueueGenericSend+0x1f8>)
 8003e10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e14:	601a      	str	r2, [r3, #0]
 8003e16:	f3bf 8f4f 	dsb	sy
 8003e1a:	f3bf 8f6f 	isb	sy
 8003e1e:	e772      	b.n	8003d06 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003e20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e22:	f000 fa1b 	bl	800425c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e26:	f000 fd41 	bl	80048ac <xTaskResumeAll>
 8003e2a:	e76c      	b.n	8003d06 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003e2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e2e:	f000 fa15 	bl	800425c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e32:	f000 fd3b 	bl	80048ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003e36:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3738      	adds	r7, #56	; 0x38
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	e000ed04 	.word	0xe000ed04

08003e44 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b090      	sub	sp, #64	; 0x40
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
 8003e50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d10a      	bne.n	8003e72 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e60:	f383 8811 	msr	BASEPRI, r3
 8003e64:	f3bf 8f6f 	isb	sy
 8003e68:	f3bf 8f4f 	dsb	sy
 8003e6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003e6e:	bf00      	nop
 8003e70:	e7fe      	b.n	8003e70 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d103      	bne.n	8003e80 <xQueueGenericSendFromISR+0x3c>
 8003e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d101      	bne.n	8003e84 <xQueueGenericSendFromISR+0x40>
 8003e80:	2301      	movs	r3, #1
 8003e82:	e000      	b.n	8003e86 <xQueueGenericSendFromISR+0x42>
 8003e84:	2300      	movs	r3, #0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d10a      	bne.n	8003ea0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e8e:	f383 8811 	msr	BASEPRI, r3
 8003e92:	f3bf 8f6f 	isb	sy
 8003e96:	f3bf 8f4f 	dsb	sy
 8003e9a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003e9c:	bf00      	nop
 8003e9e:	e7fe      	b.n	8003e9e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d103      	bne.n	8003eae <xQueueGenericSendFromISR+0x6a>
 8003ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d101      	bne.n	8003eb2 <xQueueGenericSendFromISR+0x6e>
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e000      	b.n	8003eb4 <xQueueGenericSendFromISR+0x70>
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d10a      	bne.n	8003ece <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ebc:	f383 8811 	msr	BASEPRI, r3
 8003ec0:	f3bf 8f6f 	isb	sy
 8003ec4:	f3bf 8f4f 	dsb	sy
 8003ec8:	623b      	str	r3, [r7, #32]
}
 8003eca:	bf00      	nop
 8003ecc:	e7fe      	b.n	8003ecc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003ece:	f001 fefb 	bl	8005cc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003ed2:	f3ef 8211 	mrs	r2, BASEPRI
 8003ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eda:	f383 8811 	msr	BASEPRI, r3
 8003ede:	f3bf 8f6f 	isb	sy
 8003ee2:	f3bf 8f4f 	dsb	sy
 8003ee6:	61fa      	str	r2, [r7, #28]
 8003ee8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003eea:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003eec:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d302      	bcc.n	8003f00 <xQueueGenericSendFromISR+0xbc>
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d12f      	bne.n	8003f60 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f10:	683a      	ldr	r2, [r7, #0]
 8003f12:	68b9      	ldr	r1, [r7, #8]
 8003f14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003f16:	f000 f911 	bl	800413c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003f1a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f22:	d112      	bne.n	8003f4a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d016      	beq.n	8003f5a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f2e:	3324      	adds	r3, #36	; 0x24
 8003f30:	4618      	mov	r0, r3
 8003f32:	f000 fed1 	bl	8004cd8 <xTaskRemoveFromEventList>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00e      	beq.n	8003f5a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00b      	beq.n	8003f5a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2201      	movs	r2, #1
 8003f46:	601a      	str	r2, [r3, #0]
 8003f48:	e007      	b.n	8003f5a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003f4a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003f4e:	3301      	adds	r3, #1
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	b25a      	sxtb	r2, r3
 8003f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003f5e:	e001      	b.n	8003f64 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003f60:	2300      	movs	r3, #0
 8003f62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f66:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003f6e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3740      	adds	r7, #64	; 0x40
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
	...

08003f7c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b08c      	sub	sp, #48	; 0x30
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10a      	bne.n	8003fac <xQueueReceive+0x30>
	__asm volatile
 8003f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f9a:	f383 8811 	msr	BASEPRI, r3
 8003f9e:	f3bf 8f6f 	isb	sy
 8003fa2:	f3bf 8f4f 	dsb	sy
 8003fa6:	623b      	str	r3, [r7, #32]
}
 8003fa8:	bf00      	nop
 8003faa:	e7fe      	b.n	8003faa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d103      	bne.n	8003fba <xQueueReceive+0x3e>
 8003fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <xQueueReceive+0x42>
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e000      	b.n	8003fc0 <xQueueReceive+0x44>
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d10a      	bne.n	8003fda <xQueueReceive+0x5e>
	__asm volatile
 8003fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc8:	f383 8811 	msr	BASEPRI, r3
 8003fcc:	f3bf 8f6f 	isb	sy
 8003fd0:	f3bf 8f4f 	dsb	sy
 8003fd4:	61fb      	str	r3, [r7, #28]
}
 8003fd6:	bf00      	nop
 8003fd8:	e7fe      	b.n	8003fd8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003fda:	f001 f83b 	bl	8005054 <xTaskGetSchedulerState>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d102      	bne.n	8003fea <xQueueReceive+0x6e>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <xQueueReceive+0x72>
 8003fea:	2301      	movs	r3, #1
 8003fec:	e000      	b.n	8003ff0 <xQueueReceive+0x74>
 8003fee:	2300      	movs	r3, #0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d10a      	bne.n	800400a <xQueueReceive+0x8e>
	__asm volatile
 8003ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff8:	f383 8811 	msr	BASEPRI, r3
 8003ffc:	f3bf 8f6f 	isb	sy
 8004000:	f3bf 8f4f 	dsb	sy
 8004004:	61bb      	str	r3, [r7, #24]
}
 8004006:	bf00      	nop
 8004008:	e7fe      	b.n	8004008 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800400a:	f001 fd7b 	bl	8005b04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800400e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004012:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004016:	2b00      	cmp	r3, #0
 8004018:	d01f      	beq.n	800405a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800401a:	68b9      	ldr	r1, [r7, #8]
 800401c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800401e:	f000 f8f7 	bl	8004210 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004024:	1e5a      	subs	r2, r3, #1
 8004026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004028:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800402a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00f      	beq.n	8004052 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004034:	3310      	adds	r3, #16
 8004036:	4618      	mov	r0, r3
 8004038:	f000 fe4e 	bl	8004cd8 <xTaskRemoveFromEventList>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d007      	beq.n	8004052 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004042:	4b3d      	ldr	r3, [pc, #244]	; (8004138 <xQueueReceive+0x1bc>)
 8004044:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004048:	601a      	str	r2, [r3, #0]
 800404a:	f3bf 8f4f 	dsb	sy
 800404e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004052:	f001 fd87 	bl	8005b64 <vPortExitCritical>
				return pdPASS;
 8004056:	2301      	movs	r3, #1
 8004058:	e069      	b.n	800412e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d103      	bne.n	8004068 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004060:	f001 fd80 	bl	8005b64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004064:	2300      	movs	r3, #0
 8004066:	e062      	b.n	800412e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800406a:	2b00      	cmp	r3, #0
 800406c:	d106      	bne.n	800407c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800406e:	f107 0310 	add.w	r3, r7, #16
 8004072:	4618      	mov	r0, r3
 8004074:	f000 fe94 	bl	8004da0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004078:	2301      	movs	r3, #1
 800407a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800407c:	f001 fd72 	bl	8005b64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004080:	f000 fc06 	bl	8004890 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004084:	f001 fd3e 	bl	8005b04 <vPortEnterCritical>
 8004088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800408a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800408e:	b25b      	sxtb	r3, r3
 8004090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004094:	d103      	bne.n	800409e <xQueueReceive+0x122>
 8004096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004098:	2200      	movs	r2, #0
 800409a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800409e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040a4:	b25b      	sxtb	r3, r3
 80040a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040aa:	d103      	bne.n	80040b4 <xQueueReceive+0x138>
 80040ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040b4:	f001 fd56 	bl	8005b64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80040b8:	1d3a      	adds	r2, r7, #4
 80040ba:	f107 0310 	add.w	r3, r7, #16
 80040be:	4611      	mov	r1, r2
 80040c0:	4618      	mov	r0, r3
 80040c2:	f000 fe83 	bl	8004dcc <xTaskCheckForTimeOut>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d123      	bne.n	8004114 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80040cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040ce:	f000 f917 	bl	8004300 <prvIsQueueEmpty>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d017      	beq.n	8004108 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80040d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040da:	3324      	adds	r3, #36	; 0x24
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	4611      	mov	r1, r2
 80040e0:	4618      	mov	r0, r3
 80040e2:	f000 fda9 	bl	8004c38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80040e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040e8:	f000 f8b8 	bl	800425c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80040ec:	f000 fbde 	bl	80048ac <xTaskResumeAll>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d189      	bne.n	800400a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80040f6:	4b10      	ldr	r3, [pc, #64]	; (8004138 <xQueueReceive+0x1bc>)
 80040f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040fc:	601a      	str	r2, [r3, #0]
 80040fe:	f3bf 8f4f 	dsb	sy
 8004102:	f3bf 8f6f 	isb	sy
 8004106:	e780      	b.n	800400a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004108:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800410a:	f000 f8a7 	bl	800425c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800410e:	f000 fbcd 	bl	80048ac <xTaskResumeAll>
 8004112:	e77a      	b.n	800400a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004114:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004116:	f000 f8a1 	bl	800425c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800411a:	f000 fbc7 	bl	80048ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800411e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004120:	f000 f8ee 	bl	8004300 <prvIsQueueEmpty>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	f43f af6f 	beq.w	800400a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800412c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800412e:	4618      	mov	r0, r3
 8004130:	3730      	adds	r7, #48	; 0x30
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	e000ed04 	.word	0xe000ed04

0800413c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004148:	2300      	movs	r3, #0
 800414a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004150:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10d      	bne.n	8004176 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d14d      	bne.n	80041fe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	4618      	mov	r0, r3
 8004168:	f000 ff92 	bl	8005090 <xTaskPriorityDisinherit>
 800416c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	609a      	str	r2, [r3, #8]
 8004174:	e043      	b.n	80041fe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d119      	bne.n	80041b0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6858      	ldr	r0, [r3, #4]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004184:	461a      	mov	r2, r3
 8004186:	68b9      	ldr	r1, [r7, #8]
 8004188:	f001 fff4 	bl	8006174 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	685a      	ldr	r2, [r3, #4]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004194:	441a      	add	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	685a      	ldr	r2, [r3, #4]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d32b      	bcc.n	80041fe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	605a      	str	r2, [r3, #4]
 80041ae:	e026      	b.n	80041fe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	68d8      	ldr	r0, [r3, #12]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b8:	461a      	mov	r2, r3
 80041ba:	68b9      	ldr	r1, [r7, #8]
 80041bc:	f001 ffda 	bl	8006174 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	68da      	ldr	r2, [r3, #12]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c8:	425b      	negs	r3, r3
 80041ca:	441a      	add	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	68da      	ldr	r2, [r3, #12]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d207      	bcs.n	80041ec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	689a      	ldr	r2, [r3, #8]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e4:	425b      	negs	r3, r3
 80041e6:	441a      	add	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d105      	bne.n	80041fe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d002      	beq.n	80041fe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	3b01      	subs	r3, #1
 80041fc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	1c5a      	adds	r2, r3, #1
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004206:	697b      	ldr	r3, [r7, #20]
}
 8004208:	4618      	mov	r0, r3
 800420a:	3718      	adds	r7, #24
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421e:	2b00      	cmp	r3, #0
 8004220:	d018      	beq.n	8004254 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68da      	ldr	r2, [r3, #12]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	441a      	add	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	68da      	ldr	r2, [r3, #12]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	429a      	cmp	r2, r3
 800423a:	d303      	bcc.n	8004244 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	68d9      	ldr	r1, [r3, #12]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424c:	461a      	mov	r2, r3
 800424e:	6838      	ldr	r0, [r7, #0]
 8004250:	f001 ff90 	bl	8006174 <memcpy>
	}
}
 8004254:	bf00      	nop
 8004256:	3708      	adds	r7, #8
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004264:	f001 fc4e 	bl	8005b04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800426e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004270:	e011      	b.n	8004296 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004276:	2b00      	cmp	r3, #0
 8004278:	d012      	beq.n	80042a0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	3324      	adds	r3, #36	; 0x24
 800427e:	4618      	mov	r0, r3
 8004280:	f000 fd2a 	bl	8004cd8 <xTaskRemoveFromEventList>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800428a:	f000 fe01 	bl	8004e90 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800428e:	7bfb      	ldrb	r3, [r7, #15]
 8004290:	3b01      	subs	r3, #1
 8004292:	b2db      	uxtb	r3, r3
 8004294:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800429a:	2b00      	cmp	r3, #0
 800429c:	dce9      	bgt.n	8004272 <prvUnlockQueue+0x16>
 800429e:	e000      	b.n	80042a2 <prvUnlockQueue+0x46>
					break;
 80042a0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	22ff      	movs	r2, #255	; 0xff
 80042a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80042aa:	f001 fc5b 	bl	8005b64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80042ae:	f001 fc29 	bl	8005b04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042b8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80042ba:	e011      	b.n	80042e0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d012      	beq.n	80042ea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	3310      	adds	r3, #16
 80042c8:	4618      	mov	r0, r3
 80042ca:	f000 fd05 	bl	8004cd8 <xTaskRemoveFromEventList>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80042d4:	f000 fddc 	bl	8004e90 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80042d8:	7bbb      	ldrb	r3, [r7, #14]
 80042da:	3b01      	subs	r3, #1
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80042e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	dce9      	bgt.n	80042bc <prvUnlockQueue+0x60>
 80042e8:	e000      	b.n	80042ec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80042ea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	22ff      	movs	r2, #255	; 0xff
 80042f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80042f4:	f001 fc36 	bl	8005b64 <vPortExitCritical>
}
 80042f8:	bf00      	nop
 80042fa:	3710      	adds	r7, #16
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004308:	f001 fbfc 	bl	8005b04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004310:	2b00      	cmp	r3, #0
 8004312:	d102      	bne.n	800431a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004314:	2301      	movs	r3, #1
 8004316:	60fb      	str	r3, [r7, #12]
 8004318:	e001      	b.n	800431e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800431a:	2300      	movs	r3, #0
 800431c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800431e:	f001 fc21 	bl	8005b64 <vPortExitCritical>

	return xReturn;
 8004322:	68fb      	ldr	r3, [r7, #12]
}
 8004324:	4618      	mov	r0, r3
 8004326:	3710      	adds	r7, #16
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004334:	f001 fbe6 	bl	8005b04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004340:	429a      	cmp	r2, r3
 8004342:	d102      	bne.n	800434a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004344:	2301      	movs	r3, #1
 8004346:	60fb      	str	r3, [r7, #12]
 8004348:	e001      	b.n	800434e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800434a:	2300      	movs	r3, #0
 800434c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800434e:	f001 fc09 	bl	8005b64 <vPortExitCritical>

	return xReturn;
 8004352:	68fb      	ldr	r3, [r7, #12]
}
 8004354:	4618      	mov	r0, r3
 8004356:	3710      	adds	r7, #16
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004366:	2300      	movs	r3, #0
 8004368:	60fb      	str	r3, [r7, #12]
 800436a:	e014      	b.n	8004396 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800436c:	4a0f      	ldr	r2, [pc, #60]	; (80043ac <vQueueAddToRegistry+0x50>)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d10b      	bne.n	8004390 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004378:	490c      	ldr	r1, [pc, #48]	; (80043ac <vQueueAddToRegistry+0x50>)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	683a      	ldr	r2, [r7, #0]
 800437e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004382:	4a0a      	ldr	r2, [pc, #40]	; (80043ac <vQueueAddToRegistry+0x50>)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	4413      	add	r3, r2
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800438e:	e006      	b.n	800439e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	3301      	adds	r3, #1
 8004394:	60fb      	str	r3, [r7, #12]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2b07      	cmp	r3, #7
 800439a:	d9e7      	bls.n	800436c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800439c:	bf00      	nop
 800439e:	bf00      	nop
 80043a0:	3714      	adds	r7, #20
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	20000c8c 	.word	0x20000c8c

080043b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80043c0:	f001 fba0 	bl	8005b04 <vPortEnterCritical>
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043ca:	b25b      	sxtb	r3, r3
 80043cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d0:	d103      	bne.n	80043da <vQueueWaitForMessageRestricted+0x2a>
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043e0:	b25b      	sxtb	r3, r3
 80043e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e6:	d103      	bne.n	80043f0 <vQueueWaitForMessageRestricted+0x40>
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043f0:	f001 fbb8 	bl	8005b64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d106      	bne.n	800440a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	3324      	adds	r3, #36	; 0x24
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	68b9      	ldr	r1, [r7, #8]
 8004404:	4618      	mov	r0, r3
 8004406:	f000 fc3b 	bl	8004c80 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800440a:	6978      	ldr	r0, [r7, #20]
 800440c:	f7ff ff26 	bl	800425c <prvUnlockQueue>
	}
 8004410:	bf00      	nop
 8004412:	3718      	adds	r7, #24
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004418:	b580      	push	{r7, lr}
 800441a:	b08e      	sub	sp, #56	; 0x38
 800441c:	af04      	add	r7, sp, #16
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
 8004424:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004428:	2b00      	cmp	r3, #0
 800442a:	d10a      	bne.n	8004442 <xTaskCreateStatic+0x2a>
	__asm volatile
 800442c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004430:	f383 8811 	msr	BASEPRI, r3
 8004434:	f3bf 8f6f 	isb	sy
 8004438:	f3bf 8f4f 	dsb	sy
 800443c:	623b      	str	r3, [r7, #32]
}
 800443e:	bf00      	nop
 8004440:	e7fe      	b.n	8004440 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004444:	2b00      	cmp	r3, #0
 8004446:	d10a      	bne.n	800445e <xTaskCreateStatic+0x46>
	__asm volatile
 8004448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444c:	f383 8811 	msr	BASEPRI, r3
 8004450:	f3bf 8f6f 	isb	sy
 8004454:	f3bf 8f4f 	dsb	sy
 8004458:	61fb      	str	r3, [r7, #28]
}
 800445a:	bf00      	nop
 800445c:	e7fe      	b.n	800445c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800445e:	235c      	movs	r3, #92	; 0x5c
 8004460:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	2b5c      	cmp	r3, #92	; 0x5c
 8004466:	d00a      	beq.n	800447e <xTaskCreateStatic+0x66>
	__asm volatile
 8004468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800446c:	f383 8811 	msr	BASEPRI, r3
 8004470:	f3bf 8f6f 	isb	sy
 8004474:	f3bf 8f4f 	dsb	sy
 8004478:	61bb      	str	r3, [r7, #24]
}
 800447a:	bf00      	nop
 800447c:	e7fe      	b.n	800447c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800447e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004482:	2b00      	cmp	r3, #0
 8004484:	d01e      	beq.n	80044c4 <xTaskCreateStatic+0xac>
 8004486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004488:	2b00      	cmp	r3, #0
 800448a:	d01b      	beq.n	80044c4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800448c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800448e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004492:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004494:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004498:	2202      	movs	r2, #2
 800449a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800449e:	2300      	movs	r3, #0
 80044a0:	9303      	str	r3, [sp, #12]
 80044a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a4:	9302      	str	r3, [sp, #8]
 80044a6:	f107 0314 	add.w	r3, r7, #20
 80044aa:	9301      	str	r3, [sp, #4]
 80044ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ae:	9300      	str	r3, [sp, #0]
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	68b9      	ldr	r1, [r7, #8]
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	f000 f850 	bl	800455c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80044bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80044be:	f000 f8dd 	bl	800467c <prvAddNewTaskToReadyList>
 80044c2:	e001      	b.n	80044c8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80044c4:	2300      	movs	r3, #0
 80044c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80044c8:	697b      	ldr	r3, [r7, #20]
	}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3728      	adds	r7, #40	; 0x28
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b08c      	sub	sp, #48	; 0x30
 80044d6:	af04      	add	r7, sp, #16
 80044d8:	60f8      	str	r0, [r7, #12]
 80044da:	60b9      	str	r1, [r7, #8]
 80044dc:	603b      	str	r3, [r7, #0]
 80044de:	4613      	mov	r3, r2
 80044e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80044e2:	88fb      	ldrh	r3, [r7, #6]
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4618      	mov	r0, r3
 80044e8:	f001 fc2e 	bl	8005d48 <pvPortMalloc>
 80044ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00e      	beq.n	8004512 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80044f4:	205c      	movs	r0, #92	; 0x5c
 80044f6:	f001 fc27 	bl	8005d48 <pvPortMalloc>
 80044fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d003      	beq.n	800450a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	631a      	str	r2, [r3, #48]	; 0x30
 8004508:	e005      	b.n	8004516 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800450a:	6978      	ldr	r0, [r7, #20]
 800450c:	f001 fce8 	bl	8005ee0 <vPortFree>
 8004510:	e001      	b.n	8004516 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004512:	2300      	movs	r3, #0
 8004514:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d017      	beq.n	800454c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004524:	88fa      	ldrh	r2, [r7, #6]
 8004526:	2300      	movs	r3, #0
 8004528:	9303      	str	r3, [sp, #12]
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	9302      	str	r3, [sp, #8]
 800452e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004530:	9301      	str	r3, [sp, #4]
 8004532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004534:	9300      	str	r3, [sp, #0]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	68b9      	ldr	r1, [r7, #8]
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	f000 f80e 	bl	800455c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004540:	69f8      	ldr	r0, [r7, #28]
 8004542:	f000 f89b 	bl	800467c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004546:	2301      	movs	r3, #1
 8004548:	61bb      	str	r3, [r7, #24]
 800454a:	e002      	b.n	8004552 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800454c:	f04f 33ff 	mov.w	r3, #4294967295
 8004550:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004552:	69bb      	ldr	r3, [r7, #24]
	}
 8004554:	4618      	mov	r0, r3
 8004556:	3720      	adds	r7, #32
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b088      	sub	sp, #32
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
 8004568:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800456a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	461a      	mov	r2, r3
 8004574:	21a5      	movs	r1, #165	; 0xa5
 8004576:	f001 fdd1 	bl	800611c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800457a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004584:	3b01      	subs	r3, #1
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4413      	add	r3, r2
 800458a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	f023 0307 	bic.w	r3, r3, #7
 8004592:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	f003 0307 	and.w	r3, r3, #7
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00a      	beq.n	80045b4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800459e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a2:	f383 8811 	msr	BASEPRI, r3
 80045a6:	f3bf 8f6f 	isb	sy
 80045aa:	f3bf 8f4f 	dsb	sy
 80045ae:	617b      	str	r3, [r7, #20]
}
 80045b0:	bf00      	nop
 80045b2:	e7fe      	b.n	80045b2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d01f      	beq.n	80045fa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80045ba:	2300      	movs	r3, #0
 80045bc:	61fb      	str	r3, [r7, #28]
 80045be:	e012      	b.n	80045e6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80045c0:	68ba      	ldr	r2, [r7, #8]
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	4413      	add	r3, r2
 80045c6:	7819      	ldrb	r1, [r3, #0]
 80045c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	4413      	add	r3, r2
 80045ce:	3334      	adds	r3, #52	; 0x34
 80045d0:	460a      	mov	r2, r1
 80045d2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80045d4:	68ba      	ldr	r2, [r7, #8]
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	4413      	add	r3, r2
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d006      	beq.n	80045ee <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	3301      	adds	r3, #1
 80045e4:	61fb      	str	r3, [r7, #28]
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	2b0f      	cmp	r3, #15
 80045ea:	d9e9      	bls.n	80045c0 <prvInitialiseNewTask+0x64>
 80045ec:	e000      	b.n	80045f0 <prvInitialiseNewTask+0x94>
			{
				break;
 80045ee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80045f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045f8:	e003      	b.n	8004602 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80045fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004604:	2b37      	cmp	r3, #55	; 0x37
 8004606:	d901      	bls.n	800460c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004608:	2337      	movs	r3, #55	; 0x37
 800460a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800460c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004610:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004614:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004616:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461a:	2200      	movs	r2, #0
 800461c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800461e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004620:	3304      	adds	r3, #4
 8004622:	4618      	mov	r0, r3
 8004624:	f7ff f978 	bl	8003918 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462a:	3318      	adds	r3, #24
 800462c:	4618      	mov	r0, r3
 800462e:	f7ff f973 	bl	8003918 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004636:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800463e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004640:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004644:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004646:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464a:	2200      	movs	r2, #0
 800464c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800464e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004650:	2200      	movs	r2, #0
 8004652:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004656:	683a      	ldr	r2, [r7, #0]
 8004658:	68f9      	ldr	r1, [r7, #12]
 800465a:	69b8      	ldr	r0, [r7, #24]
 800465c:	f001 f928 	bl	80058b0 <pxPortInitialiseStack>
 8004660:	4602      	mov	r2, r0
 8004662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004664:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004668:	2b00      	cmp	r3, #0
 800466a:	d002      	beq.n	8004672 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800466c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800466e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004670:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004672:	bf00      	nop
 8004674:	3720      	adds	r7, #32
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
	...

0800467c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004684:	f001 fa3e 	bl	8005b04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004688:	4b2d      	ldr	r3, [pc, #180]	; (8004740 <prvAddNewTaskToReadyList+0xc4>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	3301      	adds	r3, #1
 800468e:	4a2c      	ldr	r2, [pc, #176]	; (8004740 <prvAddNewTaskToReadyList+0xc4>)
 8004690:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004692:	4b2c      	ldr	r3, [pc, #176]	; (8004744 <prvAddNewTaskToReadyList+0xc8>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d109      	bne.n	80046ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800469a:	4a2a      	ldr	r2, [pc, #168]	; (8004744 <prvAddNewTaskToReadyList+0xc8>)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80046a0:	4b27      	ldr	r3, [pc, #156]	; (8004740 <prvAddNewTaskToReadyList+0xc4>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d110      	bne.n	80046ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80046a8:	f000 fc16 	bl	8004ed8 <prvInitialiseTaskLists>
 80046ac:	e00d      	b.n	80046ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80046ae:	4b26      	ldr	r3, [pc, #152]	; (8004748 <prvAddNewTaskToReadyList+0xcc>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d109      	bne.n	80046ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80046b6:	4b23      	ldr	r3, [pc, #140]	; (8004744 <prvAddNewTaskToReadyList+0xc8>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d802      	bhi.n	80046ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80046c4:	4a1f      	ldr	r2, [pc, #124]	; (8004744 <prvAddNewTaskToReadyList+0xc8>)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80046ca:	4b20      	ldr	r3, [pc, #128]	; (800474c <prvAddNewTaskToReadyList+0xd0>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	3301      	adds	r3, #1
 80046d0:	4a1e      	ldr	r2, [pc, #120]	; (800474c <prvAddNewTaskToReadyList+0xd0>)
 80046d2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80046d4:	4b1d      	ldr	r3, [pc, #116]	; (800474c <prvAddNewTaskToReadyList+0xd0>)
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046e0:	4b1b      	ldr	r3, [pc, #108]	; (8004750 <prvAddNewTaskToReadyList+0xd4>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d903      	bls.n	80046f0 <prvAddNewTaskToReadyList+0x74>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ec:	4a18      	ldr	r2, [pc, #96]	; (8004750 <prvAddNewTaskToReadyList+0xd4>)
 80046ee:	6013      	str	r3, [r2, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046f4:	4613      	mov	r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4413      	add	r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	4a15      	ldr	r2, [pc, #84]	; (8004754 <prvAddNewTaskToReadyList+0xd8>)
 80046fe:	441a      	add	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	3304      	adds	r3, #4
 8004704:	4619      	mov	r1, r3
 8004706:	4610      	mov	r0, r2
 8004708:	f7ff f913 	bl	8003932 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800470c:	f001 fa2a 	bl	8005b64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004710:	4b0d      	ldr	r3, [pc, #52]	; (8004748 <prvAddNewTaskToReadyList+0xcc>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00e      	beq.n	8004736 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004718:	4b0a      	ldr	r3, [pc, #40]	; (8004744 <prvAddNewTaskToReadyList+0xc8>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004722:	429a      	cmp	r2, r3
 8004724:	d207      	bcs.n	8004736 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004726:	4b0c      	ldr	r3, [pc, #48]	; (8004758 <prvAddNewTaskToReadyList+0xdc>)
 8004728:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800472c:	601a      	str	r2, [r3, #0]
 800472e:	f3bf 8f4f 	dsb	sy
 8004732:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004736:	bf00      	nop
 8004738:	3708      	adds	r7, #8
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	200011a0 	.word	0x200011a0
 8004744:	20000ccc 	.word	0x20000ccc
 8004748:	200011ac 	.word	0x200011ac
 800474c:	200011bc 	.word	0x200011bc
 8004750:	200011a8 	.word	0x200011a8
 8004754:	20000cd0 	.word	0x20000cd0
 8004758:	e000ed04 	.word	0xe000ed04

0800475c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004764:	2300      	movs	r3, #0
 8004766:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d017      	beq.n	800479e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800476e:	4b13      	ldr	r3, [pc, #76]	; (80047bc <vTaskDelay+0x60>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00a      	beq.n	800478c <vTaskDelay+0x30>
	__asm volatile
 8004776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800477a:	f383 8811 	msr	BASEPRI, r3
 800477e:	f3bf 8f6f 	isb	sy
 8004782:	f3bf 8f4f 	dsb	sy
 8004786:	60bb      	str	r3, [r7, #8]
}
 8004788:	bf00      	nop
 800478a:	e7fe      	b.n	800478a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800478c:	f000 f880 	bl	8004890 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004790:	2100      	movs	r1, #0
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 fcea 	bl	800516c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004798:	f000 f888 	bl	80048ac <xTaskResumeAll>
 800479c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d107      	bne.n	80047b4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80047a4:	4b06      	ldr	r3, [pc, #24]	; (80047c0 <vTaskDelay+0x64>)
 80047a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047aa:	601a      	str	r2, [r3, #0]
 80047ac:	f3bf 8f4f 	dsb	sy
 80047b0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80047b4:	bf00      	nop
 80047b6:	3710      	adds	r7, #16
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	200011c8 	.word	0x200011c8
 80047c0:	e000ed04 	.word	0xe000ed04

080047c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b08a      	sub	sp, #40	; 0x28
 80047c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80047ca:	2300      	movs	r3, #0
 80047cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80047ce:	2300      	movs	r3, #0
 80047d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80047d2:	463a      	mov	r2, r7
 80047d4:	1d39      	adds	r1, r7, #4
 80047d6:	f107 0308 	add.w	r3, r7, #8
 80047da:	4618      	mov	r0, r3
 80047dc:	f7ff f848 	bl	8003870 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80047e0:	6839      	ldr	r1, [r7, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	68ba      	ldr	r2, [r7, #8]
 80047e6:	9202      	str	r2, [sp, #8]
 80047e8:	9301      	str	r3, [sp, #4]
 80047ea:	2300      	movs	r3, #0
 80047ec:	9300      	str	r3, [sp, #0]
 80047ee:	2300      	movs	r3, #0
 80047f0:	460a      	mov	r2, r1
 80047f2:	4921      	ldr	r1, [pc, #132]	; (8004878 <vTaskStartScheduler+0xb4>)
 80047f4:	4821      	ldr	r0, [pc, #132]	; (800487c <vTaskStartScheduler+0xb8>)
 80047f6:	f7ff fe0f 	bl	8004418 <xTaskCreateStatic>
 80047fa:	4603      	mov	r3, r0
 80047fc:	4a20      	ldr	r2, [pc, #128]	; (8004880 <vTaskStartScheduler+0xbc>)
 80047fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004800:	4b1f      	ldr	r3, [pc, #124]	; (8004880 <vTaskStartScheduler+0xbc>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d002      	beq.n	800480e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004808:	2301      	movs	r3, #1
 800480a:	617b      	str	r3, [r7, #20]
 800480c:	e001      	b.n	8004812 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800480e:	2300      	movs	r3, #0
 8004810:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d102      	bne.n	800481e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004818:	f000 fcfc 	bl	8005214 <xTimerCreateTimerTask>
 800481c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d116      	bne.n	8004852 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004828:	f383 8811 	msr	BASEPRI, r3
 800482c:	f3bf 8f6f 	isb	sy
 8004830:	f3bf 8f4f 	dsb	sy
 8004834:	613b      	str	r3, [r7, #16]
}
 8004836:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004838:	4b12      	ldr	r3, [pc, #72]	; (8004884 <vTaskStartScheduler+0xc0>)
 800483a:	f04f 32ff 	mov.w	r2, #4294967295
 800483e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004840:	4b11      	ldr	r3, [pc, #68]	; (8004888 <vTaskStartScheduler+0xc4>)
 8004842:	2201      	movs	r2, #1
 8004844:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004846:	4b11      	ldr	r3, [pc, #68]	; (800488c <vTaskStartScheduler+0xc8>)
 8004848:	2200      	movs	r2, #0
 800484a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800484c:	f001 f8b8 	bl	80059c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004850:	e00e      	b.n	8004870 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004858:	d10a      	bne.n	8004870 <vTaskStartScheduler+0xac>
	__asm volatile
 800485a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485e:	f383 8811 	msr	BASEPRI, r3
 8004862:	f3bf 8f6f 	isb	sy
 8004866:	f3bf 8f4f 	dsb	sy
 800486a:	60fb      	str	r3, [r7, #12]
}
 800486c:	bf00      	nop
 800486e:	e7fe      	b.n	800486e <vTaskStartScheduler+0xaa>
}
 8004870:	bf00      	nop
 8004872:	3718      	adds	r7, #24
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	080061c4 	.word	0x080061c4
 800487c:	08004ea9 	.word	0x08004ea9
 8004880:	200011c4 	.word	0x200011c4
 8004884:	200011c0 	.word	0x200011c0
 8004888:	200011ac 	.word	0x200011ac
 800488c:	200011a4 	.word	0x200011a4

08004890 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004890:	b480      	push	{r7}
 8004892:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004894:	4b04      	ldr	r3, [pc, #16]	; (80048a8 <vTaskSuspendAll+0x18>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	3301      	adds	r3, #1
 800489a:	4a03      	ldr	r2, [pc, #12]	; (80048a8 <vTaskSuspendAll+0x18>)
 800489c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800489e:	bf00      	nop
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr
 80048a8:	200011c8 	.word	0x200011c8

080048ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80048b2:	2300      	movs	r3, #0
 80048b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80048b6:	2300      	movs	r3, #0
 80048b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80048ba:	4b42      	ldr	r3, [pc, #264]	; (80049c4 <xTaskResumeAll+0x118>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10a      	bne.n	80048d8 <xTaskResumeAll+0x2c>
	__asm volatile
 80048c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c6:	f383 8811 	msr	BASEPRI, r3
 80048ca:	f3bf 8f6f 	isb	sy
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	603b      	str	r3, [r7, #0]
}
 80048d4:	bf00      	nop
 80048d6:	e7fe      	b.n	80048d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80048d8:	f001 f914 	bl	8005b04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80048dc:	4b39      	ldr	r3, [pc, #228]	; (80049c4 <xTaskResumeAll+0x118>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	3b01      	subs	r3, #1
 80048e2:	4a38      	ldr	r2, [pc, #224]	; (80049c4 <xTaskResumeAll+0x118>)
 80048e4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048e6:	4b37      	ldr	r3, [pc, #220]	; (80049c4 <xTaskResumeAll+0x118>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d162      	bne.n	80049b4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80048ee:	4b36      	ldr	r3, [pc, #216]	; (80049c8 <xTaskResumeAll+0x11c>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d05e      	beq.n	80049b4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048f6:	e02f      	b.n	8004958 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048f8:	4b34      	ldr	r3, [pc, #208]	; (80049cc <xTaskResumeAll+0x120>)
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	3318      	adds	r3, #24
 8004904:	4618      	mov	r0, r3
 8004906:	f7ff f871 	bl	80039ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	3304      	adds	r3, #4
 800490e:	4618      	mov	r0, r3
 8004910:	f7ff f86c 	bl	80039ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004918:	4b2d      	ldr	r3, [pc, #180]	; (80049d0 <xTaskResumeAll+0x124>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	429a      	cmp	r2, r3
 800491e:	d903      	bls.n	8004928 <xTaskResumeAll+0x7c>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004924:	4a2a      	ldr	r2, [pc, #168]	; (80049d0 <xTaskResumeAll+0x124>)
 8004926:	6013      	str	r3, [r2, #0]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800492c:	4613      	mov	r3, r2
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	4413      	add	r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4a27      	ldr	r2, [pc, #156]	; (80049d4 <xTaskResumeAll+0x128>)
 8004936:	441a      	add	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	3304      	adds	r3, #4
 800493c:	4619      	mov	r1, r3
 800493e:	4610      	mov	r0, r2
 8004940:	f7fe fff7 	bl	8003932 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004948:	4b23      	ldr	r3, [pc, #140]	; (80049d8 <xTaskResumeAll+0x12c>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494e:	429a      	cmp	r2, r3
 8004950:	d302      	bcc.n	8004958 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004952:	4b22      	ldr	r3, [pc, #136]	; (80049dc <xTaskResumeAll+0x130>)
 8004954:	2201      	movs	r2, #1
 8004956:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004958:	4b1c      	ldr	r3, [pc, #112]	; (80049cc <xTaskResumeAll+0x120>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1cb      	bne.n	80048f8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d001      	beq.n	800496a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004966:	f000 fb55 	bl	8005014 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800496a:	4b1d      	ldr	r3, [pc, #116]	; (80049e0 <xTaskResumeAll+0x134>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d010      	beq.n	8004998 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004976:	f000 f847 	bl	8004a08 <xTaskIncrementTick>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d002      	beq.n	8004986 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004980:	4b16      	ldr	r3, [pc, #88]	; (80049dc <xTaskResumeAll+0x130>)
 8004982:	2201      	movs	r2, #1
 8004984:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	3b01      	subs	r3, #1
 800498a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1f1      	bne.n	8004976 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004992:	4b13      	ldr	r3, [pc, #76]	; (80049e0 <xTaskResumeAll+0x134>)
 8004994:	2200      	movs	r2, #0
 8004996:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004998:	4b10      	ldr	r3, [pc, #64]	; (80049dc <xTaskResumeAll+0x130>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d009      	beq.n	80049b4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80049a0:	2301      	movs	r3, #1
 80049a2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80049a4:	4b0f      	ldr	r3, [pc, #60]	; (80049e4 <xTaskResumeAll+0x138>)
 80049a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049aa:	601a      	str	r2, [r3, #0]
 80049ac:	f3bf 8f4f 	dsb	sy
 80049b0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80049b4:	f001 f8d6 	bl	8005b64 <vPortExitCritical>

	return xAlreadyYielded;
 80049b8:	68bb      	ldr	r3, [r7, #8]
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	200011c8 	.word	0x200011c8
 80049c8:	200011a0 	.word	0x200011a0
 80049cc:	20001160 	.word	0x20001160
 80049d0:	200011a8 	.word	0x200011a8
 80049d4:	20000cd0 	.word	0x20000cd0
 80049d8:	20000ccc 	.word	0x20000ccc
 80049dc:	200011b4 	.word	0x200011b4
 80049e0:	200011b0 	.word	0x200011b0
 80049e4:	e000ed04 	.word	0xe000ed04

080049e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80049ee:	4b05      	ldr	r3, [pc, #20]	; (8004a04 <xTaskGetTickCount+0x1c>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80049f4:	687b      	ldr	r3, [r7, #4]
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	370c      	adds	r7, #12
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	200011a4 	.word	0x200011a4

08004a08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b086      	sub	sp, #24
 8004a0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a12:	4b4f      	ldr	r3, [pc, #316]	; (8004b50 <xTaskIncrementTick+0x148>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	f040 808f 	bne.w	8004b3a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004a1c:	4b4d      	ldr	r3, [pc, #308]	; (8004b54 <xTaskIncrementTick+0x14c>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	3301      	adds	r3, #1
 8004a22:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004a24:	4a4b      	ldr	r2, [pc, #300]	; (8004b54 <xTaskIncrementTick+0x14c>)
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d120      	bne.n	8004a72 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004a30:	4b49      	ldr	r3, [pc, #292]	; (8004b58 <xTaskIncrementTick+0x150>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00a      	beq.n	8004a50 <xTaskIncrementTick+0x48>
	__asm volatile
 8004a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a3e:	f383 8811 	msr	BASEPRI, r3
 8004a42:	f3bf 8f6f 	isb	sy
 8004a46:	f3bf 8f4f 	dsb	sy
 8004a4a:	603b      	str	r3, [r7, #0]
}
 8004a4c:	bf00      	nop
 8004a4e:	e7fe      	b.n	8004a4e <xTaskIncrementTick+0x46>
 8004a50:	4b41      	ldr	r3, [pc, #260]	; (8004b58 <xTaskIncrementTick+0x150>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	60fb      	str	r3, [r7, #12]
 8004a56:	4b41      	ldr	r3, [pc, #260]	; (8004b5c <xTaskIncrementTick+0x154>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a3f      	ldr	r2, [pc, #252]	; (8004b58 <xTaskIncrementTick+0x150>)
 8004a5c:	6013      	str	r3, [r2, #0]
 8004a5e:	4a3f      	ldr	r2, [pc, #252]	; (8004b5c <xTaskIncrementTick+0x154>)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6013      	str	r3, [r2, #0]
 8004a64:	4b3e      	ldr	r3, [pc, #248]	; (8004b60 <xTaskIncrementTick+0x158>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	3301      	adds	r3, #1
 8004a6a:	4a3d      	ldr	r2, [pc, #244]	; (8004b60 <xTaskIncrementTick+0x158>)
 8004a6c:	6013      	str	r3, [r2, #0]
 8004a6e:	f000 fad1 	bl	8005014 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004a72:	4b3c      	ldr	r3, [pc, #240]	; (8004b64 <xTaskIncrementTick+0x15c>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d349      	bcc.n	8004b10 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a7c:	4b36      	ldr	r3, [pc, #216]	; (8004b58 <xTaskIncrementTick+0x150>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d104      	bne.n	8004a90 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a86:	4b37      	ldr	r3, [pc, #220]	; (8004b64 <xTaskIncrementTick+0x15c>)
 8004a88:	f04f 32ff 	mov.w	r2, #4294967295
 8004a8c:	601a      	str	r2, [r3, #0]
					break;
 8004a8e:	e03f      	b.n	8004b10 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a90:	4b31      	ldr	r3, [pc, #196]	; (8004b58 <xTaskIncrementTick+0x150>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004aa0:	693a      	ldr	r2, [r7, #16]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d203      	bcs.n	8004ab0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004aa8:	4a2e      	ldr	r2, [pc, #184]	; (8004b64 <xTaskIncrementTick+0x15c>)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004aae:	e02f      	b.n	8004b10 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	3304      	adds	r3, #4
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7fe ff99 	bl	80039ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d004      	beq.n	8004acc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	3318      	adds	r3, #24
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7fe ff90 	bl	80039ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ad0:	4b25      	ldr	r3, [pc, #148]	; (8004b68 <xTaskIncrementTick+0x160>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d903      	bls.n	8004ae0 <xTaskIncrementTick+0xd8>
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004adc:	4a22      	ldr	r2, [pc, #136]	; (8004b68 <xTaskIncrementTick+0x160>)
 8004ade:	6013      	str	r3, [r2, #0]
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	4413      	add	r3, r2
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	4a1f      	ldr	r2, [pc, #124]	; (8004b6c <xTaskIncrementTick+0x164>)
 8004aee:	441a      	add	r2, r3
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	3304      	adds	r3, #4
 8004af4:	4619      	mov	r1, r3
 8004af6:	4610      	mov	r0, r2
 8004af8:	f7fe ff1b 	bl	8003932 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b00:	4b1b      	ldr	r3, [pc, #108]	; (8004b70 <xTaskIncrementTick+0x168>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d3b8      	bcc.n	8004a7c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b0e:	e7b5      	b.n	8004a7c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004b10:	4b17      	ldr	r3, [pc, #92]	; (8004b70 <xTaskIncrementTick+0x168>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b16:	4915      	ldr	r1, [pc, #84]	; (8004b6c <xTaskIncrementTick+0x164>)
 8004b18:	4613      	mov	r3, r2
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	4413      	add	r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	440b      	add	r3, r1
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d901      	bls.n	8004b2c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004b2c:	4b11      	ldr	r3, [pc, #68]	; (8004b74 <xTaskIncrementTick+0x16c>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d007      	beq.n	8004b44 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004b34:	2301      	movs	r3, #1
 8004b36:	617b      	str	r3, [r7, #20]
 8004b38:	e004      	b.n	8004b44 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004b3a:	4b0f      	ldr	r3, [pc, #60]	; (8004b78 <xTaskIncrementTick+0x170>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	3301      	adds	r3, #1
 8004b40:	4a0d      	ldr	r2, [pc, #52]	; (8004b78 <xTaskIncrementTick+0x170>)
 8004b42:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004b44:	697b      	ldr	r3, [r7, #20]
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3718      	adds	r7, #24
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	200011c8 	.word	0x200011c8
 8004b54:	200011a4 	.word	0x200011a4
 8004b58:	20001158 	.word	0x20001158
 8004b5c:	2000115c 	.word	0x2000115c
 8004b60:	200011b8 	.word	0x200011b8
 8004b64:	200011c0 	.word	0x200011c0
 8004b68:	200011a8 	.word	0x200011a8
 8004b6c:	20000cd0 	.word	0x20000cd0
 8004b70:	20000ccc 	.word	0x20000ccc
 8004b74:	200011b4 	.word	0x200011b4
 8004b78:	200011b0 	.word	0x200011b0

08004b7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004b82:	4b28      	ldr	r3, [pc, #160]	; (8004c24 <vTaskSwitchContext+0xa8>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d003      	beq.n	8004b92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004b8a:	4b27      	ldr	r3, [pc, #156]	; (8004c28 <vTaskSwitchContext+0xac>)
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004b90:	e041      	b.n	8004c16 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004b92:	4b25      	ldr	r3, [pc, #148]	; (8004c28 <vTaskSwitchContext+0xac>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b98:	4b24      	ldr	r3, [pc, #144]	; (8004c2c <vTaskSwitchContext+0xb0>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	60fb      	str	r3, [r7, #12]
 8004b9e:	e010      	b.n	8004bc2 <vTaskSwitchContext+0x46>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10a      	bne.n	8004bbc <vTaskSwitchContext+0x40>
	__asm volatile
 8004ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004baa:	f383 8811 	msr	BASEPRI, r3
 8004bae:	f3bf 8f6f 	isb	sy
 8004bb2:	f3bf 8f4f 	dsb	sy
 8004bb6:	607b      	str	r3, [r7, #4]
}
 8004bb8:	bf00      	nop
 8004bba:	e7fe      	b.n	8004bba <vTaskSwitchContext+0x3e>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	60fb      	str	r3, [r7, #12]
 8004bc2:	491b      	ldr	r1, [pc, #108]	; (8004c30 <vTaskSwitchContext+0xb4>)
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	4413      	add	r3, r2
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	440b      	add	r3, r1
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d0e4      	beq.n	8004ba0 <vTaskSwitchContext+0x24>
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	4413      	add	r3, r2
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	4a13      	ldr	r2, [pc, #76]	; (8004c30 <vTaskSwitchContext+0xb4>)
 8004be2:	4413      	add	r3, r2
 8004be4:	60bb      	str	r3, [r7, #8]
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	685a      	ldr	r2, [r3, #4]
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	605a      	str	r2, [r3, #4]
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	685a      	ldr	r2, [r3, #4]
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	3308      	adds	r3, #8
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d104      	bne.n	8004c06 <vTaskSwitchContext+0x8a>
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	685a      	ldr	r2, [r3, #4]
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	605a      	str	r2, [r3, #4]
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	4a09      	ldr	r2, [pc, #36]	; (8004c34 <vTaskSwitchContext+0xb8>)
 8004c0e:	6013      	str	r3, [r2, #0]
 8004c10:	4a06      	ldr	r2, [pc, #24]	; (8004c2c <vTaskSwitchContext+0xb0>)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6013      	str	r3, [r2, #0]
}
 8004c16:	bf00      	nop
 8004c18:	3714      	adds	r7, #20
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	200011c8 	.word	0x200011c8
 8004c28:	200011b4 	.word	0x200011b4
 8004c2c:	200011a8 	.word	0x200011a8
 8004c30:	20000cd0 	.word	0x20000cd0
 8004c34:	20000ccc 	.word	0x20000ccc

08004c38 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d10a      	bne.n	8004c5e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c4c:	f383 8811 	msr	BASEPRI, r3
 8004c50:	f3bf 8f6f 	isb	sy
 8004c54:	f3bf 8f4f 	dsb	sy
 8004c58:	60fb      	str	r3, [r7, #12]
}
 8004c5a:	bf00      	nop
 8004c5c:	e7fe      	b.n	8004c5c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c5e:	4b07      	ldr	r3, [pc, #28]	; (8004c7c <vTaskPlaceOnEventList+0x44>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	3318      	adds	r3, #24
 8004c64:	4619      	mov	r1, r3
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f7fe fe87 	bl	800397a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004c6c:	2101      	movs	r1, #1
 8004c6e:	6838      	ldr	r0, [r7, #0]
 8004c70:	f000 fa7c 	bl	800516c <prvAddCurrentTaskToDelayedList>
}
 8004c74:	bf00      	nop
 8004c76:	3710      	adds	r7, #16
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	20000ccc 	.word	0x20000ccc

08004c80 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b086      	sub	sp, #24
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d10a      	bne.n	8004ca8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c96:	f383 8811 	msr	BASEPRI, r3
 8004c9a:	f3bf 8f6f 	isb	sy
 8004c9e:	f3bf 8f4f 	dsb	sy
 8004ca2:	617b      	str	r3, [r7, #20]
}
 8004ca4:	bf00      	nop
 8004ca6:	e7fe      	b.n	8004ca6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ca8:	4b0a      	ldr	r3, [pc, #40]	; (8004cd4 <vTaskPlaceOnEventListRestricted+0x54>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	3318      	adds	r3, #24
 8004cae:	4619      	mov	r1, r3
 8004cb0:	68f8      	ldr	r0, [r7, #12]
 8004cb2:	f7fe fe3e 	bl	8003932 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d002      	beq.n	8004cc2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8004cc0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004cc2:	6879      	ldr	r1, [r7, #4]
 8004cc4:	68b8      	ldr	r0, [r7, #8]
 8004cc6:	f000 fa51 	bl	800516c <prvAddCurrentTaskToDelayedList>
	}
 8004cca:	bf00      	nop
 8004ccc:	3718      	adds	r7, #24
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	20000ccc 	.word	0x20000ccc

08004cd8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b086      	sub	sp, #24
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d10a      	bne.n	8004d04 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf2:	f383 8811 	msr	BASEPRI, r3
 8004cf6:	f3bf 8f6f 	isb	sy
 8004cfa:	f3bf 8f4f 	dsb	sy
 8004cfe:	60fb      	str	r3, [r7, #12]
}
 8004d00:	bf00      	nop
 8004d02:	e7fe      	b.n	8004d02 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	3318      	adds	r3, #24
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f7fe fe6f 	bl	80039ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d0e:	4b1e      	ldr	r3, [pc, #120]	; (8004d88 <xTaskRemoveFromEventList+0xb0>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d11d      	bne.n	8004d52 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	3304      	adds	r3, #4
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7fe fe66 	bl	80039ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d24:	4b19      	ldr	r3, [pc, #100]	; (8004d8c <xTaskRemoveFromEventList+0xb4>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d903      	bls.n	8004d34 <xTaskRemoveFromEventList+0x5c>
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d30:	4a16      	ldr	r2, [pc, #88]	; (8004d8c <xTaskRemoveFromEventList+0xb4>)
 8004d32:	6013      	str	r3, [r2, #0]
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d38:	4613      	mov	r3, r2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	4413      	add	r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4a13      	ldr	r2, [pc, #76]	; (8004d90 <xTaskRemoveFromEventList+0xb8>)
 8004d42:	441a      	add	r2, r3
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	3304      	adds	r3, #4
 8004d48:	4619      	mov	r1, r3
 8004d4a:	4610      	mov	r0, r2
 8004d4c:	f7fe fdf1 	bl	8003932 <vListInsertEnd>
 8004d50:	e005      	b.n	8004d5e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	3318      	adds	r3, #24
 8004d56:	4619      	mov	r1, r3
 8004d58:	480e      	ldr	r0, [pc, #56]	; (8004d94 <xTaskRemoveFromEventList+0xbc>)
 8004d5a:	f7fe fdea 	bl	8003932 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d62:	4b0d      	ldr	r3, [pc, #52]	; (8004d98 <xTaskRemoveFromEventList+0xc0>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d905      	bls.n	8004d78 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004d70:	4b0a      	ldr	r3, [pc, #40]	; (8004d9c <xTaskRemoveFromEventList+0xc4>)
 8004d72:	2201      	movs	r2, #1
 8004d74:	601a      	str	r2, [r3, #0]
 8004d76:	e001      	b.n	8004d7c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004d7c:	697b      	ldr	r3, [r7, #20]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3718      	adds	r7, #24
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	200011c8 	.word	0x200011c8
 8004d8c:	200011a8 	.word	0x200011a8
 8004d90:	20000cd0 	.word	0x20000cd0
 8004d94:	20001160 	.word	0x20001160
 8004d98:	20000ccc 	.word	0x20000ccc
 8004d9c:	200011b4 	.word	0x200011b4

08004da0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004da8:	4b06      	ldr	r3, [pc, #24]	; (8004dc4 <vTaskInternalSetTimeOutState+0x24>)
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004db0:	4b05      	ldr	r3, [pc, #20]	; (8004dc8 <vTaskInternalSetTimeOutState+0x28>)
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	605a      	str	r2, [r3, #4]
}
 8004db8:	bf00      	nop
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr
 8004dc4:	200011b8 	.word	0x200011b8
 8004dc8:	200011a4 	.word	0x200011a4

08004dcc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b088      	sub	sp, #32
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d10a      	bne.n	8004df2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de0:	f383 8811 	msr	BASEPRI, r3
 8004de4:	f3bf 8f6f 	isb	sy
 8004de8:	f3bf 8f4f 	dsb	sy
 8004dec:	613b      	str	r3, [r7, #16]
}
 8004dee:	bf00      	nop
 8004df0:	e7fe      	b.n	8004df0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d10a      	bne.n	8004e0e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dfc:	f383 8811 	msr	BASEPRI, r3
 8004e00:	f3bf 8f6f 	isb	sy
 8004e04:	f3bf 8f4f 	dsb	sy
 8004e08:	60fb      	str	r3, [r7, #12]
}
 8004e0a:	bf00      	nop
 8004e0c:	e7fe      	b.n	8004e0c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004e0e:	f000 fe79 	bl	8005b04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004e12:	4b1d      	ldr	r3, [pc, #116]	; (8004e88 <xTaskCheckForTimeOut+0xbc>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	69ba      	ldr	r2, [r7, #24]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e2a:	d102      	bne.n	8004e32 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	61fb      	str	r3, [r7, #28]
 8004e30:	e023      	b.n	8004e7a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	4b15      	ldr	r3, [pc, #84]	; (8004e8c <xTaskCheckForTimeOut+0xc0>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d007      	beq.n	8004e4e <xTaskCheckForTimeOut+0x82>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	69ba      	ldr	r2, [r7, #24]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d302      	bcc.n	8004e4e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	61fb      	str	r3, [r7, #28]
 8004e4c:	e015      	b.n	8004e7a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d20b      	bcs.n	8004e70 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	1ad2      	subs	r2, r2, r3
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f7ff ff9b 	bl	8004da0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	61fb      	str	r3, [r7, #28]
 8004e6e:	e004      	b.n	8004e7a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	2200      	movs	r2, #0
 8004e74:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004e76:	2301      	movs	r3, #1
 8004e78:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004e7a:	f000 fe73 	bl	8005b64 <vPortExitCritical>

	return xReturn;
 8004e7e:	69fb      	ldr	r3, [r7, #28]
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3720      	adds	r7, #32
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	200011a4 	.word	0x200011a4
 8004e8c:	200011b8 	.word	0x200011b8

08004e90 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004e90:	b480      	push	{r7}
 8004e92:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004e94:	4b03      	ldr	r3, [pc, #12]	; (8004ea4 <vTaskMissedYield+0x14>)
 8004e96:	2201      	movs	r2, #1
 8004e98:	601a      	str	r2, [r3, #0]
}
 8004e9a:	bf00      	nop
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr
 8004ea4:	200011b4 	.word	0x200011b4

08004ea8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004eb0:	f000 f852 	bl	8004f58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004eb4:	4b06      	ldr	r3, [pc, #24]	; (8004ed0 <prvIdleTask+0x28>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d9f9      	bls.n	8004eb0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004ebc:	4b05      	ldr	r3, [pc, #20]	; (8004ed4 <prvIdleTask+0x2c>)
 8004ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ec2:	601a      	str	r2, [r3, #0]
 8004ec4:	f3bf 8f4f 	dsb	sy
 8004ec8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004ecc:	e7f0      	b.n	8004eb0 <prvIdleTask+0x8>
 8004ece:	bf00      	nop
 8004ed0:	20000cd0 	.word	0x20000cd0
 8004ed4:	e000ed04 	.word	0xe000ed04

08004ed8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ede:	2300      	movs	r3, #0
 8004ee0:	607b      	str	r3, [r7, #4]
 8004ee2:	e00c      	b.n	8004efe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	4413      	add	r3, r2
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	4a12      	ldr	r2, [pc, #72]	; (8004f38 <prvInitialiseTaskLists+0x60>)
 8004ef0:	4413      	add	r3, r2
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7fe fcf0 	bl	80038d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	3301      	adds	r3, #1
 8004efc:	607b      	str	r3, [r7, #4]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2b37      	cmp	r3, #55	; 0x37
 8004f02:	d9ef      	bls.n	8004ee4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004f04:	480d      	ldr	r0, [pc, #52]	; (8004f3c <prvInitialiseTaskLists+0x64>)
 8004f06:	f7fe fce7 	bl	80038d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004f0a:	480d      	ldr	r0, [pc, #52]	; (8004f40 <prvInitialiseTaskLists+0x68>)
 8004f0c:	f7fe fce4 	bl	80038d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004f10:	480c      	ldr	r0, [pc, #48]	; (8004f44 <prvInitialiseTaskLists+0x6c>)
 8004f12:	f7fe fce1 	bl	80038d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004f16:	480c      	ldr	r0, [pc, #48]	; (8004f48 <prvInitialiseTaskLists+0x70>)
 8004f18:	f7fe fcde 	bl	80038d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004f1c:	480b      	ldr	r0, [pc, #44]	; (8004f4c <prvInitialiseTaskLists+0x74>)
 8004f1e:	f7fe fcdb 	bl	80038d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004f22:	4b0b      	ldr	r3, [pc, #44]	; (8004f50 <prvInitialiseTaskLists+0x78>)
 8004f24:	4a05      	ldr	r2, [pc, #20]	; (8004f3c <prvInitialiseTaskLists+0x64>)
 8004f26:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004f28:	4b0a      	ldr	r3, [pc, #40]	; (8004f54 <prvInitialiseTaskLists+0x7c>)
 8004f2a:	4a05      	ldr	r2, [pc, #20]	; (8004f40 <prvInitialiseTaskLists+0x68>)
 8004f2c:	601a      	str	r2, [r3, #0]
}
 8004f2e:	bf00      	nop
 8004f30:	3708      	adds	r7, #8
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	20000cd0 	.word	0x20000cd0
 8004f3c:	20001130 	.word	0x20001130
 8004f40:	20001144 	.word	0x20001144
 8004f44:	20001160 	.word	0x20001160
 8004f48:	20001174 	.word	0x20001174
 8004f4c:	2000118c 	.word	0x2000118c
 8004f50:	20001158 	.word	0x20001158
 8004f54:	2000115c 	.word	0x2000115c

08004f58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f5e:	e019      	b.n	8004f94 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004f60:	f000 fdd0 	bl	8005b04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f64:	4b10      	ldr	r3, [pc, #64]	; (8004fa8 <prvCheckTasksWaitingTermination+0x50>)
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	3304      	adds	r3, #4
 8004f70:	4618      	mov	r0, r3
 8004f72:	f7fe fd3b 	bl	80039ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004f76:	4b0d      	ldr	r3, [pc, #52]	; (8004fac <prvCheckTasksWaitingTermination+0x54>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	4a0b      	ldr	r2, [pc, #44]	; (8004fac <prvCheckTasksWaitingTermination+0x54>)
 8004f7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004f80:	4b0b      	ldr	r3, [pc, #44]	; (8004fb0 <prvCheckTasksWaitingTermination+0x58>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	3b01      	subs	r3, #1
 8004f86:	4a0a      	ldr	r2, [pc, #40]	; (8004fb0 <prvCheckTasksWaitingTermination+0x58>)
 8004f88:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004f8a:	f000 fdeb 	bl	8005b64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 f810 	bl	8004fb4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f94:	4b06      	ldr	r3, [pc, #24]	; (8004fb0 <prvCheckTasksWaitingTermination+0x58>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1e1      	bne.n	8004f60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004f9c:	bf00      	nop
 8004f9e:	bf00      	nop
 8004fa0:	3708      	adds	r7, #8
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	20001174 	.word	0x20001174
 8004fac:	200011a0 	.word	0x200011a0
 8004fb0:	20001188 	.word	0x20001188

08004fb4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d108      	bne.n	8004fd8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f000 ff88 	bl	8005ee0 <vPortFree>
				vPortFree( pxTCB );
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 ff85 	bl	8005ee0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004fd6:	e018      	b.n	800500a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d103      	bne.n	8004fea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 ff7c 	bl	8005ee0 <vPortFree>
	}
 8004fe8:	e00f      	b.n	800500a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d00a      	beq.n	800500a <prvDeleteTCB+0x56>
	__asm volatile
 8004ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff8:	f383 8811 	msr	BASEPRI, r3
 8004ffc:	f3bf 8f6f 	isb	sy
 8005000:	f3bf 8f4f 	dsb	sy
 8005004:	60fb      	str	r3, [r7, #12]
}
 8005006:	bf00      	nop
 8005008:	e7fe      	b.n	8005008 <prvDeleteTCB+0x54>
	}
 800500a:	bf00      	nop
 800500c:	3710      	adds	r7, #16
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
	...

08005014 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800501a:	4b0c      	ldr	r3, [pc, #48]	; (800504c <prvResetNextTaskUnblockTime+0x38>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d104      	bne.n	800502e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005024:	4b0a      	ldr	r3, [pc, #40]	; (8005050 <prvResetNextTaskUnblockTime+0x3c>)
 8005026:	f04f 32ff 	mov.w	r2, #4294967295
 800502a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800502c:	e008      	b.n	8005040 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800502e:	4b07      	ldr	r3, [pc, #28]	; (800504c <prvResetNextTaskUnblockTime+0x38>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	4a04      	ldr	r2, [pc, #16]	; (8005050 <prvResetNextTaskUnblockTime+0x3c>)
 800503e:	6013      	str	r3, [r2, #0]
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr
 800504c:	20001158 	.word	0x20001158
 8005050:	200011c0 	.word	0x200011c0

08005054 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800505a:	4b0b      	ldr	r3, [pc, #44]	; (8005088 <xTaskGetSchedulerState+0x34>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d102      	bne.n	8005068 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005062:	2301      	movs	r3, #1
 8005064:	607b      	str	r3, [r7, #4]
 8005066:	e008      	b.n	800507a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005068:	4b08      	ldr	r3, [pc, #32]	; (800508c <xTaskGetSchedulerState+0x38>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d102      	bne.n	8005076 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005070:	2302      	movs	r3, #2
 8005072:	607b      	str	r3, [r7, #4]
 8005074:	e001      	b.n	800507a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005076:	2300      	movs	r3, #0
 8005078:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800507a:	687b      	ldr	r3, [r7, #4]
	}
 800507c:	4618      	mov	r0, r3
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr
 8005088:	200011ac 	.word	0x200011ac
 800508c:	200011c8 	.word	0x200011c8

08005090 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005090:	b580      	push	{r7, lr}
 8005092:	b086      	sub	sp, #24
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800509c:	2300      	movs	r3, #0
 800509e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d056      	beq.n	8005154 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80050a6:	4b2e      	ldr	r3, [pc, #184]	; (8005160 <xTaskPriorityDisinherit+0xd0>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d00a      	beq.n	80050c6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80050b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b4:	f383 8811 	msr	BASEPRI, r3
 80050b8:	f3bf 8f6f 	isb	sy
 80050bc:	f3bf 8f4f 	dsb	sy
 80050c0:	60fb      	str	r3, [r7, #12]
}
 80050c2:	bf00      	nop
 80050c4:	e7fe      	b.n	80050c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d10a      	bne.n	80050e4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80050ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d2:	f383 8811 	msr	BASEPRI, r3
 80050d6:	f3bf 8f6f 	isb	sy
 80050da:	f3bf 8f4f 	dsb	sy
 80050de:	60bb      	str	r3, [r7, #8]
}
 80050e0:	bf00      	nop
 80050e2:	e7fe      	b.n	80050e2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050e8:	1e5a      	subs	r2, r3, #1
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d02c      	beq.n	8005154 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d128      	bne.n	8005154 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	3304      	adds	r3, #4
 8005106:	4618      	mov	r0, r3
 8005108:	f7fe fc70 	bl	80039ec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005118:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005124:	4b0f      	ldr	r3, [pc, #60]	; (8005164 <xTaskPriorityDisinherit+0xd4>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	429a      	cmp	r2, r3
 800512a:	d903      	bls.n	8005134 <xTaskPriorityDisinherit+0xa4>
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005130:	4a0c      	ldr	r2, [pc, #48]	; (8005164 <xTaskPriorityDisinherit+0xd4>)
 8005132:	6013      	str	r3, [r2, #0]
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005138:	4613      	mov	r3, r2
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	4413      	add	r3, r2
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	4a09      	ldr	r2, [pc, #36]	; (8005168 <xTaskPriorityDisinherit+0xd8>)
 8005142:	441a      	add	r2, r3
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	3304      	adds	r3, #4
 8005148:	4619      	mov	r1, r3
 800514a:	4610      	mov	r0, r2
 800514c:	f7fe fbf1 	bl	8003932 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005150:	2301      	movs	r3, #1
 8005152:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005154:	697b      	ldr	r3, [r7, #20]
	}
 8005156:	4618      	mov	r0, r3
 8005158:	3718      	adds	r7, #24
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	20000ccc 	.word	0x20000ccc
 8005164:	200011a8 	.word	0x200011a8
 8005168:	20000cd0 	.word	0x20000cd0

0800516c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005176:	4b21      	ldr	r3, [pc, #132]	; (80051fc <prvAddCurrentTaskToDelayedList+0x90>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800517c:	4b20      	ldr	r3, [pc, #128]	; (8005200 <prvAddCurrentTaskToDelayedList+0x94>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	3304      	adds	r3, #4
 8005182:	4618      	mov	r0, r3
 8005184:	f7fe fc32 	bl	80039ec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800518e:	d10a      	bne.n	80051a6 <prvAddCurrentTaskToDelayedList+0x3a>
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d007      	beq.n	80051a6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005196:	4b1a      	ldr	r3, [pc, #104]	; (8005200 <prvAddCurrentTaskToDelayedList+0x94>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	3304      	adds	r3, #4
 800519c:	4619      	mov	r1, r3
 800519e:	4819      	ldr	r0, [pc, #100]	; (8005204 <prvAddCurrentTaskToDelayedList+0x98>)
 80051a0:	f7fe fbc7 	bl	8003932 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80051a4:	e026      	b.n	80051f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4413      	add	r3, r2
 80051ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80051ae:	4b14      	ldr	r3, [pc, #80]	; (8005200 <prvAddCurrentTaskToDelayedList+0x94>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68ba      	ldr	r2, [r7, #8]
 80051b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80051b6:	68ba      	ldr	r2, [r7, #8]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d209      	bcs.n	80051d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051be:	4b12      	ldr	r3, [pc, #72]	; (8005208 <prvAddCurrentTaskToDelayedList+0x9c>)
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	4b0f      	ldr	r3, [pc, #60]	; (8005200 <prvAddCurrentTaskToDelayedList+0x94>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	3304      	adds	r3, #4
 80051c8:	4619      	mov	r1, r3
 80051ca:	4610      	mov	r0, r2
 80051cc:	f7fe fbd5 	bl	800397a <vListInsert>
}
 80051d0:	e010      	b.n	80051f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051d2:	4b0e      	ldr	r3, [pc, #56]	; (800520c <prvAddCurrentTaskToDelayedList+0xa0>)
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	4b0a      	ldr	r3, [pc, #40]	; (8005200 <prvAddCurrentTaskToDelayedList+0x94>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	3304      	adds	r3, #4
 80051dc:	4619      	mov	r1, r3
 80051de:	4610      	mov	r0, r2
 80051e0:	f7fe fbcb 	bl	800397a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80051e4:	4b0a      	ldr	r3, [pc, #40]	; (8005210 <prvAddCurrentTaskToDelayedList+0xa4>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68ba      	ldr	r2, [r7, #8]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d202      	bcs.n	80051f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80051ee:	4a08      	ldr	r2, [pc, #32]	; (8005210 <prvAddCurrentTaskToDelayedList+0xa4>)
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	6013      	str	r3, [r2, #0]
}
 80051f4:	bf00      	nop
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	200011a4 	.word	0x200011a4
 8005200:	20000ccc 	.word	0x20000ccc
 8005204:	2000118c 	.word	0x2000118c
 8005208:	2000115c 	.word	0x2000115c
 800520c:	20001158 	.word	0x20001158
 8005210:	200011c0 	.word	0x200011c0

08005214 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b08a      	sub	sp, #40	; 0x28
 8005218:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800521a:	2300      	movs	r3, #0
 800521c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800521e:	f000 fb07 	bl	8005830 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005222:	4b1c      	ldr	r3, [pc, #112]	; (8005294 <xTimerCreateTimerTask+0x80>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d021      	beq.n	800526e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800522a:	2300      	movs	r3, #0
 800522c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800522e:	2300      	movs	r3, #0
 8005230:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005232:	1d3a      	adds	r2, r7, #4
 8005234:	f107 0108 	add.w	r1, r7, #8
 8005238:	f107 030c 	add.w	r3, r7, #12
 800523c:	4618      	mov	r0, r3
 800523e:	f7fe fb31 	bl	80038a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005242:	6879      	ldr	r1, [r7, #4]
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	9202      	str	r2, [sp, #8]
 800524a:	9301      	str	r3, [sp, #4]
 800524c:	2302      	movs	r3, #2
 800524e:	9300      	str	r3, [sp, #0]
 8005250:	2300      	movs	r3, #0
 8005252:	460a      	mov	r2, r1
 8005254:	4910      	ldr	r1, [pc, #64]	; (8005298 <xTimerCreateTimerTask+0x84>)
 8005256:	4811      	ldr	r0, [pc, #68]	; (800529c <xTimerCreateTimerTask+0x88>)
 8005258:	f7ff f8de 	bl	8004418 <xTaskCreateStatic>
 800525c:	4603      	mov	r3, r0
 800525e:	4a10      	ldr	r2, [pc, #64]	; (80052a0 <xTimerCreateTimerTask+0x8c>)
 8005260:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005262:	4b0f      	ldr	r3, [pc, #60]	; (80052a0 <xTimerCreateTimerTask+0x8c>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d001      	beq.n	800526e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800526a:	2301      	movs	r3, #1
 800526c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d10a      	bne.n	800528a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005278:	f383 8811 	msr	BASEPRI, r3
 800527c:	f3bf 8f6f 	isb	sy
 8005280:	f3bf 8f4f 	dsb	sy
 8005284:	613b      	str	r3, [r7, #16]
}
 8005286:	bf00      	nop
 8005288:	e7fe      	b.n	8005288 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800528a:	697b      	ldr	r3, [r7, #20]
}
 800528c:	4618      	mov	r0, r3
 800528e:	3718      	adds	r7, #24
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	200011fc 	.word	0x200011fc
 8005298:	080061cc 	.word	0x080061cc
 800529c:	080053d9 	.word	0x080053d9
 80052a0:	20001200 	.word	0x20001200

080052a4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b08a      	sub	sp, #40	; 0x28
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	607a      	str	r2, [r7, #4]
 80052b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80052b2:	2300      	movs	r3, #0
 80052b4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d10a      	bne.n	80052d2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80052bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c0:	f383 8811 	msr	BASEPRI, r3
 80052c4:	f3bf 8f6f 	isb	sy
 80052c8:	f3bf 8f4f 	dsb	sy
 80052cc:	623b      	str	r3, [r7, #32]
}
 80052ce:	bf00      	nop
 80052d0:	e7fe      	b.n	80052d0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80052d2:	4b1a      	ldr	r3, [pc, #104]	; (800533c <xTimerGenericCommand+0x98>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d02a      	beq.n	8005330 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	2b05      	cmp	r3, #5
 80052ea:	dc18      	bgt.n	800531e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80052ec:	f7ff feb2 	bl	8005054 <xTaskGetSchedulerState>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d109      	bne.n	800530a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80052f6:	4b11      	ldr	r3, [pc, #68]	; (800533c <xTimerGenericCommand+0x98>)
 80052f8:	6818      	ldr	r0, [r3, #0]
 80052fa:	f107 0110 	add.w	r1, r7, #16
 80052fe:	2300      	movs	r3, #0
 8005300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005302:	f7fe fca1 	bl	8003c48 <xQueueGenericSend>
 8005306:	6278      	str	r0, [r7, #36]	; 0x24
 8005308:	e012      	b.n	8005330 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800530a:	4b0c      	ldr	r3, [pc, #48]	; (800533c <xTimerGenericCommand+0x98>)
 800530c:	6818      	ldr	r0, [r3, #0]
 800530e:	f107 0110 	add.w	r1, r7, #16
 8005312:	2300      	movs	r3, #0
 8005314:	2200      	movs	r2, #0
 8005316:	f7fe fc97 	bl	8003c48 <xQueueGenericSend>
 800531a:	6278      	str	r0, [r7, #36]	; 0x24
 800531c:	e008      	b.n	8005330 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800531e:	4b07      	ldr	r3, [pc, #28]	; (800533c <xTimerGenericCommand+0x98>)
 8005320:	6818      	ldr	r0, [r3, #0]
 8005322:	f107 0110 	add.w	r1, r7, #16
 8005326:	2300      	movs	r3, #0
 8005328:	683a      	ldr	r2, [r7, #0]
 800532a:	f7fe fd8b 	bl	8003e44 <xQueueGenericSendFromISR>
 800532e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005332:	4618      	mov	r0, r3
 8005334:	3728      	adds	r7, #40	; 0x28
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	200011fc 	.word	0x200011fc

08005340 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b088      	sub	sp, #32
 8005344:	af02      	add	r7, sp, #8
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800534a:	4b22      	ldr	r3, [pc, #136]	; (80053d4 <prvProcessExpiredTimer+0x94>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	3304      	adds	r3, #4
 8005358:	4618      	mov	r0, r3
 800535a:	f7fe fb47 	bl	80039ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005364:	f003 0304 	and.w	r3, r3, #4
 8005368:	2b00      	cmp	r3, #0
 800536a:	d022      	beq.n	80053b2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	699a      	ldr	r2, [r3, #24]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	18d1      	adds	r1, r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	683a      	ldr	r2, [r7, #0]
 8005378:	6978      	ldr	r0, [r7, #20]
 800537a:	f000 f8d1 	bl	8005520 <prvInsertTimerInActiveList>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d01f      	beq.n	80053c4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005384:	2300      	movs	r3, #0
 8005386:	9300      	str	r3, [sp, #0]
 8005388:	2300      	movs	r3, #0
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	2100      	movs	r1, #0
 800538e:	6978      	ldr	r0, [r7, #20]
 8005390:	f7ff ff88 	bl	80052a4 <xTimerGenericCommand>
 8005394:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d113      	bne.n	80053c4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800539c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a0:	f383 8811 	msr	BASEPRI, r3
 80053a4:	f3bf 8f6f 	isb	sy
 80053a8:	f3bf 8f4f 	dsb	sy
 80053ac:	60fb      	str	r3, [r7, #12]
}
 80053ae:	bf00      	nop
 80053b0:	e7fe      	b.n	80053b0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053b8:	f023 0301 	bic.w	r3, r3, #1
 80053bc:	b2da      	uxtb	r2, r3
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	6a1b      	ldr	r3, [r3, #32]
 80053c8:	6978      	ldr	r0, [r7, #20]
 80053ca:	4798      	blx	r3
}
 80053cc:	bf00      	nop
 80053ce:	3718      	adds	r7, #24
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	200011f4 	.word	0x200011f4

080053d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80053e0:	f107 0308 	add.w	r3, r7, #8
 80053e4:	4618      	mov	r0, r3
 80053e6:	f000 f857 	bl	8005498 <prvGetNextExpireTime>
 80053ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	4619      	mov	r1, r3
 80053f0:	68f8      	ldr	r0, [r7, #12]
 80053f2:	f000 f803 	bl	80053fc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80053f6:	f000 f8d5 	bl	80055a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80053fa:	e7f1      	b.n	80053e0 <prvTimerTask+0x8>

080053fc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005406:	f7ff fa43 	bl	8004890 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800540a:	f107 0308 	add.w	r3, r7, #8
 800540e:	4618      	mov	r0, r3
 8005410:	f000 f866 	bl	80054e0 <prvSampleTimeNow>
 8005414:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d130      	bne.n	800547e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d10a      	bne.n	8005438 <prvProcessTimerOrBlockTask+0x3c>
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	429a      	cmp	r2, r3
 8005428:	d806      	bhi.n	8005438 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800542a:	f7ff fa3f 	bl	80048ac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800542e:	68f9      	ldr	r1, [r7, #12]
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f7ff ff85 	bl	8005340 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005436:	e024      	b.n	8005482 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d008      	beq.n	8005450 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800543e:	4b13      	ldr	r3, [pc, #76]	; (800548c <prvProcessTimerOrBlockTask+0x90>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d101      	bne.n	800544c <prvProcessTimerOrBlockTask+0x50>
 8005448:	2301      	movs	r3, #1
 800544a:	e000      	b.n	800544e <prvProcessTimerOrBlockTask+0x52>
 800544c:	2300      	movs	r3, #0
 800544e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005450:	4b0f      	ldr	r3, [pc, #60]	; (8005490 <prvProcessTimerOrBlockTask+0x94>)
 8005452:	6818      	ldr	r0, [r3, #0]
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	683a      	ldr	r2, [r7, #0]
 800545c:	4619      	mov	r1, r3
 800545e:	f7fe ffa7 	bl	80043b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005462:	f7ff fa23 	bl	80048ac <xTaskResumeAll>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d10a      	bne.n	8005482 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800546c:	4b09      	ldr	r3, [pc, #36]	; (8005494 <prvProcessTimerOrBlockTask+0x98>)
 800546e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005472:	601a      	str	r2, [r3, #0]
 8005474:	f3bf 8f4f 	dsb	sy
 8005478:	f3bf 8f6f 	isb	sy
}
 800547c:	e001      	b.n	8005482 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800547e:	f7ff fa15 	bl	80048ac <xTaskResumeAll>
}
 8005482:	bf00      	nop
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	200011f8 	.word	0x200011f8
 8005490:	200011fc 	.word	0x200011fc
 8005494:	e000ed04 	.word	0xe000ed04

08005498 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80054a0:	4b0e      	ldr	r3, [pc, #56]	; (80054dc <prvGetNextExpireTime+0x44>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d101      	bne.n	80054ae <prvGetNextExpireTime+0x16>
 80054aa:	2201      	movs	r2, #1
 80054ac:	e000      	b.n	80054b0 <prvGetNextExpireTime+0x18>
 80054ae:	2200      	movs	r2, #0
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d105      	bne.n	80054c8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80054bc:	4b07      	ldr	r3, [pc, #28]	; (80054dc <prvGetNextExpireTime+0x44>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	60fb      	str	r3, [r7, #12]
 80054c6:	e001      	b.n	80054cc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80054c8:	2300      	movs	r3, #0
 80054ca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80054cc:	68fb      	ldr	r3, [r7, #12]
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3714      	adds	r7, #20
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	200011f4 	.word	0x200011f4

080054e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80054e8:	f7ff fa7e 	bl	80049e8 <xTaskGetTickCount>
 80054ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80054ee:	4b0b      	ldr	r3, [pc, #44]	; (800551c <prvSampleTimeNow+0x3c>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d205      	bcs.n	8005504 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80054f8:	f000 f936 	bl	8005768 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	601a      	str	r2, [r3, #0]
 8005502:	e002      	b.n	800550a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800550a:	4a04      	ldr	r2, [pc, #16]	; (800551c <prvSampleTimeNow+0x3c>)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005510:	68fb      	ldr	r3, [r7, #12]
}
 8005512:	4618      	mov	r0, r3
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	20001204 	.word	0x20001204

08005520 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
 800552c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800552e:	2300      	movs	r3, #0
 8005530:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800553e:	68ba      	ldr	r2, [r7, #8]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	429a      	cmp	r2, r3
 8005544:	d812      	bhi.n	800556c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	1ad2      	subs	r2, r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	429a      	cmp	r2, r3
 8005552:	d302      	bcc.n	800555a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005554:	2301      	movs	r3, #1
 8005556:	617b      	str	r3, [r7, #20]
 8005558:	e01b      	b.n	8005592 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800555a:	4b10      	ldr	r3, [pc, #64]	; (800559c <prvInsertTimerInActiveList+0x7c>)
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	3304      	adds	r3, #4
 8005562:	4619      	mov	r1, r3
 8005564:	4610      	mov	r0, r2
 8005566:	f7fe fa08 	bl	800397a <vListInsert>
 800556a:	e012      	b.n	8005592 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	429a      	cmp	r2, r3
 8005572:	d206      	bcs.n	8005582 <prvInsertTimerInActiveList+0x62>
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	429a      	cmp	r2, r3
 800557a:	d302      	bcc.n	8005582 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800557c:	2301      	movs	r3, #1
 800557e:	617b      	str	r3, [r7, #20]
 8005580:	e007      	b.n	8005592 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005582:	4b07      	ldr	r3, [pc, #28]	; (80055a0 <prvInsertTimerInActiveList+0x80>)
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	3304      	adds	r3, #4
 800558a:	4619      	mov	r1, r3
 800558c:	4610      	mov	r0, r2
 800558e:	f7fe f9f4 	bl	800397a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005592:	697b      	ldr	r3, [r7, #20]
}
 8005594:	4618      	mov	r0, r3
 8005596:	3718      	adds	r7, #24
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	200011f8 	.word	0x200011f8
 80055a0:	200011f4 	.word	0x200011f4

080055a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b08e      	sub	sp, #56	; 0x38
 80055a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80055aa:	e0ca      	b.n	8005742 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	da18      	bge.n	80055e4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80055b2:	1d3b      	adds	r3, r7, #4
 80055b4:	3304      	adds	r3, #4
 80055b6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80055b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d10a      	bne.n	80055d4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80055be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c2:	f383 8811 	msr	BASEPRI, r3
 80055c6:	f3bf 8f6f 	isb	sy
 80055ca:	f3bf 8f4f 	dsb	sy
 80055ce:	61fb      	str	r3, [r7, #28]
}
 80055d0:	bf00      	nop
 80055d2:	e7fe      	b.n	80055d2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80055d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055da:	6850      	ldr	r0, [r2, #4]
 80055dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055de:	6892      	ldr	r2, [r2, #8]
 80055e0:	4611      	mov	r1, r2
 80055e2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	f2c0 80ab 	blt.w	8005742 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80055f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f2:	695b      	ldr	r3, [r3, #20]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d004      	beq.n	8005602 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80055f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055fa:	3304      	adds	r3, #4
 80055fc:	4618      	mov	r0, r3
 80055fe:	f7fe f9f5 	bl	80039ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005602:	463b      	mov	r3, r7
 8005604:	4618      	mov	r0, r3
 8005606:	f7ff ff6b 	bl	80054e0 <prvSampleTimeNow>
 800560a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2b09      	cmp	r3, #9
 8005610:	f200 8096 	bhi.w	8005740 <prvProcessReceivedCommands+0x19c>
 8005614:	a201      	add	r2, pc, #4	; (adr r2, 800561c <prvProcessReceivedCommands+0x78>)
 8005616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800561a:	bf00      	nop
 800561c:	08005645 	.word	0x08005645
 8005620:	08005645 	.word	0x08005645
 8005624:	08005645 	.word	0x08005645
 8005628:	080056b9 	.word	0x080056b9
 800562c:	080056cd 	.word	0x080056cd
 8005630:	08005717 	.word	0x08005717
 8005634:	08005645 	.word	0x08005645
 8005638:	08005645 	.word	0x08005645
 800563c:	080056b9 	.word	0x080056b9
 8005640:	080056cd 	.word	0x080056cd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005646:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800564a:	f043 0301 	orr.w	r3, r3, #1
 800564e:	b2da      	uxtb	r2, r3
 8005650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005652:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005656:	68ba      	ldr	r2, [r7, #8]
 8005658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	18d1      	adds	r1, r2, r3
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005662:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005664:	f7ff ff5c 	bl	8005520 <prvInsertTimerInActiveList>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d069      	beq.n	8005742 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800566e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005674:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005678:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800567c:	f003 0304 	and.w	r3, r3, #4
 8005680:	2b00      	cmp	r3, #0
 8005682:	d05e      	beq.n	8005742 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005684:	68ba      	ldr	r2, [r7, #8]
 8005686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	441a      	add	r2, r3
 800568c:	2300      	movs	r3, #0
 800568e:	9300      	str	r3, [sp, #0]
 8005690:	2300      	movs	r3, #0
 8005692:	2100      	movs	r1, #0
 8005694:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005696:	f7ff fe05 	bl	80052a4 <xTimerGenericCommand>
 800569a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800569c:	6a3b      	ldr	r3, [r7, #32]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d14f      	bne.n	8005742 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80056a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a6:	f383 8811 	msr	BASEPRI, r3
 80056aa:	f3bf 8f6f 	isb	sy
 80056ae:	f3bf 8f4f 	dsb	sy
 80056b2:	61bb      	str	r3, [r7, #24]
}
 80056b4:	bf00      	nop
 80056b6:	e7fe      	b.n	80056b6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80056b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056be:	f023 0301 	bic.w	r3, r3, #1
 80056c2:	b2da      	uxtb	r2, r3
 80056c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80056ca:	e03a      	b.n	8005742 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80056cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056d2:	f043 0301 	orr.w	r3, r3, #1
 80056d6:	b2da      	uxtb	r2, r3
 80056d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80056de:	68ba      	ldr	r2, [r7, #8]
 80056e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80056e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d10a      	bne.n	8005702 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80056ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f0:	f383 8811 	msr	BASEPRI, r3
 80056f4:	f3bf 8f6f 	isb	sy
 80056f8:	f3bf 8f4f 	dsb	sy
 80056fc:	617b      	str	r3, [r7, #20]
}
 80056fe:	bf00      	nop
 8005700:	e7fe      	b.n	8005700 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005704:	699a      	ldr	r2, [r3, #24]
 8005706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005708:	18d1      	adds	r1, r2, r3
 800570a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800570e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005710:	f7ff ff06 	bl	8005520 <prvInsertTimerInActiveList>
					break;
 8005714:	e015      	b.n	8005742 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005718:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800571c:	f003 0302 	and.w	r3, r3, #2
 8005720:	2b00      	cmp	r3, #0
 8005722:	d103      	bne.n	800572c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005724:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005726:	f000 fbdb 	bl	8005ee0 <vPortFree>
 800572a:	e00a      	b.n	8005742 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800572c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005732:	f023 0301 	bic.w	r3, r3, #1
 8005736:	b2da      	uxtb	r2, r3
 8005738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800573e:	e000      	b.n	8005742 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8005740:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005742:	4b08      	ldr	r3, [pc, #32]	; (8005764 <prvProcessReceivedCommands+0x1c0>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	1d39      	adds	r1, r7, #4
 8005748:	2200      	movs	r2, #0
 800574a:	4618      	mov	r0, r3
 800574c:	f7fe fc16 	bl	8003f7c <xQueueReceive>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	f47f af2a 	bne.w	80055ac <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005758:	bf00      	nop
 800575a:	bf00      	nop
 800575c:	3730      	adds	r7, #48	; 0x30
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	200011fc 	.word	0x200011fc

08005768 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b088      	sub	sp, #32
 800576c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800576e:	e048      	b.n	8005802 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005770:	4b2d      	ldr	r3, [pc, #180]	; (8005828 <prvSwitchTimerLists+0xc0>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800577a:	4b2b      	ldr	r3, [pc, #172]	; (8005828 <prvSwitchTimerLists+0xc0>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	3304      	adds	r3, #4
 8005788:	4618      	mov	r0, r3
 800578a:	f7fe f92f 	bl	80039ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6a1b      	ldr	r3, [r3, #32]
 8005792:	68f8      	ldr	r0, [r7, #12]
 8005794:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800579c:	f003 0304 	and.w	r3, r3, #4
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d02e      	beq.n	8005802 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	693a      	ldr	r2, [r7, #16]
 80057aa:	4413      	add	r3, r2
 80057ac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80057ae:	68ba      	ldr	r2, [r7, #8]
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d90e      	bls.n	80057d4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	68ba      	ldr	r2, [r7, #8]
 80057ba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80057c2:	4b19      	ldr	r3, [pc, #100]	; (8005828 <prvSwitchTimerLists+0xc0>)
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	3304      	adds	r3, #4
 80057ca:	4619      	mov	r1, r3
 80057cc:	4610      	mov	r0, r2
 80057ce:	f7fe f8d4 	bl	800397a <vListInsert>
 80057d2:	e016      	b.n	8005802 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80057d4:	2300      	movs	r3, #0
 80057d6:	9300      	str	r3, [sp, #0]
 80057d8:	2300      	movs	r3, #0
 80057da:	693a      	ldr	r2, [r7, #16]
 80057dc:	2100      	movs	r1, #0
 80057de:	68f8      	ldr	r0, [r7, #12]
 80057e0:	f7ff fd60 	bl	80052a4 <xTimerGenericCommand>
 80057e4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d10a      	bne.n	8005802 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80057ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f0:	f383 8811 	msr	BASEPRI, r3
 80057f4:	f3bf 8f6f 	isb	sy
 80057f8:	f3bf 8f4f 	dsb	sy
 80057fc:	603b      	str	r3, [r7, #0]
}
 80057fe:	bf00      	nop
 8005800:	e7fe      	b.n	8005800 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005802:	4b09      	ldr	r3, [pc, #36]	; (8005828 <prvSwitchTimerLists+0xc0>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1b1      	bne.n	8005770 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800580c:	4b06      	ldr	r3, [pc, #24]	; (8005828 <prvSwitchTimerLists+0xc0>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005812:	4b06      	ldr	r3, [pc, #24]	; (800582c <prvSwitchTimerLists+0xc4>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a04      	ldr	r2, [pc, #16]	; (8005828 <prvSwitchTimerLists+0xc0>)
 8005818:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800581a:	4a04      	ldr	r2, [pc, #16]	; (800582c <prvSwitchTimerLists+0xc4>)
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	6013      	str	r3, [r2, #0]
}
 8005820:	bf00      	nop
 8005822:	3718      	adds	r7, #24
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	200011f4 	.word	0x200011f4
 800582c:	200011f8 	.word	0x200011f8

08005830 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005836:	f000 f965 	bl	8005b04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800583a:	4b15      	ldr	r3, [pc, #84]	; (8005890 <prvCheckForValidListAndQueue+0x60>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d120      	bne.n	8005884 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005842:	4814      	ldr	r0, [pc, #80]	; (8005894 <prvCheckForValidListAndQueue+0x64>)
 8005844:	f7fe f848 	bl	80038d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005848:	4813      	ldr	r0, [pc, #76]	; (8005898 <prvCheckForValidListAndQueue+0x68>)
 800584a:	f7fe f845 	bl	80038d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800584e:	4b13      	ldr	r3, [pc, #76]	; (800589c <prvCheckForValidListAndQueue+0x6c>)
 8005850:	4a10      	ldr	r2, [pc, #64]	; (8005894 <prvCheckForValidListAndQueue+0x64>)
 8005852:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005854:	4b12      	ldr	r3, [pc, #72]	; (80058a0 <prvCheckForValidListAndQueue+0x70>)
 8005856:	4a10      	ldr	r2, [pc, #64]	; (8005898 <prvCheckForValidListAndQueue+0x68>)
 8005858:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800585a:	2300      	movs	r3, #0
 800585c:	9300      	str	r3, [sp, #0]
 800585e:	4b11      	ldr	r3, [pc, #68]	; (80058a4 <prvCheckForValidListAndQueue+0x74>)
 8005860:	4a11      	ldr	r2, [pc, #68]	; (80058a8 <prvCheckForValidListAndQueue+0x78>)
 8005862:	2110      	movs	r1, #16
 8005864:	200a      	movs	r0, #10
 8005866:	f7fe f953 	bl	8003b10 <xQueueGenericCreateStatic>
 800586a:	4603      	mov	r3, r0
 800586c:	4a08      	ldr	r2, [pc, #32]	; (8005890 <prvCheckForValidListAndQueue+0x60>)
 800586e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005870:	4b07      	ldr	r3, [pc, #28]	; (8005890 <prvCheckForValidListAndQueue+0x60>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d005      	beq.n	8005884 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005878:	4b05      	ldr	r3, [pc, #20]	; (8005890 <prvCheckForValidListAndQueue+0x60>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	490b      	ldr	r1, [pc, #44]	; (80058ac <prvCheckForValidListAndQueue+0x7c>)
 800587e:	4618      	mov	r0, r3
 8005880:	f7fe fd6c 	bl	800435c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005884:	f000 f96e 	bl	8005b64 <vPortExitCritical>
}
 8005888:	bf00      	nop
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	200011fc 	.word	0x200011fc
 8005894:	200011cc 	.word	0x200011cc
 8005898:	200011e0 	.word	0x200011e0
 800589c:	200011f4 	.word	0x200011f4
 80058a0:	200011f8 	.word	0x200011f8
 80058a4:	200012a8 	.word	0x200012a8
 80058a8:	20001208 	.word	0x20001208
 80058ac:	080061d4 	.word	0x080061d4

080058b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	3b04      	subs	r3, #4
 80058c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80058c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	3b04      	subs	r3, #4
 80058ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	f023 0201 	bic.w	r2, r3, #1
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	3b04      	subs	r3, #4
 80058de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80058e0:	4a0c      	ldr	r2, [pc, #48]	; (8005914 <pxPortInitialiseStack+0x64>)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	3b14      	subs	r3, #20
 80058ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	3b04      	subs	r3, #4
 80058f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f06f 0202 	mvn.w	r2, #2
 80058fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	3b20      	subs	r3, #32
 8005904:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005906:	68fb      	ldr	r3, [r7, #12]
}
 8005908:	4618      	mov	r0, r3
 800590a:	3714      	adds	r7, #20
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr
 8005914:	08005919 	.word	0x08005919

08005918 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800591e:	2300      	movs	r3, #0
 8005920:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005922:	4b12      	ldr	r3, [pc, #72]	; (800596c <prvTaskExitError+0x54>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800592a:	d00a      	beq.n	8005942 <prvTaskExitError+0x2a>
	__asm volatile
 800592c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005930:	f383 8811 	msr	BASEPRI, r3
 8005934:	f3bf 8f6f 	isb	sy
 8005938:	f3bf 8f4f 	dsb	sy
 800593c:	60fb      	str	r3, [r7, #12]
}
 800593e:	bf00      	nop
 8005940:	e7fe      	b.n	8005940 <prvTaskExitError+0x28>
	__asm volatile
 8005942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005946:	f383 8811 	msr	BASEPRI, r3
 800594a:	f3bf 8f6f 	isb	sy
 800594e:	f3bf 8f4f 	dsb	sy
 8005952:	60bb      	str	r3, [r7, #8]
}
 8005954:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005956:	bf00      	nop
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d0fc      	beq.n	8005958 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800595e:	bf00      	nop
 8005960:	bf00      	nop
 8005962:	3714      	adds	r7, #20
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr
 800596c:	2000000c 	.word	0x2000000c

08005970 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005970:	4b07      	ldr	r3, [pc, #28]	; (8005990 <pxCurrentTCBConst2>)
 8005972:	6819      	ldr	r1, [r3, #0]
 8005974:	6808      	ldr	r0, [r1, #0]
 8005976:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800597a:	f380 8809 	msr	PSP, r0
 800597e:	f3bf 8f6f 	isb	sy
 8005982:	f04f 0000 	mov.w	r0, #0
 8005986:	f380 8811 	msr	BASEPRI, r0
 800598a:	4770      	bx	lr
 800598c:	f3af 8000 	nop.w

08005990 <pxCurrentTCBConst2>:
 8005990:	20000ccc 	.word	0x20000ccc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005994:	bf00      	nop
 8005996:	bf00      	nop

08005998 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005998:	4808      	ldr	r0, [pc, #32]	; (80059bc <prvPortStartFirstTask+0x24>)
 800599a:	6800      	ldr	r0, [r0, #0]
 800599c:	6800      	ldr	r0, [r0, #0]
 800599e:	f380 8808 	msr	MSP, r0
 80059a2:	f04f 0000 	mov.w	r0, #0
 80059a6:	f380 8814 	msr	CONTROL, r0
 80059aa:	b662      	cpsie	i
 80059ac:	b661      	cpsie	f
 80059ae:	f3bf 8f4f 	dsb	sy
 80059b2:	f3bf 8f6f 	isb	sy
 80059b6:	df00      	svc	0
 80059b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80059ba:	bf00      	nop
 80059bc:	e000ed08 	.word	0xe000ed08

080059c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b086      	sub	sp, #24
 80059c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80059c6:	4b46      	ldr	r3, [pc, #280]	; (8005ae0 <xPortStartScheduler+0x120>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a46      	ldr	r2, [pc, #280]	; (8005ae4 <xPortStartScheduler+0x124>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d10a      	bne.n	80059e6 <xPortStartScheduler+0x26>
	__asm volatile
 80059d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d4:	f383 8811 	msr	BASEPRI, r3
 80059d8:	f3bf 8f6f 	isb	sy
 80059dc:	f3bf 8f4f 	dsb	sy
 80059e0:	613b      	str	r3, [r7, #16]
}
 80059e2:	bf00      	nop
 80059e4:	e7fe      	b.n	80059e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80059e6:	4b3e      	ldr	r3, [pc, #248]	; (8005ae0 <xPortStartScheduler+0x120>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a3f      	ldr	r2, [pc, #252]	; (8005ae8 <xPortStartScheduler+0x128>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d10a      	bne.n	8005a06 <xPortStartScheduler+0x46>
	__asm volatile
 80059f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f4:	f383 8811 	msr	BASEPRI, r3
 80059f8:	f3bf 8f6f 	isb	sy
 80059fc:	f3bf 8f4f 	dsb	sy
 8005a00:	60fb      	str	r3, [r7, #12]
}
 8005a02:	bf00      	nop
 8005a04:	e7fe      	b.n	8005a04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005a06:	4b39      	ldr	r3, [pc, #228]	; (8005aec <xPortStartScheduler+0x12c>)
 8005a08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	22ff      	movs	r2, #255	; 0xff
 8005a16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005a20:	78fb      	ldrb	r3, [r7, #3]
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005a28:	b2da      	uxtb	r2, r3
 8005a2a:	4b31      	ldr	r3, [pc, #196]	; (8005af0 <xPortStartScheduler+0x130>)
 8005a2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005a2e:	4b31      	ldr	r3, [pc, #196]	; (8005af4 <xPortStartScheduler+0x134>)
 8005a30:	2207      	movs	r2, #7
 8005a32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a34:	e009      	b.n	8005a4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005a36:	4b2f      	ldr	r3, [pc, #188]	; (8005af4 <xPortStartScheduler+0x134>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	4a2d      	ldr	r2, [pc, #180]	; (8005af4 <xPortStartScheduler+0x134>)
 8005a3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005a40:	78fb      	ldrb	r3, [r7, #3]
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	005b      	lsls	r3, r3, #1
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a4a:	78fb      	ldrb	r3, [r7, #3]
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a52:	2b80      	cmp	r3, #128	; 0x80
 8005a54:	d0ef      	beq.n	8005a36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005a56:	4b27      	ldr	r3, [pc, #156]	; (8005af4 <xPortStartScheduler+0x134>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f1c3 0307 	rsb	r3, r3, #7
 8005a5e:	2b04      	cmp	r3, #4
 8005a60:	d00a      	beq.n	8005a78 <xPortStartScheduler+0xb8>
	__asm volatile
 8005a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a66:	f383 8811 	msr	BASEPRI, r3
 8005a6a:	f3bf 8f6f 	isb	sy
 8005a6e:	f3bf 8f4f 	dsb	sy
 8005a72:	60bb      	str	r3, [r7, #8]
}
 8005a74:	bf00      	nop
 8005a76:	e7fe      	b.n	8005a76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005a78:	4b1e      	ldr	r3, [pc, #120]	; (8005af4 <xPortStartScheduler+0x134>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	021b      	lsls	r3, r3, #8
 8005a7e:	4a1d      	ldr	r2, [pc, #116]	; (8005af4 <xPortStartScheduler+0x134>)
 8005a80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005a82:	4b1c      	ldr	r3, [pc, #112]	; (8005af4 <xPortStartScheduler+0x134>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a8a:	4a1a      	ldr	r2, [pc, #104]	; (8005af4 <xPortStartScheduler+0x134>)
 8005a8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	b2da      	uxtb	r2, r3
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005a96:	4b18      	ldr	r3, [pc, #96]	; (8005af8 <xPortStartScheduler+0x138>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a17      	ldr	r2, [pc, #92]	; (8005af8 <xPortStartScheduler+0x138>)
 8005a9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005aa0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005aa2:	4b15      	ldr	r3, [pc, #84]	; (8005af8 <xPortStartScheduler+0x138>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a14      	ldr	r2, [pc, #80]	; (8005af8 <xPortStartScheduler+0x138>)
 8005aa8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005aac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005aae:	f000 f8dd 	bl	8005c6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005ab2:	4b12      	ldr	r3, [pc, #72]	; (8005afc <xPortStartScheduler+0x13c>)
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005ab8:	f000 f8fc 	bl	8005cb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005abc:	4b10      	ldr	r3, [pc, #64]	; (8005b00 <xPortStartScheduler+0x140>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a0f      	ldr	r2, [pc, #60]	; (8005b00 <xPortStartScheduler+0x140>)
 8005ac2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005ac6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005ac8:	f7ff ff66 	bl	8005998 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005acc:	f7ff f856 	bl	8004b7c <vTaskSwitchContext>
	prvTaskExitError();
 8005ad0:	f7ff ff22 	bl	8005918 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3718      	adds	r7, #24
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	e000ed00 	.word	0xe000ed00
 8005ae4:	410fc271 	.word	0x410fc271
 8005ae8:	410fc270 	.word	0x410fc270
 8005aec:	e000e400 	.word	0xe000e400
 8005af0:	200012f8 	.word	0x200012f8
 8005af4:	200012fc 	.word	0x200012fc
 8005af8:	e000ed20 	.word	0xe000ed20
 8005afc:	2000000c 	.word	0x2000000c
 8005b00:	e000ef34 	.word	0xe000ef34

08005b04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
	__asm volatile
 8005b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b0e:	f383 8811 	msr	BASEPRI, r3
 8005b12:	f3bf 8f6f 	isb	sy
 8005b16:	f3bf 8f4f 	dsb	sy
 8005b1a:	607b      	str	r3, [r7, #4]
}
 8005b1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005b1e:	4b0f      	ldr	r3, [pc, #60]	; (8005b5c <vPortEnterCritical+0x58>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	3301      	adds	r3, #1
 8005b24:	4a0d      	ldr	r2, [pc, #52]	; (8005b5c <vPortEnterCritical+0x58>)
 8005b26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005b28:	4b0c      	ldr	r3, [pc, #48]	; (8005b5c <vPortEnterCritical+0x58>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d10f      	bne.n	8005b50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005b30:	4b0b      	ldr	r3, [pc, #44]	; (8005b60 <vPortEnterCritical+0x5c>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00a      	beq.n	8005b50 <vPortEnterCritical+0x4c>
	__asm volatile
 8005b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b3e:	f383 8811 	msr	BASEPRI, r3
 8005b42:	f3bf 8f6f 	isb	sy
 8005b46:	f3bf 8f4f 	dsb	sy
 8005b4a:	603b      	str	r3, [r7, #0]
}
 8005b4c:	bf00      	nop
 8005b4e:	e7fe      	b.n	8005b4e <vPortEnterCritical+0x4a>
	}
}
 8005b50:	bf00      	nop
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr
 8005b5c:	2000000c 	.word	0x2000000c
 8005b60:	e000ed04 	.word	0xe000ed04

08005b64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005b6a:	4b12      	ldr	r3, [pc, #72]	; (8005bb4 <vPortExitCritical+0x50>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d10a      	bne.n	8005b88 <vPortExitCritical+0x24>
	__asm volatile
 8005b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b76:	f383 8811 	msr	BASEPRI, r3
 8005b7a:	f3bf 8f6f 	isb	sy
 8005b7e:	f3bf 8f4f 	dsb	sy
 8005b82:	607b      	str	r3, [r7, #4]
}
 8005b84:	bf00      	nop
 8005b86:	e7fe      	b.n	8005b86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005b88:	4b0a      	ldr	r3, [pc, #40]	; (8005bb4 <vPortExitCritical+0x50>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	4a09      	ldr	r2, [pc, #36]	; (8005bb4 <vPortExitCritical+0x50>)
 8005b90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005b92:	4b08      	ldr	r3, [pc, #32]	; (8005bb4 <vPortExitCritical+0x50>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d105      	bne.n	8005ba6 <vPortExitCritical+0x42>
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	f383 8811 	msr	BASEPRI, r3
}
 8005ba4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ba6:	bf00      	nop
 8005ba8:	370c      	adds	r7, #12
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	2000000c 	.word	0x2000000c
	...

08005bc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005bc0:	f3ef 8009 	mrs	r0, PSP
 8005bc4:	f3bf 8f6f 	isb	sy
 8005bc8:	4b15      	ldr	r3, [pc, #84]	; (8005c20 <pxCurrentTCBConst>)
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	f01e 0f10 	tst.w	lr, #16
 8005bd0:	bf08      	it	eq
 8005bd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005bd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bda:	6010      	str	r0, [r2, #0]
 8005bdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005be0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005be4:	f380 8811 	msr	BASEPRI, r0
 8005be8:	f3bf 8f4f 	dsb	sy
 8005bec:	f3bf 8f6f 	isb	sy
 8005bf0:	f7fe ffc4 	bl	8004b7c <vTaskSwitchContext>
 8005bf4:	f04f 0000 	mov.w	r0, #0
 8005bf8:	f380 8811 	msr	BASEPRI, r0
 8005bfc:	bc09      	pop	{r0, r3}
 8005bfe:	6819      	ldr	r1, [r3, #0]
 8005c00:	6808      	ldr	r0, [r1, #0]
 8005c02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c06:	f01e 0f10 	tst.w	lr, #16
 8005c0a:	bf08      	it	eq
 8005c0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005c10:	f380 8809 	msr	PSP, r0
 8005c14:	f3bf 8f6f 	isb	sy
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	f3af 8000 	nop.w

08005c20 <pxCurrentTCBConst>:
 8005c20:	20000ccc 	.word	0x20000ccc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005c24:	bf00      	nop
 8005c26:	bf00      	nop

08005c28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
	__asm volatile
 8005c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c32:	f383 8811 	msr	BASEPRI, r3
 8005c36:	f3bf 8f6f 	isb	sy
 8005c3a:	f3bf 8f4f 	dsb	sy
 8005c3e:	607b      	str	r3, [r7, #4]
}
 8005c40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005c42:	f7fe fee1 	bl	8004a08 <xTaskIncrementTick>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d003      	beq.n	8005c54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005c4c:	4b06      	ldr	r3, [pc, #24]	; (8005c68 <xPortSysTickHandler+0x40>)
 8005c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c52:	601a      	str	r2, [r3, #0]
 8005c54:	2300      	movs	r3, #0
 8005c56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	f383 8811 	msr	BASEPRI, r3
}
 8005c5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005c60:	bf00      	nop
 8005c62:	3708      	adds	r7, #8
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	e000ed04 	.word	0xe000ed04

08005c6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005c70:	4b0b      	ldr	r3, [pc, #44]	; (8005ca0 <vPortSetupTimerInterrupt+0x34>)
 8005c72:	2200      	movs	r2, #0
 8005c74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005c76:	4b0b      	ldr	r3, [pc, #44]	; (8005ca4 <vPortSetupTimerInterrupt+0x38>)
 8005c78:	2200      	movs	r2, #0
 8005c7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005c7c:	4b0a      	ldr	r3, [pc, #40]	; (8005ca8 <vPortSetupTimerInterrupt+0x3c>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a0a      	ldr	r2, [pc, #40]	; (8005cac <vPortSetupTimerInterrupt+0x40>)
 8005c82:	fba2 2303 	umull	r2, r3, r2, r3
 8005c86:	099b      	lsrs	r3, r3, #6
 8005c88:	4a09      	ldr	r2, [pc, #36]	; (8005cb0 <vPortSetupTimerInterrupt+0x44>)
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005c8e:	4b04      	ldr	r3, [pc, #16]	; (8005ca0 <vPortSetupTimerInterrupt+0x34>)
 8005c90:	2207      	movs	r2, #7
 8005c92:	601a      	str	r2, [r3, #0]
}
 8005c94:	bf00      	nop
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop
 8005ca0:	e000e010 	.word	0xe000e010
 8005ca4:	e000e018 	.word	0xe000e018
 8005ca8:	20000000 	.word	0x20000000
 8005cac:	10624dd3 	.word	0x10624dd3
 8005cb0:	e000e014 	.word	0xe000e014

08005cb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005cb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005cc4 <vPortEnableVFP+0x10>
 8005cb8:	6801      	ldr	r1, [r0, #0]
 8005cba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005cbe:	6001      	str	r1, [r0, #0]
 8005cc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005cc2:	bf00      	nop
 8005cc4:	e000ed88 	.word	0xe000ed88

08005cc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005cc8:	b480      	push	{r7}
 8005cca:	b085      	sub	sp, #20
 8005ccc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005cce:	f3ef 8305 	mrs	r3, IPSR
 8005cd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2b0f      	cmp	r3, #15
 8005cd8:	d914      	bls.n	8005d04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005cda:	4a17      	ldr	r2, [pc, #92]	; (8005d38 <vPortValidateInterruptPriority+0x70>)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	4413      	add	r3, r2
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005ce4:	4b15      	ldr	r3, [pc, #84]	; (8005d3c <vPortValidateInterruptPriority+0x74>)
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	7afa      	ldrb	r2, [r7, #11]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d20a      	bcs.n	8005d04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf2:	f383 8811 	msr	BASEPRI, r3
 8005cf6:	f3bf 8f6f 	isb	sy
 8005cfa:	f3bf 8f4f 	dsb	sy
 8005cfe:	607b      	str	r3, [r7, #4]
}
 8005d00:	bf00      	nop
 8005d02:	e7fe      	b.n	8005d02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005d04:	4b0e      	ldr	r3, [pc, #56]	; (8005d40 <vPortValidateInterruptPriority+0x78>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005d0c:	4b0d      	ldr	r3, [pc, #52]	; (8005d44 <vPortValidateInterruptPriority+0x7c>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d90a      	bls.n	8005d2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d18:	f383 8811 	msr	BASEPRI, r3
 8005d1c:	f3bf 8f6f 	isb	sy
 8005d20:	f3bf 8f4f 	dsb	sy
 8005d24:	603b      	str	r3, [r7, #0]
}
 8005d26:	bf00      	nop
 8005d28:	e7fe      	b.n	8005d28 <vPortValidateInterruptPriority+0x60>
	}
 8005d2a:	bf00      	nop
 8005d2c:	3714      	adds	r7, #20
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	e000e3f0 	.word	0xe000e3f0
 8005d3c:	200012f8 	.word	0x200012f8
 8005d40:	e000ed0c 	.word	0xe000ed0c
 8005d44:	200012fc 	.word	0x200012fc

08005d48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b08a      	sub	sp, #40	; 0x28
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005d50:	2300      	movs	r3, #0
 8005d52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005d54:	f7fe fd9c 	bl	8004890 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005d58:	4b5b      	ldr	r3, [pc, #364]	; (8005ec8 <pvPortMalloc+0x180>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d101      	bne.n	8005d64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005d60:	f000 f920 	bl	8005fa4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005d64:	4b59      	ldr	r3, [pc, #356]	; (8005ecc <pvPortMalloc+0x184>)
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f040 8093 	bne.w	8005e98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d01d      	beq.n	8005db4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005d78:	2208      	movs	r2, #8
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f003 0307 	and.w	r3, r3, #7
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d014      	beq.n	8005db4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f023 0307 	bic.w	r3, r3, #7
 8005d90:	3308      	adds	r3, #8
 8005d92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f003 0307 	and.w	r3, r3, #7
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00a      	beq.n	8005db4 <pvPortMalloc+0x6c>
	__asm volatile
 8005d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da2:	f383 8811 	msr	BASEPRI, r3
 8005da6:	f3bf 8f6f 	isb	sy
 8005daa:	f3bf 8f4f 	dsb	sy
 8005dae:	617b      	str	r3, [r7, #20]
}
 8005db0:	bf00      	nop
 8005db2:	e7fe      	b.n	8005db2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d06e      	beq.n	8005e98 <pvPortMalloc+0x150>
 8005dba:	4b45      	ldr	r3, [pc, #276]	; (8005ed0 <pvPortMalloc+0x188>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d869      	bhi.n	8005e98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005dc4:	4b43      	ldr	r3, [pc, #268]	; (8005ed4 <pvPortMalloc+0x18c>)
 8005dc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005dc8:	4b42      	ldr	r3, [pc, #264]	; (8005ed4 <pvPortMalloc+0x18c>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005dce:	e004      	b.n	8005dda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d903      	bls.n	8005dec <pvPortMalloc+0xa4>
 8005de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d1f1      	bne.n	8005dd0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005dec:	4b36      	ldr	r3, [pc, #216]	; (8005ec8 <pvPortMalloc+0x180>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d050      	beq.n	8005e98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005df6:	6a3b      	ldr	r3, [r7, #32]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2208      	movs	r2, #8
 8005dfc:	4413      	add	r3, r2
 8005dfe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	6a3b      	ldr	r3, [r7, #32]
 8005e06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0a:	685a      	ldr	r2, [r3, #4]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	1ad2      	subs	r2, r2, r3
 8005e10:	2308      	movs	r3, #8
 8005e12:	005b      	lsls	r3, r3, #1
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d91f      	bls.n	8005e58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	f003 0307 	and.w	r3, r3, #7
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00a      	beq.n	8005e40 <pvPortMalloc+0xf8>
	__asm volatile
 8005e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e2e:	f383 8811 	msr	BASEPRI, r3
 8005e32:	f3bf 8f6f 	isb	sy
 8005e36:	f3bf 8f4f 	dsb	sy
 8005e3a:	613b      	str	r3, [r7, #16]
}
 8005e3c:	bf00      	nop
 8005e3e:	e7fe      	b.n	8005e3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e42:	685a      	ldr	r2, [r3, #4]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	1ad2      	subs	r2, r2, r3
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005e52:	69b8      	ldr	r0, [r7, #24]
 8005e54:	f000 f908 	bl	8006068 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005e58:	4b1d      	ldr	r3, [pc, #116]	; (8005ed0 <pvPortMalloc+0x188>)
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	4a1b      	ldr	r2, [pc, #108]	; (8005ed0 <pvPortMalloc+0x188>)
 8005e64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005e66:	4b1a      	ldr	r3, [pc, #104]	; (8005ed0 <pvPortMalloc+0x188>)
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	4b1b      	ldr	r3, [pc, #108]	; (8005ed8 <pvPortMalloc+0x190>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d203      	bcs.n	8005e7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005e72:	4b17      	ldr	r3, [pc, #92]	; (8005ed0 <pvPortMalloc+0x188>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a18      	ldr	r2, [pc, #96]	; (8005ed8 <pvPortMalloc+0x190>)
 8005e78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7c:	685a      	ldr	r2, [r3, #4]
 8005e7e:	4b13      	ldr	r3, [pc, #76]	; (8005ecc <pvPortMalloc+0x184>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	431a      	orrs	r2, r3
 8005e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005e8e:	4b13      	ldr	r3, [pc, #76]	; (8005edc <pvPortMalloc+0x194>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	3301      	adds	r3, #1
 8005e94:	4a11      	ldr	r2, [pc, #68]	; (8005edc <pvPortMalloc+0x194>)
 8005e96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005e98:	f7fe fd08 	bl	80048ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	f003 0307 	and.w	r3, r3, #7
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00a      	beq.n	8005ebc <pvPortMalloc+0x174>
	__asm volatile
 8005ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eaa:	f383 8811 	msr	BASEPRI, r3
 8005eae:	f3bf 8f6f 	isb	sy
 8005eb2:	f3bf 8f4f 	dsb	sy
 8005eb6:	60fb      	str	r3, [r7, #12]
}
 8005eb8:	bf00      	nop
 8005eba:	e7fe      	b.n	8005eba <pvPortMalloc+0x172>
	return pvReturn;
 8005ebc:	69fb      	ldr	r3, [r7, #28]
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3728      	adds	r7, #40	; 0x28
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	20004f08 	.word	0x20004f08
 8005ecc:	20004f1c 	.word	0x20004f1c
 8005ed0:	20004f0c 	.word	0x20004f0c
 8005ed4:	20004f00 	.word	0x20004f00
 8005ed8:	20004f10 	.word	0x20004f10
 8005edc:	20004f14 	.word	0x20004f14

08005ee0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b086      	sub	sp, #24
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d04d      	beq.n	8005f8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005ef2:	2308      	movs	r3, #8
 8005ef4:	425b      	negs	r3, r3
 8005ef6:	697a      	ldr	r2, [r7, #20]
 8005ef8:	4413      	add	r3, r2
 8005efa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	685a      	ldr	r2, [r3, #4]
 8005f04:	4b24      	ldr	r3, [pc, #144]	; (8005f98 <vPortFree+0xb8>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4013      	ands	r3, r2
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d10a      	bne.n	8005f24 <vPortFree+0x44>
	__asm volatile
 8005f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f12:	f383 8811 	msr	BASEPRI, r3
 8005f16:	f3bf 8f6f 	isb	sy
 8005f1a:	f3bf 8f4f 	dsb	sy
 8005f1e:	60fb      	str	r3, [r7, #12]
}
 8005f20:	bf00      	nop
 8005f22:	e7fe      	b.n	8005f22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00a      	beq.n	8005f42 <vPortFree+0x62>
	__asm volatile
 8005f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f30:	f383 8811 	msr	BASEPRI, r3
 8005f34:	f3bf 8f6f 	isb	sy
 8005f38:	f3bf 8f4f 	dsb	sy
 8005f3c:	60bb      	str	r3, [r7, #8]
}
 8005f3e:	bf00      	nop
 8005f40:	e7fe      	b.n	8005f40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	685a      	ldr	r2, [r3, #4]
 8005f46:	4b14      	ldr	r3, [pc, #80]	; (8005f98 <vPortFree+0xb8>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d01e      	beq.n	8005f8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d11a      	bne.n	8005f8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	685a      	ldr	r2, [r3, #4]
 8005f5c:	4b0e      	ldr	r3, [pc, #56]	; (8005f98 <vPortFree+0xb8>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	43db      	mvns	r3, r3
 8005f62:	401a      	ands	r2, r3
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005f68:	f7fe fc92 	bl	8004890 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	685a      	ldr	r2, [r3, #4]
 8005f70:	4b0a      	ldr	r3, [pc, #40]	; (8005f9c <vPortFree+0xbc>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4413      	add	r3, r2
 8005f76:	4a09      	ldr	r2, [pc, #36]	; (8005f9c <vPortFree+0xbc>)
 8005f78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005f7a:	6938      	ldr	r0, [r7, #16]
 8005f7c:	f000 f874 	bl	8006068 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005f80:	4b07      	ldr	r3, [pc, #28]	; (8005fa0 <vPortFree+0xc0>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	3301      	adds	r3, #1
 8005f86:	4a06      	ldr	r2, [pc, #24]	; (8005fa0 <vPortFree+0xc0>)
 8005f88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005f8a:	f7fe fc8f 	bl	80048ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005f8e:	bf00      	nop
 8005f90:	3718      	adds	r7, #24
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	20004f1c 	.word	0x20004f1c
 8005f9c:	20004f0c 	.word	0x20004f0c
 8005fa0:	20004f18 	.word	0x20004f18

08005fa4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005faa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005fae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005fb0:	4b27      	ldr	r3, [pc, #156]	; (8006050 <prvHeapInit+0xac>)
 8005fb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f003 0307 	and.w	r3, r3, #7
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00c      	beq.n	8005fd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	3307      	adds	r3, #7
 8005fc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f023 0307 	bic.w	r3, r3, #7
 8005fca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005fcc:	68ba      	ldr	r2, [r7, #8]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	4a1f      	ldr	r2, [pc, #124]	; (8006050 <prvHeapInit+0xac>)
 8005fd4:	4413      	add	r3, r2
 8005fd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005fdc:	4a1d      	ldr	r2, [pc, #116]	; (8006054 <prvHeapInit+0xb0>)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005fe2:	4b1c      	ldr	r3, [pc, #112]	; (8006054 <prvHeapInit+0xb0>)
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	68ba      	ldr	r2, [r7, #8]
 8005fec:	4413      	add	r3, r2
 8005fee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005ff0:	2208      	movs	r2, #8
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	1a9b      	subs	r3, r3, r2
 8005ff6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f023 0307 	bic.w	r3, r3, #7
 8005ffe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	4a15      	ldr	r2, [pc, #84]	; (8006058 <prvHeapInit+0xb4>)
 8006004:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006006:	4b14      	ldr	r3, [pc, #80]	; (8006058 <prvHeapInit+0xb4>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2200      	movs	r2, #0
 800600c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800600e:	4b12      	ldr	r3, [pc, #72]	; (8006058 <prvHeapInit+0xb4>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2200      	movs	r2, #0
 8006014:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	1ad2      	subs	r2, r2, r3
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006024:	4b0c      	ldr	r3, [pc, #48]	; (8006058 <prvHeapInit+0xb4>)
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	4a0a      	ldr	r2, [pc, #40]	; (800605c <prvHeapInit+0xb8>)
 8006032:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	4a09      	ldr	r2, [pc, #36]	; (8006060 <prvHeapInit+0xbc>)
 800603a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800603c:	4b09      	ldr	r3, [pc, #36]	; (8006064 <prvHeapInit+0xc0>)
 800603e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006042:	601a      	str	r2, [r3, #0]
}
 8006044:	bf00      	nop
 8006046:	3714      	adds	r7, #20
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr
 8006050:	20001300 	.word	0x20001300
 8006054:	20004f00 	.word	0x20004f00
 8006058:	20004f08 	.word	0x20004f08
 800605c:	20004f10 	.word	0x20004f10
 8006060:	20004f0c 	.word	0x20004f0c
 8006064:	20004f1c 	.word	0x20004f1c

08006068 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006068:	b480      	push	{r7}
 800606a:	b085      	sub	sp, #20
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006070:	4b28      	ldr	r3, [pc, #160]	; (8006114 <prvInsertBlockIntoFreeList+0xac>)
 8006072:	60fb      	str	r3, [r7, #12]
 8006074:	e002      	b.n	800607c <prvInsertBlockIntoFreeList+0x14>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	60fb      	str	r3, [r7, #12]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	429a      	cmp	r2, r3
 8006084:	d8f7      	bhi.n	8006076 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	4413      	add	r3, r2
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	429a      	cmp	r2, r3
 8006096:	d108      	bne.n	80060aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	685a      	ldr	r2, [r3, #4]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	441a      	add	r2, r3
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	68ba      	ldr	r2, [r7, #8]
 80060b4:	441a      	add	r2, r3
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d118      	bne.n	80060f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	4b15      	ldr	r3, [pc, #84]	; (8006118 <prvInsertBlockIntoFreeList+0xb0>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d00d      	beq.n	80060e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	685a      	ldr	r2, [r3, #4]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	441a      	add	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	601a      	str	r2, [r3, #0]
 80060e4:	e008      	b.n	80060f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80060e6:	4b0c      	ldr	r3, [pc, #48]	; (8006118 <prvInsertBlockIntoFreeList+0xb0>)
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	601a      	str	r2, [r3, #0]
 80060ee:	e003      	b.n	80060f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d002      	beq.n	8006106 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006106:	bf00      	nop
 8006108:	3714      	adds	r7, #20
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	20004f00 	.word	0x20004f00
 8006118:	20004f08 	.word	0x20004f08

0800611c <memset>:
 800611c:	4402      	add	r2, r0
 800611e:	4603      	mov	r3, r0
 8006120:	4293      	cmp	r3, r2
 8006122:	d100      	bne.n	8006126 <memset+0xa>
 8006124:	4770      	bx	lr
 8006126:	f803 1b01 	strb.w	r1, [r3], #1
 800612a:	e7f9      	b.n	8006120 <memset+0x4>

0800612c <__libc_init_array>:
 800612c:	b570      	push	{r4, r5, r6, lr}
 800612e:	4d0d      	ldr	r5, [pc, #52]	; (8006164 <__libc_init_array+0x38>)
 8006130:	4c0d      	ldr	r4, [pc, #52]	; (8006168 <__libc_init_array+0x3c>)
 8006132:	1b64      	subs	r4, r4, r5
 8006134:	10a4      	asrs	r4, r4, #2
 8006136:	2600      	movs	r6, #0
 8006138:	42a6      	cmp	r6, r4
 800613a:	d109      	bne.n	8006150 <__libc_init_array+0x24>
 800613c:	4d0b      	ldr	r5, [pc, #44]	; (800616c <__libc_init_array+0x40>)
 800613e:	4c0c      	ldr	r4, [pc, #48]	; (8006170 <__libc_init_array+0x44>)
 8006140:	f000 f826 	bl	8006190 <_init>
 8006144:	1b64      	subs	r4, r4, r5
 8006146:	10a4      	asrs	r4, r4, #2
 8006148:	2600      	movs	r6, #0
 800614a:	42a6      	cmp	r6, r4
 800614c:	d105      	bne.n	800615a <__libc_init_array+0x2e>
 800614e:	bd70      	pop	{r4, r5, r6, pc}
 8006150:	f855 3b04 	ldr.w	r3, [r5], #4
 8006154:	4798      	blx	r3
 8006156:	3601      	adds	r6, #1
 8006158:	e7ee      	b.n	8006138 <__libc_init_array+0xc>
 800615a:	f855 3b04 	ldr.w	r3, [r5], #4
 800615e:	4798      	blx	r3
 8006160:	3601      	adds	r6, #1
 8006162:	e7f2      	b.n	800614a <__libc_init_array+0x1e>
 8006164:	08006220 	.word	0x08006220
 8006168:	08006220 	.word	0x08006220
 800616c:	08006220 	.word	0x08006220
 8006170:	08006224 	.word	0x08006224

08006174 <memcpy>:
 8006174:	440a      	add	r2, r1
 8006176:	4291      	cmp	r1, r2
 8006178:	f100 33ff 	add.w	r3, r0, #4294967295
 800617c:	d100      	bne.n	8006180 <memcpy+0xc>
 800617e:	4770      	bx	lr
 8006180:	b510      	push	{r4, lr}
 8006182:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006186:	f803 4f01 	strb.w	r4, [r3, #1]!
 800618a:	4291      	cmp	r1, r2
 800618c:	d1f9      	bne.n	8006182 <memcpy+0xe>
 800618e:	bd10      	pop	{r4, pc}

08006190 <_init>:
 8006190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006192:	bf00      	nop
 8006194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006196:	bc08      	pop	{r3}
 8006198:	469e      	mov	lr, r3
 800619a:	4770      	bx	lr

0800619c <_fini>:
 800619c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800619e:	bf00      	nop
 80061a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061a2:	bc08      	pop	{r3}
 80061a4:	469e      	mov	lr, r3
 80061a6:	4770      	bx	lr
