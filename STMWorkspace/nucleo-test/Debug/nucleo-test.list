
nucleo-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005eb8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08006098  08006098  00016098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060f8  080060f8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080060f8  080060f8  000160f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006100  08006100  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006100  08006100  00016100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006104  08006104  00016104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006108  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f10  20000010  08006118  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004f20  08006118  00024f20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001abb9  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003952  00000000  00000000  0003ac3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001728  00000000  00000000  0003e590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000120a  00000000  00000000  0003fcb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000035c1  00000000  00000000  00040ec2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019fba  00000000  00000000  00044483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9f4c  00000000  00000000  0005e43d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006344  00000000  00000000  0013838c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0013e6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000010 	.word	0x20000010
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006080 	.word	0x08006080

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000014 	.word	0x20000014
 800021c:	08006080 	.word	0x08006080

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b970 	b.w	8000518 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	460f      	mov	r7, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d965      	bls.n	8000332 <__udivmoddi4+0xe2>
 8000266:	fab2 f382 	clz	r3, r2
 800026a:	b143      	cbz	r3, 800027e <__udivmoddi4+0x2e>
 800026c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000270:	f1c3 0220 	rsb	r2, r3, #32
 8000274:	409f      	lsls	r7, r3
 8000276:	fa20 f202 	lsr.w	r2, r0, r2
 800027a:	4317      	orrs	r7, r2
 800027c:	409c      	lsls	r4, r3
 800027e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000282:	fa1f f58c 	uxth.w	r5, ip
 8000286:	fbb7 f1fe 	udiv	r1, r7, lr
 800028a:	0c22      	lsrs	r2, r4, #16
 800028c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000290:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000294:	fb01 f005 	mul.w	r0, r1, r5
 8000298:	4290      	cmp	r0, r2
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029c:	eb1c 0202 	adds.w	r2, ip, r2
 80002a0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002a4:	f080 811c 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002a8:	4290      	cmp	r0, r2
 80002aa:	f240 8119 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002ae:	3902      	subs	r1, #2
 80002b0:	4462      	add	r2, ip
 80002b2:	1a12      	subs	r2, r2, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002c2:	fb00 f505 	mul.w	r5, r0, r5
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	d90a      	bls.n	80002e0 <__udivmoddi4+0x90>
 80002ca:	eb1c 0404 	adds.w	r4, ip, r4
 80002ce:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d2:	f080 8107 	bcs.w	80004e4 <__udivmoddi4+0x294>
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	f240 8104 	bls.w	80004e4 <__udivmoddi4+0x294>
 80002dc:	4464      	add	r4, ip
 80002de:	3802      	subs	r0, #2
 80002e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e4:	1b64      	subs	r4, r4, r5
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11e      	cbz	r6, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40dc      	lsrs	r4, r3
 80002ec:	2300      	movs	r3, #0
 80002ee:	e9c6 4300 	strd	r4, r3, [r6]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d908      	bls.n	800030c <__udivmoddi4+0xbc>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80ed 	beq.w	80004da <__udivmoddi4+0x28a>
 8000300:	2100      	movs	r1, #0
 8000302:	e9c6 0500 	strd	r0, r5, [r6]
 8000306:	4608      	mov	r0, r1
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	fab3 f183 	clz	r1, r3
 8000310:	2900      	cmp	r1, #0
 8000312:	d149      	bne.n	80003a8 <__udivmoddi4+0x158>
 8000314:	42ab      	cmp	r3, r5
 8000316:	d302      	bcc.n	800031e <__udivmoddi4+0xce>
 8000318:	4282      	cmp	r2, r0
 800031a:	f200 80f8 	bhi.w	800050e <__udivmoddi4+0x2be>
 800031e:	1a84      	subs	r4, r0, r2
 8000320:	eb65 0203 	sbc.w	r2, r5, r3
 8000324:	2001      	movs	r0, #1
 8000326:	4617      	mov	r7, r2
 8000328:	2e00      	cmp	r6, #0
 800032a:	d0e2      	beq.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	e9c6 4700 	strd	r4, r7, [r6]
 8000330:	e7df      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000332:	b902      	cbnz	r2, 8000336 <__udivmoddi4+0xe6>
 8000334:	deff      	udf	#255	; 0xff
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	2b00      	cmp	r3, #0
 800033c:	f040 8090 	bne.w	8000460 <__udivmoddi4+0x210>
 8000340:	1a8a      	subs	r2, r1, r2
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2101      	movs	r1, #1
 800034c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000350:	fb07 2015 	mls	r0, r7, r5, r2
 8000354:	0c22      	lsrs	r2, r4, #16
 8000356:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800035a:	fb0e f005 	mul.w	r0, lr, r5
 800035e:	4290      	cmp	r0, r2
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x124>
 8000362:	eb1c 0202 	adds.w	r2, ip, r2
 8000366:	f105 38ff 	add.w	r8, r5, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4290      	cmp	r0, r2
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2b8>
 8000372:	4645      	mov	r5, r8
 8000374:	1a12      	subs	r2, r2, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb2 f0f7 	udiv	r0, r2, r7
 800037c:	fb07 2210 	mls	r2, r7, r0, r2
 8000380:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x14e>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 32ff 	add.w	r2, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x14c>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2c2>
 800039c:	4610      	mov	r0, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003a6:	e79f      	b.n	80002e8 <__udivmoddi4+0x98>
 80003a8:	f1c1 0720 	rsb	r7, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ba:	fa20 f307 	lsr.w	r3, r0, r7
 80003be:	40fd      	lsrs	r5, r7
 80003c0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c4:	4323      	orrs	r3, r4
 80003c6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	fb09 5518 	mls	r5, r9, r8, r5
 80003d2:	0c1c      	lsrs	r4, r3, #16
 80003d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d8:	fb08 f50e 	mul.w	r5, r8, lr
 80003dc:	42a5      	cmp	r5, r4
 80003de:	fa02 f201 	lsl.w	r2, r2, r1
 80003e2:	fa00 f001 	lsl.w	r0, r0, r1
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2b4>
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2b4>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4464      	add	r4, ip
 8000400:	1b64      	subs	r4, r4, r5
 8000402:	b29d      	uxth	r5, r3
 8000404:	fbb4 f3f9 	udiv	r3, r4, r9
 8000408:	fb09 4413 	mls	r4, r9, r3, r4
 800040c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000410:	fb03 fe0e 	mul.w	lr, r3, lr
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2ac>
 8000422:	45a6      	cmp	lr, r4
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2ac>
 8000426:	3b02      	subs	r3, #2
 8000428:	4464      	add	r4, ip
 800042a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800042e:	fba3 9502 	umull	r9, r5, r3, r2
 8000432:	eba4 040e 	sub.w	r4, r4, lr
 8000436:	42ac      	cmp	r4, r5
 8000438:	46c8      	mov	r8, r9
 800043a:	46ae      	mov	lr, r5
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x29c>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x298>
 8000440:	b156      	cbz	r6, 8000458 <__udivmoddi4+0x208>
 8000442:	ebb0 0208 	subs.w	r2, r0, r8
 8000446:	eb64 040e 	sbc.w	r4, r4, lr
 800044a:	fa04 f707 	lsl.w	r7, r4, r7
 800044e:	40ca      	lsrs	r2, r1
 8000450:	40cc      	lsrs	r4, r1
 8000452:	4317      	orrs	r7, r2
 8000454:	e9c6 7400 	strd	r7, r4, [r6]
 8000458:	4618      	mov	r0, r3
 800045a:	2100      	movs	r1, #0
 800045c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000460:	f1c3 0120 	rsb	r1, r3, #32
 8000464:	fa02 fc03 	lsl.w	ip, r2, r3
 8000468:	fa20 f201 	lsr.w	r2, r0, r1
 800046c:	fa25 f101 	lsr.w	r1, r5, r1
 8000470:	409d      	lsls	r5, r3
 8000472:	432a      	orrs	r2, r5
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000480:	fb07 1510 	mls	r5, r7, r0, r1
 8000484:	0c11      	lsrs	r1, r2, #16
 8000486:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800048a:	fb00 f50e 	mul.w	r5, r0, lr
 800048e:	428d      	cmp	r5, r1
 8000490:	fa04 f403 	lsl.w	r4, r4, r3
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x258>
 8000496:	eb1c 0101 	adds.w	r1, ip, r1
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004a0:	428d      	cmp	r5, r1
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1b49      	subs	r1, r1, r5
 80004aa:	b292      	uxth	r2, r2
 80004ac:	fbb1 f5f7 	udiv	r5, r1, r7
 80004b0:	fb07 1115 	mls	r1, r7, r5, r1
 80004b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b8:	fb05 f10e 	mul.w	r1, r5, lr
 80004bc:	4291      	cmp	r1, r2
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x282>
 80004c0:	eb1c 0202 	adds.w	r2, ip, r2
 80004c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 80004ca:	4291      	cmp	r1, r2
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 80004ce:	3d02      	subs	r5, #2
 80004d0:	4462      	add	r2, ip
 80004d2:	1a52      	subs	r2, r2, r1
 80004d4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0xfc>
 80004da:	4631      	mov	r1, r6
 80004dc:	4630      	mov	r0, r6
 80004de:	e708      	b.n	80002f2 <__udivmoddi4+0xa2>
 80004e0:	4639      	mov	r1, r7
 80004e2:	e6e6      	b.n	80002b2 <__udivmoddi4+0x62>
 80004e4:	4610      	mov	r0, r2
 80004e6:	e6fb      	b.n	80002e0 <__udivmoddi4+0x90>
 80004e8:	4548      	cmp	r0, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004f4:	3b01      	subs	r3, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f8:	4645      	mov	r5, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x282>
 80004fc:	462b      	mov	r3, r5
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1da>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x258>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000508:	3d02      	subs	r5, #2
 800050a:	4462      	add	r2, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x124>
 800050e:	4608      	mov	r0, r1
 8000510:	e70a      	b.n	8000328 <__udivmoddi4+0xd8>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x14e>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f000 fb6a 	bl	8000bf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f820 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f000 f91a 	bl	8000760 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800052c:	f000 f8be 	bl	80006ac <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000530:	f000 f8e6 	bl	8000700 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM7_Init();
 8000534:	f000 f884 	bl	8000640 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim7); // Enable TIM7
 8000538:	4807      	ldr	r0, [pc, #28]	; (8000558 <main+0x3c>)
 800053a:	f001 ff95 	bl	8002468 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800053e:	f003 f867 	bl	8003610 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blinkyTask */
  blinkyTaskHandle = osThreadNew(BlinkyLEDTask, NULL, &blinkyTask_attributes);
 8000542:	4a06      	ldr	r2, [pc, #24]	; (800055c <main+0x40>)
 8000544:	2100      	movs	r1, #0
 8000546:	4806      	ldr	r0, [pc, #24]	; (8000560 <main+0x44>)
 8000548:	f003 f8ac 	bl	80036a4 <osThreadNew>
 800054c:	4603      	mov	r3, r0
 800054e:	4a05      	ldr	r2, [pc, #20]	; (8000564 <main+0x48>)
 8000550:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000552:	f003 f881 	bl	8003658 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000556:	e7fe      	b.n	8000556 <main+0x3a>
 8000558:	2000002c 	.word	0x2000002c
 800055c:	080060bc 	.word	0x080060bc
 8000560:	080008bd 	.word	0x080008bd
 8000564:	200005c4 	.word	0x200005c4

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b094      	sub	sp, #80	; 0x50
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 031c 	add.w	r3, r7, #28
 8000572:	2234      	movs	r2, #52	; 0x34
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f005 fd48 	bl	800600c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	f107 0308 	add.w	r3, r7, #8
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800058c:	2300      	movs	r3, #0
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	4b29      	ldr	r3, [pc, #164]	; (8000638 <SystemClock_Config+0xd0>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000594:	4a28      	ldr	r2, [pc, #160]	; (8000638 <SystemClock_Config+0xd0>)
 8000596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059a:	6413      	str	r3, [r2, #64]	; 0x40
 800059c:	4b26      	ldr	r3, [pc, #152]	; (8000638 <SystemClock_Config+0xd0>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a8:	2300      	movs	r3, #0
 80005aa:	603b      	str	r3, [r7, #0]
 80005ac:	4b23      	ldr	r3, [pc, #140]	; (800063c <SystemClock_Config+0xd4>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a22      	ldr	r2, [pc, #136]	; (800063c <SystemClock_Config+0xd4>)
 80005b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005b6:	6013      	str	r3, [r2, #0]
 80005b8:	4b20      	ldr	r3, [pc, #128]	; (800063c <SystemClock_Config+0xd4>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005c0:	603b      	str	r3, [r7, #0]
 80005c2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c4:	2301      	movs	r3, #1
 80005c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005c8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005cc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ce:	2302      	movs	r3, #2
 80005d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005d8:	2308      	movs	r3, #8
 80005da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 384;
 80005dc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80005e0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005e2:	2304      	movs	r3, #4
 80005e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80005e6:	2308      	movs	r3, #8
 80005e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005ea:	2302      	movs	r3, #2
 80005ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ee:	f107 031c 	add.w	r3, r7, #28
 80005f2:	4618      	mov	r0, r3
 80005f4:	f001 fc64 	bl	8001ec0 <HAL_RCC_OscConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005fe:	f000 f97b 	bl	80008f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000602:	230f      	movs	r3, #15
 8000604:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000606:	2302      	movs	r3, #2
 8000608:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800060e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000612:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000618:	f107 0308 	add.w	r3, r7, #8
 800061c:	2103      	movs	r1, #3
 800061e:	4618      	mov	r0, r3
 8000620:	f000 ffa2 	bl	8001568 <HAL_RCC_ClockConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800062a:	f000 f965 	bl	80008f8 <Error_Handler>
  }
}
 800062e:	bf00      	nop
 8000630:	3750      	adds	r7, #80	; 0x50
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40023800 	.word	0x40023800
 800063c:	40007000 	.word	0x40007000

08000640 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000646:	463b      	mov	r3, r7
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800064e:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <MX_TIM7_Init+0x64>)
 8000650:	4a15      	ldr	r2, [pc, #84]	; (80006a8 <MX_TIM7_Init+0x68>)
 8000652:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 99;
 8000654:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <MX_TIM7_Init+0x64>)
 8000656:	2263      	movs	r2, #99	; 0x63
 8000658:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800065a:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <MX_TIM7_Init+0x64>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8000660:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <MX_TIM7_Init+0x64>)
 8000662:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000666:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000668:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <MX_TIM7_Init+0x64>)
 800066a:	2200      	movs	r2, #0
 800066c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800066e:	480d      	ldr	r0, [pc, #52]	; (80006a4 <MX_TIM7_Init+0x64>)
 8000670:	f001 feaa 	bl	80023c8 <HAL_TIM_Base_Init>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800067a:	f000 f93d 	bl	80008f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800067e:	2300      	movs	r3, #0
 8000680:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000682:	2300      	movs	r3, #0
 8000684:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000686:	463b      	mov	r3, r7
 8000688:	4619      	mov	r1, r3
 800068a:	4806      	ldr	r0, [pc, #24]	; (80006a4 <MX_TIM7_Init+0x64>)
 800068c:	f002 f92e 	bl	80028ec <HAL_TIMEx_MasterConfigSynchronization>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000696:	f000 f92f 	bl	80008f8 <Error_Handler>
  /* USER CODE BEGIN TIM7_Init 2 */
  /* Enable the TIM7 global interrupt */

  /* USER CODE END TIM7_Init 2 */

}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	2000002c 	.word	0x2000002c
 80006a8:	40001400 	.word	0x40001400

080006ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006b0:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_USART3_UART_Init+0x4c>)
 80006b2:	4a12      	ldr	r2, [pc, #72]	; (80006fc <MX_USART3_UART_Init+0x50>)
 80006b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006b6:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <MX_USART3_UART_Init+0x4c>)
 80006b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_USART3_UART_Init+0x4c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_USART3_UART_Init+0x4c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <MX_USART3_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_USART3_UART_Init+0x4c>)
 80006d2:	220c      	movs	r2, #12
 80006d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d6:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <MX_USART3_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_USART3_UART_Init+0x4c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006e2:	4805      	ldr	r0, [pc, #20]	; (80006f8 <MX_USART3_UART_Init+0x4c>)
 80006e4:	f002 f992 	bl	8002a0c <HAL_UART_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80006ee:	f000 f903 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000074 	.word	0x20000074
 80006fc:	40004800 	.word	0x40004800

08000700 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000704:	4b15      	ldr	r3, [pc, #84]	; (800075c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000706:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800070a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800070c:	4b13      	ldr	r3, [pc, #76]	; (800075c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800070e:	2206      	movs	r2, #6
 8000710:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000712:	4b12      	ldr	r3, [pc, #72]	; (800075c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000714:	2202      	movs	r2, #2
 8000716:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000718:	4b10      	ldr	r3, [pc, #64]	; (800075c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800071a:	2200      	movs	r2, #0
 800071c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800071e:	4b0f      	ldr	r3, [pc, #60]	; (800075c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000720:	2202      	movs	r2, #2
 8000722:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000724:	4b0d      	ldr	r3, [pc, #52]	; (800075c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000726:	2201      	movs	r2, #1
 8000728:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800072a:	4b0c      	ldr	r3, [pc, #48]	; (800075c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800072c:	2200      	movs	r2, #0
 800072e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000730:	4b0a      	ldr	r3, [pc, #40]	; (800075c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000732:	2200      	movs	r2, #0
 8000734:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000736:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000738:	2201      	movs	r2, #1
 800073a:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800073c:	4b07      	ldr	r3, [pc, #28]	; (800075c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800073e:	2201      	movs	r2, #1
 8000740:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000744:	2200      	movs	r2, #0
 8000746:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000748:	4804      	ldr	r0, [pc, #16]	; (800075c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800074a:	f000 fdc4 	bl	80012d6 <HAL_PCD_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 8000754:	f000 f8d0 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	200000b8 	.word	0x200000b8

08000760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08c      	sub	sp, #48	; 0x30
 8000764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	61bb      	str	r3, [r7, #24]
 800077a:	4b4c      	ldr	r3, [pc, #304]	; (80008ac <MX_GPIO_Init+0x14c>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a4b      	ldr	r2, [pc, #300]	; (80008ac <MX_GPIO_Init+0x14c>)
 8000780:	f043 0304 	orr.w	r3, r3, #4
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b49      	ldr	r3, [pc, #292]	; (80008ac <MX_GPIO_Init+0x14c>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0304 	and.w	r3, r3, #4
 800078e:	61bb      	str	r3, [r7, #24]
 8000790:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]
 8000796:	4b45      	ldr	r3, [pc, #276]	; (80008ac <MX_GPIO_Init+0x14c>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a44      	ldr	r2, [pc, #272]	; (80008ac <MX_GPIO_Init+0x14c>)
 800079c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b42      	ldr	r3, [pc, #264]	; (80008ac <MX_GPIO_Init+0x14c>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007aa:	617b      	str	r3, [r7, #20]
 80007ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
 80007b2:	4b3e      	ldr	r3, [pc, #248]	; (80008ac <MX_GPIO_Init+0x14c>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a3d      	ldr	r2, [pc, #244]	; (80008ac <MX_GPIO_Init+0x14c>)
 80007b8:	f043 0302 	orr.w	r3, r3, #2
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b3b      	ldr	r3, [pc, #236]	; (80008ac <MX_GPIO_Init+0x14c>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0302 	and.w	r3, r3, #2
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	4b37      	ldr	r3, [pc, #220]	; (80008ac <MX_GPIO_Init+0x14c>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a36      	ldr	r2, [pc, #216]	; (80008ac <MX_GPIO_Init+0x14c>)
 80007d4:	f043 0308 	orr.w	r3, r3, #8
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b34      	ldr	r3, [pc, #208]	; (80008ac <MX_GPIO_Init+0x14c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0308 	and.w	r3, r3, #8
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	4b30      	ldr	r3, [pc, #192]	; (80008ac <MX_GPIO_Init+0x14c>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a2f      	ldr	r2, [pc, #188]	; (80008ac <MX_GPIO_Init+0x14c>)
 80007f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b2d      	ldr	r3, [pc, #180]	; (80008ac <MX_GPIO_Init+0x14c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	4b29      	ldr	r3, [pc, #164]	; (80008ac <MX_GPIO_Init+0x14c>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a28      	ldr	r2, [pc, #160]	; (80008ac <MX_GPIO_Init+0x14c>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b26      	ldr	r3, [pc, #152]	; (80008ac <MX_GPIO_Init+0x14c>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	f244 0181 	movw	r1, #16513	; 0x4081
 8000824:	4822      	ldr	r0, [pc, #136]	; (80008b0 <MX_GPIO_Init+0x150>)
 8000826:	f000 fd23 	bl	8001270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	2140      	movs	r1, #64	; 0x40
 800082e:	4821      	ldr	r0, [pc, #132]	; (80008b4 <MX_GPIO_Init+0x154>)
 8000830:	f000 fd1e 	bl	8001270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000834:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800083a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800083e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000844:	f107 031c 	add.w	r3, r7, #28
 8000848:	4619      	mov	r1, r3
 800084a:	481b      	ldr	r0, [pc, #108]	; (80008b8 <MX_GPIO_Init+0x158>)
 800084c:	f000 fb7c 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000850:	f244 0381 	movw	r3, #16513	; 0x4081
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	4619      	mov	r1, r3
 8000868:	4811      	ldr	r0, [pc, #68]	; (80008b0 <MX_GPIO_Init+0x150>)
 800086a:	f000 fb6d 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800086e:	2340      	movs	r3, #64	; 0x40
 8000870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000872:	2301      	movs	r3, #1
 8000874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	4619      	mov	r1, r3
 8000884:	480b      	ldr	r0, [pc, #44]	; (80008b4 <MX_GPIO_Init+0x154>)
 8000886:	f000 fb5f 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800088a:	2380      	movs	r3, #128	; 0x80
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088e:	2300      	movs	r3, #0
 8000890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	4805      	ldr	r0, [pc, #20]	; (80008b4 <MX_GPIO_Init+0x154>)
 800089e:	f000 fb53 	bl	8000f48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008a2:	bf00      	nop
 80008a4:	3730      	adds	r7, #48	; 0x30
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40023800 	.word	0x40023800
 80008b0:	40020400 	.word	0x40020400
 80008b4:	40021800 	.word	0x40021800
 80008b8:	40020800 	.word	0x40020800

080008bc <BlinkyLEDTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_BlinkyLEDTask */
void BlinkyLEDTask(void *argument)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	for (;;)
	{
		if ((ms_counter % 1000) == 0)
 80008c4:	4b09      	ldr	r3, [pc, #36]	; (80008ec <BlinkyLEDTask+0x30>)
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <BlinkyLEDTask+0x34>)
 80008ca:	fba3 1302 	umull	r1, r3, r3, r2
 80008ce:	099b      	lsrs	r3, r3, #6
 80008d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008d4:	fb01 f303 	mul.w	r3, r1, r3
 80008d8:	1ad3      	subs	r3, r2, r3
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d1f2      	bne.n	80008c4 <BlinkyLEDTask+0x8>
		{
			HAL_GPIO_TogglePin(GPIOB, LD1_Pin | LD2_Pin | LD3_Pin);
 80008de:	f244 0181 	movw	r1, #16513	; 0x4081
 80008e2:	4804      	ldr	r0, [pc, #16]	; (80008f4 <BlinkyLEDTask+0x38>)
 80008e4:	f000 fcdd 	bl	80012a2 <HAL_GPIO_TogglePin>
		if ((ms_counter % 1000) == 0)
 80008e8:	e7ec      	b.n	80008c4 <BlinkyLEDTask+0x8>
 80008ea:	bf00      	nop
 80008ec:	200005c8 	.word	0x200005c8
 80008f0:	10624dd3 	.word	0x10624dd3
 80008f4:	40020400 	.word	0x40020400

080008f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008fc:	b672      	cpsid	i
}
 80008fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000900:	e7fe      	b.n	8000900 <Error_Handler+0x8>
	...

08000904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	4b12      	ldr	r3, [pc, #72]	; (8000958 <HAL_MspInit+0x54>)
 8000910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000912:	4a11      	ldr	r2, [pc, #68]	; (8000958 <HAL_MspInit+0x54>)
 8000914:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000918:	6453      	str	r3, [r2, #68]	; 0x44
 800091a:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <HAL_MspInit+0x54>)
 800091c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	603b      	str	r3, [r7, #0]
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <HAL_MspInit+0x54>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092e:	4a0a      	ldr	r2, [pc, #40]	; (8000958 <HAL_MspInit+0x54>)
 8000930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000934:	6413      	str	r3, [r2, #64]	; 0x40
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <HAL_MspInit+0x54>)
 8000938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000942:	2200      	movs	r2, #0
 8000944:	210f      	movs	r1, #15
 8000946:	f06f 0001 	mvn.w	r0, #1
 800094a:	f000 fac6 	bl	8000eda <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40023800 	.word	0x40023800

0800095c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a0e      	ldr	r2, [pc, #56]	; (80009a4 <HAL_TIM_Base_MspInit+0x48>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d115      	bne.n	800099a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <HAL_TIM_Base_MspInit+0x4c>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	4a0c      	ldr	r2, [pc, #48]	; (80009a8 <HAL_TIM_Base_MspInit+0x4c>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	6413      	str	r3, [r2, #64]	; 0x40
 800097e:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <HAL_TIM_Base_MspInit+0x4c>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	f003 0320 	and.w	r3, r3, #32
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800098a:	2200      	movs	r2, #0
 800098c:	2105      	movs	r1, #5
 800098e:	2037      	movs	r0, #55	; 0x37
 8000990:	f000 faa3 	bl	8000eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000994:	2037      	movs	r0, #55	; 0x37
 8000996:	f000 fabc 	bl	8000f12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800099a:	bf00      	nop
 800099c:	3710      	adds	r7, #16
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40001400 	.word	0x40001400
 80009a8:	40023800 	.word	0x40023800

080009ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08a      	sub	sp, #40	; 0x28
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a19      	ldr	r2, [pc, #100]	; (8000a30 <HAL_UART_MspInit+0x84>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d12c      	bne.n	8000a28 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <HAL_UART_MspInit+0x88>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	4a17      	ldr	r2, [pc, #92]	; (8000a34 <HAL_UART_MspInit+0x88>)
 80009d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009dc:	6413      	str	r3, [r2, #64]	; 0x40
 80009de:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <HAL_UART_MspInit+0x88>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <HAL_UART_MspInit+0x88>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a10      	ldr	r2, [pc, #64]	; (8000a34 <HAL_UART_MspInit+0x88>)
 80009f4:	f043 0308 	orr.w	r3, r3, #8
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <HAL_UART_MspInit+0x88>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0308 	and.w	r3, r3, #8
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a06:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a14:	2303      	movs	r3, #3
 8000a16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a18:	2307      	movs	r3, #7
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	4619      	mov	r1, r3
 8000a22:	4805      	ldr	r0, [pc, #20]	; (8000a38 <HAL_UART_MspInit+0x8c>)
 8000a24:	f000 fa90 	bl	8000f48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a28:	bf00      	nop
 8000a2a:	3728      	adds	r7, #40	; 0x28
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40004800 	.word	0x40004800
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40020c00 	.word	0x40020c00

08000a3c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b0a0      	sub	sp, #128	; 0x80
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	2258      	movs	r2, #88	; 0x58
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f005 fad5 	bl	800600c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a6a:	d14d      	bne.n	8000b08 <HAL_PCD_MspInit+0xcc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000a6c:	2320      	movs	r3, #32
 8000a6e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000a70:	2300      	movs	r3, #0
 8000a72:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f000 ff95 	bl	80019a8 <HAL_RCCEx_PeriphCLKConfig>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 8000a84:	f7ff ff38 	bl	80008f8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a88:	2300      	movs	r3, #0
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	4b20      	ldr	r3, [pc, #128]	; (8000b10 <HAL_PCD_MspInit+0xd4>)
 8000a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a90:	4a1f      	ldr	r2, [pc, #124]	; (8000b10 <HAL_PCD_MspInit+0xd4>)
 8000a92:	f043 0301 	orr.w	r3, r3, #1
 8000a96:	6313      	str	r3, [r2, #48]	; 0x30
 8000a98:	4b1d      	ldr	r3, [pc, #116]	; (8000b10 <HAL_PCD_MspInit+0xd4>)
 8000a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9c:	f003 0301 	and.w	r3, r3, #1
 8000aa0:	613b      	str	r3, [r7, #16]
 8000aa2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000aa4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000aa8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ab6:	230a      	movs	r3, #10
 8000ab8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aba:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4814      	ldr	r0, [pc, #80]	; (8000b14 <HAL_PCD_MspInit+0xd8>)
 8000ac2:	f000 fa41 	bl	8000f48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ac6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aca:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000acc:	2300      	movs	r3, #0
 8000ace:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ad4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000ad8:	4619      	mov	r1, r3
 8000ada:	480e      	ldr	r0, [pc, #56]	; (8000b14 <HAL_PCD_MspInit+0xd8>)
 8000adc:	f000 fa34 	bl	8000f48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ae0:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <HAL_PCD_MspInit+0xd4>)
 8000ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ae4:	4a0a      	ldr	r2, [pc, #40]	; (8000b10 <HAL_PCD_MspInit+0xd4>)
 8000ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aea:	6353      	str	r3, [r2, #52]	; 0x34
 8000aec:	2300      	movs	r3, #0
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <HAL_PCD_MspInit+0xd4>)
 8000af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af4:	4a06      	ldr	r2, [pc, #24]	; (8000b10 <HAL_PCD_MspInit+0xd4>)
 8000af6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000afa:	6453      	str	r3, [r2, #68]	; 0x44
 8000afc:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <HAL_PCD_MspInit+0xd4>)
 8000afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000b08:	bf00      	nop
 8000b0a:	3780      	adds	r7, #128	; 0x80
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40020000 	.word	0x40020000

08000b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <NMI_Handler+0x4>

08000b1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b22:	e7fe      	b.n	8000b22 <HardFault_Handler+0x4>

08000b24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <MemManage_Handler+0x4>

08000b2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b2e:	e7fe      	b.n	8000b2e <BusFault_Handler+0x4>

08000b30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <UsageFault_Handler+0x4>

08000b36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b48:	f000 f8a8 	bl	8000c9c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b4c:	f004 f9fa 	bl	8004f44 <xTaskGetSchedulerState>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d001      	beq.n	8000b5a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b56:	f004 ffdf 	bl	8005b18 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
	...

08000b60 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000b64:	4804      	ldr	r0, [pc, #16]	; (8000b78 <TIM7_IRQHandler+0x18>)
 8000b66:	f001 fce7 	bl	8002538 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  ms_counter += 1;
 8000b6a:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <TIM7_IRQHandler+0x1c>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	4a02      	ldr	r2, [pc, #8]	; (8000b7c <TIM7_IRQHandler+0x1c>)
 8000b72:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM7_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	2000002c 	.word	0x2000002c
 8000b7c:	200005c8 	.word	0x200005c8

08000b80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <SystemInit+0x20>)
 8000b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b8a:	4a05      	ldr	r2, [pc, #20]	; (8000ba0 <SystemInit+0x20>)
 8000b8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000ba4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bdc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ba8:	480d      	ldr	r0, [pc, #52]	; (8000be0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000baa:	490e      	ldr	r1, [pc, #56]	; (8000be4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bac:	4a0e      	ldr	r2, [pc, #56]	; (8000be8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb0:	e002      	b.n	8000bb8 <LoopCopyDataInit>

08000bb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bb6:	3304      	adds	r3, #4

08000bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bbc:	d3f9      	bcc.n	8000bb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bbe:	4a0b      	ldr	r2, [pc, #44]	; (8000bec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bc0:	4c0b      	ldr	r4, [pc, #44]	; (8000bf0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc4:	e001      	b.n	8000bca <LoopFillZerobss>

08000bc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc8:	3204      	adds	r2, #4

08000bca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bcc:	d3fb      	bcc.n	8000bc6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bce:	f7ff ffd7 	bl	8000b80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bd2:	f005 fa23 	bl	800601c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bd6:	f7ff fca1 	bl	800051c <main>
  bx  lr    
 8000bda:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000bdc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000be0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000be8:	08006108 	.word	0x08006108
  ldr r2, =_sbss
 8000bec:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000bf0:	20004f20 	.word	0x20004f20

08000bf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bf4:	e7fe      	b.n	8000bf4 <ADC_IRQHandler>
	...

08000bf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bfc:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <HAL_Init+0x40>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a0d      	ldr	r2, [pc, #52]	; (8000c38 <HAL_Init+0x40>)
 8000c02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c08:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <HAL_Init+0x40>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a0a      	ldr	r2, [pc, #40]	; (8000c38 <HAL_Init+0x40>)
 8000c0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c14:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <HAL_Init+0x40>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a07      	ldr	r2, [pc, #28]	; (8000c38 <HAL_Init+0x40>)
 8000c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c20:	2003      	movs	r0, #3
 8000c22:	f000 f94f 	bl	8000ec4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c26:	200f      	movs	r0, #15
 8000c28:	f000 f808 	bl	8000c3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c2c:	f7ff fe6a 	bl	8000904 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c30:	2300      	movs	r3, #0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40023c00 	.word	0x40023c00

08000c3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c44:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <HAL_InitTick+0x54>)
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <HAL_InitTick+0x58>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f000 f967 	bl	8000f2e <HAL_SYSTICK_Config>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	e00e      	b.n	8000c88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2b0f      	cmp	r3, #15
 8000c6e:	d80a      	bhi.n	8000c86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c70:	2200      	movs	r2, #0
 8000c72:	6879      	ldr	r1, [r7, #4]
 8000c74:	f04f 30ff 	mov.w	r0, #4294967295
 8000c78:	f000 f92f 	bl	8000eda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c7c:	4a06      	ldr	r2, [pc, #24]	; (8000c98 <HAL_InitTick+0x5c>)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c82:	2300      	movs	r3, #0
 8000c84:	e000      	b.n	8000c88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20000000 	.word	0x20000000
 8000c94:	20000008 	.word	0x20000008
 8000c98:	20000004 	.word	0x20000004

08000c9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_IncTick+0x20>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <HAL_IncTick+0x24>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4413      	add	r3, r2
 8000cac:	4a04      	ldr	r2, [pc, #16]	; (8000cc0 <HAL_IncTick+0x24>)
 8000cae:	6013      	str	r3, [r2, #0]
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	20000008 	.word	0x20000008
 8000cc0:	200005cc 	.word	0x200005cc

08000cc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc8:	4b03      	ldr	r3, [pc, #12]	; (8000cd8 <HAL_GetTick+0x14>)
 8000cca:	681b      	ldr	r3, [r3, #0]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	200005cc 	.word	0x200005cc

08000cdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ce4:	f7ff ffee 	bl	8000cc4 <HAL_GetTick>
 8000ce8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cf4:	d005      	beq.n	8000d02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cf6:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <HAL_Delay+0x44>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	4413      	add	r3, r2
 8000d00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d02:	bf00      	nop
 8000d04:	f7ff ffde 	bl	8000cc4 <HAL_GetTick>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	68fa      	ldr	r2, [r7, #12]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d8f7      	bhi.n	8000d04 <HAL_Delay+0x28>
  {
  }
}
 8000d14:	bf00      	nop
 8000d16:	bf00      	nop
 8000d18:	3710      	adds	r7, #16
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000008 	.word	0x20000008

08000d24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f003 0307 	and.w	r3, r3, #7
 8000d32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d34:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <__NVIC_SetPriorityGrouping+0x44>)
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d3a:	68ba      	ldr	r2, [r7, #8]
 8000d3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d40:	4013      	ands	r3, r2
 8000d42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d56:	4a04      	ldr	r2, [pc, #16]	; (8000d68 <__NVIC_SetPriorityGrouping+0x44>)
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	60d3      	str	r3, [r2, #12]
}
 8000d5c:	bf00      	nop
 8000d5e:	3714      	adds	r7, #20
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d70:	4b04      	ldr	r3, [pc, #16]	; (8000d84 <__NVIC_GetPriorityGrouping+0x18>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	0a1b      	lsrs	r3, r3, #8
 8000d76:	f003 0307 	and.w	r3, r3, #7
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	db0b      	blt.n	8000db2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	f003 021f 	and.w	r2, r3, #31
 8000da0:	4907      	ldr	r1, [pc, #28]	; (8000dc0 <__NVIC_EnableIRQ+0x38>)
 8000da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da6:	095b      	lsrs	r3, r3, #5
 8000da8:	2001      	movs	r0, #1
 8000daa:	fa00 f202 	lsl.w	r2, r0, r2
 8000dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	e000e100 	.word	0xe000e100

08000dc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	6039      	str	r1, [r7, #0]
 8000dce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	db0a      	blt.n	8000dee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	490c      	ldr	r1, [pc, #48]	; (8000e10 <__NVIC_SetPriority+0x4c>)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	0112      	lsls	r2, r2, #4
 8000de4:	b2d2      	uxtb	r2, r2
 8000de6:	440b      	add	r3, r1
 8000de8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dec:	e00a      	b.n	8000e04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	b2da      	uxtb	r2, r3
 8000df2:	4908      	ldr	r1, [pc, #32]	; (8000e14 <__NVIC_SetPriority+0x50>)
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	f003 030f 	and.w	r3, r3, #15
 8000dfa:	3b04      	subs	r3, #4
 8000dfc:	0112      	lsls	r2, r2, #4
 8000dfe:	b2d2      	uxtb	r2, r2
 8000e00:	440b      	add	r3, r1
 8000e02:	761a      	strb	r2, [r3, #24]
}
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	e000e100 	.word	0xe000e100
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b089      	sub	sp, #36	; 0x24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	f1c3 0307 	rsb	r3, r3, #7
 8000e32:	2b04      	cmp	r3, #4
 8000e34:	bf28      	it	cs
 8000e36:	2304      	movcs	r3, #4
 8000e38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	3304      	adds	r3, #4
 8000e3e:	2b06      	cmp	r3, #6
 8000e40:	d902      	bls.n	8000e48 <NVIC_EncodePriority+0x30>
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	3b03      	subs	r3, #3
 8000e46:	e000      	b.n	8000e4a <NVIC_EncodePriority+0x32>
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	43da      	mvns	r2, r3
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	401a      	ands	r2, r3
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e60:	f04f 31ff 	mov.w	r1, #4294967295
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6a:	43d9      	mvns	r1, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e70:	4313      	orrs	r3, r2
         );
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3724      	adds	r7, #36	; 0x24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
	...

08000e80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e90:	d301      	bcc.n	8000e96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e92:	2301      	movs	r3, #1
 8000e94:	e00f      	b.n	8000eb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e96:	4a0a      	ldr	r2, [pc, #40]	; (8000ec0 <SysTick_Config+0x40>)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e9e:	210f      	movs	r1, #15
 8000ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea4:	f7ff ff8e 	bl	8000dc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea8:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <SysTick_Config+0x40>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eae:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <SysTick_Config+0x40>)
 8000eb0:	2207      	movs	r2, #7
 8000eb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	e000e010 	.word	0xe000e010

08000ec4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f7ff ff29 	bl	8000d24 <__NVIC_SetPriorityGrouping>
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b086      	sub	sp, #24
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	60b9      	str	r1, [r7, #8]
 8000ee4:	607a      	str	r2, [r7, #4]
 8000ee6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eec:	f7ff ff3e 	bl	8000d6c <__NVIC_GetPriorityGrouping>
 8000ef0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	68b9      	ldr	r1, [r7, #8]
 8000ef6:	6978      	ldr	r0, [r7, #20]
 8000ef8:	f7ff ff8e 	bl	8000e18 <NVIC_EncodePriority>
 8000efc:	4602      	mov	r2, r0
 8000efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f02:	4611      	mov	r1, r2
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff ff5d 	bl	8000dc4 <__NVIC_SetPriority>
}
 8000f0a:	bf00      	nop
 8000f0c:	3718      	adds	r7, #24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	4603      	mov	r3, r0
 8000f1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ff31 	bl	8000d88 <__NVIC_EnableIRQ>
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f7ff ffa2 	bl	8000e80 <SysTick_Config>
 8000f3c:	4603      	mov	r3, r0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b089      	sub	sp, #36	; 0x24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f56:	2300      	movs	r3, #0
 8000f58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61fb      	str	r3, [r7, #28]
 8000f62:	e165      	b.n	8001230 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f64:	2201      	movs	r2, #1
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	697a      	ldr	r2, [r7, #20]
 8000f74:	4013      	ands	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	f040 8154 	bne.w	800122a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f003 0303 	and.w	r3, r3, #3
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d005      	beq.n	8000f9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d130      	bne.n	8000ffc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	2203      	movs	r2, #3
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43db      	mvns	r3, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	68da      	ldr	r2, [r3, #12]
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	091b      	lsrs	r3, r3, #4
 8000fe6:	f003 0201 	and.w	r2, r3, #1
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f003 0303 	and.w	r3, r3, #3
 8001004:	2b03      	cmp	r3, #3
 8001006:	d017      	beq.n	8001038 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	2203      	movs	r2, #3
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	689a      	ldr	r2, [r3, #8]
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4313      	orrs	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f003 0303 	and.w	r3, r3, #3
 8001040:	2b02      	cmp	r3, #2
 8001042:	d123      	bne.n	800108c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	08da      	lsrs	r2, r3, #3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3208      	adds	r2, #8
 800104c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001050:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	f003 0307 	and.w	r3, r3, #7
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	220f      	movs	r2, #15
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	691a      	ldr	r2, [r3, #16]
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	f003 0307 	and.w	r3, r3, #7
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4313      	orrs	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	08da      	lsrs	r2, r3, #3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	3208      	adds	r2, #8
 8001086:	69b9      	ldr	r1, [r7, #24]
 8001088:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	2203      	movs	r2, #3
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 0203 	and.w	r2, r3, #3
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	f000 80ae 	beq.w	800122a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	4b5d      	ldr	r3, [pc, #372]	; (8001248 <HAL_GPIO_Init+0x300>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d6:	4a5c      	ldr	r2, [pc, #368]	; (8001248 <HAL_GPIO_Init+0x300>)
 80010d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010dc:	6453      	str	r3, [r2, #68]	; 0x44
 80010de:	4b5a      	ldr	r3, [pc, #360]	; (8001248 <HAL_GPIO_Init+0x300>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010ea:	4a58      	ldr	r2, [pc, #352]	; (800124c <HAL_GPIO_Init+0x304>)
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	089b      	lsrs	r3, r3, #2
 80010f0:	3302      	adds	r3, #2
 80010f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	f003 0303 	and.w	r3, r3, #3
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	220f      	movs	r2, #15
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43db      	mvns	r3, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4013      	ands	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a4f      	ldr	r2, [pc, #316]	; (8001250 <HAL_GPIO_Init+0x308>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d025      	beq.n	8001162 <HAL_GPIO_Init+0x21a>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a4e      	ldr	r2, [pc, #312]	; (8001254 <HAL_GPIO_Init+0x30c>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d01f      	beq.n	800115e <HAL_GPIO_Init+0x216>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a4d      	ldr	r2, [pc, #308]	; (8001258 <HAL_GPIO_Init+0x310>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d019      	beq.n	800115a <HAL_GPIO_Init+0x212>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a4c      	ldr	r2, [pc, #304]	; (800125c <HAL_GPIO_Init+0x314>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d013      	beq.n	8001156 <HAL_GPIO_Init+0x20e>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a4b      	ldr	r2, [pc, #300]	; (8001260 <HAL_GPIO_Init+0x318>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d00d      	beq.n	8001152 <HAL_GPIO_Init+0x20a>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a4a      	ldr	r2, [pc, #296]	; (8001264 <HAL_GPIO_Init+0x31c>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d007      	beq.n	800114e <HAL_GPIO_Init+0x206>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a49      	ldr	r2, [pc, #292]	; (8001268 <HAL_GPIO_Init+0x320>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d101      	bne.n	800114a <HAL_GPIO_Init+0x202>
 8001146:	2306      	movs	r3, #6
 8001148:	e00c      	b.n	8001164 <HAL_GPIO_Init+0x21c>
 800114a:	2307      	movs	r3, #7
 800114c:	e00a      	b.n	8001164 <HAL_GPIO_Init+0x21c>
 800114e:	2305      	movs	r3, #5
 8001150:	e008      	b.n	8001164 <HAL_GPIO_Init+0x21c>
 8001152:	2304      	movs	r3, #4
 8001154:	e006      	b.n	8001164 <HAL_GPIO_Init+0x21c>
 8001156:	2303      	movs	r3, #3
 8001158:	e004      	b.n	8001164 <HAL_GPIO_Init+0x21c>
 800115a:	2302      	movs	r3, #2
 800115c:	e002      	b.n	8001164 <HAL_GPIO_Init+0x21c>
 800115e:	2301      	movs	r3, #1
 8001160:	e000      	b.n	8001164 <HAL_GPIO_Init+0x21c>
 8001162:	2300      	movs	r3, #0
 8001164:	69fa      	ldr	r2, [r7, #28]
 8001166:	f002 0203 	and.w	r2, r2, #3
 800116a:	0092      	lsls	r2, r2, #2
 800116c:	4093      	lsls	r3, r2
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4313      	orrs	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001174:	4935      	ldr	r1, [pc, #212]	; (800124c <HAL_GPIO_Init+0x304>)
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	089b      	lsrs	r3, r3, #2
 800117a:	3302      	adds	r3, #2
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001182:	4b3a      	ldr	r3, [pc, #232]	; (800126c <HAL_GPIO_Init+0x324>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	43db      	mvns	r3, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4013      	ands	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011a6:	4a31      	ldr	r2, [pc, #196]	; (800126c <HAL_GPIO_Init+0x324>)
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011ac:	4b2f      	ldr	r3, [pc, #188]	; (800126c <HAL_GPIO_Init+0x324>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	43db      	mvns	r3, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d003      	beq.n	80011d0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011d0:	4a26      	ldr	r2, [pc, #152]	; (800126c <HAL_GPIO_Init+0x324>)
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011d6:	4b25      	ldr	r3, [pc, #148]	; (800126c <HAL_GPIO_Init+0x324>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	43db      	mvns	r3, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4013      	ands	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011fa:	4a1c      	ldr	r2, [pc, #112]	; (800126c <HAL_GPIO_Init+0x324>)
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001200:	4b1a      	ldr	r3, [pc, #104]	; (800126c <HAL_GPIO_Init+0x324>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	43db      	mvns	r3, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4013      	ands	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d003      	beq.n	8001224 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	4313      	orrs	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001224:	4a11      	ldr	r2, [pc, #68]	; (800126c <HAL_GPIO_Init+0x324>)
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3301      	adds	r3, #1
 800122e:	61fb      	str	r3, [r7, #28]
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	2b0f      	cmp	r3, #15
 8001234:	f67f ae96 	bls.w	8000f64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001238:	bf00      	nop
 800123a:	bf00      	nop
 800123c:	3724      	adds	r7, #36	; 0x24
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	40023800 	.word	0x40023800
 800124c:	40013800 	.word	0x40013800
 8001250:	40020000 	.word	0x40020000
 8001254:	40020400 	.word	0x40020400
 8001258:	40020800 	.word	0x40020800
 800125c:	40020c00 	.word	0x40020c00
 8001260:	40021000 	.word	0x40021000
 8001264:	40021400 	.word	0x40021400
 8001268:	40021800 	.word	0x40021800
 800126c:	40013c00 	.word	0x40013c00

08001270 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	460b      	mov	r3, r1
 800127a:	807b      	strh	r3, [r7, #2]
 800127c:	4613      	mov	r3, r2
 800127e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001280:	787b      	ldrb	r3, [r7, #1]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001286:	887a      	ldrh	r2, [r7, #2]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800128c:	e003      	b.n	8001296 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800128e:	887b      	ldrh	r3, [r7, #2]
 8001290:	041a      	lsls	r2, r3, #16
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	619a      	str	r2, [r3, #24]
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012a2:	b480      	push	{r7}
 80012a4:	b085      	sub	sp, #20
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
 80012aa:	460b      	mov	r3, r1
 80012ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012b4:	887a      	ldrh	r2, [r7, #2]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	4013      	ands	r3, r2
 80012ba:	041a      	lsls	r2, r3, #16
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	43d9      	mvns	r1, r3
 80012c0:	887b      	ldrh	r3, [r7, #2]
 80012c2:	400b      	ands	r3, r1
 80012c4:	431a      	orrs	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	619a      	str	r2, [r3, #24]
}
 80012ca:	bf00      	nop
 80012cc:	3714      	adds	r7, #20
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80012d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012d8:	b08f      	sub	sp, #60	; 0x3c
 80012da:	af0a      	add	r7, sp, #40	; 0x28
 80012dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d101      	bne.n	80012e8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e116      	b.n	8001516 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d106      	bne.n	8001308 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff fb9a 	bl	8000a3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2203      	movs	r2, #3
 800130c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001318:	2b00      	cmp	r3, #0
 800131a:	d102      	bne.n	8001322 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2200      	movs	r2, #0
 8001320:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f001 fea3 	bl	8003072 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	603b      	str	r3, [r7, #0]
 8001332:	687e      	ldr	r6, [r7, #4]
 8001334:	466d      	mov	r5, sp
 8001336:	f106 0410 	add.w	r4, r6, #16
 800133a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800133c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800133e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001340:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001342:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001346:	e885 0003 	stmia.w	r5, {r0, r1}
 800134a:	1d33      	adds	r3, r6, #4
 800134c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800134e:	6838      	ldr	r0, [r7, #0]
 8001350:	f001 fe2e 	bl	8002fb0 <USB_CoreInit>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d005      	beq.n	8001366 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2202      	movs	r2, #2
 800135e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e0d7      	b.n	8001516 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2100      	movs	r1, #0
 800136c:	4618      	mov	r0, r3
 800136e:	f001 fe91 	bl	8003094 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001372:	2300      	movs	r3, #0
 8001374:	73fb      	strb	r3, [r7, #15]
 8001376:	e04a      	b.n	800140e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001378:	7bfa      	ldrb	r2, [r7, #15]
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	4613      	mov	r3, r2
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	4413      	add	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	440b      	add	r3, r1
 8001386:	333d      	adds	r3, #61	; 0x3d
 8001388:	2201      	movs	r2, #1
 800138a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800138c:	7bfa      	ldrb	r2, [r7, #15]
 800138e:	6879      	ldr	r1, [r7, #4]
 8001390:	4613      	mov	r3, r2
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	4413      	add	r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	440b      	add	r3, r1
 800139a:	333c      	adds	r3, #60	; 0x3c
 800139c:	7bfa      	ldrb	r2, [r7, #15]
 800139e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013a0:	7bfa      	ldrb	r2, [r7, #15]
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
 80013a4:	b298      	uxth	r0, r3
 80013a6:	6879      	ldr	r1, [r7, #4]
 80013a8:	4613      	mov	r3, r2
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	4413      	add	r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	440b      	add	r3, r1
 80013b2:	3344      	adds	r3, #68	; 0x44
 80013b4:	4602      	mov	r2, r0
 80013b6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013b8:	7bfa      	ldrb	r2, [r7, #15]
 80013ba:	6879      	ldr	r1, [r7, #4]
 80013bc:	4613      	mov	r3, r2
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	4413      	add	r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	440b      	add	r3, r1
 80013c6:	3340      	adds	r3, #64	; 0x40
 80013c8:	2200      	movs	r2, #0
 80013ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80013cc:	7bfa      	ldrb	r2, [r7, #15]
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	4613      	mov	r3, r2
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	4413      	add	r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	440b      	add	r3, r1
 80013da:	3348      	adds	r3, #72	; 0x48
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80013e0:	7bfa      	ldrb	r2, [r7, #15]
 80013e2:	6879      	ldr	r1, [r7, #4]
 80013e4:	4613      	mov	r3, r2
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	4413      	add	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	440b      	add	r3, r1
 80013ee:	334c      	adds	r3, #76	; 0x4c
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80013f4:	7bfa      	ldrb	r2, [r7, #15]
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	4613      	mov	r3, r2
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	4413      	add	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	440b      	add	r3, r1
 8001402:	3354      	adds	r3, #84	; 0x54
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001408:	7bfb      	ldrb	r3, [r7, #15]
 800140a:	3301      	adds	r3, #1
 800140c:	73fb      	strb	r3, [r7, #15]
 800140e:	7bfa      	ldrb	r2, [r7, #15]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	429a      	cmp	r2, r3
 8001416:	d3af      	bcc.n	8001378 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001418:	2300      	movs	r3, #0
 800141a:	73fb      	strb	r3, [r7, #15]
 800141c:	e044      	b.n	80014a8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800141e:	7bfa      	ldrb	r2, [r7, #15]
 8001420:	6879      	ldr	r1, [r7, #4]
 8001422:	4613      	mov	r3, r2
 8001424:	00db      	lsls	r3, r3, #3
 8001426:	4413      	add	r3, r2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	440b      	add	r3, r1
 800142c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001430:	2200      	movs	r2, #0
 8001432:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001434:	7bfa      	ldrb	r2, [r7, #15]
 8001436:	6879      	ldr	r1, [r7, #4]
 8001438:	4613      	mov	r3, r2
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	4413      	add	r3, r2
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	440b      	add	r3, r1
 8001442:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001446:	7bfa      	ldrb	r2, [r7, #15]
 8001448:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800144a:	7bfa      	ldrb	r2, [r7, #15]
 800144c:	6879      	ldr	r1, [r7, #4]
 800144e:	4613      	mov	r3, r2
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	4413      	add	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	440b      	add	r3, r1
 8001458:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800145c:	2200      	movs	r2, #0
 800145e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001460:	7bfa      	ldrb	r2, [r7, #15]
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	4613      	mov	r3, r2
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	4413      	add	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	440b      	add	r3, r1
 800146e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001476:	7bfa      	ldrb	r2, [r7, #15]
 8001478:	6879      	ldr	r1, [r7, #4]
 800147a:	4613      	mov	r3, r2
 800147c:	00db      	lsls	r3, r3, #3
 800147e:	4413      	add	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	440b      	add	r3, r1
 8001484:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800148c:	7bfa      	ldrb	r2, [r7, #15]
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	4613      	mov	r3, r2
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	4413      	add	r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	440b      	add	r3, r1
 800149a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
 80014a4:	3301      	adds	r3, #1
 80014a6:	73fb      	strb	r3, [r7, #15]
 80014a8:	7bfa      	ldrb	r2, [r7, #15]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d3b5      	bcc.n	800141e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	603b      	str	r3, [r7, #0]
 80014b8:	687e      	ldr	r6, [r7, #4]
 80014ba:	466d      	mov	r5, sp
 80014bc:	f106 0410 	add.w	r4, r6, #16
 80014c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014cc:	e885 0003 	stmia.w	r5, {r0, r1}
 80014d0:	1d33      	adds	r3, r6, #4
 80014d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014d4:	6838      	ldr	r0, [r7, #0]
 80014d6:	f001 fe29 	bl	800312c <USB_DevInit>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d005      	beq.n	80014ec <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2202      	movs	r2, #2
 80014e4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e014      	b.n	8001516 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2201      	movs	r2, #1
 80014f8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001500:	2b01      	cmp	r3, #1
 8001502:	d102      	bne.n	800150a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f000 f80a 	bl	800151e <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f001 ffe7 	bl	80034e2 <USB_DevDisconnect>

  return HAL_OK;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800151e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800151e:	b480      	push	{r7}
 8001520:	b085      	sub	sp, #20
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2201      	movs	r2, #1
 8001530:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800154c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001550:	f043 0303 	orr.w	r3, r3, #3
 8001554:	68fa      	ldr	r2, [r7, #12]
 8001556:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
	...

08001568 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d101      	bne.n	800157c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e0cc      	b.n	8001716 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800157c:	4b68      	ldr	r3, [pc, #416]	; (8001720 <HAL_RCC_ClockConfig+0x1b8>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0307 	and.w	r3, r3, #7
 8001584:	683a      	ldr	r2, [r7, #0]
 8001586:	429a      	cmp	r2, r3
 8001588:	d90c      	bls.n	80015a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800158a:	4b65      	ldr	r3, [pc, #404]	; (8001720 <HAL_RCC_ClockConfig+0x1b8>)
 800158c:	683a      	ldr	r2, [r7, #0]
 800158e:	b2d2      	uxtb	r2, r2
 8001590:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001592:	4b63      	ldr	r3, [pc, #396]	; (8001720 <HAL_RCC_ClockConfig+0x1b8>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	683a      	ldr	r2, [r7, #0]
 800159c:	429a      	cmp	r2, r3
 800159e:	d001      	beq.n	80015a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e0b8      	b.n	8001716 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d020      	beq.n	80015f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d005      	beq.n	80015c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015bc:	4b59      	ldr	r3, [pc, #356]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	4a58      	ldr	r2, [pc, #352]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80015c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0308 	and.w	r3, r3, #8
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d005      	beq.n	80015e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015d4:	4b53      	ldr	r3, [pc, #332]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	4a52      	ldr	r2, [pc, #328]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80015da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015e0:	4b50      	ldr	r3, [pc, #320]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	494d      	ldr	r1, [pc, #308]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80015ee:	4313      	orrs	r3, r2
 80015f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d044      	beq.n	8001688 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d107      	bne.n	8001616 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001606:	4b47      	ldr	r3, [pc, #284]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d119      	bne.n	8001646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e07f      	b.n	8001716 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	2b02      	cmp	r3, #2
 800161c:	d003      	beq.n	8001626 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001622:	2b03      	cmp	r3, #3
 8001624:	d107      	bne.n	8001636 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001626:	4b3f      	ldr	r3, [pc, #252]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d109      	bne.n	8001646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e06f      	b.n	8001716 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001636:	4b3b      	ldr	r3, [pc, #236]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e067      	b.n	8001716 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001646:	4b37      	ldr	r3, [pc, #220]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f023 0203 	bic.w	r2, r3, #3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	4934      	ldr	r1, [pc, #208]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 8001654:	4313      	orrs	r3, r2
 8001656:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001658:	f7ff fb34 	bl	8000cc4 <HAL_GetTick>
 800165c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800165e:	e00a      	b.n	8001676 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001660:	f7ff fb30 	bl	8000cc4 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	f241 3288 	movw	r2, #5000	; 0x1388
 800166e:	4293      	cmp	r3, r2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e04f      	b.n	8001716 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001676:	4b2b      	ldr	r3, [pc, #172]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f003 020c 	and.w	r2, r3, #12
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	429a      	cmp	r2, r3
 8001686:	d1eb      	bne.n	8001660 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001688:	4b25      	ldr	r3, [pc, #148]	; (8001720 <HAL_RCC_ClockConfig+0x1b8>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0307 	and.w	r3, r3, #7
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	429a      	cmp	r2, r3
 8001694:	d20c      	bcs.n	80016b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001696:	4b22      	ldr	r3, [pc, #136]	; (8001720 <HAL_RCC_ClockConfig+0x1b8>)
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	b2d2      	uxtb	r2, r2
 800169c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800169e:	4b20      	ldr	r3, [pc, #128]	; (8001720 <HAL_RCC_ClockConfig+0x1b8>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	683a      	ldr	r2, [r7, #0]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d001      	beq.n	80016b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e032      	b.n	8001716 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0304 	and.w	r3, r3, #4
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d008      	beq.n	80016ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016bc:	4b19      	ldr	r3, [pc, #100]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	4916      	ldr	r1, [pc, #88]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80016ca:	4313      	orrs	r3, r2
 80016cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0308 	and.w	r3, r3, #8
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d009      	beq.n	80016ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016da:	4b12      	ldr	r3, [pc, #72]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	490e      	ldr	r1, [pc, #56]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80016ea:	4313      	orrs	r3, r2
 80016ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016ee:	f000 f821 	bl	8001734 <HAL_RCC_GetSysClockFreq>
 80016f2:	4602      	mov	r2, r0
 80016f4:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	091b      	lsrs	r3, r3, #4
 80016fa:	f003 030f 	and.w	r3, r3, #15
 80016fe:	490a      	ldr	r1, [pc, #40]	; (8001728 <HAL_RCC_ClockConfig+0x1c0>)
 8001700:	5ccb      	ldrb	r3, [r1, r3]
 8001702:	fa22 f303 	lsr.w	r3, r2, r3
 8001706:	4a09      	ldr	r2, [pc, #36]	; (800172c <HAL_RCC_ClockConfig+0x1c4>)
 8001708:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800170a:	4b09      	ldr	r3, [pc, #36]	; (8001730 <HAL_RCC_ClockConfig+0x1c8>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff fa94 	bl	8000c3c <HAL_InitTick>

  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40023c00 	.word	0x40023c00
 8001724:	40023800 	.word	0x40023800
 8001728:	080060e0 	.word	0x080060e0
 800172c:	20000000 	.word	0x20000000
 8001730:	20000004 	.word	0x20000004

08001734 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001734:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001738:	b094      	sub	sp, #80	; 0x50
 800173a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800173c:	2300      	movs	r3, #0
 800173e:	647b      	str	r3, [r7, #68]	; 0x44
 8001740:	2300      	movs	r3, #0
 8001742:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001744:	2300      	movs	r3, #0
 8001746:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001748:	2300      	movs	r3, #0
 800174a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800174c:	4b79      	ldr	r3, [pc, #484]	; (8001934 <HAL_RCC_GetSysClockFreq+0x200>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f003 030c 	and.w	r3, r3, #12
 8001754:	2b08      	cmp	r3, #8
 8001756:	d00d      	beq.n	8001774 <HAL_RCC_GetSysClockFreq+0x40>
 8001758:	2b08      	cmp	r3, #8
 800175a:	f200 80e1 	bhi.w	8001920 <HAL_RCC_GetSysClockFreq+0x1ec>
 800175e:	2b00      	cmp	r3, #0
 8001760:	d002      	beq.n	8001768 <HAL_RCC_GetSysClockFreq+0x34>
 8001762:	2b04      	cmp	r3, #4
 8001764:	d003      	beq.n	800176e <HAL_RCC_GetSysClockFreq+0x3a>
 8001766:	e0db      	b.n	8001920 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001768:	4b73      	ldr	r3, [pc, #460]	; (8001938 <HAL_RCC_GetSysClockFreq+0x204>)
 800176a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800176c:	e0db      	b.n	8001926 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800176e:	4b73      	ldr	r3, [pc, #460]	; (800193c <HAL_RCC_GetSysClockFreq+0x208>)
 8001770:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001772:	e0d8      	b.n	8001926 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001774:	4b6f      	ldr	r3, [pc, #444]	; (8001934 <HAL_RCC_GetSysClockFreq+0x200>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800177c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800177e:	4b6d      	ldr	r3, [pc, #436]	; (8001934 <HAL_RCC_GetSysClockFreq+0x200>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d063      	beq.n	8001852 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800178a:	4b6a      	ldr	r3, [pc, #424]	; (8001934 <HAL_RCC_GetSysClockFreq+0x200>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	099b      	lsrs	r3, r3, #6
 8001790:	2200      	movs	r2, #0
 8001792:	63bb      	str	r3, [r7, #56]	; 0x38
 8001794:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001798:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800179c:	633b      	str	r3, [r7, #48]	; 0x30
 800179e:	2300      	movs	r3, #0
 80017a0:	637b      	str	r3, [r7, #52]	; 0x34
 80017a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80017a6:	4622      	mov	r2, r4
 80017a8:	462b      	mov	r3, r5
 80017aa:	f04f 0000 	mov.w	r0, #0
 80017ae:	f04f 0100 	mov.w	r1, #0
 80017b2:	0159      	lsls	r1, r3, #5
 80017b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017b8:	0150      	lsls	r0, r2, #5
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	4621      	mov	r1, r4
 80017c0:	1a51      	subs	r1, r2, r1
 80017c2:	6139      	str	r1, [r7, #16]
 80017c4:	4629      	mov	r1, r5
 80017c6:	eb63 0301 	sbc.w	r3, r3, r1
 80017ca:	617b      	str	r3, [r7, #20]
 80017cc:	f04f 0200 	mov.w	r2, #0
 80017d0:	f04f 0300 	mov.w	r3, #0
 80017d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80017d8:	4659      	mov	r1, fp
 80017da:	018b      	lsls	r3, r1, #6
 80017dc:	4651      	mov	r1, sl
 80017de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017e2:	4651      	mov	r1, sl
 80017e4:	018a      	lsls	r2, r1, #6
 80017e6:	4651      	mov	r1, sl
 80017e8:	ebb2 0801 	subs.w	r8, r2, r1
 80017ec:	4659      	mov	r1, fp
 80017ee:	eb63 0901 	sbc.w	r9, r3, r1
 80017f2:	f04f 0200 	mov.w	r2, #0
 80017f6:	f04f 0300 	mov.w	r3, #0
 80017fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001802:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001806:	4690      	mov	r8, r2
 8001808:	4699      	mov	r9, r3
 800180a:	4623      	mov	r3, r4
 800180c:	eb18 0303 	adds.w	r3, r8, r3
 8001810:	60bb      	str	r3, [r7, #8]
 8001812:	462b      	mov	r3, r5
 8001814:	eb49 0303 	adc.w	r3, r9, r3
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	f04f 0200 	mov.w	r2, #0
 800181e:	f04f 0300 	mov.w	r3, #0
 8001822:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001826:	4629      	mov	r1, r5
 8001828:	024b      	lsls	r3, r1, #9
 800182a:	4621      	mov	r1, r4
 800182c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001830:	4621      	mov	r1, r4
 8001832:	024a      	lsls	r2, r1, #9
 8001834:	4610      	mov	r0, r2
 8001836:	4619      	mov	r1, r3
 8001838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800183a:	2200      	movs	r2, #0
 800183c:	62bb      	str	r3, [r7, #40]	; 0x28
 800183e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001840:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001844:	f7fe fcec 	bl	8000220 <__aeabi_uldivmod>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4613      	mov	r3, r2
 800184e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001850:	e058      	b.n	8001904 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001852:	4b38      	ldr	r3, [pc, #224]	; (8001934 <HAL_RCC_GetSysClockFreq+0x200>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	099b      	lsrs	r3, r3, #6
 8001858:	2200      	movs	r2, #0
 800185a:	4618      	mov	r0, r3
 800185c:	4611      	mov	r1, r2
 800185e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001862:	623b      	str	r3, [r7, #32]
 8001864:	2300      	movs	r3, #0
 8001866:	627b      	str	r3, [r7, #36]	; 0x24
 8001868:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800186c:	4642      	mov	r2, r8
 800186e:	464b      	mov	r3, r9
 8001870:	f04f 0000 	mov.w	r0, #0
 8001874:	f04f 0100 	mov.w	r1, #0
 8001878:	0159      	lsls	r1, r3, #5
 800187a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800187e:	0150      	lsls	r0, r2, #5
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	4641      	mov	r1, r8
 8001886:	ebb2 0a01 	subs.w	sl, r2, r1
 800188a:	4649      	mov	r1, r9
 800188c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001890:	f04f 0200 	mov.w	r2, #0
 8001894:	f04f 0300 	mov.w	r3, #0
 8001898:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800189c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80018a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80018a4:	ebb2 040a 	subs.w	r4, r2, sl
 80018a8:	eb63 050b 	sbc.w	r5, r3, fp
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	00eb      	lsls	r3, r5, #3
 80018b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018ba:	00e2      	lsls	r2, r4, #3
 80018bc:	4614      	mov	r4, r2
 80018be:	461d      	mov	r5, r3
 80018c0:	4643      	mov	r3, r8
 80018c2:	18e3      	adds	r3, r4, r3
 80018c4:	603b      	str	r3, [r7, #0]
 80018c6:	464b      	mov	r3, r9
 80018c8:	eb45 0303 	adc.w	r3, r5, r3
 80018cc:	607b      	str	r3, [r7, #4]
 80018ce:	f04f 0200 	mov.w	r2, #0
 80018d2:	f04f 0300 	mov.w	r3, #0
 80018d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018da:	4629      	mov	r1, r5
 80018dc:	028b      	lsls	r3, r1, #10
 80018de:	4621      	mov	r1, r4
 80018e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018e4:	4621      	mov	r1, r4
 80018e6:	028a      	lsls	r2, r1, #10
 80018e8:	4610      	mov	r0, r2
 80018ea:	4619      	mov	r1, r3
 80018ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018ee:	2200      	movs	r2, #0
 80018f0:	61bb      	str	r3, [r7, #24]
 80018f2:	61fa      	str	r2, [r7, #28]
 80018f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018f8:	f7fe fc92 	bl	8000220 <__aeabi_uldivmod>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	4613      	mov	r3, r2
 8001902:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001904:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <HAL_RCC_GetSysClockFreq+0x200>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	0c1b      	lsrs	r3, r3, #16
 800190a:	f003 0303 	and.w	r3, r3, #3
 800190e:	3301      	adds	r3, #1
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001914:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001916:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001918:	fbb2 f3f3 	udiv	r3, r2, r3
 800191c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800191e:	e002      	b.n	8001926 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001920:	4b05      	ldr	r3, [pc, #20]	; (8001938 <HAL_RCC_GetSysClockFreq+0x204>)
 8001922:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001924:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001926:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001928:	4618      	mov	r0, r3
 800192a:	3750      	adds	r7, #80	; 0x50
 800192c:	46bd      	mov	sp, r7
 800192e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001932:	bf00      	nop
 8001934:	40023800 	.word	0x40023800
 8001938:	00f42400 	.word	0x00f42400
 800193c:	007a1200 	.word	0x007a1200

08001940 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001944:	4b03      	ldr	r3, [pc, #12]	; (8001954 <HAL_RCC_GetHCLKFreq+0x14>)
 8001946:	681b      	ldr	r3, [r3, #0]
}
 8001948:	4618      	mov	r0, r3
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	20000000 	.word	0x20000000

08001958 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800195c:	f7ff fff0 	bl	8001940 <HAL_RCC_GetHCLKFreq>
 8001960:	4602      	mov	r2, r0
 8001962:	4b05      	ldr	r3, [pc, #20]	; (8001978 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	0a9b      	lsrs	r3, r3, #10
 8001968:	f003 0307 	and.w	r3, r3, #7
 800196c:	4903      	ldr	r1, [pc, #12]	; (800197c <HAL_RCC_GetPCLK1Freq+0x24>)
 800196e:	5ccb      	ldrb	r3, [r1, r3]
 8001970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001974:	4618      	mov	r0, r3
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40023800 	.word	0x40023800
 800197c:	080060f0 	.word	0x080060f0

08001980 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001984:	f7ff ffdc 	bl	8001940 <HAL_RCC_GetHCLKFreq>
 8001988:	4602      	mov	r2, r0
 800198a:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	0b5b      	lsrs	r3, r3, #13
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	4903      	ldr	r1, [pc, #12]	; (80019a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001996:	5ccb      	ldrb	r3, [r1, r3]
 8001998:	fa22 f303 	lsr.w	r3, r2, r3
}
 800199c:	4618      	mov	r0, r3
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40023800 	.word	0x40023800
 80019a4:	080060f0 	.word	0x080060f0

080019a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b088      	sub	sp, #32
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019b0:	2300      	movs	r3, #0
 80019b2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 80019b8:	2300      	movs	r3, #0
 80019ba:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 80019bc:	2300      	movs	r3, #0
 80019be:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d010      	beq.n	80019ee <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80019cc:	4b7a      	ldr	r3, [pc, #488]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80019ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019d2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	4977      	ldr	r1, [pc, #476]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 80019ea:	2301      	movs	r3, #1
 80019ec:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d010      	beq.n	8001a1c <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80019fa:	4b6f      	ldr	r3, [pc, #444]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80019fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a00:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a1b      	ldr	r3, [r3, #32]
 8001a08:	496b      	ldr	r1, [pc, #428]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a1b      	ldr	r3, [r3, #32]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d022      	beq.n	8001a6e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8001a28:	4b63      	ldr	r3, [pc, #396]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001a2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a36:	4960      	ldr	r1, [pc, #384]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8001a46:	2301      	movs	r3, #1
 8001a48:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a52:	d10c      	bne.n	8001a6e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8001a54:	4b58      	ldr	r3, [pc, #352]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a5a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	3b01      	subs	r3, #1
 8001a64:	021b      	lsls	r3, r3, #8
 8001a66:	4954      	ldr	r1, [pc, #336]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d022      	beq.n	8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8001a7a:	4b4f      	ldr	r3, [pc, #316]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001a7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a80:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a88:	494b      	ldr	r1, [pc, #300]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d101      	bne.n	8001a9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001aa4:	d10c      	bne.n	8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8001aa6:	4b44      	ldr	r3, [pc, #272]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001aa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001aac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	695b      	ldr	r3, [r3, #20]
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	021b      	lsls	r3, r3, #8
 8001ab8:	493f      	ldr	r1, [pc, #252]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0308 	and.w	r3, r3, #8
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f000 808a 	beq.w	8001be2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	4b39      	ldr	r3, [pc, #228]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	4a38      	ldr	r2, [pc, #224]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001adc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ade:	4b36      	ldr	r3, [pc, #216]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001aea:	4b34      	ldr	r3, [pc, #208]	; (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a33      	ldr	r2, [pc, #204]	; (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8001af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001af6:	f7ff f8e5 	bl	8000cc4 <HAL_GetTick>
 8001afa:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001afc:	e008      	b.n	8001b10 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001afe:	f7ff f8e1 	bl	8000cc4 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e1d1      	b.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001b10:	4b2a      	ldr	r3, [pc, #168]	; (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0f0      	beq.n	8001afe <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b1c:	4b26      	ldr	r3, [pc, #152]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b24:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d02f      	beq.n	8001b8c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b34:	697a      	ldr	r2, [r7, #20]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d028      	beq.n	8001b8c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b3a:	4b1f      	ldr	r3, [pc, #124]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b42:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b44:	4b1e      	ldr	r3, [pc, #120]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8001b46:	2201      	movs	r2, #1
 8001b48:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b4a:	4b1d      	ldr	r3, [pc, #116]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001b50:	4a19      	ldr	r2, [pc, #100]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001b56:	4b18      	ldr	r3, [pc, #96]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d114      	bne.n	8001b8c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001b62:	f7ff f8af 	bl	8000cc4 <HAL_GetTick>
 8001b66:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b68:	e00a      	b.n	8001b80 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b6a:	f7ff f8ab 	bl	8000cc4 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e199      	b.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b80:	4b0d      	ldr	r3, [pc, #52]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d0ee      	beq.n	8001b6a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001b98:	d114      	bne.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8001b9a:	4b07      	ldr	r3, [pc, #28]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001baa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bae:	4902      	ldr	r1, [pc, #8]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	608b      	str	r3, [r1, #8]
 8001bb4:	e00c      	b.n	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8001bb6:	bf00      	nop
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40007000 	.word	0x40007000
 8001bc0:	42470e40 	.word	0x42470e40
 8001bc4:	4b89      	ldr	r3, [pc, #548]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	4a88      	ldr	r2, [pc, #544]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001bca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001bce:	6093      	str	r3, [r2, #8]
 8001bd0:	4b86      	ldr	r3, [pc, #536]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001bd2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bdc:	4983      	ldr	r1, [pc, #524]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0304 	and.w	r3, r3, #4
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d004      	beq.n	8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8001bf4:	4b7e      	ldr	r3, [pc, #504]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8001bf6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0310 	and.w	r3, r3, #16
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d00a      	beq.n	8001c1a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001c04:	4b79      	ldr	r3, [pc, #484]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001c06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c0a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c12:	4976      	ldr	r1, [pc, #472]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0320 	and.w	r3, r3, #32
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d011      	beq.n	8001c4a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001c26:	4b71      	ldr	r3, [pc, #452]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001c28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c2c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c34:	496d      	ldr	r1, [pc, #436]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001c44:	d101      	bne.n	8001c4a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8001c46:	2301      	movs	r3, #1
 8001c48:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d00a      	beq.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001c56:	4b65      	ldr	r3, [pc, #404]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001c58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c5c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c64:	4961      	ldr	r1, [pc, #388]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d004      	beq.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2b80      	cmp	r3, #128	; 0x80
 8001c78:	f040 80c6 	bne.w	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001c7c:	4b5d      	ldr	r3, [pc, #372]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c82:	f7ff f81f 	bl	8000cc4 <HAL_GetTick>
 8001c86:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c88:	e008      	b.n	8001c9c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001c8a:	f7ff f81b 	bl	8000cc4 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e10b      	b.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c9c:	4b53      	ldr	r3, [pc, #332]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1f0      	bne.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8001ca8:	4a53      	ldr	r2, [pc, #332]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cae:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d003      	beq.n	8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	69db      	ldr	r3, [r3, #28]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d023      	beq.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d003      	beq.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d019      	beq.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d004      	beq.n	8001cee <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001cec:	d00e      	beq.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d019      	beq.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d115      	bne.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x386>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d0a:	d110      	bne.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685a      	ldr	r2, [r3, #4]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	019b      	lsls	r3, r3, #6
 8001d16:	431a      	orrs	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	061b      	lsls	r3, r3, #24
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	071b      	lsls	r3, r3, #28
 8001d26:	4931      	ldr	r1, [pc, #196]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d009      	beq.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d026      	beq.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d122      	bne.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001d56:	4b25      	ldr	r3, [pc, #148]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001d58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d5c:	0e1b      	lsrs	r3, r3, #24
 8001d5e:	f003 030f 	and.w	r3, r3, #15
 8001d62:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	019b      	lsls	r3, r3, #6
 8001d6e:	431a      	orrs	r2, r3
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	061b      	lsls	r3, r3, #24
 8001d74:	431a      	orrs	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	071b      	lsls	r3, r3, #28
 8001d7c:	491b      	ldr	r1, [pc, #108]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8001d84:	4b19      	ldr	r3, [pc, #100]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001d86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d8a:	f023 021f 	bic.w	r2, r3, #31
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	3b01      	subs	r3, #1
 8001d94:	4915      	ldr	r1, [pc, #84]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d010      	beq.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	019b      	lsls	r3, r3, #6
 8001db2:	431a      	orrs	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	061b      	lsls	r3, r3, #24
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	071b      	lsls	r3, r3, #28
 8001dc2:	490a      	ldr	r1, [pc, #40]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001dca:	4b0a      	ldr	r3, [pc, #40]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8001dcc:	2201      	movs	r2, #1
 8001dce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001dd0:	f7fe ff78 	bl	8000cc4 <HAL_GetTick>
 8001dd4:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001dd6:	e011      	b.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001dd8:	f7fe ff74 	bl	8000cc4 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d90a      	bls.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e064      	b.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8001dea:	bf00      	nop
 8001dec:	40023800 	.word	0x40023800
 8001df0:	424711e0 	.word	0x424711e0
 8001df4:	42470068 	.word	0x42470068
 8001df8:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001dfc:	4b2f      	ldr	r3, [pc, #188]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0e7      	beq.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d00a      	beq.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001e14:	4b29      	ldr	r3, [pc, #164]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001e16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e1a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e22:	4926      	ldr	r1, [pc, #152]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001e24:	4313      	orrs	r3, r2
 8001e26:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00a      	beq.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001e36:	4b21      	ldr	r3, [pc, #132]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001e38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e3c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e44:	491d      	ldr	r1, [pc, #116]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d00a      	beq.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8001e58:	4b18      	ldr	r3, [pc, #96]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001e5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e5e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e66:	4915      	ldr	r1, [pc, #84]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00a      	beq.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8001e7a:	4b10      	ldr	r3, [pc, #64]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001e7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e80:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e88:	490c      	ldr	r1, [pc, #48]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d00a      	beq.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e9c:	4b07      	ldr	r3, [pc, #28]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001e9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ea2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eaa:	4904      	ldr	r1, [pc, #16]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3720      	adds	r7, #32
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40023800 	.word	0x40023800

08001ec0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e273      	b.n	80023ba <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d075      	beq.n	8001fca <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ede:	4b88      	ldr	r3, [pc, #544]	; (8002100 <HAL_RCC_OscConfig+0x240>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f003 030c 	and.w	r3, r3, #12
 8001ee6:	2b04      	cmp	r3, #4
 8001ee8:	d00c      	beq.n	8001f04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eea:	4b85      	ldr	r3, [pc, #532]	; (8002100 <HAL_RCC_OscConfig+0x240>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ef2:	2b08      	cmp	r3, #8
 8001ef4:	d112      	bne.n	8001f1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ef6:	4b82      	ldr	r3, [pc, #520]	; (8002100 <HAL_RCC_OscConfig+0x240>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001efe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f02:	d10b      	bne.n	8001f1c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f04:	4b7e      	ldr	r3, [pc, #504]	; (8002100 <HAL_RCC_OscConfig+0x240>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d05b      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x108>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d157      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e24e      	b.n	80023ba <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f24:	d106      	bne.n	8001f34 <HAL_RCC_OscConfig+0x74>
 8001f26:	4b76      	ldr	r3, [pc, #472]	; (8002100 <HAL_RCC_OscConfig+0x240>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a75      	ldr	r2, [pc, #468]	; (8002100 <HAL_RCC_OscConfig+0x240>)
 8001f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f30:	6013      	str	r3, [r2, #0]
 8001f32:	e01d      	b.n	8001f70 <HAL_RCC_OscConfig+0xb0>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f3c:	d10c      	bne.n	8001f58 <HAL_RCC_OscConfig+0x98>
 8001f3e:	4b70      	ldr	r3, [pc, #448]	; (8002100 <HAL_RCC_OscConfig+0x240>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a6f      	ldr	r2, [pc, #444]	; (8002100 <HAL_RCC_OscConfig+0x240>)
 8001f44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f48:	6013      	str	r3, [r2, #0]
 8001f4a:	4b6d      	ldr	r3, [pc, #436]	; (8002100 <HAL_RCC_OscConfig+0x240>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a6c      	ldr	r2, [pc, #432]	; (8002100 <HAL_RCC_OscConfig+0x240>)
 8001f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f54:	6013      	str	r3, [r2, #0]
 8001f56:	e00b      	b.n	8001f70 <HAL_RCC_OscConfig+0xb0>
 8001f58:	4b69      	ldr	r3, [pc, #420]	; (8002100 <HAL_RCC_OscConfig+0x240>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a68      	ldr	r2, [pc, #416]	; (8002100 <HAL_RCC_OscConfig+0x240>)
 8001f5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f62:	6013      	str	r3, [r2, #0]
 8001f64:	4b66      	ldr	r3, [pc, #408]	; (8002100 <HAL_RCC_OscConfig+0x240>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a65      	ldr	r2, [pc, #404]	; (8002100 <HAL_RCC_OscConfig+0x240>)
 8001f6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d013      	beq.n	8001fa0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f78:	f7fe fea4 	bl	8000cc4 <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f80:	f7fe fea0 	bl	8000cc4 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b64      	cmp	r3, #100	; 0x64
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e213      	b.n	80023ba <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f92:	4b5b      	ldr	r3, [pc, #364]	; (8002100 <HAL_RCC_OscConfig+0x240>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d0f0      	beq.n	8001f80 <HAL_RCC_OscConfig+0xc0>
 8001f9e:	e014      	b.n	8001fca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa0:	f7fe fe90 	bl	8000cc4 <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fa8:	f7fe fe8c 	bl	8000cc4 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b64      	cmp	r3, #100	; 0x64
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e1ff      	b.n	80023ba <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fba:	4b51      	ldr	r3, [pc, #324]	; (8002100 <HAL_RCC_OscConfig+0x240>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1f0      	bne.n	8001fa8 <HAL_RCC_OscConfig+0xe8>
 8001fc6:	e000      	b.n	8001fca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d063      	beq.n	800209e <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001fd6:	4b4a      	ldr	r3, [pc, #296]	; (8002100 <HAL_RCC_OscConfig+0x240>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f003 030c 	and.w	r3, r3, #12
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00b      	beq.n	8001ffa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fe2:	4b47      	ldr	r3, [pc, #284]	; (8002100 <HAL_RCC_OscConfig+0x240>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001fea:	2b08      	cmp	r3, #8
 8001fec:	d11c      	bne.n	8002028 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fee:	4b44      	ldr	r3, [pc, #272]	; (8002100 <HAL_RCC_OscConfig+0x240>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d116      	bne.n	8002028 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ffa:	4b41      	ldr	r3, [pc, #260]	; (8002100 <HAL_RCC_OscConfig+0x240>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d005      	beq.n	8002012 <HAL_RCC_OscConfig+0x152>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d001      	beq.n	8002012 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e1d3      	b.n	80023ba <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002012:	4b3b      	ldr	r3, [pc, #236]	; (8002100 <HAL_RCC_OscConfig+0x240>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	4937      	ldr	r1, [pc, #220]	; (8002100 <HAL_RCC_OscConfig+0x240>)
 8002022:	4313      	orrs	r3, r2
 8002024:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002026:	e03a      	b.n	800209e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d020      	beq.n	8002072 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002030:	4b34      	ldr	r3, [pc, #208]	; (8002104 <HAL_RCC_OscConfig+0x244>)
 8002032:	2201      	movs	r2, #1
 8002034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002036:	f7fe fe45 	bl	8000cc4 <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800203c:	e008      	b.n	8002050 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800203e:	f7fe fe41 	bl	8000cc4 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e1b4      	b.n	80023ba <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002050:	4b2b      	ldr	r3, [pc, #172]	; (8002100 <HAL_RCC_OscConfig+0x240>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0f0      	beq.n	800203e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800205c:	4b28      	ldr	r3, [pc, #160]	; (8002100 <HAL_RCC_OscConfig+0x240>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	4925      	ldr	r1, [pc, #148]	; (8002100 <HAL_RCC_OscConfig+0x240>)
 800206c:	4313      	orrs	r3, r2
 800206e:	600b      	str	r3, [r1, #0]
 8002070:	e015      	b.n	800209e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002072:	4b24      	ldr	r3, [pc, #144]	; (8002104 <HAL_RCC_OscConfig+0x244>)
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002078:	f7fe fe24 	bl	8000cc4 <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002080:	f7fe fe20 	bl	8000cc4 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e193      	b.n	80023ba <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002092:	4b1b      	ldr	r3, [pc, #108]	; (8002100 <HAL_RCC_OscConfig+0x240>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1f0      	bne.n	8002080 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0308 	and.w	r3, r3, #8
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d036      	beq.n	8002118 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d016      	beq.n	80020e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020b2:	4b15      	ldr	r3, [pc, #84]	; (8002108 <HAL_RCC_OscConfig+0x248>)
 80020b4:	2201      	movs	r2, #1
 80020b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b8:	f7fe fe04 	bl	8000cc4 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020c0:	f7fe fe00 	bl	8000cc4 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e173      	b.n	80023ba <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020d2:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <HAL_RCC_OscConfig+0x240>)
 80020d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0f0      	beq.n	80020c0 <HAL_RCC_OscConfig+0x200>
 80020de:	e01b      	b.n	8002118 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020e0:	4b09      	ldr	r3, [pc, #36]	; (8002108 <HAL_RCC_OscConfig+0x248>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e6:	f7fe fded 	bl	8000cc4 <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ec:	e00e      	b.n	800210c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020ee:	f7fe fde9 	bl	8000cc4 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d907      	bls.n	800210c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e15c      	b.n	80023ba <HAL_RCC_OscConfig+0x4fa>
 8002100:	40023800 	.word	0x40023800
 8002104:	42470000 	.word	0x42470000
 8002108:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800210c:	4b8a      	ldr	r3, [pc, #552]	; (8002338 <HAL_RCC_OscConfig+0x478>)
 800210e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1ea      	bne.n	80020ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 8097 	beq.w	8002254 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002126:	2300      	movs	r3, #0
 8002128:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800212a:	4b83      	ldr	r3, [pc, #524]	; (8002338 <HAL_RCC_OscConfig+0x478>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10f      	bne.n	8002156 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	60bb      	str	r3, [r7, #8]
 800213a:	4b7f      	ldr	r3, [pc, #508]	; (8002338 <HAL_RCC_OscConfig+0x478>)
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	4a7e      	ldr	r2, [pc, #504]	; (8002338 <HAL_RCC_OscConfig+0x478>)
 8002140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002144:	6413      	str	r3, [r2, #64]	; 0x40
 8002146:	4b7c      	ldr	r3, [pc, #496]	; (8002338 <HAL_RCC_OscConfig+0x478>)
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214e:	60bb      	str	r3, [r7, #8]
 8002150:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002152:	2301      	movs	r3, #1
 8002154:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002156:	4b79      	ldr	r3, [pc, #484]	; (800233c <HAL_RCC_OscConfig+0x47c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215e:	2b00      	cmp	r3, #0
 8002160:	d118      	bne.n	8002194 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002162:	4b76      	ldr	r3, [pc, #472]	; (800233c <HAL_RCC_OscConfig+0x47c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a75      	ldr	r2, [pc, #468]	; (800233c <HAL_RCC_OscConfig+0x47c>)
 8002168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800216c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800216e:	f7fe fda9 	bl	8000cc4 <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002174:	e008      	b.n	8002188 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002176:	f7fe fda5 	bl	8000cc4 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e118      	b.n	80023ba <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002188:	4b6c      	ldr	r3, [pc, #432]	; (800233c <HAL_RCC_OscConfig+0x47c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002190:	2b00      	cmp	r3, #0
 8002192:	d0f0      	beq.n	8002176 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d106      	bne.n	80021aa <HAL_RCC_OscConfig+0x2ea>
 800219c:	4b66      	ldr	r3, [pc, #408]	; (8002338 <HAL_RCC_OscConfig+0x478>)
 800219e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a0:	4a65      	ldr	r2, [pc, #404]	; (8002338 <HAL_RCC_OscConfig+0x478>)
 80021a2:	f043 0301 	orr.w	r3, r3, #1
 80021a6:	6713      	str	r3, [r2, #112]	; 0x70
 80021a8:	e01c      	b.n	80021e4 <HAL_RCC_OscConfig+0x324>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	2b05      	cmp	r3, #5
 80021b0:	d10c      	bne.n	80021cc <HAL_RCC_OscConfig+0x30c>
 80021b2:	4b61      	ldr	r3, [pc, #388]	; (8002338 <HAL_RCC_OscConfig+0x478>)
 80021b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b6:	4a60      	ldr	r2, [pc, #384]	; (8002338 <HAL_RCC_OscConfig+0x478>)
 80021b8:	f043 0304 	orr.w	r3, r3, #4
 80021bc:	6713      	str	r3, [r2, #112]	; 0x70
 80021be:	4b5e      	ldr	r3, [pc, #376]	; (8002338 <HAL_RCC_OscConfig+0x478>)
 80021c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c2:	4a5d      	ldr	r2, [pc, #372]	; (8002338 <HAL_RCC_OscConfig+0x478>)
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	6713      	str	r3, [r2, #112]	; 0x70
 80021ca:	e00b      	b.n	80021e4 <HAL_RCC_OscConfig+0x324>
 80021cc:	4b5a      	ldr	r3, [pc, #360]	; (8002338 <HAL_RCC_OscConfig+0x478>)
 80021ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d0:	4a59      	ldr	r2, [pc, #356]	; (8002338 <HAL_RCC_OscConfig+0x478>)
 80021d2:	f023 0301 	bic.w	r3, r3, #1
 80021d6:	6713      	str	r3, [r2, #112]	; 0x70
 80021d8:	4b57      	ldr	r3, [pc, #348]	; (8002338 <HAL_RCC_OscConfig+0x478>)
 80021da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021dc:	4a56      	ldr	r2, [pc, #344]	; (8002338 <HAL_RCC_OscConfig+0x478>)
 80021de:	f023 0304 	bic.w	r3, r3, #4
 80021e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d015      	beq.n	8002218 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ec:	f7fe fd6a 	bl	8000cc4 <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f2:	e00a      	b.n	800220a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021f4:	f7fe fd66 	bl	8000cc4 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002202:	4293      	cmp	r3, r2
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e0d7      	b.n	80023ba <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800220a:	4b4b      	ldr	r3, [pc, #300]	; (8002338 <HAL_RCC_OscConfig+0x478>)
 800220c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d0ee      	beq.n	80021f4 <HAL_RCC_OscConfig+0x334>
 8002216:	e014      	b.n	8002242 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002218:	f7fe fd54 	bl	8000cc4 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800221e:	e00a      	b.n	8002236 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002220:	f7fe fd50 	bl	8000cc4 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	f241 3288 	movw	r2, #5000	; 0x1388
 800222e:	4293      	cmp	r3, r2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e0c1      	b.n	80023ba <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002236:	4b40      	ldr	r3, [pc, #256]	; (8002338 <HAL_RCC_OscConfig+0x478>)
 8002238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1ee      	bne.n	8002220 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002242:	7dfb      	ldrb	r3, [r7, #23]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d105      	bne.n	8002254 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002248:	4b3b      	ldr	r3, [pc, #236]	; (8002338 <HAL_RCC_OscConfig+0x478>)
 800224a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224c:	4a3a      	ldr	r2, [pc, #232]	; (8002338 <HAL_RCC_OscConfig+0x478>)
 800224e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002252:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	2b00      	cmp	r3, #0
 800225a:	f000 80ad 	beq.w	80023b8 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800225e:	4b36      	ldr	r3, [pc, #216]	; (8002338 <HAL_RCC_OscConfig+0x478>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 030c 	and.w	r3, r3, #12
 8002266:	2b08      	cmp	r3, #8
 8002268:	d060      	beq.n	800232c <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	2b02      	cmp	r3, #2
 8002270:	d145      	bne.n	80022fe <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002272:	4b33      	ldr	r3, [pc, #204]	; (8002340 <HAL_RCC_OscConfig+0x480>)
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002278:	f7fe fd24 	bl	8000cc4 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002280:	f7fe fd20 	bl	8000cc4 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e093      	b.n	80023ba <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002292:	4b29      	ldr	r3, [pc, #164]	; (8002338 <HAL_RCC_OscConfig+0x478>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1f0      	bne.n	8002280 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69da      	ldr	r2, [r3, #28]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a1b      	ldr	r3, [r3, #32]
 80022a6:	431a      	orrs	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ac:	019b      	lsls	r3, r3, #6
 80022ae:	431a      	orrs	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b4:	085b      	lsrs	r3, r3, #1
 80022b6:	3b01      	subs	r3, #1
 80022b8:	041b      	lsls	r3, r3, #16
 80022ba:	431a      	orrs	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c0:	061b      	lsls	r3, r3, #24
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c8:	071b      	lsls	r3, r3, #28
 80022ca:	491b      	ldr	r1, [pc, #108]	; (8002338 <HAL_RCC_OscConfig+0x478>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022d0:	4b1b      	ldr	r3, [pc, #108]	; (8002340 <HAL_RCC_OscConfig+0x480>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d6:	f7fe fcf5 	bl	8000cc4 <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022de:	f7fe fcf1 	bl	8000cc4 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e064      	b.n	80023ba <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022f0:	4b11      	ldr	r3, [pc, #68]	; (8002338 <HAL_RCC_OscConfig+0x478>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d0f0      	beq.n	80022de <HAL_RCC_OscConfig+0x41e>
 80022fc:	e05c      	b.n	80023b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022fe:	4b10      	ldr	r3, [pc, #64]	; (8002340 <HAL_RCC_OscConfig+0x480>)
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002304:	f7fe fcde 	bl	8000cc4 <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800230c:	f7fe fcda 	bl	8000cc4 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e04d      	b.n	80023ba <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800231e:	4b06      	ldr	r3, [pc, #24]	; (8002338 <HAL_RCC_OscConfig+0x478>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f0      	bne.n	800230c <HAL_RCC_OscConfig+0x44c>
 800232a:	e045      	b.n	80023b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d107      	bne.n	8002344 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e040      	b.n	80023ba <HAL_RCC_OscConfig+0x4fa>
 8002338:	40023800 	.word	0x40023800
 800233c:	40007000 	.word	0x40007000
 8002340:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002344:	4b1f      	ldr	r3, [pc, #124]	; (80023c4 <HAL_RCC_OscConfig+0x504>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d030      	beq.n	80023b4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800235c:	429a      	cmp	r2, r3
 800235e:	d129      	bne.n	80023b4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800236a:	429a      	cmp	r2, r3
 800236c:	d122      	bne.n	80023b4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002374:	4013      	ands	r3, r2
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800237a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800237c:	4293      	cmp	r3, r2
 800237e:	d119      	bne.n	80023b4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238a:	085b      	lsrs	r3, r3, #1
 800238c:	3b01      	subs	r3, #1
 800238e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002390:	429a      	cmp	r2, r3
 8002392:	d10f      	bne.n	80023b4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d107      	bne.n	80023b4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d001      	beq.n	80023b8 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e000      	b.n	80023ba <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3718      	adds	r7, #24
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40023800 	.word	0x40023800

080023c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e041      	b.n	800245e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d106      	bne.n	80023f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7fe fab4 	bl	800095c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2202      	movs	r2, #2
 80023f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3304      	adds	r3, #4
 8002404:	4619      	mov	r1, r3
 8002406:	4610      	mov	r0, r2
 8002408:	f000 f9d0 	bl	80027ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
	...

08002468 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b01      	cmp	r3, #1
 800247a:	d001      	beq.n	8002480 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e046      	b.n	800250e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2202      	movs	r2, #2
 8002484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a23      	ldr	r2, [pc, #140]	; (800251c <HAL_TIM_Base_Start+0xb4>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d022      	beq.n	80024d8 <HAL_TIM_Base_Start+0x70>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800249a:	d01d      	beq.n	80024d8 <HAL_TIM_Base_Start+0x70>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a1f      	ldr	r2, [pc, #124]	; (8002520 <HAL_TIM_Base_Start+0xb8>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d018      	beq.n	80024d8 <HAL_TIM_Base_Start+0x70>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a1e      	ldr	r2, [pc, #120]	; (8002524 <HAL_TIM_Base_Start+0xbc>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d013      	beq.n	80024d8 <HAL_TIM_Base_Start+0x70>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a1c      	ldr	r2, [pc, #112]	; (8002528 <HAL_TIM_Base_Start+0xc0>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d00e      	beq.n	80024d8 <HAL_TIM_Base_Start+0x70>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a1b      	ldr	r2, [pc, #108]	; (800252c <HAL_TIM_Base_Start+0xc4>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d009      	beq.n	80024d8 <HAL_TIM_Base_Start+0x70>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a19      	ldr	r2, [pc, #100]	; (8002530 <HAL_TIM_Base_Start+0xc8>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d004      	beq.n	80024d8 <HAL_TIM_Base_Start+0x70>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a18      	ldr	r2, [pc, #96]	; (8002534 <HAL_TIM_Base_Start+0xcc>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d111      	bne.n	80024fc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2b06      	cmp	r3, #6
 80024e8:	d010      	beq.n	800250c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f042 0201 	orr.w	r2, r2, #1
 80024f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024fa:	e007      	b.n	800250c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f042 0201 	orr.w	r2, r2, #1
 800250a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3714      	adds	r7, #20
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	40010000 	.word	0x40010000
 8002520:	40000400 	.word	0x40000400
 8002524:	40000800 	.word	0x40000800
 8002528:	40000c00 	.word	0x40000c00
 800252c:	40010400 	.word	0x40010400
 8002530:	40014000 	.word	0x40014000
 8002534:	40001800 	.word	0x40001800

08002538 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b02      	cmp	r3, #2
 800254c:	d122      	bne.n	8002594 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b02      	cmp	r3, #2
 800255a:	d11b      	bne.n	8002594 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f06f 0202 	mvn.w	r2, #2
 8002564:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2201      	movs	r2, #1
 800256a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	f003 0303 	and.w	r3, r3, #3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 f8f8 	bl	8002770 <HAL_TIM_IC_CaptureCallback>
 8002580:	e005      	b.n	800258e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 f8ea 	bl	800275c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f000 f8fb 	bl	8002784 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	f003 0304 	and.w	r3, r3, #4
 800259e:	2b04      	cmp	r3, #4
 80025a0:	d122      	bne.n	80025e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	2b04      	cmp	r3, #4
 80025ae:	d11b      	bne.n	80025e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f06f 0204 	mvn.w	r2, #4
 80025b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2202      	movs	r2, #2
 80025be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 f8ce 	bl	8002770 <HAL_TIM_IC_CaptureCallback>
 80025d4:	e005      	b.n	80025e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f8c0 	bl	800275c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 f8d1 	bl	8002784 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	f003 0308 	and.w	r3, r3, #8
 80025f2:	2b08      	cmp	r3, #8
 80025f4:	d122      	bne.n	800263c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	f003 0308 	and.w	r3, r3, #8
 8002600:	2b08      	cmp	r3, #8
 8002602:	d11b      	bne.n	800263c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f06f 0208 	mvn.w	r2, #8
 800260c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2204      	movs	r2, #4
 8002612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	f003 0303 	and.w	r3, r3, #3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 f8a4 	bl	8002770 <HAL_TIM_IC_CaptureCallback>
 8002628:	e005      	b.n	8002636 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f896 	bl	800275c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 f8a7 	bl	8002784 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	f003 0310 	and.w	r3, r3, #16
 8002646:	2b10      	cmp	r3, #16
 8002648:	d122      	bne.n	8002690 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	f003 0310 	and.w	r3, r3, #16
 8002654:	2b10      	cmp	r3, #16
 8002656:	d11b      	bne.n	8002690 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f06f 0210 	mvn.w	r2, #16
 8002660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2208      	movs	r2, #8
 8002666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f87a 	bl	8002770 <HAL_TIM_IC_CaptureCallback>
 800267c:	e005      	b.n	800268a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 f86c 	bl	800275c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 f87d 	bl	8002784 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b01      	cmp	r3, #1
 800269c:	d10e      	bne.n	80026bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d107      	bne.n	80026bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f06f 0201 	mvn.w	r2, #1
 80026b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 f846 	bl	8002748 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c6:	2b80      	cmp	r3, #128	; 0x80
 80026c8:	d10e      	bne.n	80026e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d4:	2b80      	cmp	r3, #128	; 0x80
 80026d6:	d107      	bne.n	80026e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 f988 	bl	80029f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f2:	2b40      	cmp	r3, #64	; 0x40
 80026f4:	d10e      	bne.n	8002714 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002700:	2b40      	cmp	r3, #64	; 0x40
 8002702:	d107      	bne.n	8002714 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800270c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 f842 	bl	8002798 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	f003 0320 	and.w	r3, r3, #32
 800271e:	2b20      	cmp	r3, #32
 8002720:	d10e      	bne.n	8002740 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	f003 0320 	and.w	r3, r3, #32
 800272c:	2b20      	cmp	r3, #32
 800272e:	d107      	bne.n	8002740 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f06f 0220 	mvn.w	r2, #32
 8002738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 f952 	bl	80029e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002740:	bf00      	nop
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a40      	ldr	r2, [pc, #256]	; (80028c0 <TIM_Base_SetConfig+0x114>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d013      	beq.n	80027ec <TIM_Base_SetConfig+0x40>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ca:	d00f      	beq.n	80027ec <TIM_Base_SetConfig+0x40>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a3d      	ldr	r2, [pc, #244]	; (80028c4 <TIM_Base_SetConfig+0x118>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d00b      	beq.n	80027ec <TIM_Base_SetConfig+0x40>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a3c      	ldr	r2, [pc, #240]	; (80028c8 <TIM_Base_SetConfig+0x11c>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d007      	beq.n	80027ec <TIM_Base_SetConfig+0x40>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a3b      	ldr	r2, [pc, #236]	; (80028cc <TIM_Base_SetConfig+0x120>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d003      	beq.n	80027ec <TIM_Base_SetConfig+0x40>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a3a      	ldr	r2, [pc, #232]	; (80028d0 <TIM_Base_SetConfig+0x124>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d108      	bne.n	80027fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a2f      	ldr	r2, [pc, #188]	; (80028c0 <TIM_Base_SetConfig+0x114>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d02b      	beq.n	800285e <TIM_Base_SetConfig+0xb2>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800280c:	d027      	beq.n	800285e <TIM_Base_SetConfig+0xb2>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a2c      	ldr	r2, [pc, #176]	; (80028c4 <TIM_Base_SetConfig+0x118>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d023      	beq.n	800285e <TIM_Base_SetConfig+0xb2>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a2b      	ldr	r2, [pc, #172]	; (80028c8 <TIM_Base_SetConfig+0x11c>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d01f      	beq.n	800285e <TIM_Base_SetConfig+0xb2>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a2a      	ldr	r2, [pc, #168]	; (80028cc <TIM_Base_SetConfig+0x120>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d01b      	beq.n	800285e <TIM_Base_SetConfig+0xb2>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a29      	ldr	r2, [pc, #164]	; (80028d0 <TIM_Base_SetConfig+0x124>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d017      	beq.n	800285e <TIM_Base_SetConfig+0xb2>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a28      	ldr	r2, [pc, #160]	; (80028d4 <TIM_Base_SetConfig+0x128>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d013      	beq.n	800285e <TIM_Base_SetConfig+0xb2>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a27      	ldr	r2, [pc, #156]	; (80028d8 <TIM_Base_SetConfig+0x12c>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d00f      	beq.n	800285e <TIM_Base_SetConfig+0xb2>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a26      	ldr	r2, [pc, #152]	; (80028dc <TIM_Base_SetConfig+0x130>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d00b      	beq.n	800285e <TIM_Base_SetConfig+0xb2>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a25      	ldr	r2, [pc, #148]	; (80028e0 <TIM_Base_SetConfig+0x134>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d007      	beq.n	800285e <TIM_Base_SetConfig+0xb2>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a24      	ldr	r2, [pc, #144]	; (80028e4 <TIM_Base_SetConfig+0x138>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d003      	beq.n	800285e <TIM_Base_SetConfig+0xb2>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a23      	ldr	r2, [pc, #140]	; (80028e8 <TIM_Base_SetConfig+0x13c>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d108      	bne.n	8002870 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002864:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	4313      	orrs	r3, r2
 800286e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	4313      	orrs	r3, r2
 800287c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a0a      	ldr	r2, [pc, #40]	; (80028c0 <TIM_Base_SetConfig+0x114>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d003      	beq.n	80028a4 <TIM_Base_SetConfig+0xf8>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a0c      	ldr	r2, [pc, #48]	; (80028d0 <TIM_Base_SetConfig+0x124>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d103      	bne.n	80028ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	691a      	ldr	r2, [r3, #16]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	615a      	str	r2, [r3, #20]
}
 80028b2:	bf00      	nop
 80028b4:	3714      	adds	r7, #20
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	40010000 	.word	0x40010000
 80028c4:	40000400 	.word	0x40000400
 80028c8:	40000800 	.word	0x40000800
 80028cc:	40000c00 	.word	0x40000c00
 80028d0:	40010400 	.word	0x40010400
 80028d4:	40014000 	.word	0x40014000
 80028d8:	40014400 	.word	0x40014400
 80028dc:	40014800 	.word	0x40014800
 80028e0:	40001800 	.word	0x40001800
 80028e4:	40001c00 	.word	0x40001c00
 80028e8:	40002000 	.word	0x40002000

080028ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d101      	bne.n	8002904 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002900:	2302      	movs	r3, #2
 8002902:	e05a      	b.n	80029ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2202      	movs	r2, #2
 8002910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800292a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	4313      	orrs	r3, r2
 8002934:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a21      	ldr	r2, [pc, #132]	; (80029c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d022      	beq.n	800298e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002950:	d01d      	beq.n	800298e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a1d      	ldr	r2, [pc, #116]	; (80029cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d018      	beq.n	800298e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a1b      	ldr	r2, [pc, #108]	; (80029d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d013      	beq.n	800298e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a1a      	ldr	r2, [pc, #104]	; (80029d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d00e      	beq.n	800298e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a18      	ldr	r2, [pc, #96]	; (80029d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d009      	beq.n	800298e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a17      	ldr	r2, [pc, #92]	; (80029dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d004      	beq.n	800298e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a15      	ldr	r2, [pc, #84]	; (80029e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d10c      	bne.n	80029a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002994:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	68ba      	ldr	r2, [r7, #8]
 800299c:	4313      	orrs	r3, r2
 800299e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68ba      	ldr	r2, [r7, #8]
 80029a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3714      	adds	r7, #20
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	40010000 	.word	0x40010000
 80029cc:	40000400 	.word	0x40000400
 80029d0:	40000800 	.word	0x40000800
 80029d4:	40000c00 	.word	0x40000c00
 80029d8:	40010400 	.word	0x40010400
 80029dc:	40014000 	.word	0x40014000
 80029e0:	40001800 	.word	0x40001800

080029e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e03f      	b.n	8002a9e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d106      	bne.n	8002a38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f7fd ffba 	bl	80009ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2224      	movs	r2, #36	; 0x24
 8002a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68da      	ldr	r2, [r3, #12]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 f829 	bl	8002aa8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	691a      	ldr	r2, [r3, #16]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	695a      	ldr	r2, [r3, #20]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68da      	ldr	r2, [r3, #12]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2220      	movs	r2, #32
 8002a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
	...

08002aa8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002aa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002aac:	b0c0      	sub	sp, #256	; 0x100
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ac4:	68d9      	ldr	r1, [r3, #12]
 8002ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	ea40 0301 	orr.w	r3, r0, r1
 8002ad0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aec:	69db      	ldr	r3, [r3, #28]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002b00:	f021 010c 	bic.w	r1, r1, #12
 8002b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002b0e:	430b      	orrs	r3, r1
 8002b10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b22:	6999      	ldr	r1, [r3, #24]
 8002b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	ea40 0301 	orr.w	r3, r0, r1
 8002b2e:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8002b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	4b95      	ldr	r3, [pc, #596]	; (8002d8c <UART_SetConfig+0x2e4>)
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d011      	beq.n	8002b60 <UART_SetConfig+0xb8>
 8002b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	4b93      	ldr	r3, [pc, #588]	; (8002d90 <UART_SetConfig+0x2e8>)
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d00b      	beq.n	8002b60 <UART_SetConfig+0xb8>
 8002b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	4b91      	ldr	r3, [pc, #580]	; (8002d94 <UART_SetConfig+0x2ec>)
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d005      	beq.n	8002b60 <UART_SetConfig+0xb8>
 8002b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	4b8f      	ldr	r3, [pc, #572]	; (8002d98 <UART_SetConfig+0x2f0>)
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d104      	bne.n	8002b6a <UART_SetConfig+0xc2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b60:	f7fe ff0e 	bl	8001980 <HAL_RCC_GetPCLK2Freq>
 8002b64:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002b68:	e003      	b.n	8002b72 <UART_SetConfig+0xca>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b6a:	f7fe fef5 	bl	8001958 <HAL_RCC_GetPCLK1Freq>
 8002b6e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b76:	69db      	ldr	r3, [r3, #28]
 8002b78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b7c:	f040 8110 	bne.w	8002da0 <UART_SetConfig+0x2f8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b84:	2200      	movs	r2, #0
 8002b86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002b8a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002b8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002b92:	4622      	mov	r2, r4
 8002b94:	462b      	mov	r3, r5
 8002b96:	1891      	adds	r1, r2, r2
 8002b98:	65b9      	str	r1, [r7, #88]	; 0x58
 8002b9a:	415b      	adcs	r3, r3
 8002b9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002ba2:	4621      	mov	r1, r4
 8002ba4:	eb12 0801 	adds.w	r8, r2, r1
 8002ba8:	4629      	mov	r1, r5
 8002baa:	eb43 0901 	adc.w	r9, r3, r1
 8002bae:	f04f 0200 	mov.w	r2, #0
 8002bb2:	f04f 0300 	mov.w	r3, #0
 8002bb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bc2:	4690      	mov	r8, r2
 8002bc4:	4699      	mov	r9, r3
 8002bc6:	4623      	mov	r3, r4
 8002bc8:	eb18 0303 	adds.w	r3, r8, r3
 8002bcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002bd0:	462b      	mov	r3, r5
 8002bd2:	eb49 0303 	adc.w	r3, r9, r3
 8002bd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002be6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002bea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002bee:	460b      	mov	r3, r1
 8002bf0:	18db      	adds	r3, r3, r3
 8002bf2:	653b      	str	r3, [r7, #80]	; 0x50
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	eb42 0303 	adc.w	r3, r2, r3
 8002bfa:	657b      	str	r3, [r7, #84]	; 0x54
 8002bfc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002c00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002c04:	f7fd fb0c 	bl	8000220 <__aeabi_uldivmod>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	4b63      	ldr	r3, [pc, #396]	; (8002d9c <UART_SetConfig+0x2f4>)
 8002c0e:	fba3 2302 	umull	r2, r3, r3, r2
 8002c12:	095b      	lsrs	r3, r3, #5
 8002c14:	011c      	lsls	r4, r3, #4
 8002c16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c20:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002c24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002c28:	4642      	mov	r2, r8
 8002c2a:	464b      	mov	r3, r9
 8002c2c:	1891      	adds	r1, r2, r2
 8002c2e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002c30:	415b      	adcs	r3, r3
 8002c32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002c38:	4641      	mov	r1, r8
 8002c3a:	eb12 0a01 	adds.w	sl, r2, r1
 8002c3e:	4649      	mov	r1, r9
 8002c40:	eb43 0b01 	adc.w	fp, r3, r1
 8002c44:	f04f 0200 	mov.w	r2, #0
 8002c48:	f04f 0300 	mov.w	r3, #0
 8002c4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c58:	4692      	mov	sl, r2
 8002c5a:	469b      	mov	fp, r3
 8002c5c:	4643      	mov	r3, r8
 8002c5e:	eb1a 0303 	adds.w	r3, sl, r3
 8002c62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c66:	464b      	mov	r3, r9
 8002c68:	eb4b 0303 	adc.w	r3, fp, r3
 8002c6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c7c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002c80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002c84:	460b      	mov	r3, r1
 8002c86:	18db      	adds	r3, r3, r3
 8002c88:	643b      	str	r3, [r7, #64]	; 0x40
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	eb42 0303 	adc.w	r3, r2, r3
 8002c90:	647b      	str	r3, [r7, #68]	; 0x44
 8002c92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002c9a:	f7fd fac1 	bl	8000220 <__aeabi_uldivmod>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	4611      	mov	r1, r2
 8002ca4:	4b3d      	ldr	r3, [pc, #244]	; (8002d9c <UART_SetConfig+0x2f4>)
 8002ca6:	fba3 2301 	umull	r2, r3, r3, r1
 8002caa:	095b      	lsrs	r3, r3, #5
 8002cac:	2264      	movs	r2, #100	; 0x64
 8002cae:	fb02 f303 	mul.w	r3, r2, r3
 8002cb2:	1acb      	subs	r3, r1, r3
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002cba:	4b38      	ldr	r3, [pc, #224]	; (8002d9c <UART_SetConfig+0x2f4>)
 8002cbc:	fba3 2302 	umull	r2, r3, r3, r2
 8002cc0:	095b      	lsrs	r3, r3, #5
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002cc8:	441c      	add	r4, r3
 8002cca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002cd4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002cd8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002cdc:	4642      	mov	r2, r8
 8002cde:	464b      	mov	r3, r9
 8002ce0:	1891      	adds	r1, r2, r2
 8002ce2:	63b9      	str	r1, [r7, #56]	; 0x38
 8002ce4:	415b      	adcs	r3, r3
 8002ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ce8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002cec:	4641      	mov	r1, r8
 8002cee:	1851      	adds	r1, r2, r1
 8002cf0:	6339      	str	r1, [r7, #48]	; 0x30
 8002cf2:	4649      	mov	r1, r9
 8002cf4:	414b      	adcs	r3, r1
 8002cf6:	637b      	str	r3, [r7, #52]	; 0x34
 8002cf8:	f04f 0200 	mov.w	r2, #0
 8002cfc:	f04f 0300 	mov.w	r3, #0
 8002d00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002d04:	4659      	mov	r1, fp
 8002d06:	00cb      	lsls	r3, r1, #3
 8002d08:	4651      	mov	r1, sl
 8002d0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d0e:	4651      	mov	r1, sl
 8002d10:	00ca      	lsls	r2, r1, #3
 8002d12:	4610      	mov	r0, r2
 8002d14:	4619      	mov	r1, r3
 8002d16:	4603      	mov	r3, r0
 8002d18:	4642      	mov	r2, r8
 8002d1a:	189b      	adds	r3, r3, r2
 8002d1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d20:	464b      	mov	r3, r9
 8002d22:	460a      	mov	r2, r1
 8002d24:	eb42 0303 	adc.w	r3, r2, r3
 8002d28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002d38:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002d3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002d40:	460b      	mov	r3, r1
 8002d42:	18db      	adds	r3, r3, r3
 8002d44:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d46:	4613      	mov	r3, r2
 8002d48:	eb42 0303 	adc.w	r3, r2, r3
 8002d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002d56:	f7fd fa63 	bl	8000220 <__aeabi_uldivmod>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	4b0f      	ldr	r3, [pc, #60]	; (8002d9c <UART_SetConfig+0x2f4>)
 8002d60:	fba3 1302 	umull	r1, r3, r3, r2
 8002d64:	095b      	lsrs	r3, r3, #5
 8002d66:	2164      	movs	r1, #100	; 0x64
 8002d68:	fb01 f303 	mul.w	r3, r1, r3
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	3332      	adds	r3, #50	; 0x32
 8002d72:	4a0a      	ldr	r2, [pc, #40]	; (8002d9c <UART_SetConfig+0x2f4>)
 8002d74:	fba2 2303 	umull	r2, r3, r2, r3
 8002d78:	095b      	lsrs	r3, r3, #5
 8002d7a:	f003 0207 	and.w	r2, r3, #7
 8002d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4422      	add	r2, r4
 8002d86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d88:	e10a      	b.n	8002fa0 <UART_SetConfig+0x4f8>
 8002d8a:	bf00      	nop
 8002d8c:	40011000 	.word	0x40011000
 8002d90:	40011400 	.word	0x40011400
 8002d94:	40011800 	.word	0x40011800
 8002d98:	40011c00 	.word	0x40011c00
 8002d9c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002da0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002da4:	2200      	movs	r2, #0
 8002da6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002daa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002dae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002db2:	4642      	mov	r2, r8
 8002db4:	464b      	mov	r3, r9
 8002db6:	1891      	adds	r1, r2, r2
 8002db8:	6239      	str	r1, [r7, #32]
 8002dba:	415b      	adcs	r3, r3
 8002dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8002dbe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002dc2:	4641      	mov	r1, r8
 8002dc4:	1854      	adds	r4, r2, r1
 8002dc6:	4649      	mov	r1, r9
 8002dc8:	eb43 0501 	adc.w	r5, r3, r1
 8002dcc:	f04f 0200 	mov.w	r2, #0
 8002dd0:	f04f 0300 	mov.w	r3, #0
 8002dd4:	00eb      	lsls	r3, r5, #3
 8002dd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dda:	00e2      	lsls	r2, r4, #3
 8002ddc:	4614      	mov	r4, r2
 8002dde:	461d      	mov	r5, r3
 8002de0:	4643      	mov	r3, r8
 8002de2:	18e3      	adds	r3, r4, r3
 8002de4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002de8:	464b      	mov	r3, r9
 8002dea:	eb45 0303 	adc.w	r3, r5, r3
 8002dee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002dfe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e02:	f04f 0200 	mov.w	r2, #0
 8002e06:	f04f 0300 	mov.w	r3, #0
 8002e0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e0e:	4629      	mov	r1, r5
 8002e10:	008b      	lsls	r3, r1, #2
 8002e12:	4621      	mov	r1, r4
 8002e14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e18:	4621      	mov	r1, r4
 8002e1a:	008a      	lsls	r2, r1, #2
 8002e1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002e20:	f7fd f9fe 	bl	8000220 <__aeabi_uldivmod>
 8002e24:	4602      	mov	r2, r0
 8002e26:	460b      	mov	r3, r1
 8002e28:	4b60      	ldr	r3, [pc, #384]	; (8002fac <UART_SetConfig+0x504>)
 8002e2a:	fba3 2302 	umull	r2, r3, r3, r2
 8002e2e:	095b      	lsrs	r3, r3, #5
 8002e30:	011c      	lsls	r4, r3, #4
 8002e32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e36:	2200      	movs	r2, #0
 8002e38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e3c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e40:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002e44:	4642      	mov	r2, r8
 8002e46:	464b      	mov	r3, r9
 8002e48:	1891      	adds	r1, r2, r2
 8002e4a:	61b9      	str	r1, [r7, #24]
 8002e4c:	415b      	adcs	r3, r3
 8002e4e:	61fb      	str	r3, [r7, #28]
 8002e50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e54:	4641      	mov	r1, r8
 8002e56:	1851      	adds	r1, r2, r1
 8002e58:	6139      	str	r1, [r7, #16]
 8002e5a:	4649      	mov	r1, r9
 8002e5c:	414b      	adcs	r3, r1
 8002e5e:	617b      	str	r3, [r7, #20]
 8002e60:	f04f 0200 	mov.w	r2, #0
 8002e64:	f04f 0300 	mov.w	r3, #0
 8002e68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e6c:	4659      	mov	r1, fp
 8002e6e:	00cb      	lsls	r3, r1, #3
 8002e70:	4651      	mov	r1, sl
 8002e72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e76:	4651      	mov	r1, sl
 8002e78:	00ca      	lsls	r2, r1, #3
 8002e7a:	4610      	mov	r0, r2
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4603      	mov	r3, r0
 8002e80:	4642      	mov	r2, r8
 8002e82:	189b      	adds	r3, r3, r2
 8002e84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e88:	464b      	mov	r3, r9
 8002e8a:	460a      	mov	r2, r1
 8002e8c:	eb42 0303 	adc.w	r3, r2, r3
 8002e90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e9e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002ea0:	f04f 0200 	mov.w	r2, #0
 8002ea4:	f04f 0300 	mov.w	r3, #0
 8002ea8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002eac:	4649      	mov	r1, r9
 8002eae:	008b      	lsls	r3, r1, #2
 8002eb0:	4641      	mov	r1, r8
 8002eb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002eb6:	4641      	mov	r1, r8
 8002eb8:	008a      	lsls	r2, r1, #2
 8002eba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002ebe:	f7fd f9af 	bl	8000220 <__aeabi_uldivmod>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	4611      	mov	r1, r2
 8002ec8:	4b38      	ldr	r3, [pc, #224]	; (8002fac <UART_SetConfig+0x504>)
 8002eca:	fba3 2301 	umull	r2, r3, r3, r1
 8002ece:	095b      	lsrs	r3, r3, #5
 8002ed0:	2264      	movs	r2, #100	; 0x64
 8002ed2:	fb02 f303 	mul.w	r3, r2, r3
 8002ed6:	1acb      	subs	r3, r1, r3
 8002ed8:	011b      	lsls	r3, r3, #4
 8002eda:	3332      	adds	r3, #50	; 0x32
 8002edc:	4a33      	ldr	r2, [pc, #204]	; (8002fac <UART_SetConfig+0x504>)
 8002ede:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee2:	095b      	lsrs	r3, r3, #5
 8002ee4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ee8:	441c      	add	r4, r3
 8002eea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002eee:	2200      	movs	r2, #0
 8002ef0:	673b      	str	r3, [r7, #112]	; 0x70
 8002ef2:	677a      	str	r2, [r7, #116]	; 0x74
 8002ef4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002ef8:	4642      	mov	r2, r8
 8002efa:	464b      	mov	r3, r9
 8002efc:	1891      	adds	r1, r2, r2
 8002efe:	60b9      	str	r1, [r7, #8]
 8002f00:	415b      	adcs	r3, r3
 8002f02:	60fb      	str	r3, [r7, #12]
 8002f04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f08:	4641      	mov	r1, r8
 8002f0a:	1851      	adds	r1, r2, r1
 8002f0c:	6039      	str	r1, [r7, #0]
 8002f0e:	4649      	mov	r1, r9
 8002f10:	414b      	adcs	r3, r1
 8002f12:	607b      	str	r3, [r7, #4]
 8002f14:	f04f 0200 	mov.w	r2, #0
 8002f18:	f04f 0300 	mov.w	r3, #0
 8002f1c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f20:	4659      	mov	r1, fp
 8002f22:	00cb      	lsls	r3, r1, #3
 8002f24:	4651      	mov	r1, sl
 8002f26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f2a:	4651      	mov	r1, sl
 8002f2c:	00ca      	lsls	r2, r1, #3
 8002f2e:	4610      	mov	r0, r2
 8002f30:	4619      	mov	r1, r3
 8002f32:	4603      	mov	r3, r0
 8002f34:	4642      	mov	r2, r8
 8002f36:	189b      	adds	r3, r3, r2
 8002f38:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f3a:	464b      	mov	r3, r9
 8002f3c:	460a      	mov	r2, r1
 8002f3e:	eb42 0303 	adc.w	r3, r2, r3
 8002f42:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	663b      	str	r3, [r7, #96]	; 0x60
 8002f4e:	667a      	str	r2, [r7, #100]	; 0x64
 8002f50:	f04f 0200 	mov.w	r2, #0
 8002f54:	f04f 0300 	mov.w	r3, #0
 8002f58:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002f5c:	4649      	mov	r1, r9
 8002f5e:	008b      	lsls	r3, r1, #2
 8002f60:	4641      	mov	r1, r8
 8002f62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f66:	4641      	mov	r1, r8
 8002f68:	008a      	lsls	r2, r1, #2
 8002f6a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002f6e:	f7fd f957 	bl	8000220 <__aeabi_uldivmod>
 8002f72:	4602      	mov	r2, r0
 8002f74:	460b      	mov	r3, r1
 8002f76:	4b0d      	ldr	r3, [pc, #52]	; (8002fac <UART_SetConfig+0x504>)
 8002f78:	fba3 1302 	umull	r1, r3, r3, r2
 8002f7c:	095b      	lsrs	r3, r3, #5
 8002f7e:	2164      	movs	r1, #100	; 0x64
 8002f80:	fb01 f303 	mul.w	r3, r1, r3
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	011b      	lsls	r3, r3, #4
 8002f88:	3332      	adds	r3, #50	; 0x32
 8002f8a:	4a08      	ldr	r2, [pc, #32]	; (8002fac <UART_SetConfig+0x504>)
 8002f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f90:	095b      	lsrs	r3, r3, #5
 8002f92:	f003 020f 	and.w	r2, r3, #15
 8002f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4422      	add	r2, r4
 8002f9e:	609a      	str	r2, [r3, #8]
}
 8002fa0:	bf00      	nop
 8002fa2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fac:	51eb851f 	.word	0x51eb851f

08002fb0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002fb0:	b084      	sub	sp, #16
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b084      	sub	sp, #16
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
 8002fba:	f107 001c 	add.w	r0, r7, #28
 8002fbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d122      	bne.n	800300e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fcc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002fdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002ff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d105      	bne.n	8003002 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 fa9c 	bl	8003540 <USB_CoreReset>
 8003008:	4603      	mov	r3, r0
 800300a:	73fb      	strb	r3, [r7, #15]
 800300c:	e01a      	b.n	8003044 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 fa90 	bl	8003540 <USB_CoreReset>
 8003020:	4603      	mov	r3, r0
 8003022:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003024:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003026:	2b00      	cmp	r3, #0
 8003028:	d106      	bne.n	8003038 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	639a      	str	r2, [r3, #56]	; 0x38
 8003036:	e005      	b.n	8003044 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003046:	2b01      	cmp	r3, #1
 8003048:	d10b      	bne.n	8003062 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f043 0206 	orr.w	r2, r3, #6
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f043 0220 	orr.w	r2, r3, #32
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003062:	7bfb      	ldrb	r3, [r7, #15]
}
 8003064:	4618      	mov	r0, r3
 8003066:	3710      	adds	r7, #16
 8003068:	46bd      	mov	sp, r7
 800306a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800306e:	b004      	add	sp, #16
 8003070:	4770      	bx	lr

08003072 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003072:	b480      	push	{r7}
 8003074:	b083      	sub	sp, #12
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f023 0201 	bic.w	r2, r3, #1
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	460b      	mov	r3, r1
 800309e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80030b0:	78fb      	ldrb	r3, [r7, #3]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d115      	bne.n	80030e2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80030c2:	2001      	movs	r0, #1
 80030c4:	f7fd fe0a 	bl	8000cdc <HAL_Delay>
      ms++;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	3301      	adds	r3, #1
 80030cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 fa28 	bl	8003524 <USB_GetMode>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d01e      	beq.n	8003118 <USB_SetCurrentMode+0x84>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2b31      	cmp	r3, #49	; 0x31
 80030de:	d9f0      	bls.n	80030c2 <USB_SetCurrentMode+0x2e>
 80030e0:	e01a      	b.n	8003118 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80030e2:	78fb      	ldrb	r3, [r7, #3]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d115      	bne.n	8003114 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80030f4:	2001      	movs	r0, #1
 80030f6:	f7fd fdf1 	bl	8000cdc <HAL_Delay>
      ms++;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	3301      	adds	r3, #1
 80030fe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 fa0f 	bl	8003524 <USB_GetMode>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d005      	beq.n	8003118 <USB_SetCurrentMode+0x84>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2b31      	cmp	r3, #49	; 0x31
 8003110:	d9f0      	bls.n	80030f4 <USB_SetCurrentMode+0x60>
 8003112:	e001      	b.n	8003118 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e005      	b.n	8003124 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2b32      	cmp	r3, #50	; 0x32
 800311c:	d101      	bne.n	8003122 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e000      	b.n	8003124 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800312c:	b084      	sub	sp, #16
 800312e:	b580      	push	{r7, lr}
 8003130:	b086      	sub	sp, #24
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
 8003136:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800313a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800313e:	2300      	movs	r3, #0
 8003140:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003146:	2300      	movs	r3, #0
 8003148:	613b      	str	r3, [r7, #16]
 800314a:	e009      	b.n	8003160 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	3340      	adds	r3, #64	; 0x40
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4413      	add	r3, r2
 8003156:	2200      	movs	r2, #0
 8003158:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	3301      	adds	r3, #1
 800315e:	613b      	str	r3, [r7, #16]
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	2b0e      	cmp	r3, #14
 8003164:	d9f2      	bls.n	800314c <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003168:	2b00      	cmp	r3, #0
 800316a:	d11c      	bne.n	80031a6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800317a:	f043 0302 	orr.w	r3, r3, #2
 800317e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003184:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	e005      	b.n	80031b2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80031b8:	461a      	mov	r2, r3
 80031ba:	2300      	movs	r3, #0
 80031bc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031c4:	4619      	mov	r1, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031cc:	461a      	mov	r2, r3
 80031ce:	680b      	ldr	r3, [r1, #0]
 80031d0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80031d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d10c      	bne.n	80031f2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80031d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d104      	bne.n	80031e8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80031de:	2100      	movs	r1, #0
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f000 f965 	bl	80034b0 <USB_SetDevSpeed>
 80031e6:	e008      	b.n	80031fa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80031e8:	2101      	movs	r1, #1
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f960 	bl	80034b0 <USB_SetDevSpeed>
 80031f0:	e003      	b.n	80031fa <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80031f2:	2103      	movs	r1, #3
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 f95b 	bl	80034b0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80031fa:	2110      	movs	r1, #16
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f8f3 	bl	80033e8 <USB_FlushTxFifo>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 f91f 	bl	8003450 <USB_FlushRxFifo>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003222:	461a      	mov	r2, r3
 8003224:	2300      	movs	r3, #0
 8003226:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800322e:	461a      	mov	r2, r3
 8003230:	2300      	movs	r3, #0
 8003232:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800323a:	461a      	mov	r2, r3
 800323c:	2300      	movs	r3, #0
 800323e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003240:	2300      	movs	r3, #0
 8003242:	613b      	str	r3, [r7, #16]
 8003244:	e043      	b.n	80032ce <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	015a      	lsls	r2, r3, #5
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	4413      	add	r3, r2
 800324e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003258:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800325c:	d118      	bne.n	8003290 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10a      	bne.n	800327a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	015a      	lsls	r2, r3, #5
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	4413      	add	r3, r2
 800326c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003270:	461a      	mov	r2, r3
 8003272:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003276:	6013      	str	r3, [r2, #0]
 8003278:	e013      	b.n	80032a2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	015a      	lsls	r2, r3, #5
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	4413      	add	r3, r2
 8003282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003286:	461a      	mov	r2, r3
 8003288:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800328c:	6013      	str	r3, [r2, #0]
 800328e:	e008      	b.n	80032a2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	015a      	lsls	r2, r3, #5
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	4413      	add	r3, r2
 8003298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800329c:	461a      	mov	r2, r3
 800329e:	2300      	movs	r3, #0
 80032a0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	015a      	lsls	r2, r3, #5
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	4413      	add	r3, r2
 80032aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032ae:	461a      	mov	r2, r3
 80032b0:	2300      	movs	r3, #0
 80032b2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	015a      	lsls	r2, r3, #5
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	4413      	add	r3, r2
 80032bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032c0:	461a      	mov	r2, r3
 80032c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80032c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	3301      	adds	r3, #1
 80032cc:	613b      	str	r3, [r7, #16]
 80032ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d3b7      	bcc.n	8003246 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80032d6:	2300      	movs	r3, #0
 80032d8:	613b      	str	r3, [r7, #16]
 80032da:	e043      	b.n	8003364 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	015a      	lsls	r2, r3, #5
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	4413      	add	r3, r2
 80032e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80032ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032f2:	d118      	bne.n	8003326 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10a      	bne.n	8003310 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	015a      	lsls	r2, r3, #5
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	4413      	add	r3, r2
 8003302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003306:	461a      	mov	r2, r3
 8003308:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800330c:	6013      	str	r3, [r2, #0]
 800330e:	e013      	b.n	8003338 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	015a      	lsls	r2, r3, #5
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4413      	add	r3, r2
 8003318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800331c:	461a      	mov	r2, r3
 800331e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003322:	6013      	str	r3, [r2, #0]
 8003324:	e008      	b.n	8003338 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	015a      	lsls	r2, r3, #5
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	4413      	add	r3, r2
 800332e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003332:	461a      	mov	r2, r3
 8003334:	2300      	movs	r3, #0
 8003336:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	015a      	lsls	r2, r3, #5
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4413      	add	r3, r2
 8003340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003344:	461a      	mov	r2, r3
 8003346:	2300      	movs	r3, #0
 8003348:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	015a      	lsls	r2, r3, #5
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	4413      	add	r3, r2
 8003352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003356:	461a      	mov	r2, r3
 8003358:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800335c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	3301      	adds	r3, #1
 8003362:	613b      	str	r3, [r7, #16]
 8003364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	429a      	cmp	r2, r3
 800336a:	d3b7      	bcc.n	80032dc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800337a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800337e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800338c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800338e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003390:	2b00      	cmp	r3, #0
 8003392:	d105      	bne.n	80033a0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	f043 0210 	orr.w	r2, r3, #16
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	699a      	ldr	r2, [r3, #24]
 80033a4:	4b0f      	ldr	r3, [pc, #60]	; (80033e4 <USB_DevInit+0x2b8>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80033ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d005      	beq.n	80033be <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	f043 0208 	orr.w	r2, r3, #8
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80033be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d107      	bne.n	80033d4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80033cc:	f043 0304 	orr.w	r3, r3, #4
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80033d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3718      	adds	r7, #24
 80033da:	46bd      	mov	sp, r7
 80033dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80033e0:	b004      	add	sp, #16
 80033e2:	4770      	bx	lr
 80033e4:	803c3800 	.word	0x803c3800

080033e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80033f2:	2300      	movs	r3, #0
 80033f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	3301      	adds	r3, #1
 80033fa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4a13      	ldr	r2, [pc, #76]	; (800344c <USB_FlushTxFifo+0x64>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d901      	bls.n	8003408 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e01b      	b.n	8003440 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	2b00      	cmp	r3, #0
 800340e:	daf2      	bge.n	80033f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003410:	2300      	movs	r3, #0
 8003412:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	019b      	lsls	r3, r3, #6
 8003418:	f043 0220 	orr.w	r2, r3, #32
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	3301      	adds	r3, #1
 8003424:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	4a08      	ldr	r2, [pc, #32]	; (800344c <USB_FlushTxFifo+0x64>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d901      	bls.n	8003432 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e006      	b.n	8003440 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	f003 0320 	and.w	r3, r3, #32
 800343a:	2b20      	cmp	r3, #32
 800343c:	d0f0      	beq.n	8003420 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3714      	adds	r7, #20
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr
 800344c:	00030d40 	.word	0x00030d40

08003450 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003458:	2300      	movs	r3, #0
 800345a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	3301      	adds	r3, #1
 8003460:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	4a11      	ldr	r2, [pc, #68]	; (80034ac <USB_FlushRxFifo+0x5c>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d901      	bls.n	800346e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e018      	b.n	80034a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	2b00      	cmp	r3, #0
 8003474:	daf2      	bge.n	800345c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003476:	2300      	movs	r3, #0
 8003478:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2210      	movs	r2, #16
 800347e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	3301      	adds	r3, #1
 8003484:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	4a08      	ldr	r2, [pc, #32]	; (80034ac <USB_FlushRxFifo+0x5c>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d901      	bls.n	8003492 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e006      	b.n	80034a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	f003 0310 	and.w	r3, r3, #16
 800349a:	2b10      	cmp	r3, #16
 800349c:	d0f0      	beq.n	8003480 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3714      	adds	r7, #20
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr
 80034ac:	00030d40 	.word	0x00030d40

080034b0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	460b      	mov	r3, r1
 80034ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	78fb      	ldrb	r3, [r7, #3]
 80034ca:	68f9      	ldr	r1, [r7, #12]
 80034cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034d0:	4313      	orrs	r3, r2
 80034d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3714      	adds	r7, #20
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr

080034e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80034e2:	b480      	push	{r7}
 80034e4:	b085      	sub	sp, #20
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80034fc:	f023 0303 	bic.w	r3, r3, #3
 8003500:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003510:	f043 0302 	orr.w	r3, r3, #2
 8003514:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3714      	adds	r7, #20
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	f003 0301 	and.w	r3, r3, #1
}
 8003534:	4618      	mov	r0, r3
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003548:	2300      	movs	r3, #0
 800354a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	3301      	adds	r3, #1
 8003550:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	4a13      	ldr	r2, [pc, #76]	; (80035a4 <USB_CoreReset+0x64>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d901      	bls.n	800355e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e01b      	b.n	8003596 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	2b00      	cmp	r3, #0
 8003564:	daf2      	bge.n	800354c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003566:	2300      	movs	r3, #0
 8003568:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	f043 0201 	orr.w	r2, r3, #1
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	3301      	adds	r3, #1
 800357a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	4a09      	ldr	r2, [pc, #36]	; (80035a4 <USB_CoreReset+0x64>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d901      	bls.n	8003588 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e006      	b.n	8003596 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	f003 0301 	and.w	r3, r3, #1
 8003590:	2b01      	cmp	r3, #1
 8003592:	d0f0      	beq.n	8003576 <USB_CoreReset+0x36>

  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3714      	adds	r7, #20
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	00030d40 	.word	0x00030d40

080035a8 <__NVIC_SetPriority>:
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	4603      	mov	r3, r0
 80035b0:	6039      	str	r1, [r7, #0]
 80035b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	db0a      	blt.n	80035d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	b2da      	uxtb	r2, r3
 80035c0:	490c      	ldr	r1, [pc, #48]	; (80035f4 <__NVIC_SetPriority+0x4c>)
 80035c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c6:	0112      	lsls	r2, r2, #4
 80035c8:	b2d2      	uxtb	r2, r2
 80035ca:	440b      	add	r3, r1
 80035cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80035d0:	e00a      	b.n	80035e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	4908      	ldr	r1, [pc, #32]	; (80035f8 <__NVIC_SetPriority+0x50>)
 80035d8:	79fb      	ldrb	r3, [r7, #7]
 80035da:	f003 030f 	and.w	r3, r3, #15
 80035de:	3b04      	subs	r3, #4
 80035e0:	0112      	lsls	r2, r2, #4
 80035e2:	b2d2      	uxtb	r2, r2
 80035e4:	440b      	add	r3, r1
 80035e6:	761a      	strb	r2, [r3, #24]
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr
 80035f4:	e000e100 	.word	0xe000e100
 80035f8:	e000ed00 	.word	0xe000ed00

080035fc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003600:	2100      	movs	r1, #0
 8003602:	f06f 0004 	mvn.w	r0, #4
 8003606:	f7ff ffcf 	bl	80035a8 <__NVIC_SetPriority>
#endif
}
 800360a:	bf00      	nop
 800360c:	bd80      	pop	{r7, pc}
	...

08003610 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003616:	f3ef 8305 	mrs	r3, IPSR
 800361a:	603b      	str	r3, [r7, #0]
  return(result);
 800361c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003622:	f06f 0305 	mvn.w	r3, #5
 8003626:	607b      	str	r3, [r7, #4]
 8003628:	e00c      	b.n	8003644 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800362a:	4b0a      	ldr	r3, [pc, #40]	; (8003654 <osKernelInitialize+0x44>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d105      	bne.n	800363e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003632:	4b08      	ldr	r3, [pc, #32]	; (8003654 <osKernelInitialize+0x44>)
 8003634:	2201      	movs	r2, #1
 8003636:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003638:	2300      	movs	r3, #0
 800363a:	607b      	str	r3, [r7, #4]
 800363c:	e002      	b.n	8003644 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800363e:	f04f 33ff 	mov.w	r3, #4294967295
 8003642:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003644:	687b      	ldr	r3, [r7, #4]
}
 8003646:	4618      	mov	r0, r3
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	200005d0 	.word	0x200005d0

08003658 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800365e:	f3ef 8305 	mrs	r3, IPSR
 8003662:	603b      	str	r3, [r7, #0]
  return(result);
 8003664:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003666:	2b00      	cmp	r3, #0
 8003668:	d003      	beq.n	8003672 <osKernelStart+0x1a>
    stat = osErrorISR;
 800366a:	f06f 0305 	mvn.w	r3, #5
 800366e:	607b      	str	r3, [r7, #4]
 8003670:	e010      	b.n	8003694 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003672:	4b0b      	ldr	r3, [pc, #44]	; (80036a0 <osKernelStart+0x48>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d109      	bne.n	800368e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800367a:	f7ff ffbf 	bl	80035fc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800367e:	4b08      	ldr	r3, [pc, #32]	; (80036a0 <osKernelStart+0x48>)
 8003680:	2202      	movs	r2, #2
 8003682:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003684:	f001 f816 	bl	80046b4 <vTaskStartScheduler>
      stat = osOK;
 8003688:	2300      	movs	r3, #0
 800368a:	607b      	str	r3, [r7, #4]
 800368c:	e002      	b.n	8003694 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800368e:	f04f 33ff 	mov.w	r3, #4294967295
 8003692:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003694:	687b      	ldr	r3, [r7, #4]
}
 8003696:	4618      	mov	r0, r3
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	200005d0 	.word	0x200005d0

080036a4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b08e      	sub	sp, #56	; 0x38
 80036a8:	af04      	add	r7, sp, #16
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80036b0:	2300      	movs	r3, #0
 80036b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036b4:	f3ef 8305 	mrs	r3, IPSR
 80036b8:	617b      	str	r3, [r7, #20]
  return(result);
 80036ba:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d17e      	bne.n	80037be <osThreadNew+0x11a>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d07b      	beq.n	80037be <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80036c6:	2380      	movs	r3, #128	; 0x80
 80036c8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80036ca:	2318      	movs	r3, #24
 80036cc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80036ce:	2300      	movs	r3, #0
 80036d0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80036d2:	f04f 33ff 	mov.w	r3, #4294967295
 80036d6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d045      	beq.n	800376a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d002      	beq.n	80036ec <osThreadNew+0x48>
        name = attr->name;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d002      	beq.n	80036fa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d008      	beq.n	8003712 <osThreadNew+0x6e>
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	2b38      	cmp	r3, #56	; 0x38
 8003704:	d805      	bhi.n	8003712 <osThreadNew+0x6e>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <osThreadNew+0x72>
        return (NULL);
 8003712:	2300      	movs	r3, #0
 8003714:	e054      	b.n	80037c0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d003      	beq.n	8003726 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	089b      	lsrs	r3, r3, #2
 8003724:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00e      	beq.n	800374c <osThreadNew+0xa8>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	2b5b      	cmp	r3, #91	; 0x5b
 8003734:	d90a      	bls.n	800374c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800373a:	2b00      	cmp	r3, #0
 800373c:	d006      	beq.n	800374c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d002      	beq.n	800374c <osThreadNew+0xa8>
        mem = 1;
 8003746:	2301      	movs	r3, #1
 8003748:	61bb      	str	r3, [r7, #24]
 800374a:	e010      	b.n	800376e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d10c      	bne.n	800376e <osThreadNew+0xca>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d108      	bne.n	800376e <osThreadNew+0xca>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d104      	bne.n	800376e <osThreadNew+0xca>
          mem = 0;
 8003764:	2300      	movs	r3, #0
 8003766:	61bb      	str	r3, [r7, #24]
 8003768:	e001      	b.n	800376e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800376a:	2300      	movs	r3, #0
 800376c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d110      	bne.n	8003796 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800377c:	9202      	str	r2, [sp, #8]
 800377e:	9301      	str	r3, [sp, #4]
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	9300      	str	r3, [sp, #0]
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	6a3a      	ldr	r2, [r7, #32]
 8003788:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	f000 fdf0 	bl	8004370 <xTaskCreateStatic>
 8003790:	4603      	mov	r3, r0
 8003792:	613b      	str	r3, [r7, #16]
 8003794:	e013      	b.n	80037be <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d110      	bne.n	80037be <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800379c:	6a3b      	ldr	r3, [r7, #32]
 800379e:	b29a      	uxth	r2, r3
 80037a0:	f107 0310 	add.w	r3, r7, #16
 80037a4:	9301      	str	r3, [sp, #4]
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	9300      	str	r3, [sp, #0]
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f000 fe3b 	bl	800442a <xTaskCreate>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d001      	beq.n	80037be <osThreadNew+0x11a>
            hTask = NULL;
 80037ba:	2300      	movs	r3, #0
 80037bc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80037be:	693b      	ldr	r3, [r7, #16]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3728      	adds	r7, #40	; 0x28
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	4a07      	ldr	r2, [pc, #28]	; (80037f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80037d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	4a06      	ldr	r2, [pc, #24]	; (80037f8 <vApplicationGetIdleTaskMemory+0x30>)
 80037de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2280      	movs	r2, #128	; 0x80
 80037e4:	601a      	str	r2, [r3, #0]
}
 80037e6:	bf00      	nop
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	200005d4 	.word	0x200005d4
 80037f8:	20000630 	.word	0x20000630

080037fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	4a07      	ldr	r2, [pc, #28]	; (8003828 <vApplicationGetTimerTaskMemory+0x2c>)
 800380c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	4a06      	ldr	r2, [pc, #24]	; (800382c <vApplicationGetTimerTaskMemory+0x30>)
 8003812:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f44f 7280 	mov.w	r2, #256	; 0x100
 800381a:	601a      	str	r2, [r3, #0]
}
 800381c:	bf00      	nop
 800381e:	3714      	adds	r7, #20
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr
 8003828:	20000830 	.word	0x20000830
 800382c:	2000088c 	.word	0x2000088c

08003830 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f103 0208 	add.w	r2, r3, #8
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f04f 32ff 	mov.w	r2, #4294967295
 8003848:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f103 0208 	add.w	r2, r3, #8
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f103 0208 	add.w	r2, r3, #8
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800387e:	bf00      	nop
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr

0800388a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800388a:	b480      	push	{r7}
 800388c:	b085      	sub	sp, #20
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
 8003892:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	689a      	ldr	r2, [r3, #8]
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	683a      	ldr	r2, [r7, #0]
 80038ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	683a      	ldr	r2, [r7, #0]
 80038b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	1c5a      	adds	r2, r3, #1
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	601a      	str	r2, [r3, #0]
}
 80038c6:	bf00      	nop
 80038c8:	3714      	adds	r7, #20
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr

080038d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80038d2:	b480      	push	{r7}
 80038d4:	b085      	sub	sp, #20
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
 80038da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e8:	d103      	bne.n	80038f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	60fb      	str	r3, [r7, #12]
 80038f0:	e00c      	b.n	800390c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	3308      	adds	r3, #8
 80038f6:	60fb      	str	r3, [r7, #12]
 80038f8:	e002      	b.n	8003900 <vListInsert+0x2e>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	60fb      	str	r3, [r7, #12]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	429a      	cmp	r2, r3
 800390a:	d2f6      	bcs.n	80038fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	685a      	ldr	r2, [r3, #4]
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	683a      	ldr	r2, [r7, #0]
 800391a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	683a      	ldr	r2, [r7, #0]
 8003926:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	1c5a      	adds	r2, r3, #1
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	601a      	str	r2, [r3, #0]
}
 8003938:	bf00      	nop
 800393a:	3714      	adds	r7, #20
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	6892      	ldr	r2, [r2, #8]
 800395a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	6852      	ldr	r2, [r2, #4]
 8003964:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	429a      	cmp	r2, r3
 800396e:	d103      	bne.n	8003978 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	1e5a      	subs	r2, r3, #1
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
}
 800398c:	4618      	mov	r0, r3
 800398e:	3714      	adds	r7, #20
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d10a      	bne.n	80039c2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80039ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b0:	f383 8811 	msr	BASEPRI, r3
 80039b4:	f3bf 8f6f 	isb	sy
 80039b8:	f3bf 8f4f 	dsb	sy
 80039bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80039be:	bf00      	nop
 80039c0:	e7fe      	b.n	80039c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80039c2:	f002 f817 	bl	80059f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ce:	68f9      	ldr	r1, [r7, #12]
 80039d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80039d2:	fb01 f303 	mul.w	r3, r1, r3
 80039d6:	441a      	add	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f2:	3b01      	subs	r3, #1
 80039f4:	68f9      	ldr	r1, [r7, #12]
 80039f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80039f8:	fb01 f303 	mul.w	r3, r1, r3
 80039fc:	441a      	add	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	22ff      	movs	r2, #255	; 0xff
 8003a06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	22ff      	movs	r2, #255	; 0xff
 8003a0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d114      	bne.n	8003a42 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d01a      	beq.n	8003a56 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	3310      	adds	r3, #16
 8003a24:	4618      	mov	r0, r3
 8003a26:	f001 f8cf 	bl	8004bc8 <xTaskRemoveFromEventList>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d012      	beq.n	8003a56 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003a30:	4b0c      	ldr	r3, [pc, #48]	; (8003a64 <xQueueGenericReset+0xcc>)
 8003a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a36:	601a      	str	r2, [r3, #0]
 8003a38:	f3bf 8f4f 	dsb	sy
 8003a3c:	f3bf 8f6f 	isb	sy
 8003a40:	e009      	b.n	8003a56 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	3310      	adds	r3, #16
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7ff fef2 	bl	8003830 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	3324      	adds	r3, #36	; 0x24
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7ff feed 	bl	8003830 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003a56:	f001 fffd 	bl	8005a54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003a5a:	2301      	movs	r3, #1
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	e000ed04 	.word	0xe000ed04

08003a68 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b08e      	sub	sp, #56	; 0x38
 8003a6c:	af02      	add	r7, sp, #8
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
 8003a74:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d10a      	bne.n	8003a92 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a80:	f383 8811 	msr	BASEPRI, r3
 8003a84:	f3bf 8f6f 	isb	sy
 8003a88:	f3bf 8f4f 	dsb	sy
 8003a8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003a8e:	bf00      	nop
 8003a90:	e7fe      	b.n	8003a90 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10a      	bne.n	8003aae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a9c:	f383 8811 	msr	BASEPRI, r3
 8003aa0:	f3bf 8f6f 	isb	sy
 8003aa4:	f3bf 8f4f 	dsb	sy
 8003aa8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003aaa:	bf00      	nop
 8003aac:	e7fe      	b.n	8003aac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d002      	beq.n	8003aba <xQueueGenericCreateStatic+0x52>
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <xQueueGenericCreateStatic+0x56>
 8003aba:	2301      	movs	r3, #1
 8003abc:	e000      	b.n	8003ac0 <xQueueGenericCreateStatic+0x58>
 8003abe:	2300      	movs	r3, #0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10a      	bne.n	8003ada <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac8:	f383 8811 	msr	BASEPRI, r3
 8003acc:	f3bf 8f6f 	isb	sy
 8003ad0:	f3bf 8f4f 	dsb	sy
 8003ad4:	623b      	str	r3, [r7, #32]
}
 8003ad6:	bf00      	nop
 8003ad8:	e7fe      	b.n	8003ad8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d102      	bne.n	8003ae6 <xQueueGenericCreateStatic+0x7e>
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <xQueueGenericCreateStatic+0x82>
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e000      	b.n	8003aec <xQueueGenericCreateStatic+0x84>
 8003aea:	2300      	movs	r3, #0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10a      	bne.n	8003b06 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af4:	f383 8811 	msr	BASEPRI, r3
 8003af8:	f3bf 8f6f 	isb	sy
 8003afc:	f3bf 8f4f 	dsb	sy
 8003b00:	61fb      	str	r3, [r7, #28]
}
 8003b02:	bf00      	nop
 8003b04:	e7fe      	b.n	8003b04 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003b06:	2350      	movs	r3, #80	; 0x50
 8003b08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	2b50      	cmp	r3, #80	; 0x50
 8003b0e:	d00a      	beq.n	8003b26 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b14:	f383 8811 	msr	BASEPRI, r3
 8003b18:	f3bf 8f6f 	isb	sy
 8003b1c:	f3bf 8f4f 	dsb	sy
 8003b20:	61bb      	str	r3, [r7, #24]
}
 8003b22:	bf00      	nop
 8003b24:	e7fe      	b.n	8003b24 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003b26:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00d      	beq.n	8003b4e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003b3a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b40:	9300      	str	r3, [sp, #0]
 8003b42:	4613      	mov	r3, r2
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	68b9      	ldr	r1, [r7, #8]
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	f000 f805 	bl	8003b58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3730      	adds	r7, #48	; 0x30
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
 8003b64:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d103      	bne.n	8003b74 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	69ba      	ldr	r2, [r7, #24]
 8003b70:	601a      	str	r2, [r3, #0]
 8003b72:	e002      	b.n	8003b7a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	68ba      	ldr	r2, [r7, #8]
 8003b84:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003b86:	2101      	movs	r1, #1
 8003b88:	69b8      	ldr	r0, [r7, #24]
 8003b8a:	f7ff ff05 	bl	8003998 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	78fa      	ldrb	r2, [r7, #3]
 8003b92:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003b96:	bf00      	nop
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
	...

08003ba0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b08e      	sub	sp, #56	; 0x38
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]
 8003bac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10a      	bne.n	8003bd2 <xQueueGenericSend+0x32>
	__asm volatile
 8003bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc0:	f383 8811 	msr	BASEPRI, r3
 8003bc4:	f3bf 8f6f 	isb	sy
 8003bc8:	f3bf 8f4f 	dsb	sy
 8003bcc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003bce:	bf00      	nop
 8003bd0:	e7fe      	b.n	8003bd0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d103      	bne.n	8003be0 <xQueueGenericSend+0x40>
 8003bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d101      	bne.n	8003be4 <xQueueGenericSend+0x44>
 8003be0:	2301      	movs	r3, #1
 8003be2:	e000      	b.n	8003be6 <xQueueGenericSend+0x46>
 8003be4:	2300      	movs	r3, #0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10a      	bne.n	8003c00 <xQueueGenericSend+0x60>
	__asm volatile
 8003bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bee:	f383 8811 	msr	BASEPRI, r3
 8003bf2:	f3bf 8f6f 	isb	sy
 8003bf6:	f3bf 8f4f 	dsb	sy
 8003bfa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003bfc:	bf00      	nop
 8003bfe:	e7fe      	b.n	8003bfe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d103      	bne.n	8003c0e <xQueueGenericSend+0x6e>
 8003c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d101      	bne.n	8003c12 <xQueueGenericSend+0x72>
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e000      	b.n	8003c14 <xQueueGenericSend+0x74>
 8003c12:	2300      	movs	r3, #0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d10a      	bne.n	8003c2e <xQueueGenericSend+0x8e>
	__asm volatile
 8003c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1c:	f383 8811 	msr	BASEPRI, r3
 8003c20:	f3bf 8f6f 	isb	sy
 8003c24:	f3bf 8f4f 	dsb	sy
 8003c28:	623b      	str	r3, [r7, #32]
}
 8003c2a:	bf00      	nop
 8003c2c:	e7fe      	b.n	8003c2c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c2e:	f001 f989 	bl	8004f44 <xTaskGetSchedulerState>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d102      	bne.n	8003c3e <xQueueGenericSend+0x9e>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <xQueueGenericSend+0xa2>
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e000      	b.n	8003c44 <xQueueGenericSend+0xa4>
 8003c42:	2300      	movs	r3, #0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10a      	bne.n	8003c5e <xQueueGenericSend+0xbe>
	__asm volatile
 8003c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4c:	f383 8811 	msr	BASEPRI, r3
 8003c50:	f3bf 8f6f 	isb	sy
 8003c54:	f3bf 8f4f 	dsb	sy
 8003c58:	61fb      	str	r3, [r7, #28]
}
 8003c5a:	bf00      	nop
 8003c5c:	e7fe      	b.n	8003c5c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c5e:	f001 fec9 	bl	80059f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d302      	bcc.n	8003c74 <xQueueGenericSend+0xd4>
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d129      	bne.n	8003cc8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c74:	683a      	ldr	r2, [r7, #0]
 8003c76:	68b9      	ldr	r1, [r7, #8]
 8003c78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c7a:	f000 fa0b 	bl	8004094 <prvCopyDataToQueue>
 8003c7e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d010      	beq.n	8003caa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8a:	3324      	adds	r3, #36	; 0x24
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f000 ff9b 	bl	8004bc8 <xTaskRemoveFromEventList>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d013      	beq.n	8003cc0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003c98:	4b3f      	ldr	r3, [pc, #252]	; (8003d98 <xQueueGenericSend+0x1f8>)
 8003c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	f3bf 8f4f 	dsb	sy
 8003ca4:	f3bf 8f6f 	isb	sy
 8003ca8:	e00a      	b.n	8003cc0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d007      	beq.n	8003cc0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003cb0:	4b39      	ldr	r3, [pc, #228]	; (8003d98 <xQueueGenericSend+0x1f8>)
 8003cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cb6:	601a      	str	r2, [r3, #0]
 8003cb8:	f3bf 8f4f 	dsb	sy
 8003cbc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003cc0:	f001 fec8 	bl	8005a54 <vPortExitCritical>
				return pdPASS;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e063      	b.n	8003d90 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d103      	bne.n	8003cd6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003cce:	f001 fec1 	bl	8005a54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	e05c      	b.n	8003d90 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d106      	bne.n	8003cea <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003cdc:	f107 0314 	add.w	r3, r7, #20
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f000 ffd5 	bl	8004c90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003cea:	f001 feb3 	bl	8005a54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003cee:	f000 fd47 	bl	8004780 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003cf2:	f001 fe7f 	bl	80059f4 <vPortEnterCritical>
 8003cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003cfc:	b25b      	sxtb	r3, r3
 8003cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d02:	d103      	bne.n	8003d0c <xQueueGenericSend+0x16c>
 8003d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d12:	b25b      	sxtb	r3, r3
 8003d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d18:	d103      	bne.n	8003d22 <xQueueGenericSend+0x182>
 8003d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d22:	f001 fe97 	bl	8005a54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d26:	1d3a      	adds	r2, r7, #4
 8003d28:	f107 0314 	add.w	r3, r7, #20
 8003d2c:	4611      	mov	r1, r2
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 ffc4 	bl	8004cbc <xTaskCheckForTimeOut>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d124      	bne.n	8003d84 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003d3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d3c:	f000 faa2 	bl	8004284 <prvIsQueueFull>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d018      	beq.n	8003d78 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d48:	3310      	adds	r3, #16
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	4611      	mov	r1, r2
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f000 feea 	bl	8004b28 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003d54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d56:	f000 fa2d 	bl	80041b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003d5a:	f000 fd1f 	bl	800479c <xTaskResumeAll>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f47f af7c 	bne.w	8003c5e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003d66:	4b0c      	ldr	r3, [pc, #48]	; (8003d98 <xQueueGenericSend+0x1f8>)
 8003d68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d6c:	601a      	str	r2, [r3, #0]
 8003d6e:	f3bf 8f4f 	dsb	sy
 8003d72:	f3bf 8f6f 	isb	sy
 8003d76:	e772      	b.n	8003c5e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003d78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d7a:	f000 fa1b 	bl	80041b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d7e:	f000 fd0d 	bl	800479c <xTaskResumeAll>
 8003d82:	e76c      	b.n	8003c5e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003d84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d86:	f000 fa15 	bl	80041b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d8a:	f000 fd07 	bl	800479c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003d8e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3738      	adds	r7, #56	; 0x38
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	e000ed04 	.word	0xe000ed04

08003d9c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b090      	sub	sp, #64	; 0x40
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
 8003da8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10a      	bne.n	8003dca <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db8:	f383 8811 	msr	BASEPRI, r3
 8003dbc:	f3bf 8f6f 	isb	sy
 8003dc0:	f3bf 8f4f 	dsb	sy
 8003dc4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003dc6:	bf00      	nop
 8003dc8:	e7fe      	b.n	8003dc8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d103      	bne.n	8003dd8 <xQueueGenericSendFromISR+0x3c>
 8003dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d101      	bne.n	8003ddc <xQueueGenericSendFromISR+0x40>
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e000      	b.n	8003dde <xQueueGenericSendFromISR+0x42>
 8003ddc:	2300      	movs	r3, #0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10a      	bne.n	8003df8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de6:	f383 8811 	msr	BASEPRI, r3
 8003dea:	f3bf 8f6f 	isb	sy
 8003dee:	f3bf 8f4f 	dsb	sy
 8003df2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003df4:	bf00      	nop
 8003df6:	e7fe      	b.n	8003df6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d103      	bne.n	8003e06 <xQueueGenericSendFromISR+0x6a>
 8003dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d101      	bne.n	8003e0a <xQueueGenericSendFromISR+0x6e>
 8003e06:	2301      	movs	r3, #1
 8003e08:	e000      	b.n	8003e0c <xQueueGenericSendFromISR+0x70>
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d10a      	bne.n	8003e26 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e14:	f383 8811 	msr	BASEPRI, r3
 8003e18:	f3bf 8f6f 	isb	sy
 8003e1c:	f3bf 8f4f 	dsb	sy
 8003e20:	623b      	str	r3, [r7, #32]
}
 8003e22:	bf00      	nop
 8003e24:	e7fe      	b.n	8003e24 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003e26:	f001 fec7 	bl	8005bb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003e2a:	f3ef 8211 	mrs	r2, BASEPRI
 8003e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e32:	f383 8811 	msr	BASEPRI, r3
 8003e36:	f3bf 8f6f 	isb	sy
 8003e3a:	f3bf 8f4f 	dsb	sy
 8003e3e:	61fa      	str	r2, [r7, #28]
 8003e40:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003e42:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003e44:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d302      	bcc.n	8003e58 <xQueueGenericSendFromISR+0xbc>
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d12f      	bne.n	8003eb8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e66:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	68b9      	ldr	r1, [r7, #8]
 8003e6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003e6e:	f000 f911 	bl	8004094 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003e72:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e7a:	d112      	bne.n	8003ea2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d016      	beq.n	8003eb2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e86:	3324      	adds	r3, #36	; 0x24
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f000 fe9d 	bl	8004bc8 <xTaskRemoveFromEventList>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00e      	beq.n	8003eb2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00b      	beq.n	8003eb2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	e007      	b.n	8003eb2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003ea2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	b25a      	sxtb	r2, r3
 8003eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003eb6:	e001      	b.n	8003ebc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ebe:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003ec6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3740      	adds	r7, #64	; 0x40
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
	...

08003ed4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b08c      	sub	sp, #48	; 0x30
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10a      	bne.n	8003f04 <xQueueReceive+0x30>
	__asm volatile
 8003eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef2:	f383 8811 	msr	BASEPRI, r3
 8003ef6:	f3bf 8f6f 	isb	sy
 8003efa:	f3bf 8f4f 	dsb	sy
 8003efe:	623b      	str	r3, [r7, #32]
}
 8003f00:	bf00      	nop
 8003f02:	e7fe      	b.n	8003f02 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d103      	bne.n	8003f12 <xQueueReceive+0x3e>
 8003f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <xQueueReceive+0x42>
 8003f12:	2301      	movs	r3, #1
 8003f14:	e000      	b.n	8003f18 <xQueueReceive+0x44>
 8003f16:	2300      	movs	r3, #0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10a      	bne.n	8003f32 <xQueueReceive+0x5e>
	__asm volatile
 8003f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f20:	f383 8811 	msr	BASEPRI, r3
 8003f24:	f3bf 8f6f 	isb	sy
 8003f28:	f3bf 8f4f 	dsb	sy
 8003f2c:	61fb      	str	r3, [r7, #28]
}
 8003f2e:	bf00      	nop
 8003f30:	e7fe      	b.n	8003f30 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f32:	f001 f807 	bl	8004f44 <xTaskGetSchedulerState>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d102      	bne.n	8003f42 <xQueueReceive+0x6e>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <xQueueReceive+0x72>
 8003f42:	2301      	movs	r3, #1
 8003f44:	e000      	b.n	8003f48 <xQueueReceive+0x74>
 8003f46:	2300      	movs	r3, #0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d10a      	bne.n	8003f62 <xQueueReceive+0x8e>
	__asm volatile
 8003f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f50:	f383 8811 	msr	BASEPRI, r3
 8003f54:	f3bf 8f6f 	isb	sy
 8003f58:	f3bf 8f4f 	dsb	sy
 8003f5c:	61bb      	str	r3, [r7, #24]
}
 8003f5e:	bf00      	nop
 8003f60:	e7fe      	b.n	8003f60 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f62:	f001 fd47 	bl	80059f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d01f      	beq.n	8003fb2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003f72:	68b9      	ldr	r1, [r7, #8]
 8003f74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f76:	f000 f8f7 	bl	8004168 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7c:	1e5a      	subs	r2, r3, #1
 8003f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f80:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00f      	beq.n	8003faa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f8c:	3310      	adds	r3, #16
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f000 fe1a 	bl	8004bc8 <xTaskRemoveFromEventList>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d007      	beq.n	8003faa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003f9a:	4b3d      	ldr	r3, [pc, #244]	; (8004090 <xQueueReceive+0x1bc>)
 8003f9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	f3bf 8f4f 	dsb	sy
 8003fa6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003faa:	f001 fd53 	bl	8005a54 <vPortExitCritical>
				return pdPASS;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e069      	b.n	8004086 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d103      	bne.n	8003fc0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003fb8:	f001 fd4c 	bl	8005a54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	e062      	b.n	8004086 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d106      	bne.n	8003fd4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003fc6:	f107 0310 	add.w	r3, r7, #16
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 fe60 	bl	8004c90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003fd4:	f001 fd3e 	bl	8005a54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003fd8:	f000 fbd2 	bl	8004780 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003fdc:	f001 fd0a 	bl	80059f4 <vPortEnterCritical>
 8003fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fe6:	b25b      	sxtb	r3, r3
 8003fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fec:	d103      	bne.n	8003ff6 <xQueueReceive+0x122>
 8003fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ffc:	b25b      	sxtb	r3, r3
 8003ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004002:	d103      	bne.n	800400c <xQueueReceive+0x138>
 8004004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004006:	2200      	movs	r2, #0
 8004008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800400c:	f001 fd22 	bl	8005a54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004010:	1d3a      	adds	r2, r7, #4
 8004012:	f107 0310 	add.w	r3, r7, #16
 8004016:	4611      	mov	r1, r2
 8004018:	4618      	mov	r0, r3
 800401a:	f000 fe4f 	bl	8004cbc <xTaskCheckForTimeOut>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d123      	bne.n	800406c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004024:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004026:	f000 f917 	bl	8004258 <prvIsQueueEmpty>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d017      	beq.n	8004060 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004032:	3324      	adds	r3, #36	; 0x24
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	4611      	mov	r1, r2
 8004038:	4618      	mov	r0, r3
 800403a:	f000 fd75 	bl	8004b28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800403e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004040:	f000 f8b8 	bl	80041b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004044:	f000 fbaa 	bl	800479c <xTaskResumeAll>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d189      	bne.n	8003f62 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800404e:	4b10      	ldr	r3, [pc, #64]	; (8004090 <xQueueReceive+0x1bc>)
 8004050:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004054:	601a      	str	r2, [r3, #0]
 8004056:	f3bf 8f4f 	dsb	sy
 800405a:	f3bf 8f6f 	isb	sy
 800405e:	e780      	b.n	8003f62 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004060:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004062:	f000 f8a7 	bl	80041b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004066:	f000 fb99 	bl	800479c <xTaskResumeAll>
 800406a:	e77a      	b.n	8003f62 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800406c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800406e:	f000 f8a1 	bl	80041b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004072:	f000 fb93 	bl	800479c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004076:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004078:	f000 f8ee 	bl	8004258 <prvIsQueueEmpty>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	f43f af6f 	beq.w	8003f62 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004084:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004086:	4618      	mov	r0, r3
 8004088:	3730      	adds	r7, #48	; 0x30
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	e000ed04 	.word	0xe000ed04

08004094 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b086      	sub	sp, #24
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80040a0:	2300      	movs	r3, #0
 80040a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d10d      	bne.n	80040ce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d14d      	bne.n	8004156 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	4618      	mov	r0, r3
 80040c0:	f000 ff5e 	bl	8004f80 <xTaskPriorityDisinherit>
 80040c4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	609a      	str	r2, [r3, #8]
 80040cc:	e043      	b.n	8004156 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d119      	bne.n	8004108 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6858      	ldr	r0, [r3, #4]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040dc:	461a      	mov	r2, r3
 80040de:	68b9      	ldr	r1, [r7, #8]
 80040e0:	f001 ffc0 	bl	8006064 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	685a      	ldr	r2, [r3, #4]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ec:	441a      	add	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d32b      	bcc.n	8004156 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	605a      	str	r2, [r3, #4]
 8004106:	e026      	b.n	8004156 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	68d8      	ldr	r0, [r3, #12]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004110:	461a      	mov	r2, r3
 8004112:	68b9      	ldr	r1, [r7, #8]
 8004114:	f001 ffa6 	bl	8006064 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	68da      	ldr	r2, [r3, #12]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004120:	425b      	negs	r3, r3
 8004122:	441a      	add	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	68da      	ldr	r2, [r3, #12]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	429a      	cmp	r2, r3
 8004132:	d207      	bcs.n	8004144 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	689a      	ldr	r2, [r3, #8]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413c:	425b      	negs	r3, r3
 800413e:	441a      	add	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b02      	cmp	r3, #2
 8004148:	d105      	bne.n	8004156 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d002      	beq.n	8004156 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	3b01      	subs	r3, #1
 8004154:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	1c5a      	adds	r2, r3, #1
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800415e:	697b      	ldr	r3, [r7, #20]
}
 8004160:	4618      	mov	r0, r3
 8004162:	3718      	adds	r7, #24
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004176:	2b00      	cmp	r3, #0
 8004178:	d018      	beq.n	80041ac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	68da      	ldr	r2, [r3, #12]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	441a      	add	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68da      	ldr	r2, [r3, #12]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	429a      	cmp	r2, r3
 8004192:	d303      	bcc.n	800419c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68d9      	ldr	r1, [r3, #12]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a4:	461a      	mov	r2, r3
 80041a6:	6838      	ldr	r0, [r7, #0]
 80041a8:	f001 ff5c 	bl	8006064 <memcpy>
	}
}
 80041ac:	bf00      	nop
 80041ae:	3708      	adds	r7, #8
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80041bc:	f001 fc1a 	bl	80059f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041c6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80041c8:	e011      	b.n	80041ee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d012      	beq.n	80041f8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	3324      	adds	r3, #36	; 0x24
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 fcf6 	bl	8004bc8 <xTaskRemoveFromEventList>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80041e2:	f000 fdcd 	bl	8004d80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80041e6:	7bfb      	ldrb	r3, [r7, #15]
 80041e8:	3b01      	subs	r3, #1
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80041ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	dce9      	bgt.n	80041ca <prvUnlockQueue+0x16>
 80041f6:	e000      	b.n	80041fa <prvUnlockQueue+0x46>
					break;
 80041f8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	22ff      	movs	r2, #255	; 0xff
 80041fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004202:	f001 fc27 	bl	8005a54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004206:	f001 fbf5 	bl	80059f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004210:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004212:	e011      	b.n	8004238 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d012      	beq.n	8004242 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	3310      	adds	r3, #16
 8004220:	4618      	mov	r0, r3
 8004222:	f000 fcd1 	bl	8004bc8 <xTaskRemoveFromEventList>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d001      	beq.n	8004230 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800422c:	f000 fda8 	bl	8004d80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004230:	7bbb      	ldrb	r3, [r7, #14]
 8004232:	3b01      	subs	r3, #1
 8004234:	b2db      	uxtb	r3, r3
 8004236:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004238:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800423c:	2b00      	cmp	r3, #0
 800423e:	dce9      	bgt.n	8004214 <prvUnlockQueue+0x60>
 8004240:	e000      	b.n	8004244 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004242:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	22ff      	movs	r2, #255	; 0xff
 8004248:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800424c:	f001 fc02 	bl	8005a54 <vPortExitCritical>
}
 8004250:	bf00      	nop
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004260:	f001 fbc8 	bl	80059f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004268:	2b00      	cmp	r3, #0
 800426a:	d102      	bne.n	8004272 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800426c:	2301      	movs	r3, #1
 800426e:	60fb      	str	r3, [r7, #12]
 8004270:	e001      	b.n	8004276 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004272:	2300      	movs	r3, #0
 8004274:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004276:	f001 fbed 	bl	8005a54 <vPortExitCritical>

	return xReturn;
 800427a:	68fb      	ldr	r3, [r7, #12]
}
 800427c:	4618      	mov	r0, r3
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800428c:	f001 fbb2 	bl	80059f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004298:	429a      	cmp	r2, r3
 800429a:	d102      	bne.n	80042a2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800429c:	2301      	movs	r3, #1
 800429e:	60fb      	str	r3, [r7, #12]
 80042a0:	e001      	b.n	80042a6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80042a2:	2300      	movs	r3, #0
 80042a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80042a6:	f001 fbd5 	bl	8005a54 <vPortExitCritical>

	return xReturn;
 80042aa:	68fb      	ldr	r3, [r7, #12]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80042be:	2300      	movs	r3, #0
 80042c0:	60fb      	str	r3, [r7, #12]
 80042c2:	e014      	b.n	80042ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80042c4:	4a0f      	ldr	r2, [pc, #60]	; (8004304 <vQueueAddToRegistry+0x50>)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d10b      	bne.n	80042e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80042d0:	490c      	ldr	r1, [pc, #48]	; (8004304 <vQueueAddToRegistry+0x50>)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80042da:	4a0a      	ldr	r2, [pc, #40]	; (8004304 <vQueueAddToRegistry+0x50>)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	00db      	lsls	r3, r3, #3
 80042e0:	4413      	add	r3, r2
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80042e6:	e006      	b.n	80042f6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	3301      	adds	r3, #1
 80042ec:	60fb      	str	r3, [r7, #12]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2b07      	cmp	r3, #7
 80042f2:	d9e7      	bls.n	80042c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80042f4:	bf00      	nop
 80042f6:	bf00      	nop
 80042f8:	3714      	adds	r7, #20
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	20000c8c 	.word	0x20000c8c

08004308 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004308:	b580      	push	{r7, lr}
 800430a:	b086      	sub	sp, #24
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004318:	f001 fb6c 	bl	80059f4 <vPortEnterCritical>
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004322:	b25b      	sxtb	r3, r3
 8004324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004328:	d103      	bne.n	8004332 <vQueueWaitForMessageRestricted+0x2a>
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004338:	b25b      	sxtb	r3, r3
 800433a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800433e:	d103      	bne.n	8004348 <vQueueWaitForMessageRestricted+0x40>
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004348:	f001 fb84 	bl	8005a54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004350:	2b00      	cmp	r3, #0
 8004352:	d106      	bne.n	8004362 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	3324      	adds	r3, #36	; 0x24
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	68b9      	ldr	r1, [r7, #8]
 800435c:	4618      	mov	r0, r3
 800435e:	f000 fc07 	bl	8004b70 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004362:	6978      	ldr	r0, [r7, #20]
 8004364:	f7ff ff26 	bl	80041b4 <prvUnlockQueue>
	}
 8004368:	bf00      	nop
 800436a:	3718      	adds	r7, #24
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004370:	b580      	push	{r7, lr}
 8004372:	b08e      	sub	sp, #56	; 0x38
 8004374:	af04      	add	r7, sp, #16
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	607a      	str	r2, [r7, #4]
 800437c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800437e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004380:	2b00      	cmp	r3, #0
 8004382:	d10a      	bne.n	800439a <xTaskCreateStatic+0x2a>
	__asm volatile
 8004384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004388:	f383 8811 	msr	BASEPRI, r3
 800438c:	f3bf 8f6f 	isb	sy
 8004390:	f3bf 8f4f 	dsb	sy
 8004394:	623b      	str	r3, [r7, #32]
}
 8004396:	bf00      	nop
 8004398:	e7fe      	b.n	8004398 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800439a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800439c:	2b00      	cmp	r3, #0
 800439e:	d10a      	bne.n	80043b6 <xTaskCreateStatic+0x46>
	__asm volatile
 80043a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a4:	f383 8811 	msr	BASEPRI, r3
 80043a8:	f3bf 8f6f 	isb	sy
 80043ac:	f3bf 8f4f 	dsb	sy
 80043b0:	61fb      	str	r3, [r7, #28]
}
 80043b2:	bf00      	nop
 80043b4:	e7fe      	b.n	80043b4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80043b6:	235c      	movs	r3, #92	; 0x5c
 80043b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	2b5c      	cmp	r3, #92	; 0x5c
 80043be:	d00a      	beq.n	80043d6 <xTaskCreateStatic+0x66>
	__asm volatile
 80043c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c4:	f383 8811 	msr	BASEPRI, r3
 80043c8:	f3bf 8f6f 	isb	sy
 80043cc:	f3bf 8f4f 	dsb	sy
 80043d0:	61bb      	str	r3, [r7, #24]
}
 80043d2:	bf00      	nop
 80043d4:	e7fe      	b.n	80043d4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80043d6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80043d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d01e      	beq.n	800441c <xTaskCreateStatic+0xac>
 80043de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d01b      	beq.n	800441c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80043e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043ec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80043ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f0:	2202      	movs	r2, #2
 80043f2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80043f6:	2300      	movs	r3, #0
 80043f8:	9303      	str	r3, [sp, #12]
 80043fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fc:	9302      	str	r3, [sp, #8]
 80043fe:	f107 0314 	add.w	r3, r7, #20
 8004402:	9301      	str	r3, [sp, #4]
 8004404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004406:	9300      	str	r3, [sp, #0]
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	68b9      	ldr	r1, [r7, #8]
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	f000 f850 	bl	80044b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004414:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004416:	f000 f8dd 	bl	80045d4 <prvAddNewTaskToReadyList>
 800441a:	e001      	b.n	8004420 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800441c:	2300      	movs	r3, #0
 800441e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004420:	697b      	ldr	r3, [r7, #20]
	}
 8004422:	4618      	mov	r0, r3
 8004424:	3728      	adds	r7, #40	; 0x28
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800442a:	b580      	push	{r7, lr}
 800442c:	b08c      	sub	sp, #48	; 0x30
 800442e:	af04      	add	r7, sp, #16
 8004430:	60f8      	str	r0, [r7, #12]
 8004432:	60b9      	str	r1, [r7, #8]
 8004434:	603b      	str	r3, [r7, #0]
 8004436:	4613      	mov	r3, r2
 8004438:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800443a:	88fb      	ldrh	r3, [r7, #6]
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	4618      	mov	r0, r3
 8004440:	f001 fbfa 	bl	8005c38 <pvPortMalloc>
 8004444:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d00e      	beq.n	800446a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800444c:	205c      	movs	r0, #92	; 0x5c
 800444e:	f001 fbf3 	bl	8005c38 <pvPortMalloc>
 8004452:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d003      	beq.n	8004462 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	631a      	str	r2, [r3, #48]	; 0x30
 8004460:	e005      	b.n	800446e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004462:	6978      	ldr	r0, [r7, #20]
 8004464:	f001 fcb4 	bl	8005dd0 <vPortFree>
 8004468:	e001      	b.n	800446e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800446a:	2300      	movs	r3, #0
 800446c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d017      	beq.n	80044a4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800447c:	88fa      	ldrh	r2, [r7, #6]
 800447e:	2300      	movs	r3, #0
 8004480:	9303      	str	r3, [sp, #12]
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	9302      	str	r3, [sp, #8]
 8004486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004488:	9301      	str	r3, [sp, #4]
 800448a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448c:	9300      	str	r3, [sp, #0]
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	68b9      	ldr	r1, [r7, #8]
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f000 f80e 	bl	80044b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004498:	69f8      	ldr	r0, [r7, #28]
 800449a:	f000 f89b 	bl	80045d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800449e:	2301      	movs	r3, #1
 80044a0:	61bb      	str	r3, [r7, #24]
 80044a2:	e002      	b.n	80044aa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80044a4:	f04f 33ff 	mov.w	r3, #4294967295
 80044a8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80044aa:	69bb      	ldr	r3, [r7, #24]
	}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3720      	adds	r7, #32
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b088      	sub	sp, #32
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
 80044c0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80044c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	461a      	mov	r2, r3
 80044cc:	21a5      	movs	r1, #165	; 0xa5
 80044ce:	f001 fd9d 	bl	800600c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80044d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80044dc:	3b01      	subs	r3, #1
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4413      	add	r3, r2
 80044e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	f023 0307 	bic.w	r3, r3, #7
 80044ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	f003 0307 	and.w	r3, r3, #7
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00a      	beq.n	800450c <prvInitialiseNewTask+0x58>
	__asm volatile
 80044f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044fa:	f383 8811 	msr	BASEPRI, r3
 80044fe:	f3bf 8f6f 	isb	sy
 8004502:	f3bf 8f4f 	dsb	sy
 8004506:	617b      	str	r3, [r7, #20]
}
 8004508:	bf00      	nop
 800450a:	e7fe      	b.n	800450a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d01f      	beq.n	8004552 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004512:	2300      	movs	r3, #0
 8004514:	61fb      	str	r3, [r7, #28]
 8004516:	e012      	b.n	800453e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004518:	68ba      	ldr	r2, [r7, #8]
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	4413      	add	r3, r2
 800451e:	7819      	ldrb	r1, [r3, #0]
 8004520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	4413      	add	r3, r2
 8004526:	3334      	adds	r3, #52	; 0x34
 8004528:	460a      	mov	r2, r1
 800452a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800452c:	68ba      	ldr	r2, [r7, #8]
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	4413      	add	r3, r2
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d006      	beq.n	8004546 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	3301      	adds	r3, #1
 800453c:	61fb      	str	r3, [r7, #28]
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	2b0f      	cmp	r3, #15
 8004542:	d9e9      	bls.n	8004518 <prvInitialiseNewTask+0x64>
 8004544:	e000      	b.n	8004548 <prvInitialiseNewTask+0x94>
			{
				break;
 8004546:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454a:	2200      	movs	r2, #0
 800454c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004550:	e003      	b.n	800455a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800455a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455c:	2b37      	cmp	r3, #55	; 0x37
 800455e:	d901      	bls.n	8004564 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004560:	2337      	movs	r3, #55	; 0x37
 8004562:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004566:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004568:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800456a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800456e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004572:	2200      	movs	r2, #0
 8004574:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004578:	3304      	adds	r3, #4
 800457a:	4618      	mov	r0, r3
 800457c:	f7ff f978 	bl	8003870 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004582:	3318      	adds	r3, #24
 8004584:	4618      	mov	r0, r3
 8004586:	f7ff f973 	bl	8003870 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800458a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800458e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004592:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004598:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800459a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800459e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80045a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a2:	2200      	movs	r2, #0
 80045a4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80045a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80045ae:	683a      	ldr	r2, [r7, #0]
 80045b0:	68f9      	ldr	r1, [r7, #12]
 80045b2:	69b8      	ldr	r0, [r7, #24]
 80045b4:	f001 f8f4 	bl	80057a0 <pxPortInitialiseStack>
 80045b8:	4602      	mov	r2, r0
 80045ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045bc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80045be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d002      	beq.n	80045ca <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80045c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045ca:	bf00      	nop
 80045cc:	3720      	adds	r7, #32
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
	...

080045d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80045dc:	f001 fa0a 	bl	80059f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80045e0:	4b2d      	ldr	r3, [pc, #180]	; (8004698 <prvAddNewTaskToReadyList+0xc4>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	3301      	adds	r3, #1
 80045e6:	4a2c      	ldr	r2, [pc, #176]	; (8004698 <prvAddNewTaskToReadyList+0xc4>)
 80045e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80045ea:	4b2c      	ldr	r3, [pc, #176]	; (800469c <prvAddNewTaskToReadyList+0xc8>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d109      	bne.n	8004606 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80045f2:	4a2a      	ldr	r2, [pc, #168]	; (800469c <prvAddNewTaskToReadyList+0xc8>)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80045f8:	4b27      	ldr	r3, [pc, #156]	; (8004698 <prvAddNewTaskToReadyList+0xc4>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d110      	bne.n	8004622 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004600:	f000 fbe2 	bl	8004dc8 <prvInitialiseTaskLists>
 8004604:	e00d      	b.n	8004622 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004606:	4b26      	ldr	r3, [pc, #152]	; (80046a0 <prvAddNewTaskToReadyList+0xcc>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d109      	bne.n	8004622 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800460e:	4b23      	ldr	r3, [pc, #140]	; (800469c <prvAddNewTaskToReadyList+0xc8>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004618:	429a      	cmp	r2, r3
 800461a:	d802      	bhi.n	8004622 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800461c:	4a1f      	ldr	r2, [pc, #124]	; (800469c <prvAddNewTaskToReadyList+0xc8>)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004622:	4b20      	ldr	r3, [pc, #128]	; (80046a4 <prvAddNewTaskToReadyList+0xd0>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	3301      	adds	r3, #1
 8004628:	4a1e      	ldr	r2, [pc, #120]	; (80046a4 <prvAddNewTaskToReadyList+0xd0>)
 800462a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800462c:	4b1d      	ldr	r3, [pc, #116]	; (80046a4 <prvAddNewTaskToReadyList+0xd0>)
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004638:	4b1b      	ldr	r3, [pc, #108]	; (80046a8 <prvAddNewTaskToReadyList+0xd4>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	429a      	cmp	r2, r3
 800463e:	d903      	bls.n	8004648 <prvAddNewTaskToReadyList+0x74>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004644:	4a18      	ldr	r2, [pc, #96]	; (80046a8 <prvAddNewTaskToReadyList+0xd4>)
 8004646:	6013      	str	r3, [r2, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800464c:	4613      	mov	r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4413      	add	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4a15      	ldr	r2, [pc, #84]	; (80046ac <prvAddNewTaskToReadyList+0xd8>)
 8004656:	441a      	add	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	3304      	adds	r3, #4
 800465c:	4619      	mov	r1, r3
 800465e:	4610      	mov	r0, r2
 8004660:	f7ff f913 	bl	800388a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004664:	f001 f9f6 	bl	8005a54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004668:	4b0d      	ldr	r3, [pc, #52]	; (80046a0 <prvAddNewTaskToReadyList+0xcc>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00e      	beq.n	800468e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004670:	4b0a      	ldr	r3, [pc, #40]	; (800469c <prvAddNewTaskToReadyList+0xc8>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467a:	429a      	cmp	r2, r3
 800467c:	d207      	bcs.n	800468e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800467e:	4b0c      	ldr	r3, [pc, #48]	; (80046b0 <prvAddNewTaskToReadyList+0xdc>)
 8004680:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004684:	601a      	str	r2, [r3, #0]
 8004686:	f3bf 8f4f 	dsb	sy
 800468a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800468e:	bf00      	nop
 8004690:	3708      	adds	r7, #8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	200011a0 	.word	0x200011a0
 800469c:	20000ccc 	.word	0x20000ccc
 80046a0:	200011ac 	.word	0x200011ac
 80046a4:	200011bc 	.word	0x200011bc
 80046a8:	200011a8 	.word	0x200011a8
 80046ac:	20000cd0 	.word	0x20000cd0
 80046b0:	e000ed04 	.word	0xe000ed04

080046b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b08a      	sub	sp, #40	; 0x28
 80046b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80046ba:	2300      	movs	r3, #0
 80046bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80046be:	2300      	movs	r3, #0
 80046c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80046c2:	463a      	mov	r2, r7
 80046c4:	1d39      	adds	r1, r7, #4
 80046c6:	f107 0308 	add.w	r3, r7, #8
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7ff f87c 	bl	80037c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80046d0:	6839      	ldr	r1, [r7, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68ba      	ldr	r2, [r7, #8]
 80046d6:	9202      	str	r2, [sp, #8]
 80046d8:	9301      	str	r3, [sp, #4]
 80046da:	2300      	movs	r3, #0
 80046dc:	9300      	str	r3, [sp, #0]
 80046de:	2300      	movs	r3, #0
 80046e0:	460a      	mov	r2, r1
 80046e2:	4921      	ldr	r1, [pc, #132]	; (8004768 <vTaskStartScheduler+0xb4>)
 80046e4:	4821      	ldr	r0, [pc, #132]	; (800476c <vTaskStartScheduler+0xb8>)
 80046e6:	f7ff fe43 	bl	8004370 <xTaskCreateStatic>
 80046ea:	4603      	mov	r3, r0
 80046ec:	4a20      	ldr	r2, [pc, #128]	; (8004770 <vTaskStartScheduler+0xbc>)
 80046ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80046f0:	4b1f      	ldr	r3, [pc, #124]	; (8004770 <vTaskStartScheduler+0xbc>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d002      	beq.n	80046fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80046f8:	2301      	movs	r3, #1
 80046fa:	617b      	str	r3, [r7, #20]
 80046fc:	e001      	b.n	8004702 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80046fe:	2300      	movs	r3, #0
 8004700:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d102      	bne.n	800470e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004708:	f000 fcfc 	bl	8005104 <xTimerCreateTimerTask>
 800470c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d116      	bne.n	8004742 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004718:	f383 8811 	msr	BASEPRI, r3
 800471c:	f3bf 8f6f 	isb	sy
 8004720:	f3bf 8f4f 	dsb	sy
 8004724:	613b      	str	r3, [r7, #16]
}
 8004726:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004728:	4b12      	ldr	r3, [pc, #72]	; (8004774 <vTaskStartScheduler+0xc0>)
 800472a:	f04f 32ff 	mov.w	r2, #4294967295
 800472e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004730:	4b11      	ldr	r3, [pc, #68]	; (8004778 <vTaskStartScheduler+0xc4>)
 8004732:	2201      	movs	r2, #1
 8004734:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004736:	4b11      	ldr	r3, [pc, #68]	; (800477c <vTaskStartScheduler+0xc8>)
 8004738:	2200      	movs	r2, #0
 800473a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800473c:	f001 f8b8 	bl	80058b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004740:	e00e      	b.n	8004760 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004748:	d10a      	bne.n	8004760 <vTaskStartScheduler+0xac>
	__asm volatile
 800474a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800474e:	f383 8811 	msr	BASEPRI, r3
 8004752:	f3bf 8f6f 	isb	sy
 8004756:	f3bf 8f4f 	dsb	sy
 800475a:	60fb      	str	r3, [r7, #12]
}
 800475c:	bf00      	nop
 800475e:	e7fe      	b.n	800475e <vTaskStartScheduler+0xaa>
}
 8004760:	bf00      	nop
 8004762:	3718      	adds	r7, #24
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	080060a4 	.word	0x080060a4
 800476c:	08004d99 	.word	0x08004d99
 8004770:	200011c4 	.word	0x200011c4
 8004774:	200011c0 	.word	0x200011c0
 8004778:	200011ac 	.word	0x200011ac
 800477c:	200011a4 	.word	0x200011a4

08004780 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004780:	b480      	push	{r7}
 8004782:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004784:	4b04      	ldr	r3, [pc, #16]	; (8004798 <vTaskSuspendAll+0x18>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	3301      	adds	r3, #1
 800478a:	4a03      	ldr	r2, [pc, #12]	; (8004798 <vTaskSuspendAll+0x18>)
 800478c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800478e:	bf00      	nop
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr
 8004798:	200011c8 	.word	0x200011c8

0800479c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80047a2:	2300      	movs	r3, #0
 80047a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80047a6:	2300      	movs	r3, #0
 80047a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80047aa:	4b42      	ldr	r3, [pc, #264]	; (80048b4 <xTaskResumeAll+0x118>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10a      	bne.n	80047c8 <xTaskResumeAll+0x2c>
	__asm volatile
 80047b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b6:	f383 8811 	msr	BASEPRI, r3
 80047ba:	f3bf 8f6f 	isb	sy
 80047be:	f3bf 8f4f 	dsb	sy
 80047c2:	603b      	str	r3, [r7, #0]
}
 80047c4:	bf00      	nop
 80047c6:	e7fe      	b.n	80047c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80047c8:	f001 f914 	bl	80059f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80047cc:	4b39      	ldr	r3, [pc, #228]	; (80048b4 <xTaskResumeAll+0x118>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	3b01      	subs	r3, #1
 80047d2:	4a38      	ldr	r2, [pc, #224]	; (80048b4 <xTaskResumeAll+0x118>)
 80047d4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047d6:	4b37      	ldr	r3, [pc, #220]	; (80048b4 <xTaskResumeAll+0x118>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d162      	bne.n	80048a4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80047de:	4b36      	ldr	r3, [pc, #216]	; (80048b8 <xTaskResumeAll+0x11c>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d05e      	beq.n	80048a4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047e6:	e02f      	b.n	8004848 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047e8:	4b34      	ldr	r3, [pc, #208]	; (80048bc <xTaskResumeAll+0x120>)
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	3318      	adds	r3, #24
 80047f4:	4618      	mov	r0, r3
 80047f6:	f7ff f8a5 	bl	8003944 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	3304      	adds	r3, #4
 80047fe:	4618      	mov	r0, r3
 8004800:	f7ff f8a0 	bl	8003944 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004808:	4b2d      	ldr	r3, [pc, #180]	; (80048c0 <xTaskResumeAll+0x124>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	429a      	cmp	r2, r3
 800480e:	d903      	bls.n	8004818 <xTaskResumeAll+0x7c>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004814:	4a2a      	ldr	r2, [pc, #168]	; (80048c0 <xTaskResumeAll+0x124>)
 8004816:	6013      	str	r3, [r2, #0]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800481c:	4613      	mov	r3, r2
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	4413      	add	r3, r2
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	4a27      	ldr	r2, [pc, #156]	; (80048c4 <xTaskResumeAll+0x128>)
 8004826:	441a      	add	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	3304      	adds	r3, #4
 800482c:	4619      	mov	r1, r3
 800482e:	4610      	mov	r0, r2
 8004830:	f7ff f82b 	bl	800388a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004838:	4b23      	ldr	r3, [pc, #140]	; (80048c8 <xTaskResumeAll+0x12c>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483e:	429a      	cmp	r2, r3
 8004840:	d302      	bcc.n	8004848 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004842:	4b22      	ldr	r3, [pc, #136]	; (80048cc <xTaskResumeAll+0x130>)
 8004844:	2201      	movs	r2, #1
 8004846:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004848:	4b1c      	ldr	r3, [pc, #112]	; (80048bc <xTaskResumeAll+0x120>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1cb      	bne.n	80047e8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d001      	beq.n	800485a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004856:	f000 fb55 	bl	8004f04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800485a:	4b1d      	ldr	r3, [pc, #116]	; (80048d0 <xTaskResumeAll+0x134>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d010      	beq.n	8004888 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004866:	f000 f847 	bl	80048f8 <xTaskIncrementTick>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d002      	beq.n	8004876 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004870:	4b16      	ldr	r3, [pc, #88]	; (80048cc <xTaskResumeAll+0x130>)
 8004872:	2201      	movs	r2, #1
 8004874:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	3b01      	subs	r3, #1
 800487a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1f1      	bne.n	8004866 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004882:	4b13      	ldr	r3, [pc, #76]	; (80048d0 <xTaskResumeAll+0x134>)
 8004884:	2200      	movs	r2, #0
 8004886:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004888:	4b10      	ldr	r3, [pc, #64]	; (80048cc <xTaskResumeAll+0x130>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d009      	beq.n	80048a4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004890:	2301      	movs	r3, #1
 8004892:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004894:	4b0f      	ldr	r3, [pc, #60]	; (80048d4 <xTaskResumeAll+0x138>)
 8004896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800489a:	601a      	str	r2, [r3, #0]
 800489c:	f3bf 8f4f 	dsb	sy
 80048a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80048a4:	f001 f8d6 	bl	8005a54 <vPortExitCritical>

	return xAlreadyYielded;
 80048a8:	68bb      	ldr	r3, [r7, #8]
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3710      	adds	r7, #16
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	200011c8 	.word	0x200011c8
 80048b8:	200011a0 	.word	0x200011a0
 80048bc:	20001160 	.word	0x20001160
 80048c0:	200011a8 	.word	0x200011a8
 80048c4:	20000cd0 	.word	0x20000cd0
 80048c8:	20000ccc 	.word	0x20000ccc
 80048cc:	200011b4 	.word	0x200011b4
 80048d0:	200011b0 	.word	0x200011b0
 80048d4:	e000ed04 	.word	0xe000ed04

080048d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80048de:	4b05      	ldr	r3, [pc, #20]	; (80048f4 <xTaskGetTickCount+0x1c>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80048e4:	687b      	ldr	r3, [r7, #4]
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	200011a4 	.word	0x200011a4

080048f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b086      	sub	sp, #24
 80048fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80048fe:	2300      	movs	r3, #0
 8004900:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004902:	4b4f      	ldr	r3, [pc, #316]	; (8004a40 <xTaskIncrementTick+0x148>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	f040 808f 	bne.w	8004a2a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800490c:	4b4d      	ldr	r3, [pc, #308]	; (8004a44 <xTaskIncrementTick+0x14c>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	3301      	adds	r3, #1
 8004912:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004914:	4a4b      	ldr	r2, [pc, #300]	; (8004a44 <xTaskIncrementTick+0x14c>)
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d120      	bne.n	8004962 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004920:	4b49      	ldr	r3, [pc, #292]	; (8004a48 <xTaskIncrementTick+0x150>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00a      	beq.n	8004940 <xTaskIncrementTick+0x48>
	__asm volatile
 800492a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800492e:	f383 8811 	msr	BASEPRI, r3
 8004932:	f3bf 8f6f 	isb	sy
 8004936:	f3bf 8f4f 	dsb	sy
 800493a:	603b      	str	r3, [r7, #0]
}
 800493c:	bf00      	nop
 800493e:	e7fe      	b.n	800493e <xTaskIncrementTick+0x46>
 8004940:	4b41      	ldr	r3, [pc, #260]	; (8004a48 <xTaskIncrementTick+0x150>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	60fb      	str	r3, [r7, #12]
 8004946:	4b41      	ldr	r3, [pc, #260]	; (8004a4c <xTaskIncrementTick+0x154>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a3f      	ldr	r2, [pc, #252]	; (8004a48 <xTaskIncrementTick+0x150>)
 800494c:	6013      	str	r3, [r2, #0]
 800494e:	4a3f      	ldr	r2, [pc, #252]	; (8004a4c <xTaskIncrementTick+0x154>)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6013      	str	r3, [r2, #0]
 8004954:	4b3e      	ldr	r3, [pc, #248]	; (8004a50 <xTaskIncrementTick+0x158>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	3301      	adds	r3, #1
 800495a:	4a3d      	ldr	r2, [pc, #244]	; (8004a50 <xTaskIncrementTick+0x158>)
 800495c:	6013      	str	r3, [r2, #0]
 800495e:	f000 fad1 	bl	8004f04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004962:	4b3c      	ldr	r3, [pc, #240]	; (8004a54 <xTaskIncrementTick+0x15c>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	429a      	cmp	r2, r3
 800496a:	d349      	bcc.n	8004a00 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800496c:	4b36      	ldr	r3, [pc, #216]	; (8004a48 <xTaskIncrementTick+0x150>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d104      	bne.n	8004980 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004976:	4b37      	ldr	r3, [pc, #220]	; (8004a54 <xTaskIncrementTick+0x15c>)
 8004978:	f04f 32ff 	mov.w	r2, #4294967295
 800497c:	601a      	str	r2, [r3, #0]
					break;
 800497e:	e03f      	b.n	8004a00 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004980:	4b31      	ldr	r3, [pc, #196]	; (8004a48 <xTaskIncrementTick+0x150>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	429a      	cmp	r2, r3
 8004996:	d203      	bcs.n	80049a0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004998:	4a2e      	ldr	r2, [pc, #184]	; (8004a54 <xTaskIncrementTick+0x15c>)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800499e:	e02f      	b.n	8004a00 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	3304      	adds	r3, #4
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7fe ffcd 	bl	8003944 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d004      	beq.n	80049bc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	3318      	adds	r3, #24
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7fe ffc4 	bl	8003944 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049c0:	4b25      	ldr	r3, [pc, #148]	; (8004a58 <xTaskIncrementTick+0x160>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d903      	bls.n	80049d0 <xTaskIncrementTick+0xd8>
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049cc:	4a22      	ldr	r2, [pc, #136]	; (8004a58 <xTaskIncrementTick+0x160>)
 80049ce:	6013      	str	r3, [r2, #0]
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049d4:	4613      	mov	r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	4413      	add	r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	4a1f      	ldr	r2, [pc, #124]	; (8004a5c <xTaskIncrementTick+0x164>)
 80049de:	441a      	add	r2, r3
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	3304      	adds	r3, #4
 80049e4:	4619      	mov	r1, r3
 80049e6:	4610      	mov	r0, r2
 80049e8:	f7fe ff4f 	bl	800388a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f0:	4b1b      	ldr	r3, [pc, #108]	; (8004a60 <xTaskIncrementTick+0x168>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d3b8      	bcc.n	800496c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80049fa:	2301      	movs	r3, #1
 80049fc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049fe:	e7b5      	b.n	800496c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004a00:	4b17      	ldr	r3, [pc, #92]	; (8004a60 <xTaskIncrementTick+0x168>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a06:	4915      	ldr	r1, [pc, #84]	; (8004a5c <xTaskIncrementTick+0x164>)
 8004a08:	4613      	mov	r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	4413      	add	r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	440b      	add	r3, r1
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d901      	bls.n	8004a1c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004a1c:	4b11      	ldr	r3, [pc, #68]	; (8004a64 <xTaskIncrementTick+0x16c>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d007      	beq.n	8004a34 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004a24:	2301      	movs	r3, #1
 8004a26:	617b      	str	r3, [r7, #20]
 8004a28:	e004      	b.n	8004a34 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004a2a:	4b0f      	ldr	r3, [pc, #60]	; (8004a68 <xTaskIncrementTick+0x170>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	4a0d      	ldr	r2, [pc, #52]	; (8004a68 <xTaskIncrementTick+0x170>)
 8004a32:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004a34:	697b      	ldr	r3, [r7, #20]
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3718      	adds	r7, #24
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	200011c8 	.word	0x200011c8
 8004a44:	200011a4 	.word	0x200011a4
 8004a48:	20001158 	.word	0x20001158
 8004a4c:	2000115c 	.word	0x2000115c
 8004a50:	200011b8 	.word	0x200011b8
 8004a54:	200011c0 	.word	0x200011c0
 8004a58:	200011a8 	.word	0x200011a8
 8004a5c:	20000cd0 	.word	0x20000cd0
 8004a60:	20000ccc 	.word	0x20000ccc
 8004a64:	200011b4 	.word	0x200011b4
 8004a68:	200011b0 	.word	0x200011b0

08004a6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a72:	4b28      	ldr	r3, [pc, #160]	; (8004b14 <vTaskSwitchContext+0xa8>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d003      	beq.n	8004a82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a7a:	4b27      	ldr	r3, [pc, #156]	; (8004b18 <vTaskSwitchContext+0xac>)
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004a80:	e041      	b.n	8004b06 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004a82:	4b25      	ldr	r3, [pc, #148]	; (8004b18 <vTaskSwitchContext+0xac>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a88:	4b24      	ldr	r3, [pc, #144]	; (8004b1c <vTaskSwitchContext+0xb0>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	60fb      	str	r3, [r7, #12]
 8004a8e:	e010      	b.n	8004ab2 <vTaskSwitchContext+0x46>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d10a      	bne.n	8004aac <vTaskSwitchContext+0x40>
	__asm volatile
 8004a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a9a:	f383 8811 	msr	BASEPRI, r3
 8004a9e:	f3bf 8f6f 	isb	sy
 8004aa2:	f3bf 8f4f 	dsb	sy
 8004aa6:	607b      	str	r3, [r7, #4]
}
 8004aa8:	bf00      	nop
 8004aaa:	e7fe      	b.n	8004aaa <vTaskSwitchContext+0x3e>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	60fb      	str	r3, [r7, #12]
 8004ab2:	491b      	ldr	r1, [pc, #108]	; (8004b20 <vTaskSwitchContext+0xb4>)
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	4413      	add	r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	440b      	add	r3, r1
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d0e4      	beq.n	8004a90 <vTaskSwitchContext+0x24>
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	4413      	add	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4a13      	ldr	r2, [pc, #76]	; (8004b20 <vTaskSwitchContext+0xb4>)
 8004ad2:	4413      	add	r3, r2
 8004ad4:	60bb      	str	r3, [r7, #8]
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	685a      	ldr	r2, [r3, #4]
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	605a      	str	r2, [r3, #4]
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	685a      	ldr	r2, [r3, #4]
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	3308      	adds	r3, #8
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d104      	bne.n	8004af6 <vTaskSwitchContext+0x8a>
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	605a      	str	r2, [r3, #4]
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	4a09      	ldr	r2, [pc, #36]	; (8004b24 <vTaskSwitchContext+0xb8>)
 8004afe:	6013      	str	r3, [r2, #0]
 8004b00:	4a06      	ldr	r2, [pc, #24]	; (8004b1c <vTaskSwitchContext+0xb0>)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6013      	str	r3, [r2, #0]
}
 8004b06:	bf00      	nop
 8004b08:	3714      	adds	r7, #20
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	200011c8 	.word	0x200011c8
 8004b18:	200011b4 	.word	0x200011b4
 8004b1c:	200011a8 	.word	0x200011a8
 8004b20:	20000cd0 	.word	0x20000cd0
 8004b24:	20000ccc 	.word	0x20000ccc

08004b28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d10a      	bne.n	8004b4e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3c:	f383 8811 	msr	BASEPRI, r3
 8004b40:	f3bf 8f6f 	isb	sy
 8004b44:	f3bf 8f4f 	dsb	sy
 8004b48:	60fb      	str	r3, [r7, #12]
}
 8004b4a:	bf00      	nop
 8004b4c:	e7fe      	b.n	8004b4c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b4e:	4b07      	ldr	r3, [pc, #28]	; (8004b6c <vTaskPlaceOnEventList+0x44>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	3318      	adds	r3, #24
 8004b54:	4619      	mov	r1, r3
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f7fe febb 	bl	80038d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004b5c:	2101      	movs	r1, #1
 8004b5e:	6838      	ldr	r0, [r7, #0]
 8004b60:	f000 fa7c 	bl	800505c <prvAddCurrentTaskToDelayedList>
}
 8004b64:	bf00      	nop
 8004b66:	3710      	adds	r7, #16
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	20000ccc 	.word	0x20000ccc

08004b70 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10a      	bne.n	8004b98 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b86:	f383 8811 	msr	BASEPRI, r3
 8004b8a:	f3bf 8f6f 	isb	sy
 8004b8e:	f3bf 8f4f 	dsb	sy
 8004b92:	617b      	str	r3, [r7, #20]
}
 8004b94:	bf00      	nop
 8004b96:	e7fe      	b.n	8004b96 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b98:	4b0a      	ldr	r3, [pc, #40]	; (8004bc4 <vTaskPlaceOnEventListRestricted+0x54>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	3318      	adds	r3, #24
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	68f8      	ldr	r0, [r7, #12]
 8004ba2:	f7fe fe72 	bl	800388a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d002      	beq.n	8004bb2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004bac:	f04f 33ff 	mov.w	r3, #4294967295
 8004bb0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004bb2:	6879      	ldr	r1, [r7, #4]
 8004bb4:	68b8      	ldr	r0, [r7, #8]
 8004bb6:	f000 fa51 	bl	800505c <prvAddCurrentTaskToDelayedList>
	}
 8004bba:	bf00      	nop
 8004bbc:	3718      	adds	r7, #24
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	20000ccc 	.word	0x20000ccc

08004bc8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d10a      	bne.n	8004bf4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be2:	f383 8811 	msr	BASEPRI, r3
 8004be6:	f3bf 8f6f 	isb	sy
 8004bea:	f3bf 8f4f 	dsb	sy
 8004bee:	60fb      	str	r3, [r7, #12]
}
 8004bf0:	bf00      	nop
 8004bf2:	e7fe      	b.n	8004bf2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	3318      	adds	r3, #24
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7fe fea3 	bl	8003944 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bfe:	4b1e      	ldr	r3, [pc, #120]	; (8004c78 <xTaskRemoveFromEventList+0xb0>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d11d      	bne.n	8004c42 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	3304      	adds	r3, #4
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7fe fe9a 	bl	8003944 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c14:	4b19      	ldr	r3, [pc, #100]	; (8004c7c <xTaskRemoveFromEventList+0xb4>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d903      	bls.n	8004c24 <xTaskRemoveFromEventList+0x5c>
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c20:	4a16      	ldr	r2, [pc, #88]	; (8004c7c <xTaskRemoveFromEventList+0xb4>)
 8004c22:	6013      	str	r3, [r2, #0]
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c28:	4613      	mov	r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	4413      	add	r3, r2
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	4a13      	ldr	r2, [pc, #76]	; (8004c80 <xTaskRemoveFromEventList+0xb8>)
 8004c32:	441a      	add	r2, r3
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	3304      	adds	r3, #4
 8004c38:	4619      	mov	r1, r3
 8004c3a:	4610      	mov	r0, r2
 8004c3c:	f7fe fe25 	bl	800388a <vListInsertEnd>
 8004c40:	e005      	b.n	8004c4e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	3318      	adds	r3, #24
 8004c46:	4619      	mov	r1, r3
 8004c48:	480e      	ldr	r0, [pc, #56]	; (8004c84 <xTaskRemoveFromEventList+0xbc>)
 8004c4a:	f7fe fe1e 	bl	800388a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c52:	4b0d      	ldr	r3, [pc, #52]	; (8004c88 <xTaskRemoveFromEventList+0xc0>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d905      	bls.n	8004c68 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004c60:	4b0a      	ldr	r3, [pc, #40]	; (8004c8c <xTaskRemoveFromEventList+0xc4>)
 8004c62:	2201      	movs	r2, #1
 8004c64:	601a      	str	r2, [r3, #0]
 8004c66:	e001      	b.n	8004c6c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004c6c:	697b      	ldr	r3, [r7, #20]
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3718      	adds	r7, #24
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	200011c8 	.word	0x200011c8
 8004c7c:	200011a8 	.word	0x200011a8
 8004c80:	20000cd0 	.word	0x20000cd0
 8004c84:	20001160 	.word	0x20001160
 8004c88:	20000ccc 	.word	0x20000ccc
 8004c8c:	200011b4 	.word	0x200011b4

08004c90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004c98:	4b06      	ldr	r3, [pc, #24]	; (8004cb4 <vTaskInternalSetTimeOutState+0x24>)
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004ca0:	4b05      	ldr	r3, [pc, #20]	; (8004cb8 <vTaskInternalSetTimeOutState+0x28>)
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	605a      	str	r2, [r3, #4]
}
 8004ca8:	bf00      	nop
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr
 8004cb4:	200011b8 	.word	0x200011b8
 8004cb8:	200011a4 	.word	0x200011a4

08004cbc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b088      	sub	sp, #32
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d10a      	bne.n	8004ce2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd0:	f383 8811 	msr	BASEPRI, r3
 8004cd4:	f3bf 8f6f 	isb	sy
 8004cd8:	f3bf 8f4f 	dsb	sy
 8004cdc:	613b      	str	r3, [r7, #16]
}
 8004cde:	bf00      	nop
 8004ce0:	e7fe      	b.n	8004ce0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10a      	bne.n	8004cfe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cec:	f383 8811 	msr	BASEPRI, r3
 8004cf0:	f3bf 8f6f 	isb	sy
 8004cf4:	f3bf 8f4f 	dsb	sy
 8004cf8:	60fb      	str	r3, [r7, #12]
}
 8004cfa:	bf00      	nop
 8004cfc:	e7fe      	b.n	8004cfc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004cfe:	f000 fe79 	bl	80059f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004d02:	4b1d      	ldr	r3, [pc, #116]	; (8004d78 <xTaskCheckForTimeOut+0xbc>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	69ba      	ldr	r2, [r7, #24]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d1a:	d102      	bne.n	8004d22 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	61fb      	str	r3, [r7, #28]
 8004d20:	e023      	b.n	8004d6a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	4b15      	ldr	r3, [pc, #84]	; (8004d7c <xTaskCheckForTimeOut+0xc0>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d007      	beq.n	8004d3e <xTaskCheckForTimeOut+0x82>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	69ba      	ldr	r2, [r7, #24]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d302      	bcc.n	8004d3e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	61fb      	str	r3, [r7, #28]
 8004d3c:	e015      	b.n	8004d6a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d20b      	bcs.n	8004d60 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	1ad2      	subs	r2, r2, r3
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f7ff ff9b 	bl	8004c90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	61fb      	str	r3, [r7, #28]
 8004d5e:	e004      	b.n	8004d6a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	2200      	movs	r2, #0
 8004d64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004d66:	2301      	movs	r3, #1
 8004d68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004d6a:	f000 fe73 	bl	8005a54 <vPortExitCritical>

	return xReturn;
 8004d6e:	69fb      	ldr	r3, [r7, #28]
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3720      	adds	r7, #32
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	200011a4 	.word	0x200011a4
 8004d7c:	200011b8 	.word	0x200011b8

08004d80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004d80:	b480      	push	{r7}
 8004d82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004d84:	4b03      	ldr	r3, [pc, #12]	; (8004d94 <vTaskMissedYield+0x14>)
 8004d86:	2201      	movs	r2, #1
 8004d88:	601a      	str	r2, [r3, #0]
}
 8004d8a:	bf00      	nop
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr
 8004d94:	200011b4 	.word	0x200011b4

08004d98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004da0:	f000 f852 	bl	8004e48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004da4:	4b06      	ldr	r3, [pc, #24]	; (8004dc0 <prvIdleTask+0x28>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d9f9      	bls.n	8004da0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004dac:	4b05      	ldr	r3, [pc, #20]	; (8004dc4 <prvIdleTask+0x2c>)
 8004dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004db2:	601a      	str	r2, [r3, #0]
 8004db4:	f3bf 8f4f 	dsb	sy
 8004db8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004dbc:	e7f0      	b.n	8004da0 <prvIdleTask+0x8>
 8004dbe:	bf00      	nop
 8004dc0:	20000cd0 	.word	0x20000cd0
 8004dc4:	e000ed04 	.word	0xe000ed04

08004dc8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004dce:	2300      	movs	r3, #0
 8004dd0:	607b      	str	r3, [r7, #4]
 8004dd2:	e00c      	b.n	8004dee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	4413      	add	r3, r2
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	4a12      	ldr	r2, [pc, #72]	; (8004e28 <prvInitialiseTaskLists+0x60>)
 8004de0:	4413      	add	r3, r2
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7fe fd24 	bl	8003830 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	3301      	adds	r3, #1
 8004dec:	607b      	str	r3, [r7, #4]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2b37      	cmp	r3, #55	; 0x37
 8004df2:	d9ef      	bls.n	8004dd4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004df4:	480d      	ldr	r0, [pc, #52]	; (8004e2c <prvInitialiseTaskLists+0x64>)
 8004df6:	f7fe fd1b 	bl	8003830 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004dfa:	480d      	ldr	r0, [pc, #52]	; (8004e30 <prvInitialiseTaskLists+0x68>)
 8004dfc:	f7fe fd18 	bl	8003830 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e00:	480c      	ldr	r0, [pc, #48]	; (8004e34 <prvInitialiseTaskLists+0x6c>)
 8004e02:	f7fe fd15 	bl	8003830 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e06:	480c      	ldr	r0, [pc, #48]	; (8004e38 <prvInitialiseTaskLists+0x70>)
 8004e08:	f7fe fd12 	bl	8003830 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e0c:	480b      	ldr	r0, [pc, #44]	; (8004e3c <prvInitialiseTaskLists+0x74>)
 8004e0e:	f7fe fd0f 	bl	8003830 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e12:	4b0b      	ldr	r3, [pc, #44]	; (8004e40 <prvInitialiseTaskLists+0x78>)
 8004e14:	4a05      	ldr	r2, [pc, #20]	; (8004e2c <prvInitialiseTaskLists+0x64>)
 8004e16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e18:	4b0a      	ldr	r3, [pc, #40]	; (8004e44 <prvInitialiseTaskLists+0x7c>)
 8004e1a:	4a05      	ldr	r2, [pc, #20]	; (8004e30 <prvInitialiseTaskLists+0x68>)
 8004e1c:	601a      	str	r2, [r3, #0]
}
 8004e1e:	bf00      	nop
 8004e20:	3708      	adds	r7, #8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	20000cd0 	.word	0x20000cd0
 8004e2c:	20001130 	.word	0x20001130
 8004e30:	20001144 	.word	0x20001144
 8004e34:	20001160 	.word	0x20001160
 8004e38:	20001174 	.word	0x20001174
 8004e3c:	2000118c 	.word	0x2000118c
 8004e40:	20001158 	.word	0x20001158
 8004e44:	2000115c 	.word	0x2000115c

08004e48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e4e:	e019      	b.n	8004e84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004e50:	f000 fdd0 	bl	80059f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e54:	4b10      	ldr	r3, [pc, #64]	; (8004e98 <prvCheckTasksWaitingTermination+0x50>)
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	3304      	adds	r3, #4
 8004e60:	4618      	mov	r0, r3
 8004e62:	f7fe fd6f 	bl	8003944 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004e66:	4b0d      	ldr	r3, [pc, #52]	; (8004e9c <prvCheckTasksWaitingTermination+0x54>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	4a0b      	ldr	r2, [pc, #44]	; (8004e9c <prvCheckTasksWaitingTermination+0x54>)
 8004e6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004e70:	4b0b      	ldr	r3, [pc, #44]	; (8004ea0 <prvCheckTasksWaitingTermination+0x58>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	3b01      	subs	r3, #1
 8004e76:	4a0a      	ldr	r2, [pc, #40]	; (8004ea0 <prvCheckTasksWaitingTermination+0x58>)
 8004e78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004e7a:	f000 fdeb 	bl	8005a54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f810 	bl	8004ea4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e84:	4b06      	ldr	r3, [pc, #24]	; (8004ea0 <prvCheckTasksWaitingTermination+0x58>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1e1      	bne.n	8004e50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004e8c:	bf00      	nop
 8004e8e:	bf00      	nop
 8004e90:	3708      	adds	r7, #8
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	20001174 	.word	0x20001174
 8004e9c:	200011a0 	.word	0x200011a0
 8004ea0:	20001188 	.word	0x20001188

08004ea4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d108      	bne.n	8004ec8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f000 ff88 	bl	8005dd0 <vPortFree>
				vPortFree( pxTCB );
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f000 ff85 	bl	8005dd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004ec6:	e018      	b.n	8004efa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d103      	bne.n	8004eda <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 ff7c 	bl	8005dd0 <vPortFree>
	}
 8004ed8:	e00f      	b.n	8004efa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d00a      	beq.n	8004efa <prvDeleteTCB+0x56>
	__asm volatile
 8004ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee8:	f383 8811 	msr	BASEPRI, r3
 8004eec:	f3bf 8f6f 	isb	sy
 8004ef0:	f3bf 8f4f 	dsb	sy
 8004ef4:	60fb      	str	r3, [r7, #12]
}
 8004ef6:	bf00      	nop
 8004ef8:	e7fe      	b.n	8004ef8 <prvDeleteTCB+0x54>
	}
 8004efa:	bf00      	nop
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
	...

08004f04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f0a:	4b0c      	ldr	r3, [pc, #48]	; (8004f3c <prvResetNextTaskUnblockTime+0x38>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d104      	bne.n	8004f1e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f14:	4b0a      	ldr	r3, [pc, #40]	; (8004f40 <prvResetNextTaskUnblockTime+0x3c>)
 8004f16:	f04f 32ff 	mov.w	r2, #4294967295
 8004f1a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f1c:	e008      	b.n	8004f30 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f1e:	4b07      	ldr	r3, [pc, #28]	; (8004f3c <prvResetNextTaskUnblockTime+0x38>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	4a04      	ldr	r2, [pc, #16]	; (8004f40 <prvResetNextTaskUnblockTime+0x3c>)
 8004f2e:	6013      	str	r3, [r2, #0]
}
 8004f30:	bf00      	nop
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr
 8004f3c:	20001158 	.word	0x20001158
 8004f40:	200011c0 	.word	0x200011c0

08004f44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004f4a:	4b0b      	ldr	r3, [pc, #44]	; (8004f78 <xTaskGetSchedulerState+0x34>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d102      	bne.n	8004f58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004f52:	2301      	movs	r3, #1
 8004f54:	607b      	str	r3, [r7, #4]
 8004f56:	e008      	b.n	8004f6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f58:	4b08      	ldr	r3, [pc, #32]	; (8004f7c <xTaskGetSchedulerState+0x38>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d102      	bne.n	8004f66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004f60:	2302      	movs	r3, #2
 8004f62:	607b      	str	r3, [r7, #4]
 8004f64:	e001      	b.n	8004f6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004f66:	2300      	movs	r3, #0
 8004f68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004f6a:	687b      	ldr	r3, [r7, #4]
	}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr
 8004f78:	200011ac 	.word	0x200011ac
 8004f7c:	200011c8 	.word	0x200011c8

08004f80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b086      	sub	sp, #24
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d056      	beq.n	8005044 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004f96:	4b2e      	ldr	r3, [pc, #184]	; (8005050 <xTaskPriorityDisinherit+0xd0>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d00a      	beq.n	8004fb6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa4:	f383 8811 	msr	BASEPRI, r3
 8004fa8:	f3bf 8f6f 	isb	sy
 8004fac:	f3bf 8f4f 	dsb	sy
 8004fb0:	60fb      	str	r3, [r7, #12]
}
 8004fb2:	bf00      	nop
 8004fb4:	e7fe      	b.n	8004fb4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d10a      	bne.n	8004fd4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc2:	f383 8811 	msr	BASEPRI, r3
 8004fc6:	f3bf 8f6f 	isb	sy
 8004fca:	f3bf 8f4f 	dsb	sy
 8004fce:	60bb      	str	r3, [r7, #8]
}
 8004fd0:	bf00      	nop
 8004fd2:	e7fe      	b.n	8004fd2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fd8:	1e5a      	subs	r2, r3, #1
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d02c      	beq.n	8005044 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d128      	bne.n	8005044 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	3304      	adds	r3, #4
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7fe fca4 	bl	8003944 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005008:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005014:	4b0f      	ldr	r3, [pc, #60]	; (8005054 <xTaskPriorityDisinherit+0xd4>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	429a      	cmp	r2, r3
 800501a:	d903      	bls.n	8005024 <xTaskPriorityDisinherit+0xa4>
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005020:	4a0c      	ldr	r2, [pc, #48]	; (8005054 <xTaskPriorityDisinherit+0xd4>)
 8005022:	6013      	str	r3, [r2, #0]
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005028:	4613      	mov	r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4413      	add	r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	4a09      	ldr	r2, [pc, #36]	; (8005058 <xTaskPriorityDisinherit+0xd8>)
 8005032:	441a      	add	r2, r3
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	3304      	adds	r3, #4
 8005038:	4619      	mov	r1, r3
 800503a:	4610      	mov	r0, r2
 800503c:	f7fe fc25 	bl	800388a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005040:	2301      	movs	r3, #1
 8005042:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005044:	697b      	ldr	r3, [r7, #20]
	}
 8005046:	4618      	mov	r0, r3
 8005048:	3718      	adds	r7, #24
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	20000ccc 	.word	0x20000ccc
 8005054:	200011a8 	.word	0x200011a8
 8005058:	20000cd0 	.word	0x20000cd0

0800505c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005066:	4b21      	ldr	r3, [pc, #132]	; (80050ec <prvAddCurrentTaskToDelayedList+0x90>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800506c:	4b20      	ldr	r3, [pc, #128]	; (80050f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	3304      	adds	r3, #4
 8005072:	4618      	mov	r0, r3
 8005074:	f7fe fc66 	bl	8003944 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800507e:	d10a      	bne.n	8005096 <prvAddCurrentTaskToDelayedList+0x3a>
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d007      	beq.n	8005096 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005086:	4b1a      	ldr	r3, [pc, #104]	; (80050f0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	3304      	adds	r3, #4
 800508c:	4619      	mov	r1, r3
 800508e:	4819      	ldr	r0, [pc, #100]	; (80050f4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005090:	f7fe fbfb 	bl	800388a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005094:	e026      	b.n	80050e4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4413      	add	r3, r2
 800509c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800509e:	4b14      	ldr	r3, [pc, #80]	; (80050f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80050a6:	68ba      	ldr	r2, [r7, #8]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d209      	bcs.n	80050c2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050ae:	4b12      	ldr	r3, [pc, #72]	; (80050f8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	4b0f      	ldr	r3, [pc, #60]	; (80050f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	3304      	adds	r3, #4
 80050b8:	4619      	mov	r1, r3
 80050ba:	4610      	mov	r0, r2
 80050bc:	f7fe fc09 	bl	80038d2 <vListInsert>
}
 80050c0:	e010      	b.n	80050e4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050c2:	4b0e      	ldr	r3, [pc, #56]	; (80050fc <prvAddCurrentTaskToDelayedList+0xa0>)
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	4b0a      	ldr	r3, [pc, #40]	; (80050f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	3304      	adds	r3, #4
 80050cc:	4619      	mov	r1, r3
 80050ce:	4610      	mov	r0, r2
 80050d0:	f7fe fbff 	bl	80038d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80050d4:	4b0a      	ldr	r3, [pc, #40]	; (8005100 <prvAddCurrentTaskToDelayedList+0xa4>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68ba      	ldr	r2, [r7, #8]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d202      	bcs.n	80050e4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80050de:	4a08      	ldr	r2, [pc, #32]	; (8005100 <prvAddCurrentTaskToDelayedList+0xa4>)
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	6013      	str	r3, [r2, #0]
}
 80050e4:	bf00      	nop
 80050e6:	3710      	adds	r7, #16
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	200011a4 	.word	0x200011a4
 80050f0:	20000ccc 	.word	0x20000ccc
 80050f4:	2000118c 	.word	0x2000118c
 80050f8:	2000115c 	.word	0x2000115c
 80050fc:	20001158 	.word	0x20001158
 8005100:	200011c0 	.word	0x200011c0

08005104 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b08a      	sub	sp, #40	; 0x28
 8005108:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800510a:	2300      	movs	r3, #0
 800510c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800510e:	f000 fb07 	bl	8005720 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005112:	4b1c      	ldr	r3, [pc, #112]	; (8005184 <xTimerCreateTimerTask+0x80>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d021      	beq.n	800515e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800511a:	2300      	movs	r3, #0
 800511c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800511e:	2300      	movs	r3, #0
 8005120:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005122:	1d3a      	adds	r2, r7, #4
 8005124:	f107 0108 	add.w	r1, r7, #8
 8005128:	f107 030c 	add.w	r3, r7, #12
 800512c:	4618      	mov	r0, r3
 800512e:	f7fe fb65 	bl	80037fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005132:	6879      	ldr	r1, [r7, #4]
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	9202      	str	r2, [sp, #8]
 800513a:	9301      	str	r3, [sp, #4]
 800513c:	2302      	movs	r3, #2
 800513e:	9300      	str	r3, [sp, #0]
 8005140:	2300      	movs	r3, #0
 8005142:	460a      	mov	r2, r1
 8005144:	4910      	ldr	r1, [pc, #64]	; (8005188 <xTimerCreateTimerTask+0x84>)
 8005146:	4811      	ldr	r0, [pc, #68]	; (800518c <xTimerCreateTimerTask+0x88>)
 8005148:	f7ff f912 	bl	8004370 <xTaskCreateStatic>
 800514c:	4603      	mov	r3, r0
 800514e:	4a10      	ldr	r2, [pc, #64]	; (8005190 <xTimerCreateTimerTask+0x8c>)
 8005150:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005152:	4b0f      	ldr	r3, [pc, #60]	; (8005190 <xTimerCreateTimerTask+0x8c>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d001      	beq.n	800515e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800515a:	2301      	movs	r3, #1
 800515c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d10a      	bne.n	800517a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005168:	f383 8811 	msr	BASEPRI, r3
 800516c:	f3bf 8f6f 	isb	sy
 8005170:	f3bf 8f4f 	dsb	sy
 8005174:	613b      	str	r3, [r7, #16]
}
 8005176:	bf00      	nop
 8005178:	e7fe      	b.n	8005178 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800517a:	697b      	ldr	r3, [r7, #20]
}
 800517c:	4618      	mov	r0, r3
 800517e:	3718      	adds	r7, #24
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	200011fc 	.word	0x200011fc
 8005188:	080060ac 	.word	0x080060ac
 800518c:	080052c9 	.word	0x080052c9
 8005190:	20001200 	.word	0x20001200

08005194 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b08a      	sub	sp, #40	; 0x28
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
 80051a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80051a2:	2300      	movs	r3, #0
 80051a4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d10a      	bne.n	80051c2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80051ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b0:	f383 8811 	msr	BASEPRI, r3
 80051b4:	f3bf 8f6f 	isb	sy
 80051b8:	f3bf 8f4f 	dsb	sy
 80051bc:	623b      	str	r3, [r7, #32]
}
 80051be:	bf00      	nop
 80051c0:	e7fe      	b.n	80051c0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80051c2:	4b1a      	ldr	r3, [pc, #104]	; (800522c <xTimerGenericCommand+0x98>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d02a      	beq.n	8005220 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	2b05      	cmp	r3, #5
 80051da:	dc18      	bgt.n	800520e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80051dc:	f7ff feb2 	bl	8004f44 <xTaskGetSchedulerState>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d109      	bne.n	80051fa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80051e6:	4b11      	ldr	r3, [pc, #68]	; (800522c <xTimerGenericCommand+0x98>)
 80051e8:	6818      	ldr	r0, [r3, #0]
 80051ea:	f107 0110 	add.w	r1, r7, #16
 80051ee:	2300      	movs	r3, #0
 80051f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051f2:	f7fe fcd5 	bl	8003ba0 <xQueueGenericSend>
 80051f6:	6278      	str	r0, [r7, #36]	; 0x24
 80051f8:	e012      	b.n	8005220 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80051fa:	4b0c      	ldr	r3, [pc, #48]	; (800522c <xTimerGenericCommand+0x98>)
 80051fc:	6818      	ldr	r0, [r3, #0]
 80051fe:	f107 0110 	add.w	r1, r7, #16
 8005202:	2300      	movs	r3, #0
 8005204:	2200      	movs	r2, #0
 8005206:	f7fe fccb 	bl	8003ba0 <xQueueGenericSend>
 800520a:	6278      	str	r0, [r7, #36]	; 0x24
 800520c:	e008      	b.n	8005220 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800520e:	4b07      	ldr	r3, [pc, #28]	; (800522c <xTimerGenericCommand+0x98>)
 8005210:	6818      	ldr	r0, [r3, #0]
 8005212:	f107 0110 	add.w	r1, r7, #16
 8005216:	2300      	movs	r3, #0
 8005218:	683a      	ldr	r2, [r7, #0]
 800521a:	f7fe fdbf 	bl	8003d9c <xQueueGenericSendFromISR>
 800521e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005222:	4618      	mov	r0, r3
 8005224:	3728      	adds	r7, #40	; 0x28
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	200011fc 	.word	0x200011fc

08005230 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b088      	sub	sp, #32
 8005234:	af02      	add	r7, sp, #8
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800523a:	4b22      	ldr	r3, [pc, #136]	; (80052c4 <prvProcessExpiredTimer+0x94>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	3304      	adds	r3, #4
 8005248:	4618      	mov	r0, r3
 800524a:	f7fe fb7b 	bl	8003944 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005254:	f003 0304 	and.w	r3, r3, #4
 8005258:	2b00      	cmp	r3, #0
 800525a:	d022      	beq.n	80052a2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	699a      	ldr	r2, [r3, #24]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	18d1      	adds	r1, r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	683a      	ldr	r2, [r7, #0]
 8005268:	6978      	ldr	r0, [r7, #20]
 800526a:	f000 f8d1 	bl	8005410 <prvInsertTimerInActiveList>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d01f      	beq.n	80052b4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005274:	2300      	movs	r3, #0
 8005276:	9300      	str	r3, [sp, #0]
 8005278:	2300      	movs	r3, #0
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	2100      	movs	r1, #0
 800527e:	6978      	ldr	r0, [r7, #20]
 8005280:	f7ff ff88 	bl	8005194 <xTimerGenericCommand>
 8005284:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d113      	bne.n	80052b4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800528c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005290:	f383 8811 	msr	BASEPRI, r3
 8005294:	f3bf 8f6f 	isb	sy
 8005298:	f3bf 8f4f 	dsb	sy
 800529c:	60fb      	str	r3, [r7, #12]
}
 800529e:	bf00      	nop
 80052a0:	e7fe      	b.n	80052a0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052a8:	f023 0301 	bic.w	r3, r3, #1
 80052ac:	b2da      	uxtb	r2, r3
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	6a1b      	ldr	r3, [r3, #32]
 80052b8:	6978      	ldr	r0, [r7, #20]
 80052ba:	4798      	blx	r3
}
 80052bc:	bf00      	nop
 80052be:	3718      	adds	r7, #24
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	200011f4 	.word	0x200011f4

080052c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80052d0:	f107 0308 	add.w	r3, r7, #8
 80052d4:	4618      	mov	r0, r3
 80052d6:	f000 f857 	bl	8005388 <prvGetNextExpireTime>
 80052da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	4619      	mov	r1, r3
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	f000 f803 	bl	80052ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80052e6:	f000 f8d5 	bl	8005494 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80052ea:	e7f1      	b.n	80052d0 <prvTimerTask+0x8>

080052ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80052f6:	f7ff fa43 	bl	8004780 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80052fa:	f107 0308 	add.w	r3, r7, #8
 80052fe:	4618      	mov	r0, r3
 8005300:	f000 f866 	bl	80053d0 <prvSampleTimeNow>
 8005304:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d130      	bne.n	800536e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d10a      	bne.n	8005328 <prvProcessTimerOrBlockTask+0x3c>
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	429a      	cmp	r2, r3
 8005318:	d806      	bhi.n	8005328 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800531a:	f7ff fa3f 	bl	800479c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800531e:	68f9      	ldr	r1, [r7, #12]
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f7ff ff85 	bl	8005230 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005326:	e024      	b.n	8005372 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d008      	beq.n	8005340 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800532e:	4b13      	ldr	r3, [pc, #76]	; (800537c <prvProcessTimerOrBlockTask+0x90>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d101      	bne.n	800533c <prvProcessTimerOrBlockTask+0x50>
 8005338:	2301      	movs	r3, #1
 800533a:	e000      	b.n	800533e <prvProcessTimerOrBlockTask+0x52>
 800533c:	2300      	movs	r3, #0
 800533e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005340:	4b0f      	ldr	r3, [pc, #60]	; (8005380 <prvProcessTimerOrBlockTask+0x94>)
 8005342:	6818      	ldr	r0, [r3, #0]
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	683a      	ldr	r2, [r7, #0]
 800534c:	4619      	mov	r1, r3
 800534e:	f7fe ffdb 	bl	8004308 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005352:	f7ff fa23 	bl	800479c <xTaskResumeAll>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10a      	bne.n	8005372 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800535c:	4b09      	ldr	r3, [pc, #36]	; (8005384 <prvProcessTimerOrBlockTask+0x98>)
 800535e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005362:	601a      	str	r2, [r3, #0]
 8005364:	f3bf 8f4f 	dsb	sy
 8005368:	f3bf 8f6f 	isb	sy
}
 800536c:	e001      	b.n	8005372 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800536e:	f7ff fa15 	bl	800479c <xTaskResumeAll>
}
 8005372:	bf00      	nop
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	200011f8 	.word	0x200011f8
 8005380:	200011fc 	.word	0x200011fc
 8005384:	e000ed04 	.word	0xe000ed04

08005388 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005388:	b480      	push	{r7}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005390:	4b0e      	ldr	r3, [pc, #56]	; (80053cc <prvGetNextExpireTime+0x44>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d101      	bne.n	800539e <prvGetNextExpireTime+0x16>
 800539a:	2201      	movs	r2, #1
 800539c:	e000      	b.n	80053a0 <prvGetNextExpireTime+0x18>
 800539e:	2200      	movs	r2, #0
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d105      	bne.n	80053b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80053ac:	4b07      	ldr	r3, [pc, #28]	; (80053cc <prvGetNextExpireTime+0x44>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	60fb      	str	r3, [r7, #12]
 80053b6:	e001      	b.n	80053bc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80053b8:	2300      	movs	r3, #0
 80053ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80053bc:	68fb      	ldr	r3, [r7, #12]
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3714      	adds	r7, #20
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	200011f4 	.word	0x200011f4

080053d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80053d8:	f7ff fa7e 	bl	80048d8 <xTaskGetTickCount>
 80053dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80053de:	4b0b      	ldr	r3, [pc, #44]	; (800540c <prvSampleTimeNow+0x3c>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d205      	bcs.n	80053f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80053e8:	f000 f936 	bl	8005658 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	601a      	str	r2, [r3, #0]
 80053f2:	e002      	b.n	80053fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80053fa:	4a04      	ldr	r2, [pc, #16]	; (800540c <prvSampleTimeNow+0x3c>)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005400:	68fb      	ldr	r3, [r7, #12]
}
 8005402:	4618      	mov	r0, r3
 8005404:	3710      	adds	r7, #16
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	20001204 	.word	0x20001204

08005410 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
 800541c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800541e:	2300      	movs	r3, #0
 8005420:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	68ba      	ldr	r2, [r7, #8]
 8005426:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800542e:	68ba      	ldr	r2, [r7, #8]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	429a      	cmp	r2, r3
 8005434:	d812      	bhi.n	800545c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	1ad2      	subs	r2, r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	429a      	cmp	r2, r3
 8005442:	d302      	bcc.n	800544a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005444:	2301      	movs	r3, #1
 8005446:	617b      	str	r3, [r7, #20]
 8005448:	e01b      	b.n	8005482 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800544a:	4b10      	ldr	r3, [pc, #64]	; (800548c <prvInsertTimerInActiveList+0x7c>)
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	3304      	adds	r3, #4
 8005452:	4619      	mov	r1, r3
 8005454:	4610      	mov	r0, r2
 8005456:	f7fe fa3c 	bl	80038d2 <vListInsert>
 800545a:	e012      	b.n	8005482 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	429a      	cmp	r2, r3
 8005462:	d206      	bcs.n	8005472 <prvInsertTimerInActiveList+0x62>
 8005464:	68ba      	ldr	r2, [r7, #8]
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	429a      	cmp	r2, r3
 800546a:	d302      	bcc.n	8005472 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800546c:	2301      	movs	r3, #1
 800546e:	617b      	str	r3, [r7, #20]
 8005470:	e007      	b.n	8005482 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005472:	4b07      	ldr	r3, [pc, #28]	; (8005490 <prvInsertTimerInActiveList+0x80>)
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	3304      	adds	r3, #4
 800547a:	4619      	mov	r1, r3
 800547c:	4610      	mov	r0, r2
 800547e:	f7fe fa28 	bl	80038d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005482:	697b      	ldr	r3, [r7, #20]
}
 8005484:	4618      	mov	r0, r3
 8005486:	3718      	adds	r7, #24
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	200011f8 	.word	0x200011f8
 8005490:	200011f4 	.word	0x200011f4

08005494 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b08e      	sub	sp, #56	; 0x38
 8005498:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800549a:	e0ca      	b.n	8005632 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	da18      	bge.n	80054d4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80054a2:	1d3b      	adds	r3, r7, #4
 80054a4:	3304      	adds	r3, #4
 80054a6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80054a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d10a      	bne.n	80054c4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80054ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b2:	f383 8811 	msr	BASEPRI, r3
 80054b6:	f3bf 8f6f 	isb	sy
 80054ba:	f3bf 8f4f 	dsb	sy
 80054be:	61fb      	str	r3, [r7, #28]
}
 80054c0:	bf00      	nop
 80054c2:	e7fe      	b.n	80054c2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80054c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054ca:	6850      	ldr	r0, [r2, #4]
 80054cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054ce:	6892      	ldr	r2, [r2, #8]
 80054d0:	4611      	mov	r1, r2
 80054d2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	f2c0 80ab 	blt.w	8005632 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80054e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e2:	695b      	ldr	r3, [r3, #20]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d004      	beq.n	80054f2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ea:	3304      	adds	r3, #4
 80054ec:	4618      	mov	r0, r3
 80054ee:	f7fe fa29 	bl	8003944 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80054f2:	463b      	mov	r3, r7
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7ff ff6b 	bl	80053d0 <prvSampleTimeNow>
 80054fa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2b09      	cmp	r3, #9
 8005500:	f200 8096 	bhi.w	8005630 <prvProcessReceivedCommands+0x19c>
 8005504:	a201      	add	r2, pc, #4	; (adr r2, 800550c <prvProcessReceivedCommands+0x78>)
 8005506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800550a:	bf00      	nop
 800550c:	08005535 	.word	0x08005535
 8005510:	08005535 	.word	0x08005535
 8005514:	08005535 	.word	0x08005535
 8005518:	080055a9 	.word	0x080055a9
 800551c:	080055bd 	.word	0x080055bd
 8005520:	08005607 	.word	0x08005607
 8005524:	08005535 	.word	0x08005535
 8005528:	08005535 	.word	0x08005535
 800552c:	080055a9 	.word	0x080055a9
 8005530:	080055bd 	.word	0x080055bd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005536:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800553a:	f043 0301 	orr.w	r3, r3, #1
 800553e:	b2da      	uxtb	r2, r3
 8005540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005542:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005546:	68ba      	ldr	r2, [r7, #8]
 8005548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	18d1      	adds	r1, r2, r3
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005552:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005554:	f7ff ff5c 	bl	8005410 <prvInsertTimerInActiveList>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d069      	beq.n	8005632 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800555e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005560:	6a1b      	ldr	r3, [r3, #32]
 8005562:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005564:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005568:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800556c:	f003 0304 	and.w	r3, r3, #4
 8005570:	2b00      	cmp	r3, #0
 8005572:	d05e      	beq.n	8005632 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	441a      	add	r2, r3
 800557c:	2300      	movs	r3, #0
 800557e:	9300      	str	r3, [sp, #0]
 8005580:	2300      	movs	r3, #0
 8005582:	2100      	movs	r1, #0
 8005584:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005586:	f7ff fe05 	bl	8005194 <xTimerGenericCommand>
 800558a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800558c:	6a3b      	ldr	r3, [r7, #32]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d14f      	bne.n	8005632 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005596:	f383 8811 	msr	BASEPRI, r3
 800559a:	f3bf 8f6f 	isb	sy
 800559e:	f3bf 8f4f 	dsb	sy
 80055a2:	61bb      	str	r3, [r7, #24]
}
 80055a4:	bf00      	nop
 80055a6:	e7fe      	b.n	80055a6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80055a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055ae:	f023 0301 	bic.w	r3, r3, #1
 80055b2:	b2da      	uxtb	r2, r3
 80055b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80055ba:	e03a      	b.n	8005632 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80055bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055c2:	f043 0301 	orr.w	r3, r3, #1
 80055c6:	b2da      	uxtb	r2, r3
 80055c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80055ce:	68ba      	ldr	r2, [r7, #8]
 80055d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80055d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d6:	699b      	ldr	r3, [r3, #24]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10a      	bne.n	80055f2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80055dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e0:	f383 8811 	msr	BASEPRI, r3
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	617b      	str	r3, [r7, #20]
}
 80055ee:	bf00      	nop
 80055f0:	e7fe      	b.n	80055f0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80055f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f4:	699a      	ldr	r2, [r3, #24]
 80055f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f8:	18d1      	adds	r1, r2, r3
 80055fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005600:	f7ff ff06 	bl	8005410 <prvInsertTimerInActiveList>
					break;
 8005604:	e015      	b.n	8005632 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005608:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800560c:	f003 0302 	and.w	r3, r3, #2
 8005610:	2b00      	cmp	r3, #0
 8005612:	d103      	bne.n	800561c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005614:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005616:	f000 fbdb 	bl	8005dd0 <vPortFree>
 800561a:	e00a      	b.n	8005632 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800561c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005622:	f023 0301 	bic.w	r3, r3, #1
 8005626:	b2da      	uxtb	r2, r3
 8005628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800562a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800562e:	e000      	b.n	8005632 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8005630:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005632:	4b08      	ldr	r3, [pc, #32]	; (8005654 <prvProcessReceivedCommands+0x1c0>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	1d39      	adds	r1, r7, #4
 8005638:	2200      	movs	r2, #0
 800563a:	4618      	mov	r0, r3
 800563c:	f7fe fc4a 	bl	8003ed4 <xQueueReceive>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	f47f af2a 	bne.w	800549c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005648:	bf00      	nop
 800564a:	bf00      	nop
 800564c:	3730      	adds	r7, #48	; 0x30
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	200011fc 	.word	0x200011fc

08005658 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b088      	sub	sp, #32
 800565c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800565e:	e048      	b.n	80056f2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005660:	4b2d      	ldr	r3, [pc, #180]	; (8005718 <prvSwitchTimerLists+0xc0>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800566a:	4b2b      	ldr	r3, [pc, #172]	; (8005718 <prvSwitchTimerLists+0xc0>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	3304      	adds	r3, #4
 8005678:	4618      	mov	r0, r3
 800567a:	f7fe f963 	bl	8003944 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800568c:	f003 0304 	and.w	r3, r3, #4
 8005690:	2b00      	cmp	r3, #0
 8005692:	d02e      	beq.n	80056f2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	4413      	add	r3, r2
 800569c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800569e:	68ba      	ldr	r2, [r7, #8]
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d90e      	bls.n	80056c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	68ba      	ldr	r2, [r7, #8]
 80056aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80056b2:	4b19      	ldr	r3, [pc, #100]	; (8005718 <prvSwitchTimerLists+0xc0>)
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	3304      	adds	r3, #4
 80056ba:	4619      	mov	r1, r3
 80056bc:	4610      	mov	r0, r2
 80056be:	f7fe f908 	bl	80038d2 <vListInsert>
 80056c2:	e016      	b.n	80056f2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80056c4:	2300      	movs	r3, #0
 80056c6:	9300      	str	r3, [sp, #0]
 80056c8:	2300      	movs	r3, #0
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	2100      	movs	r1, #0
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f7ff fd60 	bl	8005194 <xTimerGenericCommand>
 80056d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d10a      	bne.n	80056f2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80056dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e0:	f383 8811 	msr	BASEPRI, r3
 80056e4:	f3bf 8f6f 	isb	sy
 80056e8:	f3bf 8f4f 	dsb	sy
 80056ec:	603b      	str	r3, [r7, #0]
}
 80056ee:	bf00      	nop
 80056f0:	e7fe      	b.n	80056f0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80056f2:	4b09      	ldr	r3, [pc, #36]	; (8005718 <prvSwitchTimerLists+0xc0>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1b1      	bne.n	8005660 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80056fc:	4b06      	ldr	r3, [pc, #24]	; (8005718 <prvSwitchTimerLists+0xc0>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005702:	4b06      	ldr	r3, [pc, #24]	; (800571c <prvSwitchTimerLists+0xc4>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a04      	ldr	r2, [pc, #16]	; (8005718 <prvSwitchTimerLists+0xc0>)
 8005708:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800570a:	4a04      	ldr	r2, [pc, #16]	; (800571c <prvSwitchTimerLists+0xc4>)
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	6013      	str	r3, [r2, #0]
}
 8005710:	bf00      	nop
 8005712:	3718      	adds	r7, #24
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	200011f4 	.word	0x200011f4
 800571c:	200011f8 	.word	0x200011f8

08005720 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005726:	f000 f965 	bl	80059f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800572a:	4b15      	ldr	r3, [pc, #84]	; (8005780 <prvCheckForValidListAndQueue+0x60>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d120      	bne.n	8005774 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005732:	4814      	ldr	r0, [pc, #80]	; (8005784 <prvCheckForValidListAndQueue+0x64>)
 8005734:	f7fe f87c 	bl	8003830 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005738:	4813      	ldr	r0, [pc, #76]	; (8005788 <prvCheckForValidListAndQueue+0x68>)
 800573a:	f7fe f879 	bl	8003830 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800573e:	4b13      	ldr	r3, [pc, #76]	; (800578c <prvCheckForValidListAndQueue+0x6c>)
 8005740:	4a10      	ldr	r2, [pc, #64]	; (8005784 <prvCheckForValidListAndQueue+0x64>)
 8005742:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005744:	4b12      	ldr	r3, [pc, #72]	; (8005790 <prvCheckForValidListAndQueue+0x70>)
 8005746:	4a10      	ldr	r2, [pc, #64]	; (8005788 <prvCheckForValidListAndQueue+0x68>)
 8005748:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800574a:	2300      	movs	r3, #0
 800574c:	9300      	str	r3, [sp, #0]
 800574e:	4b11      	ldr	r3, [pc, #68]	; (8005794 <prvCheckForValidListAndQueue+0x74>)
 8005750:	4a11      	ldr	r2, [pc, #68]	; (8005798 <prvCheckForValidListAndQueue+0x78>)
 8005752:	2110      	movs	r1, #16
 8005754:	200a      	movs	r0, #10
 8005756:	f7fe f987 	bl	8003a68 <xQueueGenericCreateStatic>
 800575a:	4603      	mov	r3, r0
 800575c:	4a08      	ldr	r2, [pc, #32]	; (8005780 <prvCheckForValidListAndQueue+0x60>)
 800575e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005760:	4b07      	ldr	r3, [pc, #28]	; (8005780 <prvCheckForValidListAndQueue+0x60>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d005      	beq.n	8005774 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005768:	4b05      	ldr	r3, [pc, #20]	; (8005780 <prvCheckForValidListAndQueue+0x60>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	490b      	ldr	r1, [pc, #44]	; (800579c <prvCheckForValidListAndQueue+0x7c>)
 800576e:	4618      	mov	r0, r3
 8005770:	f7fe fda0 	bl	80042b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005774:	f000 f96e 	bl	8005a54 <vPortExitCritical>
}
 8005778:	bf00      	nop
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	200011fc 	.word	0x200011fc
 8005784:	200011cc 	.word	0x200011cc
 8005788:	200011e0 	.word	0x200011e0
 800578c:	200011f4 	.word	0x200011f4
 8005790:	200011f8 	.word	0x200011f8
 8005794:	200012a8 	.word	0x200012a8
 8005798:	20001208 	.word	0x20001208
 800579c:	080060b4 	.word	0x080060b4

080057a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	3b04      	subs	r3, #4
 80057b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80057b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	3b04      	subs	r3, #4
 80057be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	f023 0201 	bic.w	r2, r3, #1
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	3b04      	subs	r3, #4
 80057ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80057d0:	4a0c      	ldr	r2, [pc, #48]	; (8005804 <pxPortInitialiseStack+0x64>)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	3b14      	subs	r3, #20
 80057da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	3b04      	subs	r3, #4
 80057e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f06f 0202 	mvn.w	r2, #2
 80057ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	3b20      	subs	r3, #32
 80057f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80057f6:	68fb      	ldr	r3, [r7, #12]
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3714      	adds	r7, #20
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr
 8005804:	08005809 	.word	0x08005809

08005808 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800580e:	2300      	movs	r3, #0
 8005810:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005812:	4b12      	ldr	r3, [pc, #72]	; (800585c <prvTaskExitError+0x54>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800581a:	d00a      	beq.n	8005832 <prvTaskExitError+0x2a>
	__asm volatile
 800581c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005820:	f383 8811 	msr	BASEPRI, r3
 8005824:	f3bf 8f6f 	isb	sy
 8005828:	f3bf 8f4f 	dsb	sy
 800582c:	60fb      	str	r3, [r7, #12]
}
 800582e:	bf00      	nop
 8005830:	e7fe      	b.n	8005830 <prvTaskExitError+0x28>
	__asm volatile
 8005832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005836:	f383 8811 	msr	BASEPRI, r3
 800583a:	f3bf 8f6f 	isb	sy
 800583e:	f3bf 8f4f 	dsb	sy
 8005842:	60bb      	str	r3, [r7, #8]
}
 8005844:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005846:	bf00      	nop
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d0fc      	beq.n	8005848 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800584e:	bf00      	nop
 8005850:	bf00      	nop
 8005852:	3714      	adds	r7, #20
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr
 800585c:	2000000c 	.word	0x2000000c

08005860 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005860:	4b07      	ldr	r3, [pc, #28]	; (8005880 <pxCurrentTCBConst2>)
 8005862:	6819      	ldr	r1, [r3, #0]
 8005864:	6808      	ldr	r0, [r1, #0]
 8005866:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800586a:	f380 8809 	msr	PSP, r0
 800586e:	f3bf 8f6f 	isb	sy
 8005872:	f04f 0000 	mov.w	r0, #0
 8005876:	f380 8811 	msr	BASEPRI, r0
 800587a:	4770      	bx	lr
 800587c:	f3af 8000 	nop.w

08005880 <pxCurrentTCBConst2>:
 8005880:	20000ccc 	.word	0x20000ccc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005884:	bf00      	nop
 8005886:	bf00      	nop

08005888 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005888:	4808      	ldr	r0, [pc, #32]	; (80058ac <prvPortStartFirstTask+0x24>)
 800588a:	6800      	ldr	r0, [r0, #0]
 800588c:	6800      	ldr	r0, [r0, #0]
 800588e:	f380 8808 	msr	MSP, r0
 8005892:	f04f 0000 	mov.w	r0, #0
 8005896:	f380 8814 	msr	CONTROL, r0
 800589a:	b662      	cpsie	i
 800589c:	b661      	cpsie	f
 800589e:	f3bf 8f4f 	dsb	sy
 80058a2:	f3bf 8f6f 	isb	sy
 80058a6:	df00      	svc	0
 80058a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80058aa:	bf00      	nop
 80058ac:	e000ed08 	.word	0xe000ed08

080058b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b086      	sub	sp, #24
 80058b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80058b6:	4b46      	ldr	r3, [pc, #280]	; (80059d0 <xPortStartScheduler+0x120>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a46      	ldr	r2, [pc, #280]	; (80059d4 <xPortStartScheduler+0x124>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d10a      	bne.n	80058d6 <xPortStartScheduler+0x26>
	__asm volatile
 80058c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c4:	f383 8811 	msr	BASEPRI, r3
 80058c8:	f3bf 8f6f 	isb	sy
 80058cc:	f3bf 8f4f 	dsb	sy
 80058d0:	613b      	str	r3, [r7, #16]
}
 80058d2:	bf00      	nop
 80058d4:	e7fe      	b.n	80058d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80058d6:	4b3e      	ldr	r3, [pc, #248]	; (80059d0 <xPortStartScheduler+0x120>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a3f      	ldr	r2, [pc, #252]	; (80059d8 <xPortStartScheduler+0x128>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d10a      	bne.n	80058f6 <xPortStartScheduler+0x46>
	__asm volatile
 80058e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e4:	f383 8811 	msr	BASEPRI, r3
 80058e8:	f3bf 8f6f 	isb	sy
 80058ec:	f3bf 8f4f 	dsb	sy
 80058f0:	60fb      	str	r3, [r7, #12]
}
 80058f2:	bf00      	nop
 80058f4:	e7fe      	b.n	80058f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80058f6:	4b39      	ldr	r3, [pc, #228]	; (80059dc <xPortStartScheduler+0x12c>)
 80058f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	22ff      	movs	r2, #255	; 0xff
 8005906:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	b2db      	uxtb	r3, r3
 800590e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005910:	78fb      	ldrb	r3, [r7, #3]
 8005912:	b2db      	uxtb	r3, r3
 8005914:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005918:	b2da      	uxtb	r2, r3
 800591a:	4b31      	ldr	r3, [pc, #196]	; (80059e0 <xPortStartScheduler+0x130>)
 800591c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800591e:	4b31      	ldr	r3, [pc, #196]	; (80059e4 <xPortStartScheduler+0x134>)
 8005920:	2207      	movs	r2, #7
 8005922:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005924:	e009      	b.n	800593a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005926:	4b2f      	ldr	r3, [pc, #188]	; (80059e4 <xPortStartScheduler+0x134>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	3b01      	subs	r3, #1
 800592c:	4a2d      	ldr	r2, [pc, #180]	; (80059e4 <xPortStartScheduler+0x134>)
 800592e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005930:	78fb      	ldrb	r3, [r7, #3]
 8005932:	b2db      	uxtb	r3, r3
 8005934:	005b      	lsls	r3, r3, #1
 8005936:	b2db      	uxtb	r3, r3
 8005938:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800593a:	78fb      	ldrb	r3, [r7, #3]
 800593c:	b2db      	uxtb	r3, r3
 800593e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005942:	2b80      	cmp	r3, #128	; 0x80
 8005944:	d0ef      	beq.n	8005926 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005946:	4b27      	ldr	r3, [pc, #156]	; (80059e4 <xPortStartScheduler+0x134>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f1c3 0307 	rsb	r3, r3, #7
 800594e:	2b04      	cmp	r3, #4
 8005950:	d00a      	beq.n	8005968 <xPortStartScheduler+0xb8>
	__asm volatile
 8005952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005956:	f383 8811 	msr	BASEPRI, r3
 800595a:	f3bf 8f6f 	isb	sy
 800595e:	f3bf 8f4f 	dsb	sy
 8005962:	60bb      	str	r3, [r7, #8]
}
 8005964:	bf00      	nop
 8005966:	e7fe      	b.n	8005966 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005968:	4b1e      	ldr	r3, [pc, #120]	; (80059e4 <xPortStartScheduler+0x134>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	021b      	lsls	r3, r3, #8
 800596e:	4a1d      	ldr	r2, [pc, #116]	; (80059e4 <xPortStartScheduler+0x134>)
 8005970:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005972:	4b1c      	ldr	r3, [pc, #112]	; (80059e4 <xPortStartScheduler+0x134>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800597a:	4a1a      	ldr	r2, [pc, #104]	; (80059e4 <xPortStartScheduler+0x134>)
 800597c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	b2da      	uxtb	r2, r3
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005986:	4b18      	ldr	r3, [pc, #96]	; (80059e8 <xPortStartScheduler+0x138>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a17      	ldr	r2, [pc, #92]	; (80059e8 <xPortStartScheduler+0x138>)
 800598c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005990:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005992:	4b15      	ldr	r3, [pc, #84]	; (80059e8 <xPortStartScheduler+0x138>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a14      	ldr	r2, [pc, #80]	; (80059e8 <xPortStartScheduler+0x138>)
 8005998:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800599c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800599e:	f000 f8dd 	bl	8005b5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80059a2:	4b12      	ldr	r3, [pc, #72]	; (80059ec <xPortStartScheduler+0x13c>)
 80059a4:	2200      	movs	r2, #0
 80059a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80059a8:	f000 f8fc 	bl	8005ba4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80059ac:	4b10      	ldr	r3, [pc, #64]	; (80059f0 <xPortStartScheduler+0x140>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a0f      	ldr	r2, [pc, #60]	; (80059f0 <xPortStartScheduler+0x140>)
 80059b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80059b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80059b8:	f7ff ff66 	bl	8005888 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80059bc:	f7ff f856 	bl	8004a6c <vTaskSwitchContext>
	prvTaskExitError();
 80059c0:	f7ff ff22 	bl	8005808 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3718      	adds	r7, #24
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	e000ed00 	.word	0xe000ed00
 80059d4:	410fc271 	.word	0x410fc271
 80059d8:	410fc270 	.word	0x410fc270
 80059dc:	e000e400 	.word	0xe000e400
 80059e0:	200012f8 	.word	0x200012f8
 80059e4:	200012fc 	.word	0x200012fc
 80059e8:	e000ed20 	.word	0xe000ed20
 80059ec:	2000000c 	.word	0x2000000c
 80059f0:	e000ef34 	.word	0xe000ef34

080059f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
	__asm volatile
 80059fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fe:	f383 8811 	msr	BASEPRI, r3
 8005a02:	f3bf 8f6f 	isb	sy
 8005a06:	f3bf 8f4f 	dsb	sy
 8005a0a:	607b      	str	r3, [r7, #4]
}
 8005a0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005a0e:	4b0f      	ldr	r3, [pc, #60]	; (8005a4c <vPortEnterCritical+0x58>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	3301      	adds	r3, #1
 8005a14:	4a0d      	ldr	r2, [pc, #52]	; (8005a4c <vPortEnterCritical+0x58>)
 8005a16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005a18:	4b0c      	ldr	r3, [pc, #48]	; (8005a4c <vPortEnterCritical+0x58>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d10f      	bne.n	8005a40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a20:	4b0b      	ldr	r3, [pc, #44]	; (8005a50 <vPortEnterCritical+0x5c>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00a      	beq.n	8005a40 <vPortEnterCritical+0x4c>
	__asm volatile
 8005a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2e:	f383 8811 	msr	BASEPRI, r3
 8005a32:	f3bf 8f6f 	isb	sy
 8005a36:	f3bf 8f4f 	dsb	sy
 8005a3a:	603b      	str	r3, [r7, #0]
}
 8005a3c:	bf00      	nop
 8005a3e:	e7fe      	b.n	8005a3e <vPortEnterCritical+0x4a>
	}
}
 8005a40:	bf00      	nop
 8005a42:	370c      	adds	r7, #12
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr
 8005a4c:	2000000c 	.word	0x2000000c
 8005a50:	e000ed04 	.word	0xe000ed04

08005a54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005a5a:	4b12      	ldr	r3, [pc, #72]	; (8005aa4 <vPortExitCritical+0x50>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d10a      	bne.n	8005a78 <vPortExitCritical+0x24>
	__asm volatile
 8005a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a66:	f383 8811 	msr	BASEPRI, r3
 8005a6a:	f3bf 8f6f 	isb	sy
 8005a6e:	f3bf 8f4f 	dsb	sy
 8005a72:	607b      	str	r3, [r7, #4]
}
 8005a74:	bf00      	nop
 8005a76:	e7fe      	b.n	8005a76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005a78:	4b0a      	ldr	r3, [pc, #40]	; (8005aa4 <vPortExitCritical+0x50>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	4a09      	ldr	r2, [pc, #36]	; (8005aa4 <vPortExitCritical+0x50>)
 8005a80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005a82:	4b08      	ldr	r3, [pc, #32]	; (8005aa4 <vPortExitCritical+0x50>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d105      	bne.n	8005a96 <vPortExitCritical+0x42>
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	f383 8811 	msr	BASEPRI, r3
}
 8005a94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005a96:	bf00      	nop
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	2000000c 	.word	0x2000000c
	...

08005ab0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ab0:	f3ef 8009 	mrs	r0, PSP
 8005ab4:	f3bf 8f6f 	isb	sy
 8005ab8:	4b15      	ldr	r3, [pc, #84]	; (8005b10 <pxCurrentTCBConst>)
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	f01e 0f10 	tst.w	lr, #16
 8005ac0:	bf08      	it	eq
 8005ac2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ac6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aca:	6010      	str	r0, [r2, #0]
 8005acc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005ad0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005ad4:	f380 8811 	msr	BASEPRI, r0
 8005ad8:	f3bf 8f4f 	dsb	sy
 8005adc:	f3bf 8f6f 	isb	sy
 8005ae0:	f7fe ffc4 	bl	8004a6c <vTaskSwitchContext>
 8005ae4:	f04f 0000 	mov.w	r0, #0
 8005ae8:	f380 8811 	msr	BASEPRI, r0
 8005aec:	bc09      	pop	{r0, r3}
 8005aee:	6819      	ldr	r1, [r3, #0]
 8005af0:	6808      	ldr	r0, [r1, #0]
 8005af2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005af6:	f01e 0f10 	tst.w	lr, #16
 8005afa:	bf08      	it	eq
 8005afc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005b00:	f380 8809 	msr	PSP, r0
 8005b04:	f3bf 8f6f 	isb	sy
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	f3af 8000 	nop.w

08005b10 <pxCurrentTCBConst>:
 8005b10:	20000ccc 	.word	0x20000ccc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005b14:	bf00      	nop
 8005b16:	bf00      	nop

08005b18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b22:	f383 8811 	msr	BASEPRI, r3
 8005b26:	f3bf 8f6f 	isb	sy
 8005b2a:	f3bf 8f4f 	dsb	sy
 8005b2e:	607b      	str	r3, [r7, #4]
}
 8005b30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005b32:	f7fe fee1 	bl	80048f8 <xTaskIncrementTick>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d003      	beq.n	8005b44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b3c:	4b06      	ldr	r3, [pc, #24]	; (8005b58 <xPortSysTickHandler+0x40>)
 8005b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b42:	601a      	str	r2, [r3, #0]
 8005b44:	2300      	movs	r3, #0
 8005b46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	f383 8811 	msr	BASEPRI, r3
}
 8005b4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005b50:	bf00      	nop
 8005b52:	3708      	adds	r7, #8
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	e000ed04 	.word	0xe000ed04

08005b5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b60:	4b0b      	ldr	r3, [pc, #44]	; (8005b90 <vPortSetupTimerInterrupt+0x34>)
 8005b62:	2200      	movs	r2, #0
 8005b64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b66:	4b0b      	ldr	r3, [pc, #44]	; (8005b94 <vPortSetupTimerInterrupt+0x38>)
 8005b68:	2200      	movs	r2, #0
 8005b6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b6c:	4b0a      	ldr	r3, [pc, #40]	; (8005b98 <vPortSetupTimerInterrupt+0x3c>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a0a      	ldr	r2, [pc, #40]	; (8005b9c <vPortSetupTimerInterrupt+0x40>)
 8005b72:	fba2 2303 	umull	r2, r3, r2, r3
 8005b76:	099b      	lsrs	r3, r3, #6
 8005b78:	4a09      	ldr	r2, [pc, #36]	; (8005ba0 <vPortSetupTimerInterrupt+0x44>)
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005b7e:	4b04      	ldr	r3, [pc, #16]	; (8005b90 <vPortSetupTimerInterrupt+0x34>)
 8005b80:	2207      	movs	r2, #7
 8005b82:	601a      	str	r2, [r3, #0]
}
 8005b84:	bf00      	nop
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop
 8005b90:	e000e010 	.word	0xe000e010
 8005b94:	e000e018 	.word	0xe000e018
 8005b98:	20000000 	.word	0x20000000
 8005b9c:	10624dd3 	.word	0x10624dd3
 8005ba0:	e000e014 	.word	0xe000e014

08005ba4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005ba4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005bb4 <vPortEnableVFP+0x10>
 8005ba8:	6801      	ldr	r1, [r0, #0]
 8005baa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005bae:	6001      	str	r1, [r0, #0]
 8005bb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005bb2:	bf00      	nop
 8005bb4:	e000ed88 	.word	0xe000ed88

08005bb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005bbe:	f3ef 8305 	mrs	r3, IPSR
 8005bc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2b0f      	cmp	r3, #15
 8005bc8:	d914      	bls.n	8005bf4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005bca:	4a17      	ldr	r2, [pc, #92]	; (8005c28 <vPortValidateInterruptPriority+0x70>)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	4413      	add	r3, r2
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005bd4:	4b15      	ldr	r3, [pc, #84]	; (8005c2c <vPortValidateInterruptPriority+0x74>)
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	7afa      	ldrb	r2, [r7, #11]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d20a      	bcs.n	8005bf4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be2:	f383 8811 	msr	BASEPRI, r3
 8005be6:	f3bf 8f6f 	isb	sy
 8005bea:	f3bf 8f4f 	dsb	sy
 8005bee:	607b      	str	r3, [r7, #4]
}
 8005bf0:	bf00      	nop
 8005bf2:	e7fe      	b.n	8005bf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005bf4:	4b0e      	ldr	r3, [pc, #56]	; (8005c30 <vPortValidateInterruptPriority+0x78>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005bfc:	4b0d      	ldr	r3, [pc, #52]	; (8005c34 <vPortValidateInterruptPriority+0x7c>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d90a      	bls.n	8005c1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c08:	f383 8811 	msr	BASEPRI, r3
 8005c0c:	f3bf 8f6f 	isb	sy
 8005c10:	f3bf 8f4f 	dsb	sy
 8005c14:	603b      	str	r3, [r7, #0]
}
 8005c16:	bf00      	nop
 8005c18:	e7fe      	b.n	8005c18 <vPortValidateInterruptPriority+0x60>
	}
 8005c1a:	bf00      	nop
 8005c1c:	3714      	adds	r7, #20
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	e000e3f0 	.word	0xe000e3f0
 8005c2c:	200012f8 	.word	0x200012f8
 8005c30:	e000ed0c 	.word	0xe000ed0c
 8005c34:	200012fc 	.word	0x200012fc

08005c38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b08a      	sub	sp, #40	; 0x28
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005c40:	2300      	movs	r3, #0
 8005c42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005c44:	f7fe fd9c 	bl	8004780 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c48:	4b5b      	ldr	r3, [pc, #364]	; (8005db8 <pvPortMalloc+0x180>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d101      	bne.n	8005c54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005c50:	f000 f920 	bl	8005e94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c54:	4b59      	ldr	r3, [pc, #356]	; (8005dbc <pvPortMalloc+0x184>)
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f040 8093 	bne.w	8005d88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d01d      	beq.n	8005ca4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005c68:	2208      	movs	r2, #8
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f003 0307 	and.w	r3, r3, #7
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d014      	beq.n	8005ca4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f023 0307 	bic.w	r3, r3, #7
 8005c80:	3308      	adds	r3, #8
 8005c82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f003 0307 	and.w	r3, r3, #7
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d00a      	beq.n	8005ca4 <pvPortMalloc+0x6c>
	__asm volatile
 8005c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c92:	f383 8811 	msr	BASEPRI, r3
 8005c96:	f3bf 8f6f 	isb	sy
 8005c9a:	f3bf 8f4f 	dsb	sy
 8005c9e:	617b      	str	r3, [r7, #20]
}
 8005ca0:	bf00      	nop
 8005ca2:	e7fe      	b.n	8005ca2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d06e      	beq.n	8005d88 <pvPortMalloc+0x150>
 8005caa:	4b45      	ldr	r3, [pc, #276]	; (8005dc0 <pvPortMalloc+0x188>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d869      	bhi.n	8005d88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005cb4:	4b43      	ldr	r3, [pc, #268]	; (8005dc4 <pvPortMalloc+0x18c>)
 8005cb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005cb8:	4b42      	ldr	r3, [pc, #264]	; (8005dc4 <pvPortMalloc+0x18c>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cbe:	e004      	b.n	8005cca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d903      	bls.n	8005cdc <pvPortMalloc+0xa4>
 8005cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d1f1      	bne.n	8005cc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005cdc:	4b36      	ldr	r3, [pc, #216]	; (8005db8 <pvPortMalloc+0x180>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d050      	beq.n	8005d88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005ce6:	6a3b      	ldr	r3, [r7, #32]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2208      	movs	r2, #8
 8005cec:	4413      	add	r3, r2
 8005cee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	6a3b      	ldr	r3, [r7, #32]
 8005cf6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfa:	685a      	ldr	r2, [r3, #4]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	1ad2      	subs	r2, r2, r3
 8005d00:	2308      	movs	r3, #8
 8005d02:	005b      	lsls	r3, r3, #1
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d91f      	bls.n	8005d48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	f003 0307 	and.w	r3, r3, #7
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00a      	beq.n	8005d30 <pvPortMalloc+0xf8>
	__asm volatile
 8005d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1e:	f383 8811 	msr	BASEPRI, r3
 8005d22:	f3bf 8f6f 	isb	sy
 8005d26:	f3bf 8f4f 	dsb	sy
 8005d2a:	613b      	str	r3, [r7, #16]
}
 8005d2c:	bf00      	nop
 8005d2e:	e7fe      	b.n	8005d2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d32:	685a      	ldr	r2, [r3, #4]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	1ad2      	subs	r2, r2, r3
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d42:	69b8      	ldr	r0, [r7, #24]
 8005d44:	f000 f908 	bl	8005f58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d48:	4b1d      	ldr	r3, [pc, #116]	; (8005dc0 <pvPortMalloc+0x188>)
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	4a1b      	ldr	r2, [pc, #108]	; (8005dc0 <pvPortMalloc+0x188>)
 8005d54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d56:	4b1a      	ldr	r3, [pc, #104]	; (8005dc0 <pvPortMalloc+0x188>)
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	4b1b      	ldr	r3, [pc, #108]	; (8005dc8 <pvPortMalloc+0x190>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d203      	bcs.n	8005d6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d62:	4b17      	ldr	r3, [pc, #92]	; (8005dc0 <pvPortMalloc+0x188>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a18      	ldr	r2, [pc, #96]	; (8005dc8 <pvPortMalloc+0x190>)
 8005d68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6c:	685a      	ldr	r2, [r3, #4]
 8005d6e:	4b13      	ldr	r3, [pc, #76]	; (8005dbc <pvPortMalloc+0x184>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	431a      	orrs	r2, r3
 8005d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005d7e:	4b13      	ldr	r3, [pc, #76]	; (8005dcc <pvPortMalloc+0x194>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	3301      	adds	r3, #1
 8005d84:	4a11      	ldr	r2, [pc, #68]	; (8005dcc <pvPortMalloc+0x194>)
 8005d86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005d88:	f7fe fd08 	bl	800479c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	f003 0307 	and.w	r3, r3, #7
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00a      	beq.n	8005dac <pvPortMalloc+0x174>
	__asm volatile
 8005d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9a:	f383 8811 	msr	BASEPRI, r3
 8005d9e:	f3bf 8f6f 	isb	sy
 8005da2:	f3bf 8f4f 	dsb	sy
 8005da6:	60fb      	str	r3, [r7, #12]
}
 8005da8:	bf00      	nop
 8005daa:	e7fe      	b.n	8005daa <pvPortMalloc+0x172>
	return pvReturn;
 8005dac:	69fb      	ldr	r3, [r7, #28]
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3728      	adds	r7, #40	; 0x28
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	20004f08 	.word	0x20004f08
 8005dbc:	20004f1c 	.word	0x20004f1c
 8005dc0:	20004f0c 	.word	0x20004f0c
 8005dc4:	20004f00 	.word	0x20004f00
 8005dc8:	20004f10 	.word	0x20004f10
 8005dcc:	20004f14 	.word	0x20004f14

08005dd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d04d      	beq.n	8005e7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005de2:	2308      	movs	r3, #8
 8005de4:	425b      	negs	r3, r3
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	4413      	add	r3, r2
 8005dea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	685a      	ldr	r2, [r3, #4]
 8005df4:	4b24      	ldr	r3, [pc, #144]	; (8005e88 <vPortFree+0xb8>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4013      	ands	r3, r2
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d10a      	bne.n	8005e14 <vPortFree+0x44>
	__asm volatile
 8005dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e02:	f383 8811 	msr	BASEPRI, r3
 8005e06:	f3bf 8f6f 	isb	sy
 8005e0a:	f3bf 8f4f 	dsb	sy
 8005e0e:	60fb      	str	r3, [r7, #12]
}
 8005e10:	bf00      	nop
 8005e12:	e7fe      	b.n	8005e12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00a      	beq.n	8005e32 <vPortFree+0x62>
	__asm volatile
 8005e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e20:	f383 8811 	msr	BASEPRI, r3
 8005e24:	f3bf 8f6f 	isb	sy
 8005e28:	f3bf 8f4f 	dsb	sy
 8005e2c:	60bb      	str	r3, [r7, #8]
}
 8005e2e:	bf00      	nop
 8005e30:	e7fe      	b.n	8005e30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	685a      	ldr	r2, [r3, #4]
 8005e36:	4b14      	ldr	r3, [pc, #80]	; (8005e88 <vPortFree+0xb8>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d01e      	beq.n	8005e7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d11a      	bne.n	8005e7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	685a      	ldr	r2, [r3, #4]
 8005e4c:	4b0e      	ldr	r3, [pc, #56]	; (8005e88 <vPortFree+0xb8>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	43db      	mvns	r3, r3
 8005e52:	401a      	ands	r2, r3
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005e58:	f7fe fc92 	bl	8004780 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	685a      	ldr	r2, [r3, #4]
 8005e60:	4b0a      	ldr	r3, [pc, #40]	; (8005e8c <vPortFree+0xbc>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4413      	add	r3, r2
 8005e66:	4a09      	ldr	r2, [pc, #36]	; (8005e8c <vPortFree+0xbc>)
 8005e68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005e6a:	6938      	ldr	r0, [r7, #16]
 8005e6c:	f000 f874 	bl	8005f58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005e70:	4b07      	ldr	r3, [pc, #28]	; (8005e90 <vPortFree+0xc0>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	3301      	adds	r3, #1
 8005e76:	4a06      	ldr	r2, [pc, #24]	; (8005e90 <vPortFree+0xc0>)
 8005e78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005e7a:	f7fe fc8f 	bl	800479c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005e7e:	bf00      	nop
 8005e80:	3718      	adds	r7, #24
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	20004f1c 	.word	0x20004f1c
 8005e8c:	20004f0c 	.word	0x20004f0c
 8005e90:	20004f18 	.word	0x20004f18

08005e94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005e94:	b480      	push	{r7}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005e9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005e9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005ea0:	4b27      	ldr	r3, [pc, #156]	; (8005f40 <prvHeapInit+0xac>)
 8005ea2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f003 0307 	and.w	r3, r3, #7
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00c      	beq.n	8005ec8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	3307      	adds	r3, #7
 8005eb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f023 0307 	bic.w	r3, r3, #7
 8005eba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005ebc:	68ba      	ldr	r2, [r7, #8]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	4a1f      	ldr	r2, [pc, #124]	; (8005f40 <prvHeapInit+0xac>)
 8005ec4:	4413      	add	r3, r2
 8005ec6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005ecc:	4a1d      	ldr	r2, [pc, #116]	; (8005f44 <prvHeapInit+0xb0>)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005ed2:	4b1c      	ldr	r3, [pc, #112]	; (8005f44 <prvHeapInit+0xb0>)
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	4413      	add	r3, r2
 8005ede:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005ee0:	2208      	movs	r2, #8
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	1a9b      	subs	r3, r3, r2
 8005ee6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f023 0307 	bic.w	r3, r3, #7
 8005eee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	4a15      	ldr	r2, [pc, #84]	; (8005f48 <prvHeapInit+0xb4>)
 8005ef4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005ef6:	4b14      	ldr	r3, [pc, #80]	; (8005f48 <prvHeapInit+0xb4>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2200      	movs	r2, #0
 8005efc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005efe:	4b12      	ldr	r3, [pc, #72]	; (8005f48 <prvHeapInit+0xb4>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2200      	movs	r2, #0
 8005f04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	1ad2      	subs	r2, r2, r3
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f14:	4b0c      	ldr	r3, [pc, #48]	; (8005f48 <prvHeapInit+0xb4>)
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	4a0a      	ldr	r2, [pc, #40]	; (8005f4c <prvHeapInit+0xb8>)
 8005f22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	4a09      	ldr	r2, [pc, #36]	; (8005f50 <prvHeapInit+0xbc>)
 8005f2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f2c:	4b09      	ldr	r3, [pc, #36]	; (8005f54 <prvHeapInit+0xc0>)
 8005f2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005f32:	601a      	str	r2, [r3, #0]
}
 8005f34:	bf00      	nop
 8005f36:	3714      	adds	r7, #20
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr
 8005f40:	20001300 	.word	0x20001300
 8005f44:	20004f00 	.word	0x20004f00
 8005f48:	20004f08 	.word	0x20004f08
 8005f4c:	20004f10 	.word	0x20004f10
 8005f50:	20004f0c 	.word	0x20004f0c
 8005f54:	20004f1c 	.word	0x20004f1c

08005f58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b085      	sub	sp, #20
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005f60:	4b28      	ldr	r3, [pc, #160]	; (8006004 <prvInsertBlockIntoFreeList+0xac>)
 8005f62:	60fb      	str	r3, [r7, #12]
 8005f64:	e002      	b.n	8005f6c <prvInsertBlockIntoFreeList+0x14>
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	60fb      	str	r3, [r7, #12]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d8f7      	bhi.n	8005f66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	68ba      	ldr	r2, [r7, #8]
 8005f80:	4413      	add	r3, r2
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d108      	bne.n	8005f9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	685a      	ldr	r2, [r3, #4]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	441a      	add	r2, r3
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	68ba      	ldr	r2, [r7, #8]
 8005fa4:	441a      	add	r2, r3
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d118      	bne.n	8005fe0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	4b15      	ldr	r3, [pc, #84]	; (8006008 <prvInsertBlockIntoFreeList+0xb0>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d00d      	beq.n	8005fd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685a      	ldr	r2, [r3, #4]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	441a      	add	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	601a      	str	r2, [r3, #0]
 8005fd4:	e008      	b.n	8005fe8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005fd6:	4b0c      	ldr	r3, [pc, #48]	; (8006008 <prvInsertBlockIntoFreeList+0xb0>)
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	601a      	str	r2, [r3, #0]
 8005fde:	e003      	b.n	8005fe8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d002      	beq.n	8005ff6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ff6:	bf00      	nop
 8005ff8:	3714      	adds	r7, #20
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	20004f00 	.word	0x20004f00
 8006008:	20004f08 	.word	0x20004f08

0800600c <memset>:
 800600c:	4402      	add	r2, r0
 800600e:	4603      	mov	r3, r0
 8006010:	4293      	cmp	r3, r2
 8006012:	d100      	bne.n	8006016 <memset+0xa>
 8006014:	4770      	bx	lr
 8006016:	f803 1b01 	strb.w	r1, [r3], #1
 800601a:	e7f9      	b.n	8006010 <memset+0x4>

0800601c <__libc_init_array>:
 800601c:	b570      	push	{r4, r5, r6, lr}
 800601e:	4d0d      	ldr	r5, [pc, #52]	; (8006054 <__libc_init_array+0x38>)
 8006020:	4c0d      	ldr	r4, [pc, #52]	; (8006058 <__libc_init_array+0x3c>)
 8006022:	1b64      	subs	r4, r4, r5
 8006024:	10a4      	asrs	r4, r4, #2
 8006026:	2600      	movs	r6, #0
 8006028:	42a6      	cmp	r6, r4
 800602a:	d109      	bne.n	8006040 <__libc_init_array+0x24>
 800602c:	4d0b      	ldr	r5, [pc, #44]	; (800605c <__libc_init_array+0x40>)
 800602e:	4c0c      	ldr	r4, [pc, #48]	; (8006060 <__libc_init_array+0x44>)
 8006030:	f000 f826 	bl	8006080 <_init>
 8006034:	1b64      	subs	r4, r4, r5
 8006036:	10a4      	asrs	r4, r4, #2
 8006038:	2600      	movs	r6, #0
 800603a:	42a6      	cmp	r6, r4
 800603c:	d105      	bne.n	800604a <__libc_init_array+0x2e>
 800603e:	bd70      	pop	{r4, r5, r6, pc}
 8006040:	f855 3b04 	ldr.w	r3, [r5], #4
 8006044:	4798      	blx	r3
 8006046:	3601      	adds	r6, #1
 8006048:	e7ee      	b.n	8006028 <__libc_init_array+0xc>
 800604a:	f855 3b04 	ldr.w	r3, [r5], #4
 800604e:	4798      	blx	r3
 8006050:	3601      	adds	r6, #1
 8006052:	e7f2      	b.n	800603a <__libc_init_array+0x1e>
 8006054:	08006100 	.word	0x08006100
 8006058:	08006100 	.word	0x08006100
 800605c:	08006100 	.word	0x08006100
 8006060:	08006104 	.word	0x08006104

08006064 <memcpy>:
 8006064:	440a      	add	r2, r1
 8006066:	4291      	cmp	r1, r2
 8006068:	f100 33ff 	add.w	r3, r0, #4294967295
 800606c:	d100      	bne.n	8006070 <memcpy+0xc>
 800606e:	4770      	bx	lr
 8006070:	b510      	push	{r4, lr}
 8006072:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006076:	f803 4f01 	strb.w	r4, [r3, #1]!
 800607a:	4291      	cmp	r1, r2
 800607c:	d1f9      	bne.n	8006072 <memcpy+0xe>
 800607e:	bd10      	pop	{r4, pc}

08006080 <_init>:
 8006080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006082:	bf00      	nop
 8006084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006086:	bc08      	pop	{r3}
 8006088:	469e      	mov	lr, r3
 800608a:	4770      	bx	lr

0800608c <_fini>:
 800608c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800608e:	bf00      	nop
 8006090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006092:	bc08      	pop	{r3}
 8006094:	469e      	mov	lr, r3
 8006096:	4770      	bx	lr
