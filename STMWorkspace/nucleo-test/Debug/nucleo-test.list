
nucleo-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068b8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08006a98  08006a98  00016a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006af8  08006af8  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08006af8  08006af8  00016af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b00  08006b00  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b00  08006b00  00016b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b04  08006b04  00016b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006b08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f54  20000014  08006b1c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004f68  08006b1c  00024f68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b941  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b4e  00000000  00000000  0003b9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001768  00000000  00000000  0003f518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001238  00000000  00000000  00040c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000374b  00000000  00000000  00041eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a76d  00000000  00000000  00045603  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9ffc  00000000  00000000  0005fd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006408  00000000  00000000  00139d6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00140174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000014 	.word	0x20000014
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006a80 	.word	0x08006a80

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000018 	.word	0x20000018
 800021c:	08006a80 	.word	0x08006a80

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b970 	b.w	8000518 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	460f      	mov	r7, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d965      	bls.n	8000332 <__udivmoddi4+0xe2>
 8000266:	fab2 f382 	clz	r3, r2
 800026a:	b143      	cbz	r3, 800027e <__udivmoddi4+0x2e>
 800026c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000270:	f1c3 0220 	rsb	r2, r3, #32
 8000274:	409f      	lsls	r7, r3
 8000276:	fa20 f202 	lsr.w	r2, r0, r2
 800027a:	4317      	orrs	r7, r2
 800027c:	409c      	lsls	r4, r3
 800027e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000282:	fa1f f58c 	uxth.w	r5, ip
 8000286:	fbb7 f1fe 	udiv	r1, r7, lr
 800028a:	0c22      	lsrs	r2, r4, #16
 800028c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000290:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000294:	fb01 f005 	mul.w	r0, r1, r5
 8000298:	4290      	cmp	r0, r2
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029c:	eb1c 0202 	adds.w	r2, ip, r2
 80002a0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002a4:	f080 811c 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002a8:	4290      	cmp	r0, r2
 80002aa:	f240 8119 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002ae:	3902      	subs	r1, #2
 80002b0:	4462      	add	r2, ip
 80002b2:	1a12      	subs	r2, r2, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002c2:	fb00 f505 	mul.w	r5, r0, r5
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	d90a      	bls.n	80002e0 <__udivmoddi4+0x90>
 80002ca:	eb1c 0404 	adds.w	r4, ip, r4
 80002ce:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d2:	f080 8107 	bcs.w	80004e4 <__udivmoddi4+0x294>
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	f240 8104 	bls.w	80004e4 <__udivmoddi4+0x294>
 80002dc:	4464      	add	r4, ip
 80002de:	3802      	subs	r0, #2
 80002e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e4:	1b64      	subs	r4, r4, r5
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11e      	cbz	r6, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40dc      	lsrs	r4, r3
 80002ec:	2300      	movs	r3, #0
 80002ee:	e9c6 4300 	strd	r4, r3, [r6]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d908      	bls.n	800030c <__udivmoddi4+0xbc>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80ed 	beq.w	80004da <__udivmoddi4+0x28a>
 8000300:	2100      	movs	r1, #0
 8000302:	e9c6 0500 	strd	r0, r5, [r6]
 8000306:	4608      	mov	r0, r1
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	fab3 f183 	clz	r1, r3
 8000310:	2900      	cmp	r1, #0
 8000312:	d149      	bne.n	80003a8 <__udivmoddi4+0x158>
 8000314:	42ab      	cmp	r3, r5
 8000316:	d302      	bcc.n	800031e <__udivmoddi4+0xce>
 8000318:	4282      	cmp	r2, r0
 800031a:	f200 80f8 	bhi.w	800050e <__udivmoddi4+0x2be>
 800031e:	1a84      	subs	r4, r0, r2
 8000320:	eb65 0203 	sbc.w	r2, r5, r3
 8000324:	2001      	movs	r0, #1
 8000326:	4617      	mov	r7, r2
 8000328:	2e00      	cmp	r6, #0
 800032a:	d0e2      	beq.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	e9c6 4700 	strd	r4, r7, [r6]
 8000330:	e7df      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000332:	b902      	cbnz	r2, 8000336 <__udivmoddi4+0xe6>
 8000334:	deff      	udf	#255	; 0xff
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	2b00      	cmp	r3, #0
 800033c:	f040 8090 	bne.w	8000460 <__udivmoddi4+0x210>
 8000340:	1a8a      	subs	r2, r1, r2
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2101      	movs	r1, #1
 800034c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000350:	fb07 2015 	mls	r0, r7, r5, r2
 8000354:	0c22      	lsrs	r2, r4, #16
 8000356:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800035a:	fb0e f005 	mul.w	r0, lr, r5
 800035e:	4290      	cmp	r0, r2
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x124>
 8000362:	eb1c 0202 	adds.w	r2, ip, r2
 8000366:	f105 38ff 	add.w	r8, r5, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4290      	cmp	r0, r2
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2b8>
 8000372:	4645      	mov	r5, r8
 8000374:	1a12      	subs	r2, r2, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb2 f0f7 	udiv	r0, r2, r7
 800037c:	fb07 2210 	mls	r2, r7, r0, r2
 8000380:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x14e>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 32ff 	add.w	r2, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x14c>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2c2>
 800039c:	4610      	mov	r0, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003a6:	e79f      	b.n	80002e8 <__udivmoddi4+0x98>
 80003a8:	f1c1 0720 	rsb	r7, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ba:	fa20 f307 	lsr.w	r3, r0, r7
 80003be:	40fd      	lsrs	r5, r7
 80003c0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c4:	4323      	orrs	r3, r4
 80003c6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	fb09 5518 	mls	r5, r9, r8, r5
 80003d2:	0c1c      	lsrs	r4, r3, #16
 80003d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d8:	fb08 f50e 	mul.w	r5, r8, lr
 80003dc:	42a5      	cmp	r5, r4
 80003de:	fa02 f201 	lsl.w	r2, r2, r1
 80003e2:	fa00 f001 	lsl.w	r0, r0, r1
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2b4>
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2b4>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4464      	add	r4, ip
 8000400:	1b64      	subs	r4, r4, r5
 8000402:	b29d      	uxth	r5, r3
 8000404:	fbb4 f3f9 	udiv	r3, r4, r9
 8000408:	fb09 4413 	mls	r4, r9, r3, r4
 800040c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000410:	fb03 fe0e 	mul.w	lr, r3, lr
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2ac>
 8000422:	45a6      	cmp	lr, r4
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2ac>
 8000426:	3b02      	subs	r3, #2
 8000428:	4464      	add	r4, ip
 800042a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800042e:	fba3 9502 	umull	r9, r5, r3, r2
 8000432:	eba4 040e 	sub.w	r4, r4, lr
 8000436:	42ac      	cmp	r4, r5
 8000438:	46c8      	mov	r8, r9
 800043a:	46ae      	mov	lr, r5
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x29c>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x298>
 8000440:	b156      	cbz	r6, 8000458 <__udivmoddi4+0x208>
 8000442:	ebb0 0208 	subs.w	r2, r0, r8
 8000446:	eb64 040e 	sbc.w	r4, r4, lr
 800044a:	fa04 f707 	lsl.w	r7, r4, r7
 800044e:	40ca      	lsrs	r2, r1
 8000450:	40cc      	lsrs	r4, r1
 8000452:	4317      	orrs	r7, r2
 8000454:	e9c6 7400 	strd	r7, r4, [r6]
 8000458:	4618      	mov	r0, r3
 800045a:	2100      	movs	r1, #0
 800045c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000460:	f1c3 0120 	rsb	r1, r3, #32
 8000464:	fa02 fc03 	lsl.w	ip, r2, r3
 8000468:	fa20 f201 	lsr.w	r2, r0, r1
 800046c:	fa25 f101 	lsr.w	r1, r5, r1
 8000470:	409d      	lsls	r5, r3
 8000472:	432a      	orrs	r2, r5
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000480:	fb07 1510 	mls	r5, r7, r0, r1
 8000484:	0c11      	lsrs	r1, r2, #16
 8000486:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800048a:	fb00 f50e 	mul.w	r5, r0, lr
 800048e:	428d      	cmp	r5, r1
 8000490:	fa04 f403 	lsl.w	r4, r4, r3
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x258>
 8000496:	eb1c 0101 	adds.w	r1, ip, r1
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004a0:	428d      	cmp	r5, r1
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1b49      	subs	r1, r1, r5
 80004aa:	b292      	uxth	r2, r2
 80004ac:	fbb1 f5f7 	udiv	r5, r1, r7
 80004b0:	fb07 1115 	mls	r1, r7, r5, r1
 80004b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b8:	fb05 f10e 	mul.w	r1, r5, lr
 80004bc:	4291      	cmp	r1, r2
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x282>
 80004c0:	eb1c 0202 	adds.w	r2, ip, r2
 80004c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 80004ca:	4291      	cmp	r1, r2
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 80004ce:	3d02      	subs	r5, #2
 80004d0:	4462      	add	r2, ip
 80004d2:	1a52      	subs	r2, r2, r1
 80004d4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0xfc>
 80004da:	4631      	mov	r1, r6
 80004dc:	4630      	mov	r0, r6
 80004de:	e708      	b.n	80002f2 <__udivmoddi4+0xa2>
 80004e0:	4639      	mov	r1, r7
 80004e2:	e6e6      	b.n	80002b2 <__udivmoddi4+0x62>
 80004e4:	4610      	mov	r0, r2
 80004e6:	e6fb      	b.n	80002e0 <__udivmoddi4+0x90>
 80004e8:	4548      	cmp	r0, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004f4:	3b01      	subs	r3, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f8:	4645      	mov	r5, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x282>
 80004fc:	462b      	mov	r3, r5
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1da>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x258>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000508:	3d02      	subs	r5, #2
 800050a:	4462      	add	r2, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x124>
 800050e:	4608      	mov	r0, r1
 8000510:	e70a      	b.n	8000328 <__udivmoddi4+0xd8>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x14e>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f000 fc7e 	bl	8000e20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f822 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f000 f942 	bl	80007b0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800052c:	f000 f8e6 	bl	80006fc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000530:	f000 f90e 	bl	8000750 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM4_Init();
 8000534:	f000 f886 	bl	8000644 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /* Enable TIM7 = TIM7->CR1 |= TIM_CR1_CEN */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000538:	2104      	movs	r1, #4
 800053a:	4808      	ldr	r0, [pc, #32]	; (800055c <main+0x40>)
 800053c:	f002 f942 	bl	80027c4 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000540:	f003 fd12 	bl	8003f68 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blinkyTask */
  blinkyTaskHandle = osThreadNew(BlinkyLEDTask, NULL, &blinkyTask_attributes);
 8000544:	4a06      	ldr	r2, [pc, #24]	; (8000560 <main+0x44>)
 8000546:	2100      	movs	r1, #0
 8000548:	4806      	ldr	r0, [pc, #24]	; (8000564 <main+0x48>)
 800054a:	f003 fd57 	bl	8003ffc <osThreadNew>
 800054e:	4603      	mov	r3, r0
 8000550:	4a05      	ldr	r2, [pc, #20]	; (8000568 <main+0x4c>)
 8000552:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000554:	f003 fd2c 	bl	8003fb0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000558:	e7fe      	b.n	8000558 <main+0x3c>
 800055a:	bf00      	nop
 800055c:	20000030 	.word	0x20000030
 8000560:	08006abc 	.word	0x08006abc
 8000564:	0800090d 	.word	0x0800090d
 8000568:	200005c8 	.word	0x200005c8

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b094      	sub	sp, #80	; 0x50
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 031c 	add.w	r3, r7, #28
 8000576:	2234      	movs	r2, #52	; 0x34
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f006 fa46 	bl	8006a0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	f107 0308 	add.w	r3, r7, #8
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000590:	2300      	movs	r3, #0
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	4b29      	ldr	r3, [pc, #164]	; (800063c <SystemClock_Config+0xd0>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000598:	4a28      	ldr	r2, [pc, #160]	; (800063c <SystemClock_Config+0xd0>)
 800059a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059e:	6413      	str	r3, [r2, #64]	; 0x40
 80005a0:	4b26      	ldr	r3, [pc, #152]	; (800063c <SystemClock_Config+0xd0>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ac:	2300      	movs	r3, #0
 80005ae:	603b      	str	r3, [r7, #0]
 80005b0:	4b23      	ldr	r3, [pc, #140]	; (8000640 <SystemClock_Config+0xd4>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a22      	ldr	r2, [pc, #136]	; (8000640 <SystemClock_Config+0xd4>)
 80005b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005ba:	6013      	str	r3, [r2, #0]
 80005bc:	4b20      	ldr	r3, [pc, #128]	; (8000640 <SystemClock_Config+0xd4>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005c4:	603b      	str	r3, [r7, #0]
 80005c6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c8:	2301      	movs	r3, #1
 80005ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005cc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d2:	2302      	movs	r3, #2
 80005d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005dc:	2308      	movs	r3, #8
 80005de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 384;
 80005e0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80005e4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005e6:	2304      	movs	r3, #4
 80005e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80005ea:	2308      	movs	r3, #8
 80005ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005ee:	2302      	movs	r3, #2
 80005f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f2:	f107 031c 	add.w	r3, r7, #28
 80005f6:	4618      	mov	r0, r3
 80005f8:	f001 fd46 	bl	8002088 <HAL_RCC_OscConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000602:	f000 f9f1 	bl	80009e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000606:	230f      	movs	r3, #15
 8000608:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060a:	2302      	movs	r3, #2
 800060c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000612:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000616:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800061c:	f107 0308 	add.w	r3, r7, #8
 8000620:	2103      	movs	r1, #3
 8000622:	4618      	mov	r0, r3
 8000624:	f001 f852 	bl	80016cc <HAL_RCC_ClockConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800062e:	f000 f9db 	bl	80009e8 <Error_Handler>
  }
}
 8000632:	bf00      	nop
 8000634:	3750      	adds	r7, #80	; 0x50
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40023800 	.word	0x40023800
 8000640:	40007000 	.word	0x40007000

08000644 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08a      	sub	sp, #40	; 0x28
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800064a:	f107 0320 	add.w	r3, r7, #32
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]
 8000660:	611a      	str	r2, [r3, #16]
 8000662:	615a      	str	r2, [r3, #20]
 8000664:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000666:	4b23      	ldr	r3, [pc, #140]	; (80006f4 <MX_TIM4_Init+0xb0>)
 8000668:	4a23      	ldr	r2, [pc, #140]	; (80006f8 <MX_TIM4_Init+0xb4>)
 800066a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 500;
 800066c:	4b21      	ldr	r3, [pc, #132]	; (80006f4 <MX_TIM4_Init+0xb0>)
 800066e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000672:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000674:	4b1f      	ldr	r3, [pc, #124]	; (80006f4 <MX_TIM4_Init+0xb0>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 800067a:	4b1e      	ldr	r3, [pc, #120]	; (80006f4 <MX_TIM4_Init+0xb0>)
 800067c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000680:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000682:	4b1c      	ldr	r3, [pc, #112]	; (80006f4 <MX_TIM4_Init+0xb0>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000688:	4b1a      	ldr	r3, [pc, #104]	; (80006f4 <MX_TIM4_Init+0xb0>)
 800068a:	2200      	movs	r2, #0
 800068c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800068e:	4819      	ldr	r0, [pc, #100]	; (80006f4 <MX_TIM4_Init+0xb0>)
 8000690:	f002 f848 	bl	8002724 <HAL_TIM_PWM_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800069a:	f000 f9a5 	bl	80009e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800069e:	2300      	movs	r3, #0
 80006a0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006a2:	2300      	movs	r3, #0
 80006a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80006a6:	f107 0320 	add.w	r3, r7, #32
 80006aa:	4619      	mov	r1, r3
 80006ac:	4811      	ldr	r0, [pc, #68]	; (80006f4 <MX_TIM4_Init+0xb0>)
 80006ae:	f002 fdb9 	bl	8003224 <HAL_TIMEx_MasterConfigSynchronization>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80006b8:	f000 f996 	bl	80009e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006bc:	2360      	movs	r3, #96	; 0x60
 80006be:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 80006c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006c6:	2300      	movs	r3, #0
 80006c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006ca:	2300      	movs	r3, #0
 80006cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	2204      	movs	r2, #4
 80006d2:	4619      	mov	r1, r3
 80006d4:	4807      	ldr	r0, [pc, #28]	; (80006f4 <MX_TIM4_Init+0xb0>)
 80006d6:	f002 fa45 	bl	8002b64 <HAL_TIM_PWM_ConfigChannel>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 80006e0:	f000 f982 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80006e4:	4803      	ldr	r0, [pc, #12]	; (80006f4 <MX_TIM4_Init+0xb0>)
 80006e6:	f000 f9d3 	bl	8000a90 <HAL_TIM_MspPostInit>

}
 80006ea:	bf00      	nop
 80006ec:	3728      	adds	r7, #40	; 0x28
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000030 	.word	0x20000030
 80006f8:	40000800 	.word	0x40000800

080006fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_USART3_UART_Init+0x4c>)
 8000702:	4a12      	ldr	r2, [pc, #72]	; (800074c <MX_USART3_UART_Init+0x50>)
 8000704:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000706:	4b10      	ldr	r3, [pc, #64]	; (8000748 <MX_USART3_UART_Init+0x4c>)
 8000708:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800070c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_USART3_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_USART3_UART_Init+0x4c>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800071a:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <MX_USART3_UART_Init+0x4c>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000720:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_USART3_UART_Init+0x4c>)
 8000722:	220c      	movs	r2, #12
 8000724:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <MX_USART3_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_USART3_UART_Init+0x4c>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000732:	4805      	ldr	r0, [pc, #20]	; (8000748 <MX_USART3_UART_Init+0x4c>)
 8000734:	f002 fe06 	bl	8003344 <HAL_UART_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800073e:	f000 f953 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000078 	.word	0x20000078
 800074c:	40004800 	.word	0x40004800

08000750 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000754:	4b15      	ldr	r3, [pc, #84]	; (80007ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000756:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800075a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800075c:	4b13      	ldr	r3, [pc, #76]	; (80007ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800075e:	2206      	movs	r2, #6
 8000760:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000762:	4b12      	ldr	r3, [pc, #72]	; (80007ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000764:	2202      	movs	r2, #2
 8000766:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000768:	4b10      	ldr	r3, [pc, #64]	; (80007ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800076a:	2200      	movs	r2, #0
 800076c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000770:	2202      	movs	r2, #2
 8000772:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000774:	4b0d      	ldr	r3, [pc, #52]	; (80007ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000776:	2201      	movs	r2, #1
 8000778:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800077a:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800077c:	2200      	movs	r2, #0
 800077e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000780:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000782:	2200      	movs	r2, #0
 8000784:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000786:	4b09      	ldr	r3, [pc, #36]	; (80007ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000788:	2201      	movs	r2, #1
 800078a:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800078c:	4b07      	ldr	r3, [pc, #28]	; (80007ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800078e:	2201      	movs	r2, #1
 8000790:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000792:	4b06      	ldr	r3, [pc, #24]	; (80007ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000794:	2200      	movs	r2, #0
 8000796:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000798:	4804      	ldr	r0, [pc, #16]	; (80007ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800079a:	f000 fe4e 	bl	800143a <HAL_PCD_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 80007a4:	f000 f920 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	200000bc 	.word	0x200000bc

080007b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08c      	sub	sp, #48	; 0x30
 80007b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	61bb      	str	r3, [r7, #24]
 80007ca:	4b4c      	ldr	r3, [pc, #304]	; (80008fc <MX_GPIO_Init+0x14c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a4b      	ldr	r2, [pc, #300]	; (80008fc <MX_GPIO_Init+0x14c>)
 80007d0:	f043 0304 	orr.w	r3, r3, #4
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b49      	ldr	r3, [pc, #292]	; (80008fc <MX_GPIO_Init+0x14c>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0304 	and.w	r3, r3, #4
 80007de:	61bb      	str	r3, [r7, #24]
 80007e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]
 80007e6:	4b45      	ldr	r3, [pc, #276]	; (80008fc <MX_GPIO_Init+0x14c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a44      	ldr	r2, [pc, #272]	; (80008fc <MX_GPIO_Init+0x14c>)
 80007ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b42      	ldr	r3, [pc, #264]	; (80008fc <MX_GPIO_Init+0x14c>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fa:	617b      	str	r3, [r7, #20]
 80007fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	4b3e      	ldr	r3, [pc, #248]	; (80008fc <MX_GPIO_Init+0x14c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a3d      	ldr	r2, [pc, #244]	; (80008fc <MX_GPIO_Init+0x14c>)
 8000808:	f043 0302 	orr.w	r3, r3, #2
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b3b      	ldr	r3, [pc, #236]	; (80008fc <MX_GPIO_Init+0x14c>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0302 	and.w	r3, r3, #2
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	4b37      	ldr	r3, [pc, #220]	; (80008fc <MX_GPIO_Init+0x14c>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a36      	ldr	r2, [pc, #216]	; (80008fc <MX_GPIO_Init+0x14c>)
 8000824:	f043 0308 	orr.w	r3, r3, #8
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b34      	ldr	r3, [pc, #208]	; (80008fc <MX_GPIO_Init+0x14c>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0308 	and.w	r3, r3, #8
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	4b30      	ldr	r3, [pc, #192]	; (80008fc <MX_GPIO_Init+0x14c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a2f      	ldr	r2, [pc, #188]	; (80008fc <MX_GPIO_Init+0x14c>)
 8000840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b2d      	ldr	r3, [pc, #180]	; (80008fc <MX_GPIO_Init+0x14c>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	4b29      	ldr	r3, [pc, #164]	; (80008fc <MX_GPIO_Init+0x14c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a28      	ldr	r2, [pc, #160]	; (80008fc <MX_GPIO_Init+0x14c>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b26      	ldr	r3, [pc, #152]	; (80008fc <MX_GPIO_Init+0x14c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	f244 0101 	movw	r1, #16385	; 0x4001
 8000874:	4822      	ldr	r0, [pc, #136]	; (8000900 <MX_GPIO_Init+0x150>)
 8000876:	f000 fdc7 	bl	8001408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	2140      	movs	r1, #64	; 0x40
 800087e:	4821      	ldr	r0, [pc, #132]	; (8000904 <MX_GPIO_Init+0x154>)
 8000880:	f000 fdc2 	bl	8001408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000884:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800088a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800088e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000894:	f107 031c 	add.w	r3, r7, #28
 8000898:	4619      	mov	r1, r3
 800089a:	481b      	ldr	r0, [pc, #108]	; (8000908 <MX_GPIO_Init+0x158>)
 800089c:	f000 fc08 	bl	80010b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80008a0:	f244 0301 	movw	r3, #16385	; 0x4001
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a6:	2301      	movs	r3, #1
 80008a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	2300      	movs	r3, #0
 80008b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	4619      	mov	r1, r3
 80008b8:	4811      	ldr	r0, [pc, #68]	; (8000900 <MX_GPIO_Init+0x150>)
 80008ba:	f000 fbf9 	bl	80010b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008be:	2340      	movs	r3, #64	; 0x40
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c2:	2301      	movs	r3, #1
 80008c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2300      	movs	r3, #0
 80008cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	4619      	mov	r1, r3
 80008d4:	480b      	ldr	r0, [pc, #44]	; (8000904 <MX_GPIO_Init+0x154>)
 80008d6:	f000 fbeb 	bl	80010b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008da:	2380      	movs	r3, #128	; 0x80
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008de:	2300      	movs	r3, #0
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_GPIO_Init+0x154>)
 80008ee:	f000 fbdf 	bl	80010b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008f2:	bf00      	nop
 80008f4:	3730      	adds	r7, #48	; 0x30
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800
 8000900:	40020400 	.word	0x40020400
 8000904:	40021800 	.word	0x40021800
 8000908:	40020800 	.word	0x40020800

0800090c <BlinkyLEDTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_BlinkyLEDTask */
void BlinkyLEDTask(void *argument)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t cnt = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	73fb      	strb	r3, [r7, #15]
  uint32_t newDutyCycle = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	60bb      	str	r3, [r7, #8]

  /* Infinite loop */
  for (;;)
  {

	if (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) != GPIO_PIN_RESET && buttonReleased)
 800091c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000920:	4825      	ldr	r0, [pc, #148]	; (80009b8 <BlinkyLEDTask+0xac>)
 8000922:	f000 fd59 	bl	80013d8 <HAL_GPIO_ReadPin>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d036      	beq.n	800099a <BlinkyLEDTask+0x8e>
 800092c:	4b23      	ldr	r3, [pc, #140]	; (80009bc <BlinkyLEDTask+0xb0>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	b2db      	uxtb	r3, r3
 8000932:	2b00      	cmp	r3, #0
 8000934:	d031      	beq.n	800099a <BlinkyLEDTask+0x8e>
    {
		buttonReleased = 0;
 8000936:	4b21      	ldr	r3, [pc, #132]	; (80009bc <BlinkyLEDTask+0xb0>)
 8000938:	2200      	movs	r2, #0
 800093a:	701a      	strb	r2, [r3, #0]
		/* continous count for chaning brightness */
		cnt = (cnt + 1) % 4;
 800093c:	7bfb      	ldrb	r3, [r7, #15]
 800093e:	3301      	adds	r3, #1
 8000940:	425a      	negs	r2, r3
 8000942:	f003 0303 	and.w	r3, r3, #3
 8000946:	f002 0203 	and.w	r2, r2, #3
 800094a:	bf58      	it	pl
 800094c:	4253      	negpl	r3, r2
 800094e:	73fb      	strb	r3, [r7, #15]

		switch (cnt)
 8000950:	7bfb      	ldrb	r3, [r7, #15]
 8000952:	2b03      	cmp	r3, #3
 8000954:	d819      	bhi.n	800098a <BlinkyLEDTask+0x7e>
 8000956:	a201      	add	r2, pc, #4	; (adr r2, 800095c <BlinkyLEDTask+0x50>)
 8000958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800095c:	0800096d 	.word	0x0800096d
 8000960:	08000975 	.word	0x08000975
 8000964:	0800097d 	.word	0x0800097d
 8000968:	08000985 	.word	0x08000985
		{
		case 0:
			newDutyCycle = 1000;
 800096c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000970:	60bb      	str	r3, [r7, #8]
			break;
 8000972:	e00d      	b.n	8000990 <BlinkyLEDTask+0x84>

		case 1:
			newDutyCycle = 750;
 8000974:	f240 23ee 	movw	r3, #750	; 0x2ee
 8000978:	60bb      	str	r3, [r7, #8]
			break;
 800097a:	e009      	b.n	8000990 <BlinkyLEDTask+0x84>

		case 2:
			newDutyCycle = 500;
 800097c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000980:	60bb      	str	r3, [r7, #8]
			break;
 8000982:	e005      	b.n	8000990 <BlinkyLEDTask+0x84>

		case 3:
			newDutyCycle = 250;
 8000984:	23fa      	movs	r3, #250	; 0xfa
 8000986:	60bb      	str	r3, [r7, #8]
			break;
 8000988:	e002      	b.n	8000990 <BlinkyLEDTask+0x84>

		default:
			newDutyCycle = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	60bb      	str	r3, [r7, #8]
			break;
 800098e:	bf00      	nop
		}

		/* Set CCR2 Value */
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, newDutyCycle);
 8000990:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <BlinkyLEDTask+0xb4>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	68ba      	ldr	r2, [r7, #8]
 8000996:	639a      	str	r2, [r3, #56]	; 0x38
 8000998:	e00a      	b.n	80009b0 <BlinkyLEDTask+0xa4>
    }
	else if (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == GPIO_PIN_RESET)
 800099a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800099e:	4806      	ldr	r0, [pc, #24]	; (80009b8 <BlinkyLEDTask+0xac>)
 80009a0:	f000 fd1a 	bl	80013d8 <HAL_GPIO_ReadPin>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d102      	bne.n	80009b0 <BlinkyLEDTask+0xa4>
	{
		buttonReleased = 1;
 80009aa:	4b04      	ldr	r3, [pc, #16]	; (80009bc <BlinkyLEDTask+0xb0>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	701a      	strb	r2, [r3, #0]
	}
	osDelay(1);
 80009b0:	2001      	movs	r0, #1
 80009b2:	f003 fbb5 	bl	8004120 <osDelay>
	if (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) != GPIO_PIN_RESET && buttonReleased)
 80009b6:	e7b1      	b.n	800091c <BlinkyLEDTask+0x10>
 80009b8:	40020800 	.word	0x40020800
 80009bc:	20000000 	.word	0x20000000
 80009c0:	20000030 	.word	0x20000030

080009c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a04      	ldr	r2, [pc, #16]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d101      	bne.n	80009da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009d6:	f000 fa45 	bl	8000e64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40001000 	.word	0x40001000

080009e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ec:	b672      	cpsid	i
}
 80009ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <Error_Handler+0x8>
	...

080009f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <HAL_MspInit+0x54>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a02:	4a11      	ldr	r2, [pc, #68]	; (8000a48 <HAL_MspInit+0x54>)
 8000a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a08:	6453      	str	r3, [r2, #68]	; 0x44
 8000a0a:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <HAL_MspInit+0x54>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	603b      	str	r3, [r7, #0]
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <HAL_MspInit+0x54>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1e:	4a0a      	ldr	r2, [pc, #40]	; (8000a48 <HAL_MspInit+0x54>)
 8000a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a24:	6413      	str	r3, [r2, #64]	; 0x40
 8000a26:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <HAL_MspInit+0x54>)
 8000a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a2e:	603b      	str	r3, [r7, #0]
 8000a30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a32:	2200      	movs	r2, #0
 8000a34:	210f      	movs	r1, #15
 8000a36:	f06f 0001 	mvn.w	r0, #1
 8000a3a:	f000 fb0f 	bl	800105c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40023800 	.word	0x40023800

08000a4c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a0b      	ldr	r2, [pc, #44]	; (8000a88 <HAL_TIM_PWM_MspInit+0x3c>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d10d      	bne.n	8000a7a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <HAL_TIM_PWM_MspInit+0x40>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a66:	4a09      	ldr	r2, [pc, #36]	; (8000a8c <HAL_TIM_PWM_MspInit+0x40>)
 8000a68:	f043 0304 	orr.w	r3, r3, #4
 8000a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6e:	4b07      	ldr	r3, [pc, #28]	; (8000a8c <HAL_TIM_PWM_MspInit+0x40>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a72:	f003 0304 	and.w	r3, r3, #4
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000a7a:	bf00      	nop
 8000a7c:	3714      	adds	r7, #20
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	40000800 	.word	0x40000800
 8000a8c:	40023800 	.word	0x40023800

08000a90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b088      	sub	sp, #32
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	f107 030c 	add.w	r3, r7, #12
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a12      	ldr	r2, [pc, #72]	; (8000af8 <HAL_TIM_MspPostInit+0x68>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d11d      	bne.n	8000aee <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60bb      	str	r3, [r7, #8]
 8000ab6:	4b11      	ldr	r3, [pc, #68]	; (8000afc <HAL_TIM_MspPostInit+0x6c>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a10      	ldr	r2, [pc, #64]	; (8000afc <HAL_TIM_MspPostInit+0x6c>)
 8000abc:	f043 0302 	orr.w	r3, r3, #2
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <HAL_TIM_MspPostInit+0x6c>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0302 	and.w	r3, r3, #2
 8000aca:	60bb      	str	r3, [r7, #8]
 8000acc:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ace:	2380      	movs	r3, #128	; 0x80
 8000ad0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae2:	f107 030c 	add.w	r3, r7, #12
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4805      	ldr	r0, [pc, #20]	; (8000b00 <HAL_TIM_MspPostInit+0x70>)
 8000aea:	f000 fae1 	bl	80010b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000aee:	bf00      	nop
 8000af0:	3720      	adds	r7, #32
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40000800 	.word	0x40000800
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40020400 	.word	0x40020400

08000b04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	; 0x28
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a19      	ldr	r2, [pc, #100]	; (8000b88 <HAL_UART_MspInit+0x84>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d12c      	bne.n	8000b80 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
 8000b2a:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <HAL_UART_MspInit+0x88>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	4a17      	ldr	r2, [pc, #92]	; (8000b8c <HAL_UART_MspInit+0x88>)
 8000b30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b34:	6413      	str	r3, [r2, #64]	; 0x40
 8000b36:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <HAL_UART_MspInit+0x88>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <HAL_UART_MspInit+0x88>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a10      	ldr	r2, [pc, #64]	; (8000b8c <HAL_UART_MspInit+0x88>)
 8000b4c:	f043 0308 	orr.w	r3, r3, #8
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <HAL_UART_MspInit+0x88>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0308 	and.w	r3, r3, #8
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b64:	2302      	movs	r3, #2
 8000b66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b70:	2307      	movs	r3, #7
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4805      	ldr	r0, [pc, #20]	; (8000b90 <HAL_UART_MspInit+0x8c>)
 8000b7c:	f000 fa98 	bl	80010b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b80:	bf00      	nop
 8000b82:	3728      	adds	r7, #40	; 0x28
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40004800 	.word	0x40004800
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40020c00 	.word	0x40020c00

08000b94 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b0a0      	sub	sp, #128	; 0x80
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	2258      	movs	r2, #88	; 0x58
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f005 ff29 	bl	8006a0c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000bc2:	d14d      	bne.n	8000c60 <HAL_PCD_MspInit+0xcc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000bc4:	2320      	movs	r3, #32
 8000bc6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f000 ffcd 	bl	8001b70 <HAL_RCCEx_PeriphCLKConfig>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 8000bdc:	f7ff ff04 	bl	80009e8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be0:	2300      	movs	r3, #0
 8000be2:	613b      	str	r3, [r7, #16]
 8000be4:	4b20      	ldr	r3, [pc, #128]	; (8000c68 <HAL_PCD_MspInit+0xd4>)
 8000be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be8:	4a1f      	ldr	r2, [pc, #124]	; (8000c68 <HAL_PCD_MspInit+0xd4>)
 8000bea:	f043 0301 	orr.w	r3, r3, #1
 8000bee:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf0:	4b1d      	ldr	r3, [pc, #116]	; (8000c68 <HAL_PCD_MspInit+0xd4>)
 8000bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf4:	f003 0301 	and.w	r3, r3, #1
 8000bf8:	613b      	str	r3, [r7, #16]
 8000bfa:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000bfc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000c00:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c02:	2302      	movs	r3, #2
 8000c04:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c0e:	230a      	movs	r3, #10
 8000c10:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c12:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000c16:	4619      	mov	r1, r3
 8000c18:	4814      	ldr	r0, [pc, #80]	; (8000c6c <HAL_PCD_MspInit+0xd8>)
 8000c1a:	f000 fa49 	bl	80010b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c22:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c24:	2300      	movs	r3, #0
 8000c26:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c2c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000c30:	4619      	mov	r1, r3
 8000c32:	480e      	ldr	r0, [pc, #56]	; (8000c6c <HAL_PCD_MspInit+0xd8>)
 8000c34:	f000 fa3c 	bl	80010b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c38:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <HAL_PCD_MspInit+0xd4>)
 8000c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c3c:	4a0a      	ldr	r2, [pc, #40]	; (8000c68 <HAL_PCD_MspInit+0xd4>)
 8000c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c42:	6353      	str	r3, [r2, #52]	; 0x34
 8000c44:	2300      	movs	r3, #0
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	4b07      	ldr	r3, [pc, #28]	; (8000c68 <HAL_PCD_MspInit+0xd4>)
 8000c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4c:	4a06      	ldr	r2, [pc, #24]	; (8000c68 <HAL_PCD_MspInit+0xd4>)
 8000c4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c52:	6453      	str	r3, [r2, #68]	; 0x44
 8000c54:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <HAL_PCD_MspInit+0xd4>)
 8000c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000c60:	bf00      	nop
 8000c62:	3780      	adds	r7, #128	; 0x80
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	40020000 	.word	0x40020000

08000c70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08e      	sub	sp, #56	; 0x38
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c80:	2300      	movs	r3, #0
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	4b33      	ldr	r3, [pc, #204]	; (8000d54 <HAL_InitTick+0xe4>)
 8000c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c88:	4a32      	ldr	r2, [pc, #200]	; (8000d54 <HAL_InitTick+0xe4>)
 8000c8a:	f043 0310 	orr.w	r3, r3, #16
 8000c8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c90:	4b30      	ldr	r3, [pc, #192]	; (8000d54 <HAL_InitTick+0xe4>)
 8000c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c94:	f003 0310 	and.w	r3, r3, #16
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c9c:	f107 0210 	add.w	r2, r7, #16
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	4611      	mov	r1, r2
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f000 ff30 	bl	8001b0c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000cac:	6a3b      	ldr	r3, [r7, #32]
 8000cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d103      	bne.n	8000cbe <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cb6:	f000 ff01 	bl	8001abc <HAL_RCC_GetPCLK1Freq>
 8000cba:	6378      	str	r0, [r7, #52]	; 0x34
 8000cbc:	e004      	b.n	8000cc8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000cbe:	f000 fefd 	bl	8001abc <HAL_RCC_GetPCLK1Freq>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cca:	4a23      	ldr	r2, [pc, #140]	; (8000d58 <HAL_InitTick+0xe8>)
 8000ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd0:	0c9b      	lsrs	r3, r3, #18
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000cd6:	4b21      	ldr	r3, [pc, #132]	; (8000d5c <HAL_InitTick+0xec>)
 8000cd8:	4a21      	ldr	r2, [pc, #132]	; (8000d60 <HAL_InitTick+0xf0>)
 8000cda:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000cdc:	4b1f      	ldr	r3, [pc, #124]	; (8000d5c <HAL_InitTick+0xec>)
 8000cde:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ce2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ce4:	4a1d      	ldr	r2, [pc, #116]	; (8000d5c <HAL_InitTick+0xec>)
 8000ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ce8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000cea:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <HAL_InitTick+0xec>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf0:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <HAL_InitTick+0xec>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf6:	4b19      	ldr	r3, [pc, #100]	; (8000d5c <HAL_InitTick+0xec>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000cfc:	4817      	ldr	r0, [pc, #92]	; (8000d5c <HAL_InitTick+0xec>)
 8000cfe:	f001 fc47 	bl	8002590 <HAL_TIM_Base_Init>
 8000d02:	4603      	mov	r3, r0
 8000d04:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000d08:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d11b      	bne.n	8000d48 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000d10:	4812      	ldr	r0, [pc, #72]	; (8000d5c <HAL_InitTick+0xec>)
 8000d12:	f001 fc97 	bl	8002644 <HAL_TIM_Base_Start_IT>
 8000d16:	4603      	mov	r3, r0
 8000d18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000d1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d111      	bne.n	8000d48 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d24:	2036      	movs	r0, #54	; 0x36
 8000d26:	f000 f9b5 	bl	8001094 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2b0f      	cmp	r3, #15
 8000d2e:	d808      	bhi.n	8000d42 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d30:	2200      	movs	r2, #0
 8000d32:	6879      	ldr	r1, [r7, #4]
 8000d34:	2036      	movs	r0, #54	; 0x36
 8000d36:	f000 f991 	bl	800105c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d3a:	4a0a      	ldr	r2, [pc, #40]	; (8000d64 <HAL_InitTick+0xf4>)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6013      	str	r3, [r2, #0]
 8000d40:	e002      	b.n	8000d48 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d48:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3738      	adds	r7, #56	; 0x38
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40023800 	.word	0x40023800
 8000d58:	431bde83 	.word	0x431bde83
 8000d5c:	200005cc 	.word	0x200005cc
 8000d60:	40001000 	.word	0x40001000
 8000d64:	20000008 	.word	0x20000008

08000d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <NMI_Handler+0x4>

08000d6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d72:	e7fe      	b.n	8000d72 <HardFault_Handler+0x4>

08000d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <MemManage_Handler+0x4>

08000d7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d7e:	e7fe      	b.n	8000d7e <BusFault_Handler+0x4>

08000d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <UsageFault_Handler+0x4>

08000d86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d98:	4802      	ldr	r0, [pc, #8]	; (8000da4 <TIM6_DAC_IRQHandler+0x10>)
 8000d9a:	f001 fddb 	bl	8002954 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	200005cc 	.word	0x200005cc

08000da8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <SystemInit+0x20>)
 8000dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000db2:	4a05      	ldr	r2, [pc, #20]	; (8000dc8 <SystemInit+0x20>)
 8000db4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000db8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <Reset_Handler>:
 8000dcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e04 <LoopFillZerobss+0x12>
 8000dd0:	480d      	ldr	r0, [pc, #52]	; (8000e08 <LoopFillZerobss+0x16>)
 8000dd2:	490e      	ldr	r1, [pc, #56]	; (8000e0c <LoopFillZerobss+0x1a>)
 8000dd4:	4a0e      	ldr	r2, [pc, #56]	; (8000e10 <LoopFillZerobss+0x1e>)
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	e002      	b.n	8000de0 <LoopCopyDataInit>

08000dda <CopyDataInit>:
 8000dda:	58d4      	ldr	r4, [r2, r3]
 8000ddc:	50c4      	str	r4, [r0, r3]
 8000dde:	3304      	adds	r3, #4

08000de0 <LoopCopyDataInit>:
 8000de0:	18c4      	adds	r4, r0, r3
 8000de2:	428c      	cmp	r4, r1
 8000de4:	d3f9      	bcc.n	8000dda <CopyDataInit>
 8000de6:	4a0b      	ldr	r2, [pc, #44]	; (8000e14 <LoopFillZerobss+0x22>)
 8000de8:	4c0b      	ldr	r4, [pc, #44]	; (8000e18 <LoopFillZerobss+0x26>)
 8000dea:	2300      	movs	r3, #0
 8000dec:	e001      	b.n	8000df2 <LoopFillZerobss>

08000dee <FillZerobss>:
 8000dee:	6013      	str	r3, [r2, #0]
 8000df0:	3204      	adds	r2, #4

08000df2 <LoopFillZerobss>:
 8000df2:	42a2      	cmp	r2, r4
 8000df4:	d3fb      	bcc.n	8000dee <FillZerobss>
 8000df6:	f7ff ffd7 	bl	8000da8 <SystemInit>
 8000dfa:	f005 fe0f 	bl	8006a1c <__libc_init_array>
 8000dfe:	f7ff fb8d 	bl	800051c <main>
 8000e02:	4770      	bx	lr
 8000e04:	20050000 	.word	0x20050000
 8000e08:	20000000 	.word	0x20000000
 8000e0c:	20000014 	.word	0x20000014
 8000e10:	08006b08 	.word	0x08006b08
 8000e14:	20000014 	.word	0x20000014
 8000e18:	20004f68 	.word	0x20004f68

08000e1c <ADC_IRQHandler>:
 8000e1c:	e7fe      	b.n	8000e1c <ADC_IRQHandler>
	...

08000e20 <HAL_Init>:
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <HAL_Init+0x40>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a0d      	ldr	r2, [pc, #52]	; (8000e60 <HAL_Init+0x40>)
 8000e2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e2e:	6013      	str	r3, [r2, #0]
 8000e30:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <HAL_Init+0x40>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a0a      	ldr	r2, [pc, #40]	; (8000e60 <HAL_Init+0x40>)
 8000e36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e3a:	6013      	str	r3, [r2, #0]
 8000e3c:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <HAL_Init+0x40>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a07      	ldr	r2, [pc, #28]	; (8000e60 <HAL_Init+0x40>)
 8000e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e46:	6013      	str	r3, [r2, #0]
 8000e48:	2003      	movs	r0, #3
 8000e4a:	f000 f8fc 	bl	8001046 <HAL_NVIC_SetPriorityGrouping>
 8000e4e:	200f      	movs	r0, #15
 8000e50:	f7ff ff0e 	bl	8000c70 <HAL_InitTick>
 8000e54:	f7ff fdce 	bl	80009f4 <HAL_MspInit>
 8000e58:	2300      	movs	r3, #0
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40023c00 	.word	0x40023c00

08000e64 <HAL_IncTick>:
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <HAL_IncTick+0x20>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <HAL_IncTick+0x24>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4413      	add	r3, r2
 8000e74:	4a04      	ldr	r2, [pc, #16]	; (8000e88 <HAL_IncTick+0x24>)
 8000e76:	6013      	str	r3, [r2, #0]
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	2000000c 	.word	0x2000000c
 8000e88:	20000614 	.word	0x20000614

08000e8c <HAL_GetTick>:
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	4b03      	ldr	r3, [pc, #12]	; (8000ea0 <HAL_GetTick+0x14>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4618      	mov	r0, r3
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	20000614 	.word	0x20000614

08000ea4 <HAL_Delay>:
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	f7ff ffee 	bl	8000e8c <HAL_GetTick>
 8000eb0:	60b8      	str	r0, [r7, #8]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ebc:	d005      	beq.n	8000eca <HAL_Delay+0x26>
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <HAL_Delay+0x44>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	bf00      	nop
 8000ecc:	f7ff ffde 	bl	8000e8c <HAL_GetTick>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	68fa      	ldr	r2, [r7, #12]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d8f7      	bhi.n	8000ecc <HAL_Delay+0x28>
 8000edc:	bf00      	nop
 8000ede:	bf00      	nop
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	2000000c 	.word	0x2000000c

08000eec <__NVIC_SetPriorityGrouping>:
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <__NVIC_SetPriorityGrouping+0x44>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	60bb      	str	r3, [r7, #8]
 8000f02:	68ba      	ldr	r2, [r7, #8]
 8000f04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f08:	4013      	ands	r3, r2
 8000f0a:	60bb      	str	r3, [r7, #8]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	021a      	lsls	r2, r3, #8
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	4a04      	ldr	r2, [pc, #16]	; (8000f30 <__NVIC_SetPriorityGrouping+0x44>)
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	60d3      	str	r3, [r2, #12]
 8000f24:	bf00      	nop
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <__NVIC_GetPriorityGrouping>:
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <__NVIC_GetPriorityGrouping+0x18>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	0a1b      	lsrs	r3, r3, #8
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	4618      	mov	r0, r3
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <__NVIC_EnableIRQ>:
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	db0b      	blt.n	8000f7a <__NVIC_EnableIRQ+0x2a>
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	f003 021f 	and.w	r2, r3, #31
 8000f68:	4907      	ldr	r1, [pc, #28]	; (8000f88 <__NVIC_EnableIRQ+0x38>)
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	095b      	lsrs	r3, r3, #5
 8000f70:	2001      	movs	r0, #1
 8000f72:	fa00 f202 	lsl.w	r2, r0, r2
 8000f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000e100 	.word	0xe000e100

08000f8c <__NVIC_SetPriority>:
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	6039      	str	r1, [r7, #0]
 8000f96:	71fb      	strb	r3, [r7, #7]
 8000f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	db0a      	blt.n	8000fb6 <__NVIC_SetPriority+0x2a>
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	490c      	ldr	r1, [pc, #48]	; (8000fd8 <__NVIC_SetPriority+0x4c>)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	0112      	lsls	r2, r2, #4
 8000fac:	b2d2      	uxtb	r2, r2
 8000fae:	440b      	add	r3, r1
 8000fb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8000fb4:	e00a      	b.n	8000fcc <__NVIC_SetPriority+0x40>
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	4908      	ldr	r1, [pc, #32]	; (8000fdc <__NVIC_SetPriority+0x50>)
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	f003 030f 	and.w	r3, r3, #15
 8000fc2:	3b04      	subs	r3, #4
 8000fc4:	0112      	lsls	r2, r2, #4
 8000fc6:	b2d2      	uxtb	r2, r2
 8000fc8:	440b      	add	r3, r1
 8000fca:	761a      	strb	r2, [r3, #24]
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000e100 	.word	0xe000e100
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <NVIC_EncodePriority>:
 8000fe0:	b480      	push	{r7}
 8000fe2:	b089      	sub	sp, #36	; 0x24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	61fb      	str	r3, [r7, #28]
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	f1c3 0307 	rsb	r3, r3, #7
 8000ffa:	2b04      	cmp	r3, #4
 8000ffc:	bf28      	it	cs
 8000ffe:	2304      	movcs	r3, #4
 8001000:	61bb      	str	r3, [r7, #24]
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3304      	adds	r3, #4
 8001006:	2b06      	cmp	r3, #6
 8001008:	d902      	bls.n	8001010 <NVIC_EncodePriority+0x30>
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3b03      	subs	r3, #3
 800100e:	e000      	b.n	8001012 <NVIC_EncodePriority+0x32>
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]
 8001014:	f04f 32ff 	mov.w	r2, #4294967295
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43da      	mvns	r2, r3
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	401a      	ands	r2, r3
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	409a      	lsls	r2, r3
 8001028:	f04f 31ff 	mov.w	r1, #4294967295
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	fa01 f303 	lsl.w	r3, r1, r3
 8001032:	43d9      	mvns	r1, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	400b      	ands	r3, r1
 8001038:	4313      	orrs	r3, r2
 800103a:	4618      	mov	r0, r3
 800103c:	3724      	adds	r7, #36	; 0x24
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <HAL_NVIC_SetPriorityGrouping>:
 8001046:	b580      	push	{r7, lr}
 8001048:	b082      	sub	sp, #8
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff ff4c 	bl	8000eec <__NVIC_SetPriorityGrouping>
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <HAL_NVIC_SetPriority>:
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
 8001068:	73fb      	strb	r3, [r7, #15]
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
 800106e:	f7ff ff61 	bl	8000f34 <__NVIC_GetPriorityGrouping>
 8001072:	6178      	str	r0, [r7, #20]
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	68b9      	ldr	r1, [r7, #8]
 8001078:	6978      	ldr	r0, [r7, #20]
 800107a:	f7ff ffb1 	bl	8000fe0 <NVIC_EncodePriority>
 800107e:	4602      	mov	r2, r0
 8001080:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001084:	4611      	mov	r1, r2
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff ff80 	bl	8000f8c <__NVIC_SetPriority>
 800108c:	bf00      	nop
 800108e:	3718      	adds	r7, #24
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <HAL_NVIC_EnableIRQ>:
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	71fb      	strb	r3, [r7, #7]
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff ff54 	bl	8000f50 <__NVIC_EnableIRQ>
 80010a8:	bf00      	nop
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <HAL_GPIO_Init>:
 80010b0:	b480      	push	{r7}
 80010b2:	b089      	sub	sp, #36	; 0x24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	2300      	movs	r3, #0
 80010c4:	61bb      	str	r3, [r7, #24]
 80010c6:	2300      	movs	r3, #0
 80010c8:	61fb      	str	r3, [r7, #28]
 80010ca:	e165      	b.n	8001398 <HAL_GPIO_Init+0x2e8>
 80010cc:	2201      	movs	r2, #1
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	617b      	str	r3, [r7, #20]
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	697a      	ldr	r2, [r7, #20]
 80010dc:	4013      	ands	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	f040 8154 	bne.w	8001392 <HAL_GPIO_Init+0x2e2>
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f003 0303 	and.w	r3, r3, #3
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d005      	beq.n	8001102 <HAL_GPIO_Init+0x52>
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f003 0303 	and.w	r3, r3, #3
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d130      	bne.n	8001164 <HAL_GPIO_Init+0xb4>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	61bb      	str	r3, [r7, #24]
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	2203      	movs	r2, #3
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4013      	ands	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	68da      	ldr	r2, [r3, #12]
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4313      	orrs	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	61bb      	str	r3, [r7, #24]
 8001138:	2201      	movs	r2, #1
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4013      	ands	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	091b      	lsrs	r3, r3, #4
 800114e:	f003 0201 	and.w	r2, r3, #1
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f003 0303 	and.w	r3, r3, #3
 800116c:	2b03      	cmp	r3, #3
 800116e:	d017      	beq.n	80011a0 <HAL_GPIO_Init+0xf0>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	61bb      	str	r3, [r7, #24]
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	2203      	movs	r2, #3
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4013      	ands	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	689a      	ldr	r2, [r3, #8]
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	60da      	str	r2, [r3, #12]
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 0303 	and.w	r3, r3, #3
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d123      	bne.n	80011f4 <HAL_GPIO_Init+0x144>
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	08da      	lsrs	r2, r3, #3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3208      	adds	r2, #8
 80011b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011b8:	61bb      	str	r3, [r7, #24]
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	f003 0307 	and.w	r3, r3, #7
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	220f      	movs	r2, #15
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	691a      	ldr	r2, [r3, #16]
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	08da      	lsrs	r2, r3, #3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	3208      	adds	r2, #8
 80011ee:	69b9      	ldr	r1, [r7, #24]
 80011f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	61bb      	str	r3, [r7, #24]
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	2203      	movs	r2, #3
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 0203 	and.w	r2, r3, #3
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001230:	2b00      	cmp	r3, #0
 8001232:	f000 80ae 	beq.w	8001392 <HAL_GPIO_Init+0x2e2>
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	4b5d      	ldr	r3, [pc, #372]	; (80013b0 <HAL_GPIO_Init+0x300>)
 800123c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123e:	4a5c      	ldr	r2, [pc, #368]	; (80013b0 <HAL_GPIO_Init+0x300>)
 8001240:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001244:	6453      	str	r3, [r2, #68]	; 0x44
 8001246:	4b5a      	ldr	r3, [pc, #360]	; (80013b0 <HAL_GPIO_Init+0x300>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	4a58      	ldr	r2, [pc, #352]	; (80013b4 <HAL_GPIO_Init+0x304>)
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	089b      	lsrs	r3, r3, #2
 8001258:	3302      	adds	r3, #2
 800125a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800125e:	61bb      	str	r3, [r7, #24]
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f003 0303 	and.w	r3, r3, #3
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	220f      	movs	r2, #15
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43db      	mvns	r3, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4013      	ands	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a4f      	ldr	r2, [pc, #316]	; (80013b8 <HAL_GPIO_Init+0x308>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d025      	beq.n	80012ca <HAL_GPIO_Init+0x21a>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a4e      	ldr	r2, [pc, #312]	; (80013bc <HAL_GPIO_Init+0x30c>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d01f      	beq.n	80012c6 <HAL_GPIO_Init+0x216>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a4d      	ldr	r2, [pc, #308]	; (80013c0 <HAL_GPIO_Init+0x310>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d019      	beq.n	80012c2 <HAL_GPIO_Init+0x212>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a4c      	ldr	r2, [pc, #304]	; (80013c4 <HAL_GPIO_Init+0x314>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d013      	beq.n	80012be <HAL_GPIO_Init+0x20e>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a4b      	ldr	r2, [pc, #300]	; (80013c8 <HAL_GPIO_Init+0x318>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d00d      	beq.n	80012ba <HAL_GPIO_Init+0x20a>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a4a      	ldr	r2, [pc, #296]	; (80013cc <HAL_GPIO_Init+0x31c>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d007      	beq.n	80012b6 <HAL_GPIO_Init+0x206>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a49      	ldr	r2, [pc, #292]	; (80013d0 <HAL_GPIO_Init+0x320>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d101      	bne.n	80012b2 <HAL_GPIO_Init+0x202>
 80012ae:	2306      	movs	r3, #6
 80012b0:	e00c      	b.n	80012cc <HAL_GPIO_Init+0x21c>
 80012b2:	2307      	movs	r3, #7
 80012b4:	e00a      	b.n	80012cc <HAL_GPIO_Init+0x21c>
 80012b6:	2305      	movs	r3, #5
 80012b8:	e008      	b.n	80012cc <HAL_GPIO_Init+0x21c>
 80012ba:	2304      	movs	r3, #4
 80012bc:	e006      	b.n	80012cc <HAL_GPIO_Init+0x21c>
 80012be:	2303      	movs	r3, #3
 80012c0:	e004      	b.n	80012cc <HAL_GPIO_Init+0x21c>
 80012c2:	2302      	movs	r3, #2
 80012c4:	e002      	b.n	80012cc <HAL_GPIO_Init+0x21c>
 80012c6:	2301      	movs	r3, #1
 80012c8:	e000      	b.n	80012cc <HAL_GPIO_Init+0x21c>
 80012ca:	2300      	movs	r3, #0
 80012cc:	69fa      	ldr	r2, [r7, #28]
 80012ce:	f002 0203 	and.w	r2, r2, #3
 80012d2:	0092      	lsls	r2, r2, #2
 80012d4:	4093      	lsls	r3, r2
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4313      	orrs	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
 80012dc:	4935      	ldr	r1, [pc, #212]	; (80013b4 <HAL_GPIO_Init+0x304>)
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	089b      	lsrs	r3, r3, #2
 80012e2:	3302      	adds	r3, #2
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80012ea:	4b3a      	ldr	r3, [pc, #232]	; (80013d4 <HAL_GPIO_Init+0x324>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	61bb      	str	r3, [r7, #24]
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	43db      	mvns	r3, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4013      	ands	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d003      	beq.n	800130e <HAL_GPIO_Init+0x25e>
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	4313      	orrs	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
 800130e:	4a31      	ldr	r2, [pc, #196]	; (80013d4 <HAL_GPIO_Init+0x324>)
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	6093      	str	r3, [r2, #8]
 8001314:	4b2f      	ldr	r3, [pc, #188]	; (80013d4 <HAL_GPIO_Init+0x324>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	61bb      	str	r3, [r7, #24]
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d003      	beq.n	8001338 <HAL_GPIO_Init+0x288>
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	4313      	orrs	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
 8001338:	4a26      	ldr	r2, [pc, #152]	; (80013d4 <HAL_GPIO_Init+0x324>)
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	60d3      	str	r3, [r2, #12]
 800133e:	4b25      	ldr	r3, [pc, #148]	; (80013d4 <HAL_GPIO_Init+0x324>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	61bb      	str	r3, [r7, #24]
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	43db      	mvns	r3, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4013      	ands	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <HAL_GPIO_Init+0x2b2>
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	4313      	orrs	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
 8001362:	4a1c      	ldr	r2, [pc, #112]	; (80013d4 <HAL_GPIO_Init+0x324>)
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	6053      	str	r3, [r2, #4]
 8001368:	4b1a      	ldr	r3, [pc, #104]	; (80013d4 <HAL_GPIO_Init+0x324>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	61bb      	str	r3, [r7, #24]
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	43db      	mvns	r3, r3
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4013      	ands	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d003      	beq.n	800138c <HAL_GPIO_Init+0x2dc>
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	4313      	orrs	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
 800138c:	4a11      	ldr	r2, [pc, #68]	; (80013d4 <HAL_GPIO_Init+0x324>)
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	6013      	str	r3, [r2, #0]
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3301      	adds	r3, #1
 8001396:	61fb      	str	r3, [r7, #28]
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	2b0f      	cmp	r3, #15
 800139c:	f67f ae96 	bls.w	80010cc <HAL_GPIO_Init+0x1c>
 80013a0:	bf00      	nop
 80013a2:	bf00      	nop
 80013a4:	3724      	adds	r7, #36	; 0x24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40013800 	.word	0x40013800
 80013b8:	40020000 	.word	0x40020000
 80013bc:	40020400 	.word	0x40020400
 80013c0:	40020800 	.word	0x40020800
 80013c4:	40020c00 	.word	0x40020c00
 80013c8:	40021000 	.word	0x40021000
 80013cc:	40021400 	.word	0x40021400
 80013d0:	40021800 	.word	0x40021800
 80013d4:	40013c00 	.word	0x40013c00

080013d8 <HAL_GPIO_ReadPin>:
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	460b      	mov	r3, r1
 80013e2:	807b      	strh	r3, [r7, #2]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	691a      	ldr	r2, [r3, #16]
 80013e8:	887b      	ldrh	r3, [r7, #2]
 80013ea:	4013      	ands	r3, r2
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d002      	beq.n	80013f6 <HAL_GPIO_ReadPin+0x1e>
 80013f0:	2301      	movs	r3, #1
 80013f2:	73fb      	strb	r3, [r7, #15]
 80013f4:	e001      	b.n	80013fa <HAL_GPIO_ReadPin+0x22>
 80013f6:	2300      	movs	r3, #0
 80013f8:	73fb      	strb	r3, [r7, #15]
 80013fa:	7bfb      	ldrb	r3, [r7, #15]
 80013fc:	4618      	mov	r0, r3
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <HAL_GPIO_WritePin>:
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	460b      	mov	r3, r1
 8001412:	807b      	strh	r3, [r7, #2]
 8001414:	4613      	mov	r3, r2
 8001416:	707b      	strb	r3, [r7, #1]
 8001418:	787b      	ldrb	r3, [r7, #1]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <HAL_GPIO_WritePin+0x1e>
 800141e:	887a      	ldrh	r2, [r7, #2]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	619a      	str	r2, [r3, #24]
 8001424:	e003      	b.n	800142e <HAL_GPIO_WritePin+0x26>
 8001426:	887b      	ldrh	r3, [r7, #2]
 8001428:	041a      	lsls	r2, r3, #16
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	619a      	str	r2, [r3, #24]
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <HAL_PCD_Init>:
 800143a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800143c:	b08f      	sub	sp, #60	; 0x3c
 800143e:	af0a      	add	r7, sp, #40	; 0x28
 8001440:	6078      	str	r0, [r7, #4]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d101      	bne.n	800144c <HAL_PCD_Init+0x12>
 8001448:	2301      	movs	r3, #1
 800144a:	e116      	b.n	800167a <HAL_PCD_Init+0x240>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	d106      	bne.n	800146c <HAL_PCD_Init+0x32>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff fb94 	bl	8000b94 <HAL_PCD_MspInit>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2203      	movs	r2, #3
 8001470:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800147c:	2b00      	cmp	r3, #0
 800147e:	d102      	bne.n	8001486 <HAL_PCD_Init+0x4c>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	611a      	str	r2, [r3, #16]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4618      	mov	r0, r3
 800148c:	f002 fa8d 	bl	80039aa <USB_DisableGlobalInt>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	603b      	str	r3, [r7, #0]
 8001496:	687e      	ldr	r6, [r7, #4]
 8001498:	466d      	mov	r5, sp
 800149a:	f106 0410 	add.w	r4, r6, #16
 800149e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80014ae:	1d33      	adds	r3, r6, #4
 80014b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014b2:	6838      	ldr	r0, [r7, #0]
 80014b4:	f002 fa18 	bl	80038e8 <USB_CoreInit>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d005      	beq.n	80014ca <HAL_PCD_Init+0x90>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2202      	movs	r2, #2
 80014c2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 80014c6:	2301      	movs	r3, #1
 80014c8:	e0d7      	b.n	800167a <HAL_PCD_Init+0x240>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2100      	movs	r1, #0
 80014d0:	4618      	mov	r0, r3
 80014d2:	f002 fa7b 	bl	80039cc <USB_SetCurrentMode>
 80014d6:	2300      	movs	r3, #0
 80014d8:	73fb      	strb	r3, [r7, #15]
 80014da:	e04a      	b.n	8001572 <HAL_PCD_Init+0x138>
 80014dc:	7bfa      	ldrb	r2, [r7, #15]
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	4613      	mov	r3, r2
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	4413      	add	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	440b      	add	r3, r1
 80014ea:	333d      	adds	r3, #61	; 0x3d
 80014ec:	2201      	movs	r2, #1
 80014ee:	701a      	strb	r2, [r3, #0]
 80014f0:	7bfa      	ldrb	r2, [r7, #15]
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	4613      	mov	r3, r2
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	4413      	add	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	440b      	add	r3, r1
 80014fe:	333c      	adds	r3, #60	; 0x3c
 8001500:	7bfa      	ldrb	r2, [r7, #15]
 8001502:	701a      	strb	r2, [r3, #0]
 8001504:	7bfa      	ldrb	r2, [r7, #15]
 8001506:	7bfb      	ldrb	r3, [r7, #15]
 8001508:	b298      	uxth	r0, r3
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	4613      	mov	r3, r2
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	4413      	add	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	440b      	add	r3, r1
 8001516:	3344      	adds	r3, #68	; 0x44
 8001518:	4602      	mov	r2, r0
 800151a:	801a      	strh	r2, [r3, #0]
 800151c:	7bfa      	ldrb	r2, [r7, #15]
 800151e:	6879      	ldr	r1, [r7, #4]
 8001520:	4613      	mov	r3, r2
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	4413      	add	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	440b      	add	r3, r1
 800152a:	3340      	adds	r3, #64	; 0x40
 800152c:	2200      	movs	r2, #0
 800152e:	701a      	strb	r2, [r3, #0]
 8001530:	7bfa      	ldrb	r2, [r7, #15]
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	4613      	mov	r3, r2
 8001536:	00db      	lsls	r3, r3, #3
 8001538:	4413      	add	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	440b      	add	r3, r1
 800153e:	3348      	adds	r3, #72	; 0x48
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	7bfa      	ldrb	r2, [r7, #15]
 8001546:	6879      	ldr	r1, [r7, #4]
 8001548:	4613      	mov	r3, r2
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	4413      	add	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	440b      	add	r3, r1
 8001552:	334c      	adds	r3, #76	; 0x4c
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	7bfa      	ldrb	r2, [r7, #15]
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	4613      	mov	r3, r2
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	4413      	add	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	440b      	add	r3, r1
 8001566:	3354      	adds	r3, #84	; 0x54
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	7bfb      	ldrb	r3, [r7, #15]
 800156e:	3301      	adds	r3, #1
 8001570:	73fb      	strb	r3, [r7, #15]
 8001572:	7bfa      	ldrb	r2, [r7, #15]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	429a      	cmp	r2, r3
 800157a:	d3af      	bcc.n	80014dc <HAL_PCD_Init+0xa2>
 800157c:	2300      	movs	r3, #0
 800157e:	73fb      	strb	r3, [r7, #15]
 8001580:	e044      	b.n	800160c <HAL_PCD_Init+0x1d2>
 8001582:	7bfa      	ldrb	r2, [r7, #15]
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	4613      	mov	r3, r2
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	4413      	add	r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	440b      	add	r3, r1
 8001590:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001594:	2200      	movs	r2, #0
 8001596:	701a      	strb	r2, [r3, #0]
 8001598:	7bfa      	ldrb	r2, [r7, #15]
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	4613      	mov	r3, r2
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	4413      	add	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	440b      	add	r3, r1
 80015a6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80015aa:	7bfa      	ldrb	r2, [r7, #15]
 80015ac:	701a      	strb	r2, [r3, #0]
 80015ae:	7bfa      	ldrb	r2, [r7, #15]
 80015b0:	6879      	ldr	r1, [r7, #4]
 80015b2:	4613      	mov	r3, r2
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	4413      	add	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	440b      	add	r3, r1
 80015bc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80015c0:	2200      	movs	r2, #0
 80015c2:	701a      	strb	r2, [r3, #0]
 80015c4:	7bfa      	ldrb	r2, [r7, #15]
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	4613      	mov	r3, r2
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	4413      	add	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	440b      	add	r3, r1
 80015d2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	7bfa      	ldrb	r2, [r7, #15]
 80015dc:	6879      	ldr	r1, [r7, #4]
 80015de:	4613      	mov	r3, r2
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	4413      	add	r3, r2
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	440b      	add	r3, r1
 80015e8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	7bfa      	ldrb	r2, [r7, #15]
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	4613      	mov	r3, r2
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	4413      	add	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	440b      	add	r3, r1
 80015fe:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	7bfb      	ldrb	r3, [r7, #15]
 8001608:	3301      	adds	r3, #1
 800160a:	73fb      	strb	r3, [r7, #15]
 800160c:	7bfa      	ldrb	r2, [r7, #15]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	429a      	cmp	r2, r3
 8001614:	d3b5      	bcc.n	8001582 <HAL_PCD_Init+0x148>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	603b      	str	r3, [r7, #0]
 800161c:	687e      	ldr	r6, [r7, #4]
 800161e:	466d      	mov	r5, sp
 8001620:	f106 0410 	add.w	r4, r6, #16
 8001624:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001626:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001628:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800162a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800162c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001630:	e885 0003 	stmia.w	r5, {r0, r1}
 8001634:	1d33      	adds	r3, r6, #4
 8001636:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001638:	6838      	ldr	r0, [r7, #0]
 800163a:	f002 fa13 	bl	8003a64 <USB_DevInit>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d005      	beq.n	8001650 <HAL_PCD_Init+0x216>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2202      	movs	r2, #2
 8001648:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 800164c:	2301      	movs	r3, #1
 800164e:	e014      	b.n	800167a <HAL_PCD_Init+0x240>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2201      	movs	r2, #1
 800165c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001664:	2b01      	cmp	r3, #1
 8001666:	d102      	bne.n	800166e <HAL_PCD_Init+0x234>
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 f80a 	bl	8001682 <HAL_PCDEx_ActivateLPM>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f002 fbd1 	bl	8003e1a <USB_DevDisconnect>
 8001678:	2300      	movs	r3, #0
 800167a:	4618      	mov	r0, r3
 800167c:	3714      	adds	r7, #20
 800167e:	46bd      	mov	sp, r7
 8001680:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001682 <HAL_PCDEx_ActivateLPM>:
 8001682:	b480      	push	{r7}
 8001684:	b085      	sub	sp, #20
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2201      	movs	r2, #1
 8001694:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	619a      	str	r2, [r3, #24]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b4:	f043 0303 	orr.w	r3, r3, #3
 80016b8:	68fa      	ldr	r2, [r7, #12]
 80016ba:	6553      	str	r3, [r2, #84]	; 0x54
 80016bc:	2300      	movs	r3, #0
 80016be:	4618      	mov	r0, r3
 80016c0:	3714      	adds	r7, #20
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
	...

080016cc <HAL_RCC_ClockConfig>:
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d101      	bne.n	80016e0 <HAL_RCC_ClockConfig+0x14>
 80016dc:	2301      	movs	r3, #1
 80016de:	e0cc      	b.n	800187a <HAL_RCC_ClockConfig+0x1ae>
 80016e0:	4b68      	ldr	r3, [pc, #416]	; (8001884 <HAL_RCC_ClockConfig+0x1b8>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0307 	and.w	r3, r3, #7
 80016e8:	683a      	ldr	r2, [r7, #0]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d90c      	bls.n	8001708 <HAL_RCC_ClockConfig+0x3c>
 80016ee:	4b65      	ldr	r3, [pc, #404]	; (8001884 <HAL_RCC_ClockConfig+0x1b8>)
 80016f0:	683a      	ldr	r2, [r7, #0]
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	701a      	strb	r2, [r3, #0]
 80016f6:	4b63      	ldr	r3, [pc, #396]	; (8001884 <HAL_RCC_ClockConfig+0x1b8>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	429a      	cmp	r2, r3
 8001702:	d001      	beq.n	8001708 <HAL_RCC_ClockConfig+0x3c>
 8001704:	2301      	movs	r3, #1
 8001706:	e0b8      	b.n	800187a <HAL_RCC_ClockConfig+0x1ae>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d020      	beq.n	8001756 <HAL_RCC_ClockConfig+0x8a>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0304 	and.w	r3, r3, #4
 800171c:	2b00      	cmp	r3, #0
 800171e:	d005      	beq.n	800172c <HAL_RCC_ClockConfig+0x60>
 8001720:	4b59      	ldr	r3, [pc, #356]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	4a58      	ldr	r2, [pc, #352]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 8001726:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800172a:	6093      	str	r3, [r2, #8]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0308 	and.w	r3, r3, #8
 8001734:	2b00      	cmp	r3, #0
 8001736:	d005      	beq.n	8001744 <HAL_RCC_ClockConfig+0x78>
 8001738:	4b53      	ldr	r3, [pc, #332]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	4a52      	ldr	r2, [pc, #328]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 800173e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001742:	6093      	str	r3, [r2, #8]
 8001744:	4b50      	ldr	r3, [pc, #320]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	494d      	ldr	r1, [pc, #308]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 8001752:	4313      	orrs	r3, r2
 8001754:	608b      	str	r3, [r1, #8]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b00      	cmp	r3, #0
 8001760:	d044      	beq.n	80017ec <HAL_RCC_ClockConfig+0x120>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d107      	bne.n	800177a <HAL_RCC_ClockConfig+0xae>
 800176a:	4b47      	ldr	r3, [pc, #284]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d119      	bne.n	80017aa <HAL_RCC_ClockConfig+0xde>
 8001776:	2301      	movs	r3, #1
 8001778:	e07f      	b.n	800187a <HAL_RCC_ClockConfig+0x1ae>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	2b02      	cmp	r3, #2
 8001780:	d003      	beq.n	800178a <HAL_RCC_ClockConfig+0xbe>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	2b03      	cmp	r3, #3
 8001788:	d107      	bne.n	800179a <HAL_RCC_ClockConfig+0xce>
 800178a:	4b3f      	ldr	r3, [pc, #252]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d109      	bne.n	80017aa <HAL_RCC_ClockConfig+0xde>
 8001796:	2301      	movs	r3, #1
 8001798:	e06f      	b.n	800187a <HAL_RCC_ClockConfig+0x1ae>
 800179a:	4b3b      	ldr	r3, [pc, #236]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d101      	bne.n	80017aa <HAL_RCC_ClockConfig+0xde>
 80017a6:	2301      	movs	r3, #1
 80017a8:	e067      	b.n	800187a <HAL_RCC_ClockConfig+0x1ae>
 80017aa:	4b37      	ldr	r3, [pc, #220]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f023 0203 	bic.w	r2, r3, #3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	4934      	ldr	r1, [pc, #208]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 80017b8:	4313      	orrs	r3, r2
 80017ba:	608b      	str	r3, [r1, #8]
 80017bc:	f7ff fb66 	bl	8000e8c <HAL_GetTick>
 80017c0:	60f8      	str	r0, [r7, #12]
 80017c2:	e00a      	b.n	80017da <HAL_RCC_ClockConfig+0x10e>
 80017c4:	f7ff fb62 	bl	8000e8c <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_ClockConfig+0x10e>
 80017d6:	2303      	movs	r3, #3
 80017d8:	e04f      	b.n	800187a <HAL_RCC_ClockConfig+0x1ae>
 80017da:	4b2b      	ldr	r3, [pc, #172]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f003 020c 	and.w	r2, r3, #12
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d1eb      	bne.n	80017c4 <HAL_RCC_ClockConfig+0xf8>
 80017ec:	4b25      	ldr	r3, [pc, #148]	; (8001884 <HAL_RCC_ClockConfig+0x1b8>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0307 	and.w	r3, r3, #7
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d20c      	bcs.n	8001814 <HAL_RCC_ClockConfig+0x148>
 80017fa:	4b22      	ldr	r3, [pc, #136]	; (8001884 <HAL_RCC_ClockConfig+0x1b8>)
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	b2d2      	uxtb	r2, r2
 8001800:	701a      	strb	r2, [r3, #0]
 8001802:	4b20      	ldr	r3, [pc, #128]	; (8001884 <HAL_RCC_ClockConfig+0x1b8>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	429a      	cmp	r2, r3
 800180e:	d001      	beq.n	8001814 <HAL_RCC_ClockConfig+0x148>
 8001810:	2301      	movs	r3, #1
 8001812:	e032      	b.n	800187a <HAL_RCC_ClockConfig+0x1ae>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	2b00      	cmp	r3, #0
 800181e:	d008      	beq.n	8001832 <HAL_RCC_ClockConfig+0x166>
 8001820:	4b19      	ldr	r3, [pc, #100]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	4916      	ldr	r1, [pc, #88]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 800182e:	4313      	orrs	r3, r2
 8001830:	608b      	str	r3, [r1, #8]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0308 	and.w	r3, r3, #8
 800183a:	2b00      	cmp	r3, #0
 800183c:	d009      	beq.n	8001852 <HAL_RCC_ClockConfig+0x186>
 800183e:	4b12      	ldr	r3, [pc, #72]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	490e      	ldr	r1, [pc, #56]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 800184e:	4313      	orrs	r3, r2
 8001850:	608b      	str	r3, [r1, #8]
 8001852:	f000 f821 	bl	8001898 <HAL_RCC_GetSysClockFreq>
 8001856:	4602      	mov	r2, r0
 8001858:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	091b      	lsrs	r3, r3, #4
 800185e:	f003 030f 	and.w	r3, r3, #15
 8001862:	490a      	ldr	r1, [pc, #40]	; (800188c <HAL_RCC_ClockConfig+0x1c0>)
 8001864:	5ccb      	ldrb	r3, [r1, r3]
 8001866:	fa22 f303 	lsr.w	r3, r2, r3
 800186a:	4a09      	ldr	r2, [pc, #36]	; (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 800186c:	6013      	str	r3, [r2, #0]
 800186e:	4b09      	ldr	r3, [pc, #36]	; (8001894 <HAL_RCC_ClockConfig+0x1c8>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff f9fc 	bl	8000c70 <HAL_InitTick>
 8001878:	2300      	movs	r3, #0
 800187a:	4618      	mov	r0, r3
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40023c00 	.word	0x40023c00
 8001888:	40023800 	.word	0x40023800
 800188c:	08006ae0 	.word	0x08006ae0
 8001890:	20000004 	.word	0x20000004
 8001894:	20000008 	.word	0x20000008

08001898 <HAL_RCC_GetSysClockFreq>:
 8001898:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800189c:	b094      	sub	sp, #80	; 0x50
 800189e:	af00      	add	r7, sp, #0
 80018a0:	2300      	movs	r3, #0
 80018a2:	647b      	str	r3, [r7, #68]	; 0x44
 80018a4:	2300      	movs	r3, #0
 80018a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018a8:	2300      	movs	r3, #0
 80018aa:	643b      	str	r3, [r7, #64]	; 0x40
 80018ac:	2300      	movs	r3, #0
 80018ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80018b0:	4b79      	ldr	r3, [pc, #484]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x200>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f003 030c 	and.w	r3, r3, #12
 80018b8:	2b08      	cmp	r3, #8
 80018ba:	d00d      	beq.n	80018d8 <HAL_RCC_GetSysClockFreq+0x40>
 80018bc:	2b08      	cmp	r3, #8
 80018be:	f200 80e1 	bhi.w	8001a84 <HAL_RCC_GetSysClockFreq+0x1ec>
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d002      	beq.n	80018cc <HAL_RCC_GetSysClockFreq+0x34>
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	d003      	beq.n	80018d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80018ca:	e0db      	b.n	8001a84 <HAL_RCC_GetSysClockFreq+0x1ec>
 80018cc:	4b73      	ldr	r3, [pc, #460]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x204>)
 80018ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80018d0:	e0db      	b.n	8001a8a <HAL_RCC_GetSysClockFreq+0x1f2>
 80018d2:	4b73      	ldr	r3, [pc, #460]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0x208>)
 80018d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80018d6:	e0d8      	b.n	8001a8a <HAL_RCC_GetSysClockFreq+0x1f2>
 80018d8:	4b6f      	ldr	r3, [pc, #444]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x200>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018e0:	647b      	str	r3, [r7, #68]	; 0x44
 80018e2:	4b6d      	ldr	r3, [pc, #436]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x200>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d063      	beq.n	80019b6 <HAL_RCC_GetSysClockFreq+0x11e>
 80018ee:	4b6a      	ldr	r3, [pc, #424]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x200>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	099b      	lsrs	r3, r3, #6
 80018f4:	2200      	movs	r2, #0
 80018f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80018f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80018fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001900:	633b      	str	r3, [r7, #48]	; 0x30
 8001902:	2300      	movs	r3, #0
 8001904:	637b      	str	r3, [r7, #52]	; 0x34
 8001906:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800190a:	4622      	mov	r2, r4
 800190c:	462b      	mov	r3, r5
 800190e:	f04f 0000 	mov.w	r0, #0
 8001912:	f04f 0100 	mov.w	r1, #0
 8001916:	0159      	lsls	r1, r3, #5
 8001918:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800191c:	0150      	lsls	r0, r2, #5
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	4621      	mov	r1, r4
 8001924:	1a51      	subs	r1, r2, r1
 8001926:	6139      	str	r1, [r7, #16]
 8001928:	4629      	mov	r1, r5
 800192a:	eb63 0301 	sbc.w	r3, r3, r1
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	f04f 0200 	mov.w	r2, #0
 8001934:	f04f 0300 	mov.w	r3, #0
 8001938:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800193c:	4659      	mov	r1, fp
 800193e:	018b      	lsls	r3, r1, #6
 8001940:	4651      	mov	r1, sl
 8001942:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001946:	4651      	mov	r1, sl
 8001948:	018a      	lsls	r2, r1, #6
 800194a:	4651      	mov	r1, sl
 800194c:	ebb2 0801 	subs.w	r8, r2, r1
 8001950:	4659      	mov	r1, fp
 8001952:	eb63 0901 	sbc.w	r9, r3, r1
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	f04f 0300 	mov.w	r3, #0
 800195e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001962:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001966:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800196a:	4690      	mov	r8, r2
 800196c:	4699      	mov	r9, r3
 800196e:	4623      	mov	r3, r4
 8001970:	eb18 0303 	adds.w	r3, r8, r3
 8001974:	60bb      	str	r3, [r7, #8]
 8001976:	462b      	mov	r3, r5
 8001978:	eb49 0303 	adc.w	r3, r9, r3
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	f04f 0200 	mov.w	r2, #0
 8001982:	f04f 0300 	mov.w	r3, #0
 8001986:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800198a:	4629      	mov	r1, r5
 800198c:	024b      	lsls	r3, r1, #9
 800198e:	4621      	mov	r1, r4
 8001990:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001994:	4621      	mov	r1, r4
 8001996:	024a      	lsls	r2, r1, #9
 8001998:	4610      	mov	r0, r2
 800199a:	4619      	mov	r1, r3
 800199c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800199e:	2200      	movs	r2, #0
 80019a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80019a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80019a8:	f7fe fc3a 	bl	8000220 <__aeabi_uldivmod>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	4613      	mov	r3, r2
 80019b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019b4:	e058      	b.n	8001a68 <HAL_RCC_GetSysClockFreq+0x1d0>
 80019b6:	4b38      	ldr	r3, [pc, #224]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x200>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	099b      	lsrs	r3, r3, #6
 80019bc:	2200      	movs	r2, #0
 80019be:	4618      	mov	r0, r3
 80019c0:	4611      	mov	r1, r2
 80019c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80019c6:	623b      	str	r3, [r7, #32]
 80019c8:	2300      	movs	r3, #0
 80019ca:	627b      	str	r3, [r7, #36]	; 0x24
 80019cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019d0:	4642      	mov	r2, r8
 80019d2:	464b      	mov	r3, r9
 80019d4:	f04f 0000 	mov.w	r0, #0
 80019d8:	f04f 0100 	mov.w	r1, #0
 80019dc:	0159      	lsls	r1, r3, #5
 80019de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019e2:	0150      	lsls	r0, r2, #5
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	4641      	mov	r1, r8
 80019ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80019ee:	4649      	mov	r1, r9
 80019f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	f04f 0300 	mov.w	r3, #0
 80019fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a08:	ebb2 040a 	subs.w	r4, r2, sl
 8001a0c:	eb63 050b 	sbc.w	r5, r3, fp
 8001a10:	f04f 0200 	mov.w	r2, #0
 8001a14:	f04f 0300 	mov.w	r3, #0
 8001a18:	00eb      	lsls	r3, r5, #3
 8001a1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a1e:	00e2      	lsls	r2, r4, #3
 8001a20:	4614      	mov	r4, r2
 8001a22:	461d      	mov	r5, r3
 8001a24:	4643      	mov	r3, r8
 8001a26:	18e3      	adds	r3, r4, r3
 8001a28:	603b      	str	r3, [r7, #0]
 8001a2a:	464b      	mov	r3, r9
 8001a2c:	eb45 0303 	adc.w	r3, r5, r3
 8001a30:	607b      	str	r3, [r7, #4]
 8001a32:	f04f 0200 	mov.w	r2, #0
 8001a36:	f04f 0300 	mov.w	r3, #0
 8001a3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a3e:	4629      	mov	r1, r5
 8001a40:	028b      	lsls	r3, r1, #10
 8001a42:	4621      	mov	r1, r4
 8001a44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a48:	4621      	mov	r1, r4
 8001a4a:	028a      	lsls	r2, r1, #10
 8001a4c:	4610      	mov	r0, r2
 8001a4e:	4619      	mov	r1, r3
 8001a50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a52:	2200      	movs	r2, #0
 8001a54:	61bb      	str	r3, [r7, #24]
 8001a56:	61fa      	str	r2, [r7, #28]
 8001a58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a5c:	f7fe fbe0 	bl	8000220 <__aeabi_uldivmod>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4613      	mov	r3, r2
 8001a66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a68:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	0c1b      	lsrs	r3, r3, #16
 8001a6e:	f003 0303 	and.w	r3, r3, #3
 8001a72:	3301      	adds	r3, #1
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	643b      	str	r3, [r7, #64]	; 0x40
 8001a78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a80:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a82:	e002      	b.n	8001a8a <HAL_RCC_GetSysClockFreq+0x1f2>
 8001a84:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x204>)
 8001a86:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a88:	bf00      	nop
 8001a8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3750      	adds	r7, #80	; 0x50
 8001a90:	46bd      	mov	sp, r7
 8001a92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a96:	bf00      	nop
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	00f42400 	.word	0x00f42400
 8001aa0:	007a1200 	.word	0x007a1200

08001aa4 <HAL_RCC_GetHCLKFreq>:
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	4b03      	ldr	r3, [pc, #12]	; (8001ab8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	20000004 	.word	0x20000004

08001abc <HAL_RCC_GetPCLK1Freq>:
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	f7ff fff0 	bl	8001aa4 <HAL_RCC_GetHCLKFreq>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	4b05      	ldr	r3, [pc, #20]	; (8001adc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	0a9b      	lsrs	r3, r3, #10
 8001acc:	f003 0307 	and.w	r3, r3, #7
 8001ad0:	4903      	ldr	r1, [pc, #12]	; (8001ae0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ad2:	5ccb      	ldrb	r3, [r1, r3]
 8001ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ad8:	4618      	mov	r0, r3
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	08006af0 	.word	0x08006af0

08001ae4 <HAL_RCC_GetPCLK2Freq>:
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	f7ff ffdc 	bl	8001aa4 <HAL_RCC_GetHCLKFreq>
 8001aec:	4602      	mov	r2, r0
 8001aee:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	0b5b      	lsrs	r3, r3, #13
 8001af4:	f003 0307 	and.w	r3, r3, #7
 8001af8:	4903      	ldr	r1, [pc, #12]	; (8001b08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001afa:	5ccb      	ldrb	r3, [r1, r3]
 8001afc:	fa22 f303 	lsr.w	r3, r2, r3
 8001b00:	4618      	mov	r0, r3
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40023800 	.word	0x40023800
 8001b08:	08006af0 	.word	0x08006af0

08001b0c <HAL_RCC_GetClockConfig>:
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	220f      	movs	r2, #15
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <HAL_RCC_GetClockConfig+0x5c>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f003 0203 	and.w	r2, r3, #3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	605a      	str	r2, [r3, #4]
 8001b28:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <HAL_RCC_GetClockConfig+0x5c>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <HAL_RCC_GetClockConfig+0x5c>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	60da      	str	r2, [r3, #12]
 8001b40:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <HAL_RCC_GetClockConfig+0x5c>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	08db      	lsrs	r3, r3, #3
 8001b46:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	611a      	str	r2, [r3, #16]
 8001b4e:	4b07      	ldr	r3, [pc, #28]	; (8001b6c <HAL_RCC_GetClockConfig+0x60>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0207 	and.w	r2, r3, #7
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	40023c00 	.word	0x40023c00

08001b70 <HAL_RCCEx_PeriphCLKConfig>:
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b088      	sub	sp, #32
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	2300      	movs	r3, #0
 8001b7a:	61bb      	str	r3, [r7, #24]
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]
 8001b80:	2300      	movs	r3, #0
 8001b82:	613b      	str	r3, [r7, #16]
 8001b84:	2300      	movs	r3, #0
 8001b86:	61fb      	str	r3, [r7, #28]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d010      	beq.n	8001bb6 <HAL_RCCEx_PeriphCLKConfig+0x46>
 8001b94:	4b7a      	ldr	r3, [pc, #488]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001b96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b9a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	4977      	ldr	r1, [pc, #476]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <HAL_RCCEx_PeriphCLKConfig+0x46>
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	61fb      	str	r3, [r7, #28]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d010      	beq.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8001bc2:	4b6f      	ldr	r3, [pc, #444]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001bc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bc8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a1b      	ldr	r3, [r3, #32]
 8001bd0:	496b      	ldr	r1, [pc, #428]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a1b      	ldr	r3, [r3, #32]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d101      	bne.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8001be0:	2301      	movs	r3, #1
 8001be2:	61fb      	str	r3, [r7, #28]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d022      	beq.n	8001c36 <HAL_RCCEx_PeriphCLKConfig+0xc6>
 8001bf0:	4b63      	ldr	r3, [pc, #396]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001bf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bf6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bfe:	4960      	ldr	r1, [pc, #384]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001c0e:	2301      	movs	r3, #1
 8001c10:	61fb      	str	r3, [r7, #28]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c1a:	d10c      	bne.n	8001c36 <HAL_RCCEx_PeriphCLKConfig+0xc6>
 8001c1c:	4b58      	ldr	r3, [pc, #352]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001c1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c22:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	021b      	lsls	r3, r3, #8
 8001c2e:	4954      	ldr	r1, [pc, #336]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d022      	beq.n	8001c88 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8001c42:	4b4f      	ldr	r3, [pc, #316]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001c44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c48:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c50:	494b      	ldr	r1, [pc, #300]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001c52:	4313      	orrs	r3, r2
 8001c54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d101      	bne.n	8001c64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001c60:	2301      	movs	r3, #1
 8001c62:	61fb      	str	r3, [r7, #28]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c68:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001c6c:	d10c      	bne.n	8001c88 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8001c6e:	4b44      	ldr	r3, [pc, #272]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c74:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	695b      	ldr	r3, [r3, #20]
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	021b      	lsls	r3, r3, #8
 8001c80:	493f      	ldr	r1, [pc, #252]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0308 	and.w	r3, r3, #8
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f000 808a 	beq.w	8001daa <HAL_RCCEx_PeriphCLKConfig+0x23a>
 8001c96:	2300      	movs	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	4b39      	ldr	r3, [pc, #228]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	4a38      	ldr	r2, [pc, #224]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca6:	4b36      	ldr	r3, [pc, #216]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	4b34      	ldr	r3, [pc, #208]	; (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a33      	ldr	r2, [pc, #204]	; (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8001cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cbc:	6013      	str	r3, [r2, #0]
 8001cbe:	f7ff f8e5 	bl	8000e8c <HAL_GetTick>
 8001cc2:	61b8      	str	r0, [r7, #24]
 8001cc4:	e008      	b.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8001cc6:	f7ff f8e1 	bl	8000e8c <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e1d1      	b.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8001cd8:	4b2a      	ldr	r3, [pc, #168]	; (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d0f0      	beq.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x156>
 8001ce4:	4b26      	ldr	r3, [pc, #152]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cec:	617b      	str	r3, [r7, #20]
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d02f      	beq.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cfc:	697a      	ldr	r2, [r7, #20]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d028      	beq.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8001d02:	4b1f      	ldr	r3, [pc, #124]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d0a:	617b      	str	r3, [r7, #20]
 8001d0c:	4b1e      	ldr	r3, [pc, #120]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8001d0e:	2201      	movs	r2, #1
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	4b1d      	ldr	r3, [pc, #116]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	4a19      	ldr	r2, [pc, #100]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d1e:	4b18      	ldr	r3, [pc, #96]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d114      	bne.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8001d2a:	f7ff f8af 	bl	8000e8c <HAL_GetTick>
 8001d2e:	61b8      	str	r0, [r7, #24]
 8001d30:	e00a      	b.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8001d32:	f7ff f8ab 	bl	8000e8c <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8001d44:	2303      	movs	r3, #3
 8001d46:	e199      	b.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8001d48:	4b0d      	ldr	r3, [pc, #52]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d0ee      	beq.n	8001d32 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001d60:	d114      	bne.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8001d62:	4b07      	ldr	r3, [pc, #28]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001d72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d76:	4902      	ldr	r1, [pc, #8]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	608b      	str	r3, [r1, #8]
 8001d7c:	e00c      	b.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8001d7e:	bf00      	nop
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40007000 	.word	0x40007000
 8001d88:	42470e40 	.word	0x42470e40
 8001d8c:	4b89      	ldr	r3, [pc, #548]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	4a88      	ldr	r2, [pc, #544]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001d92:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001d96:	6093      	str	r3, [r2, #8]
 8001d98:	4b86      	ldr	r3, [pc, #536]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001d9a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001da4:	4983      	ldr	r1, [pc, #524]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	670b      	str	r3, [r1, #112]	; 0x70
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0304 	and.w	r3, r3, #4
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d004      	beq.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x250>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8001dbc:	4b7e      	ldr	r3, [pc, #504]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0310 	and.w	r3, r3, #16
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d00a      	beq.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8001dcc:	4b79      	ldr	r3, [pc, #484]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dd2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dda:	4976      	ldr	r1, [pc, #472]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0320 	and.w	r3, r3, #32
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d011      	beq.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 8001dee:	4b71      	ldr	r3, [pc, #452]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001df0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001df4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfc:	496d      	ldr	r1, [pc, #436]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e0c:	d101      	bne.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 8001e0e:	2301      	movs	r3, #1
 8001e10:	61fb      	str	r3, [r7, #28]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d00a      	beq.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8001e1e:	4b65      	ldr	r3, [pc, #404]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001e20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e24:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2c:	4961      	ldr	r1, [pc, #388]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d004      	beq.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2b80      	cmp	r3, #128	; 0x80
 8001e40:	f040 80c6 	bne.w	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8001e44:	4b5d      	ldr	r3, [pc, #372]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	f7ff f81f 	bl	8000e8c <HAL_GetTick>
 8001e4e:	61b8      	str	r0, [r7, #24]
 8001e50:	e008      	b.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8001e52:	f7ff f81b 	bl	8000e8c <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8001e60:	2303      	movs	r3, #3
 8001e62:	e10b      	b.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8001e64:	4b53      	ldr	r3, [pc, #332]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1f0      	bne.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8001e70:	4a53      	ldr	r2, [pc, #332]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e76:	6013      	str	r3, [r2, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	69db      	ldr	r3, [r3, #28]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d023      	beq.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d003      	beq.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d019      	beq.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0320 	and.w	r3, r3, #32
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d004      	beq.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x346>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001eb4:	d00e      	beq.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d019      	beq.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d115      	bne.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001ed2:	d110      	bne.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	019b      	lsls	r3, r3, #6
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	061b      	lsls	r3, r3, #24
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	071b      	lsls	r3, r3, #28
 8001eee:	4931      	ldr	r1, [pc, #196]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d009      	beq.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d026      	beq.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d122      	bne.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8001f1e:	4b25      	ldr	r3, [pc, #148]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001f20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f24:	0e1b      	lsrs	r3, r3, #24
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	613b      	str	r3, [r7, #16]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	019b      	lsls	r3, r3, #6
 8001f36:	431a      	orrs	r2, r3
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	061b      	lsls	r3, r3, #24
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	071b      	lsls	r3, r3, #28
 8001f44:	491b      	ldr	r1, [pc, #108]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 8001f4c:	4b19      	ldr	r3, [pc, #100]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001f4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f52:	f023 021f 	bic.w	r2, r3, #31
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	4915      	ldr	r1, [pc, #84]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d010      	beq.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x422>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	019b      	lsls	r3, r3, #6
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	061b      	lsls	r3, r3, #24
 8001f82:	431a      	orrs	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	071b      	lsls	r3, r3, #28
 8001f8a:	490a      	ldr	r1, [pc, #40]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 8001f92:	4b0a      	ldr	r3, [pc, #40]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8001f94:	2201      	movs	r2, #1
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	f7fe ff78 	bl	8000e8c <HAL_GetTick>
 8001f9c:	61b8      	str	r0, [r7, #24]
 8001f9e:	e011      	b.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x454>
 8001fa0:	f7fe ff74 	bl	8000e8c <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d90a      	bls.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x454>
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e064      	b.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8001fb2:	bf00      	nop
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	424711e0 	.word	0x424711e0
 8001fbc:	42470068 	.word	0x42470068
 8001fc0:	424710d8 	.word	0x424710d8
 8001fc4:	4b2f      	ldr	r3, [pc, #188]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d0e7      	beq.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d00a      	beq.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8001fdc:	4b29      	ldr	r3, [pc, #164]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001fde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fe2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fea:	4926      	ldr	r1, [pc, #152]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00a      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8001ffe:	4b21      	ldr	r3, [pc, #132]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002000:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002004:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800200c:	491d      	ldr	r1, [pc, #116]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800200e:	4313      	orrs	r3, r2
 8002010:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00a      	beq.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8002020:	4b18      	ldr	r3, [pc, #96]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002022:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002026:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800202e:	4915      	ldr	r1, [pc, #84]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002030:	4313      	orrs	r3, r2
 8002032:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00a      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
 8002042:	4b10      	ldr	r3, [pc, #64]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002044:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002048:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002050:	490c      	ldr	r1, [pc, #48]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002052:	4313      	orrs	r3, r2
 8002054:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00a      	beq.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8002064:	4b07      	ldr	r3, [pc, #28]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002066:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800206a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002072:	4904      	ldr	r1, [pc, #16]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002074:	4313      	orrs	r3, r2
 8002076:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
 800207a:	2300      	movs	r3, #0
 800207c:	4618      	mov	r0, r3
 800207e:	3720      	adds	r7, #32
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40023800 	.word	0x40023800

08002088 <HAL_RCC_OscConfig>:
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_RCC_OscConfig+0x12>
 8002096:	2301      	movs	r3, #1
 8002098:	e273      	b.n	8002582 <HAL_RCC_OscConfig+0x4fa>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d075      	beq.n	8002192 <HAL_RCC_OscConfig+0x10a>
 80020a6:	4b88      	ldr	r3, [pc, #544]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 030c 	and.w	r3, r3, #12
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	d00c      	beq.n	80020cc <HAL_RCC_OscConfig+0x44>
 80020b2:	4b85      	ldr	r3, [pc, #532]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f003 030c 	and.w	r3, r3, #12
 80020ba:	2b08      	cmp	r3, #8
 80020bc:	d112      	bne.n	80020e4 <HAL_RCC_OscConfig+0x5c>
 80020be:	4b82      	ldr	r3, [pc, #520]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020ca:	d10b      	bne.n	80020e4 <HAL_RCC_OscConfig+0x5c>
 80020cc:	4b7e      	ldr	r3, [pc, #504]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d05b      	beq.n	8002190 <HAL_RCC_OscConfig+0x108>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d157      	bne.n	8002190 <HAL_RCC_OscConfig+0x108>
 80020e0:	2301      	movs	r3, #1
 80020e2:	e24e      	b.n	8002582 <HAL_RCC_OscConfig+0x4fa>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ec:	d106      	bne.n	80020fc <HAL_RCC_OscConfig+0x74>
 80020ee:	4b76      	ldr	r3, [pc, #472]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a75      	ldr	r2, [pc, #468]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 80020f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f8:	6013      	str	r3, [r2, #0]
 80020fa:	e01d      	b.n	8002138 <HAL_RCC_OscConfig+0xb0>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002104:	d10c      	bne.n	8002120 <HAL_RCC_OscConfig+0x98>
 8002106:	4b70      	ldr	r3, [pc, #448]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a6f      	ldr	r2, [pc, #444]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 800210c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002110:	6013      	str	r3, [r2, #0]
 8002112:	4b6d      	ldr	r3, [pc, #436]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a6c      	ldr	r2, [pc, #432]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 8002118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	e00b      	b.n	8002138 <HAL_RCC_OscConfig+0xb0>
 8002120:	4b69      	ldr	r3, [pc, #420]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a68      	ldr	r2, [pc, #416]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 8002126:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800212a:	6013      	str	r3, [r2, #0]
 800212c:	4b66      	ldr	r3, [pc, #408]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a65      	ldr	r2, [pc, #404]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 8002132:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002136:	6013      	str	r3, [r2, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d013      	beq.n	8002168 <HAL_RCC_OscConfig+0xe0>
 8002140:	f7fe fea4 	bl	8000e8c <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0xd2>
 8002148:	f7fe fea0 	bl	8000e8c <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b64      	cmp	r3, #100	; 0x64
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0xd2>
 8002156:	2303      	movs	r3, #3
 8002158:	e213      	b.n	8002582 <HAL_RCC_OscConfig+0x4fa>
 800215a:	4b5b      	ldr	r3, [pc, #364]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0f0      	beq.n	8002148 <HAL_RCC_OscConfig+0xc0>
 8002166:	e014      	b.n	8002192 <HAL_RCC_OscConfig+0x10a>
 8002168:	f7fe fe90 	bl	8000e8c <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0xfa>
 8002170:	f7fe fe8c 	bl	8000e8c <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b64      	cmp	r3, #100	; 0x64
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0xfa>
 800217e:	2303      	movs	r3, #3
 8002180:	e1ff      	b.n	8002582 <HAL_RCC_OscConfig+0x4fa>
 8002182:	4b51      	ldr	r3, [pc, #324]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1f0      	bne.n	8002170 <HAL_RCC_OscConfig+0xe8>
 800218e:	e000      	b.n	8002192 <HAL_RCC_OscConfig+0x10a>
 8002190:	bf00      	nop
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d063      	beq.n	8002266 <HAL_RCC_OscConfig+0x1de>
 800219e:	4b4a      	ldr	r3, [pc, #296]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f003 030c 	and.w	r3, r3, #12
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00b      	beq.n	80021c2 <HAL_RCC_OscConfig+0x13a>
 80021aa:	4b47      	ldr	r3, [pc, #284]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 030c 	and.w	r3, r3, #12
 80021b2:	2b08      	cmp	r3, #8
 80021b4:	d11c      	bne.n	80021f0 <HAL_RCC_OscConfig+0x168>
 80021b6:	4b44      	ldr	r3, [pc, #272]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d116      	bne.n	80021f0 <HAL_RCC_OscConfig+0x168>
 80021c2:	4b41      	ldr	r3, [pc, #260]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d005      	beq.n	80021da <HAL_RCC_OscConfig+0x152>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d001      	beq.n	80021da <HAL_RCC_OscConfig+0x152>
 80021d6:	2301      	movs	r3, #1
 80021d8:	e1d3      	b.n	8002582 <HAL_RCC_OscConfig+0x4fa>
 80021da:	4b3b      	ldr	r3, [pc, #236]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	4937      	ldr	r1, [pc, #220]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	600b      	str	r3, [r1, #0]
 80021ee:	e03a      	b.n	8002266 <HAL_RCC_OscConfig+0x1de>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d020      	beq.n	800223a <HAL_RCC_OscConfig+0x1b2>
 80021f8:	4b34      	ldr	r3, [pc, #208]	; (80022cc <HAL_RCC_OscConfig+0x244>)
 80021fa:	2201      	movs	r2, #1
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	f7fe fe45 	bl	8000e8c <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]
 8002204:	e008      	b.n	8002218 <HAL_RCC_OscConfig+0x190>
 8002206:	f7fe fe41 	bl	8000e8c <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x190>
 8002214:	2303      	movs	r3, #3
 8002216:	e1b4      	b.n	8002582 <HAL_RCC_OscConfig+0x4fa>
 8002218:	4b2b      	ldr	r3, [pc, #172]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d0f0      	beq.n	8002206 <HAL_RCC_OscConfig+0x17e>
 8002224:	4b28      	ldr	r3, [pc, #160]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	4925      	ldr	r1, [pc, #148]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 8002234:	4313      	orrs	r3, r2
 8002236:	600b      	str	r3, [r1, #0]
 8002238:	e015      	b.n	8002266 <HAL_RCC_OscConfig+0x1de>
 800223a:	4b24      	ldr	r3, [pc, #144]	; (80022cc <HAL_RCC_OscConfig+0x244>)
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	f7fe fe24 	bl	8000e8c <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0x1d2>
 8002248:	f7fe fe20 	bl	8000e8c <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x1d2>
 8002256:	2303      	movs	r3, #3
 8002258:	e193      	b.n	8002582 <HAL_RCC_OscConfig+0x4fa>
 800225a:	4b1b      	ldr	r3, [pc, #108]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1f0      	bne.n	8002248 <HAL_RCC_OscConfig+0x1c0>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0308 	and.w	r3, r3, #8
 800226e:	2b00      	cmp	r3, #0
 8002270:	d036      	beq.n	80022e0 <HAL_RCC_OscConfig+0x258>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d016      	beq.n	80022a8 <HAL_RCC_OscConfig+0x220>
 800227a:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <HAL_RCC_OscConfig+0x248>)
 800227c:	2201      	movs	r2, #1
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	f7fe fe04 	bl	8000e8c <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x212>
 8002288:	f7fe fe00 	bl	8000e8c <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x212>
 8002296:	2303      	movs	r3, #3
 8002298:	e173      	b.n	8002582 <HAL_RCC_OscConfig+0x4fa>
 800229a:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 800229c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d0f0      	beq.n	8002288 <HAL_RCC_OscConfig+0x200>
 80022a6:	e01b      	b.n	80022e0 <HAL_RCC_OscConfig+0x258>
 80022a8:	4b09      	ldr	r3, [pc, #36]	; (80022d0 <HAL_RCC_OscConfig+0x248>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	f7fe fded 	bl	8000e8c <HAL_GetTick>
 80022b2:	6138      	str	r0, [r7, #16]
 80022b4:	e00e      	b.n	80022d4 <HAL_RCC_OscConfig+0x24c>
 80022b6:	f7fe fde9 	bl	8000e8c <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d907      	bls.n	80022d4 <HAL_RCC_OscConfig+0x24c>
 80022c4:	2303      	movs	r3, #3
 80022c6:	e15c      	b.n	8002582 <HAL_RCC_OscConfig+0x4fa>
 80022c8:	40023800 	.word	0x40023800
 80022cc:	42470000 	.word	0x42470000
 80022d0:	42470e80 	.word	0x42470e80
 80022d4:	4b8a      	ldr	r3, [pc, #552]	; (8002500 <HAL_RCC_OscConfig+0x478>)
 80022d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1ea      	bne.n	80022b6 <HAL_RCC_OscConfig+0x22e>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f000 8097 	beq.w	800241c <HAL_RCC_OscConfig+0x394>
 80022ee:	2300      	movs	r3, #0
 80022f0:	75fb      	strb	r3, [r7, #23]
 80022f2:	4b83      	ldr	r3, [pc, #524]	; (8002500 <HAL_RCC_OscConfig+0x478>)
 80022f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10f      	bne.n	800231e <HAL_RCC_OscConfig+0x296>
 80022fe:	2300      	movs	r3, #0
 8002300:	60bb      	str	r3, [r7, #8]
 8002302:	4b7f      	ldr	r3, [pc, #508]	; (8002500 <HAL_RCC_OscConfig+0x478>)
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	4a7e      	ldr	r2, [pc, #504]	; (8002500 <HAL_RCC_OscConfig+0x478>)
 8002308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800230c:	6413      	str	r3, [r2, #64]	; 0x40
 800230e:	4b7c      	ldr	r3, [pc, #496]	; (8002500 <HAL_RCC_OscConfig+0x478>)
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002316:	60bb      	str	r3, [r7, #8]
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	2301      	movs	r3, #1
 800231c:	75fb      	strb	r3, [r7, #23]
 800231e:	4b79      	ldr	r3, [pc, #484]	; (8002504 <HAL_RCC_OscConfig+0x47c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002326:	2b00      	cmp	r3, #0
 8002328:	d118      	bne.n	800235c <HAL_RCC_OscConfig+0x2d4>
 800232a:	4b76      	ldr	r3, [pc, #472]	; (8002504 <HAL_RCC_OscConfig+0x47c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a75      	ldr	r2, [pc, #468]	; (8002504 <HAL_RCC_OscConfig+0x47c>)
 8002330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002334:	6013      	str	r3, [r2, #0]
 8002336:	f7fe fda9 	bl	8000e8c <HAL_GetTick>
 800233a:	6138      	str	r0, [r7, #16]
 800233c:	e008      	b.n	8002350 <HAL_RCC_OscConfig+0x2c8>
 800233e:	f7fe fda5 	bl	8000e8c <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x2c8>
 800234c:	2303      	movs	r3, #3
 800234e:	e118      	b.n	8002582 <HAL_RCC_OscConfig+0x4fa>
 8002350:	4b6c      	ldr	r3, [pc, #432]	; (8002504 <HAL_RCC_OscConfig+0x47c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002358:	2b00      	cmp	r3, #0
 800235a:	d0f0      	beq.n	800233e <HAL_RCC_OscConfig+0x2b6>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d106      	bne.n	8002372 <HAL_RCC_OscConfig+0x2ea>
 8002364:	4b66      	ldr	r3, [pc, #408]	; (8002500 <HAL_RCC_OscConfig+0x478>)
 8002366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002368:	4a65      	ldr	r2, [pc, #404]	; (8002500 <HAL_RCC_OscConfig+0x478>)
 800236a:	f043 0301 	orr.w	r3, r3, #1
 800236e:	6713      	str	r3, [r2, #112]	; 0x70
 8002370:	e01c      	b.n	80023ac <HAL_RCC_OscConfig+0x324>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	2b05      	cmp	r3, #5
 8002378:	d10c      	bne.n	8002394 <HAL_RCC_OscConfig+0x30c>
 800237a:	4b61      	ldr	r3, [pc, #388]	; (8002500 <HAL_RCC_OscConfig+0x478>)
 800237c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800237e:	4a60      	ldr	r2, [pc, #384]	; (8002500 <HAL_RCC_OscConfig+0x478>)
 8002380:	f043 0304 	orr.w	r3, r3, #4
 8002384:	6713      	str	r3, [r2, #112]	; 0x70
 8002386:	4b5e      	ldr	r3, [pc, #376]	; (8002500 <HAL_RCC_OscConfig+0x478>)
 8002388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800238a:	4a5d      	ldr	r2, [pc, #372]	; (8002500 <HAL_RCC_OscConfig+0x478>)
 800238c:	f043 0301 	orr.w	r3, r3, #1
 8002390:	6713      	str	r3, [r2, #112]	; 0x70
 8002392:	e00b      	b.n	80023ac <HAL_RCC_OscConfig+0x324>
 8002394:	4b5a      	ldr	r3, [pc, #360]	; (8002500 <HAL_RCC_OscConfig+0x478>)
 8002396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002398:	4a59      	ldr	r2, [pc, #356]	; (8002500 <HAL_RCC_OscConfig+0x478>)
 800239a:	f023 0301 	bic.w	r3, r3, #1
 800239e:	6713      	str	r3, [r2, #112]	; 0x70
 80023a0:	4b57      	ldr	r3, [pc, #348]	; (8002500 <HAL_RCC_OscConfig+0x478>)
 80023a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a4:	4a56      	ldr	r2, [pc, #344]	; (8002500 <HAL_RCC_OscConfig+0x478>)
 80023a6:	f023 0304 	bic.w	r3, r3, #4
 80023aa:	6713      	str	r3, [r2, #112]	; 0x70
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d015      	beq.n	80023e0 <HAL_RCC_OscConfig+0x358>
 80023b4:	f7fe fd6a 	bl	8000e8c <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]
 80023ba:	e00a      	b.n	80023d2 <HAL_RCC_OscConfig+0x34a>
 80023bc:	f7fe fd66 	bl	8000e8c <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x34a>
 80023ce:	2303      	movs	r3, #3
 80023d0:	e0d7      	b.n	8002582 <HAL_RCC_OscConfig+0x4fa>
 80023d2:	4b4b      	ldr	r3, [pc, #300]	; (8002500 <HAL_RCC_OscConfig+0x478>)
 80023d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0ee      	beq.n	80023bc <HAL_RCC_OscConfig+0x334>
 80023de:	e014      	b.n	800240a <HAL_RCC_OscConfig+0x382>
 80023e0:	f7fe fd54 	bl	8000e8c <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]
 80023e6:	e00a      	b.n	80023fe <HAL_RCC_OscConfig+0x376>
 80023e8:	f7fe fd50 	bl	8000e8c <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0x376>
 80023fa:	2303      	movs	r3, #3
 80023fc:	e0c1      	b.n	8002582 <HAL_RCC_OscConfig+0x4fa>
 80023fe:	4b40      	ldr	r3, [pc, #256]	; (8002500 <HAL_RCC_OscConfig+0x478>)
 8002400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1ee      	bne.n	80023e8 <HAL_RCC_OscConfig+0x360>
 800240a:	7dfb      	ldrb	r3, [r7, #23]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d105      	bne.n	800241c <HAL_RCC_OscConfig+0x394>
 8002410:	4b3b      	ldr	r3, [pc, #236]	; (8002500 <HAL_RCC_OscConfig+0x478>)
 8002412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002414:	4a3a      	ldr	r2, [pc, #232]	; (8002500 <HAL_RCC_OscConfig+0x478>)
 8002416:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800241a:	6413      	str	r3, [r2, #64]	; 0x40
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	2b00      	cmp	r3, #0
 8002422:	f000 80ad 	beq.w	8002580 <HAL_RCC_OscConfig+0x4f8>
 8002426:	4b36      	ldr	r3, [pc, #216]	; (8002500 <HAL_RCC_OscConfig+0x478>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 030c 	and.w	r3, r3, #12
 800242e:	2b08      	cmp	r3, #8
 8002430:	d060      	beq.n	80024f4 <HAL_RCC_OscConfig+0x46c>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	2b02      	cmp	r3, #2
 8002438:	d145      	bne.n	80024c6 <HAL_RCC_OscConfig+0x43e>
 800243a:	4b33      	ldr	r3, [pc, #204]	; (8002508 <HAL_RCC_OscConfig+0x480>)
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	f7fe fd24 	bl	8000e8c <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x3d2>
 8002448:	f7fe fd20 	bl	8000e8c <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x3d2>
 8002456:	2303      	movs	r3, #3
 8002458:	e093      	b.n	8002582 <HAL_RCC_OscConfig+0x4fa>
 800245a:	4b29      	ldr	r3, [pc, #164]	; (8002500 <HAL_RCC_OscConfig+0x478>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f0      	bne.n	8002448 <HAL_RCC_OscConfig+0x3c0>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	69da      	ldr	r2, [r3, #28]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a1b      	ldr	r3, [r3, #32]
 800246e:	431a      	orrs	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002474:	019b      	lsls	r3, r3, #6
 8002476:	431a      	orrs	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247c:	085b      	lsrs	r3, r3, #1
 800247e:	3b01      	subs	r3, #1
 8002480:	041b      	lsls	r3, r3, #16
 8002482:	431a      	orrs	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002488:	061b      	lsls	r3, r3, #24
 800248a:	431a      	orrs	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002490:	071b      	lsls	r3, r3, #28
 8002492:	491b      	ldr	r1, [pc, #108]	; (8002500 <HAL_RCC_OscConfig+0x478>)
 8002494:	4313      	orrs	r3, r2
 8002496:	604b      	str	r3, [r1, #4]
 8002498:	4b1b      	ldr	r3, [pc, #108]	; (8002508 <HAL_RCC_OscConfig+0x480>)
 800249a:	2201      	movs	r2, #1
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	f7fe fcf5 	bl	8000e8c <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x430>
 80024a6:	f7fe fcf1 	bl	8000e8c <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x430>
 80024b4:	2303      	movs	r3, #3
 80024b6:	e064      	b.n	8002582 <HAL_RCC_OscConfig+0x4fa>
 80024b8:	4b11      	ldr	r3, [pc, #68]	; (8002500 <HAL_RCC_OscConfig+0x478>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0f0      	beq.n	80024a6 <HAL_RCC_OscConfig+0x41e>
 80024c4:	e05c      	b.n	8002580 <HAL_RCC_OscConfig+0x4f8>
 80024c6:	4b10      	ldr	r3, [pc, #64]	; (8002508 <HAL_RCC_OscConfig+0x480>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	f7fe fcde 	bl	8000e8c <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x45e>
 80024d4:	f7fe fcda 	bl	8000e8c <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x45e>
 80024e2:	2303      	movs	r3, #3
 80024e4:	e04d      	b.n	8002582 <HAL_RCC_OscConfig+0x4fa>
 80024e6:	4b06      	ldr	r3, [pc, #24]	; (8002500 <HAL_RCC_OscConfig+0x478>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1f0      	bne.n	80024d4 <HAL_RCC_OscConfig+0x44c>
 80024f2:	e045      	b.n	8002580 <HAL_RCC_OscConfig+0x4f8>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d107      	bne.n	800250c <HAL_RCC_OscConfig+0x484>
 80024fc:	2301      	movs	r3, #1
 80024fe:	e040      	b.n	8002582 <HAL_RCC_OscConfig+0x4fa>
 8002500:	40023800 	.word	0x40023800
 8002504:	40007000 	.word	0x40007000
 8002508:	42470060 	.word	0x42470060
 800250c:	4b1f      	ldr	r3, [pc, #124]	; (800258c <HAL_RCC_OscConfig+0x504>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	60fb      	str	r3, [r7, #12]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d030      	beq.n	800257c <HAL_RCC_OscConfig+0x4f4>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	69db      	ldr	r3, [r3, #28]
 8002524:	429a      	cmp	r2, r3
 8002526:	d129      	bne.n	800257c <HAL_RCC_OscConfig+0x4f4>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a1b      	ldr	r3, [r3, #32]
 8002532:	429a      	cmp	r2, r3
 8002534:	d122      	bne.n	800257c <HAL_RCC_OscConfig+0x4f4>
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800253c:	4013      	ands	r3, r2
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002542:	0192      	lsls	r2, r2, #6
 8002544:	4293      	cmp	r3, r2
 8002546:	d119      	bne.n	800257c <HAL_RCC_OscConfig+0x4f4>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002552:	085b      	lsrs	r3, r3, #1
 8002554:	3b01      	subs	r3, #1
 8002556:	041b      	lsls	r3, r3, #16
 8002558:	429a      	cmp	r2, r3
 800255a:	d10f      	bne.n	800257c <HAL_RCC_OscConfig+0x4f4>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002566:	061b      	lsls	r3, r3, #24
 8002568:	429a      	cmp	r2, r3
 800256a:	d107      	bne.n	800257c <HAL_RCC_OscConfig+0x4f4>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	071b      	lsls	r3, r3, #28
 8002578:	429a      	cmp	r2, r3
 800257a:	d001      	beq.n	8002580 <HAL_RCC_OscConfig+0x4f8>
 800257c:	2301      	movs	r3, #1
 800257e:	e000      	b.n	8002582 <HAL_RCC_OscConfig+0x4fa>
 8002580:	2300      	movs	r3, #0
 8002582:	4618      	mov	r0, r3
 8002584:	3718      	adds	r7, #24
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	40023800 	.word	0x40023800

08002590 <HAL_TIM_Base_Init>:
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_TIM_Base_Init+0x12>
 800259e:	2301      	movs	r3, #1
 80025a0:	e041      	b.n	8002626 <HAL_TIM_Base_Init+0x96>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d106      	bne.n	80025bc <HAL_TIM_Base_Init+0x2c>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f839 	bl	800262e <HAL_TIM_Base_MspInit>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2202      	movs	r2, #2
 80025c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3304      	adds	r3, #4
 80025cc:	4619      	mov	r1, r3
 80025ce:	4610      	mov	r0, r2
 80025d0:	f000 fbb2 	bl	8002d38 <TIM_Base_SetConfig>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002624:	2300      	movs	r3, #0
 8002626:	4618      	mov	r0, r3
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_TIM_Base_MspInit>:
 800262e:	b480      	push	{r7}
 8002630:	b083      	sub	sp, #12
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
	...

08002644 <HAL_TIM_Base_Start_IT>:
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b01      	cmp	r3, #1
 8002656:	d001      	beq.n	800265c <HAL_TIM_Base_Start_IT+0x18>
 8002658:	2301      	movs	r3, #1
 800265a:	e04e      	b.n	80026fa <HAL_TIM_Base_Start_IT+0xb6>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2202      	movs	r2, #2
 8002660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68da      	ldr	r2, [r3, #12]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f042 0201 	orr.w	r2, r2, #1
 8002672:	60da      	str	r2, [r3, #12]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a23      	ldr	r2, [pc, #140]	; (8002708 <HAL_TIM_Base_Start_IT+0xc4>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d022      	beq.n	80026c4 <HAL_TIM_Base_Start_IT+0x80>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002686:	d01d      	beq.n	80026c4 <HAL_TIM_Base_Start_IT+0x80>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a1f      	ldr	r2, [pc, #124]	; (800270c <HAL_TIM_Base_Start_IT+0xc8>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d018      	beq.n	80026c4 <HAL_TIM_Base_Start_IT+0x80>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a1e      	ldr	r2, [pc, #120]	; (8002710 <HAL_TIM_Base_Start_IT+0xcc>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d013      	beq.n	80026c4 <HAL_TIM_Base_Start_IT+0x80>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a1c      	ldr	r2, [pc, #112]	; (8002714 <HAL_TIM_Base_Start_IT+0xd0>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d00e      	beq.n	80026c4 <HAL_TIM_Base_Start_IT+0x80>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a1b      	ldr	r2, [pc, #108]	; (8002718 <HAL_TIM_Base_Start_IT+0xd4>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d009      	beq.n	80026c4 <HAL_TIM_Base_Start_IT+0x80>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a19      	ldr	r2, [pc, #100]	; (800271c <HAL_TIM_Base_Start_IT+0xd8>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d004      	beq.n	80026c4 <HAL_TIM_Base_Start_IT+0x80>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a18      	ldr	r2, [pc, #96]	; (8002720 <HAL_TIM_Base_Start_IT+0xdc>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d111      	bne.n	80026e8 <HAL_TIM_Base_Start_IT+0xa4>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 0307 	and.w	r3, r3, #7
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2b06      	cmp	r3, #6
 80026d4:	d010      	beq.n	80026f8 <HAL_TIM_Base_Start_IT+0xb4>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f042 0201 	orr.w	r2, r2, #1
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	e007      	b.n	80026f8 <HAL_TIM_Base_Start_IT+0xb4>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f042 0201 	orr.w	r2, r2, #1
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	2300      	movs	r3, #0
 80026fa:	4618      	mov	r0, r3
 80026fc:	3714      	adds	r7, #20
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	40010000 	.word	0x40010000
 800270c:	40000400 	.word	0x40000400
 8002710:	40000800 	.word	0x40000800
 8002714:	40000c00 	.word	0x40000c00
 8002718:	40010400 	.word	0x40010400
 800271c:	40014000 	.word	0x40014000
 8002720:	40001800 	.word	0x40001800

08002724 <HAL_TIM_PWM_Init>:
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_TIM_PWM_Init+0x12>
 8002732:	2301      	movs	r3, #1
 8002734:	e041      	b.n	80027ba <HAL_TIM_PWM_Init+0x96>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d106      	bne.n	8002750 <HAL_TIM_PWM_Init+0x2c>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7fe f97e 	bl	8000a4c <HAL_TIM_PWM_MspInit>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2202      	movs	r2, #2
 8002754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	3304      	adds	r3, #4
 8002760:	4619      	mov	r1, r3
 8002762:	4610      	mov	r0, r2
 8002764:	f000 fae8 	bl	8002d38 <TIM_Base_SetConfig>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80027b8:	2300      	movs	r3, #0
 80027ba:	4618      	mov	r0, r3
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
	...

080027c4 <HAL_TIM_PWM_Start>:
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d109      	bne.n	80027e8 <HAL_TIM_PWM_Start+0x24>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b01      	cmp	r3, #1
 80027de:	bf14      	ite	ne
 80027e0:	2301      	movne	r3, #1
 80027e2:	2300      	moveq	r3, #0
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	e022      	b.n	800282e <HAL_TIM_PWM_Start+0x6a>
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	d109      	bne.n	8002802 <HAL_TIM_PWM_Start+0x3e>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	bf14      	ite	ne
 80027fa:	2301      	movne	r3, #1
 80027fc:	2300      	moveq	r3, #0
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	e015      	b.n	800282e <HAL_TIM_PWM_Start+0x6a>
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	2b08      	cmp	r3, #8
 8002806:	d109      	bne.n	800281c <HAL_TIM_PWM_Start+0x58>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800280e:	b2db      	uxtb	r3, r3
 8002810:	2b01      	cmp	r3, #1
 8002812:	bf14      	ite	ne
 8002814:	2301      	movne	r3, #1
 8002816:	2300      	moveq	r3, #0
 8002818:	b2db      	uxtb	r3, r3
 800281a:	e008      	b.n	800282e <HAL_TIM_PWM_Start+0x6a>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b01      	cmp	r3, #1
 8002826:	bf14      	ite	ne
 8002828:	2301      	movne	r3, #1
 800282a:	2300      	moveq	r3, #0
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <HAL_TIM_PWM_Start+0x72>
 8002832:	2301      	movs	r3, #1
 8002834:	e07c      	b.n	8002930 <HAL_TIM_PWM_Start+0x16c>
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d104      	bne.n	8002846 <HAL_TIM_PWM_Start+0x82>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2202      	movs	r2, #2
 8002840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002844:	e013      	b.n	800286e <HAL_TIM_PWM_Start+0xaa>
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	2b04      	cmp	r3, #4
 800284a:	d104      	bne.n	8002856 <HAL_TIM_PWM_Start+0x92>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2202      	movs	r2, #2
 8002850:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002854:	e00b      	b.n	800286e <HAL_TIM_PWM_Start+0xaa>
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	2b08      	cmp	r3, #8
 800285a:	d104      	bne.n	8002866 <HAL_TIM_PWM_Start+0xa2>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2202      	movs	r2, #2
 8002860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002864:	e003      	b.n	800286e <HAL_TIM_PWM_Start+0xaa>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2202      	movs	r2, #2
 800286a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2201      	movs	r2, #1
 8002874:	6839      	ldr	r1, [r7, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f000 fcae 	bl	80031d8 <TIM_CCxChannelCmd>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a2d      	ldr	r2, [pc, #180]	; (8002938 <HAL_TIM_PWM_Start+0x174>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d004      	beq.n	8002890 <HAL_TIM_PWM_Start+0xcc>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a2c      	ldr	r2, [pc, #176]	; (800293c <HAL_TIM_PWM_Start+0x178>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d101      	bne.n	8002894 <HAL_TIM_PWM_Start+0xd0>
 8002890:	2301      	movs	r3, #1
 8002892:	e000      	b.n	8002896 <HAL_TIM_PWM_Start+0xd2>
 8002894:	2300      	movs	r3, #0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d007      	beq.n	80028aa <HAL_TIM_PWM_Start+0xe6>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028a8:	645a      	str	r2, [r3, #68]	; 0x44
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a22      	ldr	r2, [pc, #136]	; (8002938 <HAL_TIM_PWM_Start+0x174>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d022      	beq.n	80028fa <HAL_TIM_PWM_Start+0x136>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028bc:	d01d      	beq.n	80028fa <HAL_TIM_PWM_Start+0x136>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a1f      	ldr	r2, [pc, #124]	; (8002940 <HAL_TIM_PWM_Start+0x17c>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d018      	beq.n	80028fa <HAL_TIM_PWM_Start+0x136>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a1d      	ldr	r2, [pc, #116]	; (8002944 <HAL_TIM_PWM_Start+0x180>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d013      	beq.n	80028fa <HAL_TIM_PWM_Start+0x136>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a1c      	ldr	r2, [pc, #112]	; (8002948 <HAL_TIM_PWM_Start+0x184>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d00e      	beq.n	80028fa <HAL_TIM_PWM_Start+0x136>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a16      	ldr	r2, [pc, #88]	; (800293c <HAL_TIM_PWM_Start+0x178>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d009      	beq.n	80028fa <HAL_TIM_PWM_Start+0x136>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a18      	ldr	r2, [pc, #96]	; (800294c <HAL_TIM_PWM_Start+0x188>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d004      	beq.n	80028fa <HAL_TIM_PWM_Start+0x136>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a16      	ldr	r2, [pc, #88]	; (8002950 <HAL_TIM_PWM_Start+0x18c>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d111      	bne.n	800291e <HAL_TIM_PWM_Start+0x15a>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	60fb      	str	r3, [r7, #12]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2b06      	cmp	r3, #6
 800290a:	d010      	beq.n	800292e <HAL_TIM_PWM_Start+0x16a>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f042 0201 	orr.w	r2, r2, #1
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	e007      	b.n	800292e <HAL_TIM_PWM_Start+0x16a>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f042 0201 	orr.w	r2, r2, #1
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	2300      	movs	r3, #0
 8002930:	4618      	mov	r0, r3
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40010000 	.word	0x40010000
 800293c:	40010400 	.word	0x40010400
 8002940:	40000400 	.word	0x40000400
 8002944:	40000800 	.word	0x40000800
 8002948:	40000c00 	.word	0x40000c00
 800294c:	40014000 	.word	0x40014000
 8002950:	40001800 	.word	0x40001800

08002954 <HAL_TIM_IRQHandler>:
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b02      	cmp	r3, #2
 8002968:	d122      	bne.n	80029b0 <HAL_TIM_IRQHandler+0x5c>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b02      	cmp	r3, #2
 8002976:	d11b      	bne.n	80029b0 <HAL_TIM_IRQHandler+0x5c>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f06f 0202 	mvn.w	r2, #2
 8002980:	611a      	str	r2, [r3, #16]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2201      	movs	r2, #1
 8002986:	771a      	strb	r2, [r3, #28]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	f003 0303 	and.w	r3, r3, #3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_TIM_IRQHandler+0x4a>
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f9b0 	bl	8002cfc <HAL_TIM_IC_CaptureCallback>
 800299c:	e005      	b.n	80029aa <HAL_TIM_IRQHandler+0x56>
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 f9a2 	bl	8002ce8 <HAL_TIM_OC_DelayElapsedCallback>
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 f9b3 	bl	8002d10 <HAL_TIM_PWM_PulseFinishedCallback>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	771a      	strb	r2, [r3, #28]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	f003 0304 	and.w	r3, r3, #4
 80029ba:	2b04      	cmp	r3, #4
 80029bc:	d122      	bne.n	8002a04 <HAL_TIM_IRQHandler+0xb0>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	f003 0304 	and.w	r3, r3, #4
 80029c8:	2b04      	cmp	r3, #4
 80029ca:	d11b      	bne.n	8002a04 <HAL_TIM_IRQHandler+0xb0>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f06f 0204 	mvn.w	r2, #4
 80029d4:	611a      	str	r2, [r3, #16]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2202      	movs	r2, #2
 80029da:	771a      	strb	r2, [r3, #28]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <HAL_TIM_IRQHandler+0x9e>
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 f986 	bl	8002cfc <HAL_TIM_IC_CaptureCallback>
 80029f0:	e005      	b.n	80029fe <HAL_TIM_IRQHandler+0xaa>
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 f978 	bl	8002ce8 <HAL_TIM_OC_DelayElapsedCallback>
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 f989 	bl	8002d10 <HAL_TIM_PWM_PulseFinishedCallback>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	771a      	strb	r2, [r3, #28]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	f003 0308 	and.w	r3, r3, #8
 8002a0e:	2b08      	cmp	r3, #8
 8002a10:	d122      	bne.n	8002a58 <HAL_TIM_IRQHandler+0x104>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	f003 0308 	and.w	r3, r3, #8
 8002a1c:	2b08      	cmp	r3, #8
 8002a1e:	d11b      	bne.n	8002a58 <HAL_TIM_IRQHandler+0x104>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f06f 0208 	mvn.w	r2, #8
 8002a28:	611a      	str	r2, [r3, #16]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2204      	movs	r2, #4
 8002a2e:	771a      	strb	r2, [r3, #28]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	f003 0303 	and.w	r3, r3, #3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_TIM_IRQHandler+0xf2>
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f95c 	bl	8002cfc <HAL_TIM_IC_CaptureCallback>
 8002a44:	e005      	b.n	8002a52 <HAL_TIM_IRQHandler+0xfe>
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f94e 	bl	8002ce8 <HAL_TIM_OC_DelayElapsedCallback>
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 f95f 	bl	8002d10 <HAL_TIM_PWM_PulseFinishedCallback>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	771a      	strb	r2, [r3, #28]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	f003 0310 	and.w	r3, r3, #16
 8002a62:	2b10      	cmp	r3, #16
 8002a64:	d122      	bne.n	8002aac <HAL_TIM_IRQHandler+0x158>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	f003 0310 	and.w	r3, r3, #16
 8002a70:	2b10      	cmp	r3, #16
 8002a72:	d11b      	bne.n	8002aac <HAL_TIM_IRQHandler+0x158>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f06f 0210 	mvn.w	r2, #16
 8002a7c:	611a      	str	r2, [r3, #16]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2208      	movs	r2, #8
 8002a82:	771a      	strb	r2, [r3, #28]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_TIM_IRQHandler+0x146>
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f932 	bl	8002cfc <HAL_TIM_IC_CaptureCallback>
 8002a98:	e005      	b.n	8002aa6 <HAL_TIM_IRQHandler+0x152>
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f924 	bl	8002ce8 <HAL_TIM_OC_DelayElapsedCallback>
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 f935 	bl	8002d10 <HAL_TIM_PWM_PulseFinishedCallback>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	771a      	strb	r2, [r3, #28]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d10e      	bne.n	8002ad8 <HAL_TIM_IRQHandler+0x184>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d107      	bne.n	8002ad8 <HAL_TIM_IRQHandler+0x184>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f06f 0201 	mvn.w	r2, #1
 8002ad0:	611a      	str	r2, [r3, #16]
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7fd ff76 	bl	80009c4 <HAL_TIM_PeriodElapsedCallback>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae2:	2b80      	cmp	r3, #128	; 0x80
 8002ae4:	d10e      	bne.n	8002b04 <HAL_TIM_IRQHandler+0x1b0>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af0:	2b80      	cmp	r3, #128	; 0x80
 8002af2:	d107      	bne.n	8002b04 <HAL_TIM_IRQHandler+0x1b0>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002afc:	611a      	str	r2, [r3, #16]
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 fc16 	bl	8003330 <HAL_TIMEx_BreakCallback>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b0e:	2b40      	cmp	r3, #64	; 0x40
 8002b10:	d10e      	bne.n	8002b30 <HAL_TIM_IRQHandler+0x1dc>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1c:	2b40      	cmp	r3, #64	; 0x40
 8002b1e:	d107      	bne.n	8002b30 <HAL_TIM_IRQHandler+0x1dc>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b28:	611a      	str	r2, [r3, #16]
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f8fa 	bl	8002d24 <HAL_TIM_TriggerCallback>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	f003 0320 	and.w	r3, r3, #32
 8002b3a:	2b20      	cmp	r3, #32
 8002b3c:	d10e      	bne.n	8002b5c <HAL_TIM_IRQHandler+0x208>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	f003 0320 	and.w	r3, r3, #32
 8002b48:	2b20      	cmp	r3, #32
 8002b4a:	d107      	bne.n	8002b5c <HAL_TIM_IRQHandler+0x208>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f06f 0220 	mvn.w	r2, #32
 8002b54:	611a      	str	r2, [r3, #16]
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 fbe0 	bl	800331c <HAL_TIMEx_CommutCallback>
 8002b5c:	bf00      	nop
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <HAL_TIM_PWM_ConfigChannel>:
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
 8002b70:	2300      	movs	r3, #0
 8002b72:	75fb      	strb	r3, [r7, #23]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d101      	bne.n	8002b82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002b7e:	2302      	movs	r3, #2
 8002b80:	e0ae      	b.n	8002ce0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2b0c      	cmp	r3, #12
 8002b8e:	f200 809f 	bhi.w	8002cd0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002b92:	a201      	add	r2, pc, #4	; (adr r2, 8002b98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b98:	08002bcd 	.word	0x08002bcd
 8002b9c:	08002cd1 	.word	0x08002cd1
 8002ba0:	08002cd1 	.word	0x08002cd1
 8002ba4:	08002cd1 	.word	0x08002cd1
 8002ba8:	08002c0d 	.word	0x08002c0d
 8002bac:	08002cd1 	.word	0x08002cd1
 8002bb0:	08002cd1 	.word	0x08002cd1
 8002bb4:	08002cd1 	.word	0x08002cd1
 8002bb8:	08002c4f 	.word	0x08002c4f
 8002bbc:	08002cd1 	.word	0x08002cd1
 8002bc0:	08002cd1 	.word	0x08002cd1
 8002bc4:	08002cd1 	.word	0x08002cd1
 8002bc8:	08002c8f 	.word	0x08002c8f
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68b9      	ldr	r1, [r7, #8]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f000 f950 	bl	8002e78 <TIM_OC1_SetConfig>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	699a      	ldr	r2, [r3, #24]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 0208 	orr.w	r2, r2, #8
 8002be6:	619a      	str	r2, [r3, #24]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	699a      	ldr	r2, [r3, #24]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 0204 	bic.w	r2, r2, #4
 8002bf6:	619a      	str	r2, [r3, #24]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6999      	ldr	r1, [r3, #24]
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	691a      	ldr	r2, [r3, #16]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	430a      	orrs	r2, r1
 8002c08:	619a      	str	r2, [r3, #24]
 8002c0a:	e064      	b.n	8002cd6 <HAL_TIM_PWM_ConfigChannel+0x172>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68b9      	ldr	r1, [r7, #8]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 f9a0 	bl	8002f58 <TIM_OC2_SetConfig>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	699a      	ldr	r2, [r3, #24]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c26:	619a      	str	r2, [r3, #24]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	699a      	ldr	r2, [r3, #24]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c36:	619a      	str	r2, [r3, #24]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6999      	ldr	r1, [r3, #24]
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	021a      	lsls	r2, r3, #8
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	619a      	str	r2, [r3, #24]
 8002c4c:	e043      	b.n	8002cd6 <HAL_TIM_PWM_ConfigChannel+0x172>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68b9      	ldr	r1, [r7, #8]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f000 f9f5 	bl	8003044 <TIM_OC3_SetConfig>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	69da      	ldr	r2, [r3, #28]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f042 0208 	orr.w	r2, r2, #8
 8002c68:	61da      	str	r2, [r3, #28]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	69da      	ldr	r2, [r3, #28]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 0204 	bic.w	r2, r2, #4
 8002c78:	61da      	str	r2, [r3, #28]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	69d9      	ldr	r1, [r3, #28]
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	691a      	ldr	r2, [r3, #16]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	61da      	str	r2, [r3, #28]
 8002c8c:	e023      	b.n	8002cd6 <HAL_TIM_PWM_ConfigChannel+0x172>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68b9      	ldr	r1, [r7, #8]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f000 fa49 	bl	800312c <TIM_OC4_SetConfig>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	69da      	ldr	r2, [r3, #28]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ca8:	61da      	str	r2, [r3, #28]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	69da      	ldr	r2, [r3, #28]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cb8:	61da      	str	r2, [r3, #28]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	69d9      	ldr	r1, [r3, #28]
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	021a      	lsls	r2, r3, #8
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	61da      	str	r2, [r3, #28]
 8002cce:	e002      	b.n	8002cd6 <HAL_TIM_PWM_ConfigChannel+0x172>
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	75fb      	strb	r3, [r7, #23]
 8002cd4:	bf00      	nop
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002cde:	7dfb      	ldrb	r3, [r7, #23]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3718      	adds	r7, #24
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <HAL_TIM_OC_DelayElapsedCallback>:
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <HAL_TIM_IC_CaptureCallback>:
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <HAL_TIM_TriggerCallback>:
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <TIM_Base_SetConfig>:
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	60fb      	str	r3, [r7, #12]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a40      	ldr	r2, [pc, #256]	; (8002e4c <TIM_Base_SetConfig+0x114>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d013      	beq.n	8002d78 <TIM_Base_SetConfig+0x40>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d56:	d00f      	beq.n	8002d78 <TIM_Base_SetConfig+0x40>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a3d      	ldr	r2, [pc, #244]	; (8002e50 <TIM_Base_SetConfig+0x118>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d00b      	beq.n	8002d78 <TIM_Base_SetConfig+0x40>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a3c      	ldr	r2, [pc, #240]	; (8002e54 <TIM_Base_SetConfig+0x11c>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d007      	beq.n	8002d78 <TIM_Base_SetConfig+0x40>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a3b      	ldr	r2, [pc, #236]	; (8002e58 <TIM_Base_SetConfig+0x120>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d003      	beq.n	8002d78 <TIM_Base_SetConfig+0x40>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a3a      	ldr	r2, [pc, #232]	; (8002e5c <TIM_Base_SetConfig+0x124>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d108      	bne.n	8002d8a <TIM_Base_SetConfig+0x52>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d7e:	60fb      	str	r3, [r7, #12]
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a2f      	ldr	r2, [pc, #188]	; (8002e4c <TIM_Base_SetConfig+0x114>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d02b      	beq.n	8002dea <TIM_Base_SetConfig+0xb2>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d98:	d027      	beq.n	8002dea <TIM_Base_SetConfig+0xb2>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a2c      	ldr	r2, [pc, #176]	; (8002e50 <TIM_Base_SetConfig+0x118>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d023      	beq.n	8002dea <TIM_Base_SetConfig+0xb2>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a2b      	ldr	r2, [pc, #172]	; (8002e54 <TIM_Base_SetConfig+0x11c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d01f      	beq.n	8002dea <TIM_Base_SetConfig+0xb2>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a2a      	ldr	r2, [pc, #168]	; (8002e58 <TIM_Base_SetConfig+0x120>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d01b      	beq.n	8002dea <TIM_Base_SetConfig+0xb2>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a29      	ldr	r2, [pc, #164]	; (8002e5c <TIM_Base_SetConfig+0x124>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d017      	beq.n	8002dea <TIM_Base_SetConfig+0xb2>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a28      	ldr	r2, [pc, #160]	; (8002e60 <TIM_Base_SetConfig+0x128>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d013      	beq.n	8002dea <TIM_Base_SetConfig+0xb2>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a27      	ldr	r2, [pc, #156]	; (8002e64 <TIM_Base_SetConfig+0x12c>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d00f      	beq.n	8002dea <TIM_Base_SetConfig+0xb2>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a26      	ldr	r2, [pc, #152]	; (8002e68 <TIM_Base_SetConfig+0x130>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d00b      	beq.n	8002dea <TIM_Base_SetConfig+0xb2>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a25      	ldr	r2, [pc, #148]	; (8002e6c <TIM_Base_SetConfig+0x134>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d007      	beq.n	8002dea <TIM_Base_SetConfig+0xb2>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a24      	ldr	r2, [pc, #144]	; (8002e70 <TIM_Base_SetConfig+0x138>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d003      	beq.n	8002dea <TIM_Base_SetConfig+0xb2>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a23      	ldr	r2, [pc, #140]	; (8002e74 <TIM_Base_SetConfig+0x13c>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d108      	bne.n	8002dfc <TIM_Base_SetConfig+0xc4>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	60fb      	str	r3, [r7, #12]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	629a      	str	r2, [r3, #40]	; 0x28
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a0a      	ldr	r2, [pc, #40]	; (8002e4c <TIM_Base_SetConfig+0x114>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d003      	beq.n	8002e30 <TIM_Base_SetConfig+0xf8>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a0c      	ldr	r2, [pc, #48]	; (8002e5c <TIM_Base_SetConfig+0x124>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d103      	bne.n	8002e38 <TIM_Base_SetConfig+0x100>
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	691a      	ldr	r2, [r3, #16]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	631a      	str	r2, [r3, #48]	; 0x30
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	615a      	str	r2, [r3, #20]
 8002e3e:	bf00      	nop
 8002e40:	3714      	adds	r7, #20
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	40010000 	.word	0x40010000
 8002e50:	40000400 	.word	0x40000400
 8002e54:	40000800 	.word	0x40000800
 8002e58:	40000c00 	.word	0x40000c00
 8002e5c:	40010400 	.word	0x40010400
 8002e60:	40014000 	.word	0x40014000
 8002e64:	40014400 	.word	0x40014400
 8002e68:	40014800 	.word	0x40014800
 8002e6c:	40001800 	.word	0x40001800
 8002e70:	40001c00 	.word	0x40001c00
 8002e74:	40002000 	.word	0x40002000

08002e78 <TIM_OC1_SetConfig>:
 8002e78:	b480      	push	{r7}
 8002e7a:	b087      	sub	sp, #28
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	f023 0201 	bic.w	r2, r3, #1
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	621a      	str	r2, [r3, #32]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	617b      	str	r3, [r7, #20]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	613b      	str	r3, [r7, #16]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	60fb      	str	r3, [r7, #12]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ea6:	60fb      	str	r3, [r7, #12]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f023 0303 	bic.w	r3, r3, #3
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	60fb      	str	r3, [r7, #12]
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	f023 0302 	bic.w	r3, r3, #2
 8002ec0:	617b      	str	r3, [r7, #20]
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	617b      	str	r3, [r7, #20]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a20      	ldr	r2, [pc, #128]	; (8002f50 <TIM_OC1_SetConfig+0xd8>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d003      	beq.n	8002edc <TIM_OC1_SetConfig+0x64>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a1f      	ldr	r2, [pc, #124]	; (8002f54 <TIM_OC1_SetConfig+0xdc>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d10c      	bne.n	8002ef6 <TIM_OC1_SetConfig+0x7e>
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	f023 0308 	bic.w	r3, r3, #8
 8002ee2:	617b      	str	r3, [r7, #20]
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	697a      	ldr	r2, [r7, #20]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	617b      	str	r3, [r7, #20]
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	f023 0304 	bic.w	r3, r3, #4
 8002ef4:	617b      	str	r3, [r7, #20]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a15      	ldr	r2, [pc, #84]	; (8002f50 <TIM_OC1_SetConfig+0xd8>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d003      	beq.n	8002f06 <TIM_OC1_SetConfig+0x8e>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a14      	ldr	r2, [pc, #80]	; (8002f54 <TIM_OC1_SetConfig+0xdc>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d111      	bne.n	8002f2a <TIM_OC1_SetConfig+0xb2>
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f0c:	613b      	str	r3, [r7, #16]
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f14:	613b      	str	r3, [r7, #16]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	613b      	str	r3, [r7, #16]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	605a      	str	r2, [r3, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	619a      	str	r2, [r3, #24]
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	635a      	str	r2, [r3, #52]	; 0x34
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	621a      	str	r2, [r3, #32]
 8002f44:	bf00      	nop
 8002f46:	371c      	adds	r7, #28
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr
 8002f50:	40010000 	.word	0x40010000
 8002f54:	40010400 	.word	0x40010400

08002f58 <TIM_OC2_SetConfig>:
 8002f58:	b480      	push	{r7}
 8002f5a:	b087      	sub	sp, #28
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	f023 0210 	bic.w	r2, r3, #16
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	621a      	str	r2, [r3, #32]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	617b      	str	r3, [r7, #20]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	613b      	str	r3, [r7, #16]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f86:	60fb      	str	r3, [r7, #12]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	021b      	lsls	r3, r3, #8
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	60fb      	str	r3, [r7, #12]
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	f023 0320 	bic.w	r3, r3, #32
 8002fa2:	617b      	str	r3, [r7, #20]
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	011b      	lsls	r3, r3, #4
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	617b      	str	r3, [r7, #20]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a22      	ldr	r2, [pc, #136]	; (800303c <TIM_OC2_SetConfig+0xe4>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d003      	beq.n	8002fc0 <TIM_OC2_SetConfig+0x68>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a21      	ldr	r2, [pc, #132]	; (8003040 <TIM_OC2_SetConfig+0xe8>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d10d      	bne.n	8002fdc <TIM_OC2_SetConfig+0x84>
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fc6:	617b      	str	r3, [r7, #20]
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	011b      	lsls	r3, r3, #4
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	617b      	str	r3, [r7, #20]
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fda:	617b      	str	r3, [r7, #20]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a17      	ldr	r2, [pc, #92]	; (800303c <TIM_OC2_SetConfig+0xe4>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d003      	beq.n	8002fec <TIM_OC2_SetConfig+0x94>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a16      	ldr	r2, [pc, #88]	; (8003040 <TIM_OC2_SetConfig+0xe8>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d113      	bne.n	8003014 <TIM_OC2_SetConfig+0xbc>
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ff2:	613b      	str	r3, [r7, #16]
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ffa:	613b      	str	r3, [r7, #16]
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	695b      	ldr	r3, [r3, #20]
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	4313      	orrs	r3, r2
 8003006:	613b      	str	r3, [r7, #16]
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	4313      	orrs	r3, r2
 8003012:	613b      	str	r3, [r7, #16]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	605a      	str	r2, [r3, #4]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	619a      	str	r2, [r3, #24]
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	639a      	str	r2, [r3, #56]	; 0x38
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	621a      	str	r2, [r3, #32]
 800302e:	bf00      	nop
 8003030:	371c      	adds	r7, #28
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	40010000 	.word	0x40010000
 8003040:	40010400 	.word	0x40010400

08003044 <TIM_OC3_SetConfig>:
 8003044:	b480      	push	{r7}
 8003046:	b087      	sub	sp, #28
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	621a      	str	r2, [r3, #32]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	617b      	str	r3, [r7, #20]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	613b      	str	r3, [r7, #16]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003072:	60fb      	str	r3, [r7, #12]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f023 0303 	bic.w	r3, r3, #3
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	4313      	orrs	r3, r2
 8003084:	60fb      	str	r3, [r7, #12]
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800308c:	617b      	str	r3, [r7, #20]
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	021b      	lsls	r3, r3, #8
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	4313      	orrs	r3, r2
 8003098:	617b      	str	r3, [r7, #20]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a21      	ldr	r2, [pc, #132]	; (8003124 <TIM_OC3_SetConfig+0xe0>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d003      	beq.n	80030aa <TIM_OC3_SetConfig+0x66>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a20      	ldr	r2, [pc, #128]	; (8003128 <TIM_OC3_SetConfig+0xe4>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d10d      	bne.n	80030c6 <TIM_OC3_SetConfig+0x82>
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030b0:	617b      	str	r3, [r7, #20]
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	021b      	lsls	r3, r3, #8
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	617b      	str	r3, [r7, #20]
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030c4:	617b      	str	r3, [r7, #20]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a16      	ldr	r2, [pc, #88]	; (8003124 <TIM_OC3_SetConfig+0xe0>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d003      	beq.n	80030d6 <TIM_OC3_SetConfig+0x92>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a15      	ldr	r2, [pc, #84]	; (8003128 <TIM_OC3_SetConfig+0xe4>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d113      	bne.n	80030fe <TIM_OC3_SetConfig+0xba>
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030dc:	613b      	str	r3, [r7, #16]
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030e4:	613b      	str	r3, [r7, #16]
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	011b      	lsls	r3, r3, #4
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	613b      	str	r3, [r7, #16]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	011b      	lsls	r3, r3, #4
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	613b      	str	r3, [r7, #16]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	605a      	str	r2, [r3, #4]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	61da      	str	r2, [r3, #28]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685a      	ldr	r2, [r3, #4]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	63da      	str	r2, [r3, #60]	; 0x3c
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	621a      	str	r2, [r3, #32]
 8003118:	bf00      	nop
 800311a:	371c      	adds	r7, #28
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr
 8003124:	40010000 	.word	0x40010000
 8003128:	40010400 	.word	0x40010400

0800312c <TIM_OC4_SetConfig>:
 800312c:	b480      	push	{r7}
 800312e:	b087      	sub	sp, #28
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	621a      	str	r2, [r3, #32]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	613b      	str	r3, [r7, #16]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	617b      	str	r3, [r7, #20]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800315a:	60fb      	str	r3, [r7, #12]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003162:	60fb      	str	r3, [r7, #12]
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	021b      	lsls	r3, r3, #8
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	4313      	orrs	r3, r2
 800316e:	60fb      	str	r3, [r7, #12]
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003176:	613b      	str	r3, [r7, #16]
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	031b      	lsls	r3, r3, #12
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	4313      	orrs	r3, r2
 8003182:	613b      	str	r3, [r7, #16]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a12      	ldr	r2, [pc, #72]	; (80031d0 <TIM_OC4_SetConfig+0xa4>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d003      	beq.n	8003194 <TIM_OC4_SetConfig+0x68>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a11      	ldr	r2, [pc, #68]	; (80031d4 <TIM_OC4_SetConfig+0xa8>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d109      	bne.n	80031a8 <TIM_OC4_SetConfig+0x7c>
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800319a:	617b      	str	r3, [r7, #20]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	019b      	lsls	r3, r3, #6
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	617b      	str	r3, [r7, #20]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	605a      	str	r2, [r3, #4]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	61da      	str	r2, [r3, #28]
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	641a      	str	r2, [r3, #64]	; 0x40
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	621a      	str	r2, [r3, #32]
 80031c2:	bf00      	nop
 80031c4:	371c      	adds	r7, #28
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	40010000 	.word	0x40010000
 80031d4:	40010400 	.word	0x40010400

080031d8 <TIM_CCxChannelCmd>:
 80031d8:	b480      	push	{r7}
 80031da:	b087      	sub	sp, #28
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	f003 031f 	and.w	r3, r3, #31
 80031ea:	2201      	movs	r2, #1
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	617b      	str	r3, [r7, #20]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6a1a      	ldr	r2, [r3, #32]
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	43db      	mvns	r3, r3
 80031fa:	401a      	ands	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	621a      	str	r2, [r3, #32]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6a1a      	ldr	r2, [r3, #32]
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	f003 031f 	and.w	r3, r3, #31
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	fa01 f303 	lsl.w	r3, r1, r3
 8003210:	431a      	orrs	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	621a      	str	r2, [r3, #32]
 8003216:	bf00      	nop
 8003218:	371c      	adds	r7, #28
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
	...

08003224 <HAL_TIMEx_MasterConfigSynchronization>:
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003234:	2b01      	cmp	r3, #1
 8003236:	d101      	bne.n	800323c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003238:	2302      	movs	r3, #2
 800323a:	e05a      	b.n	80032f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2202      	movs	r2, #2
 8003248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	60fb      	str	r3, [r7, #12]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	60bb      	str	r3, [r7, #8]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003262:	60fb      	str	r3, [r7, #12]
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	4313      	orrs	r3, r2
 800326c:	60fb      	str	r3, [r7, #12]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	605a      	str	r2, [r3, #4]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a21      	ldr	r2, [pc, #132]	; (8003300 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d022      	beq.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003288:	d01d      	beq.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a1d      	ldr	r2, [pc, #116]	; (8003304 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d018      	beq.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a1b      	ldr	r2, [pc, #108]	; (8003308 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d013      	beq.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a1a      	ldr	r2, [pc, #104]	; (800330c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d00e      	beq.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a18      	ldr	r2, [pc, #96]	; (8003310 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d009      	beq.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a17      	ldr	r2, [pc, #92]	; (8003314 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d004      	beq.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a15      	ldr	r2, [pc, #84]	; (8003318 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d10c      	bne.n	80032e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032cc:	60bb      	str	r3, [r7, #8]
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	60bb      	str	r3, [r7, #8]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68ba      	ldr	r2, [r7, #8]
 80032de:	609a      	str	r2, [r3, #8]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80032f0:	2300      	movs	r3, #0
 80032f2:	4618      	mov	r0, r3
 80032f4:	3714      	adds	r7, #20
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	40010000 	.word	0x40010000
 8003304:	40000400 	.word	0x40000400
 8003308:	40000800 	.word	0x40000800
 800330c:	40000c00 	.word	0x40000c00
 8003310:	40010400 	.word	0x40010400
 8003314:	40014000 	.word	0x40014000
 8003318:	40001800 	.word	0x40001800

0800331c <HAL_TIMEx_CommutCallback>:
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <HAL_TIMEx_BreakCallback>:
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <HAL_UART_Init>:
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_UART_Init+0x12>
 8003352:	2301      	movs	r3, #1
 8003354:	e03f      	b.n	80033d6 <HAL_UART_Init+0x92>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d106      	bne.n	8003370 <HAL_UART_Init+0x2c>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f7fd fbca 	bl	8000b04 <HAL_UART_MspInit>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2224      	movs	r2, #36	; 0x24
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68da      	ldr	r2, [r3, #12]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003386:	60da      	str	r2, [r3, #12]
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f000 f829 	bl	80033e0 <UART_SetConfig>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	691a      	ldr	r2, [r3, #16]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800339c:	611a      	str	r2, [r3, #16]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	695a      	ldr	r2, [r3, #20]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033ac:	615a      	str	r2, [r3, #20]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68da      	ldr	r2, [r3, #12]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033bc:	60da      	str	r2, [r3, #12]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	641a      	str	r2, [r3, #64]	; 0x40
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2220      	movs	r2, #32
 80033c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2220      	movs	r2, #32
 80033d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033d4:	2300      	movs	r3, #0
 80033d6:	4618      	mov	r0, r3
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
	...

080033e0 <UART_SetConfig>:
 80033e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033e4:	b0c0      	sub	sp, #256	; 0x100
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 80033ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80033f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033fc:	68d9      	ldr	r1, [r3, #12]
 80033fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	ea40 0301 	orr.w	r3, r0, r1
 8003408:	6113      	str	r3, [r2, #16]
 800340a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	431a      	orrs	r2, r3
 8003418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	431a      	orrs	r2, r3
 8003420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003424:	69db      	ldr	r3, [r3, #28]
 8003426:	4313      	orrs	r3, r2
 8003428:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800342c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003438:	f021 010c 	bic.w	r1, r1, #12
 800343c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003446:	430b      	orrs	r3, r1
 8003448:	60d3      	str	r3, [r2, #12]
 800344a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800345a:	6999      	ldr	r1, [r3, #24]
 800345c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	ea40 0301 	orr.w	r3, r0, r1
 8003466:	6153      	str	r3, [r2, #20]
 8003468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	4b95      	ldr	r3, [pc, #596]	; (80036c4 <UART_SetConfig+0x2e4>)
 8003470:	429a      	cmp	r2, r3
 8003472:	d011      	beq.n	8003498 <UART_SetConfig+0xb8>
 8003474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	4b93      	ldr	r3, [pc, #588]	; (80036c8 <UART_SetConfig+0x2e8>)
 800347c:	429a      	cmp	r2, r3
 800347e:	d00b      	beq.n	8003498 <UART_SetConfig+0xb8>
 8003480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	4b91      	ldr	r3, [pc, #580]	; (80036cc <UART_SetConfig+0x2ec>)
 8003488:	429a      	cmp	r2, r3
 800348a:	d005      	beq.n	8003498 <UART_SetConfig+0xb8>
 800348c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	4b8f      	ldr	r3, [pc, #572]	; (80036d0 <UART_SetConfig+0x2f0>)
 8003494:	429a      	cmp	r2, r3
 8003496:	d104      	bne.n	80034a2 <UART_SetConfig+0xc2>
 8003498:	f7fe fb24 	bl	8001ae4 <HAL_RCC_GetPCLK2Freq>
 800349c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80034a0:	e003      	b.n	80034aa <UART_SetConfig+0xca>
 80034a2:	f7fe fb0b 	bl	8001abc <HAL_RCC_GetPCLK1Freq>
 80034a6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80034aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ae:	69db      	ldr	r3, [r3, #28]
 80034b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034b4:	f040 8110 	bne.w	80036d8 <UART_SetConfig+0x2f8>
 80034b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034bc:	2200      	movs	r2, #0
 80034be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80034c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80034c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80034ca:	4622      	mov	r2, r4
 80034cc:	462b      	mov	r3, r5
 80034ce:	1891      	adds	r1, r2, r2
 80034d0:	65b9      	str	r1, [r7, #88]	; 0x58
 80034d2:	415b      	adcs	r3, r3
 80034d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80034da:	4621      	mov	r1, r4
 80034dc:	eb12 0801 	adds.w	r8, r2, r1
 80034e0:	4629      	mov	r1, r5
 80034e2:	eb43 0901 	adc.w	r9, r3, r1
 80034e6:	f04f 0200 	mov.w	r2, #0
 80034ea:	f04f 0300 	mov.w	r3, #0
 80034ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034fa:	4690      	mov	r8, r2
 80034fc:	4699      	mov	r9, r3
 80034fe:	4623      	mov	r3, r4
 8003500:	eb18 0303 	adds.w	r3, r8, r3
 8003504:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003508:	462b      	mov	r3, r5
 800350a:	eb49 0303 	adc.w	r3, r9, r3
 800350e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800351e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003522:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003526:	460b      	mov	r3, r1
 8003528:	18db      	adds	r3, r3, r3
 800352a:	653b      	str	r3, [r7, #80]	; 0x50
 800352c:	4613      	mov	r3, r2
 800352e:	eb42 0303 	adc.w	r3, r2, r3
 8003532:	657b      	str	r3, [r7, #84]	; 0x54
 8003534:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003538:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800353c:	f7fc fe70 	bl	8000220 <__aeabi_uldivmod>
 8003540:	4602      	mov	r2, r0
 8003542:	460b      	mov	r3, r1
 8003544:	4b63      	ldr	r3, [pc, #396]	; (80036d4 <UART_SetConfig+0x2f4>)
 8003546:	fba3 2302 	umull	r2, r3, r3, r2
 800354a:	095b      	lsrs	r3, r3, #5
 800354c:	011c      	lsls	r4, r3, #4
 800354e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003552:	2200      	movs	r2, #0
 8003554:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003558:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800355c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003560:	4642      	mov	r2, r8
 8003562:	464b      	mov	r3, r9
 8003564:	1891      	adds	r1, r2, r2
 8003566:	64b9      	str	r1, [r7, #72]	; 0x48
 8003568:	415b      	adcs	r3, r3
 800356a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800356c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003570:	4641      	mov	r1, r8
 8003572:	eb12 0a01 	adds.w	sl, r2, r1
 8003576:	4649      	mov	r1, r9
 8003578:	eb43 0b01 	adc.w	fp, r3, r1
 800357c:	f04f 0200 	mov.w	r2, #0
 8003580:	f04f 0300 	mov.w	r3, #0
 8003584:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003588:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800358c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003590:	4692      	mov	sl, r2
 8003592:	469b      	mov	fp, r3
 8003594:	4643      	mov	r3, r8
 8003596:	eb1a 0303 	adds.w	r3, sl, r3
 800359a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800359e:	464b      	mov	r3, r9
 80035a0:	eb4b 0303 	adc.w	r3, fp, r3
 80035a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80035a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80035b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80035b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80035bc:	460b      	mov	r3, r1
 80035be:	18db      	adds	r3, r3, r3
 80035c0:	643b      	str	r3, [r7, #64]	; 0x40
 80035c2:	4613      	mov	r3, r2
 80035c4:	eb42 0303 	adc.w	r3, r2, r3
 80035c8:	647b      	str	r3, [r7, #68]	; 0x44
 80035ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80035ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80035d2:	f7fc fe25 	bl	8000220 <__aeabi_uldivmod>
 80035d6:	4602      	mov	r2, r0
 80035d8:	460b      	mov	r3, r1
 80035da:	4611      	mov	r1, r2
 80035dc:	4b3d      	ldr	r3, [pc, #244]	; (80036d4 <UART_SetConfig+0x2f4>)
 80035de:	fba3 2301 	umull	r2, r3, r3, r1
 80035e2:	095b      	lsrs	r3, r3, #5
 80035e4:	2264      	movs	r2, #100	; 0x64
 80035e6:	fb02 f303 	mul.w	r3, r2, r3
 80035ea:	1acb      	subs	r3, r1, r3
 80035ec:	00db      	lsls	r3, r3, #3
 80035ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80035f2:	4b38      	ldr	r3, [pc, #224]	; (80036d4 <UART_SetConfig+0x2f4>)
 80035f4:	fba3 2302 	umull	r2, r3, r3, r2
 80035f8:	095b      	lsrs	r3, r3, #5
 80035fa:	005b      	lsls	r3, r3, #1
 80035fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003600:	441c      	add	r4, r3
 8003602:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003606:	2200      	movs	r2, #0
 8003608:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800360c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003610:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003614:	4642      	mov	r2, r8
 8003616:	464b      	mov	r3, r9
 8003618:	1891      	adds	r1, r2, r2
 800361a:	63b9      	str	r1, [r7, #56]	; 0x38
 800361c:	415b      	adcs	r3, r3
 800361e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003620:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003624:	4641      	mov	r1, r8
 8003626:	1851      	adds	r1, r2, r1
 8003628:	6339      	str	r1, [r7, #48]	; 0x30
 800362a:	4649      	mov	r1, r9
 800362c:	414b      	adcs	r3, r1
 800362e:	637b      	str	r3, [r7, #52]	; 0x34
 8003630:	f04f 0200 	mov.w	r2, #0
 8003634:	f04f 0300 	mov.w	r3, #0
 8003638:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800363c:	4659      	mov	r1, fp
 800363e:	00cb      	lsls	r3, r1, #3
 8003640:	4651      	mov	r1, sl
 8003642:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003646:	4651      	mov	r1, sl
 8003648:	00ca      	lsls	r2, r1, #3
 800364a:	4610      	mov	r0, r2
 800364c:	4619      	mov	r1, r3
 800364e:	4603      	mov	r3, r0
 8003650:	4642      	mov	r2, r8
 8003652:	189b      	adds	r3, r3, r2
 8003654:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003658:	464b      	mov	r3, r9
 800365a:	460a      	mov	r2, r1
 800365c:	eb42 0303 	adc.w	r3, r2, r3
 8003660:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003670:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003674:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003678:	460b      	mov	r3, r1
 800367a:	18db      	adds	r3, r3, r3
 800367c:	62bb      	str	r3, [r7, #40]	; 0x28
 800367e:	4613      	mov	r3, r2
 8003680:	eb42 0303 	adc.w	r3, r2, r3
 8003684:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003686:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800368a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800368e:	f7fc fdc7 	bl	8000220 <__aeabi_uldivmod>
 8003692:	4602      	mov	r2, r0
 8003694:	460b      	mov	r3, r1
 8003696:	4b0f      	ldr	r3, [pc, #60]	; (80036d4 <UART_SetConfig+0x2f4>)
 8003698:	fba3 1302 	umull	r1, r3, r3, r2
 800369c:	095b      	lsrs	r3, r3, #5
 800369e:	2164      	movs	r1, #100	; 0x64
 80036a0:	fb01 f303 	mul.w	r3, r1, r3
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	3332      	adds	r3, #50	; 0x32
 80036aa:	4a0a      	ldr	r2, [pc, #40]	; (80036d4 <UART_SetConfig+0x2f4>)
 80036ac:	fba2 2303 	umull	r2, r3, r2, r3
 80036b0:	095b      	lsrs	r3, r3, #5
 80036b2:	f003 0207 	and.w	r2, r3, #7
 80036b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4422      	add	r2, r4
 80036be:	609a      	str	r2, [r3, #8]
 80036c0:	e10a      	b.n	80038d8 <UART_SetConfig+0x4f8>
 80036c2:	bf00      	nop
 80036c4:	40011000 	.word	0x40011000
 80036c8:	40011400 	.word	0x40011400
 80036cc:	40011800 	.word	0x40011800
 80036d0:	40011c00 	.word	0x40011c00
 80036d4:	51eb851f 	.word	0x51eb851f
 80036d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036dc:	2200      	movs	r2, #0
 80036de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80036e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80036e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80036ea:	4642      	mov	r2, r8
 80036ec:	464b      	mov	r3, r9
 80036ee:	1891      	adds	r1, r2, r2
 80036f0:	6239      	str	r1, [r7, #32]
 80036f2:	415b      	adcs	r3, r3
 80036f4:	627b      	str	r3, [r7, #36]	; 0x24
 80036f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80036fa:	4641      	mov	r1, r8
 80036fc:	1854      	adds	r4, r2, r1
 80036fe:	4649      	mov	r1, r9
 8003700:	eb43 0501 	adc.w	r5, r3, r1
 8003704:	f04f 0200 	mov.w	r2, #0
 8003708:	f04f 0300 	mov.w	r3, #0
 800370c:	00eb      	lsls	r3, r5, #3
 800370e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003712:	00e2      	lsls	r2, r4, #3
 8003714:	4614      	mov	r4, r2
 8003716:	461d      	mov	r5, r3
 8003718:	4643      	mov	r3, r8
 800371a:	18e3      	adds	r3, r4, r3
 800371c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003720:	464b      	mov	r3, r9
 8003722:	eb45 0303 	adc.w	r3, r5, r3
 8003726:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800372a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003736:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800373a:	f04f 0200 	mov.w	r2, #0
 800373e:	f04f 0300 	mov.w	r3, #0
 8003742:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003746:	4629      	mov	r1, r5
 8003748:	008b      	lsls	r3, r1, #2
 800374a:	4621      	mov	r1, r4
 800374c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003750:	4621      	mov	r1, r4
 8003752:	008a      	lsls	r2, r1, #2
 8003754:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003758:	f7fc fd62 	bl	8000220 <__aeabi_uldivmod>
 800375c:	4602      	mov	r2, r0
 800375e:	460b      	mov	r3, r1
 8003760:	4b60      	ldr	r3, [pc, #384]	; (80038e4 <UART_SetConfig+0x504>)
 8003762:	fba3 2302 	umull	r2, r3, r3, r2
 8003766:	095b      	lsrs	r3, r3, #5
 8003768:	011c      	lsls	r4, r3, #4
 800376a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800376e:	2200      	movs	r2, #0
 8003770:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003774:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003778:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800377c:	4642      	mov	r2, r8
 800377e:	464b      	mov	r3, r9
 8003780:	1891      	adds	r1, r2, r2
 8003782:	61b9      	str	r1, [r7, #24]
 8003784:	415b      	adcs	r3, r3
 8003786:	61fb      	str	r3, [r7, #28]
 8003788:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800378c:	4641      	mov	r1, r8
 800378e:	1851      	adds	r1, r2, r1
 8003790:	6139      	str	r1, [r7, #16]
 8003792:	4649      	mov	r1, r9
 8003794:	414b      	adcs	r3, r1
 8003796:	617b      	str	r3, [r7, #20]
 8003798:	f04f 0200 	mov.w	r2, #0
 800379c:	f04f 0300 	mov.w	r3, #0
 80037a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037a4:	4659      	mov	r1, fp
 80037a6:	00cb      	lsls	r3, r1, #3
 80037a8:	4651      	mov	r1, sl
 80037aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037ae:	4651      	mov	r1, sl
 80037b0:	00ca      	lsls	r2, r1, #3
 80037b2:	4610      	mov	r0, r2
 80037b4:	4619      	mov	r1, r3
 80037b6:	4603      	mov	r3, r0
 80037b8:	4642      	mov	r2, r8
 80037ba:	189b      	adds	r3, r3, r2
 80037bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80037c0:	464b      	mov	r3, r9
 80037c2:	460a      	mov	r2, r1
 80037c4:	eb42 0303 	adc.w	r3, r2, r3
 80037c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80037cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80037d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80037d8:	f04f 0200 	mov.w	r2, #0
 80037dc:	f04f 0300 	mov.w	r3, #0
 80037e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80037e4:	4649      	mov	r1, r9
 80037e6:	008b      	lsls	r3, r1, #2
 80037e8:	4641      	mov	r1, r8
 80037ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037ee:	4641      	mov	r1, r8
 80037f0:	008a      	lsls	r2, r1, #2
 80037f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80037f6:	f7fc fd13 	bl	8000220 <__aeabi_uldivmod>
 80037fa:	4602      	mov	r2, r0
 80037fc:	460b      	mov	r3, r1
 80037fe:	4611      	mov	r1, r2
 8003800:	4b38      	ldr	r3, [pc, #224]	; (80038e4 <UART_SetConfig+0x504>)
 8003802:	fba3 2301 	umull	r2, r3, r3, r1
 8003806:	095b      	lsrs	r3, r3, #5
 8003808:	2264      	movs	r2, #100	; 0x64
 800380a:	fb02 f303 	mul.w	r3, r2, r3
 800380e:	1acb      	subs	r3, r1, r3
 8003810:	011b      	lsls	r3, r3, #4
 8003812:	3332      	adds	r3, #50	; 0x32
 8003814:	4a33      	ldr	r2, [pc, #204]	; (80038e4 <UART_SetConfig+0x504>)
 8003816:	fba2 2303 	umull	r2, r3, r2, r3
 800381a:	095b      	lsrs	r3, r3, #5
 800381c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003820:	441c      	add	r4, r3
 8003822:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003826:	2200      	movs	r2, #0
 8003828:	673b      	str	r3, [r7, #112]	; 0x70
 800382a:	677a      	str	r2, [r7, #116]	; 0x74
 800382c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003830:	4642      	mov	r2, r8
 8003832:	464b      	mov	r3, r9
 8003834:	1891      	adds	r1, r2, r2
 8003836:	60b9      	str	r1, [r7, #8]
 8003838:	415b      	adcs	r3, r3
 800383a:	60fb      	str	r3, [r7, #12]
 800383c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003840:	4641      	mov	r1, r8
 8003842:	1851      	adds	r1, r2, r1
 8003844:	6039      	str	r1, [r7, #0]
 8003846:	4649      	mov	r1, r9
 8003848:	414b      	adcs	r3, r1
 800384a:	607b      	str	r3, [r7, #4]
 800384c:	f04f 0200 	mov.w	r2, #0
 8003850:	f04f 0300 	mov.w	r3, #0
 8003854:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003858:	4659      	mov	r1, fp
 800385a:	00cb      	lsls	r3, r1, #3
 800385c:	4651      	mov	r1, sl
 800385e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003862:	4651      	mov	r1, sl
 8003864:	00ca      	lsls	r2, r1, #3
 8003866:	4610      	mov	r0, r2
 8003868:	4619      	mov	r1, r3
 800386a:	4603      	mov	r3, r0
 800386c:	4642      	mov	r2, r8
 800386e:	189b      	adds	r3, r3, r2
 8003870:	66bb      	str	r3, [r7, #104]	; 0x68
 8003872:	464b      	mov	r3, r9
 8003874:	460a      	mov	r2, r1
 8003876:	eb42 0303 	adc.w	r3, r2, r3
 800387a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800387c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	663b      	str	r3, [r7, #96]	; 0x60
 8003886:	667a      	str	r2, [r7, #100]	; 0x64
 8003888:	f04f 0200 	mov.w	r2, #0
 800388c:	f04f 0300 	mov.w	r3, #0
 8003890:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003894:	4649      	mov	r1, r9
 8003896:	008b      	lsls	r3, r1, #2
 8003898:	4641      	mov	r1, r8
 800389a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800389e:	4641      	mov	r1, r8
 80038a0:	008a      	lsls	r2, r1, #2
 80038a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80038a6:	f7fc fcbb 	bl	8000220 <__aeabi_uldivmod>
 80038aa:	4602      	mov	r2, r0
 80038ac:	460b      	mov	r3, r1
 80038ae:	4b0d      	ldr	r3, [pc, #52]	; (80038e4 <UART_SetConfig+0x504>)
 80038b0:	fba3 1302 	umull	r1, r3, r3, r2
 80038b4:	095b      	lsrs	r3, r3, #5
 80038b6:	2164      	movs	r1, #100	; 0x64
 80038b8:	fb01 f303 	mul.w	r3, r1, r3
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	011b      	lsls	r3, r3, #4
 80038c0:	3332      	adds	r3, #50	; 0x32
 80038c2:	4a08      	ldr	r2, [pc, #32]	; (80038e4 <UART_SetConfig+0x504>)
 80038c4:	fba2 2303 	umull	r2, r3, r2, r3
 80038c8:	095b      	lsrs	r3, r3, #5
 80038ca:	f003 020f 	and.w	r2, r3, #15
 80038ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4422      	add	r2, r4
 80038d6:	609a      	str	r2, [r3, #8]
 80038d8:	bf00      	nop
 80038da:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80038de:	46bd      	mov	sp, r7
 80038e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038e4:	51eb851f 	.word	0x51eb851f

080038e8 <USB_CoreInit>:
 80038e8:	b084      	sub	sp, #16
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b084      	sub	sp, #16
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
 80038f2:	f107 001c 	add.w	r0, r7, #28
 80038f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80038fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d122      	bne.n	8003946 <USB_CoreInit+0x5e>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003904:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	639a      	str	r2, [r3, #56]	; 0x38
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003914:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	60d3      	str	r3, [r2, #12]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	60da      	str	r2, [r3, #12]
 8003928:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800392a:	2b01      	cmp	r3, #1
 800392c:	d105      	bne.n	800393a <USB_CoreInit+0x52>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	60da      	str	r2, [r3, #12]
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 fa9c 	bl	8003e78 <USB_CoreReset>
 8003940:	4603      	mov	r3, r0
 8003942:	73fb      	strb	r3, [r7, #15]
 8003944:	e01a      	b.n	800397c <USB_CoreInit+0x94>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	60da      	str	r2, [r3, #12]
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 fa90 	bl	8003e78 <USB_CoreReset>
 8003958:	4603      	mov	r3, r0
 800395a:	73fb      	strb	r3, [r7, #15]
 800395c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800395e:	2b00      	cmp	r3, #0
 8003960:	d106      	bne.n	8003970 <USB_CoreInit+0x88>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003966:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	639a      	str	r2, [r3, #56]	; 0x38
 800396e:	e005      	b.n	800397c <USB_CoreInit+0x94>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003974:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	639a      	str	r2, [r3, #56]	; 0x38
 800397c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800397e:	2b01      	cmp	r3, #1
 8003980:	d10b      	bne.n	800399a <USB_CoreInit+0xb2>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f043 0206 	orr.w	r2, r3, #6
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	609a      	str	r2, [r3, #8]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f043 0220 	orr.w	r2, r3, #32
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	609a      	str	r2, [r3, #8]
 800399a:	7bfb      	ldrb	r3, [r7, #15]
 800399c:	4618      	mov	r0, r3
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80039a6:	b004      	add	sp, #16
 80039a8:	4770      	bx	lr

080039aa <USB_DisableGlobalInt>:
 80039aa:	b480      	push	{r7}
 80039ac:	b083      	sub	sp, #12
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f023 0201 	bic.w	r2, r3, #1
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	609a      	str	r2, [r3, #8]
 80039be:	2300      	movs	r3, #0
 80039c0:	4618      	mov	r0, r3
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <USB_SetCurrentMode>:
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	460b      	mov	r3, r1
 80039d6:	70fb      	strb	r3, [r7, #3]
 80039d8:	2300      	movs	r3, #0
 80039da:	60fb      	str	r3, [r7, #12]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	60da      	str	r2, [r3, #12]
 80039e8:	78fb      	ldrb	r3, [r7, #3]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d115      	bne.n	8003a1a <USB_SetCurrentMode+0x4e>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	60da      	str	r2, [r3, #12]
 80039fa:	2001      	movs	r0, #1
 80039fc:	f7fd fa52 	bl	8000ea4 <HAL_Delay>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	3301      	adds	r3, #1
 8003a04:	60fb      	str	r3, [r7, #12]
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 fa28 	bl	8003e5c <USB_GetMode>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d01e      	beq.n	8003a50 <USB_SetCurrentMode+0x84>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2b31      	cmp	r3, #49	; 0x31
 8003a16:	d9f0      	bls.n	80039fa <USB_SetCurrentMode+0x2e>
 8003a18:	e01a      	b.n	8003a50 <USB_SetCurrentMode+0x84>
 8003a1a:	78fb      	ldrb	r3, [r7, #3]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d115      	bne.n	8003a4c <USB_SetCurrentMode+0x80>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	60da      	str	r2, [r3, #12]
 8003a2c:	2001      	movs	r0, #1
 8003a2e:	f7fd fa39 	bl	8000ea4 <HAL_Delay>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	3301      	adds	r3, #1
 8003a36:	60fb      	str	r3, [r7, #12]
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f000 fa0f 	bl	8003e5c <USB_GetMode>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d005      	beq.n	8003a50 <USB_SetCurrentMode+0x84>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2b31      	cmp	r3, #49	; 0x31
 8003a48:	d9f0      	bls.n	8003a2c <USB_SetCurrentMode+0x60>
 8003a4a:	e001      	b.n	8003a50 <USB_SetCurrentMode+0x84>
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e005      	b.n	8003a5c <USB_SetCurrentMode+0x90>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2b32      	cmp	r3, #50	; 0x32
 8003a54:	d101      	bne.n	8003a5a <USB_SetCurrentMode+0x8e>
 8003a56:	2301      	movs	r3, #1
 8003a58:	e000      	b.n	8003a5c <USB_SetCurrentMode+0x90>
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <USB_DevInit>:
 8003a64:	b084      	sub	sp, #16
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b086      	sub	sp, #24
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
 8003a6e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003a72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8003a76:	2300      	movs	r3, #0
 8003a78:	75fb      	strb	r3, [r7, #23]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	60fb      	str	r3, [r7, #12]
 8003a7e:	2300      	movs	r3, #0
 8003a80:	613b      	str	r3, [r7, #16]
 8003a82:	e009      	b.n	8003a98 <USB_DevInit+0x34>
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	3340      	adds	r3, #64	; 0x40
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	4413      	add	r3, r2
 8003a8e:	2200      	movs	r2, #0
 8003a90:	605a      	str	r2, [r3, #4]
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	3301      	adds	r3, #1
 8003a96:	613b      	str	r3, [r7, #16]
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	2b0e      	cmp	r3, #14
 8003a9c:	d9f2      	bls.n	8003a84 <USB_DevInit+0x20>
 8003a9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d11c      	bne.n	8003ade <USB_DevInit+0x7a>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ab2:	f043 0302 	orr.w	r3, r3, #2
 8003ab6:	6053      	str	r3, [r2, #4]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003abc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	639a      	str	r2, [r3, #56]	; 0x38
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	601a      	str	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	601a      	str	r2, [r3, #0]
 8003adc:	e005      	b.n	8003aea <USB_DevInit+0x86>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	639a      	str	r2, [r3, #56]	; 0x38
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003af0:	461a      	mov	r2, r3
 8003af2:	2300      	movs	r3, #0
 8003af4:	6013      	str	r3, [r2, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003afc:	4619      	mov	r1, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b04:	461a      	mov	r2, r3
 8003b06:	680b      	ldr	r3, [r1, #0]
 8003b08:	6013      	str	r3, [r2, #0]
 8003b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d10c      	bne.n	8003b2a <USB_DevInit+0xc6>
 8003b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d104      	bne.n	8003b20 <USB_DevInit+0xbc>
 8003b16:	2100      	movs	r1, #0
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 f965 	bl	8003de8 <USB_SetDevSpeed>
 8003b1e:	e008      	b.n	8003b32 <USB_DevInit+0xce>
 8003b20:	2101      	movs	r1, #1
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f960 	bl	8003de8 <USB_SetDevSpeed>
 8003b28:	e003      	b.n	8003b32 <USB_DevInit+0xce>
 8003b2a:	2103      	movs	r1, #3
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 f95b 	bl	8003de8 <USB_SetDevSpeed>
 8003b32:	2110      	movs	r1, #16
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 f8f3 	bl	8003d20 <USB_FlushTxFifo>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d001      	beq.n	8003b44 <USB_DevInit+0xe0>
 8003b40:	2301      	movs	r3, #1
 8003b42:	75fb      	strb	r3, [r7, #23]
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 f91f 	bl	8003d88 <USB_FlushRxFifo>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d001      	beq.n	8003b54 <USB_DevInit+0xf0>
 8003b50:	2301      	movs	r3, #1
 8003b52:	75fb      	strb	r3, [r7, #23]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	6113      	str	r3, [r2, #16]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b66:	461a      	mov	r2, r3
 8003b68:	2300      	movs	r3, #0
 8003b6a:	6153      	str	r3, [r2, #20]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b72:	461a      	mov	r2, r3
 8003b74:	2300      	movs	r3, #0
 8003b76:	61d3      	str	r3, [r2, #28]
 8003b78:	2300      	movs	r3, #0
 8003b7a:	613b      	str	r3, [r7, #16]
 8003b7c:	e043      	b.n	8003c06 <USB_DevInit+0x1a2>
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	015a      	lsls	r2, r3, #5
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	4413      	add	r3, r2
 8003b86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b94:	d118      	bne.n	8003bc8 <USB_DevInit+0x164>
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d10a      	bne.n	8003bb2 <USB_DevInit+0x14e>
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	015a      	lsls	r2, r3, #5
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ba8:	461a      	mov	r2, r3
 8003baa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003bae:	6013      	str	r3, [r2, #0]
 8003bb0:	e013      	b.n	8003bda <USB_DevInit+0x176>
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	015a      	lsls	r2, r3, #5
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	4413      	add	r3, r2
 8003bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003bc4:	6013      	str	r3, [r2, #0]
 8003bc6:	e008      	b.n	8003bda <USB_DevInit+0x176>
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	015a      	lsls	r2, r3, #5
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	4413      	add	r3, r2
 8003bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	6013      	str	r3, [r2, #0]
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	015a      	lsls	r2, r3, #5
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	4413      	add	r3, r2
 8003be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003be6:	461a      	mov	r2, r3
 8003be8:	2300      	movs	r3, #0
 8003bea:	6113      	str	r3, [r2, #16]
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	015a      	lsls	r2, r3, #5
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003bfe:	6093      	str	r3, [r2, #8]
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	3301      	adds	r3, #1
 8003c04:	613b      	str	r3, [r7, #16]
 8003c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d3b7      	bcc.n	8003b7e <USB_DevInit+0x11a>
 8003c0e:	2300      	movs	r3, #0
 8003c10:	613b      	str	r3, [r7, #16]
 8003c12:	e043      	b.n	8003c9c <USB_DevInit+0x238>
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	015a      	lsls	r2, r3, #5
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c2a:	d118      	bne.n	8003c5e <USB_DevInit+0x1fa>
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d10a      	bne.n	8003c48 <USB_DevInit+0x1e4>
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	015a      	lsls	r2, r3, #5
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	4413      	add	r3, r2
 8003c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c3e:	461a      	mov	r2, r3
 8003c40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c44:	6013      	str	r3, [r2, #0]
 8003c46:	e013      	b.n	8003c70 <USB_DevInit+0x20c>
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	015a      	lsls	r2, r3, #5
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	4413      	add	r3, r2
 8003c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c54:	461a      	mov	r2, r3
 8003c56:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c5a:	6013      	str	r3, [r2, #0]
 8003c5c:	e008      	b.n	8003c70 <USB_DevInit+0x20c>
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	015a      	lsls	r2, r3, #5
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	4413      	add	r3, r2
 8003c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	6013      	str	r3, [r2, #0]
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	015a      	lsls	r2, r3, #5
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	4413      	add	r3, r2
 8003c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	2300      	movs	r3, #0
 8003c80:	6113      	str	r3, [r2, #16]
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	015a      	lsls	r2, r3, #5
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	4413      	add	r3, r2
 8003c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c8e:	461a      	mov	r2, r3
 8003c90:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c94:	6093      	str	r3, [r2, #8]
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	613b      	str	r3, [r7, #16]
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d3b7      	bcc.n	8003c14 <USB_DevInit+0x1b0>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cb2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cb6:	6113      	str	r3, [r2, #16]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	619a      	str	r2, [r3, #24]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003cc4:	615a      	str	r2, [r3, #20]
 8003cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d105      	bne.n	8003cd8 <USB_DevInit+0x274>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	f043 0210 	orr.w	r2, r3, #16
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	619a      	str	r2, [r3, #24]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	699a      	ldr	r2, [r3, #24]
 8003cdc:	4b0f      	ldr	r3, [pc, #60]	; (8003d1c <USB_DevInit+0x2b8>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	6193      	str	r3, [r2, #24]
 8003ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d005      	beq.n	8003cf6 <USB_DevInit+0x292>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	f043 0208 	orr.w	r2, r3, #8
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	619a      	str	r2, [r3, #24]
 8003cf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d107      	bne.n	8003d0c <USB_DevInit+0x2a8>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d04:	f043 0304 	orr.w	r3, r3, #4
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	6193      	str	r3, [r2, #24]
 8003d0c:	7dfb      	ldrb	r3, [r7, #23]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3718      	adds	r7, #24
 8003d12:	46bd      	mov	sp, r7
 8003d14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d18:	b004      	add	sp, #16
 8003d1a:	4770      	bx	lr
 8003d1c:	803c3800 	.word	0x803c3800

08003d20 <USB_FlushTxFifo>:
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	60fb      	str	r3, [r7, #12]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	3301      	adds	r3, #1
 8003d32:	60fb      	str	r3, [r7, #12]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	4a13      	ldr	r2, [pc, #76]	; (8003d84 <USB_FlushTxFifo+0x64>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d901      	bls.n	8003d40 <USB_FlushTxFifo+0x20>
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e01b      	b.n	8003d78 <USB_FlushTxFifo+0x58>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	daf2      	bge.n	8003d2e <USB_FlushTxFifo+0xe>
 8003d48:	2300      	movs	r3, #0
 8003d4a:	60fb      	str	r3, [r7, #12]
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	019b      	lsls	r3, r3, #6
 8003d50:	f043 0220 	orr.w	r2, r3, #32
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	611a      	str	r2, [r3, #16]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	60fb      	str	r3, [r7, #12]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	4a08      	ldr	r2, [pc, #32]	; (8003d84 <USB_FlushTxFifo+0x64>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d901      	bls.n	8003d6a <USB_FlushTxFifo+0x4a>
 8003d66:	2303      	movs	r3, #3
 8003d68:	e006      	b.n	8003d78 <USB_FlushTxFifo+0x58>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	f003 0320 	and.w	r3, r3, #32
 8003d72:	2b20      	cmp	r3, #32
 8003d74:	d0f0      	beq.n	8003d58 <USB_FlushTxFifo+0x38>
 8003d76:	2300      	movs	r3, #0
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3714      	adds	r7, #20
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr
 8003d84:	00030d40 	.word	0x00030d40

08003d88 <USB_FlushRxFifo>:
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	2300      	movs	r3, #0
 8003d92:	60fb      	str	r3, [r7, #12]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	3301      	adds	r3, #1
 8003d98:	60fb      	str	r3, [r7, #12]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	4a11      	ldr	r2, [pc, #68]	; (8003de4 <USB_FlushRxFifo+0x5c>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d901      	bls.n	8003da6 <USB_FlushRxFifo+0x1e>
 8003da2:	2303      	movs	r3, #3
 8003da4:	e018      	b.n	8003dd8 <USB_FlushRxFifo+0x50>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	daf2      	bge.n	8003d94 <USB_FlushRxFifo+0xc>
 8003dae:	2300      	movs	r3, #0
 8003db0:	60fb      	str	r3, [r7, #12]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2210      	movs	r2, #16
 8003db6:	611a      	str	r2, [r3, #16]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	3301      	adds	r3, #1
 8003dbc:	60fb      	str	r3, [r7, #12]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	4a08      	ldr	r2, [pc, #32]	; (8003de4 <USB_FlushRxFifo+0x5c>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d901      	bls.n	8003dca <USB_FlushRxFifo+0x42>
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e006      	b.n	8003dd8 <USB_FlushRxFifo+0x50>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	f003 0310 	and.w	r3, r3, #16
 8003dd2:	2b10      	cmp	r3, #16
 8003dd4:	d0f0      	beq.n	8003db8 <USB_FlushRxFifo+0x30>
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3714      	adds	r7, #20
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	00030d40 	.word	0x00030d40

08003de8 <USB_SetDevSpeed>:
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	460b      	mov	r3, r1
 8003df2:	70fb      	strb	r3, [r7, #3]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	60fb      	str	r3, [r7, #12]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	78fb      	ldrb	r3, [r7, #3]
 8003e02:	68f9      	ldr	r1, [r7, #12]
 8003e04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	600b      	str	r3, [r1, #0]
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3714      	adds	r7, #20
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr

08003e1a <USB_DevDisconnect>:
 8003e1a:	b480      	push	{r7}
 8003e1c:	b085      	sub	sp, #20
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	60fb      	str	r3, [r7, #12]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003e34:	f023 0303 	bic.w	r3, r3, #3
 8003e38:	6013      	str	r3, [r2, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e48:	f043 0302 	orr.w	r3, r3, #2
 8003e4c:	6053      	str	r3, [r2, #4]
 8003e4e:	2300      	movs	r3, #0
 8003e50:	4618      	mov	r0, r3
 8003e52:	3714      	adds	r7, #20
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <USB_GetMode>:
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	f003 0301 	and.w	r3, r3, #1
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <USB_CoreReset>:
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	2300      	movs	r3, #0
 8003e82:	60fb      	str	r3, [r7, #12]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	3301      	adds	r3, #1
 8003e88:	60fb      	str	r3, [r7, #12]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	4a13      	ldr	r2, [pc, #76]	; (8003edc <USB_CoreReset+0x64>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d901      	bls.n	8003e96 <USB_CoreReset+0x1e>
 8003e92:	2303      	movs	r3, #3
 8003e94:	e01b      	b.n	8003ece <USB_CoreReset+0x56>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	daf2      	bge.n	8003e84 <USB_CoreReset+0xc>
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	60fb      	str	r3, [r7, #12]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	f043 0201 	orr.w	r2, r3, #1
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	611a      	str	r2, [r3, #16]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	60fb      	str	r3, [r7, #12]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	4a09      	ldr	r2, [pc, #36]	; (8003edc <USB_CoreReset+0x64>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d901      	bls.n	8003ec0 <USB_CoreReset+0x48>
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e006      	b.n	8003ece <USB_CoreReset+0x56>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d0f0      	beq.n	8003eae <USB_CoreReset+0x36>
 8003ecc:	2300      	movs	r3, #0
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3714      	adds	r7, #20
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	00030d40 	.word	0x00030d40

08003ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	6039      	str	r1, [r7, #0]
 8003eea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	db0a      	blt.n	8003f0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	b2da      	uxtb	r2, r3
 8003ef8:	490c      	ldr	r1, [pc, #48]	; (8003f2c <__NVIC_SetPriority+0x4c>)
 8003efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003efe:	0112      	lsls	r2, r2, #4
 8003f00:	b2d2      	uxtb	r2, r2
 8003f02:	440b      	add	r3, r1
 8003f04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f08:	e00a      	b.n	8003f20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	b2da      	uxtb	r2, r3
 8003f0e:	4908      	ldr	r1, [pc, #32]	; (8003f30 <__NVIC_SetPriority+0x50>)
 8003f10:	79fb      	ldrb	r3, [r7, #7]
 8003f12:	f003 030f 	and.w	r3, r3, #15
 8003f16:	3b04      	subs	r3, #4
 8003f18:	0112      	lsls	r2, r2, #4
 8003f1a:	b2d2      	uxtb	r2, r2
 8003f1c:	440b      	add	r3, r1
 8003f1e:	761a      	strb	r2, [r3, #24]
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr
 8003f2c:	e000e100 	.word	0xe000e100
 8003f30:	e000ed00 	.word	0xe000ed00

08003f34 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003f38:	4b05      	ldr	r3, [pc, #20]	; (8003f50 <SysTick_Handler+0x1c>)
 8003f3a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003f3c:	f001 fcfe 	bl	800593c <xTaskGetSchedulerState>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d001      	beq.n	8003f4a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003f46:	f002 fae7 	bl	8006518 <xPortSysTickHandler>
  }
}
 8003f4a:	bf00      	nop
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	e000e010 	.word	0xe000e010

08003f54 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003f54:	b580      	push	{r7, lr}
 8003f56:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003f58:	2100      	movs	r1, #0
 8003f5a:	f06f 0004 	mvn.w	r0, #4
 8003f5e:	f7ff ffbf 	bl	8003ee0 <__NVIC_SetPriority>
#endif
}
 8003f62:	bf00      	nop
 8003f64:	bd80      	pop	{r7, pc}
	...

08003f68 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f6e:	f3ef 8305 	mrs	r3, IPSR
 8003f72:	603b      	str	r3, [r7, #0]
  return(result);
 8003f74:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d003      	beq.n	8003f82 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003f7a:	f06f 0305 	mvn.w	r3, #5
 8003f7e:	607b      	str	r3, [r7, #4]
 8003f80:	e00c      	b.n	8003f9c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003f82:	4b0a      	ldr	r3, [pc, #40]	; (8003fac <osKernelInitialize+0x44>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d105      	bne.n	8003f96 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003f8a:	4b08      	ldr	r3, [pc, #32]	; (8003fac <osKernelInitialize+0x44>)
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003f90:	2300      	movs	r3, #0
 8003f92:	607b      	str	r3, [r7, #4]
 8003f94:	e002      	b.n	8003f9c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003f96:	f04f 33ff 	mov.w	r3, #4294967295
 8003f9a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003f9c:	687b      	ldr	r3, [r7, #4]
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	20000618 	.word	0x20000618

08003fb0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fb6:	f3ef 8305 	mrs	r3, IPSR
 8003fba:	603b      	str	r3, [r7, #0]
  return(result);
 8003fbc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d003      	beq.n	8003fca <osKernelStart+0x1a>
    stat = osErrorISR;
 8003fc2:	f06f 0305 	mvn.w	r3, #5
 8003fc6:	607b      	str	r3, [r7, #4]
 8003fc8:	e010      	b.n	8003fec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003fca:	4b0b      	ldr	r3, [pc, #44]	; (8003ff8 <osKernelStart+0x48>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d109      	bne.n	8003fe6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003fd2:	f7ff ffbf 	bl	8003f54 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003fd6:	4b08      	ldr	r3, [pc, #32]	; (8003ff8 <osKernelStart+0x48>)
 8003fd8:	2202      	movs	r2, #2
 8003fda:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003fdc:	f001 f866 	bl	80050ac <vTaskStartScheduler>
      stat = osOK;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	607b      	str	r3, [r7, #4]
 8003fe4:	e002      	b.n	8003fec <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8003fea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003fec:	687b      	ldr	r3, [r7, #4]
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3708      	adds	r7, #8
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	20000618 	.word	0x20000618

08003ffc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b08e      	sub	sp, #56	; 0x38
 8004000:	af04      	add	r7, sp, #16
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004008:	2300      	movs	r3, #0
 800400a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800400c:	f3ef 8305 	mrs	r3, IPSR
 8004010:	617b      	str	r3, [r7, #20]
  return(result);
 8004012:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004014:	2b00      	cmp	r3, #0
 8004016:	d17e      	bne.n	8004116 <osThreadNew+0x11a>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d07b      	beq.n	8004116 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800401e:	2380      	movs	r3, #128	; 0x80
 8004020:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004022:	2318      	movs	r3, #24
 8004024:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004026:	2300      	movs	r3, #0
 8004028:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800402a:	f04f 33ff 	mov.w	r3, #4294967295
 800402e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d045      	beq.n	80040c2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d002      	beq.n	8004044 <osThreadNew+0x48>
        name = attr->name;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d002      	beq.n	8004052 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d008      	beq.n	800406a <osThreadNew+0x6e>
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	2b38      	cmp	r3, #56	; 0x38
 800405c:	d805      	bhi.n	800406a <osThreadNew+0x6e>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <osThreadNew+0x72>
        return (NULL);
 800406a:	2300      	movs	r3, #0
 800406c:	e054      	b.n	8004118 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d003      	beq.n	800407e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	089b      	lsrs	r3, r3, #2
 800407c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00e      	beq.n	80040a4 <osThreadNew+0xa8>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	2b5b      	cmp	r3, #91	; 0x5b
 800408c:	d90a      	bls.n	80040a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004092:	2b00      	cmp	r3, #0
 8004094:	d006      	beq.n	80040a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d002      	beq.n	80040a4 <osThreadNew+0xa8>
        mem = 1;
 800409e:	2301      	movs	r3, #1
 80040a0:	61bb      	str	r3, [r7, #24]
 80040a2:	e010      	b.n	80040c6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10c      	bne.n	80040c6 <osThreadNew+0xca>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d108      	bne.n	80040c6 <osThreadNew+0xca>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d104      	bne.n	80040c6 <osThreadNew+0xca>
          mem = 0;
 80040bc:	2300      	movs	r3, #0
 80040be:	61bb      	str	r3, [r7, #24]
 80040c0:	e001      	b.n	80040c6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80040c2:	2300      	movs	r3, #0
 80040c4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d110      	bne.n	80040ee <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80040d4:	9202      	str	r2, [sp, #8]
 80040d6:	9301      	str	r3, [sp, #4]
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	9300      	str	r3, [sp, #0]
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	6a3a      	ldr	r2, [r7, #32]
 80040e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f000 fe0c 	bl	8004d00 <xTaskCreateStatic>
 80040e8:	4603      	mov	r3, r0
 80040ea:	613b      	str	r3, [r7, #16]
 80040ec:	e013      	b.n	8004116 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d110      	bne.n	8004116 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80040f4:	6a3b      	ldr	r3, [r7, #32]
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	f107 0310 	add.w	r3, r7, #16
 80040fc:	9301      	str	r3, [sp, #4]
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	9300      	str	r3, [sp, #0]
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 fe57 	bl	8004dba <xTaskCreate>
 800410c:	4603      	mov	r3, r0
 800410e:	2b01      	cmp	r3, #1
 8004110:	d001      	beq.n	8004116 <osThreadNew+0x11a>
            hTask = NULL;
 8004112:	2300      	movs	r3, #0
 8004114:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004116:	693b      	ldr	r3, [r7, #16]
}
 8004118:	4618      	mov	r0, r3
 800411a:	3728      	adds	r7, #40	; 0x28
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004128:	f3ef 8305 	mrs	r3, IPSR
 800412c:	60bb      	str	r3, [r7, #8]
  return(result);
 800412e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004130:	2b00      	cmp	r3, #0
 8004132:	d003      	beq.n	800413c <osDelay+0x1c>
    stat = osErrorISR;
 8004134:	f06f 0305 	mvn.w	r3, #5
 8004138:	60fb      	str	r3, [r7, #12]
 800413a:	e007      	b.n	800414c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800413c:	2300      	movs	r3, #0
 800413e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d002      	beq.n	800414c <osDelay+0x2c>
      vTaskDelay(ticks);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 ff7c 	bl	8005044 <vTaskDelay>
    }
  }

  return (stat);
 800414c:	68fb      	ldr	r3, [r7, #12]
}
 800414e:	4618      	mov	r0, r3
 8004150:	3710      	adds	r7, #16
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
	...

08004158 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	4a07      	ldr	r2, [pc, #28]	; (8004184 <vApplicationGetIdleTaskMemory+0x2c>)
 8004168:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	4a06      	ldr	r2, [pc, #24]	; (8004188 <vApplicationGetIdleTaskMemory+0x30>)
 800416e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2280      	movs	r2, #128	; 0x80
 8004174:	601a      	str	r2, [r3, #0]
}
 8004176:	bf00      	nop
 8004178:	3714      	adds	r7, #20
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	2000061c 	.word	0x2000061c
 8004188:	20000678 	.word	0x20000678

0800418c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	4a07      	ldr	r2, [pc, #28]	; (80041b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800419c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	4a06      	ldr	r2, [pc, #24]	; (80041bc <vApplicationGetTimerTaskMemory+0x30>)
 80041a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041aa:	601a      	str	r2, [r3, #0]
}
 80041ac:	bf00      	nop
 80041ae:	3714      	adds	r7, #20
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr
 80041b8:	20000878 	.word	0x20000878
 80041bc:	200008d4 	.word	0x200008d4

080041c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f103 0208 	add.w	r2, r3, #8
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f04f 32ff 	mov.w	r2, #4294967295
 80041d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f103 0208 	add.w	r2, r3, #8
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f103 0208 	add.w	r2, r3, #8
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800420e:	bf00      	nop
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr

0800421a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800421a:	b480      	push	{r7}
 800421c:	b085      	sub	sp, #20
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
 8004222:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	689a      	ldr	r2, [r3, #8]
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	683a      	ldr	r2, [r7, #0]
 800423e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	683a      	ldr	r2, [r7, #0]
 8004244:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	1c5a      	adds	r2, r3, #1
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	601a      	str	r2, [r3, #0]
}
 8004256:	bf00      	nop
 8004258:	3714      	adds	r7, #20
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr

08004262 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004262:	b480      	push	{r7}
 8004264:	b085      	sub	sp, #20
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
 800426a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004278:	d103      	bne.n	8004282 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	60fb      	str	r3, [r7, #12]
 8004280:	e00c      	b.n	800429c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	3308      	adds	r3, #8
 8004286:	60fb      	str	r3, [r7, #12]
 8004288:	e002      	b.n	8004290 <vListInsert+0x2e>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	60fb      	str	r3, [r7, #12]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68ba      	ldr	r2, [r7, #8]
 8004298:	429a      	cmp	r2, r3
 800429a:	d2f6      	bcs.n	800428a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	683a      	ldr	r2, [r7, #0]
 80042aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	683a      	ldr	r2, [r7, #0]
 80042b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	1c5a      	adds	r2, r3, #1
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	601a      	str	r2, [r3, #0]
}
 80042c8:	bf00      	nop
 80042ca:	3714      	adds	r7, #20
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	6892      	ldr	r2, [r2, #8]
 80042ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	6852      	ldr	r2, [r2, #4]
 80042f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d103      	bne.n	8004308 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689a      	ldr	r2, [r3, #8]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	1e5a      	subs	r2, r3, #1
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
}
 800431c:	4618      	mov	r0, r3
 800431e:	3714      	adds	r7, #20
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10a      	bne.n	8004352 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800433c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004340:	f383 8811 	msr	BASEPRI, r3
 8004344:	f3bf 8f6f 	isb	sy
 8004348:	f3bf 8f4f 	dsb	sy
 800434c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800434e:	bf00      	nop
 8004350:	e7fe      	b.n	8004350 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004352:	f002 f84f 	bl	80063f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800435e:	68f9      	ldr	r1, [r7, #12]
 8004360:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004362:	fb01 f303 	mul.w	r3, r1, r3
 8004366:	441a      	add	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004382:	3b01      	subs	r3, #1
 8004384:	68f9      	ldr	r1, [r7, #12]
 8004386:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004388:	fb01 f303 	mul.w	r3, r1, r3
 800438c:	441a      	add	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	22ff      	movs	r2, #255	; 0xff
 8004396:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	22ff      	movs	r2, #255	; 0xff
 800439e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d114      	bne.n	80043d2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d01a      	beq.n	80043e6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	3310      	adds	r3, #16
 80043b4:	4618      	mov	r0, r3
 80043b6:	f001 f903 	bl	80055c0 <xTaskRemoveFromEventList>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d012      	beq.n	80043e6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80043c0:	4b0c      	ldr	r3, [pc, #48]	; (80043f4 <xQueueGenericReset+0xcc>)
 80043c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043c6:	601a      	str	r2, [r3, #0]
 80043c8:	f3bf 8f4f 	dsb	sy
 80043cc:	f3bf 8f6f 	isb	sy
 80043d0:	e009      	b.n	80043e6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	3310      	adds	r3, #16
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7ff fef2 	bl	80041c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	3324      	adds	r3, #36	; 0x24
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7ff feed 	bl	80041c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80043e6:	f002 f835 	bl	8006454 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80043ea:	2301      	movs	r3, #1
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3710      	adds	r7, #16
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	e000ed04 	.word	0xe000ed04

080043f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b08e      	sub	sp, #56	; 0x38
 80043fc:	af02      	add	r7, sp, #8
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	607a      	str	r2, [r7, #4]
 8004404:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d10a      	bne.n	8004422 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800440c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004410:	f383 8811 	msr	BASEPRI, r3
 8004414:	f3bf 8f6f 	isb	sy
 8004418:	f3bf 8f4f 	dsb	sy
 800441c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800441e:	bf00      	nop
 8004420:	e7fe      	b.n	8004420 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10a      	bne.n	800443e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442c:	f383 8811 	msr	BASEPRI, r3
 8004430:	f3bf 8f6f 	isb	sy
 8004434:	f3bf 8f4f 	dsb	sy
 8004438:	627b      	str	r3, [r7, #36]	; 0x24
}
 800443a:	bf00      	nop
 800443c:	e7fe      	b.n	800443c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d002      	beq.n	800444a <xQueueGenericCreateStatic+0x52>
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <xQueueGenericCreateStatic+0x56>
 800444a:	2301      	movs	r3, #1
 800444c:	e000      	b.n	8004450 <xQueueGenericCreateStatic+0x58>
 800444e:	2300      	movs	r3, #0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d10a      	bne.n	800446a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004458:	f383 8811 	msr	BASEPRI, r3
 800445c:	f3bf 8f6f 	isb	sy
 8004460:	f3bf 8f4f 	dsb	sy
 8004464:	623b      	str	r3, [r7, #32]
}
 8004466:	bf00      	nop
 8004468:	e7fe      	b.n	8004468 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d102      	bne.n	8004476 <xQueueGenericCreateStatic+0x7e>
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <xQueueGenericCreateStatic+0x82>
 8004476:	2301      	movs	r3, #1
 8004478:	e000      	b.n	800447c <xQueueGenericCreateStatic+0x84>
 800447a:	2300      	movs	r3, #0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d10a      	bne.n	8004496 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004484:	f383 8811 	msr	BASEPRI, r3
 8004488:	f3bf 8f6f 	isb	sy
 800448c:	f3bf 8f4f 	dsb	sy
 8004490:	61fb      	str	r3, [r7, #28]
}
 8004492:	bf00      	nop
 8004494:	e7fe      	b.n	8004494 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004496:	2350      	movs	r3, #80	; 0x50
 8004498:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	2b50      	cmp	r3, #80	; 0x50
 800449e:	d00a      	beq.n	80044b6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80044a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a4:	f383 8811 	msr	BASEPRI, r3
 80044a8:	f3bf 8f6f 	isb	sy
 80044ac:	f3bf 8f4f 	dsb	sy
 80044b0:	61bb      	str	r3, [r7, #24]
}
 80044b2:	bf00      	nop
 80044b4:	e7fe      	b.n	80044b4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80044b6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80044bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00d      	beq.n	80044de <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80044c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c4:	2201      	movs	r2, #1
 80044c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80044ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80044ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044d0:	9300      	str	r3, [sp, #0]
 80044d2:	4613      	mov	r3, r2
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	68b9      	ldr	r1, [r7, #8]
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f000 f805 	bl	80044e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80044de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3730      	adds	r7, #48	; 0x30
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
 80044f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d103      	bne.n	8004504 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	69ba      	ldr	r2, [r7, #24]
 8004500:	601a      	str	r2, [r3, #0]
 8004502:	e002      	b.n	800450a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	68ba      	ldr	r2, [r7, #8]
 8004514:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004516:	2101      	movs	r1, #1
 8004518:	69b8      	ldr	r0, [r7, #24]
 800451a:	f7ff ff05 	bl	8004328 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	78fa      	ldrb	r2, [r7, #3]
 8004522:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004526:	bf00      	nop
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
	...

08004530 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b08e      	sub	sp, #56	; 0x38
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
 800453c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800453e:	2300      	movs	r3, #0
 8004540:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004548:	2b00      	cmp	r3, #0
 800454a:	d10a      	bne.n	8004562 <xQueueGenericSend+0x32>
	__asm volatile
 800454c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004550:	f383 8811 	msr	BASEPRI, r3
 8004554:	f3bf 8f6f 	isb	sy
 8004558:	f3bf 8f4f 	dsb	sy
 800455c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800455e:	bf00      	nop
 8004560:	e7fe      	b.n	8004560 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d103      	bne.n	8004570 <xQueueGenericSend+0x40>
 8004568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456c:	2b00      	cmp	r3, #0
 800456e:	d101      	bne.n	8004574 <xQueueGenericSend+0x44>
 8004570:	2301      	movs	r3, #1
 8004572:	e000      	b.n	8004576 <xQueueGenericSend+0x46>
 8004574:	2300      	movs	r3, #0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d10a      	bne.n	8004590 <xQueueGenericSend+0x60>
	__asm volatile
 800457a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457e:	f383 8811 	msr	BASEPRI, r3
 8004582:	f3bf 8f6f 	isb	sy
 8004586:	f3bf 8f4f 	dsb	sy
 800458a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800458c:	bf00      	nop
 800458e:	e7fe      	b.n	800458e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	2b02      	cmp	r3, #2
 8004594:	d103      	bne.n	800459e <xQueueGenericSend+0x6e>
 8004596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800459a:	2b01      	cmp	r3, #1
 800459c:	d101      	bne.n	80045a2 <xQueueGenericSend+0x72>
 800459e:	2301      	movs	r3, #1
 80045a0:	e000      	b.n	80045a4 <xQueueGenericSend+0x74>
 80045a2:	2300      	movs	r3, #0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10a      	bne.n	80045be <xQueueGenericSend+0x8e>
	__asm volatile
 80045a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ac:	f383 8811 	msr	BASEPRI, r3
 80045b0:	f3bf 8f6f 	isb	sy
 80045b4:	f3bf 8f4f 	dsb	sy
 80045b8:	623b      	str	r3, [r7, #32]
}
 80045ba:	bf00      	nop
 80045bc:	e7fe      	b.n	80045bc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045be:	f001 f9bd 	bl	800593c <xTaskGetSchedulerState>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d102      	bne.n	80045ce <xQueueGenericSend+0x9e>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <xQueueGenericSend+0xa2>
 80045ce:	2301      	movs	r3, #1
 80045d0:	e000      	b.n	80045d4 <xQueueGenericSend+0xa4>
 80045d2:	2300      	movs	r3, #0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10a      	bne.n	80045ee <xQueueGenericSend+0xbe>
	__asm volatile
 80045d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045dc:	f383 8811 	msr	BASEPRI, r3
 80045e0:	f3bf 8f6f 	isb	sy
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	61fb      	str	r3, [r7, #28]
}
 80045ea:	bf00      	nop
 80045ec:	e7fe      	b.n	80045ec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80045ee:	f001 ff01 	bl	80063f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80045f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d302      	bcc.n	8004604 <xQueueGenericSend+0xd4>
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	2b02      	cmp	r3, #2
 8004602:	d129      	bne.n	8004658 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004604:	683a      	ldr	r2, [r7, #0]
 8004606:	68b9      	ldr	r1, [r7, #8]
 8004608:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800460a:	f000 fa0b 	bl	8004a24 <prvCopyDataToQueue>
 800460e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004614:	2b00      	cmp	r3, #0
 8004616:	d010      	beq.n	800463a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461a:	3324      	adds	r3, #36	; 0x24
 800461c:	4618      	mov	r0, r3
 800461e:	f000 ffcf 	bl	80055c0 <xTaskRemoveFromEventList>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d013      	beq.n	8004650 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004628:	4b3f      	ldr	r3, [pc, #252]	; (8004728 <xQueueGenericSend+0x1f8>)
 800462a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800462e:	601a      	str	r2, [r3, #0]
 8004630:	f3bf 8f4f 	dsb	sy
 8004634:	f3bf 8f6f 	isb	sy
 8004638:	e00a      	b.n	8004650 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800463a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800463c:	2b00      	cmp	r3, #0
 800463e:	d007      	beq.n	8004650 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004640:	4b39      	ldr	r3, [pc, #228]	; (8004728 <xQueueGenericSend+0x1f8>)
 8004642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004646:	601a      	str	r2, [r3, #0]
 8004648:	f3bf 8f4f 	dsb	sy
 800464c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004650:	f001 ff00 	bl	8006454 <vPortExitCritical>
				return pdPASS;
 8004654:	2301      	movs	r3, #1
 8004656:	e063      	b.n	8004720 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d103      	bne.n	8004666 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800465e:	f001 fef9 	bl	8006454 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004662:	2300      	movs	r3, #0
 8004664:	e05c      	b.n	8004720 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004668:	2b00      	cmp	r3, #0
 800466a:	d106      	bne.n	800467a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800466c:	f107 0314 	add.w	r3, r7, #20
 8004670:	4618      	mov	r0, r3
 8004672:	f001 f809 	bl	8005688 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004676:	2301      	movs	r3, #1
 8004678:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800467a:	f001 feeb 	bl	8006454 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800467e:	f000 fd7b 	bl	8005178 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004682:	f001 feb7 	bl	80063f4 <vPortEnterCritical>
 8004686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004688:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800468c:	b25b      	sxtb	r3, r3
 800468e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004692:	d103      	bne.n	800469c <xQueueGenericSend+0x16c>
 8004694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004696:	2200      	movs	r2, #0
 8004698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800469c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800469e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046a2:	b25b      	sxtb	r3, r3
 80046a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a8:	d103      	bne.n	80046b2 <xQueueGenericSend+0x182>
 80046aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046b2:	f001 fecf 	bl	8006454 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80046b6:	1d3a      	adds	r2, r7, #4
 80046b8:	f107 0314 	add.w	r3, r7, #20
 80046bc:	4611      	mov	r1, r2
 80046be:	4618      	mov	r0, r3
 80046c0:	f000 fff8 	bl	80056b4 <xTaskCheckForTimeOut>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d124      	bne.n	8004714 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80046ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046cc:	f000 faa2 	bl	8004c14 <prvIsQueueFull>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d018      	beq.n	8004708 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80046d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d8:	3310      	adds	r3, #16
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	4611      	mov	r1, r2
 80046de:	4618      	mov	r0, r3
 80046e0:	f000 ff1e 	bl	8005520 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80046e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046e6:	f000 fa2d 	bl	8004b44 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80046ea:	f000 fd53 	bl	8005194 <xTaskResumeAll>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f47f af7c 	bne.w	80045ee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80046f6:	4b0c      	ldr	r3, [pc, #48]	; (8004728 <xQueueGenericSend+0x1f8>)
 80046f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046fc:	601a      	str	r2, [r3, #0]
 80046fe:	f3bf 8f4f 	dsb	sy
 8004702:	f3bf 8f6f 	isb	sy
 8004706:	e772      	b.n	80045ee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004708:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800470a:	f000 fa1b 	bl	8004b44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800470e:	f000 fd41 	bl	8005194 <xTaskResumeAll>
 8004712:	e76c      	b.n	80045ee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004714:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004716:	f000 fa15 	bl	8004b44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800471a:	f000 fd3b 	bl	8005194 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800471e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004720:	4618      	mov	r0, r3
 8004722:	3738      	adds	r7, #56	; 0x38
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	e000ed04 	.word	0xe000ed04

0800472c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b090      	sub	sp, #64	; 0x40
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]
 8004738:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800473e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004740:	2b00      	cmp	r3, #0
 8004742:	d10a      	bne.n	800475a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004748:	f383 8811 	msr	BASEPRI, r3
 800474c:	f3bf 8f6f 	isb	sy
 8004750:	f3bf 8f4f 	dsb	sy
 8004754:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004756:	bf00      	nop
 8004758:	e7fe      	b.n	8004758 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d103      	bne.n	8004768 <xQueueGenericSendFromISR+0x3c>
 8004760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004764:	2b00      	cmp	r3, #0
 8004766:	d101      	bne.n	800476c <xQueueGenericSendFromISR+0x40>
 8004768:	2301      	movs	r3, #1
 800476a:	e000      	b.n	800476e <xQueueGenericSendFromISR+0x42>
 800476c:	2300      	movs	r3, #0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10a      	bne.n	8004788 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004776:	f383 8811 	msr	BASEPRI, r3
 800477a:	f3bf 8f6f 	isb	sy
 800477e:	f3bf 8f4f 	dsb	sy
 8004782:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004784:	bf00      	nop
 8004786:	e7fe      	b.n	8004786 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	2b02      	cmp	r3, #2
 800478c:	d103      	bne.n	8004796 <xQueueGenericSendFromISR+0x6a>
 800478e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004792:	2b01      	cmp	r3, #1
 8004794:	d101      	bne.n	800479a <xQueueGenericSendFromISR+0x6e>
 8004796:	2301      	movs	r3, #1
 8004798:	e000      	b.n	800479c <xQueueGenericSendFromISR+0x70>
 800479a:	2300      	movs	r3, #0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d10a      	bne.n	80047b6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80047a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a4:	f383 8811 	msr	BASEPRI, r3
 80047a8:	f3bf 8f6f 	isb	sy
 80047ac:	f3bf 8f4f 	dsb	sy
 80047b0:	623b      	str	r3, [r7, #32]
}
 80047b2:	bf00      	nop
 80047b4:	e7fe      	b.n	80047b4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80047b6:	f001 feff 	bl	80065b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80047ba:	f3ef 8211 	mrs	r2, BASEPRI
 80047be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c2:	f383 8811 	msr	BASEPRI, r3
 80047c6:	f3bf 8f6f 	isb	sy
 80047ca:	f3bf 8f4f 	dsb	sy
 80047ce:	61fa      	str	r2, [r7, #28]
 80047d0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80047d2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80047d4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80047d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047de:	429a      	cmp	r2, r3
 80047e0:	d302      	bcc.n	80047e8 <xQueueGenericSendFromISR+0xbc>
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d12f      	bne.n	8004848 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80047e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	68b9      	ldr	r1, [r7, #8]
 80047fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80047fe:	f000 f911 	bl	8004a24 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004802:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800480a:	d112      	bne.n	8004832 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800480c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800480e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004810:	2b00      	cmp	r3, #0
 8004812:	d016      	beq.n	8004842 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004816:	3324      	adds	r3, #36	; 0x24
 8004818:	4618      	mov	r0, r3
 800481a:	f000 fed1 	bl	80055c0 <xTaskRemoveFromEventList>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00e      	beq.n	8004842 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00b      	beq.n	8004842 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	601a      	str	r2, [r3, #0]
 8004830:	e007      	b.n	8004842 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004832:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004836:	3301      	adds	r3, #1
 8004838:	b2db      	uxtb	r3, r3
 800483a:	b25a      	sxtb	r2, r3
 800483c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800483e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004842:	2301      	movs	r3, #1
 8004844:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004846:	e001      	b.n	800484c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004848:	2300      	movs	r3, #0
 800484a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800484c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800484e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004856:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800485a:	4618      	mov	r0, r3
 800485c:	3740      	adds	r7, #64	; 0x40
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
	...

08004864 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b08c      	sub	sp, #48	; 0x30
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004870:	2300      	movs	r3, #0
 8004872:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487a:	2b00      	cmp	r3, #0
 800487c:	d10a      	bne.n	8004894 <xQueueReceive+0x30>
	__asm volatile
 800487e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004882:	f383 8811 	msr	BASEPRI, r3
 8004886:	f3bf 8f6f 	isb	sy
 800488a:	f3bf 8f4f 	dsb	sy
 800488e:	623b      	str	r3, [r7, #32]
}
 8004890:	bf00      	nop
 8004892:	e7fe      	b.n	8004892 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d103      	bne.n	80048a2 <xQueueReceive+0x3e>
 800489a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d101      	bne.n	80048a6 <xQueueReceive+0x42>
 80048a2:	2301      	movs	r3, #1
 80048a4:	e000      	b.n	80048a8 <xQueueReceive+0x44>
 80048a6:	2300      	movs	r3, #0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d10a      	bne.n	80048c2 <xQueueReceive+0x5e>
	__asm volatile
 80048ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b0:	f383 8811 	msr	BASEPRI, r3
 80048b4:	f3bf 8f6f 	isb	sy
 80048b8:	f3bf 8f4f 	dsb	sy
 80048bc:	61fb      	str	r3, [r7, #28]
}
 80048be:	bf00      	nop
 80048c0:	e7fe      	b.n	80048c0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80048c2:	f001 f83b 	bl	800593c <xTaskGetSchedulerState>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d102      	bne.n	80048d2 <xQueueReceive+0x6e>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <xQueueReceive+0x72>
 80048d2:	2301      	movs	r3, #1
 80048d4:	e000      	b.n	80048d8 <xQueueReceive+0x74>
 80048d6:	2300      	movs	r3, #0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d10a      	bne.n	80048f2 <xQueueReceive+0x8e>
	__asm volatile
 80048dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e0:	f383 8811 	msr	BASEPRI, r3
 80048e4:	f3bf 8f6f 	isb	sy
 80048e8:	f3bf 8f4f 	dsb	sy
 80048ec:	61bb      	str	r3, [r7, #24]
}
 80048ee:	bf00      	nop
 80048f0:	e7fe      	b.n	80048f0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80048f2:	f001 fd7f 	bl	80063f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d01f      	beq.n	8004942 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004902:	68b9      	ldr	r1, [r7, #8]
 8004904:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004906:	f000 f8f7 	bl	8004af8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800490a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490c:	1e5a      	subs	r2, r3, #1
 800490e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004910:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00f      	beq.n	800493a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800491a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800491c:	3310      	adds	r3, #16
 800491e:	4618      	mov	r0, r3
 8004920:	f000 fe4e 	bl	80055c0 <xTaskRemoveFromEventList>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d007      	beq.n	800493a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800492a:	4b3d      	ldr	r3, [pc, #244]	; (8004a20 <xQueueReceive+0x1bc>)
 800492c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004930:	601a      	str	r2, [r3, #0]
 8004932:	f3bf 8f4f 	dsb	sy
 8004936:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800493a:	f001 fd8b 	bl	8006454 <vPortExitCritical>
				return pdPASS;
 800493e:	2301      	movs	r3, #1
 8004940:	e069      	b.n	8004a16 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d103      	bne.n	8004950 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004948:	f001 fd84 	bl	8006454 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800494c:	2300      	movs	r3, #0
 800494e:	e062      	b.n	8004a16 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004952:	2b00      	cmp	r3, #0
 8004954:	d106      	bne.n	8004964 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004956:	f107 0310 	add.w	r3, r7, #16
 800495a:	4618      	mov	r0, r3
 800495c:	f000 fe94 	bl	8005688 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004960:	2301      	movs	r3, #1
 8004962:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004964:	f001 fd76 	bl	8006454 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004968:	f000 fc06 	bl	8005178 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800496c:	f001 fd42 	bl	80063f4 <vPortEnterCritical>
 8004970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004972:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004976:	b25b      	sxtb	r3, r3
 8004978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497c:	d103      	bne.n	8004986 <xQueueReceive+0x122>
 800497e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004980:	2200      	movs	r2, #0
 8004982:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004988:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800498c:	b25b      	sxtb	r3, r3
 800498e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004992:	d103      	bne.n	800499c <xQueueReceive+0x138>
 8004994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004996:	2200      	movs	r2, #0
 8004998:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800499c:	f001 fd5a 	bl	8006454 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80049a0:	1d3a      	adds	r2, r7, #4
 80049a2:	f107 0310 	add.w	r3, r7, #16
 80049a6:	4611      	mov	r1, r2
 80049a8:	4618      	mov	r0, r3
 80049aa:	f000 fe83 	bl	80056b4 <xTaskCheckForTimeOut>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d123      	bne.n	80049fc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049b6:	f000 f917 	bl	8004be8 <prvIsQueueEmpty>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d017      	beq.n	80049f0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80049c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c2:	3324      	adds	r3, #36	; 0x24
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	4611      	mov	r1, r2
 80049c8:	4618      	mov	r0, r3
 80049ca:	f000 fda9 	bl	8005520 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80049ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049d0:	f000 f8b8 	bl	8004b44 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80049d4:	f000 fbde 	bl	8005194 <xTaskResumeAll>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d189      	bne.n	80048f2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80049de:	4b10      	ldr	r3, [pc, #64]	; (8004a20 <xQueueReceive+0x1bc>)
 80049e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049e4:	601a      	str	r2, [r3, #0]
 80049e6:	f3bf 8f4f 	dsb	sy
 80049ea:	f3bf 8f6f 	isb	sy
 80049ee:	e780      	b.n	80048f2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80049f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049f2:	f000 f8a7 	bl	8004b44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049f6:	f000 fbcd 	bl	8005194 <xTaskResumeAll>
 80049fa:	e77a      	b.n	80048f2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80049fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049fe:	f000 f8a1 	bl	8004b44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a02:	f000 fbc7 	bl	8005194 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a08:	f000 f8ee 	bl	8004be8 <prvIsQueueEmpty>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	f43f af6f 	beq.w	80048f2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004a14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3730      	adds	r7, #48	; 0x30
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	e000ed04 	.word	0xe000ed04

08004a24 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b086      	sub	sp, #24
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004a30:	2300      	movs	r3, #0
 8004a32:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a38:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10d      	bne.n	8004a5e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d14d      	bne.n	8004ae6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 ff92 	bl	8005978 <xTaskPriorityDisinherit>
 8004a54:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	609a      	str	r2, [r3, #8]
 8004a5c:	e043      	b.n	8004ae6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d119      	bne.n	8004a98 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6858      	ldr	r0, [r3, #4]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	68b9      	ldr	r1, [r7, #8]
 8004a70:	f001 fff8 	bl	8006a64 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	685a      	ldr	r2, [r3, #4]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7c:	441a      	add	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	685a      	ldr	r2, [r3, #4]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d32b      	bcc.n	8004ae6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	605a      	str	r2, [r3, #4]
 8004a96:	e026      	b.n	8004ae6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	68d8      	ldr	r0, [r3, #12]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	68b9      	ldr	r1, [r7, #8]
 8004aa4:	f001 ffde 	bl	8006a64 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	68da      	ldr	r2, [r3, #12]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab0:	425b      	negs	r3, r3
 8004ab2:	441a      	add	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	68da      	ldr	r2, [r3, #12]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d207      	bcs.n	8004ad4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	689a      	ldr	r2, [r3, #8]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004acc:	425b      	negs	r3, r3
 8004ace:	441a      	add	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d105      	bne.n	8004ae6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d002      	beq.n	8004ae6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	1c5a      	adds	r2, r3, #1
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004aee:	697b      	ldr	r3, [r7, #20]
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3718      	adds	r7, #24
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d018      	beq.n	8004b3c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68da      	ldr	r2, [r3, #12]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b12:	441a      	add	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	68da      	ldr	r2, [r3, #12]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d303      	bcc.n	8004b2c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68d9      	ldr	r1, [r3, #12]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b34:	461a      	mov	r2, r3
 8004b36:	6838      	ldr	r0, [r7, #0]
 8004b38:	f001 ff94 	bl	8006a64 <memcpy>
	}
}
 8004b3c:	bf00      	nop
 8004b3e:	3708      	adds	r7, #8
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004b4c:	f001 fc52 	bl	80063f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b56:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b58:	e011      	b.n	8004b7e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d012      	beq.n	8004b88 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	3324      	adds	r3, #36	; 0x24
 8004b66:	4618      	mov	r0, r3
 8004b68:	f000 fd2a 	bl	80055c0 <xTaskRemoveFromEventList>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d001      	beq.n	8004b76 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004b72:	f000 fe01 	bl	8005778 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004b76:	7bfb      	ldrb	r3, [r7, #15]
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	dce9      	bgt.n	8004b5a <prvUnlockQueue+0x16>
 8004b86:	e000      	b.n	8004b8a <prvUnlockQueue+0x46>
					break;
 8004b88:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	22ff      	movs	r2, #255	; 0xff
 8004b8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004b92:	f001 fc5f 	bl	8006454 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004b96:	f001 fc2d 	bl	80063f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ba0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ba2:	e011      	b.n	8004bc8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d012      	beq.n	8004bd2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	3310      	adds	r3, #16
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f000 fd05 	bl	80055c0 <xTaskRemoveFromEventList>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d001      	beq.n	8004bc0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004bbc:	f000 fddc 	bl	8005778 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004bc0:	7bbb      	ldrb	r3, [r7, #14]
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004bc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	dce9      	bgt.n	8004ba4 <prvUnlockQueue+0x60>
 8004bd0:	e000      	b.n	8004bd4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004bd2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	22ff      	movs	r2, #255	; 0xff
 8004bd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004bdc:	f001 fc3a 	bl	8006454 <vPortExitCritical>
}
 8004be0:	bf00      	nop
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004bf0:	f001 fc00 	bl	80063f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d102      	bne.n	8004c02 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	60fb      	str	r3, [r7, #12]
 8004c00:	e001      	b.n	8004c06 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004c02:	2300      	movs	r3, #0
 8004c04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c06:	f001 fc25 	bl	8006454 <vPortExitCritical>

	return xReturn;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3710      	adds	r7, #16
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c1c:	f001 fbea 	bl	80063f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d102      	bne.n	8004c32 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	60fb      	str	r3, [r7, #12]
 8004c30:	e001      	b.n	8004c36 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004c32:	2300      	movs	r3, #0
 8004c34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c36:	f001 fc0d 	bl	8006454 <vPortExitCritical>

	return xReturn;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c4e:	2300      	movs	r3, #0
 8004c50:	60fb      	str	r3, [r7, #12]
 8004c52:	e014      	b.n	8004c7e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004c54:	4a0f      	ldr	r2, [pc, #60]	; (8004c94 <vQueueAddToRegistry+0x50>)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d10b      	bne.n	8004c78 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004c60:	490c      	ldr	r1, [pc, #48]	; (8004c94 <vQueueAddToRegistry+0x50>)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004c6a:	4a0a      	ldr	r2, [pc, #40]	; (8004c94 <vQueueAddToRegistry+0x50>)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	00db      	lsls	r3, r3, #3
 8004c70:	4413      	add	r3, r2
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004c76:	e006      	b.n	8004c86 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	60fb      	str	r3, [r7, #12]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2b07      	cmp	r3, #7
 8004c82:	d9e7      	bls.n	8004c54 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004c84:	bf00      	nop
 8004c86:	bf00      	nop
 8004c88:	3714      	adds	r7, #20
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	20000cd4 	.word	0x20000cd4

08004c98 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b086      	sub	sp, #24
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004ca8:	f001 fba4 	bl	80063f4 <vPortEnterCritical>
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cb2:	b25b      	sxtb	r3, r3
 8004cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb8:	d103      	bne.n	8004cc2 <vQueueWaitForMessageRestricted+0x2a>
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cc8:	b25b      	sxtb	r3, r3
 8004cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cce:	d103      	bne.n	8004cd8 <vQueueWaitForMessageRestricted+0x40>
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cd8:	f001 fbbc 	bl	8006454 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d106      	bne.n	8004cf2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	3324      	adds	r3, #36	; 0x24
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	68b9      	ldr	r1, [r7, #8]
 8004cec:	4618      	mov	r0, r3
 8004cee:	f000 fc3b 	bl	8005568 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004cf2:	6978      	ldr	r0, [r7, #20]
 8004cf4:	f7ff ff26 	bl	8004b44 <prvUnlockQueue>
	}
 8004cf8:	bf00      	nop
 8004cfa:	3718      	adds	r7, #24
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b08e      	sub	sp, #56	; 0x38
 8004d04:	af04      	add	r7, sp, #16
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
 8004d0c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d10a      	bne.n	8004d2a <xTaskCreateStatic+0x2a>
	__asm volatile
 8004d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d18:	f383 8811 	msr	BASEPRI, r3
 8004d1c:	f3bf 8f6f 	isb	sy
 8004d20:	f3bf 8f4f 	dsb	sy
 8004d24:	623b      	str	r3, [r7, #32]
}
 8004d26:	bf00      	nop
 8004d28:	e7fe      	b.n	8004d28 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10a      	bne.n	8004d46 <xTaskCreateStatic+0x46>
	__asm volatile
 8004d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d34:	f383 8811 	msr	BASEPRI, r3
 8004d38:	f3bf 8f6f 	isb	sy
 8004d3c:	f3bf 8f4f 	dsb	sy
 8004d40:	61fb      	str	r3, [r7, #28]
}
 8004d42:	bf00      	nop
 8004d44:	e7fe      	b.n	8004d44 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004d46:	235c      	movs	r3, #92	; 0x5c
 8004d48:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	2b5c      	cmp	r3, #92	; 0x5c
 8004d4e:	d00a      	beq.n	8004d66 <xTaskCreateStatic+0x66>
	__asm volatile
 8004d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d54:	f383 8811 	msr	BASEPRI, r3
 8004d58:	f3bf 8f6f 	isb	sy
 8004d5c:	f3bf 8f4f 	dsb	sy
 8004d60:	61bb      	str	r3, [r7, #24]
}
 8004d62:	bf00      	nop
 8004d64:	e7fe      	b.n	8004d64 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004d66:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d01e      	beq.n	8004dac <xTaskCreateStatic+0xac>
 8004d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d01b      	beq.n	8004dac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d76:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d7c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d80:	2202      	movs	r2, #2
 8004d82:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004d86:	2300      	movs	r3, #0
 8004d88:	9303      	str	r3, [sp, #12]
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8c:	9302      	str	r3, [sp, #8]
 8004d8e:	f107 0314 	add.w	r3, r7, #20
 8004d92:	9301      	str	r3, [sp, #4]
 8004d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d96:	9300      	str	r3, [sp, #0]
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	68b9      	ldr	r1, [r7, #8]
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f000 f850 	bl	8004e44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004da4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004da6:	f000 f8dd 	bl	8004f64 <prvAddNewTaskToReadyList>
 8004daa:	e001      	b.n	8004db0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004dac:	2300      	movs	r3, #0
 8004dae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004db0:	697b      	ldr	r3, [r7, #20]
	}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3728      	adds	r7, #40	; 0x28
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}

08004dba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	b08c      	sub	sp, #48	; 0x30
 8004dbe:	af04      	add	r7, sp, #16
 8004dc0:	60f8      	str	r0, [r7, #12]
 8004dc2:	60b9      	str	r1, [r7, #8]
 8004dc4:	603b      	str	r3, [r7, #0]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004dca:	88fb      	ldrh	r3, [r7, #6]
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f001 fc32 	bl	8006638 <pvPortMalloc>
 8004dd4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d00e      	beq.n	8004dfa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004ddc:	205c      	movs	r0, #92	; 0x5c
 8004dde:	f001 fc2b 	bl	8006638 <pvPortMalloc>
 8004de2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d003      	beq.n	8004df2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	631a      	str	r2, [r3, #48]	; 0x30
 8004df0:	e005      	b.n	8004dfe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004df2:	6978      	ldr	r0, [r7, #20]
 8004df4:	f001 fcec 	bl	80067d0 <vPortFree>
 8004df8:	e001      	b.n	8004dfe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d017      	beq.n	8004e34 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004e0c:	88fa      	ldrh	r2, [r7, #6]
 8004e0e:	2300      	movs	r3, #0
 8004e10:	9303      	str	r3, [sp, #12]
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	9302      	str	r3, [sp, #8]
 8004e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e18:	9301      	str	r3, [sp, #4]
 8004e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1c:	9300      	str	r3, [sp, #0]
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	68b9      	ldr	r1, [r7, #8]
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	f000 f80e 	bl	8004e44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e28:	69f8      	ldr	r0, [r7, #28]
 8004e2a:	f000 f89b 	bl	8004f64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	61bb      	str	r3, [r7, #24]
 8004e32:	e002      	b.n	8004e3a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004e34:	f04f 33ff 	mov.w	r3, #4294967295
 8004e38:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004e3a:	69bb      	ldr	r3, [r7, #24]
	}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3720      	adds	r7, #32
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b088      	sub	sp, #32
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	607a      	str	r2, [r7, #4]
 8004e50:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e54:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	21a5      	movs	r1, #165	; 0xa5
 8004e5e:	f001 fdd5 	bl	8006a0c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4413      	add	r3, r2
 8004e72:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	f023 0307 	bic.w	r3, r3, #7
 8004e7a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	f003 0307 	and.w	r3, r3, #7
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00a      	beq.n	8004e9c <prvInitialiseNewTask+0x58>
	__asm volatile
 8004e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e8a:	f383 8811 	msr	BASEPRI, r3
 8004e8e:	f3bf 8f6f 	isb	sy
 8004e92:	f3bf 8f4f 	dsb	sy
 8004e96:	617b      	str	r3, [r7, #20]
}
 8004e98:	bf00      	nop
 8004e9a:	e7fe      	b.n	8004e9a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d01f      	beq.n	8004ee2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	61fb      	str	r3, [r7, #28]
 8004ea6:	e012      	b.n	8004ece <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004ea8:	68ba      	ldr	r2, [r7, #8]
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	4413      	add	r3, r2
 8004eae:	7819      	ldrb	r1, [r3, #0]
 8004eb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	3334      	adds	r3, #52	; 0x34
 8004eb8:	460a      	mov	r2, r1
 8004eba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004ebc:	68ba      	ldr	r2, [r7, #8]
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d006      	beq.n	8004ed6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	3301      	adds	r3, #1
 8004ecc:	61fb      	str	r3, [r7, #28]
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	2b0f      	cmp	r3, #15
 8004ed2:	d9e9      	bls.n	8004ea8 <prvInitialiseNewTask+0x64>
 8004ed4:	e000      	b.n	8004ed8 <prvInitialiseNewTask+0x94>
			{
				break;
 8004ed6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ee0:	e003      	b.n	8004eea <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eec:	2b37      	cmp	r3, #55	; 0x37
 8004eee:	d901      	bls.n	8004ef4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004ef0:	2337      	movs	r3, #55	; 0x37
 8004ef2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ef8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004efe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f02:	2200      	movs	r2, #0
 8004f04:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f08:	3304      	adds	r3, #4
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7ff f978 	bl	8004200 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f12:	3318      	adds	r3, #24
 8004f14:	4618      	mov	r0, r3
 8004f16:	f7ff f973 	bl	8004200 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f1e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f22:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f28:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f2e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f32:	2200      	movs	r2, #0
 8004f34:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004f3e:	683a      	ldr	r2, [r7, #0]
 8004f40:	68f9      	ldr	r1, [r7, #12]
 8004f42:	69b8      	ldr	r0, [r7, #24]
 8004f44:	f001 f928 	bl	8006198 <pxPortInitialiseStack>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d002      	beq.n	8004f5a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f5a:	bf00      	nop
 8004f5c:	3720      	adds	r7, #32
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
	...

08004f64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004f6c:	f001 fa42 	bl	80063f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004f70:	4b2d      	ldr	r3, [pc, #180]	; (8005028 <prvAddNewTaskToReadyList+0xc4>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	3301      	adds	r3, #1
 8004f76:	4a2c      	ldr	r2, [pc, #176]	; (8005028 <prvAddNewTaskToReadyList+0xc4>)
 8004f78:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004f7a:	4b2c      	ldr	r3, [pc, #176]	; (800502c <prvAddNewTaskToReadyList+0xc8>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d109      	bne.n	8004f96 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004f82:	4a2a      	ldr	r2, [pc, #168]	; (800502c <prvAddNewTaskToReadyList+0xc8>)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004f88:	4b27      	ldr	r3, [pc, #156]	; (8005028 <prvAddNewTaskToReadyList+0xc4>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d110      	bne.n	8004fb2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004f90:	f000 fc16 	bl	80057c0 <prvInitialiseTaskLists>
 8004f94:	e00d      	b.n	8004fb2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004f96:	4b26      	ldr	r3, [pc, #152]	; (8005030 <prvAddNewTaskToReadyList+0xcc>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d109      	bne.n	8004fb2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004f9e:	4b23      	ldr	r3, [pc, #140]	; (800502c <prvAddNewTaskToReadyList+0xc8>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d802      	bhi.n	8004fb2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004fac:	4a1f      	ldr	r2, [pc, #124]	; (800502c <prvAddNewTaskToReadyList+0xc8>)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004fb2:	4b20      	ldr	r3, [pc, #128]	; (8005034 <prvAddNewTaskToReadyList+0xd0>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	4a1e      	ldr	r2, [pc, #120]	; (8005034 <prvAddNewTaskToReadyList+0xd0>)
 8004fba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004fbc:	4b1d      	ldr	r3, [pc, #116]	; (8005034 <prvAddNewTaskToReadyList+0xd0>)
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fc8:	4b1b      	ldr	r3, [pc, #108]	; (8005038 <prvAddNewTaskToReadyList+0xd4>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d903      	bls.n	8004fd8 <prvAddNewTaskToReadyList+0x74>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd4:	4a18      	ldr	r2, [pc, #96]	; (8005038 <prvAddNewTaskToReadyList+0xd4>)
 8004fd6:	6013      	str	r3, [r2, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fdc:	4613      	mov	r3, r2
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	4413      	add	r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4a15      	ldr	r2, [pc, #84]	; (800503c <prvAddNewTaskToReadyList+0xd8>)
 8004fe6:	441a      	add	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	3304      	adds	r3, #4
 8004fec:	4619      	mov	r1, r3
 8004fee:	4610      	mov	r0, r2
 8004ff0:	f7ff f913 	bl	800421a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004ff4:	f001 fa2e 	bl	8006454 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004ff8:	4b0d      	ldr	r3, [pc, #52]	; (8005030 <prvAddNewTaskToReadyList+0xcc>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00e      	beq.n	800501e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005000:	4b0a      	ldr	r3, [pc, #40]	; (800502c <prvAddNewTaskToReadyList+0xc8>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500a:	429a      	cmp	r2, r3
 800500c:	d207      	bcs.n	800501e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800500e:	4b0c      	ldr	r3, [pc, #48]	; (8005040 <prvAddNewTaskToReadyList+0xdc>)
 8005010:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005014:	601a      	str	r2, [r3, #0]
 8005016:	f3bf 8f4f 	dsb	sy
 800501a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800501e:	bf00      	nop
 8005020:	3708      	adds	r7, #8
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	200011e8 	.word	0x200011e8
 800502c:	20000d14 	.word	0x20000d14
 8005030:	200011f4 	.word	0x200011f4
 8005034:	20001204 	.word	0x20001204
 8005038:	200011f0 	.word	0x200011f0
 800503c:	20000d18 	.word	0x20000d18
 8005040:	e000ed04 	.word	0xe000ed04

08005044 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800504c:	2300      	movs	r3, #0
 800504e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d017      	beq.n	8005086 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005056:	4b13      	ldr	r3, [pc, #76]	; (80050a4 <vTaskDelay+0x60>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00a      	beq.n	8005074 <vTaskDelay+0x30>
	__asm volatile
 800505e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005062:	f383 8811 	msr	BASEPRI, r3
 8005066:	f3bf 8f6f 	isb	sy
 800506a:	f3bf 8f4f 	dsb	sy
 800506e:	60bb      	str	r3, [r7, #8]
}
 8005070:	bf00      	nop
 8005072:	e7fe      	b.n	8005072 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005074:	f000 f880 	bl	8005178 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005078:	2100      	movs	r1, #0
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 fcea 	bl	8005a54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005080:	f000 f888 	bl	8005194 <xTaskResumeAll>
 8005084:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d107      	bne.n	800509c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800508c:	4b06      	ldr	r3, [pc, #24]	; (80050a8 <vTaskDelay+0x64>)
 800508e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005092:	601a      	str	r2, [r3, #0]
 8005094:	f3bf 8f4f 	dsb	sy
 8005098:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800509c:	bf00      	nop
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	20001210 	.word	0x20001210
 80050a8:	e000ed04 	.word	0xe000ed04

080050ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b08a      	sub	sp, #40	; 0x28
 80050b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80050b2:	2300      	movs	r3, #0
 80050b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80050b6:	2300      	movs	r3, #0
 80050b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80050ba:	463a      	mov	r2, r7
 80050bc:	1d39      	adds	r1, r7, #4
 80050be:	f107 0308 	add.w	r3, r7, #8
 80050c2:	4618      	mov	r0, r3
 80050c4:	f7ff f848 	bl	8004158 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80050c8:	6839      	ldr	r1, [r7, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	68ba      	ldr	r2, [r7, #8]
 80050ce:	9202      	str	r2, [sp, #8]
 80050d0:	9301      	str	r3, [sp, #4]
 80050d2:	2300      	movs	r3, #0
 80050d4:	9300      	str	r3, [sp, #0]
 80050d6:	2300      	movs	r3, #0
 80050d8:	460a      	mov	r2, r1
 80050da:	4921      	ldr	r1, [pc, #132]	; (8005160 <vTaskStartScheduler+0xb4>)
 80050dc:	4821      	ldr	r0, [pc, #132]	; (8005164 <vTaskStartScheduler+0xb8>)
 80050de:	f7ff fe0f 	bl	8004d00 <xTaskCreateStatic>
 80050e2:	4603      	mov	r3, r0
 80050e4:	4a20      	ldr	r2, [pc, #128]	; (8005168 <vTaskStartScheduler+0xbc>)
 80050e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80050e8:	4b1f      	ldr	r3, [pc, #124]	; (8005168 <vTaskStartScheduler+0xbc>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d002      	beq.n	80050f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80050f0:	2301      	movs	r3, #1
 80050f2:	617b      	str	r3, [r7, #20]
 80050f4:	e001      	b.n	80050fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80050f6:	2300      	movs	r3, #0
 80050f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d102      	bne.n	8005106 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005100:	f000 fcfc 	bl	8005afc <xTimerCreateTimerTask>
 8005104:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	2b01      	cmp	r3, #1
 800510a:	d116      	bne.n	800513a <vTaskStartScheduler+0x8e>
	__asm volatile
 800510c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005110:	f383 8811 	msr	BASEPRI, r3
 8005114:	f3bf 8f6f 	isb	sy
 8005118:	f3bf 8f4f 	dsb	sy
 800511c:	613b      	str	r3, [r7, #16]
}
 800511e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005120:	4b12      	ldr	r3, [pc, #72]	; (800516c <vTaskStartScheduler+0xc0>)
 8005122:	f04f 32ff 	mov.w	r2, #4294967295
 8005126:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005128:	4b11      	ldr	r3, [pc, #68]	; (8005170 <vTaskStartScheduler+0xc4>)
 800512a:	2201      	movs	r2, #1
 800512c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800512e:	4b11      	ldr	r3, [pc, #68]	; (8005174 <vTaskStartScheduler+0xc8>)
 8005130:	2200      	movs	r2, #0
 8005132:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005134:	f001 f8bc 	bl	80062b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005138:	e00e      	b.n	8005158 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005140:	d10a      	bne.n	8005158 <vTaskStartScheduler+0xac>
	__asm volatile
 8005142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005146:	f383 8811 	msr	BASEPRI, r3
 800514a:	f3bf 8f6f 	isb	sy
 800514e:	f3bf 8f4f 	dsb	sy
 8005152:	60fb      	str	r3, [r7, #12]
}
 8005154:	bf00      	nop
 8005156:	e7fe      	b.n	8005156 <vTaskStartScheduler+0xaa>
}
 8005158:	bf00      	nop
 800515a:	3718      	adds	r7, #24
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	08006aa4 	.word	0x08006aa4
 8005164:	08005791 	.word	0x08005791
 8005168:	2000120c 	.word	0x2000120c
 800516c:	20001208 	.word	0x20001208
 8005170:	200011f4 	.word	0x200011f4
 8005174:	200011ec 	.word	0x200011ec

08005178 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005178:	b480      	push	{r7}
 800517a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800517c:	4b04      	ldr	r3, [pc, #16]	; (8005190 <vTaskSuspendAll+0x18>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	3301      	adds	r3, #1
 8005182:	4a03      	ldr	r2, [pc, #12]	; (8005190 <vTaskSuspendAll+0x18>)
 8005184:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005186:	bf00      	nop
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr
 8005190:	20001210 	.word	0x20001210

08005194 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800519a:	2300      	movs	r3, #0
 800519c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800519e:	2300      	movs	r3, #0
 80051a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80051a2:	4b42      	ldr	r3, [pc, #264]	; (80052ac <xTaskResumeAll+0x118>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d10a      	bne.n	80051c0 <xTaskResumeAll+0x2c>
	__asm volatile
 80051aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ae:	f383 8811 	msr	BASEPRI, r3
 80051b2:	f3bf 8f6f 	isb	sy
 80051b6:	f3bf 8f4f 	dsb	sy
 80051ba:	603b      	str	r3, [r7, #0]
}
 80051bc:	bf00      	nop
 80051be:	e7fe      	b.n	80051be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80051c0:	f001 f918 	bl	80063f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80051c4:	4b39      	ldr	r3, [pc, #228]	; (80052ac <xTaskResumeAll+0x118>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	3b01      	subs	r3, #1
 80051ca:	4a38      	ldr	r2, [pc, #224]	; (80052ac <xTaskResumeAll+0x118>)
 80051cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051ce:	4b37      	ldr	r3, [pc, #220]	; (80052ac <xTaskResumeAll+0x118>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d162      	bne.n	800529c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80051d6:	4b36      	ldr	r3, [pc, #216]	; (80052b0 <xTaskResumeAll+0x11c>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d05e      	beq.n	800529c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80051de:	e02f      	b.n	8005240 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051e0:	4b34      	ldr	r3, [pc, #208]	; (80052b4 <xTaskResumeAll+0x120>)
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	3318      	adds	r3, #24
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7ff f871 	bl	80042d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	3304      	adds	r3, #4
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7ff f86c 	bl	80042d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005200:	4b2d      	ldr	r3, [pc, #180]	; (80052b8 <xTaskResumeAll+0x124>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	429a      	cmp	r2, r3
 8005206:	d903      	bls.n	8005210 <xTaskResumeAll+0x7c>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520c:	4a2a      	ldr	r2, [pc, #168]	; (80052b8 <xTaskResumeAll+0x124>)
 800520e:	6013      	str	r3, [r2, #0]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005214:	4613      	mov	r3, r2
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	4413      	add	r3, r2
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	4a27      	ldr	r2, [pc, #156]	; (80052bc <xTaskResumeAll+0x128>)
 800521e:	441a      	add	r2, r3
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	3304      	adds	r3, #4
 8005224:	4619      	mov	r1, r3
 8005226:	4610      	mov	r0, r2
 8005228:	f7fe fff7 	bl	800421a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005230:	4b23      	ldr	r3, [pc, #140]	; (80052c0 <xTaskResumeAll+0x12c>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005236:	429a      	cmp	r2, r3
 8005238:	d302      	bcc.n	8005240 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800523a:	4b22      	ldr	r3, [pc, #136]	; (80052c4 <xTaskResumeAll+0x130>)
 800523c:	2201      	movs	r2, #1
 800523e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005240:	4b1c      	ldr	r3, [pc, #112]	; (80052b4 <xTaskResumeAll+0x120>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1cb      	bne.n	80051e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d001      	beq.n	8005252 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800524e:	f000 fb55 	bl	80058fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005252:	4b1d      	ldr	r3, [pc, #116]	; (80052c8 <xTaskResumeAll+0x134>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d010      	beq.n	8005280 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800525e:	f000 f847 	bl	80052f0 <xTaskIncrementTick>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d002      	beq.n	800526e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005268:	4b16      	ldr	r3, [pc, #88]	; (80052c4 <xTaskResumeAll+0x130>)
 800526a:	2201      	movs	r2, #1
 800526c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	3b01      	subs	r3, #1
 8005272:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1f1      	bne.n	800525e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800527a:	4b13      	ldr	r3, [pc, #76]	; (80052c8 <xTaskResumeAll+0x134>)
 800527c:	2200      	movs	r2, #0
 800527e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005280:	4b10      	ldr	r3, [pc, #64]	; (80052c4 <xTaskResumeAll+0x130>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d009      	beq.n	800529c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005288:	2301      	movs	r3, #1
 800528a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800528c:	4b0f      	ldr	r3, [pc, #60]	; (80052cc <xTaskResumeAll+0x138>)
 800528e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005292:	601a      	str	r2, [r3, #0]
 8005294:	f3bf 8f4f 	dsb	sy
 8005298:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800529c:	f001 f8da 	bl	8006454 <vPortExitCritical>

	return xAlreadyYielded;
 80052a0:	68bb      	ldr	r3, [r7, #8]
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	20001210 	.word	0x20001210
 80052b0:	200011e8 	.word	0x200011e8
 80052b4:	200011a8 	.word	0x200011a8
 80052b8:	200011f0 	.word	0x200011f0
 80052bc:	20000d18 	.word	0x20000d18
 80052c0:	20000d14 	.word	0x20000d14
 80052c4:	200011fc 	.word	0x200011fc
 80052c8:	200011f8 	.word	0x200011f8
 80052cc:	e000ed04 	.word	0xe000ed04

080052d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80052d6:	4b05      	ldr	r3, [pc, #20]	; (80052ec <xTaskGetTickCount+0x1c>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80052dc:	687b      	ldr	r3, [r7, #4]
}
 80052de:	4618      	mov	r0, r3
 80052e0:	370c      	adds	r7, #12
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	200011ec 	.word	0x200011ec

080052f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b086      	sub	sp, #24
 80052f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80052f6:	2300      	movs	r3, #0
 80052f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052fa:	4b4f      	ldr	r3, [pc, #316]	; (8005438 <xTaskIncrementTick+0x148>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	f040 808f 	bne.w	8005422 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005304:	4b4d      	ldr	r3, [pc, #308]	; (800543c <xTaskIncrementTick+0x14c>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	3301      	adds	r3, #1
 800530a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800530c:	4a4b      	ldr	r2, [pc, #300]	; (800543c <xTaskIncrementTick+0x14c>)
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d120      	bne.n	800535a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005318:	4b49      	ldr	r3, [pc, #292]	; (8005440 <xTaskIncrementTick+0x150>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00a      	beq.n	8005338 <xTaskIncrementTick+0x48>
	__asm volatile
 8005322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005326:	f383 8811 	msr	BASEPRI, r3
 800532a:	f3bf 8f6f 	isb	sy
 800532e:	f3bf 8f4f 	dsb	sy
 8005332:	603b      	str	r3, [r7, #0]
}
 8005334:	bf00      	nop
 8005336:	e7fe      	b.n	8005336 <xTaskIncrementTick+0x46>
 8005338:	4b41      	ldr	r3, [pc, #260]	; (8005440 <xTaskIncrementTick+0x150>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	60fb      	str	r3, [r7, #12]
 800533e:	4b41      	ldr	r3, [pc, #260]	; (8005444 <xTaskIncrementTick+0x154>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a3f      	ldr	r2, [pc, #252]	; (8005440 <xTaskIncrementTick+0x150>)
 8005344:	6013      	str	r3, [r2, #0]
 8005346:	4a3f      	ldr	r2, [pc, #252]	; (8005444 <xTaskIncrementTick+0x154>)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6013      	str	r3, [r2, #0]
 800534c:	4b3e      	ldr	r3, [pc, #248]	; (8005448 <xTaskIncrementTick+0x158>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	3301      	adds	r3, #1
 8005352:	4a3d      	ldr	r2, [pc, #244]	; (8005448 <xTaskIncrementTick+0x158>)
 8005354:	6013      	str	r3, [r2, #0]
 8005356:	f000 fad1 	bl	80058fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800535a:	4b3c      	ldr	r3, [pc, #240]	; (800544c <xTaskIncrementTick+0x15c>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	693a      	ldr	r2, [r7, #16]
 8005360:	429a      	cmp	r2, r3
 8005362:	d349      	bcc.n	80053f8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005364:	4b36      	ldr	r3, [pc, #216]	; (8005440 <xTaskIncrementTick+0x150>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d104      	bne.n	8005378 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800536e:	4b37      	ldr	r3, [pc, #220]	; (800544c <xTaskIncrementTick+0x15c>)
 8005370:	f04f 32ff 	mov.w	r2, #4294967295
 8005374:	601a      	str	r2, [r3, #0]
					break;
 8005376:	e03f      	b.n	80053f8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005378:	4b31      	ldr	r3, [pc, #196]	; (8005440 <xTaskIncrementTick+0x150>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005388:	693a      	ldr	r2, [r7, #16]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	429a      	cmp	r2, r3
 800538e:	d203      	bcs.n	8005398 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005390:	4a2e      	ldr	r2, [pc, #184]	; (800544c <xTaskIncrementTick+0x15c>)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005396:	e02f      	b.n	80053f8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	3304      	adds	r3, #4
 800539c:	4618      	mov	r0, r3
 800539e:	f7fe ff99 	bl	80042d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d004      	beq.n	80053b4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	3318      	adds	r3, #24
 80053ae:	4618      	mov	r0, r3
 80053b0:	f7fe ff90 	bl	80042d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053b8:	4b25      	ldr	r3, [pc, #148]	; (8005450 <xTaskIncrementTick+0x160>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d903      	bls.n	80053c8 <xTaskIncrementTick+0xd8>
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c4:	4a22      	ldr	r2, [pc, #136]	; (8005450 <xTaskIncrementTick+0x160>)
 80053c6:	6013      	str	r3, [r2, #0]
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053cc:	4613      	mov	r3, r2
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	4413      	add	r3, r2
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	4a1f      	ldr	r2, [pc, #124]	; (8005454 <xTaskIncrementTick+0x164>)
 80053d6:	441a      	add	r2, r3
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	3304      	adds	r3, #4
 80053dc:	4619      	mov	r1, r3
 80053de:	4610      	mov	r0, r2
 80053e0:	f7fe ff1b 	bl	800421a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053e8:	4b1b      	ldr	r3, [pc, #108]	; (8005458 <xTaskIncrementTick+0x168>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d3b8      	bcc.n	8005364 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80053f2:	2301      	movs	r3, #1
 80053f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053f6:	e7b5      	b.n	8005364 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80053f8:	4b17      	ldr	r3, [pc, #92]	; (8005458 <xTaskIncrementTick+0x168>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053fe:	4915      	ldr	r1, [pc, #84]	; (8005454 <xTaskIncrementTick+0x164>)
 8005400:	4613      	mov	r3, r2
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	4413      	add	r3, r2
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	440b      	add	r3, r1
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2b01      	cmp	r3, #1
 800540e:	d901      	bls.n	8005414 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005410:	2301      	movs	r3, #1
 8005412:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005414:	4b11      	ldr	r3, [pc, #68]	; (800545c <xTaskIncrementTick+0x16c>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d007      	beq.n	800542c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800541c:	2301      	movs	r3, #1
 800541e:	617b      	str	r3, [r7, #20]
 8005420:	e004      	b.n	800542c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005422:	4b0f      	ldr	r3, [pc, #60]	; (8005460 <xTaskIncrementTick+0x170>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	3301      	adds	r3, #1
 8005428:	4a0d      	ldr	r2, [pc, #52]	; (8005460 <xTaskIncrementTick+0x170>)
 800542a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800542c:	697b      	ldr	r3, [r7, #20]
}
 800542e:	4618      	mov	r0, r3
 8005430:	3718      	adds	r7, #24
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	20001210 	.word	0x20001210
 800543c:	200011ec 	.word	0x200011ec
 8005440:	200011a0 	.word	0x200011a0
 8005444:	200011a4 	.word	0x200011a4
 8005448:	20001200 	.word	0x20001200
 800544c:	20001208 	.word	0x20001208
 8005450:	200011f0 	.word	0x200011f0
 8005454:	20000d18 	.word	0x20000d18
 8005458:	20000d14 	.word	0x20000d14
 800545c:	200011fc 	.word	0x200011fc
 8005460:	200011f8 	.word	0x200011f8

08005464 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800546a:	4b28      	ldr	r3, [pc, #160]	; (800550c <vTaskSwitchContext+0xa8>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d003      	beq.n	800547a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005472:	4b27      	ldr	r3, [pc, #156]	; (8005510 <vTaskSwitchContext+0xac>)
 8005474:	2201      	movs	r2, #1
 8005476:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005478:	e041      	b.n	80054fe <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800547a:	4b25      	ldr	r3, [pc, #148]	; (8005510 <vTaskSwitchContext+0xac>)
 800547c:	2200      	movs	r2, #0
 800547e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005480:	4b24      	ldr	r3, [pc, #144]	; (8005514 <vTaskSwitchContext+0xb0>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	60fb      	str	r3, [r7, #12]
 8005486:	e010      	b.n	80054aa <vTaskSwitchContext+0x46>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d10a      	bne.n	80054a4 <vTaskSwitchContext+0x40>
	__asm volatile
 800548e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005492:	f383 8811 	msr	BASEPRI, r3
 8005496:	f3bf 8f6f 	isb	sy
 800549a:	f3bf 8f4f 	dsb	sy
 800549e:	607b      	str	r3, [r7, #4]
}
 80054a0:	bf00      	nop
 80054a2:	e7fe      	b.n	80054a2 <vTaskSwitchContext+0x3e>
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	3b01      	subs	r3, #1
 80054a8:	60fb      	str	r3, [r7, #12]
 80054aa:	491b      	ldr	r1, [pc, #108]	; (8005518 <vTaskSwitchContext+0xb4>)
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	4613      	mov	r3, r2
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	4413      	add	r3, r2
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	440b      	add	r3, r1
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d0e4      	beq.n	8005488 <vTaskSwitchContext+0x24>
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	4613      	mov	r3, r2
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	4413      	add	r3, r2
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	4a13      	ldr	r2, [pc, #76]	; (8005518 <vTaskSwitchContext+0xb4>)
 80054ca:	4413      	add	r3, r2
 80054cc:	60bb      	str	r3, [r7, #8]
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	685a      	ldr	r2, [r3, #4]
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	605a      	str	r2, [r3, #4]
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	685a      	ldr	r2, [r3, #4]
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	3308      	adds	r3, #8
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d104      	bne.n	80054ee <vTaskSwitchContext+0x8a>
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	685a      	ldr	r2, [r3, #4]
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	605a      	str	r2, [r3, #4]
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	4a09      	ldr	r2, [pc, #36]	; (800551c <vTaskSwitchContext+0xb8>)
 80054f6:	6013      	str	r3, [r2, #0]
 80054f8:	4a06      	ldr	r2, [pc, #24]	; (8005514 <vTaskSwitchContext+0xb0>)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6013      	str	r3, [r2, #0]
}
 80054fe:	bf00      	nop
 8005500:	3714      	adds	r7, #20
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	20001210 	.word	0x20001210
 8005510:	200011fc 	.word	0x200011fc
 8005514:	200011f0 	.word	0x200011f0
 8005518:	20000d18 	.word	0x20000d18
 800551c:	20000d14 	.word	0x20000d14

08005520 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d10a      	bne.n	8005546 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005534:	f383 8811 	msr	BASEPRI, r3
 8005538:	f3bf 8f6f 	isb	sy
 800553c:	f3bf 8f4f 	dsb	sy
 8005540:	60fb      	str	r3, [r7, #12]
}
 8005542:	bf00      	nop
 8005544:	e7fe      	b.n	8005544 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005546:	4b07      	ldr	r3, [pc, #28]	; (8005564 <vTaskPlaceOnEventList+0x44>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	3318      	adds	r3, #24
 800554c:	4619      	mov	r1, r3
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f7fe fe87 	bl	8004262 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005554:	2101      	movs	r1, #1
 8005556:	6838      	ldr	r0, [r7, #0]
 8005558:	f000 fa7c 	bl	8005a54 <prvAddCurrentTaskToDelayedList>
}
 800555c:	bf00      	nop
 800555e:	3710      	adds	r7, #16
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	20000d14 	.word	0x20000d14

08005568 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005568:	b580      	push	{r7, lr}
 800556a:	b086      	sub	sp, #24
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10a      	bne.n	8005590 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800557a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557e:	f383 8811 	msr	BASEPRI, r3
 8005582:	f3bf 8f6f 	isb	sy
 8005586:	f3bf 8f4f 	dsb	sy
 800558a:	617b      	str	r3, [r7, #20]
}
 800558c:	bf00      	nop
 800558e:	e7fe      	b.n	800558e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005590:	4b0a      	ldr	r3, [pc, #40]	; (80055bc <vTaskPlaceOnEventListRestricted+0x54>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	3318      	adds	r3, #24
 8005596:	4619      	mov	r1, r3
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	f7fe fe3e 	bl	800421a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d002      	beq.n	80055aa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80055a4:	f04f 33ff 	mov.w	r3, #4294967295
 80055a8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80055aa:	6879      	ldr	r1, [r7, #4]
 80055ac:	68b8      	ldr	r0, [r7, #8]
 80055ae:	f000 fa51 	bl	8005a54 <prvAddCurrentTaskToDelayedList>
	}
 80055b2:	bf00      	nop
 80055b4:	3718      	adds	r7, #24
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	20000d14 	.word	0x20000d14

080055c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b086      	sub	sp, #24
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d10a      	bne.n	80055ec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80055d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055da:	f383 8811 	msr	BASEPRI, r3
 80055de:	f3bf 8f6f 	isb	sy
 80055e2:	f3bf 8f4f 	dsb	sy
 80055e6:	60fb      	str	r3, [r7, #12]
}
 80055e8:	bf00      	nop
 80055ea:	e7fe      	b.n	80055ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	3318      	adds	r3, #24
 80055f0:	4618      	mov	r0, r3
 80055f2:	f7fe fe6f 	bl	80042d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055f6:	4b1e      	ldr	r3, [pc, #120]	; (8005670 <xTaskRemoveFromEventList+0xb0>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d11d      	bne.n	800563a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	3304      	adds	r3, #4
 8005602:	4618      	mov	r0, r3
 8005604:	f7fe fe66 	bl	80042d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800560c:	4b19      	ldr	r3, [pc, #100]	; (8005674 <xTaskRemoveFromEventList+0xb4>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	429a      	cmp	r2, r3
 8005612:	d903      	bls.n	800561c <xTaskRemoveFromEventList+0x5c>
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005618:	4a16      	ldr	r2, [pc, #88]	; (8005674 <xTaskRemoveFromEventList+0xb4>)
 800561a:	6013      	str	r3, [r2, #0]
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005620:	4613      	mov	r3, r2
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	4413      	add	r3, r2
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	4a13      	ldr	r2, [pc, #76]	; (8005678 <xTaskRemoveFromEventList+0xb8>)
 800562a:	441a      	add	r2, r3
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	3304      	adds	r3, #4
 8005630:	4619      	mov	r1, r3
 8005632:	4610      	mov	r0, r2
 8005634:	f7fe fdf1 	bl	800421a <vListInsertEnd>
 8005638:	e005      	b.n	8005646 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	3318      	adds	r3, #24
 800563e:	4619      	mov	r1, r3
 8005640:	480e      	ldr	r0, [pc, #56]	; (800567c <xTaskRemoveFromEventList+0xbc>)
 8005642:	f7fe fdea 	bl	800421a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800564a:	4b0d      	ldr	r3, [pc, #52]	; (8005680 <xTaskRemoveFromEventList+0xc0>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005650:	429a      	cmp	r2, r3
 8005652:	d905      	bls.n	8005660 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005654:	2301      	movs	r3, #1
 8005656:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005658:	4b0a      	ldr	r3, [pc, #40]	; (8005684 <xTaskRemoveFromEventList+0xc4>)
 800565a:	2201      	movs	r2, #1
 800565c:	601a      	str	r2, [r3, #0]
 800565e:	e001      	b.n	8005664 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005660:	2300      	movs	r3, #0
 8005662:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005664:	697b      	ldr	r3, [r7, #20]
}
 8005666:	4618      	mov	r0, r3
 8005668:	3718      	adds	r7, #24
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	20001210 	.word	0x20001210
 8005674:	200011f0 	.word	0x200011f0
 8005678:	20000d18 	.word	0x20000d18
 800567c:	200011a8 	.word	0x200011a8
 8005680:	20000d14 	.word	0x20000d14
 8005684:	200011fc 	.word	0x200011fc

08005688 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005690:	4b06      	ldr	r3, [pc, #24]	; (80056ac <vTaskInternalSetTimeOutState+0x24>)
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005698:	4b05      	ldr	r3, [pc, #20]	; (80056b0 <vTaskInternalSetTimeOutState+0x28>)
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	605a      	str	r2, [r3, #4]
}
 80056a0:	bf00      	nop
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr
 80056ac:	20001200 	.word	0x20001200
 80056b0:	200011ec 	.word	0x200011ec

080056b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b088      	sub	sp, #32
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d10a      	bne.n	80056da <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80056c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c8:	f383 8811 	msr	BASEPRI, r3
 80056cc:	f3bf 8f6f 	isb	sy
 80056d0:	f3bf 8f4f 	dsb	sy
 80056d4:	613b      	str	r3, [r7, #16]
}
 80056d6:	bf00      	nop
 80056d8:	e7fe      	b.n	80056d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d10a      	bne.n	80056f6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80056e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e4:	f383 8811 	msr	BASEPRI, r3
 80056e8:	f3bf 8f6f 	isb	sy
 80056ec:	f3bf 8f4f 	dsb	sy
 80056f0:	60fb      	str	r3, [r7, #12]
}
 80056f2:	bf00      	nop
 80056f4:	e7fe      	b.n	80056f4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80056f6:	f000 fe7d 	bl	80063f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80056fa:	4b1d      	ldr	r3, [pc, #116]	; (8005770 <xTaskCheckForTimeOut+0xbc>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005712:	d102      	bne.n	800571a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005714:	2300      	movs	r3, #0
 8005716:	61fb      	str	r3, [r7, #28]
 8005718:	e023      	b.n	8005762 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	4b15      	ldr	r3, [pc, #84]	; (8005774 <xTaskCheckForTimeOut+0xc0>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	429a      	cmp	r2, r3
 8005724:	d007      	beq.n	8005736 <xTaskCheckForTimeOut+0x82>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	69ba      	ldr	r2, [r7, #24]
 800572c:	429a      	cmp	r2, r3
 800572e:	d302      	bcc.n	8005736 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005730:	2301      	movs	r3, #1
 8005732:	61fb      	str	r3, [r7, #28]
 8005734:	e015      	b.n	8005762 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	429a      	cmp	r2, r3
 800573e:	d20b      	bcs.n	8005758 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	1ad2      	subs	r2, r2, r3
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f7ff ff9b 	bl	8005688 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005752:	2300      	movs	r3, #0
 8005754:	61fb      	str	r3, [r7, #28]
 8005756:	e004      	b.n	8005762 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	2200      	movs	r2, #0
 800575c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800575e:	2301      	movs	r3, #1
 8005760:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005762:	f000 fe77 	bl	8006454 <vPortExitCritical>

	return xReturn;
 8005766:	69fb      	ldr	r3, [r7, #28]
}
 8005768:	4618      	mov	r0, r3
 800576a:	3720      	adds	r7, #32
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}
 8005770:	200011ec 	.word	0x200011ec
 8005774:	20001200 	.word	0x20001200

08005778 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005778:	b480      	push	{r7}
 800577a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800577c:	4b03      	ldr	r3, [pc, #12]	; (800578c <vTaskMissedYield+0x14>)
 800577e:	2201      	movs	r2, #1
 8005780:	601a      	str	r2, [r3, #0]
}
 8005782:	bf00      	nop
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr
 800578c:	200011fc 	.word	0x200011fc

08005790 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005798:	f000 f852 	bl	8005840 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800579c:	4b06      	ldr	r3, [pc, #24]	; (80057b8 <prvIdleTask+0x28>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d9f9      	bls.n	8005798 <prvIdleTask+0x8>
			{
				taskYIELD();
 80057a4:	4b05      	ldr	r3, [pc, #20]	; (80057bc <prvIdleTask+0x2c>)
 80057a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057aa:	601a      	str	r2, [r3, #0]
 80057ac:	f3bf 8f4f 	dsb	sy
 80057b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80057b4:	e7f0      	b.n	8005798 <prvIdleTask+0x8>
 80057b6:	bf00      	nop
 80057b8:	20000d18 	.word	0x20000d18
 80057bc:	e000ed04 	.word	0xe000ed04

080057c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057c6:	2300      	movs	r3, #0
 80057c8:	607b      	str	r3, [r7, #4]
 80057ca:	e00c      	b.n	80057e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	4613      	mov	r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	4413      	add	r3, r2
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	4a12      	ldr	r2, [pc, #72]	; (8005820 <prvInitialiseTaskLists+0x60>)
 80057d8:	4413      	add	r3, r2
 80057da:	4618      	mov	r0, r3
 80057dc:	f7fe fcf0 	bl	80041c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	3301      	adds	r3, #1
 80057e4:	607b      	str	r3, [r7, #4]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2b37      	cmp	r3, #55	; 0x37
 80057ea:	d9ef      	bls.n	80057cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80057ec:	480d      	ldr	r0, [pc, #52]	; (8005824 <prvInitialiseTaskLists+0x64>)
 80057ee:	f7fe fce7 	bl	80041c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80057f2:	480d      	ldr	r0, [pc, #52]	; (8005828 <prvInitialiseTaskLists+0x68>)
 80057f4:	f7fe fce4 	bl	80041c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80057f8:	480c      	ldr	r0, [pc, #48]	; (800582c <prvInitialiseTaskLists+0x6c>)
 80057fa:	f7fe fce1 	bl	80041c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80057fe:	480c      	ldr	r0, [pc, #48]	; (8005830 <prvInitialiseTaskLists+0x70>)
 8005800:	f7fe fcde 	bl	80041c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005804:	480b      	ldr	r0, [pc, #44]	; (8005834 <prvInitialiseTaskLists+0x74>)
 8005806:	f7fe fcdb 	bl	80041c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800580a:	4b0b      	ldr	r3, [pc, #44]	; (8005838 <prvInitialiseTaskLists+0x78>)
 800580c:	4a05      	ldr	r2, [pc, #20]	; (8005824 <prvInitialiseTaskLists+0x64>)
 800580e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005810:	4b0a      	ldr	r3, [pc, #40]	; (800583c <prvInitialiseTaskLists+0x7c>)
 8005812:	4a05      	ldr	r2, [pc, #20]	; (8005828 <prvInitialiseTaskLists+0x68>)
 8005814:	601a      	str	r2, [r3, #0]
}
 8005816:	bf00      	nop
 8005818:	3708      	adds	r7, #8
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	20000d18 	.word	0x20000d18
 8005824:	20001178 	.word	0x20001178
 8005828:	2000118c 	.word	0x2000118c
 800582c:	200011a8 	.word	0x200011a8
 8005830:	200011bc 	.word	0x200011bc
 8005834:	200011d4 	.word	0x200011d4
 8005838:	200011a0 	.word	0x200011a0
 800583c:	200011a4 	.word	0x200011a4

08005840 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005846:	e019      	b.n	800587c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005848:	f000 fdd4 	bl	80063f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800584c:	4b10      	ldr	r3, [pc, #64]	; (8005890 <prvCheckTasksWaitingTermination+0x50>)
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	3304      	adds	r3, #4
 8005858:	4618      	mov	r0, r3
 800585a:	f7fe fd3b 	bl	80042d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800585e:	4b0d      	ldr	r3, [pc, #52]	; (8005894 <prvCheckTasksWaitingTermination+0x54>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	3b01      	subs	r3, #1
 8005864:	4a0b      	ldr	r2, [pc, #44]	; (8005894 <prvCheckTasksWaitingTermination+0x54>)
 8005866:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005868:	4b0b      	ldr	r3, [pc, #44]	; (8005898 <prvCheckTasksWaitingTermination+0x58>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	3b01      	subs	r3, #1
 800586e:	4a0a      	ldr	r2, [pc, #40]	; (8005898 <prvCheckTasksWaitingTermination+0x58>)
 8005870:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005872:	f000 fdef 	bl	8006454 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 f810 	bl	800589c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800587c:	4b06      	ldr	r3, [pc, #24]	; (8005898 <prvCheckTasksWaitingTermination+0x58>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d1e1      	bne.n	8005848 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005884:	bf00      	nop
 8005886:	bf00      	nop
 8005888:	3708      	adds	r7, #8
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	200011bc 	.word	0x200011bc
 8005894:	200011e8 	.word	0x200011e8
 8005898:	200011d0 	.word	0x200011d0

0800589c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d108      	bne.n	80058c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b2:	4618      	mov	r0, r3
 80058b4:	f000 ff8c 	bl	80067d0 <vPortFree>
				vPortFree( pxTCB );
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 ff89 	bl	80067d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80058be:	e018      	b.n	80058f2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d103      	bne.n	80058d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 ff80 	bl	80067d0 <vPortFree>
	}
 80058d0:	e00f      	b.n	80058f2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d00a      	beq.n	80058f2 <prvDeleteTCB+0x56>
	__asm volatile
 80058dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e0:	f383 8811 	msr	BASEPRI, r3
 80058e4:	f3bf 8f6f 	isb	sy
 80058e8:	f3bf 8f4f 	dsb	sy
 80058ec:	60fb      	str	r3, [r7, #12]
}
 80058ee:	bf00      	nop
 80058f0:	e7fe      	b.n	80058f0 <prvDeleteTCB+0x54>
	}
 80058f2:	bf00      	nop
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
	...

080058fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005902:	4b0c      	ldr	r3, [pc, #48]	; (8005934 <prvResetNextTaskUnblockTime+0x38>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d104      	bne.n	8005916 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800590c:	4b0a      	ldr	r3, [pc, #40]	; (8005938 <prvResetNextTaskUnblockTime+0x3c>)
 800590e:	f04f 32ff 	mov.w	r2, #4294967295
 8005912:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005914:	e008      	b.n	8005928 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005916:	4b07      	ldr	r3, [pc, #28]	; (8005934 <prvResetNextTaskUnblockTime+0x38>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	4a04      	ldr	r2, [pc, #16]	; (8005938 <prvResetNextTaskUnblockTime+0x3c>)
 8005926:	6013      	str	r3, [r2, #0]
}
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr
 8005934:	200011a0 	.word	0x200011a0
 8005938:	20001208 	.word	0x20001208

0800593c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005942:	4b0b      	ldr	r3, [pc, #44]	; (8005970 <xTaskGetSchedulerState+0x34>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d102      	bne.n	8005950 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800594a:	2301      	movs	r3, #1
 800594c:	607b      	str	r3, [r7, #4]
 800594e:	e008      	b.n	8005962 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005950:	4b08      	ldr	r3, [pc, #32]	; (8005974 <xTaskGetSchedulerState+0x38>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d102      	bne.n	800595e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005958:	2302      	movs	r3, #2
 800595a:	607b      	str	r3, [r7, #4]
 800595c:	e001      	b.n	8005962 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800595e:	2300      	movs	r3, #0
 8005960:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005962:	687b      	ldr	r3, [r7, #4]
	}
 8005964:	4618      	mov	r0, r3
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr
 8005970:	200011f4 	.word	0x200011f4
 8005974:	20001210 	.word	0x20001210

08005978 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005978:	b580      	push	{r7, lr}
 800597a:	b086      	sub	sp, #24
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005984:	2300      	movs	r3, #0
 8005986:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d056      	beq.n	8005a3c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800598e:	4b2e      	ldr	r3, [pc, #184]	; (8005a48 <xTaskPriorityDisinherit+0xd0>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	693a      	ldr	r2, [r7, #16]
 8005994:	429a      	cmp	r2, r3
 8005996:	d00a      	beq.n	80059ae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800599c:	f383 8811 	msr	BASEPRI, r3
 80059a0:	f3bf 8f6f 	isb	sy
 80059a4:	f3bf 8f4f 	dsb	sy
 80059a8:	60fb      	str	r3, [r7, #12]
}
 80059aa:	bf00      	nop
 80059ac:	e7fe      	b.n	80059ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10a      	bne.n	80059cc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80059b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ba:	f383 8811 	msr	BASEPRI, r3
 80059be:	f3bf 8f6f 	isb	sy
 80059c2:	f3bf 8f4f 	dsb	sy
 80059c6:	60bb      	str	r3, [r7, #8]
}
 80059c8:	bf00      	nop
 80059ca:	e7fe      	b.n	80059ca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059d0:	1e5a      	subs	r2, r3, #1
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059de:	429a      	cmp	r2, r3
 80059e0:	d02c      	beq.n	8005a3c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d128      	bne.n	8005a3c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	3304      	adds	r3, #4
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7fe fc70 	bl	80042d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a00:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a0c:	4b0f      	ldr	r3, [pc, #60]	; (8005a4c <xTaskPriorityDisinherit+0xd4>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d903      	bls.n	8005a1c <xTaskPriorityDisinherit+0xa4>
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a18:	4a0c      	ldr	r2, [pc, #48]	; (8005a4c <xTaskPriorityDisinherit+0xd4>)
 8005a1a:	6013      	str	r3, [r2, #0]
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a20:	4613      	mov	r3, r2
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	4413      	add	r3, r2
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	4a09      	ldr	r2, [pc, #36]	; (8005a50 <xTaskPriorityDisinherit+0xd8>)
 8005a2a:	441a      	add	r2, r3
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	3304      	adds	r3, #4
 8005a30:	4619      	mov	r1, r3
 8005a32:	4610      	mov	r0, r2
 8005a34:	f7fe fbf1 	bl	800421a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005a3c:	697b      	ldr	r3, [r7, #20]
	}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3718      	adds	r7, #24
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	20000d14 	.word	0x20000d14
 8005a4c:	200011f0 	.word	0x200011f0
 8005a50:	20000d18 	.word	0x20000d18

08005a54 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005a5e:	4b21      	ldr	r3, [pc, #132]	; (8005ae4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a64:	4b20      	ldr	r3, [pc, #128]	; (8005ae8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	3304      	adds	r3, #4
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7fe fc32 	bl	80042d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a76:	d10a      	bne.n	8005a8e <prvAddCurrentTaskToDelayedList+0x3a>
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d007      	beq.n	8005a8e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a7e:	4b1a      	ldr	r3, [pc, #104]	; (8005ae8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	3304      	adds	r3, #4
 8005a84:	4619      	mov	r1, r3
 8005a86:	4819      	ldr	r0, [pc, #100]	; (8005aec <prvAddCurrentTaskToDelayedList+0x98>)
 8005a88:	f7fe fbc7 	bl	800421a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005a8c:	e026      	b.n	8005adc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4413      	add	r3, r2
 8005a94:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005a96:	4b14      	ldr	r3, [pc, #80]	; (8005ae8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68ba      	ldr	r2, [r7, #8]
 8005a9c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005a9e:	68ba      	ldr	r2, [r7, #8]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d209      	bcs.n	8005aba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005aa6:	4b12      	ldr	r3, [pc, #72]	; (8005af0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	4b0f      	ldr	r3, [pc, #60]	; (8005ae8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	3304      	adds	r3, #4
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	4610      	mov	r0, r2
 8005ab4:	f7fe fbd5 	bl	8004262 <vListInsert>
}
 8005ab8:	e010      	b.n	8005adc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005aba:	4b0e      	ldr	r3, [pc, #56]	; (8005af4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	4b0a      	ldr	r3, [pc, #40]	; (8005ae8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	3304      	adds	r3, #4
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	4610      	mov	r0, r2
 8005ac8:	f7fe fbcb 	bl	8004262 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005acc:	4b0a      	ldr	r3, [pc, #40]	; (8005af8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68ba      	ldr	r2, [r7, #8]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d202      	bcs.n	8005adc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005ad6:	4a08      	ldr	r2, [pc, #32]	; (8005af8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	6013      	str	r3, [r2, #0]
}
 8005adc:	bf00      	nop
 8005ade:	3710      	adds	r7, #16
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	200011ec 	.word	0x200011ec
 8005ae8:	20000d14 	.word	0x20000d14
 8005aec:	200011d4 	.word	0x200011d4
 8005af0:	200011a4 	.word	0x200011a4
 8005af4:	200011a0 	.word	0x200011a0
 8005af8:	20001208 	.word	0x20001208

08005afc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b08a      	sub	sp, #40	; 0x28
 8005b00:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005b02:	2300      	movs	r3, #0
 8005b04:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005b06:	f000 fb07 	bl	8006118 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005b0a:	4b1c      	ldr	r3, [pc, #112]	; (8005b7c <xTimerCreateTimerTask+0x80>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d021      	beq.n	8005b56 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005b12:	2300      	movs	r3, #0
 8005b14:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005b16:	2300      	movs	r3, #0
 8005b18:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005b1a:	1d3a      	adds	r2, r7, #4
 8005b1c:	f107 0108 	add.w	r1, r7, #8
 8005b20:	f107 030c 	add.w	r3, r7, #12
 8005b24:	4618      	mov	r0, r3
 8005b26:	f7fe fb31 	bl	800418c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005b2a:	6879      	ldr	r1, [r7, #4]
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	9202      	str	r2, [sp, #8]
 8005b32:	9301      	str	r3, [sp, #4]
 8005b34:	2302      	movs	r3, #2
 8005b36:	9300      	str	r3, [sp, #0]
 8005b38:	2300      	movs	r3, #0
 8005b3a:	460a      	mov	r2, r1
 8005b3c:	4910      	ldr	r1, [pc, #64]	; (8005b80 <xTimerCreateTimerTask+0x84>)
 8005b3e:	4811      	ldr	r0, [pc, #68]	; (8005b84 <xTimerCreateTimerTask+0x88>)
 8005b40:	f7ff f8de 	bl	8004d00 <xTaskCreateStatic>
 8005b44:	4603      	mov	r3, r0
 8005b46:	4a10      	ldr	r2, [pc, #64]	; (8005b88 <xTimerCreateTimerTask+0x8c>)
 8005b48:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005b4a:	4b0f      	ldr	r3, [pc, #60]	; (8005b88 <xTimerCreateTimerTask+0x8c>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d001      	beq.n	8005b56 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005b52:	2301      	movs	r3, #1
 8005b54:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d10a      	bne.n	8005b72 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b60:	f383 8811 	msr	BASEPRI, r3
 8005b64:	f3bf 8f6f 	isb	sy
 8005b68:	f3bf 8f4f 	dsb	sy
 8005b6c:	613b      	str	r3, [r7, #16]
}
 8005b6e:	bf00      	nop
 8005b70:	e7fe      	b.n	8005b70 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005b72:	697b      	ldr	r3, [r7, #20]
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3718      	adds	r7, #24
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	20001244 	.word	0x20001244
 8005b80:	08006aac 	.word	0x08006aac
 8005b84:	08005cc1 	.word	0x08005cc1
 8005b88:	20001248 	.word	0x20001248

08005b8c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b08a      	sub	sp, #40	; 0x28
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
 8005b98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d10a      	bne.n	8005bba <xTimerGenericCommand+0x2e>
	__asm volatile
 8005ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba8:	f383 8811 	msr	BASEPRI, r3
 8005bac:	f3bf 8f6f 	isb	sy
 8005bb0:	f3bf 8f4f 	dsb	sy
 8005bb4:	623b      	str	r3, [r7, #32]
}
 8005bb6:	bf00      	nop
 8005bb8:	e7fe      	b.n	8005bb8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005bba:	4b1a      	ldr	r3, [pc, #104]	; (8005c24 <xTimerGenericCommand+0x98>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d02a      	beq.n	8005c18 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	2b05      	cmp	r3, #5
 8005bd2:	dc18      	bgt.n	8005c06 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005bd4:	f7ff feb2 	bl	800593c <xTaskGetSchedulerState>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d109      	bne.n	8005bf2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005bde:	4b11      	ldr	r3, [pc, #68]	; (8005c24 <xTimerGenericCommand+0x98>)
 8005be0:	6818      	ldr	r0, [r3, #0]
 8005be2:	f107 0110 	add.w	r1, r7, #16
 8005be6:	2300      	movs	r3, #0
 8005be8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bea:	f7fe fca1 	bl	8004530 <xQueueGenericSend>
 8005bee:	6278      	str	r0, [r7, #36]	; 0x24
 8005bf0:	e012      	b.n	8005c18 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005bf2:	4b0c      	ldr	r3, [pc, #48]	; (8005c24 <xTimerGenericCommand+0x98>)
 8005bf4:	6818      	ldr	r0, [r3, #0]
 8005bf6:	f107 0110 	add.w	r1, r7, #16
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f7fe fc97 	bl	8004530 <xQueueGenericSend>
 8005c02:	6278      	str	r0, [r7, #36]	; 0x24
 8005c04:	e008      	b.n	8005c18 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005c06:	4b07      	ldr	r3, [pc, #28]	; (8005c24 <xTimerGenericCommand+0x98>)
 8005c08:	6818      	ldr	r0, [r3, #0]
 8005c0a:	f107 0110 	add.w	r1, r7, #16
 8005c0e:	2300      	movs	r3, #0
 8005c10:	683a      	ldr	r2, [r7, #0]
 8005c12:	f7fe fd8b 	bl	800472c <xQueueGenericSendFromISR>
 8005c16:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3728      	adds	r7, #40	; 0x28
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	20001244 	.word	0x20001244

08005c28 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b088      	sub	sp, #32
 8005c2c:	af02      	add	r7, sp, #8
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c32:	4b22      	ldr	r3, [pc, #136]	; (8005cbc <prvProcessExpiredTimer+0x94>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	3304      	adds	r3, #4
 8005c40:	4618      	mov	r0, r3
 8005c42:	f7fe fb47 	bl	80042d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c4c:	f003 0304 	and.w	r3, r3, #4
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d022      	beq.n	8005c9a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	699a      	ldr	r2, [r3, #24]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	18d1      	adds	r1, r2, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	683a      	ldr	r2, [r7, #0]
 8005c60:	6978      	ldr	r0, [r7, #20]
 8005c62:	f000 f8d1 	bl	8005e08 <prvInsertTimerInActiveList>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d01f      	beq.n	8005cac <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	9300      	str	r3, [sp, #0]
 8005c70:	2300      	movs	r3, #0
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	2100      	movs	r1, #0
 8005c76:	6978      	ldr	r0, [r7, #20]
 8005c78:	f7ff ff88 	bl	8005b8c <xTimerGenericCommand>
 8005c7c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d113      	bne.n	8005cac <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c88:	f383 8811 	msr	BASEPRI, r3
 8005c8c:	f3bf 8f6f 	isb	sy
 8005c90:	f3bf 8f4f 	dsb	sy
 8005c94:	60fb      	str	r3, [r7, #12]
}
 8005c96:	bf00      	nop
 8005c98:	e7fe      	b.n	8005c98 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ca0:	f023 0301 	bic.w	r3, r3, #1
 8005ca4:	b2da      	uxtb	r2, r3
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	6a1b      	ldr	r3, [r3, #32]
 8005cb0:	6978      	ldr	r0, [r7, #20]
 8005cb2:	4798      	blx	r3
}
 8005cb4:	bf00      	nop
 8005cb6:	3718      	adds	r7, #24
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	2000123c 	.word	0x2000123c

08005cc0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005cc8:	f107 0308 	add.w	r3, r7, #8
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f000 f857 	bl	8005d80 <prvGetNextExpireTime>
 8005cd2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	f000 f803 	bl	8005ce4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005cde:	f000 f8d5 	bl	8005e8c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ce2:	e7f1      	b.n	8005cc8 <prvTimerTask+0x8>

08005ce4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005cee:	f7ff fa43 	bl	8005178 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005cf2:	f107 0308 	add.w	r3, r7, #8
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f000 f866 	bl	8005dc8 <prvSampleTimeNow>
 8005cfc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d130      	bne.n	8005d66 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d10a      	bne.n	8005d20 <prvProcessTimerOrBlockTask+0x3c>
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d806      	bhi.n	8005d20 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005d12:	f7ff fa3f 	bl	8005194 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005d16:	68f9      	ldr	r1, [r7, #12]
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f7ff ff85 	bl	8005c28 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005d1e:	e024      	b.n	8005d6a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d008      	beq.n	8005d38 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005d26:	4b13      	ldr	r3, [pc, #76]	; (8005d74 <prvProcessTimerOrBlockTask+0x90>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d101      	bne.n	8005d34 <prvProcessTimerOrBlockTask+0x50>
 8005d30:	2301      	movs	r3, #1
 8005d32:	e000      	b.n	8005d36 <prvProcessTimerOrBlockTask+0x52>
 8005d34:	2300      	movs	r3, #0
 8005d36:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005d38:	4b0f      	ldr	r3, [pc, #60]	; (8005d78 <prvProcessTimerOrBlockTask+0x94>)
 8005d3a:	6818      	ldr	r0, [r3, #0]
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	683a      	ldr	r2, [r7, #0]
 8005d44:	4619      	mov	r1, r3
 8005d46:	f7fe ffa7 	bl	8004c98 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005d4a:	f7ff fa23 	bl	8005194 <xTaskResumeAll>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d10a      	bne.n	8005d6a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005d54:	4b09      	ldr	r3, [pc, #36]	; (8005d7c <prvProcessTimerOrBlockTask+0x98>)
 8005d56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d5a:	601a      	str	r2, [r3, #0]
 8005d5c:	f3bf 8f4f 	dsb	sy
 8005d60:	f3bf 8f6f 	isb	sy
}
 8005d64:	e001      	b.n	8005d6a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005d66:	f7ff fa15 	bl	8005194 <xTaskResumeAll>
}
 8005d6a:	bf00      	nop
 8005d6c:	3710      	adds	r7, #16
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	20001240 	.word	0x20001240
 8005d78:	20001244 	.word	0x20001244
 8005d7c:	e000ed04 	.word	0xe000ed04

08005d80 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005d88:	4b0e      	ldr	r3, [pc, #56]	; (8005dc4 <prvGetNextExpireTime+0x44>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d101      	bne.n	8005d96 <prvGetNextExpireTime+0x16>
 8005d92:	2201      	movs	r2, #1
 8005d94:	e000      	b.n	8005d98 <prvGetNextExpireTime+0x18>
 8005d96:	2200      	movs	r2, #0
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d105      	bne.n	8005db0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005da4:	4b07      	ldr	r3, [pc, #28]	; (8005dc4 <prvGetNextExpireTime+0x44>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	60fb      	str	r3, [r7, #12]
 8005dae:	e001      	b.n	8005db4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005db0:	2300      	movs	r3, #0
 8005db2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005db4:	68fb      	ldr	r3, [r7, #12]
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3714      	adds	r7, #20
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	2000123c 	.word	0x2000123c

08005dc8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005dd0:	f7ff fa7e 	bl	80052d0 <xTaskGetTickCount>
 8005dd4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005dd6:	4b0b      	ldr	r3, [pc, #44]	; (8005e04 <prvSampleTimeNow+0x3c>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d205      	bcs.n	8005dec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005de0:	f000 f936 	bl	8006050 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	601a      	str	r2, [r3, #0]
 8005dea:	e002      	b.n	8005df2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005df2:	4a04      	ldr	r2, [pc, #16]	; (8005e04 <prvSampleTimeNow+0x3c>)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005df8:	68fb      	ldr	r3, [r7, #12]
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3710      	adds	r7, #16
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	2000124c 	.word	0x2000124c

08005e08 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b086      	sub	sp, #24
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
 8005e14:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005e16:	2300      	movs	r3, #0
 8005e18:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	68ba      	ldr	r2, [r7, #8]
 8005e1e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005e26:	68ba      	ldr	r2, [r7, #8]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d812      	bhi.n	8005e54 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	1ad2      	subs	r2, r2, r3
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d302      	bcc.n	8005e42 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	617b      	str	r3, [r7, #20]
 8005e40:	e01b      	b.n	8005e7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005e42:	4b10      	ldr	r3, [pc, #64]	; (8005e84 <prvInsertTimerInActiveList+0x7c>)
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	3304      	adds	r3, #4
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	4610      	mov	r0, r2
 8005e4e:	f7fe fa08 	bl	8004262 <vListInsert>
 8005e52:	e012      	b.n	8005e7a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d206      	bcs.n	8005e6a <prvInsertTimerInActiveList+0x62>
 8005e5c:	68ba      	ldr	r2, [r7, #8]
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d302      	bcc.n	8005e6a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005e64:	2301      	movs	r3, #1
 8005e66:	617b      	str	r3, [r7, #20]
 8005e68:	e007      	b.n	8005e7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005e6a:	4b07      	ldr	r3, [pc, #28]	; (8005e88 <prvInsertTimerInActiveList+0x80>)
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	3304      	adds	r3, #4
 8005e72:	4619      	mov	r1, r3
 8005e74:	4610      	mov	r0, r2
 8005e76:	f7fe f9f4 	bl	8004262 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005e7a:	697b      	ldr	r3, [r7, #20]
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3718      	adds	r7, #24
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	20001240 	.word	0x20001240
 8005e88:	2000123c 	.word	0x2000123c

08005e8c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b08e      	sub	sp, #56	; 0x38
 8005e90:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005e92:	e0ca      	b.n	800602a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	da18      	bge.n	8005ecc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005e9a:	1d3b      	adds	r3, r7, #4
 8005e9c:	3304      	adds	r3, #4
 8005e9e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d10a      	bne.n	8005ebc <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eaa:	f383 8811 	msr	BASEPRI, r3
 8005eae:	f3bf 8f6f 	isb	sy
 8005eb2:	f3bf 8f4f 	dsb	sy
 8005eb6:	61fb      	str	r3, [r7, #28]
}
 8005eb8:	bf00      	nop
 8005eba:	e7fe      	b.n	8005eba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ec2:	6850      	ldr	r0, [r2, #4]
 8005ec4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ec6:	6892      	ldr	r2, [r2, #8]
 8005ec8:	4611      	mov	r1, r2
 8005eca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	f2c0 80ab 	blt.w	800602a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eda:	695b      	ldr	r3, [r3, #20]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d004      	beq.n	8005eea <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee2:	3304      	adds	r3, #4
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f7fe f9f5 	bl	80042d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005eea:	463b      	mov	r3, r7
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7ff ff6b 	bl	8005dc8 <prvSampleTimeNow>
 8005ef2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2b09      	cmp	r3, #9
 8005ef8:	f200 8096 	bhi.w	8006028 <prvProcessReceivedCommands+0x19c>
 8005efc:	a201      	add	r2, pc, #4	; (adr r2, 8005f04 <prvProcessReceivedCommands+0x78>)
 8005efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f02:	bf00      	nop
 8005f04:	08005f2d 	.word	0x08005f2d
 8005f08:	08005f2d 	.word	0x08005f2d
 8005f0c:	08005f2d 	.word	0x08005f2d
 8005f10:	08005fa1 	.word	0x08005fa1
 8005f14:	08005fb5 	.word	0x08005fb5
 8005f18:	08005fff 	.word	0x08005fff
 8005f1c:	08005f2d 	.word	0x08005f2d
 8005f20:	08005f2d 	.word	0x08005f2d
 8005f24:	08005fa1 	.word	0x08005fa1
 8005f28:	08005fb5 	.word	0x08005fb5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f32:	f043 0301 	orr.w	r3, r3, #1
 8005f36:	b2da      	uxtb	r2, r3
 8005f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005f3e:	68ba      	ldr	r2, [r7, #8]
 8005f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f42:	699b      	ldr	r3, [r3, #24]
 8005f44:	18d1      	adds	r1, r2, r3
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f4c:	f7ff ff5c 	bl	8005e08 <prvInsertTimerInActiveList>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d069      	beq.n	800602a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f58:	6a1b      	ldr	r3, [r3, #32]
 8005f5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f5c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f64:	f003 0304 	and.w	r3, r3, #4
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d05e      	beq.n	800602a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005f6c:	68ba      	ldr	r2, [r7, #8]
 8005f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f70:	699b      	ldr	r3, [r3, #24]
 8005f72:	441a      	add	r2, r3
 8005f74:	2300      	movs	r3, #0
 8005f76:	9300      	str	r3, [sp, #0]
 8005f78:	2300      	movs	r3, #0
 8005f7a:	2100      	movs	r1, #0
 8005f7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f7e:	f7ff fe05 	bl	8005b8c <xTimerGenericCommand>
 8005f82:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005f84:	6a3b      	ldr	r3, [r7, #32]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d14f      	bne.n	800602a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f8e:	f383 8811 	msr	BASEPRI, r3
 8005f92:	f3bf 8f6f 	isb	sy
 8005f96:	f3bf 8f4f 	dsb	sy
 8005f9a:	61bb      	str	r3, [r7, #24]
}
 8005f9c:	bf00      	nop
 8005f9e:	e7fe      	b.n	8005f9e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fa6:	f023 0301 	bic.w	r3, r3, #1
 8005faa:	b2da      	uxtb	r2, r3
 8005fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005fb2:	e03a      	b.n	800602a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fba:	f043 0301 	orr.w	r3, r3, #1
 8005fbe:	b2da      	uxtb	r2, r3
 8005fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005fc6:	68ba      	ldr	r2, [r7, #8]
 8005fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fce:	699b      	ldr	r3, [r3, #24]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d10a      	bne.n	8005fea <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd8:	f383 8811 	msr	BASEPRI, r3
 8005fdc:	f3bf 8f6f 	isb	sy
 8005fe0:	f3bf 8f4f 	dsb	sy
 8005fe4:	617b      	str	r3, [r7, #20]
}
 8005fe6:	bf00      	nop
 8005fe8:	e7fe      	b.n	8005fe8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fec:	699a      	ldr	r2, [r3, #24]
 8005fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff0:	18d1      	adds	r1, r2, r3
 8005ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ff6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ff8:	f7ff ff06 	bl	8005e08 <prvInsertTimerInActiveList>
					break;
 8005ffc:	e015      	b.n	800602a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006000:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006004:	f003 0302 	and.w	r3, r3, #2
 8006008:	2b00      	cmp	r3, #0
 800600a:	d103      	bne.n	8006014 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800600c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800600e:	f000 fbdf 	bl	80067d0 <vPortFree>
 8006012:	e00a      	b.n	800602a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006016:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800601a:	f023 0301 	bic.w	r3, r3, #1
 800601e:	b2da      	uxtb	r2, r3
 8006020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006022:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006026:	e000      	b.n	800602a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8006028:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800602a:	4b08      	ldr	r3, [pc, #32]	; (800604c <prvProcessReceivedCommands+0x1c0>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	1d39      	adds	r1, r7, #4
 8006030:	2200      	movs	r2, #0
 8006032:	4618      	mov	r0, r3
 8006034:	f7fe fc16 	bl	8004864 <xQueueReceive>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	f47f af2a 	bne.w	8005e94 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006040:	bf00      	nop
 8006042:	bf00      	nop
 8006044:	3730      	adds	r7, #48	; 0x30
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	20001244 	.word	0x20001244

08006050 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b088      	sub	sp, #32
 8006054:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006056:	e048      	b.n	80060ea <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006058:	4b2d      	ldr	r3, [pc, #180]	; (8006110 <prvSwitchTimerLists+0xc0>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006062:	4b2b      	ldr	r3, [pc, #172]	; (8006110 <prvSwitchTimerLists+0xc0>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	3304      	adds	r3, #4
 8006070:	4618      	mov	r0, r3
 8006072:	f7fe f92f 	bl	80042d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6a1b      	ldr	r3, [r3, #32]
 800607a:	68f8      	ldr	r0, [r7, #12]
 800607c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006084:	f003 0304 	and.w	r3, r3, #4
 8006088:	2b00      	cmp	r3, #0
 800608a:	d02e      	beq.n	80060ea <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	699b      	ldr	r3, [r3, #24]
 8006090:	693a      	ldr	r2, [r7, #16]
 8006092:	4413      	add	r3, r2
 8006094:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006096:	68ba      	ldr	r2, [r7, #8]
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	429a      	cmp	r2, r3
 800609c:	d90e      	bls.n	80060bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	68ba      	ldr	r2, [r7, #8]
 80060a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	68fa      	ldr	r2, [r7, #12]
 80060a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80060aa:	4b19      	ldr	r3, [pc, #100]	; (8006110 <prvSwitchTimerLists+0xc0>)
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	3304      	adds	r3, #4
 80060b2:	4619      	mov	r1, r3
 80060b4:	4610      	mov	r0, r2
 80060b6:	f7fe f8d4 	bl	8004262 <vListInsert>
 80060ba:	e016      	b.n	80060ea <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80060bc:	2300      	movs	r3, #0
 80060be:	9300      	str	r3, [sp, #0]
 80060c0:	2300      	movs	r3, #0
 80060c2:	693a      	ldr	r2, [r7, #16]
 80060c4:	2100      	movs	r1, #0
 80060c6:	68f8      	ldr	r0, [r7, #12]
 80060c8:	f7ff fd60 	bl	8005b8c <xTimerGenericCommand>
 80060cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d10a      	bne.n	80060ea <prvSwitchTimerLists+0x9a>
	__asm volatile
 80060d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d8:	f383 8811 	msr	BASEPRI, r3
 80060dc:	f3bf 8f6f 	isb	sy
 80060e0:	f3bf 8f4f 	dsb	sy
 80060e4:	603b      	str	r3, [r7, #0]
}
 80060e6:	bf00      	nop
 80060e8:	e7fe      	b.n	80060e8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80060ea:	4b09      	ldr	r3, [pc, #36]	; (8006110 <prvSwitchTimerLists+0xc0>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d1b1      	bne.n	8006058 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80060f4:	4b06      	ldr	r3, [pc, #24]	; (8006110 <prvSwitchTimerLists+0xc0>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80060fa:	4b06      	ldr	r3, [pc, #24]	; (8006114 <prvSwitchTimerLists+0xc4>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a04      	ldr	r2, [pc, #16]	; (8006110 <prvSwitchTimerLists+0xc0>)
 8006100:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006102:	4a04      	ldr	r2, [pc, #16]	; (8006114 <prvSwitchTimerLists+0xc4>)
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	6013      	str	r3, [r2, #0]
}
 8006108:	bf00      	nop
 800610a:	3718      	adds	r7, #24
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}
 8006110:	2000123c 	.word	0x2000123c
 8006114:	20001240 	.word	0x20001240

08006118 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800611e:	f000 f969 	bl	80063f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006122:	4b15      	ldr	r3, [pc, #84]	; (8006178 <prvCheckForValidListAndQueue+0x60>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d120      	bne.n	800616c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800612a:	4814      	ldr	r0, [pc, #80]	; (800617c <prvCheckForValidListAndQueue+0x64>)
 800612c:	f7fe f848 	bl	80041c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006130:	4813      	ldr	r0, [pc, #76]	; (8006180 <prvCheckForValidListAndQueue+0x68>)
 8006132:	f7fe f845 	bl	80041c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006136:	4b13      	ldr	r3, [pc, #76]	; (8006184 <prvCheckForValidListAndQueue+0x6c>)
 8006138:	4a10      	ldr	r2, [pc, #64]	; (800617c <prvCheckForValidListAndQueue+0x64>)
 800613a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800613c:	4b12      	ldr	r3, [pc, #72]	; (8006188 <prvCheckForValidListAndQueue+0x70>)
 800613e:	4a10      	ldr	r2, [pc, #64]	; (8006180 <prvCheckForValidListAndQueue+0x68>)
 8006140:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006142:	2300      	movs	r3, #0
 8006144:	9300      	str	r3, [sp, #0]
 8006146:	4b11      	ldr	r3, [pc, #68]	; (800618c <prvCheckForValidListAndQueue+0x74>)
 8006148:	4a11      	ldr	r2, [pc, #68]	; (8006190 <prvCheckForValidListAndQueue+0x78>)
 800614a:	2110      	movs	r1, #16
 800614c:	200a      	movs	r0, #10
 800614e:	f7fe f953 	bl	80043f8 <xQueueGenericCreateStatic>
 8006152:	4603      	mov	r3, r0
 8006154:	4a08      	ldr	r2, [pc, #32]	; (8006178 <prvCheckForValidListAndQueue+0x60>)
 8006156:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006158:	4b07      	ldr	r3, [pc, #28]	; (8006178 <prvCheckForValidListAndQueue+0x60>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d005      	beq.n	800616c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006160:	4b05      	ldr	r3, [pc, #20]	; (8006178 <prvCheckForValidListAndQueue+0x60>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	490b      	ldr	r1, [pc, #44]	; (8006194 <prvCheckForValidListAndQueue+0x7c>)
 8006166:	4618      	mov	r0, r3
 8006168:	f7fe fd6c 	bl	8004c44 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800616c:	f000 f972 	bl	8006454 <vPortExitCritical>
}
 8006170:	bf00      	nop
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	20001244 	.word	0x20001244
 800617c:	20001214 	.word	0x20001214
 8006180:	20001228 	.word	0x20001228
 8006184:	2000123c 	.word	0x2000123c
 8006188:	20001240 	.word	0x20001240
 800618c:	200012f0 	.word	0x200012f0
 8006190:	20001250 	.word	0x20001250
 8006194:	08006ab4 	.word	0x08006ab4

08006198 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	3b04      	subs	r3, #4
 80061a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80061b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	3b04      	subs	r3, #4
 80061b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	f023 0201 	bic.w	r2, r3, #1
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	3b04      	subs	r3, #4
 80061c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80061c8:	4a0c      	ldr	r2, [pc, #48]	; (80061fc <pxPortInitialiseStack+0x64>)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	3b14      	subs	r3, #20
 80061d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	3b04      	subs	r3, #4
 80061de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f06f 0202 	mvn.w	r2, #2
 80061e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	3b20      	subs	r3, #32
 80061ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80061ee:	68fb      	ldr	r3, [r7, #12]
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3714      	adds	r7, #20
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr
 80061fc:	08006201 	.word	0x08006201

08006200 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006200:	b480      	push	{r7}
 8006202:	b085      	sub	sp, #20
 8006204:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006206:	2300      	movs	r3, #0
 8006208:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800620a:	4b12      	ldr	r3, [pc, #72]	; (8006254 <prvTaskExitError+0x54>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006212:	d00a      	beq.n	800622a <prvTaskExitError+0x2a>
	__asm volatile
 8006214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006218:	f383 8811 	msr	BASEPRI, r3
 800621c:	f3bf 8f6f 	isb	sy
 8006220:	f3bf 8f4f 	dsb	sy
 8006224:	60fb      	str	r3, [r7, #12]
}
 8006226:	bf00      	nop
 8006228:	e7fe      	b.n	8006228 <prvTaskExitError+0x28>
	__asm volatile
 800622a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622e:	f383 8811 	msr	BASEPRI, r3
 8006232:	f3bf 8f6f 	isb	sy
 8006236:	f3bf 8f4f 	dsb	sy
 800623a:	60bb      	str	r3, [r7, #8]
}
 800623c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800623e:	bf00      	nop
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d0fc      	beq.n	8006240 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006246:	bf00      	nop
 8006248:	bf00      	nop
 800624a:	3714      	adds	r7, #20
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr
 8006254:	20000010 	.word	0x20000010
	...

08006260 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006260:	4b07      	ldr	r3, [pc, #28]	; (8006280 <pxCurrentTCBConst2>)
 8006262:	6819      	ldr	r1, [r3, #0]
 8006264:	6808      	ldr	r0, [r1, #0]
 8006266:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800626a:	f380 8809 	msr	PSP, r0
 800626e:	f3bf 8f6f 	isb	sy
 8006272:	f04f 0000 	mov.w	r0, #0
 8006276:	f380 8811 	msr	BASEPRI, r0
 800627a:	4770      	bx	lr
 800627c:	f3af 8000 	nop.w

08006280 <pxCurrentTCBConst2>:
 8006280:	20000d14 	.word	0x20000d14
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006284:	bf00      	nop
 8006286:	bf00      	nop

08006288 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006288:	4808      	ldr	r0, [pc, #32]	; (80062ac <prvPortStartFirstTask+0x24>)
 800628a:	6800      	ldr	r0, [r0, #0]
 800628c:	6800      	ldr	r0, [r0, #0]
 800628e:	f380 8808 	msr	MSP, r0
 8006292:	f04f 0000 	mov.w	r0, #0
 8006296:	f380 8814 	msr	CONTROL, r0
 800629a:	b662      	cpsie	i
 800629c:	b661      	cpsie	f
 800629e:	f3bf 8f4f 	dsb	sy
 80062a2:	f3bf 8f6f 	isb	sy
 80062a6:	df00      	svc	0
 80062a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80062aa:	bf00      	nop
 80062ac:	e000ed08 	.word	0xe000ed08

080062b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b086      	sub	sp, #24
 80062b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80062b6:	4b46      	ldr	r3, [pc, #280]	; (80063d0 <xPortStartScheduler+0x120>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a46      	ldr	r2, [pc, #280]	; (80063d4 <xPortStartScheduler+0x124>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d10a      	bne.n	80062d6 <xPortStartScheduler+0x26>
	__asm volatile
 80062c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c4:	f383 8811 	msr	BASEPRI, r3
 80062c8:	f3bf 8f6f 	isb	sy
 80062cc:	f3bf 8f4f 	dsb	sy
 80062d0:	613b      	str	r3, [r7, #16]
}
 80062d2:	bf00      	nop
 80062d4:	e7fe      	b.n	80062d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80062d6:	4b3e      	ldr	r3, [pc, #248]	; (80063d0 <xPortStartScheduler+0x120>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a3f      	ldr	r2, [pc, #252]	; (80063d8 <xPortStartScheduler+0x128>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d10a      	bne.n	80062f6 <xPortStartScheduler+0x46>
	__asm volatile
 80062e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e4:	f383 8811 	msr	BASEPRI, r3
 80062e8:	f3bf 8f6f 	isb	sy
 80062ec:	f3bf 8f4f 	dsb	sy
 80062f0:	60fb      	str	r3, [r7, #12]
}
 80062f2:	bf00      	nop
 80062f4:	e7fe      	b.n	80062f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80062f6:	4b39      	ldr	r3, [pc, #228]	; (80063dc <xPortStartScheduler+0x12c>)
 80062f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	22ff      	movs	r2, #255	; 0xff
 8006306:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	b2db      	uxtb	r3, r3
 800630e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006310:	78fb      	ldrb	r3, [r7, #3]
 8006312:	b2db      	uxtb	r3, r3
 8006314:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006318:	b2da      	uxtb	r2, r3
 800631a:	4b31      	ldr	r3, [pc, #196]	; (80063e0 <xPortStartScheduler+0x130>)
 800631c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800631e:	4b31      	ldr	r3, [pc, #196]	; (80063e4 <xPortStartScheduler+0x134>)
 8006320:	2207      	movs	r2, #7
 8006322:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006324:	e009      	b.n	800633a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006326:	4b2f      	ldr	r3, [pc, #188]	; (80063e4 <xPortStartScheduler+0x134>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	3b01      	subs	r3, #1
 800632c:	4a2d      	ldr	r2, [pc, #180]	; (80063e4 <xPortStartScheduler+0x134>)
 800632e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006330:	78fb      	ldrb	r3, [r7, #3]
 8006332:	b2db      	uxtb	r3, r3
 8006334:	005b      	lsls	r3, r3, #1
 8006336:	b2db      	uxtb	r3, r3
 8006338:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800633a:	78fb      	ldrb	r3, [r7, #3]
 800633c:	b2db      	uxtb	r3, r3
 800633e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006342:	2b80      	cmp	r3, #128	; 0x80
 8006344:	d0ef      	beq.n	8006326 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006346:	4b27      	ldr	r3, [pc, #156]	; (80063e4 <xPortStartScheduler+0x134>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f1c3 0307 	rsb	r3, r3, #7
 800634e:	2b04      	cmp	r3, #4
 8006350:	d00a      	beq.n	8006368 <xPortStartScheduler+0xb8>
	__asm volatile
 8006352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006356:	f383 8811 	msr	BASEPRI, r3
 800635a:	f3bf 8f6f 	isb	sy
 800635e:	f3bf 8f4f 	dsb	sy
 8006362:	60bb      	str	r3, [r7, #8]
}
 8006364:	bf00      	nop
 8006366:	e7fe      	b.n	8006366 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006368:	4b1e      	ldr	r3, [pc, #120]	; (80063e4 <xPortStartScheduler+0x134>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	021b      	lsls	r3, r3, #8
 800636e:	4a1d      	ldr	r2, [pc, #116]	; (80063e4 <xPortStartScheduler+0x134>)
 8006370:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006372:	4b1c      	ldr	r3, [pc, #112]	; (80063e4 <xPortStartScheduler+0x134>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800637a:	4a1a      	ldr	r2, [pc, #104]	; (80063e4 <xPortStartScheduler+0x134>)
 800637c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	b2da      	uxtb	r2, r3
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006386:	4b18      	ldr	r3, [pc, #96]	; (80063e8 <xPortStartScheduler+0x138>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a17      	ldr	r2, [pc, #92]	; (80063e8 <xPortStartScheduler+0x138>)
 800638c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006390:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006392:	4b15      	ldr	r3, [pc, #84]	; (80063e8 <xPortStartScheduler+0x138>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a14      	ldr	r2, [pc, #80]	; (80063e8 <xPortStartScheduler+0x138>)
 8006398:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800639c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800639e:	f000 f8dd 	bl	800655c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80063a2:	4b12      	ldr	r3, [pc, #72]	; (80063ec <xPortStartScheduler+0x13c>)
 80063a4:	2200      	movs	r2, #0
 80063a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80063a8:	f000 f8fc 	bl	80065a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80063ac:	4b10      	ldr	r3, [pc, #64]	; (80063f0 <xPortStartScheduler+0x140>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a0f      	ldr	r2, [pc, #60]	; (80063f0 <xPortStartScheduler+0x140>)
 80063b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80063b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80063b8:	f7ff ff66 	bl	8006288 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80063bc:	f7ff f852 	bl	8005464 <vTaskSwitchContext>
	prvTaskExitError();
 80063c0:	f7ff ff1e 	bl	8006200 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3718      	adds	r7, #24
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	e000ed00 	.word	0xe000ed00
 80063d4:	410fc271 	.word	0x410fc271
 80063d8:	410fc270 	.word	0x410fc270
 80063dc:	e000e400 	.word	0xe000e400
 80063e0:	20001340 	.word	0x20001340
 80063e4:	20001344 	.word	0x20001344
 80063e8:	e000ed20 	.word	0xe000ed20
 80063ec:	20000010 	.word	0x20000010
 80063f0:	e000ef34 	.word	0xe000ef34

080063f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
	__asm volatile
 80063fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fe:	f383 8811 	msr	BASEPRI, r3
 8006402:	f3bf 8f6f 	isb	sy
 8006406:	f3bf 8f4f 	dsb	sy
 800640a:	607b      	str	r3, [r7, #4]
}
 800640c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800640e:	4b0f      	ldr	r3, [pc, #60]	; (800644c <vPortEnterCritical+0x58>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	3301      	adds	r3, #1
 8006414:	4a0d      	ldr	r2, [pc, #52]	; (800644c <vPortEnterCritical+0x58>)
 8006416:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006418:	4b0c      	ldr	r3, [pc, #48]	; (800644c <vPortEnterCritical+0x58>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2b01      	cmp	r3, #1
 800641e:	d10f      	bne.n	8006440 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006420:	4b0b      	ldr	r3, [pc, #44]	; (8006450 <vPortEnterCritical+0x5c>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	b2db      	uxtb	r3, r3
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00a      	beq.n	8006440 <vPortEnterCritical+0x4c>
	__asm volatile
 800642a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642e:	f383 8811 	msr	BASEPRI, r3
 8006432:	f3bf 8f6f 	isb	sy
 8006436:	f3bf 8f4f 	dsb	sy
 800643a:	603b      	str	r3, [r7, #0]
}
 800643c:	bf00      	nop
 800643e:	e7fe      	b.n	800643e <vPortEnterCritical+0x4a>
	}
}
 8006440:	bf00      	nop
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr
 800644c:	20000010 	.word	0x20000010
 8006450:	e000ed04 	.word	0xe000ed04

08006454 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800645a:	4b12      	ldr	r3, [pc, #72]	; (80064a4 <vPortExitCritical+0x50>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d10a      	bne.n	8006478 <vPortExitCritical+0x24>
	__asm volatile
 8006462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006466:	f383 8811 	msr	BASEPRI, r3
 800646a:	f3bf 8f6f 	isb	sy
 800646e:	f3bf 8f4f 	dsb	sy
 8006472:	607b      	str	r3, [r7, #4]
}
 8006474:	bf00      	nop
 8006476:	e7fe      	b.n	8006476 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006478:	4b0a      	ldr	r3, [pc, #40]	; (80064a4 <vPortExitCritical+0x50>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	3b01      	subs	r3, #1
 800647e:	4a09      	ldr	r2, [pc, #36]	; (80064a4 <vPortExitCritical+0x50>)
 8006480:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006482:	4b08      	ldr	r3, [pc, #32]	; (80064a4 <vPortExitCritical+0x50>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d105      	bne.n	8006496 <vPortExitCritical+0x42>
 800648a:	2300      	movs	r3, #0
 800648c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	f383 8811 	msr	BASEPRI, r3
}
 8006494:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006496:	bf00      	nop
 8006498:	370c      	adds	r7, #12
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	20000010 	.word	0x20000010
	...

080064b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80064b0:	f3ef 8009 	mrs	r0, PSP
 80064b4:	f3bf 8f6f 	isb	sy
 80064b8:	4b15      	ldr	r3, [pc, #84]	; (8006510 <pxCurrentTCBConst>)
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	f01e 0f10 	tst.w	lr, #16
 80064c0:	bf08      	it	eq
 80064c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80064c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ca:	6010      	str	r0, [r2, #0]
 80064cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80064d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80064d4:	f380 8811 	msr	BASEPRI, r0
 80064d8:	f3bf 8f4f 	dsb	sy
 80064dc:	f3bf 8f6f 	isb	sy
 80064e0:	f7fe ffc0 	bl	8005464 <vTaskSwitchContext>
 80064e4:	f04f 0000 	mov.w	r0, #0
 80064e8:	f380 8811 	msr	BASEPRI, r0
 80064ec:	bc09      	pop	{r0, r3}
 80064ee:	6819      	ldr	r1, [r3, #0]
 80064f0:	6808      	ldr	r0, [r1, #0]
 80064f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064f6:	f01e 0f10 	tst.w	lr, #16
 80064fa:	bf08      	it	eq
 80064fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006500:	f380 8809 	msr	PSP, r0
 8006504:	f3bf 8f6f 	isb	sy
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop
 800650c:	f3af 8000 	nop.w

08006510 <pxCurrentTCBConst>:
 8006510:	20000d14 	.word	0x20000d14
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006514:	bf00      	nop
 8006516:	bf00      	nop

08006518 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
	__asm volatile
 800651e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006522:	f383 8811 	msr	BASEPRI, r3
 8006526:	f3bf 8f6f 	isb	sy
 800652a:	f3bf 8f4f 	dsb	sy
 800652e:	607b      	str	r3, [r7, #4]
}
 8006530:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006532:	f7fe fedd 	bl	80052f0 <xTaskIncrementTick>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d003      	beq.n	8006544 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800653c:	4b06      	ldr	r3, [pc, #24]	; (8006558 <xPortSysTickHandler+0x40>)
 800653e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006542:	601a      	str	r2, [r3, #0]
 8006544:	2300      	movs	r3, #0
 8006546:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	f383 8811 	msr	BASEPRI, r3
}
 800654e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006550:	bf00      	nop
 8006552:	3708      	adds	r7, #8
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}
 8006558:	e000ed04 	.word	0xe000ed04

0800655c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800655c:	b480      	push	{r7}
 800655e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006560:	4b0b      	ldr	r3, [pc, #44]	; (8006590 <vPortSetupTimerInterrupt+0x34>)
 8006562:	2200      	movs	r2, #0
 8006564:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006566:	4b0b      	ldr	r3, [pc, #44]	; (8006594 <vPortSetupTimerInterrupt+0x38>)
 8006568:	2200      	movs	r2, #0
 800656a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800656c:	4b0a      	ldr	r3, [pc, #40]	; (8006598 <vPortSetupTimerInterrupt+0x3c>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a0a      	ldr	r2, [pc, #40]	; (800659c <vPortSetupTimerInterrupt+0x40>)
 8006572:	fba2 2303 	umull	r2, r3, r2, r3
 8006576:	099b      	lsrs	r3, r3, #6
 8006578:	4a09      	ldr	r2, [pc, #36]	; (80065a0 <vPortSetupTimerInterrupt+0x44>)
 800657a:	3b01      	subs	r3, #1
 800657c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800657e:	4b04      	ldr	r3, [pc, #16]	; (8006590 <vPortSetupTimerInterrupt+0x34>)
 8006580:	2207      	movs	r2, #7
 8006582:	601a      	str	r2, [r3, #0]
}
 8006584:	bf00      	nop
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr
 800658e:	bf00      	nop
 8006590:	e000e010 	.word	0xe000e010
 8006594:	e000e018 	.word	0xe000e018
 8006598:	20000004 	.word	0x20000004
 800659c:	10624dd3 	.word	0x10624dd3
 80065a0:	e000e014 	.word	0xe000e014

080065a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80065a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80065b4 <vPortEnableVFP+0x10>
 80065a8:	6801      	ldr	r1, [r0, #0]
 80065aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80065ae:	6001      	str	r1, [r0, #0]
 80065b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80065b2:	bf00      	nop
 80065b4:	e000ed88 	.word	0xe000ed88

080065b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80065b8:	b480      	push	{r7}
 80065ba:	b085      	sub	sp, #20
 80065bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80065be:	f3ef 8305 	mrs	r3, IPSR
 80065c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2b0f      	cmp	r3, #15
 80065c8:	d914      	bls.n	80065f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80065ca:	4a17      	ldr	r2, [pc, #92]	; (8006628 <vPortValidateInterruptPriority+0x70>)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	4413      	add	r3, r2
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80065d4:	4b15      	ldr	r3, [pc, #84]	; (800662c <vPortValidateInterruptPriority+0x74>)
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	7afa      	ldrb	r2, [r7, #11]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d20a      	bcs.n	80065f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80065de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e2:	f383 8811 	msr	BASEPRI, r3
 80065e6:	f3bf 8f6f 	isb	sy
 80065ea:	f3bf 8f4f 	dsb	sy
 80065ee:	607b      	str	r3, [r7, #4]
}
 80065f0:	bf00      	nop
 80065f2:	e7fe      	b.n	80065f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80065f4:	4b0e      	ldr	r3, [pc, #56]	; (8006630 <vPortValidateInterruptPriority+0x78>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80065fc:	4b0d      	ldr	r3, [pc, #52]	; (8006634 <vPortValidateInterruptPriority+0x7c>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	429a      	cmp	r2, r3
 8006602:	d90a      	bls.n	800661a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006608:	f383 8811 	msr	BASEPRI, r3
 800660c:	f3bf 8f6f 	isb	sy
 8006610:	f3bf 8f4f 	dsb	sy
 8006614:	603b      	str	r3, [r7, #0]
}
 8006616:	bf00      	nop
 8006618:	e7fe      	b.n	8006618 <vPortValidateInterruptPriority+0x60>
	}
 800661a:	bf00      	nop
 800661c:	3714      	adds	r7, #20
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	e000e3f0 	.word	0xe000e3f0
 800662c:	20001340 	.word	0x20001340
 8006630:	e000ed0c 	.word	0xe000ed0c
 8006634:	20001344 	.word	0x20001344

08006638 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b08a      	sub	sp, #40	; 0x28
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006640:	2300      	movs	r3, #0
 8006642:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006644:	f7fe fd98 	bl	8005178 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006648:	4b5b      	ldr	r3, [pc, #364]	; (80067b8 <pvPortMalloc+0x180>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d101      	bne.n	8006654 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006650:	f000 f920 	bl	8006894 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006654:	4b59      	ldr	r3, [pc, #356]	; (80067bc <pvPortMalloc+0x184>)
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4013      	ands	r3, r2
 800665c:	2b00      	cmp	r3, #0
 800665e:	f040 8093 	bne.w	8006788 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d01d      	beq.n	80066a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006668:	2208      	movs	r2, #8
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4413      	add	r3, r2
 800666e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f003 0307 	and.w	r3, r3, #7
 8006676:	2b00      	cmp	r3, #0
 8006678:	d014      	beq.n	80066a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f023 0307 	bic.w	r3, r3, #7
 8006680:	3308      	adds	r3, #8
 8006682:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f003 0307 	and.w	r3, r3, #7
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00a      	beq.n	80066a4 <pvPortMalloc+0x6c>
	__asm volatile
 800668e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006692:	f383 8811 	msr	BASEPRI, r3
 8006696:	f3bf 8f6f 	isb	sy
 800669a:	f3bf 8f4f 	dsb	sy
 800669e:	617b      	str	r3, [r7, #20]
}
 80066a0:	bf00      	nop
 80066a2:	e7fe      	b.n	80066a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d06e      	beq.n	8006788 <pvPortMalloc+0x150>
 80066aa:	4b45      	ldr	r3, [pc, #276]	; (80067c0 <pvPortMalloc+0x188>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d869      	bhi.n	8006788 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80066b4:	4b43      	ldr	r3, [pc, #268]	; (80067c4 <pvPortMalloc+0x18c>)
 80066b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80066b8:	4b42      	ldr	r3, [pc, #264]	; (80067c4 <pvPortMalloc+0x18c>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066be:	e004      	b.n	80066ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80066c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80066c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d903      	bls.n	80066dc <pvPortMalloc+0xa4>
 80066d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d1f1      	bne.n	80066c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80066dc:	4b36      	ldr	r3, [pc, #216]	; (80067b8 <pvPortMalloc+0x180>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d050      	beq.n	8006788 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80066e6:	6a3b      	ldr	r3, [r7, #32]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2208      	movs	r2, #8
 80066ec:	4413      	add	r3, r2
 80066ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80066f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	6a3b      	ldr	r3, [r7, #32]
 80066f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80066f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fa:	685a      	ldr	r2, [r3, #4]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	1ad2      	subs	r2, r2, r3
 8006700:	2308      	movs	r3, #8
 8006702:	005b      	lsls	r3, r3, #1
 8006704:	429a      	cmp	r2, r3
 8006706:	d91f      	bls.n	8006748 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4413      	add	r3, r2
 800670e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	f003 0307 	and.w	r3, r3, #7
 8006716:	2b00      	cmp	r3, #0
 8006718:	d00a      	beq.n	8006730 <pvPortMalloc+0xf8>
	__asm volatile
 800671a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671e:	f383 8811 	msr	BASEPRI, r3
 8006722:	f3bf 8f6f 	isb	sy
 8006726:	f3bf 8f4f 	dsb	sy
 800672a:	613b      	str	r3, [r7, #16]
}
 800672c:	bf00      	nop
 800672e:	e7fe      	b.n	800672e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006732:	685a      	ldr	r2, [r3, #4]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	1ad2      	subs	r2, r2, r3
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800673c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006742:	69b8      	ldr	r0, [r7, #24]
 8006744:	f000 f908 	bl	8006958 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006748:	4b1d      	ldr	r3, [pc, #116]	; (80067c0 <pvPortMalloc+0x188>)
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	4a1b      	ldr	r2, [pc, #108]	; (80067c0 <pvPortMalloc+0x188>)
 8006754:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006756:	4b1a      	ldr	r3, [pc, #104]	; (80067c0 <pvPortMalloc+0x188>)
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	4b1b      	ldr	r3, [pc, #108]	; (80067c8 <pvPortMalloc+0x190>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	429a      	cmp	r2, r3
 8006760:	d203      	bcs.n	800676a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006762:	4b17      	ldr	r3, [pc, #92]	; (80067c0 <pvPortMalloc+0x188>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a18      	ldr	r2, [pc, #96]	; (80067c8 <pvPortMalloc+0x190>)
 8006768:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800676a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676c:	685a      	ldr	r2, [r3, #4]
 800676e:	4b13      	ldr	r3, [pc, #76]	; (80067bc <pvPortMalloc+0x184>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	431a      	orrs	r2, r3
 8006774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006776:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677a:	2200      	movs	r2, #0
 800677c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800677e:	4b13      	ldr	r3, [pc, #76]	; (80067cc <pvPortMalloc+0x194>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	3301      	adds	r3, #1
 8006784:	4a11      	ldr	r2, [pc, #68]	; (80067cc <pvPortMalloc+0x194>)
 8006786:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006788:	f7fe fd04 	bl	8005194 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	f003 0307 	and.w	r3, r3, #7
 8006792:	2b00      	cmp	r3, #0
 8006794:	d00a      	beq.n	80067ac <pvPortMalloc+0x174>
	__asm volatile
 8006796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800679a:	f383 8811 	msr	BASEPRI, r3
 800679e:	f3bf 8f6f 	isb	sy
 80067a2:	f3bf 8f4f 	dsb	sy
 80067a6:	60fb      	str	r3, [r7, #12]
}
 80067a8:	bf00      	nop
 80067aa:	e7fe      	b.n	80067aa <pvPortMalloc+0x172>
	return pvReturn;
 80067ac:	69fb      	ldr	r3, [r7, #28]
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3728      	adds	r7, #40	; 0x28
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	20004f50 	.word	0x20004f50
 80067bc:	20004f64 	.word	0x20004f64
 80067c0:	20004f54 	.word	0x20004f54
 80067c4:	20004f48 	.word	0x20004f48
 80067c8:	20004f58 	.word	0x20004f58
 80067cc:	20004f5c 	.word	0x20004f5c

080067d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b086      	sub	sp, #24
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d04d      	beq.n	800687e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80067e2:	2308      	movs	r3, #8
 80067e4:	425b      	negs	r3, r3
 80067e6:	697a      	ldr	r2, [r7, #20]
 80067e8:	4413      	add	r3, r2
 80067ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	685a      	ldr	r2, [r3, #4]
 80067f4:	4b24      	ldr	r3, [pc, #144]	; (8006888 <vPortFree+0xb8>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4013      	ands	r3, r2
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d10a      	bne.n	8006814 <vPortFree+0x44>
	__asm volatile
 80067fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006802:	f383 8811 	msr	BASEPRI, r3
 8006806:	f3bf 8f6f 	isb	sy
 800680a:	f3bf 8f4f 	dsb	sy
 800680e:	60fb      	str	r3, [r7, #12]
}
 8006810:	bf00      	nop
 8006812:	e7fe      	b.n	8006812 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d00a      	beq.n	8006832 <vPortFree+0x62>
	__asm volatile
 800681c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006820:	f383 8811 	msr	BASEPRI, r3
 8006824:	f3bf 8f6f 	isb	sy
 8006828:	f3bf 8f4f 	dsb	sy
 800682c:	60bb      	str	r3, [r7, #8]
}
 800682e:	bf00      	nop
 8006830:	e7fe      	b.n	8006830 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	685a      	ldr	r2, [r3, #4]
 8006836:	4b14      	ldr	r3, [pc, #80]	; (8006888 <vPortFree+0xb8>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4013      	ands	r3, r2
 800683c:	2b00      	cmp	r3, #0
 800683e:	d01e      	beq.n	800687e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d11a      	bne.n	800687e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	685a      	ldr	r2, [r3, #4]
 800684c:	4b0e      	ldr	r3, [pc, #56]	; (8006888 <vPortFree+0xb8>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	43db      	mvns	r3, r3
 8006852:	401a      	ands	r2, r3
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006858:	f7fe fc8e 	bl	8005178 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	685a      	ldr	r2, [r3, #4]
 8006860:	4b0a      	ldr	r3, [pc, #40]	; (800688c <vPortFree+0xbc>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4413      	add	r3, r2
 8006866:	4a09      	ldr	r2, [pc, #36]	; (800688c <vPortFree+0xbc>)
 8006868:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800686a:	6938      	ldr	r0, [r7, #16]
 800686c:	f000 f874 	bl	8006958 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006870:	4b07      	ldr	r3, [pc, #28]	; (8006890 <vPortFree+0xc0>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	3301      	adds	r3, #1
 8006876:	4a06      	ldr	r2, [pc, #24]	; (8006890 <vPortFree+0xc0>)
 8006878:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800687a:	f7fe fc8b 	bl	8005194 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800687e:	bf00      	nop
 8006880:	3718      	adds	r7, #24
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	20004f64 	.word	0x20004f64
 800688c:	20004f54 	.word	0x20004f54
 8006890:	20004f60 	.word	0x20004f60

08006894 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006894:	b480      	push	{r7}
 8006896:	b085      	sub	sp, #20
 8006898:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800689a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800689e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80068a0:	4b27      	ldr	r3, [pc, #156]	; (8006940 <prvHeapInit+0xac>)
 80068a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f003 0307 	and.w	r3, r3, #7
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d00c      	beq.n	80068c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	3307      	adds	r3, #7
 80068b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f023 0307 	bic.w	r3, r3, #7
 80068ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80068bc:	68ba      	ldr	r2, [r7, #8]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	1ad3      	subs	r3, r2, r3
 80068c2:	4a1f      	ldr	r2, [pc, #124]	; (8006940 <prvHeapInit+0xac>)
 80068c4:	4413      	add	r3, r2
 80068c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80068cc:	4a1d      	ldr	r2, [pc, #116]	; (8006944 <prvHeapInit+0xb0>)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80068d2:	4b1c      	ldr	r3, [pc, #112]	; (8006944 <prvHeapInit+0xb0>)
 80068d4:	2200      	movs	r2, #0
 80068d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	68ba      	ldr	r2, [r7, #8]
 80068dc:	4413      	add	r3, r2
 80068de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80068e0:	2208      	movs	r2, #8
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	1a9b      	subs	r3, r3, r2
 80068e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f023 0307 	bic.w	r3, r3, #7
 80068ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	4a15      	ldr	r2, [pc, #84]	; (8006948 <prvHeapInit+0xb4>)
 80068f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80068f6:	4b14      	ldr	r3, [pc, #80]	; (8006948 <prvHeapInit+0xb4>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2200      	movs	r2, #0
 80068fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80068fe:	4b12      	ldr	r3, [pc, #72]	; (8006948 <prvHeapInit+0xb4>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2200      	movs	r2, #0
 8006904:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	68fa      	ldr	r2, [r7, #12]
 800690e:	1ad2      	subs	r2, r2, r3
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006914:	4b0c      	ldr	r3, [pc, #48]	; (8006948 <prvHeapInit+0xb4>)
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	4a0a      	ldr	r2, [pc, #40]	; (800694c <prvHeapInit+0xb8>)
 8006922:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	4a09      	ldr	r2, [pc, #36]	; (8006950 <prvHeapInit+0xbc>)
 800692a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800692c:	4b09      	ldr	r3, [pc, #36]	; (8006954 <prvHeapInit+0xc0>)
 800692e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006932:	601a      	str	r2, [r3, #0]
}
 8006934:	bf00      	nop
 8006936:	3714      	adds	r7, #20
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr
 8006940:	20001348 	.word	0x20001348
 8006944:	20004f48 	.word	0x20004f48
 8006948:	20004f50 	.word	0x20004f50
 800694c:	20004f58 	.word	0x20004f58
 8006950:	20004f54 	.word	0x20004f54
 8006954:	20004f64 	.word	0x20004f64

08006958 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006958:	b480      	push	{r7}
 800695a:	b085      	sub	sp, #20
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006960:	4b28      	ldr	r3, [pc, #160]	; (8006a04 <prvInsertBlockIntoFreeList+0xac>)
 8006962:	60fb      	str	r3, [r7, #12]
 8006964:	e002      	b.n	800696c <prvInsertBlockIntoFreeList+0x14>
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	60fb      	str	r3, [r7, #12]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	429a      	cmp	r2, r3
 8006974:	d8f7      	bhi.n	8006966 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	68ba      	ldr	r2, [r7, #8]
 8006980:	4413      	add	r3, r2
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	429a      	cmp	r2, r3
 8006986:	d108      	bne.n	800699a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	685a      	ldr	r2, [r3, #4]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	441a      	add	r2, r3
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	68ba      	ldr	r2, [r7, #8]
 80069a4:	441a      	add	r2, r3
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d118      	bne.n	80069e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	4b15      	ldr	r3, [pc, #84]	; (8006a08 <prvInsertBlockIntoFreeList+0xb0>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d00d      	beq.n	80069d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	685a      	ldr	r2, [r3, #4]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	441a      	add	r2, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	601a      	str	r2, [r3, #0]
 80069d4:	e008      	b.n	80069e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80069d6:	4b0c      	ldr	r3, [pc, #48]	; (8006a08 <prvInsertBlockIntoFreeList+0xb0>)
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	601a      	str	r2, [r3, #0]
 80069de:	e003      	b.n	80069e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d002      	beq.n	80069f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069f6:	bf00      	nop
 80069f8:	3714      	adds	r7, #20
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	20004f48 	.word	0x20004f48
 8006a08:	20004f50 	.word	0x20004f50

08006a0c <memset>:
 8006a0c:	4402      	add	r2, r0
 8006a0e:	4603      	mov	r3, r0
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d100      	bne.n	8006a16 <memset+0xa>
 8006a14:	4770      	bx	lr
 8006a16:	f803 1b01 	strb.w	r1, [r3], #1
 8006a1a:	e7f9      	b.n	8006a10 <memset+0x4>

08006a1c <__libc_init_array>:
 8006a1c:	b570      	push	{r4, r5, r6, lr}
 8006a1e:	4d0d      	ldr	r5, [pc, #52]	; (8006a54 <__libc_init_array+0x38>)
 8006a20:	4c0d      	ldr	r4, [pc, #52]	; (8006a58 <__libc_init_array+0x3c>)
 8006a22:	1b64      	subs	r4, r4, r5
 8006a24:	10a4      	asrs	r4, r4, #2
 8006a26:	2600      	movs	r6, #0
 8006a28:	42a6      	cmp	r6, r4
 8006a2a:	d109      	bne.n	8006a40 <__libc_init_array+0x24>
 8006a2c:	4d0b      	ldr	r5, [pc, #44]	; (8006a5c <__libc_init_array+0x40>)
 8006a2e:	4c0c      	ldr	r4, [pc, #48]	; (8006a60 <__libc_init_array+0x44>)
 8006a30:	f000 f826 	bl	8006a80 <_init>
 8006a34:	1b64      	subs	r4, r4, r5
 8006a36:	10a4      	asrs	r4, r4, #2
 8006a38:	2600      	movs	r6, #0
 8006a3a:	42a6      	cmp	r6, r4
 8006a3c:	d105      	bne.n	8006a4a <__libc_init_array+0x2e>
 8006a3e:	bd70      	pop	{r4, r5, r6, pc}
 8006a40:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a44:	4798      	blx	r3
 8006a46:	3601      	adds	r6, #1
 8006a48:	e7ee      	b.n	8006a28 <__libc_init_array+0xc>
 8006a4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a4e:	4798      	blx	r3
 8006a50:	3601      	adds	r6, #1
 8006a52:	e7f2      	b.n	8006a3a <__libc_init_array+0x1e>
 8006a54:	08006b00 	.word	0x08006b00
 8006a58:	08006b00 	.word	0x08006b00
 8006a5c:	08006b00 	.word	0x08006b00
 8006a60:	08006b04 	.word	0x08006b04

08006a64 <memcpy>:
 8006a64:	440a      	add	r2, r1
 8006a66:	4291      	cmp	r1, r2
 8006a68:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a6c:	d100      	bne.n	8006a70 <memcpy+0xc>
 8006a6e:	4770      	bx	lr
 8006a70:	b510      	push	{r4, lr}
 8006a72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a7a:	4291      	cmp	r1, r2
 8006a7c:	d1f9      	bne.n	8006a72 <memcpy+0xe>
 8006a7e:	bd10      	pop	{r4, pc}

08006a80 <_init>:
 8006a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a82:	bf00      	nop
 8006a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a86:	bc08      	pop	{r3}
 8006a88:	469e      	mov	lr, r3
 8006a8a:	4770      	bx	lr

08006a8c <_fini>:
 8006a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a8e:	bf00      	nop
 8006a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a92:	bc08      	pop	{r3}
 8006a94:	469e      	mov	lr, r3
 8006a96:	4770      	bx	lr
