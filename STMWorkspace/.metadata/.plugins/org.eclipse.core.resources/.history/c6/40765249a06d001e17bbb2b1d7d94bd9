/*
 * Anfangs eigensgeschriebene display LCD Ausgabe, fuer das Ende vom Projekt
 * wird aber die performantere display.o vom Prof. Margull verwendet
*/

#include <stm32f407xx.h>
//#include "fonts.h"
#include "mcpr_timer.h"
#include "_mcpr_aufgabe3.h"
#include "display.h"
#include <stdio.h>

void mcpr_LCD_InitPorts(void)
{
	// GPIOB Takt aktivieren | wird anscheinend nicht benoetigt
	// RCC->AHB1ENR |= 1<<1;
	
	// GPIOD und GPIOE Takt aktivieren, falls zuvor nicht geschehen
	RCC->AHB1ENR |= 1<<3;
	RCC->AHB1ENR |= 1<<4;
	
	// benoetigte Datenleitungen und Steuerleitung zuruecksetzen falls zuvor noch nicht geschehen
	// 0b0000 0011 0000 0000 0011 0000 0011 0000
	GPIOD->MODER &= 0x03003030;
	
	// Datenleitungen und Steuerleitungen neusetzen
	// 0b0101 0100 0101 0101 0100 0101 0100 0101
	GPIOD->MODER |= 0x54554545;
	
	// GPIOE Daten u. Steuerleitung zuruecksetzen
	// 0b0000 0000 0000 0000 0011 1111 0011 1111
	GPIOE->MODER &= 0x00003F3F;
	
	// GPIOE Daten u Steuerleitungen neusetzen
	// 0b0101 0101 0101 0101 0100 0000 0100 0000
	GPIOE->MODER |= 0x55554040;
	
	// GPIOB Steuerleitungen zuruecksetzen
	//
	// GPIOB->MODER &=;
	// GPIOB->MODER |=;
}

// Wrapper fuer die display.o benoetigte Funktion
void LCD_Output16BitWord(uint16_t data)
{
	mcpr_LCD_Output16BitWord(data);
}

void mcpr_LCD_Output16BitWord(uint16_t data)
{
  // Die Bits 0 und 1 von data muessen auf Port D, Bits 14 und 15 ausgegeben werden
	// Die Bits 2 und 3 von data muessen auf Port D, Bit 0 und Bit 1 ausgegeben werden 0000 1100
	// Die Bits 13 bis 15 muessen auf Port D, Bit 8 bis 10 ausgegeben werden 1110
	// Bitmaske ergibt sich aus den zusetzenden bits auf dem port
	GPIOD->ODR &= ~(0xC703u);
	GPIOD->ODR |= (((data & 0x3u)<<14) | ((data & 0x0Cu) >> 2) | ((data & 0xE000u) >> 5));
	
	// Die Bits 4 bis 12 muessen auf Port E, Bit 7 bis 15 ausgegeben werden
	// Bitmaske ergibt sich aus den zusetzenden bits auf dem port
	GPIOE->ODR &= ~(0xFF80u);
	GPIOE->ODR |= (data & 0x1FF0u) << 3;	
}

void mcpr_LCD_WriteData(uint16_t data) // wie das mit den delays is, keine Ahnung
{
	// Aktivieren des Displays CS -> CHIP SELECT
	// Mit PD7 = Low waehlt der Mikrocontroller externe Bausteine an (hier IC3 o. Display).
	// Bei PD7 = High kann an den externen Bausteinen nichts geaendert werden.
	// PD11 = High wird von den externen Bausteinen der IC3 fuer die LEDs ausgewaehlt,
	// PD11 = Low waehlt das Display aus.
	GPIOD->ODR &= ~(1u<<7);
	GPIOD->ODR &= ~(1u<<11);
	
	// PD5 auf HIGH setzen
	GPIOD->ODR |= 1<<5;
	
	// RD muss waehrend des Zugriffs immer 1 sein, setze PD4 auf 1
	GPIOD->ODR |= 1<<4;
	
	// Wir schreiben Daten also PE3 (DC) auf 1 setzen;
	GPIOE->ODR |= 1<<3;
	
	// LOW PD5
	GPIOD->ODR ^= 1<<5;
	
	// Daten ans Display schreiben
	mcpr_LCD_Output16BitWord(data);
	
	// PD5 wieder HIGH setzen, da bei steigender Flanke die Daten am Grafikcontroller uebernommen werden
	GPIOD->ODR ^= 1<<5;
	
	// Ziehe PD7 wieder auf HIGH
	GPIOD->ODR |= 1<<7;	
	// PD5 wieder auf LOW ziehen? Die Low-aktiven Steuerleitungen /RD, /WR und /CS muessen vor dem Reset deaktiviert werden (d.h. auf 1 gesetzt werden).
	// GPIOD->ODR &= ~(1u<<5);
}

void mcpr_LCD_WriteCommand(uint16_t data) // wie das mit den delays is, keine Ahnung
{
	// Aktivieren des Displays CS -> CHIP SELECT
	// Mit PD7 = Low waehlt der Mikrocontroller externe Bausteine an (hier IC3 o. Display).
	// Bei PD7 = High kann an den externen Bausteinen nichts geaendert werden.
	// PD11 = High wird von den externen Bausteinen der IC3 fuer die LEDs ausgewaehlt,
	// PD11 = Low waehlt das Display aus.
	GPIOD->ODR &= ~(1u<<7);
	GPIOD->ODR &= ~(1u<<11);
	
	// PD5 auf HIGH setzen
	GPIOD->ODR |= 1<<5;
	
	// RD muss waehrend des Zugriffs immer 1 sein, setze PD4 auf 1
	GPIOD->ODR |= 1<<4;
	
	// Wir schreiben Kommandos also PE3 (DC) auf 0 setzen;
	GPIOE->ODR &= ~(1u<<3);
	
	// LOW PD5
	GPIOD->ODR ^= 1<<5;
	
	// Daten ans Display schreiben
	mcpr_LCD_Output16BitWord(data);
	
	// PD5 wieder HIGH setzen, da bei steigender Flanke die Daten am Grafikcontroller uebernommen werden
	GPIOD->ODR ^= 1<<5;
	
	// Ziehe PD7 wieder auf HIGH
	GPIOD->ODR |= 1<<7;	
	// PD5 wieder auf LOW ziehen? Die Low-aktiven Steuerleitungen /RD, /WR und /CS muessen vor dem Reset deaktiviert werden (d.h. auf 1 gesetzt werden).
	// GPIOD->ODR &= ~(1u<<5);	
}
void mcpr_LCD_WriteReg(uint16_t cmd, uint16_t data)
{
	mcpr_LCD_WriteCommand(cmd);
	mcpr_LCD_WriteData(data);	
}

void mcpr_LCD_Init(void)
{
	// helper function
	mcpr_LCD_InitPorts();

	// Low Impuls auf die Reset Leitung
	GPIOD->ODR &= ~(1u<<3);
	// min 15 us sekunden warten 
	u_delay(30);
	// anschliessend high setzen
	GPIOD->ODR |= 1<<3;

	// Initialisierung
	mcpr_LCD_WriteReg(0x0010, 0x0001); /* Enter sleep mode */
	mcpr_LCD_WriteReg(0x001E, 0x00B2); /* Set initial power parameters. */
	mcpr_LCD_WriteReg(0x0028, 0x0006); /* Set initial power parameters. */
	mcpr_LCD_WriteReg(0x0000, 0x0001); /* Start the oscillator.*/
	mcpr_LCD_WriteReg(0x0001, 0x72EF); /* Set pixel format and basic display orientation */
	mcpr_LCD_WriteReg(0x0002, 0x0600);
	mcpr_LCD_WriteReg(0x0010, 0x0000); /* Exit sleep mode.*/ 
	// 30ms warten weniger geht meist auch
	m_delay(30);
	mcpr_LCD_WriteReg(0x0011, 0x6870); /* Configure pixel color format and MCU interface parameters.*/
	mcpr_LCD_WriteReg(0x0012, 0x0999); /* Set analog parameters */
	mcpr_LCD_WriteReg(0x0026, 0x3800);
	mcpr_LCD_WriteReg(0x0007, 0x0033); /* Enable the display */
	mcpr_LCD_WriteReg(0x000C, 0x0005); /* Set VCIX2 voltage to 6.1V.*/
	mcpr_LCD_WriteReg(0x000D, 0x000A); /* Configure Vlcd63 and VCOMl */
	mcpr_LCD_WriteReg(0x000E, 0x2E00);
	mcpr_LCD_WriteReg(0x0044, (240-1) << 8); /* Set the display size and ensure that the GRAM window	is set to allow access to the full display buffer.*/
	mcpr_LCD_WriteReg(0x0045, 0x0000);
	mcpr_LCD_WriteReg(0x0046, 320-1);
	mcpr_LCD_WriteReg(0x004E, 0x0000); /*Set cursor to 0,0 */
	mcpr_LCD_WriteReg(0x004F, 0x0000);
	LCD_ClearDisplay(BACKGROUND); // Clear Display
}

// uint16_t, da die Koordinaten Register, garnicht groesser sind?
void mcpr_LCD_SetCursor(const uint16_t x, const uint16_t y)
{
	// SSD2119_X_RAM_ADDR_REG 0x4E
	// SSD2119_Y_RAM_ADDR_REG 0x4F
	mcpr_LCD_WriteReg(0x004E, x); // Set GDDRAM X 
	mcpr_LCD_WriteReg(0x004F, y); // Set GDDRAM Y
}

void mcpr_LCD_DrawPixel(uint16_t color)
{
	// Write Data to GRAM (R22h)
	mcpr_LCD_WriteReg(0x0022, color);
}

void mcpr_LCD_ClearDisplay(uint16_t color)
{
	// die x-Koordinate des Cursors zw. 0 und 319 liegen und die y-Koordinate zw. 0 und 239
	// Die Position des Cursors inkrementiert sich automatisch. Wuerden also noch weitere Datenzugriffe erfolgen, ergaebe sich eine horizontale Linie.	
	mcpr_LCD_SetCursor(0x0, 0x0);
	
	// Optimierung: kein erneutes Aufrufen der DrawPixel Fkt. 
	// stattdessen wiederholtes ausloesen einer Write Flanke, da Color
	// Information sich nicht veraendern und Cursor automatisch inkrementiert wird
	for (uint32_t i = 0; i < DISPLAY_WIDTH*DISPLAY_HEIGHT; i++)
	{
		mcpr_LCD_DrawPixel(color);
	}
	
}

void mcpr_LCD_WriteLetter(uint16_t x, uint16_t y, uint16_t colorfg, uint16_t colorbg, uint8_t c)
{
	int pix_byte = 0;

	// setze initial den Cursor auf x y
	mcpr_LCD_SetCursor(x, y);

	for (uint8_t i = 0; i < 31; i++)
  {
		pix_byte = console_font_12x16[(32*(int)c)+i];
    for (uint8_t k = 8; k > 0; k--)
    {
			// Schreibe ein pixel mit der farbe fg wenn 1 und ein pixel mir farbe bg wenn 0
			// alternativ kann das umgeschrieben werden um nicht extra ein pixel zu schreiben wenn 0
			(pix_byte & (1<<(k-1))) ? mcpr_LCD_DrawPixel(colorfg) : mcpr_LCD_DrawPixel(colorbg);
    }
			// setze Cursor auf anfangs position x und inkrementiere y um 1 um in die naechste zeile zu springen
			if (i%2 != 0)
				mcpr_LCD_SetCursor(x, y+=1);
	}
}

void mcpr_LCD_WriteString(uint16_t x, uint16_t y, uint16_t colorfg, uint16_t colorbg, char str[MAX_STR_LEN])
{
	while (*str != '\0')
	{
		mcpr_LCD_WriteLetter(x, y, colorfg, colorbg, *str);
		// naechster Buchstabe
		str+=1;
		// springe ein Zeichen nach rechts
		x+=12;
	}
}

//__attribute__((noreturn)) void mcpr_DisplayMessung(void)
//{
//	uint16_t colorbg = 0xF800; // Rot
//	uint16_t colorfg = 0x0000;
//	
//	// Hintergrund Beleuchtung einschalten
//	GPIOD->ODR |= 1<<13;
//	
//	while(1) {
//		// toggle Pin PD12 (gruene LED)
//		GPIOD->ODR ^= 0x1000;
//		mcpr_LCD_ClearDisplay(colorbg); // loesche das Display
//		// gib einen Text aus
//		mcpr_LCD_WriteString( 20, 220, colorfg, colorbg, "Hallo Welt!");
//		// Wechsle Farbe
//		colorfg = colorbg;
//		colorbg = ~colorbg;		
//	}
//}

//void mcpr_DisplayMessungV2(void)
//{
//	uint16_t colorbg = 0xF800; // Rot
//	uint16_t colorfg = 0x0000;
//	
//	// Hintergrund Beleuchtung einschalten
//	GPIOD->ODR |= 1<<13;
//	
//	for (uint8_t i = 0; i < 2; i++) {
//		// toggle Pin PD12 (gruene LED)
//		//GPIOD->ODR ^= 0x1000;
//		mcpr_LCD_ClearDisplay(colorbg); // loesche das Display
//		// gib einen Text aus
//		mcpr_LCD_WriteString( 20, 220, colorfg, colorbg, "Hallo Welt!");
//		// Wechsle Farbe
//		colorfg = colorbg;
//		colorbg = ~colorbg;		
//	}
//}




